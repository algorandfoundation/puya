#pragma version 10
#pragma typetrack false

// test_cases.mutable_native_types.contract.Contract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 8 48
    bytecblock "nested" "num_payments" "payments" 0x70 0x6c "box" 0x0000 0x151f7c75 "box_map"
    pushbytes ""
    dup
    txn ApplicationID
    bnz main_after_if_else@2
    txn NumAppArgs
    dup
    itob
    swap
    itob
    concat
    txn NumAppArgs
    intc_1 // 1
    +
    txn NumAppArgs
    intc_1 // 1
    +
    swap
    itob
    swap
    itob
    concat
    txn NumAppArgs
    intc_1 // 1
    +
    txn NumAppArgs
    intc_1 // 1
    +
    swap
    itob
    swap
    itob
    concat
    cover 2
    concat
    swap
    concat
    bytec_0 // "nested"
    swap
    app_global_put
    txn NumAppArgs
    dup
    itob
    swap
    itob
    concat
    pushbytes 0x0016
    concat
    pushbytes 0x0018
    concat
    pushbytes 0x001a
    concat
    bytec 6 // 0x0000
    concat
    bytec 6 // 0x0000
    concat
    bytec 6 // 0x0000
    concat
    pushbytes "dyn"
    swap
    app_global_put
    bytec_1 // "num_payments"
    intc_0 // 0
    app_global_put
    pushint 384 // 384
    bzero
    bytec_2 // "payments"
    swap
    app_global_put

main_after_if_else@2:
    txn NumAppArgs
    bz main_bare_routing@16
    pushbytess 0xd1276f81 0x0d2ab4c0 0xe8b5d56c 0x875901e5 0xaf05f48f 0xe8d71c8c 0x01aaa39c 0x8313dee7 0x2ca849c1 // method "fixed_initialize()void", method "add_payment((address,uint64,uint64))void", method "increment_payment(uint64,uint64)void", method "create_storage(uint64)void", method "delete_storage(uint64)void", method "struct_arg(uint64,(uint64,uint64))void", method "struct_return()(uint64,uint64)", method "tup_return()(uint64,uint64)", method "calculate_sum()uint64"
    txna ApplicationArgs 0
    match main_fixed_initialize_route@5 main_add_payment_route@6 main_increment_payment_route@7 main_create_storage_route@8 main_delete_storage_route@9 main_struct_arg_route@10 main_struct_return_route@11 main_tup_return_route@12 main_calculate_sum_route@13

main_after_if_else@18:
    intc_0 // 0
    return

main_calculate_sum_route@13:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    dup
    extract 0 16 // on error: Index access is out of bounds
    swap
    extract 16 16 // on error: Index access is out of bounds
    dig 1
    intc_0 // 0
    extract_uint64
    uncover 2
    intc_2 // 8
    extract_uint64
    +
    dig 1
    intc_0 // 0
    extract_uint64
    uncover 2
    intc_2 // 8
    extract_uint64
    +
    +
    dup
    bury 3
    dup
    pushint 100 // 100
    <
    swap
    bury 2
    bz main_after_if_else@15
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    extract 32 16 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    extract_uint64
    swap
    intc_2 // 8
    extract_uint64
    dig 3
    uncover 2
    +
    +
    bury 1

main_after_if_else@15:
    dup
    itob
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_tup_return_route@12:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    extract 32 16 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    extract_uint64
    swap
    intc_2 // 8
    extract_uint64
    swap
    itob
    swap
    itob
    concat
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_struct_return_route@11:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    extract 0 16 // on error: Index access is out of bounds
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_struct_arg_route@10:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    dig 1
    replace2 0
    bytec_0 // "nested"
    swap
    app_global_put
    intc_0 // 0
    bytec_3 // 0x70
    app_global_get_ex
    assert // check self.nested_proxy exists
    dig 1
    replace2 0
    bytec_3 // 0x70
    swap
    app_global_put
    txn Sender
    dup
    intc_0 // 0
    bytec 4 // 0x6c
    app_local_get_ex
    assert // check self.nested_local exists for account
    dig 2
    replace2 0
    bytec 4 // 0x6c
    swap
    app_local_put
    bytec 5 // "box"
    box_get
    assert // check self.box exists
    dig 1
    replace2 0
    bytec 5 // "box"
    swap
    box_put
    swap
    itob
    bytec 8 // "box_map"
    swap
    concat
    dup
    box_get
    assert // check self.box_map entry exists
    uncover 2
    replace2 0
    box_put
    intc_1 // 1
    return

main_delete_storage_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    bytec_3 // 0x70
    app_global_del
    txn Sender
    bytec 4 // 0x6c
    app_local_del
    bytec 5 // "box"
    box_del
    pop
    itob
    bytec 8 // "box_map"
    swap
    concat
    box_del
    pop
    intc_1 // 1
    return

main_create_storage_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    bytec_3 // 0x70
    swap
    app_global_put
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    txn Sender
    bytec 4 // 0x6c
    dig 2
    app_local_put
    bytec 5 // "box"
    pushint 2064 // 2064
    box_create
    assert // expected box to not exist
    extract 0 16 // on error: Index access is out of bounds
    swap
    itob
    bytec 8 // "box_map"
    swap
    concat
    dup
    box_get
    assert // check self.box_map entry exists
    uncover 2
    replace2 0
    box_put
    intc_1 // 1
    return

main_increment_payment_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    intc_0 // 0
    bytec_1 // "num_payments"
    app_global_get_ex
    assert // check self.num_payments exists
    dig 2
    >
    assert // invalid payment index
    intc_0 // 0
    bytec_2 // "payments"
    app_global_get_ex
    assert // check self.payments exists
    dig 2
    intc_3 // 48
    *
    dup2
    intc_3 // 48
    extract3 // on error: Index access is out of bounds
    dup
    pushint 40 // 40
    extract_uint64
    uncover 4
    +
    itob
    replace2 40
    uncover 3
    intc_2 // 8
    <
    assert // Index access is out of bounds
    replace3
    bytec_2 // "payments"
    swap
    app_global_put
    intc_1 // 1
    return

main_add_payment_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    intc_0 // 0
    bytec_1 // "num_payments"
    app_global_get_ex
    assert // check self.num_payments exists
    dup
    intc_2 // 8
    <
    assert // too many payments
    intc_0 // 0
    bytec_2 // "payments"
    app_global_get_ex
    assert // check self.payments exists
    swap
    intc_3 // 48
    *
    uncover 2
    replace3
    bytec_2 // "payments"
    swap
    app_global_put
    intc_0 // 0
    bytec_1 // "num_payments"
    app_global_get_ex
    assert // check self.num_payments exists
    intc_1 // 1
    +
    bytec_1 // "num_payments"
    swap
    app_global_put
    intc_1 // 1
    return

main_fixed_initialize_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_1 // 1
    return

main_bare_routing@16:
    txn OnCompletion
    bnz main_after_if_else@18
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return
