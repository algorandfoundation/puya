#pragma version 10
#pragma typetrack false

// test_cases.mutable_native_types.contract.Contract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 16 8
    bytecblock "nested" "num_payments" "payments" 0x151f7c75 0x70 0x6c "box" "box_map" 0x0000
    intc_0 // 0
    dup
    pushbytes ""
    dupn 2
    intc_1 // 1
    txn ApplicationID
    bnz main_after_if_else@2
    txn NumAppArgs
    dup
    itob
    swap
    itob
    concat
    txn NumAppArgs
    intc_1 // 1
    +
    txn NumAppArgs
    intc_1 // 1
    +
    swap
    itob
    swap
    itob
    concat
    txn NumAppArgs
    intc_1 // 1
    +
    txn NumAppArgs
    intc_1 // 1
    +
    uncover 3
    uncover 3
    concat
    uncover 2
    itob
    uncover 2
    itob
    concat
    concat
    bytec_0 // "nested"
    swap
    app_global_put
    txn NumAppArgs
    dup
    itob
    swap
    itob
    concat
    pushbytes 0x00160018001a000000000000
    concat
    pushbytes "dyn"
    swap
    app_global_put
    bytec_1 // "num_payments"
    intc_0 // 0
    app_global_put
    pushint 96 // 96
    bzero
    bytec_2 // "payments"
    swap
    app_global_put

main_after_if_else@2:
    txn NumAppArgs
    bz main_bare_routing@20
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert
    pushbytess 0x67a5a02d 0xd1276f81 0x0d2ab4c0 0xe8b5d56c 0x875901e5 0x4abb70f1 0xaf05f48f 0xe8d71c8c 0x01aaa39c 0x8313dee7 0x2ca849c1 0x3d8e707d // method "test_imm_fixed_array()void", method "fixed_initialize()void", method "add_payment((address,uint64,uint64))void", method "increment_payment(uint64,uint64)void", method "create_storage(uint64)void", method "local_struct()(address,uint64,uint64)", method "delete_storage(uint64)void", method "struct_arg(uint64,(uint64,uint64))void", method "struct_return()(uint64,uint64)", method "tup_return()(uint64,uint64)", method "calculate_sum()uint64", method "test_arr((uint64,uint64)[])(uint64,uint64)[]"
    txna ApplicationArgs 0
    match main_test_imm_fixed_array_route@6 main_test_imm_fixed_array_route@6 main_add_payment_route@8 main_increment_payment_route@9 main_create_storage_route@10 main_local_struct_route@11 main_delete_storage_route@12 main_struct_arg_route@13 main_struct_return_route@14 main_tup_return_route@15 main_calculate_sum_route@16 main_test_arr_route@17
    err

main_test_arr_route@17:
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16
    dup
    !
    assert // expected empty array
    dig 1
    extract 2 0
    dup
    len
    intc_2 // 16
    /
    dig 2
    dig 1
    ==
    assert // expected arrays to be the same length
    itob
    extract 6 2
    swap
    concat
    dig 2
    ==
    assert // expected arrays to be the same
    txn NumAppArgs
    intc_1 // 1
    +
    txn NumAppArgs
    pushint 2 // 2
    +
    swap
    itob
    swap
    itob
    concat
    dup
    bury 8
    dig 2
    swap
    concat // on error: max array length exceeded
    swap
    intc_1 // 1
    +
    itob
    extract 6 2
    replace2 0
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    assert // expected array to have 1 item
    dup
    callsub sum_frozen_arr
    pushint 7 // 7
    ==
    assert // expected sum to be 7
    swap
    dig 1
    !=
    assert // expected arrays to be different
    dup
    extract 2 0
    dig 1
    extract 2 16
    pushbytes 0x0001
    swap
    concat
    dig 2
    ==
    assert // expected arrays to be the same
    bytec 8 // 0x0000
    cover 2
    bytec 8 // 0x0000
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_2 // 16
    /
    itob
    extract 6 2
    replace2 0
    ==
    assert // expected arrays to be the same
    intc_0 // 0
    bury 5
    bury 6

main_for_header@23:
    dig 3
    pushint 3 // 3
    <
    bz main_after_for@25
    dig 5
    dup
    dig 6
    concat // on error: max array length exceeded
    swap
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    replace2 0
    bury 6
    dig 3
    intc_1 // 1
    +
    bury 4
    b main_for_header@23

main_after_for@25:
    dig 5
    dup
    intc_0 // 0
    extract_uint16
    dup
    pushint 3 // 3
    ==
    assert // expected 3 elements
    dig 1
    callsub sum_frozen_arr
    pushint 21 // 21
    ==
    assert // expected sum to be 21
    intc_1 // 1
    -
    itob
    extract 6 0
    dig 1
    swap
    replace2 0
    dup
    len
    intc_2 // 16
    -
    intc_0 // 0
    swap
    substring3
    swap
    callsub sum_frozen_arr
    pushint 21 // 21
    ==
    assert // expected sum to be 21
    dup
    callsub sum_frozen_arr
    pushint 14 // 14
    ==
    assert // expected sum to be 14
    dup
    extract 2 0
    dig 1
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_2 // 16
    /
    itob
    extract 6 2
    replace2 0
    callsub sum_frozen_arr
    pushint 28 // 28
    ==
    assert // and the sum shall be 41
    pushbytes "arr"
    dig 1
    app_global_put
    dig 5
    len
    intc_2 // 16
    /
    assert
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    return

main_calculate_sum_route@16:
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    dup
    extract 0 16
    swap
    extract 16 16
    dig 1
    intc_0 // 0
    extract_uint64
    uncover 2
    intc_3 // 8
    extract_uint64
    +
    dig 1
    intc_0 // 0
    extract_uint64
    uncover 2
    intc_3 // 8
    extract_uint64
    +
    +
    dup
    bury 4
    dup
    pushint 100 // 100
    <
    swap
    bury 3
    bz main_after_if_else@29
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    extract 32 16
    dup
    intc_0 // 0
    extract_uint64
    swap
    intc_3 // 8
    extract_uint64
    dig 4
    uncover 2
    +
    +
    bury 2

main_after_if_else@29:
    dig 1
    itob
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    return

main_tup_return_route@15:
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    extract 32 16
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    return

main_struct_return_route@14:
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    extract 0 16
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    return

main_struct_arg_route@13:
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    dig 1
    replace2 0
    bytec_0 // "nested"
    swap
    app_global_put
    intc_0 // 0
    bytec 4 // 0x70
    app_global_get_ex
    assert // check self.nested_proxy exists
    dig 1
    replace2 0
    bytec 4 // 0x70
    swap
    app_global_put
    txn Sender
    dup
    intc_0 // 0
    bytec 5 // 0x6c
    app_local_get_ex
    assert // check self.nested_local exists for account
    dig 2
    replace2 0
    bytec 5 // 0x6c
    swap
    app_local_put
    bytec 6 // "box"
    intc_0 // 0
    dig 2
    box_replace
    swap
    itob
    bytec 7 // "box_map"
    swap
    concat
    intc_0 // 0
    uncover 2
    box_replace
    return

main_delete_storage_route@12:
    txna ApplicationArgs 1
    btoi
    bytec 4 // 0x70
    app_global_del
    txn Sender
    bytec 5 // 0x6c
    app_local_del
    bytec 6 // "box"
    box_del
    pop
    itob
    bytec 7 // "box_map"
    swap
    concat
    box_del
    pop
    return

main_local_struct_route@11:
    txn Sender
    pushint 1234 // 1234
    itob
    concat
    pushint 567 // 567
    itob
    concat
    dup
    extract 0 32
    dig 1
    pushint 32 // 32
    extract_uint64
    dig 2
    pushint 40 // 40
    extract_uint64
    global ZeroAddress
    uncover 3
    !=
    assert // use foo
    swap
    assert // use bar
    assert // use baz
    callsub do_something
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    return

main_create_storage_route@10:
    txna ApplicationArgs 1
    btoi
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    bytec 4 // 0x70
    swap
    app_global_put
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    txn Sender
    bytec 5 // 0x6c
    dig 2
    app_local_put
    bytec 6 // "box"
    pushint 2064 // 2064
    box_create
    assert // expected box to not exist
    extract 0 16
    swap
    itob
    bytec 7 // "box_map"
    swap
    concat
    intc_0 // 0
    uncover 2
    box_replace
    return

main_increment_payment_route@9:
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    intc_0 // 0
    bytec_1 // "num_payments"
    app_global_get_ex
    assert // check self.num_payments exists
    dig 2
    >
    assert // invalid payment index
    intc_0 // 0
    bytec_2 // "payments"
    app_global_get_ex
    assert // check self.payments exists
    uncover 2
    pushint 48 // 48
    *
    dup2
    pushint 48 // 48
    extract3 // on error: index access is out of bounds
    dup
    pushint 40 // 40
    extract_uint64
    uncover 4
    +
    itob
    replace2 40
    replace3 // on error: index access is out of bounds
    bytec_2 // "payments"
    swap
    app_global_put
    return

main_add_payment_route@8:
    txna ApplicationArgs 1
    intc_0 // 0
    bytec_1 // "num_payments"
    app_global_get_ex
    assert // check self.num_payments exists
    dup
    pushint 2 // 2
    <
    assert // too many payments
    intc_0 // 0
    bytec_2 // "payments"
    app_global_get_ex
    assert // check self.payments exists
    swap
    pushint 48 // 48
    *
    uncover 2
    replace3 // on error: index access is out of bounds
    bytec_2 // "payments"
    swap
    app_global_put
    intc_0 // 0
    bytec_1 // "num_payments"
    app_global_get_ex
    assert // check self.num_payments exists
    intc_1 // 1
    +
    bytec_1 // "num_payments"
    swap
    app_global_put
    return

main_test_imm_fixed_array_route@6:
    return

main_bare_routing@20:
    txn OnCompletion
    !
    assert
    txn ApplicationID
    !
    return // on error: can only call when creating


// test_cases.mutable_native_types.contract.sum_frozen_arr(arr: bytes) -> uint64:
sum_frozen_arr:
    proto 1 1
    intc_0 // 0
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_0 // 0

sum_frozen_arr_for_header@1:
    frame_dig 2
    frame_dig 1
    <
    bz sum_frozen_arr_after_for@4
    frame_dig -1
    extract 2 0
    frame_dig 2
    dup
    cover 2
    intc_2 // 16
    *
    intc_2 // 16
    extract3 // on error: index access is out of bounds
    dup
    intc_0 // 0
    extract_uint64
    frame_dig 0
    +
    swap
    intc_3 // 8
    extract_uint64
    +
    frame_bury 0
    intc_1 // 1
    +
    frame_bury 2
    b sum_frozen_arr_for_header@1

sum_frozen_arr_after_for@4:
    retsub


// test_cases.mutable_native_types.contract.do_something(pay: bytes) -> bytes:
do_something:
    proto 1 1
    frame_dig -1
    retsub
