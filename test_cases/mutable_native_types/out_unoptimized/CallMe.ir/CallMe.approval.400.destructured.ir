main test_cases.mutable_native_types.abi_call.CallMe.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.mutable_native_types.abi_call.CallMe.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.mutable_native_types.abi_call.CallMe.__init__() -> void:
    block@0: // L42
        return 

subroutine test_cases.mutable_native_types.abi_call.CallMe.delete() -> void:
    block@0: // L49
        return 

subroutine test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg(arg: Encoded(uint64,uint64)) -> void:
    block@0: // L53
        (app_global_put "fixed_struct" arg#0)
        return 

subroutine test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret() -> Encoded(uint64,uint64):
    block@0: // L57
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "fixed_struct")
        (assert maybe_exists%0#0) // check self.fixed_struct exists
        return maybe_value%0#0

subroutine test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg(arg: Encoded((uint64,uint64),uint64)) -> void:
    block@0: // L61
        (app_global_put "nested_struct" arg#0)
        return 

subroutine test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret() -> Encoded((uint64,uint64),uint64):
    block@0: // L65
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested_struct")
        (assert maybe_exists%0#0) // check self.nested_struct exists
        return maybe_value%0#0

subroutine test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg(arg: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))) -> void:
    block@0: // L69
        (app_global_put "dynamic_struct" arg#0)
        return 

subroutine test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret() -> Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])):
    block@0: // L73
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "dynamic_struct")
        (assert maybe_exists%0#0) // check self.dynamic_struct exists
        return maybe_value%0#0

subroutine test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg(arg: Encoded((uint64,uint64)[3])) -> void:
    block@0: // L77
        (app_global_put "fixed_arr" arg#0)
        return 

subroutine test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret() -> Encoded((uint64,uint64)[3]):
    block@0: // L81
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "fixed_arr")
        (assert maybe_exists%0#0) // check self.fixed_arr exists
        return maybe_value%0#0

subroutine test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg(arg: Encoded(len+(uint64,uint64)[])) -> void:
    block@0: // L85
        (app_global_put "native_arr" arg#0)
        return 

subroutine test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret() -> Encoded(len+(uint64,uint64)[]):
    block@0: // L89
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "native_arr")
        (assert maybe_exists%0#0) // check self.native_arr exists
        return maybe_value%0#0

subroutine test_cases.mutable_native_types.abi_call.CallMe.log_it() -> void:
    block@0: // L93
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "fixed_struct")
        (assert maybe_exists%0#0) // check self.fixed_struct exists
        (log maybe_value%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "nested_struct")
        (assert maybe_exists%1#0) // check self.nested_struct exists
        (log maybe_value%1#0)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "dynamic_struct")
        (assert maybe_exists%2#0) // check self.dynamic_struct exists
        (log maybe_value%2#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_global_get_ex 0u "fixed_arr")
        (assert maybe_exists%3#0) // check self.fixed_arr exists
        (log maybe_value%3#0)
        let (maybe_value%4#0: bytes, maybe_exists%4#0: bool) = (app_global_get_ex 0u "native_arr")
        (assert maybe_exists%4#0) // check self.native_arr exists
        (log maybe_value%4#0)
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L41
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@17
    block@2: // abi_routing_L41
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "delete()void" => block@3, method "fixed_struct_arg((uint64,uint64))void" => block@4, method "fixed_struct_ret()(uint64,uint64)" => block@5, method "nested_struct_arg(((uint64,uint64),uint64))void" => block@6, method "nested_struct_ret()((uint64,uint64),uint64)" => block@7, method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void" => block@8, method "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])" => block@9, method "fixed_arr_arg((uint64,uint64)[3])void" => block@10, method "fixed_arr_ret()(uint64,uint64)[3]" => block@11, method "native_arr_arg((uint64,uint64)[])void" => block@12, method "native_arr_ret()(uint64,uint64)[]" => block@13, method "log_it()void" => block@14, * => block@15}
    block@3: // delete_route_L49
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 DeleteApplication)
        (assert tmp%4#0) // OnCompletion is not DeleteApplication
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.mutable_native_types.abi_call.CallMe.delete()
        let test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0
        goto block@24
    block@4: // fixed_struct_arg_route_L53
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg(reinterpret_Encoded(uint64,uint64)%0#0)
        let test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0
        goto block@24
    block@5: // fixed_struct_ret_route_L57
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        let tmp%15#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret()
        let tmp%16#0: bytes = (concat 0x151f7c75 tmp%15#0)
        (log tmp%16#0)
        let test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0
        goto block@24
    block@6: // nested_struct_arg_route_L61
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (== tmp%17#0 NoOp)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64),uint64)%0#0: Encoded((uint64,uint64),uint64) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg(reinterpret_Encoded((uint64,uint64),uint64)%0#0)
        let test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0
        goto block@24
    block@7: // nested_struct_ret_route_L65
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (== tmp%21#0 NoOp)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        let tmp%24#0: bool = (!= tmp%23#0 0u)
        (assert tmp%24#0) // can only call when not creating
        let tmp%25#0: Encoded((uint64,uint64),uint64) = test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret()
        let tmp%26#0: bytes = (concat 0x151f7c75 tmp%25#0)
        (log tmp%26#0)
        let test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0
        goto block@24
    block@8: // dynamic_struct_arg_route_L69
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (== tmp%27#0 NoOp)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        let tmp%30#0: bool = (!= tmp%29#0 0u)
        (assert tmp%30#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%0#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg(reinterpret_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%0#0)
        let test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0
        goto block@24
    block@9: // dynamic_struct_ret_route_L73
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (== tmp%31#0 NoOp)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        let tmp%34#0: bool = (!= tmp%33#0 0u)
        (assert tmp%34#0) // can only call when not creating
        let tmp%35#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret()
        let tmp%36#0: bytes = (concat 0x151f7c75 tmp%35#0)
        (log tmp%36#0)
        let test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0
        goto block@24
    block@10: // fixed_arr_arg_route_L77
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (== tmp%37#0 NoOp)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        let tmp%40#0: bool = (!= tmp%39#0 0u)
        (assert tmp%40#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64)[3])%0#0: Encoded((uint64,uint64)[3]) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg(reinterpret_Encoded((uint64,uint64)[3])%0#0)
        let test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0
        goto block@24
    block@11: // fixed_arr_ret_route_L81
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (== tmp%41#0 NoOp)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        let tmp%44#0: bool = (!= tmp%43#0 0u)
        (assert tmp%44#0) // can only call when not creating
        let tmp%45#0: Encoded((uint64,uint64)[3]) = test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret()
        let tmp%46#0: bytes = (concat 0x151f7c75 tmp%45#0)
        (log tmp%46#0)
        let test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0
        goto block@24
    block@12: // native_arr_arg_route_L85
        let tmp%47#0: uint64 = (txn OnCompletion)
        let tmp%48#0: bool = (== tmp%47#0 NoOp)
        (assert tmp%48#0) // OnCompletion is not NoOp
        let tmp%49#0: uint64 = (txn ApplicationID)
        let tmp%50#0: bool = (!= tmp%49#0 0u)
        (assert tmp%50#0) // can only call when not creating
        let reinterpret_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg(reinterpret_Encoded(len+(uint64,uint64)[])%0#0)
        let test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0
        goto block@24
    block@13: // native_arr_ret_route_L89
        let tmp%51#0: uint64 = (txn OnCompletion)
        let tmp%52#0: bool = (== tmp%51#0 NoOp)
        (assert tmp%52#0) // OnCompletion is not NoOp
        let tmp%53#0: uint64 = (txn ApplicationID)
        let tmp%54#0: bool = (!= tmp%53#0 0u)
        (assert tmp%54#0) // can only call when not creating
        let tmp%55#0: Encoded(len+(uint64,uint64)[]) = test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret()
        let tmp%56#0: bytes = (concat 0x151f7c75 tmp%55#0)
        (log tmp%56#0)
        let test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0
        goto block@24
    block@14: // log_it_route_L93
        let tmp%57#0: uint64 = (txn OnCompletion)
        let tmp%58#0: bool = (== tmp%57#0 NoOp)
        (assert tmp%58#0) // OnCompletion is not NoOp
        let tmp%59#0: uint64 = (txn ApplicationID)
        let tmp%60#0: bool = (!= tmp%59#0 0u)
        (assert tmp%60#0) // can only call when not creating
        test_cases.mutable_native_types.abi_call.CallMe.log_it()
        let test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0
        goto block@24
    block@15: // switch_case_default_L41
        goto block@16
    block@16: // switch_case_next_L41
        goto block@23
    block@17: // bare_routing_L41
        let tmp%61#0: uint64 = (txn OnCompletion)
        switch tmp%61#0 {0u => block@18, * => block@21}
    block@18: // __algopy_default_create_L1
        let tmp%62#0: uint64 = (txn ApplicationID)
        let tmp%63#0: bool = (== tmp%62#0 0u)
        (assert tmp%63#0) // can only call when creating
        goto block@19
    block@19: // L1
        goto block@20
    block@20: // after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__algopy_default_create_L1
        let test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0
        goto block@24
    block@21: // switch_case_default_L41
        goto block@22
    block@22: // switch_case_next_L41
        goto block@23
    block@23: // after_if_else_L41
        let test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0
        goto block@24
    block@24: // after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router___L1
        return tmp%0#0