#pragma version 10
#pragma typetrack false

// test_cases.mutable_native_types.abi_call.CallMe.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1
    bytecblock 0x151f7c75 "fixed_struct" "nested_struct" "dynamic_struct" "fixed_arr" "native_arr"
    b main_block@0

main_block@0:
    txn ApplicationID
    bnz main_after_if_else@2
    b main_call___init__@1

main_call___init__@1:
    callsub __init__
    b main_after_if_else@2

main_after_if_else@2:
    callsub approval_program
    return


// test_cases.mutable_native_types.abi_call.CallMe.delete[routing]() -> void:
delete:
    b delete_block@0

delete_block@0:
    // mutable_native_types/abi_call.py:49
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    callsub test_cases.mutable_native_types.abi_call.CallMe.delete
    intc_1 // 1
    return


// test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg[routing]() -> void:
fixed_struct_arg:
    b fixed_struct_arg_block@0

fixed_struct_arg_block@0:
    // mutable_native_types/abi_call.py:53
    // @arc4.abimethod()
    txna ApplicationArgs 1
    callsub test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg
    intc_1 // 1
    return


// test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret[routing]() -> void:
fixed_struct_ret:
    b fixed_struct_ret_block@0

fixed_struct_ret_block@0:
    // mutable_native_types/abi_call.py:57
    // @arc4.abimethod()
    callsub test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg[routing]() -> void:
nested_struct_arg:
    b nested_struct_arg_block@0

nested_struct_arg_block@0:
    // mutable_native_types/abi_call.py:61
    // @arc4.abimethod()
    txna ApplicationArgs 1
    callsub test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg
    intc_1 // 1
    return


// test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret[routing]() -> void:
nested_struct_ret:
    b nested_struct_ret_block@0

nested_struct_ret_block@0:
    // mutable_native_types/abi_call.py:65
    // @arc4.abimethod()
    callsub test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg[routing]() -> void:
dynamic_struct_arg:
    b dynamic_struct_arg_block@0

dynamic_struct_arg_block@0:
    // mutable_native_types/abi_call.py:69
    // @arc4.abimethod()
    txna ApplicationArgs 1
    callsub test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg
    intc_1 // 1
    return


// test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret[routing]() -> void:
dynamic_struct_ret:
    b dynamic_struct_ret_block@0

dynamic_struct_ret_block@0:
    // mutable_native_types/abi_call.py:73
    // @arc4.abimethod()
    callsub test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg[routing]() -> void:
fixed_arr_arg:
    b fixed_arr_arg_block@0

fixed_arr_arg_block@0:
    // mutable_native_types/abi_call.py:77
    // @arc4.abimethod()
    txna ApplicationArgs 1
    callsub test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg
    intc_1 // 1
    return


// test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret[routing]() -> void:
fixed_arr_ret:
    b fixed_arr_ret_block@0

fixed_arr_ret_block@0:
    // mutable_native_types/abi_call.py:81
    // @arc4.abimethod()
    callsub test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg[routing]() -> void:
native_arr_arg:
    b native_arr_arg_block@0

native_arr_arg_block@0:
    // mutable_native_types/abi_call.py:85
    // @arc4.abimethod()
    txna ApplicationArgs 1
    callsub test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg
    intc_1 // 1
    return


// test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret[routing]() -> void:
native_arr_ret:
    b native_arr_ret_block@0

native_arr_ret_block@0:
    // mutable_native_types/abi_call.py:89
    // @arc4.abimethod()
    callsub test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.mutable_native_types.abi_call.CallMe.log_it[routing]() -> void:
log_it:
    b log_it_block@0

log_it_block@0:
    // mutable_native_types/abi_call.py:93
    // @arc4.abimethod()
    callsub test_cases.mutable_native_types.abi_call.CallMe.log_it
    intc_1 // 1
    return


// test_cases.mutable_native_types.abi_call.CallMe.__init__() -> void:
__init__:
    b __init___block@0

__init___block@0:
    retsub


// test_cases.mutable_native_types.abi_call.CallMe.delete() -> void:
test_cases.mutable_native_types.abi_call.CallMe.delete:
    b test_cases.mutable_native_types.abi_call.CallMe.delete_block@0

test_cases.mutable_native_types.abi_call.CallMe.delete_block@0:
    retsub


// test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg(arg: bytes) -> void:
test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg:
    // mutable_native_types/abi_call.py:53-54
    // @arc4.abimethod()
    // def fixed_struct_arg(self, arg: FixedStruct) -> None:
    proto 1 0
    b test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg_block@0

test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg_block@0:
    // mutable_native_types/abi_call.py:55
    // self.fixed_struct.value = arg
    bytec_1 // "fixed_struct"
    frame_dig -1
    app_global_put
    retsub


// test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret() -> bytes:
test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret:
    b test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret_block@0

test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret_block@0:
    // mutable_native_types/abi_call.py:59
    // return self.fixed_struct.value
    intc_0 // 0
    bytec_1 // "fixed_struct"
    app_global_get_ex
    assert // check self.fixed_struct exists
    retsub


// test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg(arg: bytes) -> void:
test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg:
    // mutable_native_types/abi_call.py:61-62
    // @arc4.abimethod()
    // def nested_struct_arg(self, arg: NestedStruct) -> None:
    proto 1 0
    b test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg_block@0

test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg_block@0:
    // mutable_native_types/abi_call.py:63
    // self.nested_struct.value = arg
    bytec_2 // "nested_struct"
    frame_dig -1
    app_global_put
    retsub


// test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret() -> bytes:
test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret:
    b test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret_block@0

test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret_block@0:
    // mutable_native_types/abi_call.py:67
    // return self.nested_struct.value
    intc_0 // 0
    bytec_2 // "nested_struct"
    app_global_get_ex
    assert // check self.nested_struct exists
    retsub


// test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg(arg: bytes) -> void:
test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg:
    // mutable_native_types/abi_call.py:69-70
    // @arc4.abimethod()
    // def dynamic_struct_arg(self, arg: DynamicStruct) -> None:
    proto 1 0
    b test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg_block@0

test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg_block@0:
    // mutable_native_types/abi_call.py:71
    // self.dynamic_struct.value = arg.copy()
    bytec_3 // "dynamic_struct"
    frame_dig -1
    app_global_put
    retsub


// test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret() -> bytes:
test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret:
    b test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret_block@0

test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret_block@0:
    // mutable_native_types/abi_call.py:75
    // return self.dynamic_struct.value
    intc_0 // 0
    bytec_3 // "dynamic_struct"
    app_global_get_ex
    assert // check self.dynamic_struct exists
    retsub


// test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg(arg: bytes) -> void:
test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg:
    // mutable_native_types/abi_call.py:77-78
    // @arc4.abimethod()
    // def fixed_arr_arg(self, arg: FixedStruct3) -> None:
    proto 1 0
    b test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg_block@0

test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg_block@0:
    // mutable_native_types/abi_call.py:79
    // self.fixed_arr.value = arg.copy()
    bytec 4 // "fixed_arr"
    frame_dig -1
    app_global_put
    retsub


// test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret() -> bytes:
test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret:
    b test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret_block@0

test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret_block@0:
    // mutable_native_types/abi_call.py:83
    // return self.fixed_arr.value
    intc_0 // 0
    bytec 4 // "fixed_arr"
    app_global_get_ex
    assert // check self.fixed_arr exists
    retsub


// test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg(arg: bytes) -> void:
test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg:
    // mutable_native_types/abi_call.py:85-86
    // @arc4.abimethod()
    // def native_arr_arg(self, arg: NativeArray[FixedStruct]) -> None:
    proto 1 0
    b test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg_block@0

test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg_block@0:
    // mutable_native_types/abi_call.py:87
    // self.native_arr.value = arg.copy()
    bytec 5 // "native_arr"
    frame_dig -1
    app_global_put
    retsub


// test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret() -> bytes:
test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret:
    b test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret_block@0

test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret_block@0:
    // mutable_native_types/abi_call.py:91
    // return self.native_arr.value
    intc_0 // 0
    bytec 5 // "native_arr"
    app_global_get_ex
    assert // check self.native_arr exists
    retsub


// test_cases.mutable_native_types.abi_call.CallMe.log_it() -> void:
test_cases.mutable_native_types.abi_call.CallMe.log_it:
    b test_cases.mutable_native_types.abi_call.CallMe.log_it_block@0

test_cases.mutable_native_types.abi_call.CallMe.log_it_block@0:
    // mutable_native_types/abi_call.py:95
    // log(self.fixed_struct.value)
    intc_0 // 0
    bytec_1 // "fixed_struct"
    app_global_get_ex
    assert // check self.fixed_struct exists
    log
    // mutable_native_types/abi_call.py:96
    // log(self.nested_struct.value)
    intc_0 // 0
    bytec_2 // "nested_struct"
    app_global_get_ex
    assert // check self.nested_struct exists
    log
    // mutable_native_types/abi_call.py:97
    // log(self.dynamic_struct.value)
    intc_0 // 0
    bytec_3 // "dynamic_struct"
    app_global_get_ex
    assert // check self.dynamic_struct exists
    log
    // mutable_native_types/abi_call.py:98
    // log(self.fixed_arr.value)
    intc_0 // 0
    bytec 4 // "fixed_arr"
    app_global_get_ex
    assert // check self.fixed_arr exists
    log
    // mutable_native_types/abi_call.py:99
    // log(self.native_arr.value)
    intc_0 // 0
    bytec 5 // "native_arr"
    app_global_get_ex
    assert // check self.native_arr exists
    log
    retsub


// algopy.arc4.ARC4Contract.approval_program() -> uint64:
approval_program:
    b approval_program_block@0

approval_program_block@0:
    b approval_program_block@1

approval_program_block@1:
    // mutable_native_types/abi_call.py:41
    // class CallMe(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz approval_program___algopy_default_create@22
    b approval_program_abi_routing@2

approval_program_abi_routing@2:
    // mutable_native_types/abi_call.py:41
    // class CallMe(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x24378d3c // method "delete()void"
    uncover 1
    match approval_program_delete_route@3
    b approval_program_switch_case_default@4

approval_program_switch_case_default@4:
    b approval_program_switch_case_next@5

approval_program_switch_case_next@5:
    // mutable_native_types/abi_call.py:41
    // class CallMe(arc4.ARC4Contract):
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    bz approval_program_create_NoOp@20
    b approval_program_call_NoOp@6

approval_program_call_NoOp@6:
    // mutable_native_types/abi_call.py:41
    // class CallMe(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x11b19b95 // method "fixed_struct_arg((uint64,uint64))void"
    pushbytes 0xd28b964a // method "fixed_struct_ret()(uint64,uint64)"
    pushbytes 0xea18655f // method "nested_struct_arg(((uint64,uint64),uint64))void"
    pushbytes 0xbb3bfdb7 // method "nested_struct_ret()((uint64,uint64),uint64)"
    pushbytes 0x46ec14a0 // method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void"
    pushbytes 0x9b4d0926 // method "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])"
    pushbytes 0x4f0deb50 // method "fixed_arr_arg((uint64,uint64)[3])void"
    pushbytes 0x59664ab6 // method "fixed_arr_ret()(uint64,uint64)[3]"
    pushbytes 0x125d1376 // method "native_arr_arg((uint64,uint64)[])void"
    pushbytes 0x818e4a62 // method "native_arr_ret()(uint64,uint64)[]"
    pushbytes 0x9bbe1032 // method "log_it()void"
    uncover 11
    match approval_program_fixed_struct_arg_route@7 approval_program_fixed_struct_ret_route@8 approval_program_nested_struct_arg_route@9 approval_program_nested_struct_ret_route@10 approval_program_dynamic_struct_arg_route@11 approval_program_dynamic_struct_ret_route@12 approval_program_fixed_arr_arg_route@13 approval_program_fixed_arr_ret_route@14 approval_program_native_arr_arg_route@15 approval_program_native_arr_ret_route@16 approval_program_log_it_route@17
    b approval_program_switch_case_default@18

approval_program_switch_case_default@18:
    b approval_program_switch_case_next@19

approval_program_switch_case_next@19:
    b approval_program_after_if_else@21

approval_program_after_if_else@21:
    b approval_program_after_if_else@25

approval_program_after_if_else@25:
    // mutable_native_types/abi_call.py:41
    // class CallMe(arc4.ARC4Contract):
    err

approval_program_log_it_route@17:
    // mutable_native_types/abi_call.py:93
    // @arc4.abimethod()
    callsub log_it
    b approval_program_switch_case_next@19

approval_program_native_arr_ret_route@16:
    // mutable_native_types/abi_call.py:89
    // @arc4.abimethod()
    callsub native_arr_ret
    b approval_program_switch_case_next@19

approval_program_native_arr_arg_route@15:
    // mutable_native_types/abi_call.py:85
    // @arc4.abimethod()
    callsub native_arr_arg
    b approval_program_switch_case_next@19

approval_program_fixed_arr_ret_route@14:
    // mutable_native_types/abi_call.py:81
    // @arc4.abimethod()
    callsub fixed_arr_ret
    b approval_program_switch_case_next@19

approval_program_fixed_arr_arg_route@13:
    // mutable_native_types/abi_call.py:77
    // @arc4.abimethod()
    callsub fixed_arr_arg
    b approval_program_switch_case_next@19

approval_program_dynamic_struct_ret_route@12:
    // mutable_native_types/abi_call.py:73
    // @arc4.abimethod()
    callsub dynamic_struct_ret
    b approval_program_switch_case_next@19

approval_program_dynamic_struct_arg_route@11:
    // mutable_native_types/abi_call.py:69
    // @arc4.abimethod()
    callsub dynamic_struct_arg
    b approval_program_switch_case_next@19

approval_program_nested_struct_ret_route@10:
    // mutable_native_types/abi_call.py:65
    // @arc4.abimethod()
    callsub nested_struct_ret
    b approval_program_switch_case_next@19

approval_program_nested_struct_arg_route@9:
    // mutable_native_types/abi_call.py:61
    // @arc4.abimethod()
    callsub nested_struct_arg
    b approval_program_switch_case_next@19

approval_program_fixed_struct_ret_route@8:
    // mutable_native_types/abi_call.py:57
    // @arc4.abimethod()
    callsub fixed_struct_ret
    b approval_program_switch_case_next@19

approval_program_fixed_struct_arg_route@7:
    // mutable_native_types/abi_call.py:53
    // @arc4.abimethod()
    callsub fixed_struct_arg
    b approval_program_switch_case_next@19

approval_program_create_NoOp@20:
    b approval_program_after_if_else@21

approval_program_delete_route@3:
    // mutable_native_types/abi_call.py:49
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    txn ApplicationID
    intc_0 // 0
    !=
    &&
    assert // OnCompletion must be DeleteApplication && can only call when not creating
    callsub delete
    b approval_program_switch_case_next@5

approval_program___algopy_default_create@22:
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b approval_program_block@23

approval_program_block@23:
    b approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__algopy_default_create@24

approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__algopy_default_create@24:
    intc_1 // 1
    return
