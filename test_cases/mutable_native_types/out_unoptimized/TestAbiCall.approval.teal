#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 6 1 2
    bytecblock 0x 0x151f7c75 base64(CkIAAIEBQw==) base64(CiACAAEmBgQVH3x1DGZpeGVkX3N0cnVjdA1uZXN0ZWRfc3RydWN0DmR5bmFtaWNfc3RydWN0CWZpeGVkX2FycgpuYXRpdmVfYXJyQgAAMRhAAAlCAACIAI9CAACIARNDQgAAiACGI0NCAAA2GgGIAH8jQ0IAAIgAgihPAVCwI0NCAAA2GgGIAHojQ0IAAIgAfShPAVCwI0NCAAA2GgGIAHUjQ0IAAIgAeChPAVCwI0NCAAA2GgGIAHAjQ0IAAIgAdChPAVCwI0NCAAA2GgGIAG0jQ0IAAIgAcShPAVCwI0NCAACIAG0jQ0IAAIlCAACJigEAQgAAKYv/Z4lCAAAiKWVEiYoBAEIAACqL/2eJQgAAIiplRImKAQBCAAAri/9niUIAACIrZUSJigEAQgAAJwSL/2eJQgAAIicEZUSJigEAQgAAJwWL/2eJQgAAIicFZUSJQgAAIillRLAiKmVEsCIrZUSwIicEZUSwIicFZUSwiUIAAEIAADEbIhNBAOdCAAA2GgCABCQ3jTxPAY4BAMRCAABCAAAxGSISRDEYQQCxQgAANhoAgAQRsZuVgATSi5ZKgATqGGVfgAS7O/23gARG7BSggASbTQkmgARPDetQgARZZkq2gAQSXRN2gASBjkpigASbvhAyTwuOCwBJAEMAPQA3ADEAKwAlAB8AGQATAA1CAABCAABCAABCAAAAiP7NQv/ziP66Qv/tiP6pQv/niP6WQv/hiP6FQv/biP5yQv/ViP5hQv/PiP5OQv/JiP49Qv/DiP4qQv+9iP4ZQv+3Qv+3MRmBBRIxGCITEESI/f1C/zExGSISMRgiEhBEQgAAQgAAI0M=) 0x24378d3c "Hello" 0x11b19b95 0xea18655f 0x46ec14a0 0x4f0deb50 0x125d1376 0xd28b964a 0xbb3bfdb7 0x9b4d0926 0x59664ab6 0x818e4a62
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // mutable_native_types/abi_call.py:102
    // class TestAbiCall(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main___algopy_default_create@14
    b main_abi_routing@2

main_abi_routing@2:
    // mutable_native_types/abi_call.py:102
    // class TestAbiCall(arc4.ARC4Contract):
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    bz main_create_NoOp@12
    b main_call_NoOp@3

main_call_NoOp@3:
    // mutable_native_types/abi_call.py:102
    // class TestAbiCall(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x5df19773 // method "test_fixed_struct()void"
    pushbytes 0xba041cd5 // method "test_nested_struct()void"
    pushbytes 0x8441664a // method "test_dynamic_struct()void"
    pushbytes 0xcaa62e2c // method "test_fixed_array()void"
    pushbytes 0x38357d5e // method "test_native_array()void"
    pushbytes 0xe473c70a // method "test_log()void"
    uncover 6
    match main_test_fixed_struct_route@4 main_test_nested_struct_route@5 main_test_dynamic_struct_route@6 main_test_fixed_array_route@7 main_test_native_array_route@8 main_test_log_route@9
    b main_switch_case_default@10

main_switch_case_default@10:
    b main_switch_case_next@11

main_switch_case_next@11:
    b main_after_if_else@13

main_after_if_else@13:
    b main_after_if_else@15

main_after_if_else@15:
    // mutable_native_types/abi_call.py:102
    // class TestAbiCall(arc4.ARC4Contract):
    err

main_test_log_route@9:
    // mutable_native_types/abi_call.py:242
    // @arc4.abimethod()
    callsub test_log
    b main_switch_case_next@11

main_test_native_array_route@8:
    // mutable_native_types/abi_call.py:214
    // @arc4.abimethod()
    callsub test_native_array
    b main_switch_case_next@11

main_test_fixed_array_route@7:
    // mutable_native_types/abi_call.py:188
    // @arc4.abimethod()
    callsub test_fixed_array
    b main_switch_case_next@11

main_test_dynamic_struct_route@6:
    // mutable_native_types/abi_call.py:149
    // @arc4.abimethod()
    callsub test_dynamic_struct
    b main_switch_case_next@11

main_test_nested_struct_route@5:
    // mutable_native_types/abi_call.py:122
    // @arc4.abimethod()
    callsub test_nested_struct
    b main_switch_case_next@11

main_test_fixed_struct_route@4:
    // mutable_native_types/abi_call.py:103
    // @arc4.abimethod()
    callsub test_fixed_struct
    b main_switch_case_next@11

main_create_NoOp@12:
    b main_after_if_else@13

main___algopy_default_create@14:
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b main_block@17

main_block@17:
    b main_after_inlined_test_cases.mutable_native_types.abi_call.TestAbiCall.__algopy_default_create@18

main_after_inlined_test_cases.mutable_native_types.abi_call.TestAbiCall.__algopy_default_create@18:
    intc_2 // 1
    return


// test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct[routing]() -> void:
test_fixed_struct:
    b test_fixed_struct_block@0

test_fixed_struct_block@0:
    // mutable_native_types/abi_call.py:103
    // @arc4.abimethod()
    callsub test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct
    intc_2 // 1
    return


// test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct[routing]() -> void:
test_nested_struct:
    b test_nested_struct_block@0

test_nested_struct_block@0:
    // mutable_native_types/abi_call.py:122
    // @arc4.abimethod()
    callsub test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct
    intc_2 // 1
    return


// test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct[routing]() -> void:
test_dynamic_struct:
    b test_dynamic_struct_block@0

test_dynamic_struct_block@0:
    // mutable_native_types/abi_call.py:149
    // @arc4.abimethod()
    callsub test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct
    intc_2 // 1
    return


// test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array[routing]() -> void:
test_fixed_array:
    b test_fixed_array_block@0

test_fixed_array_block@0:
    // mutable_native_types/abi_call.py:188
    // @arc4.abimethod()
    callsub test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array
    intc_2 // 1
    return


// test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array[routing]() -> void:
test_native_array:
    b test_native_array_block@0

test_native_array_block@0:
    // mutable_native_types/abi_call.py:214
    // @arc4.abimethod()
    callsub test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array
    intc_2 // 1
    return


// test_cases.mutable_native_types.abi_call.TestAbiCall.test_log[routing]() -> void:
test_log:
    b test_log_block@0

test_log_block@0:
    // mutable_native_types/abi_call.py:242
    // @arc4.abimethod()
    callsub test_cases.mutable_native_types.abi_call.TestAbiCall.test_log
    intc_2 // 1
    return


// test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct() -> void:
test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct:
    // mutable_native_types/abi_call.py:103-104
    // @arc4.abimethod()
    // def test_fixed_struct(self) -> None:
    proto 0 0
    intc_0 // 0
    bytec_0 // ""
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct_block@0

test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct_block@0:
    // mutable_native_types/abi_call.py:105
    // create_txn = arc4.arc4_create(CallMe)
    itxn_begin
    intc_0 // 0
    itxn_field LocalNumUint
    intc_0 // 0
    itxn_field LocalNumByteSlice
    intc_0 // 0
    itxn_field GlobalNumUint
    pushint 5 // 5
    itxn_field GlobalNumByteSlice
    intc_0 // 0
    itxn_field ExtraProgramPages
    bytec_2 // base64(CkIAAIEBQw==)
    itxn_field ClearStateProgramPages
    bytec_0 // 0x
    itxn_field ClearStateProgramPages
    bytec_3 // base64(CiACAAEmBgQVH3x1DGZpeGVkX3N0cnVjdA1uZXN0ZWRfc3RydWN0DmR5bmFtaWNfc3RydWN0CWZpeGVkX2FycgpuYXRpdmVfYXJyQgAAMRhAAAlCAACIAI9CAACIARNDQgAAiACGI0NCAAA2GgGIAH8jQ0IAAIgAgihPAVCwI0NCAAA2GgGIAHojQ0IAAIgAfShPAVCwI0NCAAA2GgGIAHUjQ0IAAIgAeChPAVCwI0NCAAA2GgGIAHAjQ0IAAIgAdChPAVCwI0NCAAA2GgGIAG0jQ0IAAIgAcShPAVCwI0NCAACIAG0jQ0IAAIlCAACJigEAQgAAKYv/Z4lCAAAiKWVEiYoBAEIAACqL/2eJQgAAIiplRImKAQBCAAAri/9niUIAACIrZUSJigEAQgAAJwSL/2eJQgAAIicEZUSJigEAQgAAJwWL/2eJQgAAIicFZUSJQgAAIillRLAiKmVEsCIrZUSwIicEZUSwIicFZUSwiUIAAEIAADEbIhNBAOdCAAA2GgCABCQ3jTxPAY4BAMRCAABCAAAxGSISRDEYQQCxQgAANhoAgAQRsZuVgATSi5ZKgATqGGVfgAS7O/23gARG7BSggASbTQkmgARPDetQgARZZkq2gAQSXRN2gASBjkpigASbvhAyTwuOCwBJAEMAPQA3ADEAKwAlAB8AGQATAA1CAABCAABCAABCAAAAiP7NQv/ziP66Qv/tiP6pQv/niP6WQv/hiP6FQv/biP5yQv/ViP5hQv/PiP5OQv/JiP49Qv/DiP4qQv+9iP4ZQv+3Qv+3MRmBBRIxGCITEESI/f1C/zExGSISMRgiEhBEQgAAQgAAI0M=)
    itxn_field ApprovalProgramPages
    bytec_0 // 0x
    itxn_field ApprovalProgramPages
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct_next_txn@1

test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct_next_txn@1:
    // mutable_native_types/abi_call.py:105
    // create_txn = arc4.arc4_create(CallMe)
    itxn_submit
    itxn CreatedApplicationID
    // mutable_native_types/abi_call.py:106
    // app = create_txn.created_app
    dup
    frame_bury 1
    // mutable_native_types/abi_call.py:108-109
    // # fixed struct - typed
    // fixed_struct = FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 2)
    txn NumAppArgs
    intc_2 // 1
    +
    txn NumAppArgs
    intc_3 // 2
    +
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    dup
    frame_bury 0
    // mutable_native_types/abi_call.py:110
    // arc4.abi_call(CallMe.fixed_struct_arg, fixed_struct, app_id=app)
    itxn_begin
    uncover 1
    itxn_field ApplicationID
    bytec 6 // method "fixed_struct_arg((uint64,uint64))void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct_next_txn@2

test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct_next_txn@2:
    // mutable_native_types/abi_call.py:110
    // arc4.abi_call(CallMe.fixed_struct_arg, fixed_struct, app_id=app)
    itxn_submit
    // mutable_native_types/abi_call.py:111
    // res, _txn = arc4.abi_call(CallMe.fixed_struct_ret, app_id=app)
    itxn_begin
    frame_dig 1
    itxn_field ApplicationID
    bytec 11 // method "fixed_struct_ret()(uint64,uint64)"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct_next_txn@3

test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct_next_txn@3:
    // mutable_native_types/abi_call.py:111
    // res, _txn = arc4.abi_call(CallMe.fixed_struct_ret, app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    cover 1
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // mutable_native_types/abi_call.py:112
    // assert res == fixed_struct, "should be the same"
    frame_dig 0
    ==
    assert // should be the same
    // mutable_native_types/abi_call.py:114-115
    // # fixed struct - arc4 signature
    // fixed_struct = FixedStruct(a=Txn.num_app_args + 2, b=Txn.num_app_args + 3)
    txn NumAppArgs
    intc_3 // 2
    +
    txn NumAppArgs
    pushint 3 // 3
    +
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    dup
    frame_bury 0
    // mutable_native_types/abi_call.py:116
    // arc4.abi_call("fixed_struct_arg((uint64,uint64))void", fixed_struct, app_id=app)
    itxn_begin
    frame_dig 1
    itxn_field ApplicationID
    bytec 6 // method "fixed_struct_arg((uint64,uint64))void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct_next_txn@4

test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct_next_txn@4:
    // mutable_native_types/abi_call.py:116
    // arc4.abi_call("fixed_struct_arg((uint64,uint64))void", fixed_struct, app_id=app)
    itxn_submit
    // mutable_native_types/abi_call.py:117
    // res, _txn = arc4.abi_call[FixedStruct]("fixed_struct_ret()(uint64,uint64)", app_id=app)
    itxn_begin
    frame_dig 1
    itxn_field ApplicationID
    bytec 11 // method "fixed_struct_ret()(uint64,uint64)"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct_next_txn@5

test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct_next_txn@5:
    // mutable_native_types/abi_call.py:117
    // res, _txn = arc4.abi_call[FixedStruct]("fixed_struct_ret()(uint64,uint64)", app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    cover 1
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // mutable_native_types/abi_call.py:118
    // assert res == fixed_struct, "should be the same"
    frame_dig 0
    ==
    assert // should be the same
    // mutable_native_types/abi_call.py:120
    // arc4.abi_call(CallMe.delete, app_id=app)
    itxn_begin
    frame_dig 1
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    itxn_field ApplicationID
    bytec 4 // method "delete()void"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct_next_txn@6

test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct_next_txn@6:
    // mutable_native_types/abi_call.py:120
    // arc4.abi_call(CallMe.delete, app_id=app)
    itxn_submit
    retsub


// test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct() -> void:
test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct:
    // mutable_native_types/abi_call.py:122-123
    // @arc4.abimethod()
    // def test_nested_struct(self) -> None:
    proto 0 0
    intc_0 // 0
    bytec_0 // ""
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct_block@0

test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct_block@0:
    // mutable_native_types/abi_call.py:124
    // create_txn = arc4.arc4_create(CallMe)
    itxn_begin
    intc_0 // 0
    itxn_field LocalNumUint
    intc_0 // 0
    itxn_field LocalNumByteSlice
    intc_0 // 0
    itxn_field GlobalNumUint
    pushint 5 // 5
    itxn_field GlobalNumByteSlice
    intc_0 // 0
    itxn_field ExtraProgramPages
    bytec_2 // base64(CkIAAIEBQw==)
    itxn_field ClearStateProgramPages
    bytec_0 // 0x
    itxn_field ClearStateProgramPages
    bytec_3 // base64(CiACAAEmBgQVH3x1DGZpeGVkX3N0cnVjdA1uZXN0ZWRfc3RydWN0DmR5bmFtaWNfc3RydWN0CWZpeGVkX2FycgpuYXRpdmVfYXJyQgAAMRhAAAlCAACIAI9CAACIARNDQgAAiACGI0NCAAA2GgGIAH8jQ0IAAIgAgihPAVCwI0NCAAA2GgGIAHojQ0IAAIgAfShPAVCwI0NCAAA2GgGIAHUjQ0IAAIgAeChPAVCwI0NCAAA2GgGIAHAjQ0IAAIgAdChPAVCwI0NCAAA2GgGIAG0jQ0IAAIgAcShPAVCwI0NCAACIAG0jQ0IAAIlCAACJigEAQgAAKYv/Z4lCAAAiKWVEiYoBAEIAACqL/2eJQgAAIiplRImKAQBCAAAri/9niUIAACIrZUSJigEAQgAAJwSL/2eJQgAAIicEZUSJigEAQgAAJwWL/2eJQgAAIicFZUSJQgAAIillRLAiKmVEsCIrZUSwIicEZUSwIicFZUSwiUIAAEIAADEbIhNBAOdCAAA2GgCABCQ3jTxPAY4BAMRCAABCAAAxGSISRDEYQQCxQgAANhoAgAQRsZuVgATSi5ZKgATqGGVfgAS7O/23gARG7BSggASbTQkmgARPDetQgARZZkq2gAQSXRN2gASBjkpigASbvhAyTwuOCwBJAEMAPQA3ADEAKwAlAB8AGQATAA1CAABCAABCAABCAAAAiP7NQv/ziP66Qv/tiP6pQv/niP6WQv/hiP6FQv/biP5yQv/ViP5hQv/PiP5OQv/JiP49Qv/DiP4qQv+9iP4ZQv+3Qv+3MRmBBRIxGCITEESI/f1C/zExGSISMRgiEhBEQgAAQgAAI0M=)
    itxn_field ApprovalProgramPages
    bytec_0 // 0x
    itxn_field ApprovalProgramPages
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct_next_txn@1

test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct_next_txn@1:
    // mutable_native_types/abi_call.py:124
    // create_txn = arc4.arc4_create(CallMe)
    itxn_submit
    itxn CreatedApplicationID
    // mutable_native_types/abi_call.py:125
    // app = create_txn.created_app
    dup
    frame_bury 1
    // mutable_native_types/abi_call.py:129
    // fixed=FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 2),
    txn NumAppArgs
    intc_2 // 1
    +
    txn NumAppArgs
    intc_3 // 2
    +
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    // mutable_native_types/abi_call.py:130
    // c=Txn.num_app_args + 3,
    txn NumAppArgs
    pushint 3 // 3
    +
    // mutable_native_types/abi_call.py:127-131
    // # nested struct - typed
    // nested_struct = NestedStruct(
    //     fixed=FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 2),
    //     c=Txn.num_app_args + 3,
    // )
    bytec_0 // 0x
    uncover 2
    concat
    cover 1
    itob
    concat
    dup
    frame_bury 0
    // mutable_native_types/abi_call.py:132
    // arc4.abi_call(CallMe.nested_struct_arg, nested_struct, app_id=app)
    itxn_begin
    uncover 1
    itxn_field ApplicationID
    bytec 7 // method "nested_struct_arg(((uint64,uint64),uint64))void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct_next_txn@2

test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct_next_txn@2:
    // mutable_native_types/abi_call.py:132
    // arc4.abi_call(CallMe.nested_struct_arg, nested_struct, app_id=app)
    itxn_submit
    // mutable_native_types/abi_call.py:133
    // res, _txn = arc4.abi_call(CallMe.nested_struct_ret, app_id=app)
    itxn_begin
    frame_dig 1
    itxn_field ApplicationID
    bytec 12 // method "nested_struct_ret()((uint64,uint64),uint64)"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct_next_txn@3

test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct_next_txn@3:
    // mutable_native_types/abi_call.py:133
    // res, _txn = arc4.abi_call(CallMe.nested_struct_ret, app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    cover 1
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // mutable_native_types/abi_call.py:134
    // assert res == nested_struct, "should be the same"
    frame_dig 0
    ==
    assert // should be the same
    // mutable_native_types/abi_call.py:138
    // fixed=FixedStruct(a=Txn.num_app_args + 2, b=Txn.num_app_args + 3),
    txn NumAppArgs
    intc_3 // 2
    +
    txn NumAppArgs
    pushint 3 // 3
    +
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    // mutable_native_types/abi_call.py:139
    // c=Txn.num_app_args + 4,
    txn NumAppArgs
    pushint 4 // 4
    +
    // mutable_native_types/abi_call.py:136-140
    // # nested struct - arc4 signature
    // nested_struct = NestedStruct(
    //     fixed=FixedStruct(a=Txn.num_app_args + 2, b=Txn.num_app_args + 3),
    //     c=Txn.num_app_args + 4,
    // )
    bytec_0 // 0x
    uncover 2
    concat
    cover 1
    itob
    concat
    dup
    frame_bury 0
    // mutable_native_types/abi_call.py:141
    // arc4.abi_call("nested_struct_arg(((uint64,uint64),uint64))void", nested_struct, app_id=app)
    itxn_begin
    frame_dig 1
    itxn_field ApplicationID
    bytec 7 // method "nested_struct_arg(((uint64,uint64),uint64))void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct_next_txn@4

test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct_next_txn@4:
    // mutable_native_types/abi_call.py:141
    // arc4.abi_call("nested_struct_arg(((uint64,uint64),uint64))void", nested_struct, app_id=app)
    itxn_submit
    // mutable_native_types/abi_call.py:142-144
    // res, _txn = arc4.abi_call[NestedStruct](
    //     "nested_struct_ret()((uint64,uint64),uint64)", app_id=app
    // )
    itxn_begin
    // mutable_native_types/abi_call.py:143
    // "nested_struct_ret()((uint64,uint64),uint64)", app_id=app
    frame_dig 1
    itxn_field ApplicationID
    // mutable_native_types/abi_call.py:142-144
    // res, _txn = arc4.abi_call[NestedStruct](
    //     "nested_struct_ret()((uint64,uint64),uint64)", app_id=app
    // )
    bytec 12 // method "nested_struct_ret()((uint64,uint64),uint64)"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct_next_txn@5

test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct_next_txn@5:
    // mutable_native_types/abi_call.py:142-144
    // res, _txn = arc4.abi_call[NestedStruct](
    //     "nested_struct_ret()((uint64,uint64),uint64)", app_id=app
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    cover 1
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // mutable_native_types/abi_call.py:145
    // assert res == nested_struct, "should be the same"
    frame_dig 0
    ==
    assert // should be the same
    // mutable_native_types/abi_call.py:147
    // arc4.abi_call(CallMe.delete, app_id=app)
    itxn_begin
    frame_dig 1
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    itxn_field ApplicationID
    bytec 4 // method "delete()void"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct_next_txn@6

test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct_next_txn@6:
    // mutable_native_types/abi_call.py:147
    // arc4.abi_call(CallMe.delete, app_id=app)
    itxn_submit
    retsub


// test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct() -> void:
test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct:
    // mutable_native_types/abi_call.py:149-150
    // @arc4.abimethod()
    // def test_dynamic_struct(self) -> None:
    proto 0 0
    intc_0 // 0
    intc_0 // 0
    bytec_0 // ""
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct_block@0

test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct_block@0:
    // mutable_native_types/abi_call.py:151
    // create_txn = arc4.arc4_create(CallMe)
    itxn_begin
    intc_0 // 0
    itxn_field LocalNumUint
    intc_0 // 0
    itxn_field LocalNumByteSlice
    intc_0 // 0
    itxn_field GlobalNumUint
    pushint 5 // 5
    itxn_field GlobalNumByteSlice
    intc_0 // 0
    itxn_field ExtraProgramPages
    bytec_2 // base64(CkIAAIEBQw==)
    itxn_field ClearStateProgramPages
    bytec_0 // 0x
    itxn_field ClearStateProgramPages
    bytec_3 // base64(CiACAAEmBgQVH3x1DGZpeGVkX3N0cnVjdA1uZXN0ZWRfc3RydWN0DmR5bmFtaWNfc3RydWN0CWZpeGVkX2FycgpuYXRpdmVfYXJyQgAAMRhAAAlCAACIAI9CAACIARNDQgAAiACGI0NCAAA2GgGIAH8jQ0IAAIgAgihPAVCwI0NCAAA2GgGIAHojQ0IAAIgAfShPAVCwI0NCAAA2GgGIAHUjQ0IAAIgAeChPAVCwI0NCAAA2GgGIAHAjQ0IAAIgAdChPAVCwI0NCAAA2GgGIAG0jQ0IAAIgAcShPAVCwI0NCAACIAG0jQ0IAAIlCAACJigEAQgAAKYv/Z4lCAAAiKWVEiYoBAEIAACqL/2eJQgAAIiplRImKAQBCAAAri/9niUIAACIrZUSJigEAQgAAJwSL/2eJQgAAIicEZUSJigEAQgAAJwWL/2eJQgAAIicFZUSJQgAAIillRLAiKmVEsCIrZUSwIicEZUSwIicFZUSwiUIAAEIAADEbIhNBAOdCAAA2GgCABCQ3jTxPAY4BAMRCAABCAAAxGSISRDEYQQCxQgAANhoAgAQRsZuVgATSi5ZKgATqGGVfgAS7O/23gARG7BSggASbTQkmgARPDetQgARZZkq2gAQSXRN2gASBjkpigASbvhAyTwuOCwBJAEMAPQA3ADEAKwAlAB8AGQATAA1CAABCAABCAABCAAAAiP7NQv/ziP66Qv/tiP6pQv/niP6WQv/hiP6FQv/biP5yQv/ViP5hQv/PiP5OQv/JiP49Qv/DiP4qQv+9iP4ZQv+3Qv+3MRmBBRIxGCITEESI/f1C/zExGSISMRgiEhBEQgAAQgAAI0M=)
    itxn_field ApprovalProgramPages
    bytec_0 // 0x
    itxn_field ApprovalProgramPages
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct_next_txn@1

test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct_next_txn@1:
    // mutable_native_types/abi_call.py:151
    // create_txn = arc4.arc4_create(CallMe)
    itxn_submit
    itxn CreatedApplicationID
    // mutable_native_types/abi_call.py:152
    // app = create_txn.created_app
    dup
    frame_bury 2
    // mutable_native_types/abi_call.py:154
    // fixed_struct = FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 2)
    txn NumAppArgs
    intc_2 // 1
    +
    txn NumAppArgs
    intc_3 // 2
    +
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    dup
    frame_bury 1
    // mutable_native_types/abi_call.py:158
    // a=Txn.num_app_args + 1,
    txn NumAppArgs
    intc_2 // 1
    +
    cover 1
    // mutable_native_types/abi_call.py:159
    // b=Txn.num_app_args + 2,
    txn NumAppArgs
    intc_3 // 2
    +
    cover 2
    // mutable_native_types/abi_call.py:160
    // c=op.itob(Txn.num_app_args + 3),
    txn NumAppArgs
    pushint 3 // 3
    +
    itob
    cover 3
    // mutable_native_types/abi_call.py:162
    // e=NativeArray((fixed_struct,)),
    intc_2 // 1
    itob
    extract 6 2
    uncover 1
    concat
    cover 3
    // mutable_native_types/abi_call.py:156-163
    // # dynamic struct - typed
    // dynamic_struct = DynamicStruct(
    //     a=Txn.num_app_args + 1,
    //     b=Txn.num_app_args + 2,
    //     c=op.itob(Txn.num_app_args + 3),
    //     d=String("Hello"),
    //     e=NativeArray((fixed_struct,)),
    // )
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    pushint 22 // 22
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 22 // 22
    +
    // mutable_native_types/abi_call.py:161
    // d=String("Hello"),
    bytec 5 // "Hello"
    // mutable_native_types/abi_call.py:156-163
    // # dynamic struct - typed
    // dynamic_struct = DynamicStruct(
    //     a=Txn.num_app_args + 1,
    //     b=Txn.num_app_args + 2,
    //     c=op.itob(Txn.num_app_args + 3),
    //     d=String("Hello"),
    //     e=NativeArray((fixed_struct,)),
    // )
    len
    itob
    extract 6 2
    // mutable_native_types/abi_call.py:161
    // d=String("Hello"),
    bytec 5 // "Hello"
    // mutable_native_types/abi_call.py:156-163
    // # dynamic struct - typed
    // dynamic_struct = DynamicStruct(
    //     a=Txn.num_app_args + 1,
    //     b=Txn.num_app_args + 2,
    //     c=op.itob(Txn.num_app_args + 3),
    //     d=String("Hello"),
    //     e=NativeArray((fixed_struct,)),
    // )
    concat
    dig 1
    itob
    extract 6 2
    uncover 4
    uncover 1
    concat
    cover 2
    dup
    len
    uncover 2
    +
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 2
    concat
    uncover 1
    concat
    uncover 1
    concat
    dup
    frame_bury 0
    // mutable_native_types/abi_call.py:164
    // arc4.abi_call(CallMe.dynamic_struct_arg, dynamic_struct, app_id=app)
    itxn_begin
    uncover 1
    itxn_field ApplicationID
    bytec 8 // method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct_next_txn@2

test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct_next_txn@2:
    // mutable_native_types/abi_call.py:164
    // arc4.abi_call(CallMe.dynamic_struct_arg, dynamic_struct, app_id=app)
    itxn_submit
    // mutable_native_types/abi_call.py:165
    // res, _txn = arc4.abi_call(CallMe.dynamic_struct_ret, app_id=app)
    itxn_begin
    frame_dig 2
    itxn_field ApplicationID
    bytec 13 // method "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct_next_txn@3

test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct_next_txn@3:
    // mutable_native_types/abi_call.py:165
    // res, _txn = arc4.abi_call(CallMe.dynamic_struct_ret, app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    cover 1
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // mutable_native_types/abi_call.py:166
    // assert res == dynamic_struct, "should be the same"
    frame_dig 0
    ==
    assert // should be the same
    // mutable_native_types/abi_call.py:170
    // a=Txn.num_app_args + 2,
    txn NumAppArgs
    intc_3 // 2
    +
    // mutable_native_types/abi_call.py:171
    // b=Txn.num_app_args + 3,
    txn NumAppArgs
    pushint 3 // 3
    +
    cover 1
    // mutable_native_types/abi_call.py:172
    // c=op.itob(Txn.num_app_args + 4),
    txn NumAppArgs
    pushint 4 // 4
    +
    itob
    cover 2
    // mutable_native_types/abi_call.py:174
    // e=NativeArray((fixed_struct,)),
    intc_2 // 1
    itob
    extract 6 2
    frame_dig 1
    concat
    cover 3
    // mutable_native_types/abi_call.py:168-175
    // # dynamic struct - arc4 signature
    // dynamic_struct = DynamicStruct(
    //     a=Txn.num_app_args + 2,
    //     b=Txn.num_app_args + 3,
    //     c=op.itob(Txn.num_app_args + 4),
    //     d=String("Hello"),
    //     e=NativeArray((fixed_struct,)),
    // )
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    pushint 22 // 22
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 22 // 22
    +
    // mutable_native_types/abi_call.py:173
    // d=String("Hello"),
    bytec 5 // "Hello"
    // mutable_native_types/abi_call.py:168-175
    // # dynamic struct - arc4 signature
    // dynamic_struct = DynamicStruct(
    //     a=Txn.num_app_args + 2,
    //     b=Txn.num_app_args + 3,
    //     c=op.itob(Txn.num_app_args + 4),
    //     d=String("Hello"),
    //     e=NativeArray((fixed_struct,)),
    // )
    len
    itob
    extract 6 2
    // mutable_native_types/abi_call.py:173
    // d=String("Hello"),
    bytec 5 // "Hello"
    // mutable_native_types/abi_call.py:168-175
    // # dynamic struct - arc4 signature
    // dynamic_struct = DynamicStruct(
    //     a=Txn.num_app_args + 2,
    //     b=Txn.num_app_args + 3,
    //     c=op.itob(Txn.num_app_args + 4),
    //     d=String("Hello"),
    //     e=NativeArray((fixed_struct,)),
    // )
    concat
    dig 1
    itob
    extract 6 2
    uncover 4
    uncover 1
    concat
    cover 2
    dup
    len
    uncover 2
    +
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 2
    concat
    uncover 1
    concat
    uncover 1
    concat
    dup
    frame_bury 0
    // mutable_native_types/abi_call.py:176-180
    // arc4.abi_call(
    //     "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void",
    //     dynamic_struct,
    //     app_id=app,
    // )
    itxn_begin
    // mutable_native_types/abi_call.py:179
    // app_id=app,
    frame_dig 2
    itxn_field ApplicationID
    // mutable_native_types/abi_call.py:176-180
    // arc4.abi_call(
    //     "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void",
    //     dynamic_struct,
    //     app_id=app,
    // )
    bytec 8 // method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct_next_txn@4

test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct_next_txn@4:
    // mutable_native_types/abi_call.py:176-180
    // arc4.abi_call(
    //     "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void",
    //     dynamic_struct,
    //     app_id=app,
    // )
    itxn_submit
    // mutable_native_types/abi_call.py:181-183
    // res, _txn = arc4.abi_call[DynamicStruct](
    //     "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])", app_id=app
    // )
    itxn_begin
    // mutable_native_types/abi_call.py:182
    // "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])", app_id=app
    frame_dig 2
    itxn_field ApplicationID
    // mutable_native_types/abi_call.py:181-183
    // res, _txn = arc4.abi_call[DynamicStruct](
    //     "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])", app_id=app
    // )
    bytec 13 // method "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct_next_txn@5

test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct_next_txn@5:
    // mutable_native_types/abi_call.py:181-183
    // res, _txn = arc4.abi_call[DynamicStruct](
    //     "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])", app_id=app
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    cover 1
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // mutable_native_types/abi_call.py:184
    // assert res == dynamic_struct, "should be the same"
    frame_dig 0
    ==
    assert // should be the same
    // mutable_native_types/abi_call.py:186
    // arc4.abi_call(CallMe.delete, app_id=app)
    itxn_begin
    frame_dig 2
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    itxn_field ApplicationID
    bytec 4 // method "delete()void"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct_next_txn@6

test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct_next_txn@6:
    // mutable_native_types/abi_call.py:186
    // arc4.abi_call(CallMe.delete, app_id=app)
    itxn_submit
    retsub


// test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array() -> void:
test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array:
    // mutable_native_types/abi_call.py:188-189
    // @arc4.abimethod()
    // def test_fixed_array(self) -> None:
    proto 0 0
    intc_0 // 0
    bytec_0 // ""
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array_block@0

test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array_block@0:
    // mutable_native_types/abi_call.py:190
    // create_txn = arc4.arc4_create(CallMe)
    itxn_begin
    intc_0 // 0
    itxn_field LocalNumUint
    intc_0 // 0
    itxn_field LocalNumByteSlice
    intc_0 // 0
    itxn_field GlobalNumUint
    pushint 5 // 5
    itxn_field GlobalNumByteSlice
    intc_0 // 0
    itxn_field ExtraProgramPages
    bytec_2 // base64(CkIAAIEBQw==)
    itxn_field ClearStateProgramPages
    bytec_0 // 0x
    itxn_field ClearStateProgramPages
    bytec_3 // base64(CiACAAEmBgQVH3x1DGZpeGVkX3N0cnVjdA1uZXN0ZWRfc3RydWN0DmR5bmFtaWNfc3RydWN0CWZpeGVkX2FycgpuYXRpdmVfYXJyQgAAMRhAAAlCAACIAI9CAACIARNDQgAAiACGI0NCAAA2GgGIAH8jQ0IAAIgAgihPAVCwI0NCAAA2GgGIAHojQ0IAAIgAfShPAVCwI0NCAAA2GgGIAHUjQ0IAAIgAeChPAVCwI0NCAAA2GgGIAHAjQ0IAAIgAdChPAVCwI0NCAAA2GgGIAG0jQ0IAAIgAcShPAVCwI0NCAACIAG0jQ0IAAIlCAACJigEAQgAAKYv/Z4lCAAAiKWVEiYoBAEIAACqL/2eJQgAAIiplRImKAQBCAAAri/9niUIAACIrZUSJigEAQgAAJwSL/2eJQgAAIicEZUSJigEAQgAAJwWL/2eJQgAAIicFZUSJQgAAIillRLAiKmVEsCIrZUSwIicEZUSwIicFZUSwiUIAAEIAADEbIhNBAOdCAAA2GgCABCQ3jTxPAY4BAMRCAABCAAAxGSISRDEYQQCxQgAANhoAgAQRsZuVgATSi5ZKgATqGGVfgAS7O/23gARG7BSggASbTQkmgARPDetQgARZZkq2gAQSXRN2gASBjkpigASbvhAyTwuOCwBJAEMAPQA3ADEAKwAlAB8AGQATAA1CAABCAABCAABCAAAAiP7NQv/ziP66Qv/tiP6pQv/niP6WQv/hiP6FQv/biP5yQv/ViP5hQv/PiP5OQv/JiP49Qv/DiP4qQv+9iP4ZQv+3Qv+3MRmBBRIxGCITEESI/f1C/zExGSISMRgiEhBEQgAAQgAAI0M=)
    itxn_field ApprovalProgramPages
    bytec_0 // 0x
    itxn_field ApprovalProgramPages
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array_next_txn@1

test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array_next_txn@1:
    // mutable_native_types/abi_call.py:190
    // create_txn = arc4.arc4_create(CallMe)
    itxn_submit
    itxn CreatedApplicationID
    // mutable_native_types/abi_call.py:191
    // app = create_txn.created_app
    dup
    frame_bury 1
    // mutable_native_types/abi_call.py:193
    // fixed_struct = FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 2)
    txn NumAppArgs
    intc_2 // 1
    +
    txn NumAppArgs
    intc_3 // 2
    +
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    // mutable_native_types/abi_call.py:194
    // fixed_arr = FixedStruct3((fixed_struct, fixed_struct, fixed_struct))
    bytec_0 // 0x
    dig 1
    concat
    dig 1
    concat
    uncover 1
    concat
    dup
    frame_bury 0
    // mutable_native_types/abi_call.py:196-197
    // # fixed array - typed
    // arc4.abi_call(CallMe.fixed_arr_arg, fixed_arr, app_id=app)
    itxn_begin
    uncover 1
    itxn_field ApplicationID
    bytec 9 // method "fixed_arr_arg((uint64,uint64)[3])void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array_next_txn@2

test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array_next_txn@2:
    // mutable_native_types/abi_call.py:196-197
    // # fixed array - typed
    // arc4.abi_call(CallMe.fixed_arr_arg, fixed_arr, app_id=app)
    itxn_submit
    // mutable_native_types/abi_call.py:198
    // res, _txn = arc4.abi_call(CallMe.fixed_arr_ret, app_id=app)
    itxn_begin
    frame_dig 1
    itxn_field ApplicationID
    bytec 14 // method "fixed_arr_ret()(uint64,uint64)[3]"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array_next_txn@3

test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array_next_txn@3:
    // mutable_native_types/abi_call.py:198
    // res, _txn = arc4.abi_call(CallMe.fixed_arr_ret, app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    cover 1
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // mutable_native_types/abi_call.py:199
    // assert res == fixed_arr, "should be the same"
    frame_dig 0
    ==
    assert // should be the same
    // mutable_native_types/abi_call.py:201-202
    // # fixed array - arc4 signature
    // fixed_struct = FixedStruct(a=Txn.num_app_args + 2, b=Txn.num_app_args + 3)
    txn NumAppArgs
    intc_3 // 2
    +
    txn NumAppArgs
    pushint 3 // 3
    +
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    // mutable_native_types/abi_call.py:203
    // fixed_arr = FixedStruct3((fixed_struct, fixed_struct, fixed_struct))
    bytec_0 // 0x
    dig 1
    concat
    dig 1
    concat
    uncover 1
    concat
    dup
    frame_bury 0
    // mutable_native_types/abi_call.py:204-208
    // arc4.abi_call(
    //     "fixed_arr_arg((uint64,uint64)[3])void",
    //     fixed_arr,
    //     app_id=app,
    // )
    itxn_begin
    // mutable_native_types/abi_call.py:207
    // app_id=app,
    frame_dig 1
    itxn_field ApplicationID
    // mutable_native_types/abi_call.py:204-208
    // arc4.abi_call(
    //     "fixed_arr_arg((uint64,uint64)[3])void",
    //     fixed_arr,
    //     app_id=app,
    // )
    bytec 9 // method "fixed_arr_arg((uint64,uint64)[3])void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array_next_txn@4

test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array_next_txn@4:
    // mutable_native_types/abi_call.py:204-208
    // arc4.abi_call(
    //     "fixed_arr_arg((uint64,uint64)[3])void",
    //     fixed_arr,
    //     app_id=app,
    // )
    itxn_submit
    // mutable_native_types/abi_call.py:209
    // res, _txn = arc4.abi_call[FixedStruct3]("fixed_arr_ret()(uint64,uint64)[3]", app_id=app)
    itxn_begin
    frame_dig 1
    itxn_field ApplicationID
    bytec 14 // method "fixed_arr_ret()(uint64,uint64)[3]"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array_next_txn@5

test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array_next_txn@5:
    // mutable_native_types/abi_call.py:209
    // res, _txn = arc4.abi_call[FixedStruct3]("fixed_arr_ret()(uint64,uint64)[3]", app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    cover 1
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // mutable_native_types/abi_call.py:210
    // assert res == fixed_arr, "should be the same"
    frame_dig 0
    ==
    assert // should be the same
    // mutable_native_types/abi_call.py:212
    // arc4.abi_call(CallMe.delete, app_id=app)
    itxn_begin
    frame_dig 1
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    itxn_field ApplicationID
    bytec 4 // method "delete()void"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array_next_txn@6

test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array_next_txn@6:
    // mutable_native_types/abi_call.py:212
    // arc4.abi_call(CallMe.delete, app_id=app)
    itxn_submit
    retsub


// test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array() -> void:
test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array:
    // mutable_native_types/abi_call.py:214-215
    // @arc4.abimethod()
    // def test_native_array(self) -> None:
    proto 0 0
    intc_0 // 0
    bytec_0 // ""
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array_block@0

test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array_block@0:
    // mutable_native_types/abi_call.py:216
    // create_txn = arc4.arc4_create(CallMe)
    itxn_begin
    intc_0 // 0
    itxn_field LocalNumUint
    intc_0 // 0
    itxn_field LocalNumByteSlice
    intc_0 // 0
    itxn_field GlobalNumUint
    pushint 5 // 5
    itxn_field GlobalNumByteSlice
    intc_0 // 0
    itxn_field ExtraProgramPages
    bytec_2 // base64(CkIAAIEBQw==)
    itxn_field ClearStateProgramPages
    bytec_0 // 0x
    itxn_field ClearStateProgramPages
    bytec_3 // base64(CiACAAEmBgQVH3x1DGZpeGVkX3N0cnVjdA1uZXN0ZWRfc3RydWN0DmR5bmFtaWNfc3RydWN0CWZpeGVkX2FycgpuYXRpdmVfYXJyQgAAMRhAAAlCAACIAI9CAACIARNDQgAAiACGI0NCAAA2GgGIAH8jQ0IAAIgAgihPAVCwI0NCAAA2GgGIAHojQ0IAAIgAfShPAVCwI0NCAAA2GgGIAHUjQ0IAAIgAeChPAVCwI0NCAAA2GgGIAHAjQ0IAAIgAdChPAVCwI0NCAAA2GgGIAG0jQ0IAAIgAcShPAVCwI0NCAACIAG0jQ0IAAIlCAACJigEAQgAAKYv/Z4lCAAAiKWVEiYoBAEIAACqL/2eJQgAAIiplRImKAQBCAAAri/9niUIAACIrZUSJigEAQgAAJwSL/2eJQgAAIicEZUSJigEAQgAAJwWL/2eJQgAAIicFZUSJQgAAIillRLAiKmVEsCIrZUSwIicEZUSwIicFZUSwiUIAAEIAADEbIhNBAOdCAAA2GgCABCQ3jTxPAY4BAMRCAABCAAAxGSISRDEYQQCxQgAANhoAgAQRsZuVgATSi5ZKgATqGGVfgAS7O/23gARG7BSggASbTQkmgARPDetQgARZZkq2gAQSXRN2gASBjkpigASbvhAyTwuOCwBJAEMAPQA3ADEAKwAlAB8AGQATAA1CAABCAABCAABCAAAAiP7NQv/ziP66Qv/tiP6pQv/niP6WQv/hiP6FQv/biP5yQv/ViP5hQv/PiP5OQv/JiP49Qv/DiP4qQv+9iP4ZQv+3Qv+3MRmBBRIxGCITEESI/f1C/zExGSISMRgiEhBEQgAAQgAAI0M=)
    itxn_field ApprovalProgramPages
    bytec_0 // 0x
    itxn_field ApprovalProgramPages
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array_next_txn@1

test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array_next_txn@1:
    // mutable_native_types/abi_call.py:216
    // create_txn = arc4.arc4_create(CallMe)
    itxn_submit
    itxn CreatedApplicationID
    // mutable_native_types/abi_call.py:217
    // app = create_txn.created_app
    dup
    frame_bury 1
    // mutable_native_types/abi_call.py:219
    // fixed_struct = FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 2)
    txn NumAppArgs
    intc_2 // 1
    +
    txn NumAppArgs
    intc_3 // 2
    +
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    // mutable_native_types/abi_call.py:220
    // native_arr = NativeArray((fixed_struct, fixed_struct, fixed_struct))
    pushint 3 // 3
    itob
    extract 6 2
    dig 1
    concat
    dig 1
    concat
    uncover 1
    concat
    dup
    frame_bury 0
    // mutable_native_types/abi_call.py:222-223
    // # native array - typed
    // arc4.abi_call(CallMe.native_arr_arg, native_arr, app_id=app)
    itxn_begin
    uncover 1
    itxn_field ApplicationID
    bytec 10 // method "native_arr_arg((uint64,uint64)[])void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array_next_txn@2

test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array_next_txn@2:
    // mutable_native_types/abi_call.py:222-223
    // # native array - typed
    // arc4.abi_call(CallMe.native_arr_arg, native_arr, app_id=app)
    itxn_submit
    // mutable_native_types/abi_call.py:224
    // res, _txn = arc4.abi_call(CallMe.native_arr_ret, app_id=app)
    itxn_begin
    frame_dig 1
    itxn_field ApplicationID
    bytec 15 // method "native_arr_ret()(uint64,uint64)[]"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array_next_txn@3

test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array_next_txn@3:
    // mutable_native_types/abi_call.py:224
    // res, _txn = arc4.abi_call(CallMe.native_arr_ret, app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    cover 1
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // mutable_native_types/abi_call.py:225
    // assert res == native_arr, "should be the same"
    frame_dig 0
    ==
    assert // should be the same
    // mutable_native_types/abi_call.py:227-228
    // # native array - arc4 signature
    // fixed_struct = FixedStruct(a=Txn.num_app_args + 2, b=Txn.num_app_args + 3)
    txn NumAppArgs
    intc_3 // 2
    +
    txn NumAppArgs
    pushint 3 // 3
    +
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    // mutable_native_types/abi_call.py:229
    // native_arr = NativeArray((fixed_struct, fixed_struct, fixed_struct))
    pushint 3 // 3
    itob
    extract 6 2
    dig 1
    concat
    dig 1
    concat
    uncover 1
    concat
    dup
    frame_bury 0
    // mutable_native_types/abi_call.py:230-234
    // arc4.abi_call(
    //     "native_arr_arg((uint64,uint64)[])void",
    //     native_arr,
    //     app_id=app,
    // )
    itxn_begin
    // mutable_native_types/abi_call.py:233
    // app_id=app,
    frame_dig 1
    itxn_field ApplicationID
    // mutable_native_types/abi_call.py:230-234
    // arc4.abi_call(
    //     "native_arr_arg((uint64,uint64)[])void",
    //     native_arr,
    //     app_id=app,
    // )
    bytec 10 // method "native_arr_arg((uint64,uint64)[])void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array_next_txn@4

test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array_next_txn@4:
    // mutable_native_types/abi_call.py:230-234
    // arc4.abi_call(
    //     "native_arr_arg((uint64,uint64)[])void",
    //     native_arr,
    //     app_id=app,
    // )
    itxn_submit
    // mutable_native_types/abi_call.py:235-237
    // res, _txn = arc4.abi_call[NativeArray[FixedStruct]](
    //     "native_arr_ret()(uint64,uint64)[]", app_id=app
    // )
    itxn_begin
    // mutable_native_types/abi_call.py:236
    // "native_arr_ret()(uint64,uint64)[]", app_id=app
    frame_dig 1
    itxn_field ApplicationID
    // mutable_native_types/abi_call.py:235-237
    // res, _txn = arc4.abi_call[NativeArray[FixedStruct]](
    //     "native_arr_ret()(uint64,uint64)[]", app_id=app
    // )
    bytec 15 // method "native_arr_ret()(uint64,uint64)[]"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array_next_txn@5

test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array_next_txn@5:
    // mutable_native_types/abi_call.py:235-237
    // res, _txn = arc4.abi_call[NativeArray[FixedStruct]](
    //     "native_arr_ret()(uint64,uint64)[]", app_id=app
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    cover 1
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // mutable_native_types/abi_call.py:238
    // assert res == native_arr, "should be the same"
    frame_dig 0
    ==
    assert // should be the same
    // mutable_native_types/abi_call.py:240
    // arc4.abi_call(CallMe.delete, app_id=app)
    itxn_begin
    frame_dig 1
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    itxn_field ApplicationID
    bytec 4 // method "delete()void"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array_next_txn@6

test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array_next_txn@6:
    // mutable_native_types/abi_call.py:240
    // arc4.abi_call(CallMe.delete, app_id=app)
    itxn_submit
    retsub


// test_cases.mutable_native_types.abi_call.TestAbiCall.test_log() -> void:
test_cases.mutable_native_types.abi_call.TestAbiCall.test_log:
    // mutable_native_types/abi_call.py:242-243
    // @arc4.abimethod()
    // def test_log(self) -> None:
    proto 0 0
    bytec_0 // ""
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_log_block@0

test_cases.mutable_native_types.abi_call.TestAbiCall.test_log_block@0:
    // mutable_native_types/abi_call.py:244
    // create_txn = arc4.arc4_create(CallMe)
    itxn_begin
    intc_0 // 0
    itxn_field LocalNumUint
    intc_0 // 0
    itxn_field LocalNumByteSlice
    intc_0 // 0
    itxn_field GlobalNumUint
    pushint 5 // 5
    itxn_field GlobalNumByteSlice
    intc_0 // 0
    itxn_field ExtraProgramPages
    bytec_2 // base64(CkIAAIEBQw==)
    itxn_field ClearStateProgramPages
    bytec_0 // 0x
    itxn_field ClearStateProgramPages
    bytec_3 // base64(CiACAAEmBgQVH3x1DGZpeGVkX3N0cnVjdA1uZXN0ZWRfc3RydWN0DmR5bmFtaWNfc3RydWN0CWZpeGVkX2FycgpuYXRpdmVfYXJyQgAAMRhAAAlCAACIAI9CAACIARNDQgAAiACGI0NCAAA2GgGIAH8jQ0IAAIgAgihPAVCwI0NCAAA2GgGIAHojQ0IAAIgAfShPAVCwI0NCAAA2GgGIAHUjQ0IAAIgAeChPAVCwI0NCAAA2GgGIAHAjQ0IAAIgAdChPAVCwI0NCAAA2GgGIAG0jQ0IAAIgAcShPAVCwI0NCAACIAG0jQ0IAAIlCAACJigEAQgAAKYv/Z4lCAAAiKWVEiYoBAEIAACqL/2eJQgAAIiplRImKAQBCAAAri/9niUIAACIrZUSJigEAQgAAJwSL/2eJQgAAIicEZUSJigEAQgAAJwWL/2eJQgAAIicFZUSJQgAAIillRLAiKmVEsCIrZUSwIicEZUSwIicFZUSwiUIAAEIAADEbIhNBAOdCAAA2GgCABCQ3jTxPAY4BAMRCAABCAAAxGSISRDEYQQCxQgAANhoAgAQRsZuVgATSi5ZKgATqGGVfgAS7O/23gARG7BSggASbTQkmgARPDetQgARZZkq2gAQSXRN2gASBjkpigASbvhAyTwuOCwBJAEMAPQA3ADEAKwAlAB8AGQATAA1CAABCAABCAABCAAAAiP7NQv/ziP66Qv/tiP6pQv/niP6WQv/hiP6FQv/biP5yQv/ViP5hQv/PiP5OQv/JiP49Qv/DiP4qQv+9iP4ZQv+3Qv+3MRmBBRIxGCITEESI/f1C/zExGSISMRgiEhBEQgAAQgAAI0M=)
    itxn_field ApprovalProgramPages
    bytec_0 // 0x
    itxn_field ApprovalProgramPages
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_log_next_txn@1

test_cases.mutable_native_types.abi_call.TestAbiCall.test_log_next_txn@1:
    // mutable_native_types/abi_call.py:244
    // create_txn = arc4.arc4_create(CallMe)
    itxn_submit
    itxn CreatedApplicationID
    // mutable_native_types/abi_call.py:245
    // app = create_txn.created_app
    dup
    frame_bury 0
    // mutable_native_types/abi_call.py:247-248
    // # fixed struct
    // fixed_struct = zero_bytes(FixedStruct)
    pushint 16 // 16
    bzero
    // mutable_native_types/abi_call.py:249
    // arc4.abi_call(CallMe.fixed_struct_arg, fixed_struct, app_id=app)
    itxn_begin
    uncover 1
    itxn_field ApplicationID
    bytec 6 // method "fixed_struct_arg((uint64,uint64))void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_log_next_txn@2

test_cases.mutable_native_types.abi_call.TestAbiCall.test_log_next_txn@2:
    // mutable_native_types/abi_call.py:249
    // arc4.abi_call(CallMe.fixed_struct_arg, fixed_struct, app_id=app)
    itxn_submit
    // mutable_native_types/abi_call.py:251-252
    // # nested struct
    // nested_struct = zero_bytes(NestedStruct)
    pushint 24 // 24
    bzero
    // mutable_native_types/abi_call.py:253
    // arc4.abi_call(CallMe.nested_struct_arg, nested_struct, app_id=app)
    itxn_begin
    frame_dig 0
    itxn_field ApplicationID
    bytec 7 // method "nested_struct_arg(((uint64,uint64),uint64))void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_log_next_txn@3

test_cases.mutable_native_types.abi_call.TestAbiCall.test_log_next_txn@3:
    // mutable_native_types/abi_call.py:253
    // arc4.abi_call(CallMe.nested_struct_arg, nested_struct, app_id=app)
    itxn_submit
    // mutable_native_types/abi_call.py:257
    // a=UInt64(), b=UInt64(), c=Bytes(), d=String(), e=NativeArray[FixedStruct]()
    intc_0 // 0
    itob
    extract 6 2
    intc_0 // 0
    // mutable_native_types/abi_call.py:255-258
    // # dynamic struct
    // dynamic_struct = DynamicStruct(
    //     a=UInt64(), b=UInt64(), c=Bytes(), d=String(), e=NativeArray[FixedStruct]()
    // )
    itob
    bytec_0 // 0x
    uncover 1
    concat
    // mutable_native_types/abi_call.py:257
    // a=UInt64(), b=UInt64(), c=Bytes(), d=String(), e=NativeArray[FixedStruct]()
    intc_0 // 0
    // mutable_native_types/abi_call.py:255-258
    // # dynamic struct
    // dynamic_struct = DynamicStruct(
    //     a=UInt64(), b=UInt64(), c=Bytes(), d=String(), e=NativeArray[FixedStruct]()
    // )
    itob
    concat
    // mutable_native_types/abi_call.py:257
    // a=UInt64(), b=UInt64(), c=Bytes(), d=String(), e=NativeArray[FixedStruct]()
    bytec_0 // 0x
    // mutable_native_types/abi_call.py:255-258
    // # dynamic struct
    // dynamic_struct = DynamicStruct(
    //     a=UInt64(), b=UInt64(), c=Bytes(), d=String(), e=NativeArray[FixedStruct]()
    // )
    len
    itob
    extract 6 2
    // mutable_native_types/abi_call.py:257
    // a=UInt64(), b=UInt64(), c=Bytes(), d=String(), e=NativeArray[FixedStruct]()
    bytec_0 // 0x
    // mutable_native_types/abi_call.py:255-258
    // # dynamic struct
    // dynamic_struct = DynamicStruct(
    //     a=UInt64(), b=UInt64(), c=Bytes(), d=String(), e=NativeArray[FixedStruct]()
    // )
    concat
    pushint 22 // 22
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 22 // 22
    +
    // mutable_native_types/abi_call.py:257
    // a=UInt64(), b=UInt64(), c=Bytes(), d=String(), e=NativeArray[FixedStruct]()
    bytec_0 // ""
    // mutable_native_types/abi_call.py:255-258
    // # dynamic struct
    // dynamic_struct = DynamicStruct(
    //     a=UInt64(), b=UInt64(), c=Bytes(), d=String(), e=NativeArray[FixedStruct]()
    // )
    len
    itob
    extract 6 2
    // mutable_native_types/abi_call.py:257
    // a=UInt64(), b=UInt64(), c=Bytes(), d=String(), e=NativeArray[FixedStruct]()
    bytec_0 // ""
    // mutable_native_types/abi_call.py:255-258
    // # dynamic struct
    // dynamic_struct = DynamicStruct(
    //     a=UInt64(), b=UInt64(), c=Bytes(), d=String(), e=NativeArray[FixedStruct]()
    // )
    concat
    dig 1
    itob
    extract 6 2
    uncover 4
    uncover 1
    concat
    cover 2
    dup
    len
    uncover 2
    +
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 2
    concat
    uncover 1
    concat
    uncover 1
    concat
    // mutable_native_types/abi_call.py:259
    // arc4.abi_call(CallMe.dynamic_struct_arg, dynamic_struct, app_id=app)
    itxn_begin
    frame_dig 0
    itxn_field ApplicationID
    bytec 8 // method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_log_next_txn@4

test_cases.mutable_native_types.abi_call.TestAbiCall.test_log_next_txn@4:
    // mutable_native_types/abi_call.py:259
    // arc4.abi_call(CallMe.dynamic_struct_arg, dynamic_struct, app_id=app)
    itxn_submit
    // mutable_native_types/abi_call.py:261-262
    // # fixed array
    // fixed_arr = zero_bytes(FixedStruct3)
    pushint 48 // 48
    bzero
    // mutable_native_types/abi_call.py:263
    // arc4.abi_call(CallMe.fixed_arr_arg, fixed_arr, app_id=app)
    itxn_begin
    frame_dig 0
    itxn_field ApplicationID
    bytec 9 // method "fixed_arr_arg((uint64,uint64)[3])void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_log_next_txn@5

test_cases.mutable_native_types.abi_call.TestAbiCall.test_log_next_txn@5:
    // mutable_native_types/abi_call.py:263
    // arc4.abi_call(CallMe.fixed_arr_arg, fixed_arr, app_id=app)
    itxn_submit
    // mutable_native_types/abi_call.py:265-266
    // # native array
    // native_arr = NativeArray[FixedStruct]()
    intc_0 // 0
    itob
    extract 6 2
    // mutable_native_types/abi_call.py:267
    // arc4.abi_call(CallMe.native_arr_arg, native_arr, app_id=app)
    itxn_begin
    frame_dig 0
    itxn_field ApplicationID
    bytec 10 // method "native_arr_arg((uint64,uint64)[])void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_log_next_txn@6

test_cases.mutable_native_types.abi_call.TestAbiCall.test_log_next_txn@6:
    // mutable_native_types/abi_call.py:267
    // arc4.abi_call(CallMe.native_arr_arg, native_arr, app_id=app)
    itxn_submit
    // mutable_native_types/abi_call.py:269
    // txn = arc4.abi_call(CallMe.log_it, app_id=app)
    itxn_begin
    frame_dig 0
    itxn_field ApplicationID
    pushbytes 0x9bbe1032 // method "log_it()void"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_log_next_txn@7

test_cases.mutable_native_types.abi_call.TestAbiCall.test_log_next_txn@7:
    // mutable_native_types/abi_call.py:269
    // txn = arc4.abi_call(CallMe.log_it, app_id=app)
    itxn_submit
    itxn NumLogs
    // mutable_native_types/abi_call.py:270
    // assert txn.num_logs == 5, "expected 5 logs"
    pushint 5 // 5
    ==
    assert // expected 5 logs
    // mutable_native_types/abi_call.py:271
    // assert txn.logs(0) == op.bzero(size_of(FixedStruct)), "expected fixed struct"
    intc_0 // 0
    itxnas Logs
    pushint 16 // 16
    bzero
    ==
    assert // expected fixed struct
    // mutable_native_types/abi_call.py:272
    // assert txn.logs(1) == op.bzero(size_of(NestedStruct)), "expected nested struct"
    intc_2 // 1
    itxnas Logs
    pushint 24 // 24
    bzero
    ==
    assert // expected nested struct
    // mutable_native_types/abi_call.py:273
    // dynamic_struct_len = size_of(UInt64) * 2  # a + b
    pushint 8 // 8
    intc_3 // 2
    *
    // mutable_native_types/abi_call.py:274
    // dynamic_struct_len += 2 * 3  # head for c, d, e
    intc_1 // 6
    +
    // mutable_native_types/abi_call.py:275
    // dynamic_struct_len += 2 * 3  # tail for c, d, e
    intc_1 // 6
    +
    // mutable_native_types/abi_call.py:276
    // assert txn.logs(2).length == dynamic_struct_len, "expected dynamic struct"
    intc_3 // 2
    itxnas Logs
    len
    ==
    assert // expected dynamic struct
    // mutable_native_types/abi_call.py:277
    // assert txn.logs(3) == op.bzero(size_of(FixedStruct3)), "expected fixed array"
    pushint 3 // 3
    itxnas Logs
    pushint 48 // 48
    bzero
    ==
    assert // expected fixed array
    // mutable_native_types/abi_call.py:278
    // assert txn.logs(4) == op.bzero(2), "expected fixed array"
    pushint 4 // 4
    itxnas Logs
    intc_3 // 2
    bzero
    ==
    assert // expected fixed array
    // mutable_native_types/abi_call.py:280
    // arc4.abi_call(CallMe.delete, app_id=app)
    itxn_begin
    frame_dig 0
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    itxn_field ApplicationID
    bytec 4 // method "delete()void"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.mutable_native_types.abi_call.TestAbiCall.test_log_next_txn@8

test_cases.mutable_native_types.abi_call.TestAbiCall.test_log_next_txn@8:
    // mutable_native_types/abi_call.py:280
    // arc4.abi_call(CallMe.delete, app_id=app)
    itxn_submit
    retsub
