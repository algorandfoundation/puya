#pragma version 10
#pragma typetrack false

// test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 8 1 16 128
    bytecblock "tup_bag" 0x151f7c75 0x

main_block@0:
    txn ApplicationID
    bnz main_after_if_else@2

main_call___init__@1:
    callsub __init__

main_after_if_else@2:
    callsub approval_program
    return


// test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__init__() -> void:
__init__:

__init___block@0:
    retsub


// test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.create_box() -> void:
create_box:

create_box_block@0:
    // mutable_native_types/fixed_with_immutable_struct.py:30
    // assert self.tup_bag.create(), "box already existed"
    bytec_0 // "tup_bag"
    pushint 136 // 136
    box_create
    assert // box already existed
    retsub


// test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.num_tups() -> uint64:
num_tups:

num_tups_block@0:
    // mutable_native_types/fixed_with_immutable_struct.py:34
    // return self.tup_bag.value.count
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    retsub


// test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.add_tup(tup: bytes) -> void:
add_tup:
    // mutable_native_types/fixed_with_immutable_struct.py:36-37
    // @arc4.abimethod()
    // def add_tup(self, tup: NamedTup) -> None:
    proto 1 0

add_tup_block@0:
    // mutable_native_types/fixed_with_immutable_struct.py:38
    // assert self.tup_bag.value.count < self.tup_bag.value.items.length, "too many tups"
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    intc_1 // 8
    <
    assert // too many tups
    // mutable_native_types/fixed_with_immutable_struct.py:39
    // self.tup_bag.value.items[self.tup_bag.value.count] = tup
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    intc_1 // 8
    intc 4 // 128
    extract3 // on error: Index access is out of bounds
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    dup
    intc_1 // 8
    <
    assert // Index access is out of bounds
    intc_3 // 16
    *
    frame_dig -1
    replace3
    swap
    intc_1 // 8
    uncover 2
    replace3
    bytec_0 // "tup_bag"
    swap
    box_put
    // mutable_native_types/fixed_with_immutable_struct.py:40
    // self.tup_bag.value.count += 1
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    intc_2 // 1
    +
    itob
    swap
    intc_0 // 0
    uncover 2
    replace3
    bytec_0 // "tup_bag"
    swap
    box_put
    retsub


// test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.get_tup(index: uint64) -> bytes:
get_tup:
    // mutable_native_types/fixed_with_immutable_struct.py:42-43
    // @arc4.abimethod()
    // def get_tup(self, index: UInt64) -> NamedTup:
    proto 1 1

get_tup_block@0:
    // mutable_native_types/fixed_with_immutable_struct.py:44
    // assert index < self.tup_bag.value.count, "index out of bounds"
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    >
    assert // index out of bounds
    // mutable_native_types/fixed_with_immutable_struct.py:45
    // return self.tup_bag.value.items[index]
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_1 // 8
    intc 4 // 128
    extract3 // on error: Index access is out of bounds
    frame_dig -1
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: Index access is out of bounds
    retsub


// test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.sum() -> uint64:
sum:
    // mutable_native_types/fixed_with_immutable_struct.py:47-48
    // @arc4.abimethod()
    // def sum(self) -> UInt64:
    proto 0 1

sum_block@0:
    // mutable_native_types/fixed_with_immutable_struct.py:49
    // total = UInt64()
    intc_0 // 0
    // mutable_native_types/fixed_with_immutable_struct.py:50
    // for i in urange(self.tup_bag.value.count):
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    intc_2 // 1
    assert // Step cannot be zero
    intc_0 // 0

sum_for_header@1:
    // mutable_native_types/fixed_with_immutable_struct.py:50
    // for i in urange(self.tup_bag.value.count):
    frame_dig 2
    frame_dig 1
    <
    bz sum_after_for@4

sum_for_body@2:
    // mutable_native_types/fixed_with_immutable_struct.py:51
    // tup = self.tup_bag.value.items[i]
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_1 // 8
    intc 4 // 128
    extract3 // on error: Index access is out of bounds
    frame_dig 2
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: Index access is out of bounds
    // mutable_native_types/fixed_with_immutable_struct.py:52
    // total += tup.a
    dup
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig 0
    +
    // mutable_native_types/fixed_with_immutable_struct.py:53
    // total += tup.b
    swap
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    +
    frame_bury 0

sum_for_footer@3:
    // mutable_native_types/fixed_with_immutable_struct.py:50
    // for i in urange(self.tup_bag.value.count):
    frame_dig 2
    intc_2 // 1
    +
    frame_bury 2
    b sum_for_header@1

sum_after_for@4:
    // mutable_native_types/fixed_with_immutable_struct.py:54
    // return total
    retsub


// test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.add_many_tups(tups: bytes) -> void:
add_many_tups:
    // mutable_native_types/fixed_with_immutable_struct.py:56-57
    // @arc4.abimethod()
    // def add_many_tups(self, tups: NativeArray[NamedTup]) -> None:
    proto 1 0

add_many_tups_block@0:
    // mutable_native_types/fixed_with_immutable_struct.py:58
    // for tup in tups:
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_0 // 0

add_many_tups_for_header@1:
    // mutable_native_types/fixed_with_immutable_struct.py:58
    // for tup in tups:
    frame_dig 1
    frame_dig 0
    <
    bz add_many_tups_after_for@4

add_many_tups_for_body@2:
    // mutable_native_types/fixed_with_immutable_struct.py:58
    // for tup in tups:
    frame_dig -1
    extract 2 0
    frame_dig 1
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: Index access is out of bounds
    // mutable_native_types/fixed_with_immutable_struct.py:59
    // self.add_tup(tup)
    callsub add_tup

add_many_tups_for_footer@3:
    frame_dig 1
    intc_2 // 1
    +
    frame_bury 1
    b add_many_tups_for_header@1

add_many_tups_after_for@4:
    retsub


// test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.add_fixed_tups(tups: bytes) -> void:
add_fixed_tups:
    // mutable_native_types/fixed_with_immutable_struct.py:61-62
    // @arc4.abimethod()
    // def add_fixed_tups(self, tups: FixedArray[NamedTup, typing.Literal[3]]) -> None:
    proto 1 0

add_fixed_tups_block@0:
    intc_0 // 0

add_fixed_tups_for_header@1:
    // mutable_native_types/fixed_with_immutable_struct.py:63
    // for tup in tups:
    frame_dig 0
    pushint 3 // 3
    <
    bz add_fixed_tups_after_for@4

add_fixed_tups_for_body@2:
    // mutable_native_types/fixed_with_immutable_struct.py:63
    // for tup in tups:
    frame_dig -1
    frame_dig 0
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: Index access is out of bounds
    // mutable_native_types/fixed_with_immutable_struct.py:64
    // self.add_tup(tup)
    callsub add_tup

add_fixed_tups_for_footer@3:
    frame_dig 0
    intc_2 // 1
    +
    frame_bury 0
    b add_fixed_tups_for_header@1

add_fixed_tups_after_for@4:
    retsub


// test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.set_a(a: uint64) -> void:
set_a:
    // mutable_native_types/fixed_with_immutable_struct.py:66-67
    // @arc4.abimethod()
    // def set_a(self, a: UInt64) -> None:
    proto 1 0

set_a_block@0:
    // mutable_native_types/fixed_with_immutable_struct.py:68
    // for i in urange(self.tup_bag.value.count):
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    intc_2 // 1
    assert // Step cannot be zero
    intc_0 // 0

set_a_for_header@1:
    // mutable_native_types/fixed_with_immutable_struct.py:68
    // for i in urange(self.tup_bag.value.count):
    frame_dig 1
    frame_dig 0
    <
    bz set_a_after_for@4

set_a_for_body@2:
    // mutable_native_types/fixed_with_immutable_struct.py:69
    // tup = self.tup_bag.value.items[i]
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_1 // 8
    intc 4 // 128
    extract3 // on error: Index access is out of bounds
    frame_dig 1
    dup
    cover 2
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: Index access is out of bounds
    // mutable_native_types/fixed_with_immutable_struct.py:70
    // self.tup_bag.value.items[i] = tup._replace(a=a)
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    itob
    swap
    itob
    swap
    bytec_2 // 0x
    swap
    concat
    swap
    concat
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    intc_1 // 8
    intc 4 // 128
    extract3 // on error: Index access is out of bounds
    dig 3
    intc_1 // 8
    <
    assert // Index access is out of bounds
    uncover 3
    intc_3 // 16
    *
    uncover 3
    replace3
    swap
    intc_1 // 8
    uncover 2
    replace3
    bytec_0 // "tup_bag"
    swap
    box_put

set_a_for_footer@3:
    // mutable_native_types/fixed_with_immutable_struct.py:68
    // for i in urange(self.tup_bag.value.count):
    frame_dig 1
    intc_2 // 1
    +
    frame_bury 1
    b set_a_for_header@1

set_a_after_for@4:
    retsub


// test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.set_b(b: uint64) -> void:
set_b:
    // mutable_native_types/fixed_with_immutable_struct.py:72-73
    // @arc4.abimethod()
    // def set_b(self, b: UInt64) -> None:
    proto 1 0

set_b_block@0:
    // mutable_native_types/fixed_with_immutable_struct.py:74
    // for i in urange(self.tup_bag.value.count):
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    intc_2 // 1
    assert // Step cannot be zero
    intc_0 // 0

set_b_for_header@1:
    // mutable_native_types/fixed_with_immutable_struct.py:74
    // for i in urange(self.tup_bag.value.count):
    frame_dig 1
    frame_dig 0
    <
    bz set_b_after_for@4

set_b_for_body@2:
    // mutable_native_types/fixed_with_immutable_struct.py:75
    // tup = self.tup_bag.value.items[i]
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_1 // 8
    intc 4 // 128
    extract3 // on error: Index access is out of bounds
    frame_dig 1
    dup
    cover 2
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: Index access is out of bounds
    // mutable_native_types/fixed_with_immutable_struct.py:76
    // self.tup_bag.value.items[i] = tup._replace(b=b)
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    itob
    frame_dig -1
    itob
    swap
    bytec_2 // 0x
    swap
    concat
    swap
    concat
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    intc_1 // 8
    intc 4 // 128
    extract3 // on error: Index access is out of bounds
    dig 3
    intc_1 // 8
    <
    assert // Index access is out of bounds
    uncover 3
    intc_3 // 16
    *
    uncover 3
    replace3
    swap
    intc_1 // 8
    uncover 2
    replace3
    bytec_0 // "tup_bag"
    swap
    box_put

set_b_for_footer@3:
    // mutable_native_types/fixed_with_immutable_struct.py:74
    // for i in urange(self.tup_bag.value.count):
    frame_dig 1
    intc_2 // 1
    +
    frame_bury 1
    b set_b_for_header@1

set_b_after_for@4:
    retsub


// algopy.arc4.ARC4Contract.approval_program() -> uint64:
approval_program:

approval_program_block@0:

approval_program_block@1:
    // mutable_native_types/fixed_with_immutable_struct.py:24
    // class FixedWithImmStruct(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz approval_program_bare_routing@14

approval_program_abi_routing@2:
    // mutable_native_types/fixed_with_immutable_struct.py:24
    // class FixedWithImmStruct(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xa67ea2ab // method "create_box()void"
    pushbytes 0x028840ea // method "num_tups()uint64"
    pushbytes 0xf75cee9d // method "add_tup((uint64,uint64))void"
    pushbytes 0x880b5534 // method "get_tup(uint64)(uint64,uint64)"
    pushbytes 0x53030b41 // method "sum()uint64"
    pushbytes 0x7d39df51 // method "add_many_tups((uint64,uint64)[])void"
    pushbytes 0x7a1e7b43 // method "add_fixed_tups((uint64,uint64)[3])void"
    pushbytes 0x3447847f // method "set_a(uint64)void"
    pushbytes 0x2ba64852 // method "set_b(uint64)void"
    uncover 9
    match approval_program_create_box_route@3 approval_program_num_tups_route@4 approval_program_add_tup_route@5 approval_program_get_tup_route@6 approval_program_sum_route@7 approval_program_add_many_tups_route@8 approval_program_add_fixed_tups_route@9 approval_program_set_a_route@10 approval_program_set_b_route@11

approval_program_switch_case_default@12:

approval_program_switch_case_next@13:

approval_program_after_if_else@20:
    // mutable_native_types/fixed_with_immutable_struct.py:24
    // class FixedWithImmStruct(arc4.ARC4Contract):
    intc_0 // 0

approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__puya_arc4_router__@21:
    retsub

approval_program_set_b_route@11:
    // mutable_native_types/fixed_with_immutable_struct.py:72
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // mutable_native_types/fixed_with_immutable_struct.py:24
    // class FixedWithImmStruct(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // mutable_native_types/fixed_with_immutable_struct.py:72
    // @arc4.abimethod()
    callsub set_b
    intc_2 // 1
    b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__puya_arc4_router__@21

approval_program_set_a_route@10:
    // mutable_native_types/fixed_with_immutable_struct.py:66
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // mutable_native_types/fixed_with_immutable_struct.py:24
    // class FixedWithImmStruct(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // mutable_native_types/fixed_with_immutable_struct.py:66
    // @arc4.abimethod()
    callsub set_a
    intc_2 // 1
    b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__puya_arc4_router__@21

approval_program_add_fixed_tups_route@9:
    // mutable_native_types/fixed_with_immutable_struct.py:61
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // mutable_native_types/fixed_with_immutable_struct.py:24
    // class FixedWithImmStruct(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // mutable_native_types/fixed_with_immutable_struct.py:61
    // @arc4.abimethod()
    callsub add_fixed_tups
    intc_2 // 1
    b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__puya_arc4_router__@21

approval_program_add_many_tups_route@8:
    // mutable_native_types/fixed_with_immutable_struct.py:56
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // mutable_native_types/fixed_with_immutable_struct.py:24
    // class FixedWithImmStruct(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // mutable_native_types/fixed_with_immutable_struct.py:56
    // @arc4.abimethod()
    callsub add_many_tups
    intc_2 // 1
    b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__puya_arc4_router__@21

approval_program_sum_route@7:
    // mutable_native_types/fixed_with_immutable_struct.py:47
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub sum
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__puya_arc4_router__@21

approval_program_get_tup_route@6:
    // mutable_native_types/fixed_with_immutable_struct.py:42
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // mutable_native_types/fixed_with_immutable_struct.py:24
    // class FixedWithImmStruct(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // mutable_native_types/fixed_with_immutable_struct.py:42
    // @arc4.abimethod()
    callsub get_tup
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__puya_arc4_router__@21

approval_program_add_tup_route@5:
    // mutable_native_types/fixed_with_immutable_struct.py:36
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // mutable_native_types/fixed_with_immutable_struct.py:24
    // class FixedWithImmStruct(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // mutable_native_types/fixed_with_immutable_struct.py:36
    // @arc4.abimethod()
    callsub add_tup
    intc_2 // 1
    b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__puya_arc4_router__@21

approval_program_num_tups_route@4:
    // mutable_native_types/fixed_with_immutable_struct.py:32
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub num_tups
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__puya_arc4_router__@21

approval_program_create_box_route@3:
    // mutable_native_types/fixed_with_immutable_struct.py:28
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub create_box
    intc_2 // 1
    b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__puya_arc4_router__@21

approval_program_bare_routing@14:
    // mutable_native_types/fixed_with_immutable_struct.py:24
    // class FixedWithImmStruct(arc4.ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match approval_program___algopy_default_create@15

approval_program_switch_case_default@18:

approval_program_switch_case_next@19:
    b approval_program_after_if_else@20

approval_program___algopy_default_create@15:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

approval_program_block@16:

approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__algopy_default_create@17:
    intc_2 // 1
    b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__puya_arc4_router__@21
