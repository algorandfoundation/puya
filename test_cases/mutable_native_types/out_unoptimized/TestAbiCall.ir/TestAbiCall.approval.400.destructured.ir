main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L102
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@13
    block@2: // abi_routing_L102
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@11
    block@3: // call_NoOp_L102
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test_fixed_struct()void" => block@4, method "test_nested_struct()void" => block@5, method "test_dynamic_struct()void" => block@6, method "test_fixed_array()void" => block@7, method "test_native_array()void" => block@8, method "test_log()void" => block@9, * => block@10}
    block@4: // test_fixed_struct_route_L103
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct[routing]()
        goto block@10
    block@5: // test_nested_struct_route_L122
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct[routing]()
        goto block@10
    block@6: // test_dynamic_struct_route_L149
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct[routing]()
        goto block@10
    block@7: // test_fixed_array_route_L188
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array[routing]()
        goto block@10
    block@8: // test_native_array_route_L214
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array[routing]()
        goto block@10
    block@9: // test_log_route_L242
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_log[routing]()
        goto block@10
    block@10: // switch_case_next_L102
        goto block@12
    block@11: // create_NoOp_L102
        goto block@12
    block@12: // after_if_else_L102
        goto block@14
    block@13: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        goto block@16
    block@16: // L1
        goto block@17
    block@17: // after_inlined_test_cases.mutable_native_types.abi_call.TestAbiCall.__algopy_default_create_L1
        exit 1u
    block@14: // after_if_else_L102
        exit 0u
    block@15: // after_inlined_test_cases.mutable_native_types.abi_call.TestAbiCall.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct[routing]() -> void:
    block@0: // L103
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct()
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct[routing]() -> void:
    block@0: // L122
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct()
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct[routing]() -> void:
    block@0: // L149
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct()
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array[routing]() -> void:
    block@0: // L188
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array()
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array[routing]() -> void:
    block@0: // L214
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array()
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_log[routing]() -> void:
    block@0: // L242
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_log()
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct() -> void:
    block@0: // L103
        itxn_begin
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field ClearStateProgramPages) C0IAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CyAEAAEQAiYGBBUffHUMZml4ZWRfc3RydWN0DW5lc3RlZF9zdHJ1Y3QOZHluYW1pY19zdHJ1Y3QJZml4ZWRfYXJyCm5hdGl2ZV9hcnJCAAAxGEAACUIAAIgCEkIAAEIAADEbIhNBAONCAAA2GgCABCQ3jTxPAY4BAMBCAAAxGSISRDEYIhNBAK5CAAA2GgCABBGxm5WABNKLlkqABOoYZV+ABLs7/beABEbsFKCABJtNCSaABE8N61CABFlmSraABBJdE3aABIGOSmKABJu+EDJPC44LAEYAQAA6ADQALgAoACIAHAAWABAACkIAAEIAAEIAAACIAW1C//OIAVpC/+2IAT1C/+eIASpC/+GIARNC/9uIAQBC/9WIAIRC/8+IAHFC/8mIAFpC/8OIAEdC/72IADFC/7dC/7cxGYEFEjEYIhMQRIgAFUL/MjEZIhIxGCISEERCAABCAAAjQ0IAAIgBDiNDQgAANhoBSRUkEkSIAQIjQ0IAAIgBBShPAVCwI0NCAAA2GgFJFYEYEkSIAPcjQ0IAAIgA+ihPAVCwI0NCAAA2GgFJJFmBFhJESSRZTgFJgRJZSwFPA08CUiJZIwslCIEWCEsBgRJZSwESREsBgRJZTgFLAoEUWUsDTwNPAlIiWSMLJQgISwGBFFlLARJESwGBFFlOAUsCFU4BSwNPA08DUiJZJAslCAhLARUSRIgAhyNDQgAAiACKKE8BULAjQ0IAADYaAUkVgTASRIgAfCNDQgAAiACAKE8BULAjQ0IAADYaAUkiWSQLJQhLARUSRIgAbSNDQgAAiABxKE8BULAjQ0IAAIgAbSNDQgAAiUIAAImKAQBCAAApi/9niUIAACIpZUSJigEAQgAAKov/Z4lCAAAiKmVEiYoBAEIAACuL/2eJQgAAIitlRImKAQBCAAAnBIv/Z4lCAAAiJwRlRImKAQBCAAAnBYv/Z4lCAAAiJwVlRIlCAAAiKWVEsCIqZUSwIitlRLAiJwRlRLAiJwVlRLCJ)
        (itxn_field ApprovalProgramPages)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L105
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let app#0: uint64 = create_txn.CreatedApplicationID#0
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 1u)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#0 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%3#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%4#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let fixed_struct#0: Encoded(uint64,uint64) = tmp%4#0
        itxn_begin
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(uint64,uint64) = fixed_struct#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_arg((uint64,uint64))void")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L110
        itxn_submit
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_ret()(uint64,uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L111
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%5#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let len%0#0: uint64 = (len tmp%5#0)
        let eq%0#0: bool = (== len%0#0 16u)
        (assert eq%0#0) // invalid number of bytes for test_cases.mutable_native_types.abi_call.FixedStruct
        let as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = tmp%5#0
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // application log value is not the result of an ABI return
        let res#0: Encoded(uint64,uint64) = as_Encoded(uint64,uint64)%0#0
        let tmp%8#0: bool = (== res#0 fixed_struct#0)
        (assert tmp%8#0) // should be the same
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let tmp%12#0: uint64 = (+ tmp%11#0 3u)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%10#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%12#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = aggregate%head%3#0
        let tmp%13#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#0
        let fixed_struct#0: Encoded(uint64,uint64) = tmp%13#0
        itxn_begin
        let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: Encoded(uint64,uint64) = fixed_struct#0
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_arg((uint64,uint64))void")
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L116
        itxn_submit
        itxn_begin
        let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_ret()(uint64,uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L117
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%14#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let len%1#0: uint64 = (len tmp%14#0)
        let eq%1#0: bool = (== len%1#0 16u)
        (assert eq%1#0) // invalid number of bytes for test_cases.mutable_native_types.abi_call.FixedStruct
        let as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = tmp%14#0
        let tmp%15#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%16#0: bool = (== tmp%15#0 0x151f7c75)
        (assert tmp%16#0) // application log value is not the result of an ABI return
        let res#0: Encoded(uint64,uint64) = as_Encoded(uint64,uint64)%1#0
        let tmp%17#0: bool = (== res#0 fixed_struct#0)
        (assert tmp%17#0) // should be the same
        itxn_begin
        let inner_txn_params%5%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%5%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@6
    block@6: // next_txn_L120
        itxn_submit
        return 

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct() -> void:
    block@0: // L122
        itxn_begin
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field ClearStateProgramPages) C0IAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CyAEAAEQAiYGBBUffHUMZml4ZWRfc3RydWN0DW5lc3RlZF9zdHJ1Y3QOZHluYW1pY19zdHJ1Y3QJZml4ZWRfYXJyCm5hdGl2ZV9hcnJCAAAxGEAACUIAAIgCEkIAAEIAADEbIhNBAONCAAA2GgCABCQ3jTxPAY4BAMBCAAAxGSISRDEYIhNBAK5CAAA2GgCABBGxm5WABNKLlkqABOoYZV+ABLs7/beABEbsFKCABJtNCSaABE8N61CABFlmSraABBJdE3aABIGOSmKABJu+EDJPC44LAEYAQAA6ADQALgAoACIAHAAWABAACkIAAEIAAEIAAACIAW1C//OIAVpC/+2IAT1C/+eIASpC/+GIARNC/9uIAQBC/9WIAIRC/8+IAHFC/8mIAFpC/8OIAEdC/72IADFC/7dC/7cxGYEFEjEYIhMQRIgAFUL/MjEZIhIxGCISEERCAABCAAAjQ0IAAIgBDiNDQgAANhoBSRUkEkSIAQIjQ0IAAIgBBShPAVCwI0NCAAA2GgFJFYEYEkSIAPcjQ0IAAIgA+ihPAVCwI0NCAAA2GgFJJFmBFhJESSRZTgFJgRJZSwFPA08CUiJZIwslCIEWCEsBgRJZSwESREsBgRJZTgFLAoEUWUsDTwNPAlIiWSMLJQgISwGBFFlLARJESwGBFFlOAUsCFU4BSwNPA08DUiJZJAslCAhLARUSRIgAhyNDQgAAiACKKE8BULAjQ0IAADYaAUkVgTASRIgAfCNDQgAAiACAKE8BULAjQ0IAADYaAUkiWSQLJQhLARUSRIgAbSNDQgAAiABxKE8BULAjQ0IAAIgAbSNDQgAAiUIAAImKAQBCAAApi/9niUIAACIpZUSJigEAQgAAKov/Z4lCAAAiKmVEiYoBAEIAACuL/2eJQgAAIitlRImKAQBCAAAnBIv/Z4lCAAAiJwRlRImKAQBCAAAnBYv/Z4lCAAAiJwVlRIlCAAAiKWVEsCIqZUSwIitlRLAiJwRlRLAiJwVlRLCJ)
        (itxn_field ApprovalProgramPages)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L124
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let app#0: uint64 = create_txn.CreatedApplicationID#0
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 1u)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#0 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%3#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%4#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let tmp%5#0: uint64 = (txn NumAppArgs)
        let tmp%6#0: uint64 = (+ tmp%5#0 3u)
        let aggregate%head%2#0: bytes = (concat 0x tmp%4#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%6#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%as_Encoded((uint64,uint64),uint64)%0#0: Encoded((uint64,uint64),uint64) = aggregate%head%3#0
        let tmp%7#0: Encoded((uint64,uint64),uint64) = aggregate%as_Encoded((uint64,uint64),uint64)%0#0
        let nested_struct#0: Encoded((uint64,uint64),uint64) = tmp%7#0
        itxn_begin
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded((uint64,uint64),uint64) = nested_struct#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "nested_struct_arg(((uint64,uint64),uint64))void")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L132
        itxn_submit
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "nested_struct_ret()((uint64,uint64),uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L133
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%8#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let len%0#0: uint64 = (len tmp%8#0)
        let eq%0#0: bool = (== len%0#0 24u)
        (assert eq%0#0) // invalid number of bytes for test_cases.mutable_native_types.abi_call.NestedStruct
        let as_Encoded((uint64,uint64),uint64)%0#0: Encoded((uint64,uint64),uint64) = tmp%8#0
        let tmp%9#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
        (assert tmp%10#0) // application log value is not the result of an ABI return
        let res#0: Encoded((uint64,uint64),uint64) = as_Encoded((uint64,uint64),uint64)%0#0
        let tmp%11#0: bool = (== res#0 nested_struct#0)
        (assert tmp%11#0) // should be the same
        let tmp%12#0: uint64 = (txn NumAppArgs)
        let tmp%13#0: uint64 = (+ tmp%12#0 2u)
        let tmp%14#0: uint64 = (txn NumAppArgs)
        let tmp%15#0: uint64 = (+ tmp%14#0 3u)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%13#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%4#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%3#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%15#0)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint64)%4#0)
        let aggregate%as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = aggregate%head%5#0
        let tmp%16#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#0
        let tmp%17#0: uint64 = (txn NumAppArgs)
        let tmp%18#0: uint64 = (+ tmp%17#0 4u)
        let aggregate%head%6#0: bytes = (concat 0x tmp%16#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%18#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded((uint64,uint64),uint64)%1#0: Encoded((uint64,uint64),uint64) = aggregate%head%7#0
        let tmp%19#0: Encoded((uint64,uint64),uint64) = aggregate%as_Encoded((uint64,uint64),uint64)%1#0
        let nested_struct#0: Encoded((uint64,uint64),uint64) = tmp%19#0
        itxn_begin
        let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: Encoded((uint64,uint64),uint64) = nested_struct#0
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "nested_struct_arg(((uint64,uint64),uint64))void")
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L141
        itxn_submit
        itxn_begin
        let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "nested_struct_ret()((uint64,uint64),uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L142
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%20#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let len%1#0: uint64 = (len tmp%20#0)
        let eq%1#0: bool = (== len%1#0 24u)
        (assert eq%1#0) // invalid number of bytes for test_cases.mutable_native_types.abi_call.NestedStruct
        let as_Encoded((uint64,uint64),uint64)%1#0: Encoded((uint64,uint64),uint64) = tmp%20#0
        let tmp%21#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%22#0: bool = (== tmp%21#0 0x151f7c75)
        (assert tmp%22#0) // application log value is not the result of an ABI return
        let res#0: Encoded((uint64,uint64),uint64) = as_Encoded((uint64,uint64),uint64)%1#0
        let tmp%23#0: bool = (== res#0 nested_struct#0)
        (assert tmp%23#0) // should be the same
        itxn_begin
        let inner_txn_params%5%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%5%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@6
    block@6: // next_txn_L147
        itxn_submit
        return 

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct() -> void:
    block@0: // L149
        itxn_begin
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field ClearStateProgramPages) C0IAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CyAEAAEQAiYGBBUffHUMZml4ZWRfc3RydWN0DW5lc3RlZF9zdHJ1Y3QOZHluYW1pY19zdHJ1Y3QJZml4ZWRfYXJyCm5hdGl2ZV9hcnJCAAAxGEAACUIAAIgCEkIAAEIAADEbIhNBAONCAAA2GgCABCQ3jTxPAY4BAMBCAAAxGSISRDEYIhNBAK5CAAA2GgCABBGxm5WABNKLlkqABOoYZV+ABLs7/beABEbsFKCABJtNCSaABE8N61CABFlmSraABBJdE3aABIGOSmKABJu+EDJPC44LAEYAQAA6ADQALgAoACIAHAAWABAACkIAAEIAAEIAAACIAW1C//OIAVpC/+2IAT1C/+eIASpC/+GIARNC/9uIAQBC/9WIAIRC/8+IAHFC/8mIAFpC/8OIAEdC/72IADFC/7dC/7cxGYEFEjEYIhMQRIgAFUL/MjEZIhIxGCISEERCAABCAAAjQ0IAAIgBDiNDQgAANhoBSRUkEkSIAQIjQ0IAAIgBBShPAVCwI0NCAAA2GgFJFYEYEkSIAPcjQ0IAAIgA+ihPAVCwI0NCAAA2GgFJJFmBFhJESSRZTgFJgRJZSwFPA08CUiJZIwslCIEWCEsBgRJZSwESREsBgRJZTgFLAoEUWUsDTwNPAlIiWSMLJQgISwGBFFlLARJESwGBFFlOAUsCFU4BSwNPA08DUiJZJAslCAhLARUSRIgAhyNDQgAAiACKKE8BULAjQ0IAADYaAUkVgTASRIgAfCNDQgAAiACAKE8BULAjQ0IAADYaAUkiWSQLJQhLARUSRIgAbSNDQgAAiABxKE8BULAjQ0IAAIgAbSNDQgAAiUIAAImKAQBCAAApi/9niUIAACIpZUSJigEAQgAAKov/Z4lCAAAiKmVEiYoBAEIAACuL/2eJQgAAIitlRImKAQBCAAAnBIv/Z4lCAAAiJwRlRImKAQBCAAAnBYv/Z4lCAAAiJwVlRIlCAAAiKWVEsCIqZUSwIitlRLAiJwRlRLAiJwVlRLCJ)
        (itxn_field ApprovalProgramPages)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L151
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let app#0: uint64 = create_txn.CreatedApplicationID#0
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 1u)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#0 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%3#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%4#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let fixed_struct#0: Encoded(uint64,uint64) = tmp%4#0
        let tmp%5#0: uint64 = (txn NumAppArgs)
        let tmp%6#0: uint64 = (+ tmp%5#0 1u)
        let tmp%7#0: uint64 = (txn NumAppArgs)
        let tmp%8#0: uint64 = (+ tmp%7#0 2u)
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#0: uint64 = (+ tmp%9#0 3u)
        let tmp%11#0: bytes = (itob tmp%10#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%2#0: bytes = (concat aggregate%len_u16%0#0 fixed_struct#0)
        let aggregate%as_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = aggregate%head%2#0
        let encoded_array%0#0: Encoded(len+(uint64,uint64)[]) = aggregate%as_Encoded(len+(uint64,uint64)[])%0#0
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%6#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%3#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%8#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%length%0#0: uint64 = (len tmp%11#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%11#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%2#0: bytes[8] = (itob 22u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 22u aggregate%data_length%0#0)
        let aggregate%length%1#0: uint64 = (len "Hello")
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "Hello")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 aggregate%data_length%1#0)
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%current_tail_offset%1#0)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%offset_as_uint16%2#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%7#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%concat%1#0 encoded_array%0#0)
        let aggregate%as_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%0#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = aggregate%concat%2#0
        let tmp%12#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = aggregate%as_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%0#0
        let dynamic_struct#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = tmp%12#0
        itxn_begin
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = dynamic_struct#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L164
        itxn_submit
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L165
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%13#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%13#0 16u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 22u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 tmp%13#0 16u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 tmp%13#0 18u)
        let aggregate%substring3%0#0: bytes = (substring3 tmp%13#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let tmp%14#0: Encoded(len+uint8[]) = aggregate%substring3%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%14#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 22u add%0#0)
        let extract_uint16%1#0: uint64 = (extract_uint16 tmp%13#0 18u) // on error: invalid tuple encoding
        let eq%1#0: bool = (== extract_uint16%1#0 add%1#0)
        (assert eq%1#0) // invalid tail pointer at index 3 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 tmp%13#0 18u)
        let aggregate%extract_uint16%3#0: uint64 = (extract_uint16 tmp%13#0 20u)
        let aggregate%substring3%1#0: bytes = (substring3 tmp%13#0 aggregate%extract_uint16%2#0 aggregate%extract_uint16%3#0)
        let tmp%15#0: Encoded(len+utf8[]) = aggregate%substring3%1#0
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%15#0 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%1#0
        let mul%1#0: uint64 = (* length%1#0 1u)
        let add%2#0: uint64 = (+ mul%1#0 2u)
        let add%3#0: uint64 = (+ add%1#0 add%2#0)
        let extract_uint16%2#0: uint64 = (extract_uint16 tmp%13#0 20u) // on error: invalid tuple encoding
        let eq%2#0: bool = (== extract_uint16%2#0 add%3#0)
        (assert eq%2#0) // invalid tail pointer at index 4 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))
        let aggregate%extract_uint16%4#0: uint64 = (extract_uint16 tmp%13#0 20u)
        let aggregate%len%0#0: uint64 = (len tmp%13#0)
        let aggregate%substring3%2#0: bytes = (substring3 tmp%13#0 aggregate%extract_uint16%4#0 aggregate%len%0#0)
        let tmp%16#0: Encoded(len+(uint64,uint64)[]) = aggregate%substring3%2#0
        let aggregate%array_length%2#0: uint64 = (extract_uint16 tmp%16#0 0u) // on error: invalid array length header
        let length%2#0: uint64 = aggregate%array_length%2#0
        let mul%2#0: uint64 = (* length%2#0 16u)
        let add%4#0: uint64 = (+ mul%2#0 2u)
        let add%5#0: uint64 = (+ add%3#0 add%4#0)
        let len%0#0: uint64 = (len tmp%13#0)
        let eq%3#0: bool = (== len%0#0 add%5#0)
        (assert eq%3#0) // invalid number of bytes for test_cases.mutable_native_types.abi_call.DynamicStruct
        let as_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%0#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = tmp%13#0
        let tmp%17#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%18#0: bool = (== tmp%17#0 0x151f7c75)
        (assert tmp%18#0) // application log value is not the result of an ABI return
        let res#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = as_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%0#0
        let tmp%19#0: bool = (== res#0 dynamic_struct#0)
        (assert tmp%19#0) // should be the same
        let tmp%20#0: uint64 = (txn NumAppArgs)
        let tmp%21#0: uint64 = (+ tmp%20#0 2u)
        let tmp%22#0: uint64 = (txn NumAppArgs)
        let tmp%23#0: uint64 = (+ tmp%22#0 3u)
        let tmp%24#0: uint64 = (txn NumAppArgs)
        let tmp%25#0: uint64 = (+ tmp%24#0 4u)
        let tmp%26#0: bytes = (itob tmp%25#0)
        let aggregate%as_bytes%6#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%8#0: bytes = (concat aggregate%len_u16%1#0 fixed_struct#0)
        let aggregate%as_Encoded(len+(uint64,uint64)[])%1#0: Encoded(len+(uint64,uint64)[]) = aggregate%head%8#0
        let encoded_array%1#0: Encoded(len+(uint64,uint64)[]) = aggregate%as_Encoded(len+(uint64,uint64)[])%1#0
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%21#0)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%9#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%23#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%length%2#0: uint64 = (len tmp%26#0)
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 tmp%26#0)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%2#0
        let aggregate%as_bytes%8#0: bytes[8] = (itob 22u)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%8#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 aggregate%offset_as_uint16%3#0)
        let aggregate%data_length%3#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%1#0)
        let aggregate%current_tail_offset%3#0: uint64 = (+ 22u aggregate%data_length%3#0)
        let aggregate%length%3#0: uint64 = (len "Hello")
        let aggregate%as_bytes%9#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%9#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 "Hello")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%3#0
        let aggregate%as_bytes%10#0: bytes[8] = (itob aggregate%current_tail_offset%3#0)
        let aggregate%offset_as_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%head%12#0: bytes = (concat aggregate%head%11#0 aggregate%offset_as_uint16%4#0)
        let aggregate%data_length%4#0: uint64 = (len aggregate%as_Encoded(len+utf8[])%1#0)
        let aggregate%current_tail_offset%4#0: uint64 = (+ aggregate%current_tail_offset%3#0 aggregate%data_length%4#0)
        let aggregate%as_bytes%11#0: bytes[8] = (itob aggregate%current_tail_offset%4#0)
        let aggregate%offset_as_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%11#0)
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 aggregate%offset_as_uint16%5#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%head%13#0 aggregate%as_Encoded(len+uint8[])%1#0)
        let aggregate%concat%4#0: bytes = (concat aggregate%concat%3#0 aggregate%as_Encoded(len+utf8[])%1#0)
        let aggregate%concat%5#0: bytes = (concat aggregate%concat%4#0 encoded_array%1#0)
        let aggregate%as_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%1#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = aggregate%concat%5#0
        let tmp%27#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = aggregate%as_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%1#0
        let dynamic_struct#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = tmp%27#0
        itxn_begin
        let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = dynamic_struct#0
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void")
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L176
        itxn_submit
        itxn_begin
        let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L181
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%28#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let extract_uint16%3#0: uint64 = (extract_uint16 tmp%28#0 16u) // on error: invalid tuple encoding
        let eq%4#0: bool = (== extract_uint16%3#0 22u)
        (assert eq%4#0) // invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))
        let aggregate%extract_uint16%5#0: uint64 = (extract_uint16 tmp%28#0 16u)
        let aggregate%extract_uint16%6#0: uint64 = (extract_uint16 tmp%28#0 18u)
        let aggregate%substring3%3#0: bytes = (substring3 tmp%28#0 aggregate%extract_uint16%5#0 aggregate%extract_uint16%6#0)
        let tmp%29#0: Encoded(len+uint8[]) = aggregate%substring3%3#0
        let aggregate%array_length%3#0: uint64 = (extract_uint16 tmp%29#0 0u) // on error: invalid array length header
        let length%3#0: uint64 = aggregate%array_length%3#0
        let mul%3#0: uint64 = (* length%3#0 1u)
        let add%6#0: uint64 = (+ mul%3#0 2u)
        let add%7#0: uint64 = (+ 22u add%6#0)
        let extract_uint16%4#0: uint64 = (extract_uint16 tmp%28#0 18u) // on error: invalid tuple encoding
        let eq%5#0: bool = (== extract_uint16%4#0 add%7#0)
        (assert eq%5#0) // invalid tail pointer at index 3 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))
        let aggregate%extract_uint16%7#0: uint64 = (extract_uint16 tmp%28#0 18u)
        let aggregate%extract_uint16%8#0: uint64 = (extract_uint16 tmp%28#0 20u)
        let aggregate%substring3%4#0: bytes = (substring3 tmp%28#0 aggregate%extract_uint16%7#0 aggregate%extract_uint16%8#0)
        let tmp%30#0: Encoded(len+utf8[]) = aggregate%substring3%4#0
        let aggregate%array_length%4#0: uint64 = (extract_uint16 tmp%30#0 0u) // on error: invalid array length header
        let length%4#0: uint64 = aggregate%array_length%4#0
        let mul%4#0: uint64 = (* length%4#0 1u)
        let add%8#0: uint64 = (+ mul%4#0 2u)
        let add%9#0: uint64 = (+ add%7#0 add%8#0)
        let extract_uint16%5#0: uint64 = (extract_uint16 tmp%28#0 20u) // on error: invalid tuple encoding
        let eq%6#0: bool = (== extract_uint16%5#0 add%9#0)
        (assert eq%6#0) // invalid tail pointer at index 4 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))
        let aggregate%extract_uint16%9#0: uint64 = (extract_uint16 tmp%28#0 20u)
        let aggregate%len%1#0: uint64 = (len tmp%28#0)
        let aggregate%substring3%5#0: bytes = (substring3 tmp%28#0 aggregate%extract_uint16%9#0 aggregate%len%1#0)
        let tmp%31#0: Encoded(len+(uint64,uint64)[]) = aggregate%substring3%5#0
        let aggregate%array_length%5#0: uint64 = (extract_uint16 tmp%31#0 0u) // on error: invalid array length header
        let length%5#0: uint64 = aggregate%array_length%5#0
        let mul%5#0: uint64 = (* length%5#0 16u)
        let add%10#0: uint64 = (+ mul%5#0 2u)
        let add%11#0: uint64 = (+ add%9#0 add%10#0)
        let len%1#0: uint64 = (len tmp%28#0)
        let eq%7#0: bool = (== len%1#0 add%11#0)
        (assert eq%7#0) // invalid number of bytes for test_cases.mutable_native_types.abi_call.DynamicStruct
        let as_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%1#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = tmp%28#0
        let tmp%32#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%33#0: bool = (== tmp%32#0 0x151f7c75)
        (assert tmp%33#0) // application log value is not the result of an ABI return
        let res#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = as_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%1#0
        let tmp%34#0: bool = (== res#0 dynamic_struct#0)
        (assert tmp%34#0) // should be the same
        itxn_begin
        let inner_txn_params%5%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%5%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@6
    block@6: // next_txn_L186
        itxn_submit
        return 

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array() -> void:
    block@0: // L188
        itxn_begin
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field ClearStateProgramPages) C0IAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CyAEAAEQAiYGBBUffHUMZml4ZWRfc3RydWN0DW5lc3RlZF9zdHJ1Y3QOZHluYW1pY19zdHJ1Y3QJZml4ZWRfYXJyCm5hdGl2ZV9hcnJCAAAxGEAACUIAAIgCEkIAAEIAADEbIhNBAONCAAA2GgCABCQ3jTxPAY4BAMBCAAAxGSISRDEYIhNBAK5CAAA2GgCABBGxm5WABNKLlkqABOoYZV+ABLs7/beABEbsFKCABJtNCSaABE8N61CABFlmSraABBJdE3aABIGOSmKABJu+EDJPC44LAEYAQAA6ADQALgAoACIAHAAWABAACkIAAEIAAEIAAACIAW1C//OIAVpC/+2IAT1C/+eIASpC/+GIARNC/9uIAQBC/9WIAIRC/8+IAHFC/8mIAFpC/8OIAEdC/72IADFC/7dC/7cxGYEFEjEYIhMQRIgAFUL/MjEZIhIxGCISEERCAABCAAAjQ0IAAIgBDiNDQgAANhoBSRUkEkSIAQIjQ0IAAIgBBShPAVCwI0NCAAA2GgFJFYEYEkSIAPcjQ0IAAIgA+ihPAVCwI0NCAAA2GgFJJFmBFhJESSRZTgFJgRJZSwFPA08CUiJZIwslCIEWCEsBgRJZSwESREsBgRJZTgFLAoEUWUsDTwNPAlIiWSMLJQgISwGBFFlLARJESwGBFFlOAUsCFU4BSwNPA08DUiJZJAslCAhLARUSRIgAhyNDQgAAiACKKE8BULAjQ0IAADYaAUkVgTASRIgAfCNDQgAAiACAKE8BULAjQ0IAADYaAUkiWSQLJQhLARUSRIgAbSNDQgAAiABxKE8BULAjQ0IAAIgAbSNDQgAAiUIAAImKAQBCAAApi/9niUIAACIpZUSJigEAQgAAKov/Z4lCAAAiKmVEiYoBAEIAACuL/2eJQgAAIitlRImKAQBCAAAnBIv/Z4lCAAAiJwRlRImKAQBCAAAnBYv/Z4lCAAAiJwVlRIlCAAAiKWVEsCIqZUSwIitlRLAiJwRlRLAiJwVlRLCJ)
        (itxn_field ApprovalProgramPages)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L190
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let app#0: uint64 = create_txn.CreatedApplicationID#0
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 1u)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#0 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%3#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%4#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let fixed_struct#0: Encoded(uint64,uint64) = tmp%4#0
        let aggregate%head%2#0: bytes = (concat 0x fixed_struct#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 fixed_struct#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 fixed_struct#0)
        let aggregate%as_Encoded((uint64,uint64)[3])%0#0: Encoded((uint64,uint64)[3]) = aggregate%head%4#0
        let encoded_array%0#0: Encoded((uint64,uint64)[3]) = aggregate%as_Encoded((uint64,uint64)[3])%0#0
        let fixed_arr#0: Encoded((uint64,uint64)[3]) = encoded_array%0#0
        itxn_begin
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded((uint64,uint64)[3]) = fixed_arr#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_arg((uint64,uint64)[3])void")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L197
        itxn_submit
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_ret()(uint64,uint64)[3]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L198
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%5#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let len%0#0: uint64 = (len tmp%5#0)
        let eq%0#0: bool = (== len%0#0 48u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<test_cases.mutable_native_types.abi_call.FixedStruct, 3>
        let as_Encoded((uint64,uint64)[3])%0#0: Encoded((uint64,uint64)[3]) = tmp%5#0
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // application log value is not the result of an ABI return
        let res#0: Encoded((uint64,uint64)[3]) = as_Encoded((uint64,uint64)[3])%0#0
        let tmp%8#0: bool = (== res#0 fixed_arr#0)
        (assert tmp%8#0) // should be the same
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let tmp%12#0: uint64 = (+ tmp%11#0 3u)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%10#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%5#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%12#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = aggregate%head%6#0
        let tmp%13#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#0
        let fixed_struct#0: Encoded(uint64,uint64) = tmp%13#0
        let aggregate%head%7#0: bytes = (concat 0x fixed_struct#0)
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 fixed_struct#0)
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 fixed_struct#0)
        let aggregate%as_Encoded((uint64,uint64)[3])%1#0: Encoded((uint64,uint64)[3]) = aggregate%head%9#0
        let encoded_array%1#0: Encoded((uint64,uint64)[3]) = aggregate%as_Encoded((uint64,uint64)[3])%1#0
        let fixed_arr#0: Encoded((uint64,uint64)[3]) = encoded_array%1#0
        itxn_begin
        let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: Encoded((uint64,uint64)[3]) = fixed_arr#0
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_arg((uint64,uint64)[3])void")
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L204
        itxn_submit
        itxn_begin
        let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_ret()(uint64,uint64)[3]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L209
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%14#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let len%1#0: uint64 = (len tmp%14#0)
        let eq%1#0: bool = (== len%1#0 48u)
        (assert eq%1#0) // invalid number of bytes for arc4.static_array<test_cases.mutable_native_types.abi_call.FixedStruct, 3>
        let as_Encoded((uint64,uint64)[3])%1#0: Encoded((uint64,uint64)[3]) = tmp%14#0
        let tmp%15#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%16#0: bool = (== tmp%15#0 0x151f7c75)
        (assert tmp%16#0) // application log value is not the result of an ABI return
        let res#0: Encoded((uint64,uint64)[3]) = as_Encoded((uint64,uint64)[3])%1#0
        let tmp%17#0: bool = (== res#0 fixed_arr#0)
        (assert tmp%17#0) // should be the same
        itxn_begin
        let inner_txn_params%5%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%5%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@6
    block@6: // next_txn_L212
        itxn_submit
        return 

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array() -> void:
    block@0: // L214
        itxn_begin
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field ClearStateProgramPages) C0IAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CyAEAAEQAiYGBBUffHUMZml4ZWRfc3RydWN0DW5lc3RlZF9zdHJ1Y3QOZHluYW1pY19zdHJ1Y3QJZml4ZWRfYXJyCm5hdGl2ZV9hcnJCAAAxGEAACUIAAIgCEkIAAEIAADEbIhNBAONCAAA2GgCABCQ3jTxPAY4BAMBCAAAxGSISRDEYIhNBAK5CAAA2GgCABBGxm5WABNKLlkqABOoYZV+ABLs7/beABEbsFKCABJtNCSaABE8N61CABFlmSraABBJdE3aABIGOSmKABJu+EDJPC44LAEYAQAA6ADQALgAoACIAHAAWABAACkIAAEIAAEIAAACIAW1C//OIAVpC/+2IAT1C/+eIASpC/+GIARNC/9uIAQBC/9WIAIRC/8+IAHFC/8mIAFpC/8OIAEdC/72IADFC/7dC/7cxGYEFEjEYIhMQRIgAFUL/MjEZIhIxGCISEERCAABCAAAjQ0IAAIgBDiNDQgAANhoBSRUkEkSIAQIjQ0IAAIgBBShPAVCwI0NCAAA2GgFJFYEYEkSIAPcjQ0IAAIgA+ihPAVCwI0NCAAA2GgFJJFmBFhJESSRZTgFJgRJZSwFPA08CUiJZIwslCIEWCEsBgRJZSwESREsBgRJZTgFLAoEUWUsDTwNPAlIiWSMLJQgISwGBFFlLARJESwGBFFlOAUsCFU4BSwNPA08DUiJZJAslCAhLARUSRIgAhyNDQgAAiACKKE8BULAjQ0IAADYaAUkVgTASRIgAfCNDQgAAiACAKE8BULAjQ0IAADYaAUkiWSQLJQhLARUSRIgAbSNDQgAAiABxKE8BULAjQ0IAAIgAbSNDQgAAiUIAAImKAQBCAAApi/9niUIAACIpZUSJigEAQgAAKov/Z4lCAAAiKmVEiYoBAEIAACuL/2eJQgAAIitlRImKAQBCAAAnBIv/Z4lCAAAiJwRlRImKAQBCAAAnBYv/Z4lCAAAiJwVlRIlCAAAiKWVEsCIqZUSwIitlRLAiJwRlRLAiJwVlRLCJ)
        (itxn_field ApprovalProgramPages)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L216
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let app#0: uint64 = create_txn.CreatedApplicationID#0
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 1u)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#0 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%3#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%4#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let fixed_struct#0: Encoded(uint64,uint64) = tmp%4#0
        let aggregate%as_bytes%0#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%2#0: bytes = (concat aggregate%len_u16%0#0 fixed_struct#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 fixed_struct#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 fixed_struct#0)
        let aggregate%as_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = aggregate%head%4#0
        let encoded_array%0#0: Encoded(len+(uint64,uint64)[]) = aggregate%as_Encoded(len+(uint64,uint64)[])%0#0
        let native_arr#0: Encoded(len+(uint64,uint64)[]) = encoded_array%0#0
        itxn_begin
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+(uint64,uint64)[]) = native_arr#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "native_arr_arg((uint64,uint64)[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L223
        itxn_submit
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "native_arr_ret()(uint64,uint64)[]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L224
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%5#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%5#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 16u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%5#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<test_cases.mutable_native_types.abi_call.FixedStruct>
        let as_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = tmp%5#0
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // application log value is not the result of an ABI return
        let res#0: Encoded(len+(uint64,uint64)[]) = as_Encoded(len+(uint64,uint64)[])%0#0
        let tmp%8#0: bool = (== res#0 native_arr#0)
        (assert tmp%8#0) // should be the same
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let tmp%12#0: uint64 = (+ tmp%11#0 3u)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%10#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%5#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%12#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = aggregate%head%6#0
        let tmp%13#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#0
        let fixed_struct#0: Encoded(uint64,uint64) = tmp%13#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%7#0: bytes = (concat aggregate%len_u16%1#0 fixed_struct#0)
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 fixed_struct#0)
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 fixed_struct#0)
        let aggregate%as_Encoded(len+(uint64,uint64)[])%1#0: Encoded(len+(uint64,uint64)[]) = aggregate%head%9#0
        let encoded_array%1#0: Encoded(len+(uint64,uint64)[]) = aggregate%as_Encoded(len+(uint64,uint64)[])%1#0
        let native_arr#0: Encoded(len+(uint64,uint64)[]) = encoded_array%1#0
        itxn_begin
        let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: Encoded(len+(uint64,uint64)[]) = native_arr#0
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "native_arr_arg((uint64,uint64)[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L230
        itxn_submit
        itxn_begin
        let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "native_arr_ret()(uint64,uint64)[]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L235
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%14#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%14#0 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%1#0
        let mul%1#0: uint64 = (* length%1#0 16u)
        let add%1#0: uint64 = (+ mul%1#0 2u)
        let len%1#0: uint64 = (len tmp%14#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<test_cases.mutable_native_types.abi_call.FixedStruct>
        let as_Encoded(len+(uint64,uint64)[])%1#0: Encoded(len+(uint64,uint64)[]) = tmp%14#0
        let tmp%15#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%16#0: bool = (== tmp%15#0 0x151f7c75)
        (assert tmp%16#0) // application log value is not the result of an ABI return
        let res#0: Encoded(len+(uint64,uint64)[]) = as_Encoded(len+(uint64,uint64)[])%1#0
        let tmp%17#0: bool = (== res#0 native_arr#0)
        (assert tmp%17#0) // should be the same
        itxn_begin
        let inner_txn_params%5%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%5%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@6
    block@6: // next_txn_L240
        itxn_submit
        return 

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_log() -> void:
    block@0: // L242
        itxn_begin
        ((itxn_field LocalNumUint) 0u)
        ((itxn_field LocalNumByteSlice) 0u)
        ((itxn_field GlobalNumUint) 0u)
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ExtraProgramPages) 0u)
        ((itxn_field ClearStateProgramPages) C0IAAIEBQw==)
        (itxn_field ClearStateProgramPages)
        ((itxn_field ApprovalProgramPages) CyAEAAEQAiYGBBUffHUMZml4ZWRfc3RydWN0DW5lc3RlZF9zdHJ1Y3QOZHluYW1pY19zdHJ1Y3QJZml4ZWRfYXJyCm5hdGl2ZV9hcnJCAAAxGEAACUIAAIgCEkIAAEIAADEbIhNBAONCAAA2GgCABCQ3jTxPAY4BAMBCAAAxGSISRDEYIhNBAK5CAAA2GgCABBGxm5WABNKLlkqABOoYZV+ABLs7/beABEbsFKCABJtNCSaABE8N61CABFlmSraABBJdE3aABIGOSmKABJu+EDJPC44LAEYAQAA6ADQALgAoACIAHAAWABAACkIAAEIAAEIAAACIAW1C//OIAVpC/+2IAT1C/+eIASpC/+GIARNC/9uIAQBC/9WIAIRC/8+IAHFC/8mIAFpC/8OIAEdC/72IADFC/7dC/7cxGYEFEjEYIhMQRIgAFUL/MjEZIhIxGCISEERCAABCAAAjQ0IAAIgBDiNDQgAANhoBSRUkEkSIAQIjQ0IAAIgBBShPAVCwI0NCAAA2GgFJFYEYEkSIAPcjQ0IAAIgA+ihPAVCwI0NCAAA2GgFJJFmBFhJESSRZTgFJgRJZSwFPA08CUiJZIwslCIEWCEsBgRJZSwESREsBgRJZTgFLAoEUWUsDTwNPAlIiWSMLJQgISwGBFFlLARJESwGBFFlOAUsCFU4BSwNPA08DUiJZJAslCAhLARUSRIgAhyNDQgAAiACKKE8BULAjQ0IAADYaAUkVgTASRIgAfCNDQgAAiACAKE8BULAjQ0IAADYaAUkiWSQLJQhLARUSRIgAbSNDQgAAiABxKE8BULAjQ0IAAIgAbSNDQgAAiUIAAImKAQBCAAApi/9niUIAACIpZUSJigEAQgAAKov/Z4lCAAAiKmVEiYoBAEIAACuL/2eJQgAAIitlRImKAQBCAAAnBIv/Z4lCAAAiJwRlRImKAQBCAAAnBYv/Z4lCAAAiJwVlRIlCAAAiKWVEsCIqZUSwIitlRLAiJwRlRLAiJwVlRLCJ)
        (itxn_field ApprovalProgramPages)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L244
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let app#0: uint64 = create_txn.CreatedApplicationID#0
        let tmp%0#0: Encoded(uint64,uint64) = (bzero 16u)
        let fixed_struct#0: Encoded(uint64,uint64) = tmp%0#0
        itxn_begin
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(uint64,uint64) = fixed_struct#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_arg((uint64,uint64))void")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L249
        itxn_submit
        let tmp%1#0: Encoded((uint64,uint64),uint64) = (bzero 24u)
        let nested_struct#0: Encoded((uint64,uint64),uint64) = tmp%1#0
        itxn_begin
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: Encoded((uint64,uint64),uint64) = nested_struct#0
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "nested_struct_arg(((uint64,uint64),uint64))void")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L253
        itxn_submit
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = aggregate%len_u16%0#0
        let encoded_array%0#0: Encoded(len+(uint64,uint64)[]) = aggregate%as_Encoded(len+(uint64,uint64)[])%0#0
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%length%0#0: uint64 = (len 0x)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 0x)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%2#0: bytes[8] = (itob 22u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 22u aggregate%data_length%0#0)
        let aggregate%length%1#0: uint64 = (len "")
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 aggregate%data_length%1#0)
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%current_tail_offset%1#0)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%offset_as_uint16%2#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%concat%1#0 encoded_array%0#0)
        let aggregate%as_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%0#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = aggregate%concat%2#0
        let tmp%2#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = aggregate%as_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%0#0
        let dynamic_struct#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = tmp%2#0
        itxn_begin
        let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = dynamic_struct#0
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void")
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L259
        itxn_submit
        let tmp%3#0: Encoded((uint64,uint64)[3]) = (bzero 48u)
        let fixed_arr#0: Encoded((uint64,uint64)[3]) = tmp%3#0
        itxn_begin
        let inner_txn_params%4%%param_ApplicationArgs_idx_1#0: Encoded((uint64,uint64)[3]) = fixed_arr#0
        let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_arg((uint64,uint64)[3])void")
        ((itxn_field ApplicationArgs) inner_txn_params%4%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L263
        itxn_submit
        let aggregate%as_bytes%6#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%as_Encoded(len+(uint64,uint64)[])%1#0: Encoded(len+(uint64,uint64)[]) = aggregate%len_u16%1#0
        let encoded_array%1#0: Encoded(len+(uint64,uint64)[]) = aggregate%as_Encoded(len+(uint64,uint64)[])%1#0
        let native_arr#0: Encoded(len+(uint64,uint64)[]) = encoded_array%1#0
        itxn_begin
        let inner_txn_params%5%%param_ApplicationArgs_idx_1#0: Encoded(len+(uint64,uint64)[]) = native_arr#0
        let inner_txn_params%5%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%5%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "native_arr_arg((uint64,uint64)[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%5%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@6
    block@6: // next_txn_L267
        itxn_submit
        itxn_begin
        let inner_txn_params%6%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%6%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "log_it()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@7
    block@7: // next_txn_L269
        itxn_submit
        let txn.NumLogs#0: uint64 = (itxn NumLogs)
        let tmp%4#0: bool = (== txn.NumLogs#0 5u)
        (assert tmp%4#0) // expected 5 logs
        let tmp%5#0: bytes = ((itxnas Logs) 0u)
        let tmp%6#0: bytes = (bzero 16u)
        let tmp%7#0: bool = (== tmp%5#0 tmp%6#0)
        (assert tmp%7#0) // expected fixed struct
        let tmp%8#0: bytes = ((itxnas Logs) 1u)
        let tmp%9#0: bytes = (bzero 24u)
        let tmp%10#0: bool = (== tmp%8#0 tmp%9#0)
        (assert tmp%10#0) // expected nested struct
        let tmp%11#0: uint64 = (* 8u 2u)
        let dynamic_struct_len#0: uint64 = tmp%11#0
        let tmp%12#0: uint64 = (+ dynamic_struct_len#0 6u)
        let dynamic_struct_len#0: uint64 = tmp%12#0
        let tmp%13#0: uint64 = (+ dynamic_struct_len#0 6u)
        let dynamic_struct_len#0: uint64 = tmp%13#0
        let tmp%14#0: bytes = ((itxnas Logs) 2u)
        let tmp%15#0: uint64 = (len tmp%14#0)
        let tmp%16#0: bool = (== tmp%15#0 dynamic_struct_len#0)
        (assert tmp%16#0) // expected dynamic struct
        let tmp%17#0: bytes = ((itxnas Logs) 3u)
        let tmp%18#0: bytes = (bzero 48u)
        let tmp%19#0: bool = (== tmp%17#0 tmp%18#0)
        (assert tmp%19#0) // expected fixed array
        let tmp%20#0: bytes = ((itxnas Logs) 4u)
        let tmp%21#0: bytes = (bzero 2u)
        let tmp%22#0: bool = (== tmp%20#0 tmp%21#0)
        (assert tmp%22#0) // expected fixed array
        itxn_begin
        let inner_txn_params%7%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) inner_txn_params%7%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@8
    block@8: // next_txn_L280
        itxn_submit
        return 