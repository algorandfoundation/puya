{
  "version": 3,
  "sources": [
    "../fixed_with_immutable_struct.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BQ;AAAA;;;AAAA;;;AAIO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAER;;;AAEe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2B;AAA3B;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AAA5B;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAER;;;AAEuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAR;;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAP;AArBR;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;AAAA;;AAkBK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlBL;;;AAAA;AAkBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAZL;;;AAYK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAJL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 8 1 16"
    },
    "7": {
      "op": "bytecblock \"tup_bag\" 0x151f7c75"
    },
    "22": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "24": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "27": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__init__",
      "op": "callsub __init__"
    },
    "30": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "33": {
      "op": "return",
      "stack_out": []
    },
    "34": {
      "subroutine": "test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__init__",
      "params": {},
      "block": "__init___block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "35": {
      "subroutine": "test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.create_box",
      "params": {},
      "block": "create_box_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "36": {
      "op": "pushint 136 // 136",
      "defined_out": [
        "\"tup_bag\"",
        "136"
      ],
      "stack_out": [
        "\"tup_bag\"",
        "136"
      ]
    },
    "39": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "40": {
      "op": "pop",
      "stack_out": []
    },
    "41": {
      "retsub": true,
      "op": "retsub"
    },
    "42": {
      "subroutine": "test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.num_tups",
      "params": {},
      "block": "num_tups_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "43": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "44": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "45": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "46": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "8"
      ]
    },
    "47": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "48": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "49": {
      "retsub": true,
      "op": "retsub"
    },
    "50": {
      "subroutine": "test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.add_tup",
      "params": {
        "tup#0": "bytes"
      },
      "block": "add_tup",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "53": {
      "block": "add_tup_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "54": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "55": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "56": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "57": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "8"
      ]
    },
    "58": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "59": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "60": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tmp%0#0",
        "8"
      ]
    },
    "61": {
      "op": "<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "62": {
      "error": "too many tups",
      "op": "assert // too many tups",
      "stack_out": []
    },
    "63": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "64": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "65": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "66": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "67": {
      "op": "intc_1 // 8",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "8"
      ]
    },
    "68": {
      "op": "pushint 128 // 128",
      "defined_out": [
        "128",
        "8",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "8",
        "128"
      ]
    },
    "71": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ]
    },
    "72": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "\"tup_bag\""
      ]
    },
    "73": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "74": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "maybe_value%2#0"
      ]
    },
    "75": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "76": {
      "op": "intc_1 // 8",
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "maybe_value%2#0",
        "0",
        "8"
      ]
    },
    "77": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "encoded%1#0"
      ]
    },
    "78": {
      "op": "btoi",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "79": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "80": {
      "op": "intc_1 // 8",
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "8"
      ]
    },
    "81": {
      "op": "<",
      "defined_out": [
        "index_is_in_bounds%0#0",
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "index_is_in_bounds%0#0"
      ]
    },
    "82": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "83": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "16"
      ]
    },
    "84": {
      "op": "*",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "write_offset%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "write_offset%0#0"
      ]
    },
    "85": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "tup#0 (copy)",
        "write_offset%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "write_offset%0#0",
        "tup#0 (copy)"
      ]
    },
    "87": {
      "op": "replace3",
      "defined_out": [
        "assigned_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "assigned_value%0#0"
      ]
    },
    "88": {
      "op": "swap",
      "stack_out": [
        "assigned_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "89": {
      "op": "intc_1 // 8",
      "stack_out": [
        "assigned_value%0#0",
        "maybe_value%1#0",
        "8"
      ]
    },
    "90": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%1#0",
        "8",
        "assigned_value%0#0"
      ]
    },
    "92": {
      "op": "replace3",
      "defined_out": [
        "updated_data%0#0"
      ],
      "stack_out": [
        "updated_data%0#0"
      ]
    },
    "93": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "updated_data%0#0",
        "\"tup_bag\""
      ]
    },
    "94": {
      "op": "swap",
      "stack_out": [
        "\"tup_bag\"",
        "updated_data%0#0"
      ]
    },
    "95": {
      "op": "box_put",
      "stack_out": []
    },
    "96": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "97": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "98": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "99": {
      "op": "dup",
      "defined_out": [
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)"
      ]
    },
    "100": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)",
        "0"
      ]
    },
    "101": {
      "op": "intc_1 // 8",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)",
        "0",
        "8"
      ]
    },
    "102": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "encoded%2#0"
      ]
    },
    "103": {
      "op": "btoi",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "tmp%4#0"
      ]
    },
    "104": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "tmp%4#0",
        "1"
      ]
    },
    "105": {
      "op": "+",
      "defined_out": [
        "assigned_value%1#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "assigned_value%1#0"
      ]
    },
    "106": {
      "op": "itob",
      "defined_out": [
        "encoded%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "encoded%3#0"
      ]
    },
    "107": {
      "op": "swap",
      "stack_out": [
        "encoded%3#0",
        "maybe_value%3#0"
      ]
    },
    "108": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded%3#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "109": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%3#0",
        "0",
        "encoded%3#0"
      ]
    },
    "111": {
      "op": "replace3",
      "defined_out": [
        "updated_data%1#0"
      ],
      "stack_out": [
        "updated_data%1#0"
      ]
    },
    "112": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "updated_data%1#0",
        "\"tup_bag\""
      ]
    },
    "113": {
      "op": "swap",
      "stack_out": [
        "\"tup_bag\"",
        "updated_data%1#0"
      ]
    },
    "114": {
      "op": "box_put",
      "stack_out": []
    },
    "115": {
      "retsub": true,
      "op": "retsub"
    },
    "116": {
      "subroutine": "test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.get_tup",
      "params": {
        "index#0": "uint64"
      },
      "block": "get_tup",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "119": {
      "block": "get_tup_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "120": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "121": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "122": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "123": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "8"
      ]
    },
    "124": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "125": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "126": {
      "op": "frame_dig -1",
      "defined_out": [
        "index#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "index#0 (copy)"
      ]
    },
    "128": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "129": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": []
    },
    "130": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "131": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "132": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "133": {
      "op": "intc_1 // 8",
      "stack_out": [
        "maybe_value%1#0",
        "8"
      ]
    },
    "134": {
      "op": "pushint 128 // 128",
      "defined_out": [
        "128",
        "8",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "8",
        "128"
      ]
    },
    "137": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "138": {
      "op": "frame_dig -1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "index#0 (copy)"
      ]
    },
    "140": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "array_head_and_tail%0#0",
        "index#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "index#0 (copy)",
        "16"
      ]
    },
    "141": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "142": {
      "op": "intc_3 // 16",
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "16"
      ]
    },
    "143": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "144": {
      "retsub": true,
      "op": "retsub"
    },
    "145": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "147": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "148": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "149": {
      "op": "bz approval_program_bare_routing@9",
      "stack_out": []
    },
    "152": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "155": {
      "op": "pushbytes 0xa67ea2ab // method \"create_box()void\"",
      "defined_out": [
        "Method(create_box()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create_box()void)"
      ]
    },
    "161": {
      "op": "pushbytes 0x028840ea // method \"num_tups()uint64\"",
      "defined_out": [
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)"
      ]
    },
    "167": {
      "op": "pushbytes 0xf75cee9d // method \"add_tup((uint64,uint64))void\"",
      "defined_out": [
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)"
      ]
    },
    "173": {
      "op": "pushbytes 0x880b5534 // method \"get_tup(uint64)(uint64,uint64)\"",
      "defined_out": [
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(num_tups()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))"
      ]
    },
    "179": {
      "op": "uncover 4",
      "stack_out": [
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "tmp%2#0"
      ]
    },
    "181": {
      "op": "match approval_program_create_box_route@3 approval_program_num_tups_route@4 approval_program_add_tup_route@5 approval_program_get_tup_route@6",
      "stack_out": []
    },
    "191": {
      "block": "approval_program_after_if_else@15",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "192": {
      "block": "approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__puya_arc4_router__@16",
      "stack_in": [
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "193": {
      "block": "approval_program_get_tup_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "195": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "NoOp"
      ]
    },
    "196": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "197": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "198": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "200": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0"
      ]
    },
    "201": {
      "op": "!=",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "202": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "203": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "206": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "207": {
      "callsub": "test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.get_tup",
      "op": "callsub get_tup",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "210": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "211": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%21#0"
      ]
    },
    "212": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "213": {
      "op": "log",
      "stack_out": []
    },
    "214": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "215": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__puya_arc4_router__@16"
    },
    "218": {
      "block": "approval_program_add_tup_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "220": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "NoOp"
      ]
    },
    "221": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "222": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "223": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "225": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "0"
      ]
    },
    "226": {
      "op": "!=",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "227": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "228": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0"
      ]
    },
    "231": {
      "callsub": "test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.add_tup",
      "op": "callsub add_tup",
      "stack_out": []
    },
    "234": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "235": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__puya_arc4_router__@16"
    },
    "238": {
      "block": "approval_program_num_tups_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "240": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "241": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "242": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "243": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "245": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "246": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "247": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "248": {
      "callsub": "test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.num_tups",
      "op": "callsub num_tups",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "251": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "252": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "253": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "254": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "255": {
      "op": "log",
      "stack_out": []
    },
    "256": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "257": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__puya_arc4_router__@16"
    },
    "260": {
      "block": "approval_program_create_box_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "262": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "263": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "264": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "265": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "267": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "268": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "269": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "270": {
      "callsub": "test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.create_box",
      "op": "callsub create_box"
    },
    "273": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "274": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__puya_arc4_router__@16"
    },
    "277": {
      "block": "approval_program_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "279": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "0"
      ]
    },
    "280": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%23#0"
      ]
    },
    "281": {
      "op": "match approval_program___algopy_default_create@10",
      "stack_out": []
    },
    "285": {
      "block": "approval_program_switch_case_next@14",
      "stack_in": [],
      "op": "b approval_program_after_if_else@15"
    },
    "288": {
      "block": "approval_program___algopy_default_create@10",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "290": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "0"
      ]
    },
    "291": {
      "op": "==",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "292": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "293": {
      "block": "approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__algopy_default_create@12",
      "stack_in": [],
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "294": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_immutable_struct.FixedWithImmStruct.__puya_arc4_router__@16"
    }
  }
}