main test_cases.mutable_native_types.contract.Contract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.mutable_native_types.contract.Contract.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.mutable_native_types.contract.add(val: Encoded(uint64,uint64)) -> uint64:
    block@0: // L191
        let aggregate%extract%0#1: bytes = (extract3 val#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#1
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract%1#1: bytes = (extract3 val#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#1
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%0#0: uint64 = (+ values%0#0 values%1#0)
        return tmp%0#0

subroutine test_cases.mutable_native_types.contract.do_something(pay: Encoded(uint8[32],uint64,uint64)) -> Encoded(uint8[32],uint64,uint64):
    block@0: // L196
        let pay%out#0: Encoded(uint8[32],uint64,uint64) = pay#0
        return pay%out#0

subroutine test_cases.mutable_native_types.contract.Contract.__init__() -> void:
    block@0: // L69
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%1#1: bytes = (concat aggregate%encoded%0#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%as_Encoded(uint64,uint64)%0#1: Encoded(uint64,uint64) = aggregate%encoded%1#1
        let tmp%2#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#1
        let tmp%3#0: uint64 = (txn NumAppArgs)
        let tmp%4#0: uint64 = (+ tmp%3#0 1u)
        let tmp%5#0: uint64 = (txn NumAppArgs)
        let tmp%6#0: uint64 = (+ tmp%5#0 1u)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob tmp%4#0)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%encoded%2#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#1)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob tmp%6#0)
        let aggregate%as_Encoded(uint64)%3#1: Encoded(uint64) = aggregate%val_as_bytes%3#1
        let aggregate%encoded%3#1: bytes = (concat aggregate%encoded%2#1 aggregate%as_Encoded(uint64)%3#1)
        let aggregate%as_Encoded(uint64,uint64)%1#1: Encoded(uint64,uint64) = aggregate%encoded%3#1
        let tmp%7#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#1
        let tmp%8#0: uint64 = (txn NumAppArgs)
        let tmp%9#0: uint64 = (+ tmp%8#0 1u)
        let tmp%10#0: uint64 = (txn NumAppArgs)
        let tmp%11#0: uint64 = (+ tmp%10#0 1u)
        let aggregate%encoded%4#1: bytes = (concat 0x tmp%2#0)
        let aggregate%encoded%5#1: bytes = (concat aggregate%encoded%4#1 tmp%7#0)
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob tmp%9#0)
        let aggregate%as_Encoded(uint64)%4#1: Encoded(uint64) = aggregate%val_as_bytes%4#1
        let aggregate%encoded%6#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%4#1)
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob tmp%11#0)
        let aggregate%as_Encoded(uint64)%5#1: Encoded(uint64) = aggregate%val_as_bytes%5#1
        let aggregate%encoded%7#1: bytes = (concat aggregate%encoded%6#1 aggregate%as_Encoded(uint64)%5#1)
        let aggregate%as_Encoded(uint64,uint64)%2#1: Encoded(uint64,uint64) = aggregate%encoded%7#1
        let aggregate%encoded%8#1: bytes = (concat aggregate%encoded%5#1 aggregate%as_Encoded(uint64,uint64)%2#1)
        let aggregate%as_Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64))%0#1: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = aggregate%encoded%8#1
        let tmp%12#0: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = aggregate%as_Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64))%0#1
        (app_global_put "nested" tmp%12#0)
        let tmp%13#0: uint64 = (txn NumAppArgs)
        let tmp%14#0: uint64 = (txn NumAppArgs)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%len_u16%0#1
        let encoded_array%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#1
        let aggregate%val_as_bytes%6#1: bytes[8] = (itob tmp%13#0)
        let aggregate%as_Encoded(uint64)%6#1: Encoded(uint64) = aggregate%val_as_bytes%6#1
        let aggregate%encoded%9#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%6#1)
        let aggregate%val_as_bytes%7#1: bytes[8] = (itob tmp%14#0)
        let aggregate%as_Encoded(uint64)%7#1: Encoded(uint64) = aggregate%val_as_bytes%7#1
        let aggregate%encoded%10#1: bytes = (concat aggregate%encoded%9#1 aggregate%as_Encoded(uint64)%7#1)
        let aggregate%length%0#1: uint64 = (len 0x)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x)
        let aggregate%as_Encoded(len+uint8[])%1#1: Encoded(len+uint8[]) = aggregate%encoded_value%0#1
        let aggregate%data_length%0#1: uint64 = (len aggregate%as_Encoded(len+uint8[])%1#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 22u aggregate%data_length%0#1)
        let aggregate%as_bytes%2#1: bytes[8] = (itob 22u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded%11#1: bytes = (concat aggregate%encoded%10#1 aggregate%offset_as_uint16%0#1)
        let aggregate%length%1#1: uint64 = (len "")
        let aggregate%as_bytes%3#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 "")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let aggregate%data_length%1#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#1)
        let aggregate%current_tail_offset%1#1: uint64 = (+ aggregate%current_tail_offset%0#1 aggregate%data_length%1#1)
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%current_tail_offset%0#1)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded%12#1: bytes = (concat aggregate%encoded%11#1 aggregate%offset_as_uint16%1#1)
        let aggregate%as_bytes%5#1: bytes[8] = (itob aggregate%current_tail_offset%1#1)
        let aggregate%offset_as_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded%13#1: bytes = (concat aggregate%encoded%12#1 aggregate%offset_as_uint16%2#1)
        let aggregate%concat%0#1: bytes = (concat aggregate%encoded%13#1 aggregate%as_Encoded(len+uint8[])%1#1)
        let aggregate%concat%1#1: bytes = (concat aggregate%concat%0#1 aggregate%as_Encoded(len+utf8[])%0#1)
        let aggregate%concat%2#1: bytes = (concat aggregate%concat%1#1 encoded_array%0#0)
        let aggregate%as_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+uint8[]))%0#1: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+uint8[])) = aggregate%concat%2#1
        let tmp%15#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+uint8[])) = aggregate%as_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+uint8[]))%0#1
        (app_global_put "dyn" tmp%15#0)
        (app_global_put "num_payments" 0u)
        let tmp%16#0: Encoded((uint8[32],uint64,uint64)[8]) = (bzero 384u)
        (app_global_put "payments" tmp%16#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.fixed_initialize() -> void:
    block@0: // L92
        let tmp%0#0: Encoded(uint64[3]) = (bzero 24u)
        let arr_3#0: Encoded(uint64[3]) = tmp%0#0
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#1
        let aggregate%write_offset%0#1: uint64 = (* 0u 8u)
        let aggregate%updated_array%0#1: bytes = (replace3 arr_3#0 aggregate%write_offset%0#1 encoded_value%0#0)
        let updated_array%0#0: Encoded(uint64[3]) = aggregate%updated_array%0#1
        let arr_3#0: Encoded(uint64[3]) = updated_array%0#0
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let encoded_value%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#1
        let aggregate%write_offset%1#1: uint64 = (* 1u 8u)
        let aggregate%updated_array%1#1: bytes = (replace3 arr_3#0 aggregate%write_offset%1#1 encoded_value%1#0)
        let updated_array%1#0: Encoded(uint64[3]) = aggregate%updated_array%1#1
        let arr_3#0: Encoded(uint64[3]) = updated_array%1#0
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let encoded_value%2#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%2#1
        let aggregate%write_offset%2#1: uint64 = (* 2u 8u)
        let aggregate%updated_array%2#1: bytes = (replace3 arr_3#0 aggregate%write_offset%2#1 encoded_value%2#0)
        let updated_array%2#0: Encoded(uint64[3]) = aggregate%updated_array%2#1
        let arr_3#0: Encoded(uint64[3]) = updated_array%2#0
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%3#1: Encoded(uint64) = aggregate%val_as_bytes%3#1
        let aggregate%encoded%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%3#1)
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%4#1: Encoded(uint64) = aggregate%val_as_bytes%4#1
        let aggregate%encoded%1#1: bytes = (concat aggregate%encoded%0#1 aggregate%as_Encoded(uint64)%4#1)
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%5#1: Encoded(uint64) = aggregate%val_as_bytes%5#1
        let aggregate%encoded%2#1: bytes = (concat aggregate%encoded%1#1 aggregate%as_Encoded(uint64)%5#1)
        let aggregate%as_Encoded(uint64[3])%0#1: Encoded(uint64[3]) = aggregate%encoded%2#1
        let encoded_array%0#0: Encoded(uint64[3]) = aggregate%as_Encoded(uint64[3])%0#1
        let arr_3_from_tuple#0: Encoded(uint64[3]) = encoded_array%0#0
        let tmp%1#0: bool = (== arr_3#0 arr_3_from_tuple#0)
        (assert tmp%1#0) // should be the same
        let aggregate%val_as_bytes%6#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%6#1: Encoded(uint64) = aggregate%val_as_bytes%6#1
        let aggregate%encoded%3#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%6#1)
        let aggregate%val_as_bytes%7#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%7#1: Encoded(uint64) = aggregate%val_as_bytes%7#1
        let aggregate%encoded%4#1: bytes = (concat aggregate%encoded%3#1 aggregate%as_Encoded(uint64)%7#1)
        let aggregate%val_as_bytes%8#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%8#1: Encoded(uint64) = aggregate%val_as_bytes%8#1
        let aggregate%encoded%5#1: bytes = (concat aggregate%encoded%4#1 aggregate%as_Encoded(uint64)%8#1)
        let aggregate%as_Encoded(uint64[3])%1#1: Encoded(uint64[3]) = aggregate%encoded%5#1
        let encoded_array%1#0: Encoded(uint64[3]) = aggregate%as_Encoded(uint64[3])%1#1
        let arr_3_from_full#0: Encoded(uint64[3]) = encoded_array%1#0
        let aggregate%bytes_offset%3#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%3#1: bytes = (extract3 arr_3_from_full#0 aggregate%bytes_offset%3#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%3#1
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%2#0: bool = (== values%0#0 1u)
        (assert tmp%2#0)
        let aggregate%bytes_offset%4#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%4#1: bytes = (extract3 arr_3_from_full#0 aggregate%bytes_offset%4#1 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%4#1
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%3#0: bool = (== values%1#0 1u)
        (assert tmp%3#0)
        let aggregate%bytes_offset%5#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%5#1: bytes = (extract3 arr_3_from_full#0 aggregate%bytes_offset%5#1 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%5#1
        let values%2#0: uint64 = (btoi array_item%2#0)
        let tmp%4#0: bool = (== values%2#0 1u)
        (assert tmp%4#0)
        let arr_3_from_fixed#0: Encoded(uint64[3]) = arr_3#0
        let tmp%5#0: bool = (== arr_3#0 arr_3_from_fixed#0)
        (assert tmp%5#0) // should be the same
        let aggregate%as_bytes%0#1: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%val_as_bytes%9#1: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%9#1: Encoded(uint64) = aggregate%val_as_bytes%9#1
        let aggregate%encoded%6#1: bytes = (concat aggregate%len_u16%0#1 aggregate%as_Encoded(uint64)%9#1)
        let aggregate%val_as_bytes%10#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%10#1: Encoded(uint64) = aggregate%val_as_bytes%10#1
        let aggregate%encoded%7#1: bytes = (concat aggregate%encoded%6#1 aggregate%as_Encoded(uint64)%10#1)
        let aggregate%val_as_bytes%11#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%11#1: Encoded(uint64) = aggregate%val_as_bytes%11#1
        let aggregate%encoded%8#1: bytes = (concat aggregate%encoded%7#1 aggregate%as_Encoded(uint64)%11#1)
        let aggregate%as_Encoded(len+uint64[])%0#1: Encoded(len+uint64[]) = aggregate%encoded%8#1
        let encoded_array%2#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#1
        let dynamic_arr#0: Encoded(len+uint64[]) = encoded_array%2#0
        let array_length%0#0: uint64 = (extract_uint16 dynamic_arr#0 0u)
        let eq%0#0: bool = (== array_length%0#0 3u)
        (assert eq%0#0) // invalid input length
        let converted_array%0#0: Encoded(uint64[3]) = ((extract 2 0) dynamic_arr#0)
        let tmp%6#0: bool = (== arr_3#0 converted_array%0#0)
        (assert tmp%6#0)
        let aggregate%val_as_bytes%12#1: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%12#1: Encoded(uint64) = aggregate%val_as_bytes%12#1
        let aggregate%encoded%9#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%12#1)
        let aggregate%val_as_bytes%13#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%13#1: Encoded(uint64) = aggregate%val_as_bytes%13#1
        let aggregate%encoded%10#1: bytes = (concat aggregate%encoded%9#1 aggregate%as_Encoded(uint64)%13#1)
        let aggregate%val_as_bytes%14#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%14#1: Encoded(uint64) = aggregate%val_as_bytes%14#1
        let aggregate%encoded%11#1: bytes = (concat aggregate%encoded%10#1 aggregate%as_Encoded(uint64)%14#1)
        let aggregate%as_Encoded(uint64,uint64,uint64)%0#1: Encoded(uint64,uint64,uint64) = aggregate%encoded%11#1
        let awst_tmp%0#0: Encoded(uint64,uint64,uint64) = aggregate%as_Encoded(uint64,uint64,uint64)%0#1
        let aggregate%extract%0#1: bytes = (extract3 awst_tmp%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#1
        let values%3#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract%1#1: bytes = (extract3 awst_tmp%0#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#1
        let values%4#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%extract%2#1: bytes = (extract3 awst_tmp%0#0 16u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#1
        let values%5#0: uint64 = (btoi tuple_item%2#0)
        let aggregate%val_as_bytes%15#1: bytes[8] = (itob values%3#0)
        let aggregate%as_Encoded(uint64)%15#1: Encoded(uint64) = aggregate%val_as_bytes%15#1
        let aggregate%encoded%12#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%15#1)
        let aggregate%val_as_bytes%16#1: bytes[8] = (itob values%4#0)
        let aggregate%as_Encoded(uint64)%16#1: Encoded(uint64) = aggregate%val_as_bytes%16#1
        let aggregate%encoded%13#1: bytes = (concat aggregate%encoded%12#1 aggregate%as_Encoded(uint64)%16#1)
        let aggregate%val_as_bytes%17#1: bytes[8] = (itob values%5#0)
        let aggregate%as_Encoded(uint64)%17#1: Encoded(uint64) = aggregate%val_as_bytes%17#1
        let aggregate%encoded%14#1: bytes = (concat aggregate%encoded%13#1 aggregate%as_Encoded(uint64)%17#1)
        let aggregate%as_Encoded(uint64[3])%2#1: Encoded(uint64[3]) = aggregate%encoded%14#1
        let encoded_array%3#0: Encoded(uint64[3]) = aggregate%as_Encoded(uint64[3])%2#1
        let tmp%7#0: bool = (== arr_3#0 encoded_array%3#0)
        (assert tmp%7#0)
        let aggregate%encoded%15#1: bytes = (concat 0x 0x0000000000000000)
        let aggregate%encoded%16#1: bytes = (concat aggregate%encoded%15#1 0x0000000000000001)
        let aggregate%encoded%17#1: bytes = (concat aggregate%encoded%16#1 0x0000000000000002)
        let aggregate%as_Encoded(uint64[3])%3#1: Encoded(uint64[3]) = aggregate%encoded%17#1
        let encoded_array%4#0: Encoded(uint64[3]) = aggregate%as_Encoded(uint64[3])%3#1
        let static_array#0: Encoded(uint64[3]) = encoded_array%4#0
        let tmp%8#0: bool = (== static_array#0 arr_3#0)
        (assert tmp%8#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.add_payment(pay: Encoded(uint8[32],uint64,uint64)) -> void:
    block@0: // L122
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%0#0) // check self.num_payments exists
        let tmp%0#0: bool = (< maybe_value%0#0 8u)
        (assert tmp%0#0) // too many payments
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "payments")
        (assert maybe_exists%1#0) // check self.payments exists
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%2#0) // check self.num_payments exists
        let aggregate%write_offset%0#1: uint64 = (* maybe_value%2#0 48u)
        let aggregate%updated_array%0#1: bytes = (replace3 maybe_value%1#0 aggregate%write_offset%0#1 pay#0)
        let updated_array%0#0: Encoded((uint8[32],uint64,uint64)[8]) = aggregate%updated_array%0#1
        (app_global_put "payments" updated_array%0#0)
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%3#0) // check self.num_payments exists
        let tmp%1#0: uint64 = (+ maybe_value%3#0 1u)
        (app_global_put "num_payments" tmp%1#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.increment_payment(index: uint64, amt: uint64) -> void:
    block@0: // L128
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%0#0) // check self.num_payments exists
        let tmp%0#0: bool = (< index#0 maybe_value%0#0)
        (assert tmp%0#0) // invalid payment index
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "payments")
        (assert maybe_exists%1#0) // check self.payments exists
        let aggregate%bytes_offset%0#1: uint64 = (* index#0 48u)
        let aggregate%encoded_element%0#1: bytes = (extract3 maybe_value%1#0 aggregate%bytes_offset%0#1 48u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint8[32],uint64,uint64) = aggregate%encoded_element%0#1
        let aggregate%extract%0#1: bytes = (extract3 array_item%0#0 40u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#1
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%1#0: uint64 = (+ values%0#0 amt#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#1
        let aggregate%bytes_offset%1#1: uint64 = (* index#0 48u)
        let aggregate%encoded_element%1#1: bytes = (extract3 maybe_value%1#0 aggregate%bytes_offset%1#1 48u) // on error: index access is out of bounds
        let aggregate%updated_data%0#1: bytes = (replace3 aggregate%encoded_element%1#1 40u encoded_value%0#0)
        let aggregate%write_offset%0#1: uint64 = (* index#0 48u)
        let aggregate%updated_array%0#1: bytes = (replace3 maybe_value%1#0 aggregate%write_offset%0#1 aggregate%updated_data%0#1)
        let updated_array%0#0: Encoded((uint8[32],uint64,uint64)[8]) = aggregate%updated_array%0#1
        (app_global_put "payments" updated_array%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.create_storage(box_key: uint64) -> void:
    block@0: // L133
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        (app_global_put 0x70 maybe_value%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%1#0) // check self.nested exists
        let tmp%0#0: account = (txn Sender)
        (app_local_put tmp%0#0 0x6c maybe_value%1#0)
        let tmp%1#0: bool = (box_create "box" 2064u)
        (assert tmp%1#0) // expected box to not exist
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%2#0) // check self.nested exists
        let aggregate%extract%0#1: bytes = (extract3 maybe_value%2#0 0u 16u)
        let tuple_item%0#0: Encoded(uint64,uint64) = aggregate%extract%0#1
        let encoded_value%0#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#0)
        let (aggregate%box_get%0#1: bytes, aggregate%box_get%1#1: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%1#1) // check self.box_map entry exists
        let storage_value%0#0: bytes = aggregate%box_get%0#1
        let aggregate%updated_data%0#1: bytes = (replace3 storage_value%0#0 0u tuple_item%0#0)
        let updated_tuple%0#0: Encoded((uint64,uint64),uint8[2048]) = aggregate%updated_data%0#1
        (box_put box_prefixed_key%0#0 updated_tuple%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.local_struct() -> Encoded(uint8[32],uint64,uint64):
    block@0: // L140
        let tmp%0#0: account = (txn Sender)
        let aggregate%as_Encoded(uint8[32])%0#1: Encoded(uint8[32]) = tmp%0#0
        let aggregate%encoded%0#1: bytes = (concat 0x aggregate%as_Encoded(uint8[32])%0#1)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 1234u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%1#1: bytes = (concat aggregate%encoded%0#1 aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 567u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%2#1: bytes = (concat aggregate%encoded%1#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%as_Encoded(uint8[32],uint64,uint64)%0#1: Encoded(uint8[32],uint64,uint64) = aggregate%encoded%2#1
        let tmp%1#0: Encoded(uint8[32],uint64,uint64) = aggregate%as_Encoded(uint8[32],uint64,uint64)%0#1
        let a#0: Encoded(uint8[32],uint64,uint64) = tmp%1#0
        let aggregate%extract%0#1: bytes = (extract3 a#0 0u 32u)
        let tuple_item%0#0: Encoded(uint8[32]) = aggregate%extract%0#1
        let values%0#0: account = tuple_item%0#0
        let aggregate%extract%1#1: bytes = (extract3 a#0 32u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#1
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%extract%2#1: bytes = (extract3 a#0 40u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#1
        let values%2#0: uint64 = (btoi tuple_item%2#0)
        let foo#0: account = values%0#0
        let bar#0: uint64 = values%1#0
        let baz#0: uint64 = values%2#0
        let tmp%2#0: account = (global ZeroAddress)
        let tmp%3#0: bool = (!= foo#0 tmp%2#0)
        (assert tmp%3#0) // use foo
        let reinterpret_bool%0#0: bool = bar#0
        (assert reinterpret_bool%0#0) // use bar
        let tmp%4#0: bool = (!= baz#0 0u)
        (assert tmp%4#0) // use baz
        let do_something%0#0: Encoded(uint8[32],uint64,uint64) = test_cases.mutable_native_types.contract.do_something(a#0)
        let a#0: Encoded(uint8[32],uint64,uint64) = do_something%0#0
        return a#0

subroutine test_cases.mutable_native_types.contract.Contract.delete_storage(box_key: uint64) -> void:
    block@0: // L152
        (app_global_del 0x70)
        let tmp%0#0: account = (txn Sender)
        (app_local_del tmp%0#0 0x6c)
        (box_del "box")
        let encoded_value%0#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#0)
        (box_del box_prefixed_key%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.struct_arg(box_key: uint64, a: Encoded(uint64,uint64)) -> void:
    block@0: // L161
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let aggregate%updated_data%0#1: bytes = (replace3 maybe_value%0#0 0u a#0)
        let updated_tuple%0#0: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = aggregate%updated_data%0#1
        (app_global_put "nested" updated_tuple%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u 0x70)
        (assert maybe_exists%1#0) // check self.nested_proxy exists
        let aggregate%updated_data%1#1: bytes = (replace3 maybe_value%1#0 0u a#0)
        let updated_tuple%1#0: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = aggregate%updated_data%1#1
        (app_global_put 0x70 updated_tuple%1#0)
        let tmp%0#0: account = (txn Sender)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_local_get_ex tmp%0#0 0u 0x6c)
        (assert maybe_exists%2#0) // check self.nested_local exists for account
        let aggregate%updated_data%2#1: bytes = (replace3 maybe_value%2#0 0u a#0)
        let updated_tuple%2#0: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = aggregate%updated_data%2#1
        (app_local_put tmp%0#0 0x6c updated_tuple%2#0)
        let (aggregate%box_get%0#1: bytes, aggregate%box_get%1#1: bool) = (box_get "box")
        (assert aggregate%box_get%1#1) // check self.box exists
        let storage_value%0#0: bytes = aggregate%box_get%0#1
        let aggregate%updated_data%3#1: bytes = (replace3 storage_value%0#0 0u a#0)
        let updated_tuple%3#0: Encoded((uint64,uint64),uint8[2048]) = aggregate%updated_data%3#1
        (box_put "box" updated_tuple%3#0)
        let encoded_value%0#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#0)
        let (aggregate%box_get%2#1: bytes, aggregate%box_get%3#1: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%3#1) // check self.box_map entry exists
        let storage_value%1#0: bytes = aggregate%box_get%2#1
        let aggregate%updated_data%4#1: bytes = (replace3 storage_value%1#0 0u a#0)
        let updated_tuple%4#0: Encoded((uint64,uint64),uint8[2048]) = aggregate%updated_data%4#1
        (box_put box_prefixed_key%0#0 updated_tuple%4#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.struct_return() -> Encoded(uint64,uint64):
    block@0: // L171
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let aggregate%extract%0#1: bytes = (extract3 maybe_value%0#0 0u 16u)
        let tuple_item%0#0: Encoded(uint64,uint64) = aggregate%extract%0#1
        return tuple_item%0#0

subroutine test_cases.mutable_native_types.contract.Contract.tup_return() -> <uint64, uint64>:
    block@0: // L175
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let aggregate%extract%0#1: bytes = (extract3 maybe_value%0#0 32u 16u)
        let tuple_item%0#0: Encoded(uint64,uint64) = aggregate%extract%0#1
        let aggregate%extract%1#1: bytes = (extract3 tuple_item%0#0 0u 8u)
        let aggregate%item0%0#1: uint64 = (btoi aggregate%extract%1#1)
        let aggregate%extract%2#1: bytes = (extract3 tuple_item%0#0 8u 8u)
        let aggregate%item1%0#1: uint64 = (btoi aggregate%extract%2#1)
        let values%0#0: uint64 = aggregate%item0%0#1
        let values%1#0: uint64 = aggregate%item1%0#1
        return values%0#0 values%1#0

subroutine test_cases.mutable_native_types.contract.Contract.calculate_sum() -> uint64:
    block@0: // L179
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let aggregate%extract%0#1: bytes = (extract3 maybe_value%0#0 0u 16u)
        let tuple_item%0#0: Encoded(uint64,uint64) = aggregate%extract%0#1
        let fixed_a#0: Encoded(uint64,uint64) = tuple_item%0#0
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%1#0) // check self.nested exists
        let aggregate%extract%1#1: bytes = (extract3 maybe_value%1#0 16u 16u)
        let tuple_item%1#0: Encoded(uint64,uint64) = aggregate%extract%1#1
        let fixed_b#0: Encoded(uint64,uint64) = tuple_item%1#0
        let tmp%0#0: uint64 = test_cases.mutable_native_types.contract.add(fixed_a#0)
        let tmp%1#0: uint64 = test_cases.mutable_native_types.contract.add(fixed_b#0)
        let tmp%2#0: uint64 = (+ tmp%0#0 tmp%1#0)
        let result#0: uint64 = tmp%2#0
        let tmp%3#0: bool = (< result#0 100u)
        let result#6: uint64 = result#0
        goto tmp%3#0 ? block@1 : block@2
    block@1: // if_body_L185
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%2#0) // check self.nested exists
        let aggregate%extract%2#1: bytes = (extract3 maybe_value%2#0 32u 16u)
        let tuple_item%2#0: Encoded(uint64,uint64) = aggregate%extract%2#1
        let aggregate%extract%3#1: bytes = (extract3 tuple_item%2#0 0u 8u)
        let aggregate%item0%0#1: uint64 = (btoi aggregate%extract%3#1)
        let aggregate%extract%4#1: bytes = (extract3 tuple_item%2#0 8u 8u)
        let aggregate%item1%0#1: uint64 = (btoi aggregate%extract%4#1)
        let values%0#0: uint64 = aggregate%item0%0#1
        let values%1#0: uint64 = aggregate%item1%0#1
        let c#0: uint64 = values%0#0
        let d#0: uint64 = values%1#0
        let tmp%4#0: uint64 = (+ result#0 c#0)
        let result#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (+ result#0 d#0)
        let result#0: uint64 = tmp%5#0
        let result#6: uint64 = result#0
        goto block@2
    block@2: // after_if_else_L184
        let result#0: uint64 = result#6
        return result#0

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L68
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@15
    block@2: // abi_routing_L68
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "fixed_initialize()void" => block@3, method "add_payment((address,uint64,uint64))void" => block@4, method "increment_payment(uint64,uint64)void" => block@5, method "create_storage(uint64)void" => block@6, method "local_struct()(address,uint64,uint64)" => block@7, method "delete_storage(uint64)void" => block@8, method "struct_arg(uint64,(uint64,uint64))void" => block@9, method "struct_return()(uint64,uint64)" => block@10, method "tup_return()(uint64,uint64)" => block@11, method "calculate_sum()uint64" => block@12, * => block@13}
    block@3: // fixed_initialize_route_L92
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.mutable_native_types.contract.Contract.fixed_initialize()
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@4: // add_payment_route_L122
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_Encoded(uint8[32],uint64,uint64)%0#0: Encoded(uint8[32],uint64,uint64) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.contract.Contract.add_payment(reinterpret_Encoded(uint8[32],uint64,uint64)%0#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@5: // increment_payment_route_L128
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%15#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%16#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        test_cases.mutable_native_types.contract.Contract.increment_payment(tmp%15#0, tmp%16#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@6: // create_storage_route_L133
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (== tmp%17#0 NoOp)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%21#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        test_cases.mutable_native_types.contract.Contract.create_storage(tmp%21#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@7: // local_struct_route_L140
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (== tmp%22#0 NoOp)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        let tmp%25#0: bool = (!= tmp%24#0 0u)
        (assert tmp%25#0) // can only call when not creating
        let tmp%26#0: Encoded(uint8[32],uint64,uint64) = test_cases.mutable_native_types.contract.Contract.local_struct()
        let tmp%27#0: bytes = (concat 0x151f7c75 tmp%26#0)
        (log tmp%27#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@8: // delete_storage_route_L152
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (== tmp%28#0 NoOp)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (!= tmp%30#0 0u)
        (assert tmp%31#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%32#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        test_cases.mutable_native_types.contract.Contract.delete_storage(tmp%32#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@9: // struct_arg_route_L161
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (== tmp%33#0 NoOp)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        let tmp%36#0: bool = (!= tmp%35#0 0u)
        (assert tmp%36#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%37#0: uint64 = (btoi reinterpret_Encoded(uint64)%4#0)
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 2)
        test_cases.mutable_native_types.contract.Contract.struct_arg(tmp%37#0, reinterpret_Encoded(uint64,uint64)%0#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@10: // struct_return_route_L171
        let tmp%38#0: uint64 = (txn OnCompletion)
        let tmp%39#0: bool = (== tmp%38#0 NoOp)
        (assert tmp%39#0) // OnCompletion is not NoOp
        let tmp%40#0: uint64 = (txn ApplicationID)
        let tmp%41#0: bool = (!= tmp%40#0 0u)
        (assert tmp%41#0) // can only call when not creating
        let tmp%42#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.contract.Contract.struct_return()
        let tmp%43#0: bytes = (concat 0x151f7c75 tmp%42#0)
        (log tmp%43#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@11: // tup_return_route_L175
        let tmp%44#0: uint64 = (txn OnCompletion)
        let tmp%45#0: bool = (== tmp%44#0 NoOp)
        (assert tmp%45#0) // OnCompletion is not NoOp
        let tmp%46#0: uint64 = (txn ApplicationID)
        let tmp%47#0: bool = (!= tmp%46#0 0u)
        (assert tmp%47#0) // can only call when not creating
        let (tmp%48#0: uint64, tmp%49#0: uint64) = test_cases.mutable_native_types.contract.Contract.tup_return()
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%48#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%49#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%1#1: bytes = (concat aggregate%encoded%0#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%as_Encoded(uint64,uint64)%0#1: Encoded(uint64,uint64) = aggregate%encoded%1#1
        let tmp%50#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#1
        let tmp%51#0: bytes = (concat 0x151f7c75 tmp%50#0)
        (log tmp%51#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@12: // calculate_sum_route_L179
        let tmp%52#0: uint64 = (txn OnCompletion)
        let tmp%53#0: bool = (== tmp%52#0 NoOp)
        (assert tmp%53#0) // OnCompletion is not NoOp
        let tmp%54#0: uint64 = (txn ApplicationID)
        let tmp%55#0: bool = (!= tmp%54#0 0u)
        (assert tmp%55#0) // can only call when not creating
        let tmp%56#0: uint64 = test_cases.mutable_native_types.contract.Contract.calculate_sum()
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob tmp%56#0)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let tmp%57#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%2#1
        let tmp%58#0: bytes = (concat 0x151f7c75 tmp%57#0)
        (log tmp%58#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@13: // switch_case_default_L68
        goto block@14
    block@14: // switch_case_next_L68
        goto block@21
    block@15: // bare_routing_L68
        let tmp%59#0: uint64 = (txn OnCompletion)
        switch tmp%59#0 {0u => block@16, * => block@19}
    block@16: // __algopy_default_create_L1
        let tmp%60#0: uint64 = (txn ApplicationID)
        let tmp%61#0: bool = (== tmp%60#0 0u)
        (assert tmp%61#0) // can only call when creating
        goto block@17
    block@17: // L1
        goto block@18
    block@18: // after_inlined_test_cases.mutable_native_types.contract.Contract.__algopy_default_create_L1
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@19: // switch_case_default_L68
        goto block@20
    block@20: // switch_case_next_L68
        goto block@21
    block@21: // after_if_else_L68
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@22: // after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router___L1
        return tmp%0#0