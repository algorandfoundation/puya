#pragma version 10
#pragma typetrack false

// test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 8 1 16
    bytecblock "tup_bag" 0x 0x151f7c75

main_block@0:
    txn ApplicationID
    bnz main_after_if_else@2

main_call___init__@1:
    callsub __init__

main_after_if_else@2:
    callsub approval_program
    return


// test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__init__() -> void:
__init__:

__init___block@0:
    retsub


// test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.create_box() -> void:
create_box:

create_box_block@0:
    // mutable_native_types/fixed_with_tups.py:28
    // self.tup_bag.create()
    bytec_0 // "tup_bag"
    pushint 136 // 136
    box_create
    pop
    retsub


// test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.num_tups() -> uint64:
num_tups:

num_tups_block@0:
    // mutable_native_types/fixed_with_tups.py:32
    // return self.tup_bag.value.count
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    retsub


// test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.add_tup(tup.a: uint64, tup.b: uint64) -> void:
add_tup:
    // mutable_native_types/fixed_with_tups.py:34-35
    // @arc4.abimethod()
    // def add_tup(self, tup: NamedTup) -> None:
    proto 2 0

add_tup_block@0:
    // mutable_native_types/fixed_with_tups.py:36
    // assert self.tup_bag.value.count < self.tup_bag.value.items.length, "too many tups"
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    intc_1 // 8
    <
    assert // too many tups
    // mutable_native_types/fixed_with_tups.py:37
    // self.tup_bag.value.items[self.tup_bag.value.count] = tup
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    intc_1 // 8
    pushint 128 // 128
    extract3 // on error: Index access is out of bounds
    // mutable_native_types/fixed_with_tups.py:35
    // def add_tup(self, tup: NamedTup) -> None:
    frame_dig -2
    itob
    frame_dig -1
    itob
    swap
    // mutable_native_types/fixed_with_tups.py:37
    // self.tup_bag.value.items[self.tup_bag.value.count] = tup
    bytec_1 // 0x
    swap
    concat
    swap
    concat
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    dup
    intc_1 // 8
    <
    assert // Index access is out of bounds
    intc_3 // 16
    *
    uncover 2
    swap
    uncover 2
    replace3
    swap
    intc_1 // 8
    uncover 2
    replace3
    bytec_0 // "tup_bag"
    swap
    box_put
    // mutable_native_types/fixed_with_tups.py:38
    // self.tup_bag.value.count += 1
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    intc_2 // 1
    +
    itob
    swap
    intc_0 // 0
    uncover 2
    replace3
    bytec_0 // "tup_bag"
    swap
    box_put
    retsub


// test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.get_tup(index: uint64) -> uint64, uint64:
get_tup:
    // mutable_native_types/fixed_with_tups.py:40-41
    // @arc4.abimethod()
    // def get_tup(self, index: UInt64) -> NamedTup:
    proto 1 2

get_tup_block@0:
    // mutable_native_types/fixed_with_tups.py:42
    // assert index < self.tup_bag.value.count, "index out of bounds"
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    >
    assert // index out of bounds
    // mutable_native_types/fixed_with_tups.py:43
    // return self.tup_bag.value.items[index]
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_1 // 8
    pushint 128 // 128
    extract3 // on error: Index access is out of bounds
    frame_dig -1
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    retsub


// algopy.arc4.ARC4Contract.approval_program() -> uint64:
approval_program:

approval_program_block@0:

approval_program_block@1:
    // mutable_native_types/fixed_with_tups.py:22
    // class FixedWithTups(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz approval_program_bare_routing@9

approval_program_abi_routing@2:
    // mutable_native_types/fixed_with_tups.py:22
    // class FixedWithTups(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xa67ea2ab // method "create_box()void"
    pushbytes 0x028840ea // method "num_tups()uint64"
    pushbytes 0xf75cee9d // method "add_tup((uint64,uint64))void"
    pushbytes 0x880b5534 // method "get_tup(uint64)(uint64,uint64)"
    uncover 4
    match approval_program_create_box_route@3 approval_program_num_tups_route@4 approval_program_add_tup_route@5 approval_program_get_tup_route@6

approval_program_switch_case_default@7:

approval_program_switch_case_next@8:

approval_program_after_if_else@15:
    // mutable_native_types/fixed_with_tups.py:22
    // class FixedWithTups(arc4.ARC4Contract):
    intc_0 // 0

approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__puya_arc4_router__@16:
    retsub

approval_program_get_tup_route@6:
    // mutable_native_types/fixed_with_tups.py:40
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // mutable_native_types/fixed_with_tups.py:22
    // class FixedWithTups(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // mutable_native_types/fixed_with_tups.py:40
    // @arc4.abimethod()
    callsub get_tup
    swap
    itob
    swap
    itob
    swap
    bytec_1 // 0x
    swap
    concat
    swap
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__puya_arc4_router__@16

approval_program_add_tup_route@5:
    // mutable_native_types/fixed_with_tups.py:34
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // mutable_native_types/fixed_with_tups.py:22
    // class FixedWithTups(arc4.ARC4Contract):
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    intc_1 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    intc_1 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    // mutable_native_types/fixed_with_tups.py:34
    // @arc4.abimethod()
    callsub add_tup
    intc_2 // 1
    b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__puya_arc4_router__@16

approval_program_num_tups_route@4:
    // mutable_native_types/fixed_with_tups.py:30
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub num_tups
    itob
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__puya_arc4_router__@16

approval_program_create_box_route@3:
    // mutable_native_types/fixed_with_tups.py:26
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub create_box
    intc_2 // 1
    b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__puya_arc4_router__@16

approval_program_bare_routing@9:
    // mutable_native_types/fixed_with_tups.py:22
    // class FixedWithTups(arc4.ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match approval_program___algopy_default_create@10

approval_program_switch_case_default@13:

approval_program_switch_case_next@14:
    b approval_program_after_if_else@15

approval_program___algopy_default_create@10:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

approval_program_block@11:

approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__algopy_default_create@12:
    intc_2 // 1
    b approval_program_after_inlined_test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__puya_arc4_router__@16
