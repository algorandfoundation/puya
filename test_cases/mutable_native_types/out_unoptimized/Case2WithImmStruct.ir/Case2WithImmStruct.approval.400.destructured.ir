main test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.create_box[routing]() -> void:
    block@0: // L38
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.create_box()
        exit 1u

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.num_tups[routing]() -> void:
    block@0: // L45
        let tmp%0#0: uint64 = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.num_tups()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup[routing]() -> void:
    block@0: // L49
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup(reinterpret_Encoded(uint64,uint64)%0#0)
        exit 1u

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_tup[routing]() -> void:
    block@0: // L56
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%1#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_tup(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum[routing]() -> void:
    block@0: // L61
        let tmp%0#0: uint64 = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups[routing]() -> void:
    block@0: // L70
        let reinterpret_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups(reinterpret_Encoded(len+(uint64,uint64)[])%0#0)
        exit 1u

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups[routing]() -> void:
    block@0: // L75
        let reinterpret_Encoded((uint64,uint64)[3])%0#0: Encoded((uint64,uint64)[3]) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups(reinterpret_Encoded((uint64,uint64)[3])%0#0)
        exit 1u

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a[routing]() -> void:
    block@0: // L80
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a(tmp%0#0)
        exit 1u

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b[routing]() -> void:
    block@0: // L87
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b(tmp%0#0)
        exit 1u

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_3_tups[routing]() -> void:
    block@0: // L94
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%1#0: Encoded((uint64,uint64)[3]) = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_3_tups(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups[routing]() -> void:
    block@0: // L107
        let tmp%0#0: Encoded(len+(uint64,uint64)[]) = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__init__() -> void:
    block@0: // L35
        return 

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.create_box() -> void:
    block@0: // L38
        let tmp%0#0: bool = (box_create "tup_bag" 4273u)
        (assert tmp%0#0) // box already exists
        let tmp%1#0: account = (txn Sender)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%1#0
        let encoded_value%0#0: Encoded(uint8[32]) = aggregate%as_Encoded(uint8[32])%0#0
        let aggregate%updated_data%0#0: bytes = (replace3 storage_value%0#0 136u encoded_value%0#0)
        let updated_tuple%0#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = aggregate%updated_data%0#0
        (box_put "tup_bag" updated_tuple%0#0)
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%3#0) // check self.tup_bag exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%updated_data%1#0: bytes = (replace3 storage_value%1#0 168u encoded_value%1#0)
        let updated_tuple%1#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = aggregate%updated_data%1#0
        (box_put "tup_bag" updated_tuple%1#0)
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%5#0) // check self.tup_bag exists
        let storage_value%2#0: bytes = aggregate%box_get%4#0
        let aggregate%updated_data%2#0: bytes = (setbit storage_value%2#0 34176u 1u)
        let updated_tuple%2#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = aggregate%updated_data%2#0
        (box_put "tup_bag" updated_tuple%2#0)
        return 

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.num_tups() -> uint64:
    block@0: // L45
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        return values%0#0

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup(tup: Encoded(uint64,uint64)) -> void:
    block@0: // L49
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct._check_owner()
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%0#0: bool = (< values%0#0 8u)
        (assert tmp%0#0) // too many tups
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%3#0) // check self.tup_bag exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%5#0) // check self.tup_bag exists
        let storage_value%2#0: bytes = aggregate%box_get%4#0
        let aggregate%extract%1#0: bytes = (extract3 storage_value%2#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%extract%2#0: bytes = (extract3 storage_value%1#0 8u 128u)
        let aggregate%write_offset%0#0: uint64 = (* values%1#0 16u)
        let aggregate%updated_array%0#0: bytes = (replace3 aggregate%extract%2#0 aggregate%write_offset%0#0 tup#0) // on error: index access is out of bounds
        let aggregate%updated_data%0#0: bytes = (replace3 storage_value%1#0 8u aggregate%updated_array%0#0)
        let updated_tuple%0#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = aggregate%updated_data%0#0
        (box_put "tup_bag" updated_tuple%0#0)
        let (aggregate%box_get%6#0: bytes, aggregate%box_get%7#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%7#0) // check self.tup_bag exists
        let storage_value%3#0: bytes = aggregate%box_get%6#0
        let aggregate%extract%3#0: bytes = (extract3 storage_value%3#0 0u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%3#0
        let values%2#0: uint64 = (btoi tuple_item%2#0)
        let tmp%1#0: uint64 = (+ values%2#0 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%updated_data%1#0: bytes = (replace3 storage_value%3#0 0u encoded_value%0#0)
        let updated_tuple%1#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = aggregate%updated_data%1#0
        (box_put "tup_bag" updated_tuple%1#0)
        return 

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_tup(index: uint64) -> Encoded(uint64,uint64):
    block@0: // L56
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%0#0: bool = (< index#0 values%0#0)
        (assert tmp%0#0) // index out of bounds
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%3#0) // check self.tup_bag exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%extract%1#0: bytes = (extract3 storage_value%1#0 8u 128u)
        let tuple_item%1#0: Encoded((uint64,uint64)[8]) = aggregate%extract%1#0
        let aggregate%bytes_offset%0#0: uint64 = (* index#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 tuple_item%1#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#0
        return array_item%0#0

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum() -> uint64:
    block@0: // L61
        let total#0: uint64 = 0u
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L64
        let continue_looping%0#0: bool = (< i#0 values%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L65
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%3#0) // check self.tup_bag exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%extract%1#0: bytes = (extract3 storage_value%1#0 8u 128u)
        let tuple_item%1#0: Encoded((uint64,uint64)[8]) = aggregate%extract%1#0
        let aggregate%bytes_offset%0#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 tuple_item%1#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#0
        let tup#0: Encoded(uint64,uint64) = array_item%0#0
        let aggregate%extract%2#0: bytes = (extract3 tup#0 0u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#0
        let values%1#0: uint64 = (btoi tuple_item%2#0)
        let tmp%0#0: uint64 = (+ total#0 values%1#0)
        let total#0: uint64 = tmp%0#0
        let aggregate%extract%3#0: bytes = (extract3 tup#0 8u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%3#0
        let values%2#0: uint64 = (btoi tuple_item%3#0)
        let tmp%1#0: uint64 = (+ total#0 values%2#0)
        let total#0: uint64 = tmp%1#0
        goto block@3
    block@3: // for_footer_L64
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L64
        return total#0

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups(tups: Encoded(len+(uint64,uint64)[])) -> void:
    block@0: // L70
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tups#0 0u)
        let array_length%0#0: uint64 = aggregate%array_length%0#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L72
        let continue_looping%0#0: bool = (< item_index_internal%0#0 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L73
        let aggregate%total_length%0#0: uint64 = (len tups#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 tups#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#0
        let tup#0: Encoded(uint64,uint64) = array_item%0#0
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup(tup#0)
        goto block@3
    block@3: // for_footer_L72
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L72
        return 

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups(tups: Encoded((uint64,uint64)[3])) -> void:
    block@0: // L75
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L77
        let continue_looping%0#0: bool = (< item_index_internal%0#0 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L78
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 tups#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#0
        let tup#0: Encoded(uint64,uint64) = array_item%0#0
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup(tup#0)
        goto block@3
    block@3: // for_footer_L77
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L77
        return 

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a(a: uint64) -> void:
    block@0: // L80
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct._check_owner()
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L83
        let continue_looping%0#0: bool = (< i#0 values%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L84
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%3#0) // check self.tup_bag exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%extract%1#0: bytes = (extract3 storage_value%1#0 8u 128u)
        let tuple_item%1#0: Encoded((uint64,uint64)[8]) = aggregate%extract%1#0
        let aggregate%bytes_offset%0#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 tuple_item%1#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#0
        let tup#0: Encoded(uint64,uint64) = array_item%0#0
        let aggregate%extract%2#0: bytes = (extract3 tup#0 8u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#0
        let values%1#0: uint64 = (btoi tuple_item%2#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob values%1#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%0#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%5#0) // check self.tup_bag exists
        let storage_value%2#0: bytes = aggregate%box_get%4#0
        let aggregate%extract%3#0: bytes = (extract3 storage_value%2#0 8u 128u)
        let aggregate%write_offset%0#0: uint64 = (* i#0 16u)
        let aggregate%updated_array%0#0: bytes = (replace3 aggregate%extract%3#0 aggregate%write_offset%0#0 tmp%0#0) // on error: index access is out of bounds
        let aggregate%updated_data%0#0: bytes = (replace3 storage_value%2#0 8u aggregate%updated_array%0#0)
        let updated_tuple%0#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = aggregate%updated_data%0#0
        (box_put "tup_bag" updated_tuple%0#0)
        goto block@3
    block@3: // for_footer_L83
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L83
        return 

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b(b: uint64) -> void:
    block@0: // L87
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct._check_owner()
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L90
        let continue_looping%0#0: bool = (< i#0 values%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L91
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%3#0) // check self.tup_bag exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%extract%1#0: bytes = (extract3 storage_value%1#0 8u 128u)
        let tuple_item%1#0: Encoded((uint64,uint64)[8]) = aggregate%extract%1#0
        let aggregate%bytes_offset%0#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 tuple_item%1#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#0
        let tup#0: Encoded(uint64,uint64) = array_item%0#0
        let aggregate%extract%2#0: bytes = (extract3 tup#0 0u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#0
        let values%1#0: uint64 = (btoi tuple_item%2#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob values%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob b#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%0#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%5#0) // check self.tup_bag exists
        let storage_value%2#0: bytes = aggregate%box_get%4#0
        let aggregate%extract%3#0: bytes = (extract3 storage_value%2#0 8u 128u)
        let aggregate%write_offset%0#0: uint64 = (* i#0 16u)
        let aggregate%updated_array%0#0: bytes = (replace3 aggregate%extract%3#0 aggregate%write_offset%0#0 tmp%0#0) // on error: index access is out of bounds
        let aggregate%updated_data%0#0: bytes = (replace3 storage_value%2#0 8u aggregate%updated_array%0#0)
        let updated_tuple%0#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = aggregate%updated_data%0#0
        (box_put "tup_bag" updated_tuple%0#0)
        goto block@3
    block@3: // for_footer_L90
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L90
        return 

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_3_tups(start: uint64) -> Encoded((uint64,uint64)[3]):
    block@0: // L94
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%0#0: uint64 = (+ start#0 3u)
        let tmp%1#0: bool = (>= values%0#0 tmp%0#0)
        (assert tmp%1#0) // not enough items
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%3#0) // check self.tup_bag exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%extract%1#0: bytes = (extract3 storage_value%1#0 8u 128u)
        let tuple_item%1#0: Encoded((uint64,uint64)[8]) = aggregate%extract%1#0
        let items#0: Encoded((uint64,uint64)[8]) = tuple_item%1#0
        let aggregate%bytes_offset%0#0: uint64 = (* start#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 items#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#0
        let tmp%2#0: uint64 = (+ start#0 1u)
        let aggregate%bytes_offset%1#0: uint64 = (* tmp%2#0 16u)
        let aggregate%encoded_element%1#0: bytes = (extract3 items#0 aggregate%bytes_offset%1#0 16u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64,uint64) = aggregate%encoded_element%1#0
        let tmp%3#0: uint64 = (+ start#0 2u)
        let aggregate%bytes_offset%2#0: uint64 = (* tmp%3#0 16u)
        let aggregate%encoded_element%2#0: bytes = (extract3 items#0 aggregate%bytes_offset%2#0 16u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64,uint64) = aggregate%encoded_element%2#0
        let aggregate%head%0#0: bytes = (concat 0x array_item%0#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 array_item%1#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 array_item%2#0)
        let aggregate%as_Encoded((uint64,uint64)[3])%0#0: Encoded((uint64,uint64)[3]) = aggregate%head%2#0
        let encoded_array%0#0: Encoded((uint64,uint64)[3]) = aggregate%as_Encoded((uint64,uint64)[3])%0#0
        return encoded_array%0#0

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups() -> Encoded(len+(uint64,uint64)[]):
    block@0: // L107
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = aggregate%len_u16%0#0
        let encoded_array%0#0: Encoded(len+(uint64,uint64)[]) = aggregate%as_Encoded(len+(uint64,uint64)[])%0#0
        let result#0: Encoded(len+(uint64,uint64)[]) = encoded_array%0#0
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%0#0 8u 128u)
        let tuple_item%0#0: Encoded((uint64,uint64)[8]) = aggregate%extract%0#0
        let items#0: Encoded((uint64,uint64)[8]) = tuple_item%0#0
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%3#0) // check self.tup_bag exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%extract%1#0: bytes = (extract3 storage_value%1#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%0#0: uint64 = (btoi tuple_item%1#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L112
        let continue_looping%0#0: bool = (< i#0 values%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L113
        let aggregate%bytes_offset%0#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 items#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#0
        let aggregate%head%0#0: bytes = (concat 0x array_item%0#0)
        let aggregate%as_Encoded((uint64,uint64)[])%0#0: Encoded((uint64,uint64)[]) = aggregate%head%0#0
        let tmp%0#0: Encoded((uint64,uint64)[]) = aggregate%as_Encoded((uint64,uint64)[])%0#0
        let concat%0#0: Encoded(len+(uint64,uint64)[]) = (concat result#0 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 result#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = replace%0#0
        let result#0: Encoded(len+(uint64,uint64)[]) = as_Encoded(len+(uint64,uint64)[])%0#0
        goto block@3
    block@3: // for_footer_L112
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L112
        return result#0

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct._check_owner() -> void:
    block@0: // L116
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%get_bit%0#0: bool = (getbit storage_value%0#0 34176u)
        let tuple_item%0#0: bool = aggregate%get_bit%0#0
        let values%0#0: bool = tuple_item%0#0
        (assert values%0#0) // app not bootstrapped
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%3#0) // check self.tup_bag exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%1#0 136u 32u)
        let tuple_item%1#0: Encoded(uint8[32]) = aggregate%extract%0#0
        let values%1#0: account = tuple_item%1#0
        let tmp%0#0: account = (txn Sender)
        let tmp%1#0: bool = (== values%1#0 tmp%0#0)
        (assert tmp%1#0) // sender not authorized
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%5#0) // check self.tup_bag exists
        let storage_value%2#0: bytes = aggregate%box_get%4#0
        let aggregate%extract%1#0: bytes = (extract3 storage_value%2#0 168u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%1#0
        let values%2#0: uint64 = (btoi tuple_item%2#0)
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let tmp%3#0: bool = (== values%2#0 tmp%2#0)
        (assert tmp%3#0) // this error should be impossible
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L34
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@2, 1u => block@16, 2u => block@21, 3u => block@22, 4u => block@23, 5u => block@24, 6u => block@25, 7u => block@26, 8u => block@27, 9u => block@28, 10u => block@29, 11u => block@30, * => block@31}
    block@2: // switch_case_0_L34
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "create_box()void" => block@3, method "num_tups()uint64" => block@4, method "add_tup((uint64,uint64))void" => block@5, method "get_tup(uint64)(uint64,uint64)" => block@6, method "sum()uint64" => block@7, method "add_many_tups((uint64,uint64)[])void" => block@8, method "add_fixed_tups((uint64,uint64)[3])void" => block@9, method "set_a(uint64)void" => block@10, method "set_b(uint64)void" => block@11, method "get_3_tups(uint64)(uint64,uint64)[3]" => block@12, method "get_all_tups()(uint64,uint64)[]" => block@13, * => block@14}
    block@3: // create_box_route_L38
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.create_box[routing]()
        goto block@15
    block@4: // num_tups_route_L45
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.num_tups[routing]()
        goto block@15
    block@5: // add_tup_route_L49
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup[routing]()
        goto block@15
    block@6: // get_tup_route_L56
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_tup[routing]()
        goto block@15
    block@7: // sum_route_L61
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum[routing]()
        goto block@15
    block@8: // add_many_tups_route_L70
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups[routing]()
        goto block@15
    block@9: // add_fixed_tups_route_L75
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups[routing]()
        goto block@15
    block@10: // set_a_route_L80
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a[routing]()
        goto block@15
    block@11: // set_b_route_L87
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b[routing]()
        goto block@15
    block@12: // get_3_tups_route_L94
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_3_tups[routing]()
        goto block@15
    block@13: // get_all_tups_route_L107
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups[routing]()
        goto block@15
    block@14: // switch_case_default_L34
        goto block@15
    block@15: // switch_case_next_L34
        fail // this contract does not implement the given ABI method for call NoOp
    block@16: // switch_case_1_L34
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@17 : block@20
    block@17: // __algopy_default_create_L1
        goto block@18
    block@18: // L1
        goto block@19
    block@19: // after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__algopy_default_create_L1
        exit 1u
    block@20: // else_body_L34
        fail // this contract does not implement the given ABI method for create NoOp
    block@21: // switch_case_2_L34
        goto block@31
    block@22: // switch_case_3_L34
        goto block@31
    block@23: // switch_case_4_L34
        goto block@31
    block@24: // switch_case_5_L34
        goto block@31
    block@25: // switch_case_6_L34
        goto block@31
    block@26: // switch_case_7_L34
        goto block@31
    block@27: // switch_case_8_L34
        goto block@31
    block@28: // switch_case_9_L34
        goto block@31
    block@29: // switch_case_10_L34
        goto block@31
    block@30: // switch_case_11_L34
        goto block@31
    block@31: // switch_case_default_L34
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
    block@32: // after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0