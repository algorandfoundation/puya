main test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__init__() -> void:
    block@0: // L32
        return 

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.create_box() -> void:
    block@0: // L35
        let tmp%0#0: bool = (box_create "tup_bag" 176u)
        (assert tmp%0#0) // box already exists
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let assigned_value%0#0: bytes[32] = (txn Sender)
        let encoded%0#0: bytes[32] = assigned_value%0#0
        let updated_data%0#0: bytes = (replace3 maybe_value%0#0 136u encoded%0#0)
        (box_put "tup_bag" updated_data%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let assigned_value%1#0: uint64 = (global CurrentApplicationID)
        let val_as_bytes%0#0: bytes[8] = (itob assigned_value%1#0)
        let encoded%1#0: bytes[8] = val_as_bytes%0#0
        let updated_data%1#0: bytes = (replace3 maybe_value%1#0 168u encoded%1#0)
        (box_put "tup_bag" updated_data%1#0)
        return 

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.num_tups() -> uint64:
    block@0: // L41
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let encoded%0#0: bytes = (extract3 maybe_value%0#0 0u 8u) // on error: Index access is out of bounds
        let tmp%0#0: uint64 = (btoi encoded%0#0)
        return tmp%0#0

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup(tup: bytes[16]) -> void:
    block@0: // L45
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct._check_owner()
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let encoded%0#0: bytes = (extract3 maybe_value%0#0 0u 8u) // on error: Index access is out of bounds
        let tmp%0#0: uint64 = (btoi encoded%0#0)
        let tmp%1#0: bool = (< tmp%0#0 8u)
        (assert tmp%1#0) // too many tups
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let tmp%2#0: bytes = (extract3 maybe_value%1#0 8u 128u) // on error: Index access is out of bounds
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%2#0) // check self.tup_bag exists
        let encoded%1#0: bytes = (extract3 maybe_value%2#0 0u 8u) // on error: Index access is out of bounds
        let tmp%3#0: uint64 = (btoi encoded%1#0)
        let index_is_in_bounds%0#0: bool = (< tmp%3#0 8u)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let write_offset%0#0: uint64 = (* tmp%3#0 16u)
        let updated_target%0#0: bytes = (replace3 tmp%2#0 write_offset%0#0 tup#0)
        let assigned_value%0#0: bytes = updated_target%0#0
        let updated_data%0#0: bytes = (replace3 maybe_value%1#0 8u assigned_value%0#0)
        (box_put "tup_bag" updated_data%0#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%3#0) // check self.tup_bag exists
        let encoded%2#0: bytes = (extract3 maybe_value%3#0 0u 8u) // on error: Index access is out of bounds
        let tmp%4#0: uint64 = (btoi encoded%2#0)
        let assigned_value%1#0: uint64 = (+ tmp%4#0 1u)
        let val_as_bytes%0#0: bytes[8] = (itob assigned_value%1#0)
        let encoded%3#0: bytes[8] = val_as_bytes%0#0
        let updated_data%1#0: bytes = (replace3 maybe_value%3#0 0u encoded%3#0)
        (box_put "tup_bag" updated_data%1#0)
        return 

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_tup(index: uint64) -> bytes[16]:
    block@0: // L52
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let encoded%0#0: bytes = (extract3 maybe_value%0#0 0u 8u) // on error: Index access is out of bounds
        let tmp%0#0: uint64 = (btoi encoded%0#0)
        let tmp%1#0: bool = (< index#0 tmp%0#0)
        (assert tmp%1#0) // index out of bounds
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let tmp%2#0: bytes = (extract3 maybe_value%1#0 8u 128u) // on error: Index access is out of bounds
        let array_head_and_tail%0#0: bytes = tmp%2#0
        let item_offset%0#0: uint64 = (* index#0 16u)
        let tmp%3#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 16u) // on error: Index access is out of bounds
        return tmp%3#0

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum() -> uint64:
    block@0: // L57
        let total#0: uint64 = 0u
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let encoded%0#0: bytes = (extract3 maybe_value%0#0 0u 8u) // on error: Index access is out of bounds
        let tmp%0#0: uint64 = (btoi encoded%0#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L60
        let continue_looping%0#0: bool = (< i#0 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L61
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let tmp%1#0: bytes = (extract3 maybe_value%1#0 8u 128u) // on error: Index access is out of bounds
        let array_head_and_tail%0#0: bytes = tmp%1#0
        let item_offset%0#0: uint64 = (* i#0 16u)
        let tup#0: bytes[16] = (extract3 array_head_and_tail%0#0 item_offset%0#0 16u) // on error: Index access is out of bounds
        let encoded%1#0: bytes = (extract3 tup#0 0u 8u) // on error: Index access is out of bounds
        let tmp%2#0: uint64 = (btoi encoded%1#0)
        let total#0: uint64 = (+ total#0 tmp%2#0)
        let encoded%2#0: bytes = (extract3 tup#0 8u 8u) // on error: Index access is out of bounds
        let tmp%3#0: uint64 = (btoi encoded%2#0)
        let total#0: uint64 = (+ total#0 tmp%3#0)
        goto block@3
    block@3: // for_footer_L60
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L60
        return total#0

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups(tups: bytes) -> void:
    block@0: // L66
        let array_length%0#0: uint64 = (extract_uint16 tups#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L68
        let continue_looping%0#0: bool = (< item_index_internal%0#0 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L69
        let array_head_and_tail%0#0: bytes = ((extract 2 0) tups#0)
        let item_offset%0#0: uint64 = (* item_index_internal%0#0 16u)
        let tup#0: bytes[16] = (extract3 array_head_and_tail%0#0 item_offset%0#0 16u) // on error: Index access is out of bounds
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup(tup#0)
        goto block@3
    block@3: // for_footer_L68
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L68
        return 

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups(tups: bytes[48]) -> void:
    block@0: // L71
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L73
        let continue_looping%0#0: bool = (< item_index_internal%0#0 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L74
        let array_head_and_tail%0#0: bytes[48] = tups#0
        let item_offset%0#0: uint64 = (* item_index_internal%0#0 16u)
        let tup#0: bytes[16] = (extract3 array_head_and_tail%0#0 item_offset%0#0 16u) // on error: Index access is out of bounds
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup(tup#0)
        goto block@3
    block@3: // for_footer_L73
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L73
        return 

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a(a: uint64) -> void:
    block@0: // L76
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct._check_owner()
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let encoded%0#0: bytes = (extract3 maybe_value%0#0 0u 8u) // on error: Index access is out of bounds
        let tmp%0#0: uint64 = (btoi encoded%0#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L79
        let continue_looping%0#0: bool = (< i#0 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L80
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let tmp%1#0: bytes = (extract3 maybe_value%1#0 8u 128u) // on error: Index access is out of bounds
        let array_head_and_tail%0#0: bytes = tmp%1#0
        let item_offset%0#0: uint64 = (* i#0 16u)
        let tup#0: bytes[16] = (extract3 array_head_and_tail%0#0 item_offset%0#0 16u) // on error: Index access is out of bounds
        let encoded%1#0: bytes = (extract3 tup#0 8u 8u) // on error: Index access is out of bounds
        let tmp%2#0: uint64 = (btoi encoded%1#0)
        let val_as_bytes%0#0: bytes[8] = (itob a#0)
        let val_as_bytes%1#0: bytes[8] = (itob tmp%2#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%2#0) // check self.tup_bag exists
        let tmp%3#0: bytes = (extract3 maybe_value%2#0 8u 128u) // on error: Index access is out of bounds
        let index_is_in_bounds%0#0: bool = (< i#0 8u)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let write_offset%0#0: uint64 = (* i#0 16u)
        let updated_target%0#0: bytes = (replace3 tmp%3#0 write_offset%0#0 encoded_tuple_buffer%2#0)
        let assigned_value%0#0: bytes = updated_target%0#0
        let updated_data%0#0: bytes = (replace3 maybe_value%2#0 8u assigned_value%0#0)
        (box_put "tup_bag" updated_data%0#0)
        goto block@3
    block@3: // for_footer_L79
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L79
        return 

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b(b: uint64) -> void:
    block@0: // L83
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct._check_owner()
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let encoded%0#0: bytes = (extract3 maybe_value%0#0 0u 8u) // on error: Index access is out of bounds
        let tmp%0#0: uint64 = (btoi encoded%0#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L86
        let continue_looping%0#0: bool = (< i#0 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L87
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let tmp%1#0: bytes = (extract3 maybe_value%1#0 8u 128u) // on error: Index access is out of bounds
        let array_head_and_tail%0#0: bytes = tmp%1#0
        let item_offset%0#0: uint64 = (* i#0 16u)
        let tup#0: bytes[16] = (extract3 array_head_and_tail%0#0 item_offset%0#0 16u) // on error: Index access is out of bounds
        let encoded%1#0: bytes = (extract3 tup#0 0u 8u) // on error: Index access is out of bounds
        let tmp%2#0: uint64 = (btoi encoded%1#0)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let val_as_bytes%1#0: bytes[8] = (itob b#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%2#0) // check self.tup_bag exists
        let tmp%3#0: bytes = (extract3 maybe_value%2#0 8u 128u) // on error: Index access is out of bounds
        let index_is_in_bounds%0#0: bool = (< i#0 8u)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let write_offset%0#0: uint64 = (* i#0 16u)
        let updated_target%0#0: bytes = (replace3 tmp%3#0 write_offset%0#0 encoded_tuple_buffer%2#0)
        let assigned_value%0#0: bytes = updated_target%0#0
        let updated_data%0#0: bytes = (replace3 maybe_value%2#0 8u assigned_value%0#0)
        (box_put "tup_bag" updated_data%0#0)
        goto block@3
    block@3: // for_footer_L86
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L86
        return 

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_3_tups(start: uint64) -> bytes[48]:
    block@0: // L90
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let encoded%0#0: bytes = (extract3 maybe_value%0#0 0u 8u) // on error: Index access is out of bounds
        let tmp%0#0: uint64 = (btoi encoded%0#0)
        let tmp%1#0: uint64 = (+ start#0 3u)
        let tmp%2#0: bool = (>= tmp%0#0 tmp%1#0)
        (assert tmp%2#0) // not enough items
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let tmp%3#0: bytes = (extract3 maybe_value%1#0 8u 128u) // on error: Index access is out of bounds
        let copy%0#0: bytes = tmp%3#0
        let items#0: bytes[128] = copy%0#0
        let array_head_and_tail%0#0: bytes[128] = items#0
        let item_offset%0#0: uint64 = (* start#0 16u)
        let tmp%4#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 16u) // on error: Index access is out of bounds
        let tmp%5#0: uint64 = (+ start#0 1u)
        let array_head_and_tail%1#0: bytes[128] = items#0
        let item_offset%1#0: uint64 = (* tmp%5#0 16u)
        let tmp%6#0: bytes = (extract3 array_head_and_tail%1#0 item_offset%1#0 16u) // on error: Index access is out of bounds
        let tmp%7#0: uint64 = (+ start#0 2u)
        let array_head_and_tail%2#0: bytes[128] = items#0
        let item_offset%2#0: uint64 = (* tmp%7#0 16u)
        let tmp%8#0: bytes = (extract3 array_head_and_tail%2#0 item_offset%2#0 16u) // on error: Index access is out of bounds
        let result%0#0: bytes = (concat 0x tmp%4#0)
        let result%1#0: bytes = (concat result%0#0 tmp%6#0)
        let result%2#0: bytes = (concat result%1#0 tmp%8#0)
        let array_data%0#0: bytes = (concat 0x result%2#0)
        return array_data%0#0

subroutine test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct._check_owner() -> void:
    block@0: // L103
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let encoded%0#0: bytes = (extract3 maybe_value%0#0 136u 32u) // on error: Index access is out of bounds
        let tmp%0#0: bytes[32] = (txn Sender)
        let tmp%1#0: bool = (== encoded%0#0 tmp%0#0)
        (assert tmp%1#0) // sender not authorized
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let encoded%1#0: bytes = (extract3 maybe_value%1#0 168u 8u) // on error: Index access is out of bounds
        let tmp%2#0: uint64 = (btoi encoded%1#0)
        let tmp%3#0: uint64 = (global CurrentApplicationID)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        (assert tmp%4#0) // this error should be impossible
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L31
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@15
    block@2: // abi_routing_L31
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create_box()void" => block@3, method "num_tups()uint64" => block@4, method "add_tup((uint64,uint64))void" => block@5, method "get_tup(uint64)(uint64,uint64)" => block@6, method "sum()uint64" => block@7, method "add_many_tups((uint64,uint64)[])void" => block@8, method "add_fixed_tups((uint64,uint64)[3])void" => block@9, method "set_a(uint64)void" => block@10, method "set_b(uint64)void" => block@11, method "get_3_tups(uint64)(uint64,uint64)[3]" => block@12, * => block@13}
    block@3: // create_box_route_L35
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.create_box()
        let test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        goto block@22
    block@4: // num_tups_route_L41
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let to_encode%0#0: uint64 = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.num_tups()
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%11#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%11#0)
        let test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        goto block@22
    block@5: // add_tup_route_L45
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (== tmp%12#0 NoOp)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup(reinterpret_bytes[16]%0#0)
        let test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        goto block@22
    block@6: // get_tup_route_L52
        let tmp%16#0: uint64 = (txn OnCompletion)
        let tmp%17#0: bool = (== tmp%16#0 NoOp)
        (assert tmp%17#0) // OnCompletion is not NoOp
        let tmp%18#0: uint64 = (txn ApplicationID)
        let tmp%19#0: bool = (!= tmp%18#0 0u)
        (assert tmp%19#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%20#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        let tmp%21#0: bytes[16] = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_tup(tmp%20#0)
        let tmp%22#0: bytes = (concat 0x151f7c75 tmp%21#0)
        (log tmp%22#0)
        let test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        goto block@22
    block@7: // sum_route_L57
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (== tmp%23#0 NoOp)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        let tmp%26#0: bool = (!= tmp%25#0 0u)
        (assert tmp%26#0) // can only call when not creating
        let to_encode%1#0: uint64 = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum()
        let val_as_bytes%1#0: bytes[8] = (itob to_encode%1#0)
        let tmp%27#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
        (log tmp%27#0)
        let test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        goto block@22
    block@8: // add_many_tups_route_L66
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (== tmp%28#0 NoOp)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (!= tmp%30#0 0u)
        (assert tmp%31#0) // can only call when not creating
        let tmp%32#0: bytes = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups(tmp%32#0)
        let test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        goto block@22
    block@9: // add_fixed_tups_route_L71
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (== tmp%33#0 NoOp)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        let tmp%36#0: bool = (!= tmp%35#0 0u)
        (assert tmp%36#0) // can only call when not creating
        let reinterpret_bytes[48]%0#0: bytes[48] = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups(reinterpret_bytes[48]%0#0)
        let test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        goto block@22
    block@10: // set_a_route_L76
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (== tmp%37#0 NoOp)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        let tmp%40#0: bool = (!= tmp%39#0 0u)
        (assert tmp%40#0) // can only call when not creating
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%41#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a(tmp%41#0)
        let test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        goto block@22
    block@11: // set_b_route_L83
        let tmp%42#0: uint64 = (txn OnCompletion)
        let tmp%43#0: bool = (== tmp%42#0 NoOp)
        (assert tmp%43#0) // OnCompletion is not NoOp
        let tmp%44#0: uint64 = (txn ApplicationID)
        let tmp%45#0: bool = (!= tmp%44#0 0u)
        (assert tmp%45#0) // can only call when not creating
        let reinterpret_bytes[8]%2#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%46#0: uint64 = (btoi reinterpret_bytes[8]%2#0)
        test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b(tmp%46#0)
        let test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        goto block@22
    block@12: // get_3_tups_route_L90
        let tmp%47#0: uint64 = (txn OnCompletion)
        let tmp%48#0: bool = (== tmp%47#0 NoOp)
        (assert tmp%48#0) // OnCompletion is not NoOp
        let tmp%49#0: uint64 = (txn ApplicationID)
        let tmp%50#0: bool = (!= tmp%49#0 0u)
        (assert tmp%50#0) // can only call when not creating
        let reinterpret_bytes[8]%3#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%51#0: uint64 = (btoi reinterpret_bytes[8]%3#0)
        let tmp%52#0: bytes[48] = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_3_tups(tmp%51#0)
        let tmp%53#0: bytes = (concat 0x151f7c75 tmp%52#0)
        (log tmp%53#0)
        let test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        goto block@22
    block@13: // switch_case_default_L31
        goto block@14
    block@14: // switch_case_next_L31
        goto block@21
    block@15: // bare_routing_L31
        let tmp%54#0: uint64 = (txn OnCompletion)
        switch tmp%54#0 {0u => block@16, * => block@19}
    block@16: // __algopy_default_create_L1
        let tmp%55#0: uint64 = (txn ApplicationID)
        let tmp%56#0: bool = (== tmp%55#0 0u)
        (assert tmp%56#0) // can only call when creating
        goto block@17
    block@17: // L1
        goto block@18
    block@18: // after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__algopy_default_create_L1
        let test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        goto block@22
    block@19: // switch_case_default_L31
        goto block@20
    block@20: // switch_case_next_L31
        goto block@21
    block@21: // after_if_else_L31
        let test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        goto block@22
    block@22: // after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router___L1
        return tmp%0#0