{
  "version": 3,
  "sources": [
    "../abi_call.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AAAA;AAoDK;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;;;;AAJA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;;;;;;;;AAxCA;;;;;;AAEG;AAAA;;AAAA;;;;;AAIO;AAAA;AAAA;AAAA;AAAP;AAEH;;;;;;AAEG;AAAA;;AAAA;;;;;AAIO;AAAA;AAAA;AAAA;AAAP;AAEH;;;;;;AAEG;AAAA;;AAAA;;;;;AAIO;AAAA;AAAA;AAAA;AAAP;AAEH;;;;;;AAEG;;AAAA;;AAAA;;;;;AAIO;AAAA;;AAAA;AAAA;AAAP;AAEH;;;;;;AAEG;;AAAA;;AAAA;;;;;AAIO;AAAA;;AAAA;AAAA;AAAP;;;;AAII;AAAA;AAAA;AAAA;AAAJ;AACI;AAAA;AAAA;AAAA;AAAJ;AACI;AAAA;AAAA;AAAA;AAAJ;AACI;AAAA;;AAAA;AAAA;AAAJ;AACI;AAAA;;AAAA;AAAA;AAAJ;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 16 2"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 \"fixed_struct\" \"nested_struct\" \"dynamic_struct\" \"fixed_arr\" \"native_arr\""
    },
    "77": {
      "op": "b main_block@0"
    },
    "80": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "82": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "85": {
      "op": "b main_call___init__@1"
    },
    "88": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.__init__",
      "op": "callsub __init__"
    },
    "91": {
      "op": "b main_after_if_else@2"
    },
    "94": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "b main_block@3"
    },
    "97": {
      "block": "main_block@3",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "99": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "100": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "101": {
      "op": "bz main___algopy_default_create@22",
      "stack_out": []
    },
    "104": {
      "op": "b main_abi_routing@4"
    },
    "107": {
      "block": "main_abi_routing@4",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "110": {
      "op": "pushbytes 0x24378d3c // method \"delete()void\"",
      "defined_out": [
        "Method(delete()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(delete()void)"
      ]
    },
    "116": {
      "op": "uncover 1",
      "stack_out": [
        "Method(delete()void)",
        "tmp%2#0"
      ]
    },
    "118": {
      "op": "match main_delete_route@5",
      "stack_out": []
    },
    "122": {
      "op": "b main_switch_case_next@6"
    },
    "125": {
      "block": "main_switch_case_next@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "127": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "128": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "129": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "130": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "132": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "133": {
      "op": "!=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "134": {
      "op": "bz main_create_NoOp@20",
      "stack_out": []
    },
    "137": {
      "op": "b main_call_NoOp@7"
    },
    "140": {
      "block": "main_call_NoOp@7",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "143": {
      "op": "pushbytes 0x11b19b95 // method \"fixed_struct_arg((uint64,uint64))void\"",
      "defined_out": [
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(fixed_struct_arg((uint64,uint64))void)"
      ]
    },
    "149": {
      "op": "pushbytes 0xd28b964a // method \"fixed_struct_ret()(uint64,uint64)\"",
      "defined_out": [
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))"
      ]
    },
    "155": {
      "op": "pushbytes 0xea18655f // method \"nested_struct_arg(((uint64,uint64),uint64))void\"",
      "defined_out": [
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)"
      ]
    },
    "161": {
      "op": "pushbytes 0xbb3bfdb7 // method \"nested_struct_ret()((uint64,uint64),uint64)\"",
      "defined_out": [
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))"
      ]
    },
    "167": {
      "op": "pushbytes 0x46ec14a0 // method \"dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void\"",
      "defined_out": [
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)"
      ]
    },
    "173": {
      "op": "pushbytes 0x9b4d0926 // method \"dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])\"",
      "defined_out": [
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))"
      ]
    },
    "179": {
      "op": "pushbytes 0x4f0deb50 // method \"fixed_arr_arg((uint64,uint64)[3])void\"",
      "defined_out": [
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)"
      ]
    },
    "185": {
      "op": "pushbytes 0x59664ab6 // method \"fixed_arr_ret()(uint64,uint64)[3]\"",
      "defined_out": [
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])"
      ]
    },
    "191": {
      "op": "pushbytes 0x125d1376 // method \"native_arr_arg((uint64,uint64)[])void\"",
      "defined_out": [
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(native_arr_arg((uint64,uint64)[])void)"
      ]
    },
    "197": {
      "op": "pushbytes 0x818e4a62 // method \"native_arr_ret()(uint64,uint64)[]\"",
      "defined_out": [
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])"
      ]
    },
    "203": {
      "op": "pushbytes 0x9bbe1032 // method \"log_it()void\"",
      "defined_out": [
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(log_it()void)",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(log_it()void)"
      ]
    },
    "209": {
      "op": "uncover 11",
      "stack_out": [
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(log_it()void)",
        "tmp%12#0"
      ]
    },
    "211": {
      "op": "match main_fixed_struct_arg_route@8 main_fixed_struct_ret_route@9 main_nested_struct_arg_route@10 main_nested_struct_ret_route@11 main_dynamic_struct_arg_route@12 main_dynamic_struct_ret_route@13 main_fixed_arr_arg_route@14 main_fixed_arr_ret_route@15 main_native_arr_arg_route@16 main_native_arr_ret_route@17 main_log_it_route@18",
      "stack_out": []
    },
    "235": {
      "op": "b main_switch_case_next@19"
    },
    "238": {
      "block": "main_switch_case_next@19",
      "stack_in": [],
      "op": "b main_after_if_else@21"
    },
    "241": {
      "block": "main_after_if_else@21",
      "stack_in": [],
      "op": "b main_after_if_else@23"
    },
    "244": {
      "block": "main_after_if_else@23",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "245": {
      "block": "main_log_it_route@18",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.log_it[routing]",
      "op": "callsub log_it"
    },
    "248": {
      "op": "b main_switch_case_next@19"
    },
    "251": {
      "block": "main_native_arr_ret_route@17",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret[routing]",
      "op": "callsub native_arr_ret"
    },
    "254": {
      "op": "b main_switch_case_next@19"
    },
    "257": {
      "block": "main_native_arr_arg_route@16",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg[routing]",
      "op": "callsub native_arr_arg"
    },
    "260": {
      "op": "b main_switch_case_next@19"
    },
    "263": {
      "block": "main_fixed_arr_ret_route@15",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret[routing]",
      "op": "callsub fixed_arr_ret"
    },
    "266": {
      "op": "b main_switch_case_next@19"
    },
    "269": {
      "block": "main_fixed_arr_arg_route@14",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg[routing]",
      "op": "callsub fixed_arr_arg"
    },
    "272": {
      "op": "b main_switch_case_next@19"
    },
    "275": {
      "block": "main_dynamic_struct_ret_route@13",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret[routing]",
      "op": "callsub dynamic_struct_ret"
    },
    "278": {
      "op": "b main_switch_case_next@19"
    },
    "281": {
      "block": "main_dynamic_struct_arg_route@12",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg[routing]",
      "op": "callsub dynamic_struct_arg"
    },
    "284": {
      "op": "b main_switch_case_next@19"
    },
    "287": {
      "block": "main_nested_struct_ret_route@11",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret[routing]",
      "op": "callsub nested_struct_ret"
    },
    "290": {
      "op": "b main_switch_case_next@19"
    },
    "293": {
      "block": "main_nested_struct_arg_route@10",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg[routing]",
      "op": "callsub nested_struct_arg"
    },
    "296": {
      "op": "b main_switch_case_next@19"
    },
    "299": {
      "block": "main_fixed_struct_ret_route@9",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret[routing]",
      "op": "callsub fixed_struct_ret"
    },
    "302": {
      "op": "b main_switch_case_next@19"
    },
    "305": {
      "block": "main_fixed_struct_arg_route@8",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg[routing]",
      "op": "callsub fixed_struct_arg"
    },
    "308": {
      "op": "b main_switch_case_next@19"
    },
    "311": {
      "block": "main_create_NoOp@20",
      "stack_in": [],
      "op": "b main_after_if_else@21"
    },
    "314": {
      "block": "main_delete_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "316": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "DeleteApplication"
      ]
    },
    "318": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "319": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "321": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0"
      ]
    },
    "322": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "323": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "324": {
      "error": "OnCompletion must be DeleteApplication && can only call when not creating",
      "op": "assert // OnCompletion must be DeleteApplication && can only call when not creating",
      "stack_out": []
    },
    "325": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.delete[routing]",
      "op": "callsub delete"
    },
    "328": {
      "op": "b main_switch_case_next@6"
    },
    "331": {
      "block": "main___algopy_default_create@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "333": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "NoOp"
      ]
    },
    "334": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "335": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "337": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "0"
      ]
    },
    "338": {
      "op": "==",
      "defined_out": [
        "tmp%14#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%16#0"
      ]
    },
    "339": {
      "op": "&&",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "340": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "341": {
      "op": "b main_block@25"
    },
    "344": {
      "block": "main_block@25",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__algopy_default_create@26"
    },
    "347": {
      "block": "main_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__algopy_default_create@26",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "348": {
      "op": "return",
      "stack_out": []
    },
    "349": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.delete[routing]",
      "params": {},
      "block": "delete",
      "stack_in": [],
      "op": "b delete_block@0"
    },
    "352": {
      "block": "delete_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.delete",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.delete"
    },
    "355": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "356": {
      "op": "return",
      "stack_out": []
    },
    "357": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg[routing]",
      "params": {},
      "block": "fixed_struct_arg",
      "stack_in": [],
      "op": "b fixed_struct_arg_block@0"
    },
    "360": {
      "block": "fixed_struct_arg_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "363": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "364": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "365": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "16"
      ]
    },
    "366": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "367": {
      "error": "invalid number of bytes for test_cases.mutable_native_types.abi_call.FixedStruct",
      "op": "assert // invalid number of bytes for test_cases.mutable_native_types.abi_call.FixedStruct",
      "defined_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "368": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg",
      "stack_out": []
    },
    "371": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "372": {
      "op": "return",
      "stack_out": []
    },
    "373": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret[routing]",
      "params": {},
      "block": "fixed_struct_ret",
      "stack_in": [],
      "op": "b fixed_struct_ret_block@0"
    },
    "376": {
      "block": "fixed_struct_ret_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "379": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "380": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "382": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "383": {
      "op": "log",
      "stack_out": []
    },
    "384": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "385": {
      "op": "return",
      "stack_out": []
    },
    "386": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg[routing]",
      "params": {},
      "block": "nested_struct_arg",
      "stack_in": [],
      "op": "b nested_struct_arg_block@0"
    },
    "389": {
      "block": "nested_struct_arg_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "392": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "393": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "394": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "24"
      ]
    },
    "396": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "397": {
      "error": "invalid number of bytes for test_cases.mutable_native_types.abi_call.NestedStruct",
      "op": "assert // invalid number of bytes for test_cases.mutable_native_types.abi_call.NestedStruct",
      "defined_out": [
        "as_Encoded((uint64,uint64),uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint64),uint64)%0#0"
      ]
    },
    "398": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg",
      "stack_out": []
    },
    "401": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "402": {
      "op": "return",
      "stack_out": []
    },
    "403": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret[routing]",
      "params": {},
      "block": "nested_struct_ret",
      "stack_in": [],
      "op": "b nested_struct_ret_block@0"
    },
    "406": {
      "block": "nested_struct_ret_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "409": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "410": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "412": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "413": {
      "op": "log",
      "stack_out": []
    },
    "414": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "415": {
      "op": "return",
      "stack_out": []
    },
    "416": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg[routing]",
      "params": {},
      "block": "dynamic_struct_arg",
      "stack_in": [],
      "op": "b dynamic_struct_arg_block@0"
    },
    "419": {
      "block": "dynamic_struct_arg_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "422": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "423": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "16"
      ]
    },
    "424": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0"
      ]
    },
    "425": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0",
        "22"
      ]
    },
    "427": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "428": {
      "error": "invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "429": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "430": {
      "op": "intc_2 // 16",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "16"
      ]
    },
    "431": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "432": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "434": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "435": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "18"
      ]
    },
    "437": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "438": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "440": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "442": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "444": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "445": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0"
      ]
    },
    "446": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0"
      ]
    },
    "447": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0",
        "1"
      ]
    },
    "448": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0"
      ]
    },
    "449": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "450": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "451": {
      "op": "pushint 22 // 22",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "22"
      ]
    },
    "453": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0"
      ]
    },
    "454": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "456": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%0#0 (copy)",
        "18"
      ]
    },
    "458": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%1#0",
        "extract_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "extract_uint16%1#0"
      ]
    },
    "459": {
      "op": "dig 1",
      "defined_out": [
        "add%1#0",
        "add%1#0 (copy)",
        "extract_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "extract_uint16%1#0",
        "add%1#0 (copy)"
      ]
    },
    "461": {
      "op": "==",
      "defined_out": [
        "add%1#0",
        "eq%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "eq%1#0"
      ]
    },
    "462": {
      "error": "invalid tail pointer at index 3 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))",
      "op": "assert // invalid tail pointer at index 3 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))",
      "stack_out": [
        "tmp%0#0",
        "add%1#0"
      ]
    },
    "463": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "465": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%0#0 (copy)",
        "18"
      ]
    },
    "467": {
      "op": "extract_uint16",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "468": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%2#0",
        "add%1#0"
      ]
    },
    "470": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%2#0",
        "add%1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "472": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "20",
        "add%1#0",
        "aggregate%extract_uint16%2#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%2#0",
        "add%1#0",
        "tmp%0#0 (copy)",
        "20"
      ]
    },
    "474": {
      "op": "extract_uint16",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%2#0",
        "add%1#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "475": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%2#0",
        "add%1#0",
        "aggregate%extract_uint16%3#0",
        "tmp%0#0 (copy)"
      ]
    },
    "477": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "aggregate%extract_uint16%3#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "479": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "481": {
      "op": "substring3",
      "defined_out": [
        "add%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%2#0"
      ]
    },
    "482": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%2#0",
        "0"
      ]
    },
    "483": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%1#0",
        "length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "length%1#0"
      ]
    },
    "484": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "length%1#0",
        "1"
      ]
    },
    "485": {
      "op": "*",
      "defined_out": [
        "add%1#0",
        "mul%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "mul%1#0"
      ]
    },
    "486": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "mul%1#0",
        "2"
      ]
    },
    "487": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "add%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "add%2#0"
      ]
    },
    "488": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%3#0"
      ]
    },
    "489": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%3#0",
        "tmp%0#0 (copy)"
      ]
    },
    "491": {
      "op": "pushint 20 // 20",
      "stack_out": [
        "tmp%0#0",
        "add%3#0",
        "tmp%0#0 (copy)",
        "20"
      ]
    },
    "493": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%3#0",
        "extract_uint16%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%3#0",
        "extract_uint16%2#0"
      ]
    },
    "494": {
      "op": "dig 1",
      "defined_out": [
        "add%3#0",
        "add%3#0 (copy)",
        "extract_uint16%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%3#0",
        "extract_uint16%2#0",
        "add%3#0 (copy)"
      ]
    },
    "496": {
      "op": "==",
      "defined_out": [
        "add%3#0",
        "eq%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%3#0",
        "eq%2#0"
      ]
    },
    "497": {
      "error": "invalid tail pointer at index 4 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))",
      "op": "assert // invalid tail pointer at index 4 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))",
      "stack_out": [
        "tmp%0#0",
        "add%3#0"
      ]
    },
    "498": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%3#0",
        "tmp%0#0 (copy)"
      ]
    },
    "500": {
      "op": "pushint 20 // 20",
      "stack_out": [
        "tmp%0#0",
        "add%3#0",
        "tmp%0#0 (copy)",
        "20"
      ]
    },
    "502": {
      "op": "extract_uint16",
      "defined_out": [
        "add%3#0",
        "aggregate%extract_uint16%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%3#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "503": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%4#0",
        "add%3#0"
      ]
    },
    "505": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%4#0",
        "add%3#0",
        "tmp%0#0 (copy)"
      ]
    },
    "507": {
      "op": "len",
      "defined_out": [
        "add%3#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%4#0",
        "add%3#0",
        "aggregate%len%0#0"
      ]
    },
    "508": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%0#0",
        "add%3#0"
      ]
    },
    "510": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%0#0",
        "add%3#0",
        "tmp%0#0 (copy)"
      ]
    },
    "512": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%len%0#0",
        "add%3#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "514": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "add%3#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%0#0"
      ]
    },
    "516": {
      "op": "substring3",
      "defined_out": [
        "add%3#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%3#0",
        "tmp%3#0"
      ]
    },
    "517": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "add%3#0",
        "tmp%3#0",
        "0"
      ]
    },
    "518": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%3#0",
        "length%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%3#0",
        "length%2#0"
      ]
    },
    "519": {
      "op": "intc_2 // 16",
      "stack_out": [
        "tmp%0#0",
        "add%3#0",
        "length%2#0",
        "16"
      ]
    },
    "520": {
      "op": "*",
      "defined_out": [
        "add%3#0",
        "mul%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%3#0",
        "mul%2#0"
      ]
    },
    "521": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%0#0",
        "add%3#0",
        "mul%2#0",
        "2"
      ]
    },
    "522": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "add%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%3#0",
        "add%4#0"
      ]
    },
    "523": {
      "op": "+",
      "defined_out": [
        "add%5#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0"
      ]
    },
    "524": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%0#0 (copy)"
      ]
    },
    "526": {
      "op": "len",
      "defined_out": [
        "add%5#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "len%0#0"
      ]
    },
    "527": {
      "op": "==",
      "defined_out": [
        "eq%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%3#0"
      ]
    },
    "528": {
      "error": "invalid number of bytes for test_cases.mutable_native_types.abi_call.DynamicStruct",
      "op": "assert // invalid number of bytes for test_cases.mutable_native_types.abi_call.DynamicStruct",
      "defined_out": [
        "as_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%0#0"
      ]
    },
    "529": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg",
      "stack_out": []
    },
    "532": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "533": {
      "op": "return",
      "stack_out": []
    },
    "534": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret[routing]",
      "params": {},
      "block": "dynamic_struct_ret",
      "stack_in": [],
      "op": "b dynamic_struct_ret_block@0"
    },
    "537": {
      "block": "dynamic_struct_ret_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "540": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "541": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "543": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "544": {
      "op": "log",
      "stack_out": []
    },
    "545": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "546": {
      "op": "return",
      "stack_out": []
    },
    "547": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg[routing]",
      "params": {},
      "block": "fixed_arr_arg",
      "stack_in": [],
      "op": "b fixed_arr_arg_block@0"
    },
    "550": {
      "block": "fixed_arr_arg_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "553": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "554": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "555": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "48"
      ]
    },
    "557": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "558": {
      "error": "invalid number of bytes for arc4.static_array<test_cases.mutable_native_types.abi_call.FixedStruct, 3>",
      "op": "assert // invalid number of bytes for arc4.static_array<test_cases.mutable_native_types.abi_call.FixedStruct, 3>",
      "defined_out": [
        "as_Encoded((uint64,uint64)[3])%0#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint64)[3])%0#0"
      ]
    },
    "559": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg",
      "stack_out": []
    },
    "562": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "563": {
      "op": "return",
      "stack_out": []
    },
    "564": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret[routing]",
      "params": {},
      "block": "fixed_arr_ret",
      "stack_in": [],
      "op": "b fixed_arr_ret_block@0"
    },
    "567": {
      "block": "fixed_arr_ret_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "570": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "571": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "573": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "574": {
      "op": "log",
      "stack_out": []
    },
    "575": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "576": {
      "op": "return",
      "stack_out": []
    },
    "577": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg[routing]",
      "params": {},
      "block": "native_arr_arg",
      "stack_in": [],
      "op": "b native_arr_arg_block@0"
    },
    "580": {
      "block": "native_arr_arg_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "583": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "584": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "585": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0"
      ]
    },
    "586": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0",
        "16"
      ]
    },
    "587": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0"
      ]
    },
    "588": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "589": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "590": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "592": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "593": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "594": {
      "error": "invalid number of bytes for arc4.dynamic_array<test_cases.mutable_native_types.abi_call.FixedStruct>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<test_cases.mutable_native_types.abi_call.FixedStruct>",
      "defined_out": [
        "as_Encoded(len+(uint64,uint64)[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint64)[])%0#0"
      ]
    },
    "595": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg",
      "stack_out": []
    },
    "598": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "599": {
      "op": "return",
      "stack_out": []
    },
    "600": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret[routing]",
      "params": {},
      "block": "native_arr_ret",
      "stack_in": [],
      "op": "b native_arr_ret_block@0"
    },
    "603": {
      "block": "native_arr_ret_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "606": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "607": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "609": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "610": {
      "op": "log",
      "stack_out": []
    },
    "611": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "612": {
      "op": "return",
      "stack_out": []
    },
    "613": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.log_it[routing]",
      "params": {},
      "block": "log_it",
      "stack_in": [],
      "op": "b log_it_block@0"
    },
    "616": {
      "block": "log_it_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.log_it",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.log_it"
    },
    "619": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "620": {
      "op": "return",
      "stack_out": []
    },
    "621": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "624": {
      "block": "__init___block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "625": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.delete",
      "params": {},
      "block": "test_cases.mutable_native_types.abi_call.CallMe.delete",
      "stack_in": [],
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.delete_block@0"
    },
    "628": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.delete_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "629": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg",
      "params": {
        "arg#0": "bytes"
      },
      "block": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "632": {
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg_block@0"
    },
    "635": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg_block@0",
      "stack_in": [],
      "op": "bytec_1 // \"fixed_struct\"",
      "defined_out": [
        "\"fixed_struct\""
      ],
      "stack_out": [
        "\"fixed_struct\""
      ]
    },
    "636": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"fixed_struct\"",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "\"fixed_struct\"",
        "arg#0 (copy)"
      ]
    },
    "638": {
      "op": "app_global_put",
      "stack_out": []
    },
    "639": {
      "retsub": true,
      "op": "retsub"
    },
    "640": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret",
      "params": {},
      "block": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret",
      "stack_in": [],
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret_block@0"
    },
    "643": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "644": {
      "op": "bytec_1 // \"fixed_struct\"",
      "defined_out": [
        "\"fixed_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_struct\""
      ]
    },
    "645": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "646": {
      "error": "check self.fixed_struct exists",
      "op": "assert // check self.fixed_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "647": {
      "retsub": true,
      "op": "retsub"
    },
    "648": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg",
      "params": {
        "arg#0": "bytes"
      },
      "block": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "651": {
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg_block@0"
    },
    "654": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg_block@0",
      "stack_in": [],
      "op": "bytec_2 // \"nested_struct\"",
      "defined_out": [
        "\"nested_struct\""
      ],
      "stack_out": [
        "\"nested_struct\""
      ]
    },
    "655": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"nested_struct\"",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "\"nested_struct\"",
        "arg#0 (copy)"
      ]
    },
    "657": {
      "op": "app_global_put",
      "stack_out": []
    },
    "658": {
      "retsub": true,
      "op": "retsub"
    },
    "659": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret",
      "params": {},
      "block": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret",
      "stack_in": [],
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret_block@0"
    },
    "662": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "663": {
      "op": "bytec_2 // \"nested_struct\"",
      "defined_out": [
        "\"nested_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested_struct\""
      ]
    },
    "664": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "665": {
      "error": "check self.nested_struct exists",
      "op": "assert // check self.nested_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "666": {
      "retsub": true,
      "op": "retsub"
    },
    "667": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg",
      "params": {
        "arg#0": "bytes"
      },
      "block": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "670": {
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg_block@0"
    },
    "673": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg_block@0",
      "stack_in": [],
      "op": "bytec_3 // \"dynamic_struct\"",
      "defined_out": [
        "\"dynamic_struct\""
      ],
      "stack_out": [
        "\"dynamic_struct\""
      ]
    },
    "674": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"dynamic_struct\"",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "\"dynamic_struct\"",
        "arg#0 (copy)"
      ]
    },
    "676": {
      "op": "app_global_put",
      "stack_out": []
    },
    "677": {
      "retsub": true,
      "op": "retsub"
    },
    "678": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret",
      "params": {},
      "block": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret",
      "stack_in": [],
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret_block@0"
    },
    "681": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "682": {
      "op": "bytec_3 // \"dynamic_struct\"",
      "defined_out": [
        "\"dynamic_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"dynamic_struct\""
      ]
    },
    "683": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "684": {
      "error": "check self.dynamic_struct exists",
      "op": "assert // check self.dynamic_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "685": {
      "retsub": true,
      "op": "retsub"
    },
    "686": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg",
      "params": {
        "arg#0": "bytes"
      },
      "block": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "689": {
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg_block@0"
    },
    "692": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg_block@0",
      "stack_in": [],
      "op": "bytec 4 // \"fixed_arr\"",
      "defined_out": [
        "\"fixed_arr\""
      ],
      "stack_out": [
        "\"fixed_arr\""
      ]
    },
    "694": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"fixed_arr\"",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "\"fixed_arr\"",
        "arg#0 (copy)"
      ]
    },
    "696": {
      "op": "app_global_put",
      "stack_out": []
    },
    "697": {
      "retsub": true,
      "op": "retsub"
    },
    "698": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret",
      "params": {},
      "block": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret",
      "stack_in": [],
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret_block@0"
    },
    "701": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "702": {
      "op": "bytec 4 // \"fixed_arr\"",
      "defined_out": [
        "\"fixed_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_arr\""
      ]
    },
    "704": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "705": {
      "error": "check self.fixed_arr exists",
      "op": "assert // check self.fixed_arr exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "706": {
      "retsub": true,
      "op": "retsub"
    },
    "707": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg",
      "params": {
        "arg#0": "bytes"
      },
      "block": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "710": {
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg_block@0"
    },
    "713": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg_block@0",
      "stack_in": [],
      "op": "bytec 5 // \"native_arr\"",
      "defined_out": [
        "\"native_arr\""
      ],
      "stack_out": [
        "\"native_arr\""
      ]
    },
    "715": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"native_arr\"",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "\"native_arr\"",
        "arg#0 (copy)"
      ]
    },
    "717": {
      "op": "app_global_put",
      "stack_out": []
    },
    "718": {
      "retsub": true,
      "op": "retsub"
    },
    "719": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret",
      "params": {},
      "block": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret",
      "stack_in": [],
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret_block@0"
    },
    "722": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "723": {
      "op": "bytec 5 // \"native_arr\"",
      "defined_out": [
        "\"native_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"native_arr\""
      ]
    },
    "725": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "726": {
      "error": "check self.native_arr exists",
      "op": "assert // check self.native_arr exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "727": {
      "retsub": true,
      "op": "retsub"
    },
    "728": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.log_it",
      "params": {},
      "block": "test_cases.mutable_native_types.abi_call.CallMe.log_it",
      "stack_in": [],
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.log_it_block@0"
    },
    "731": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.log_it_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "732": {
      "op": "bytec_1 // \"fixed_struct\"",
      "defined_out": [
        "\"fixed_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_struct\""
      ]
    },
    "733": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "734": {
      "error": "check self.fixed_struct exists",
      "op": "assert // check self.fixed_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "735": {
      "op": "log",
      "stack_out": []
    },
    "736": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "737": {
      "op": "bytec_2 // \"nested_struct\"",
      "defined_out": [
        "\"nested_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested_struct\""
      ]
    },
    "738": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "739": {
      "error": "check self.nested_struct exists",
      "op": "assert // check self.nested_struct exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "740": {
      "op": "log",
      "stack_out": []
    },
    "741": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "742": {
      "op": "bytec_3 // \"dynamic_struct\"",
      "defined_out": [
        "\"dynamic_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"dynamic_struct\""
      ]
    },
    "743": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "744": {
      "error": "check self.dynamic_struct exists",
      "op": "assert // check self.dynamic_struct exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "745": {
      "op": "log",
      "stack_out": []
    },
    "746": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "747": {
      "op": "bytec 4 // \"fixed_arr\"",
      "defined_out": [
        "\"fixed_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_arr\""
      ]
    },
    "749": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "750": {
      "error": "check self.fixed_arr exists",
      "op": "assert // check self.fixed_arr exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "751": {
      "op": "log",
      "stack_out": []
    },
    "752": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "753": {
      "op": "bytec 5 // \"native_arr\"",
      "defined_out": [
        "\"native_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"native_arr\""
      ]
    },
    "755": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "756": {
      "error": "check self.native_arr exists",
      "op": "assert // check self.native_arr exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "757": {
      "op": "log",
      "stack_out": []
    },
    "758": {
      "retsub": true,
      "op": "retsub"
    }
  }
}