{
  "version": 3,
  "sources": [
    "../abi_call.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDK;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;;;;;;;;AAxCL;;;;;;AAEQ;AAAA;;AAAA;;;;;AAIO;AAAA;AAAA;AAAA;AAAP;AAER;;;;;;AAEQ;AAAA;;AAAA;;;;;AAIO;AAAA;AAAA;AAAA;AAAP;AAER;;;;;;AAEQ;AAAA;;AAAA;;;;;AAIO;AAAA;AAAA;AAAA;AAAP;AAER;;;;;;AAEQ;;AAAA;;AAAA;;;;;AAIO;AAAA;;AAAA;AAAA;AAAP;AAER;;;;;;AAEQ;;AAAA;;AAAA;;;;;AAIO;AAAA;;AAAA;AAAA;AAAP;;;;AAII;AAAA;AAAA;AAAA;AAAJ;AACI;AAAA;AAAA;AAAA;AAAJ;AACI;AAAA;AAAA;AAAA;AAAJ;AACI;AAAA;;AAAA;AAAA;AAAJ;AACI;AAAA;;AAAA;AAAA;AAAJ;;;;;;;;AA1DR;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AAAA;AAoDK;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;;;;AAJA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x151f7c75 \"fixed_struct\" \"nested_struct\" \"dynamic_struct\" \"fixed_arr\" \"native_arr\""
    },
    "75": {
      "op": "b main_block@0"
    },
    "78": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "80": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "83": {
      "op": "b main_call___init__@1"
    },
    "86": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.__init__",
      "op": "callsub __init__"
    },
    "89": {
      "op": "b main_after_if_else@2"
    },
    "92": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "95": {
      "op": "return",
      "stack_out": []
    },
    "96": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.delete[routing]",
      "params": {},
      "block": "delete",
      "stack_in": [],
      "op": "b delete_block@0"
    },
    "99": {
      "block": "delete_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.delete",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.delete"
    },
    "102": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "103": {
      "op": "return",
      "stack_out": []
    },
    "104": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg[routing]",
      "params": {},
      "block": "fixed_struct_arg",
      "stack_in": [],
      "op": "b fixed_struct_arg_block@0"
    },
    "107": {
      "block": "fixed_struct_arg_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "110": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg",
      "stack_out": []
    },
    "113": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "114": {
      "op": "return",
      "stack_out": []
    },
    "115": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret[routing]",
      "params": {},
      "block": "fixed_struct_ret",
      "stack_in": [],
      "op": "b fixed_struct_ret_block@0"
    },
    "118": {
      "block": "fixed_struct_ret_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "121": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "122": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "124": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "125": {
      "op": "log",
      "stack_out": []
    },
    "126": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "127": {
      "op": "return",
      "stack_out": []
    },
    "128": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg[routing]",
      "params": {},
      "block": "nested_struct_arg",
      "stack_in": [],
      "op": "b nested_struct_arg_block@0"
    },
    "131": {
      "block": "nested_struct_arg_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint64),uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64),uint64)%0#0"
      ]
    },
    "134": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg",
      "stack_out": []
    },
    "137": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "138": {
      "op": "return",
      "stack_out": []
    },
    "139": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret[routing]",
      "params": {},
      "block": "nested_struct_ret",
      "stack_in": [],
      "op": "b nested_struct_ret_block@0"
    },
    "142": {
      "block": "nested_struct_ret_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "145": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "146": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "148": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "149": {
      "op": "log",
      "stack_out": []
    },
    "150": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "151": {
      "op": "return",
      "stack_out": []
    },
    "152": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg[routing]",
      "params": {},
      "block": "dynamic_struct_arg",
      "stack_in": [],
      "op": "b dynamic_struct_arg_block@0"
    },
    "155": {
      "block": "dynamic_struct_arg_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%0#0"
      ]
    },
    "158": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg",
      "stack_out": []
    },
    "161": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "162": {
      "op": "return",
      "stack_out": []
    },
    "163": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret[routing]",
      "params": {},
      "block": "dynamic_struct_ret",
      "stack_in": [],
      "op": "b dynamic_struct_ret_block@0"
    },
    "166": {
      "block": "dynamic_struct_ret_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "169": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "170": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "172": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "173": {
      "op": "log",
      "stack_out": []
    },
    "174": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "175": {
      "op": "return",
      "stack_out": []
    },
    "176": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg[routing]",
      "params": {},
      "block": "fixed_arr_arg",
      "stack_in": [],
      "op": "b fixed_arr_arg_block@0"
    },
    "179": {
      "block": "fixed_arr_arg_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint64)[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64)[3])%0#0"
      ]
    },
    "182": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg",
      "stack_out": []
    },
    "185": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "186": {
      "op": "return",
      "stack_out": []
    },
    "187": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret[routing]",
      "params": {},
      "block": "fixed_arr_ret",
      "stack_in": [],
      "op": "b fixed_arr_ret_block@0"
    },
    "190": {
      "block": "fixed_arr_ret_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "193": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "194": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "196": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "197": {
      "op": "log",
      "stack_out": []
    },
    "198": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "199": {
      "op": "return",
      "stack_out": []
    },
    "200": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg[routing]",
      "params": {},
      "block": "native_arr_arg",
      "stack_in": [],
      "op": "b native_arr_arg_block@0"
    },
    "203": {
      "block": "native_arr_arg_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint64)[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint64)[])%0#0"
      ]
    },
    "206": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg",
      "stack_out": []
    },
    "209": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "210": {
      "op": "return",
      "stack_out": []
    },
    "211": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret[routing]",
      "params": {},
      "block": "native_arr_ret",
      "stack_in": [],
      "op": "b native_arr_ret_block@0"
    },
    "214": {
      "block": "native_arr_ret_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "217": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "218": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "220": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "221": {
      "op": "log",
      "stack_out": []
    },
    "222": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "223": {
      "op": "return",
      "stack_out": []
    },
    "224": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.log_it[routing]",
      "params": {},
      "block": "log_it",
      "stack_in": [],
      "op": "b log_it_block@0"
    },
    "227": {
      "block": "log_it_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.log_it",
      "op": "callsub test_cases.mutable_native_types.abi_call.CallMe.log_it"
    },
    "230": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "231": {
      "op": "return",
      "stack_out": []
    },
    "232": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "235": {
      "block": "__init___block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "236": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.delete",
      "params": {},
      "block": "test_cases.mutable_native_types.abi_call.CallMe.delete",
      "stack_in": [],
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.delete_block@0"
    },
    "239": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.delete_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "240": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg",
      "params": {
        "arg#0": "bytes"
      },
      "block": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "243": {
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg_block@0"
    },
    "246": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg_block@0",
      "stack_in": [],
      "op": "bytec_1 // \"fixed_struct\"",
      "defined_out": [
        "\"fixed_struct\""
      ],
      "stack_out": [
        "\"fixed_struct\""
      ]
    },
    "247": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"fixed_struct\"",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "\"fixed_struct\"",
        "arg#0 (copy)"
      ]
    },
    "249": {
      "op": "app_global_put",
      "stack_out": []
    },
    "250": {
      "retsub": true,
      "op": "retsub"
    },
    "251": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret",
      "params": {},
      "block": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret",
      "stack_in": [],
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret_block@0"
    },
    "254": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "255": {
      "op": "bytec_1 // \"fixed_struct\"",
      "defined_out": [
        "\"fixed_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_struct\""
      ]
    },
    "256": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "257": {
      "error": "check self.fixed_struct exists",
      "op": "assert // check self.fixed_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "258": {
      "retsub": true,
      "op": "retsub"
    },
    "259": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg",
      "params": {
        "arg#0": "bytes"
      },
      "block": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "262": {
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg_block@0"
    },
    "265": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg_block@0",
      "stack_in": [],
      "op": "bytec_2 // \"nested_struct\"",
      "defined_out": [
        "\"nested_struct\""
      ],
      "stack_out": [
        "\"nested_struct\""
      ]
    },
    "266": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"nested_struct\"",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "\"nested_struct\"",
        "arg#0 (copy)"
      ]
    },
    "268": {
      "op": "app_global_put",
      "stack_out": []
    },
    "269": {
      "retsub": true,
      "op": "retsub"
    },
    "270": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret",
      "params": {},
      "block": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret",
      "stack_in": [],
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret_block@0"
    },
    "273": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "274": {
      "op": "bytec_2 // \"nested_struct\"",
      "defined_out": [
        "\"nested_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested_struct\""
      ]
    },
    "275": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "276": {
      "error": "check self.nested_struct exists",
      "op": "assert // check self.nested_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "277": {
      "retsub": true,
      "op": "retsub"
    },
    "278": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg",
      "params": {
        "arg#0": "bytes"
      },
      "block": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "281": {
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg_block@0"
    },
    "284": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg_block@0",
      "stack_in": [],
      "op": "bytec_3 // \"dynamic_struct\"",
      "defined_out": [
        "\"dynamic_struct\""
      ],
      "stack_out": [
        "\"dynamic_struct\""
      ]
    },
    "285": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"dynamic_struct\"",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "\"dynamic_struct\"",
        "arg#0 (copy)"
      ]
    },
    "287": {
      "op": "app_global_put",
      "stack_out": []
    },
    "288": {
      "retsub": true,
      "op": "retsub"
    },
    "289": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret",
      "params": {},
      "block": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret",
      "stack_in": [],
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret_block@0"
    },
    "292": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "293": {
      "op": "bytec_3 // \"dynamic_struct\"",
      "defined_out": [
        "\"dynamic_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"dynamic_struct\""
      ]
    },
    "294": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "295": {
      "error": "check self.dynamic_struct exists",
      "op": "assert // check self.dynamic_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "296": {
      "retsub": true,
      "op": "retsub"
    },
    "297": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg",
      "params": {
        "arg#0": "bytes"
      },
      "block": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "300": {
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg_block@0"
    },
    "303": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg_block@0",
      "stack_in": [],
      "op": "bytec 4 // \"fixed_arr\"",
      "defined_out": [
        "\"fixed_arr\""
      ],
      "stack_out": [
        "\"fixed_arr\""
      ]
    },
    "305": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"fixed_arr\"",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "\"fixed_arr\"",
        "arg#0 (copy)"
      ]
    },
    "307": {
      "op": "app_global_put",
      "stack_out": []
    },
    "308": {
      "retsub": true,
      "op": "retsub"
    },
    "309": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret",
      "params": {},
      "block": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret",
      "stack_in": [],
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret_block@0"
    },
    "312": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "313": {
      "op": "bytec 4 // \"fixed_arr\"",
      "defined_out": [
        "\"fixed_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_arr\""
      ]
    },
    "315": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "316": {
      "error": "check self.fixed_arr exists",
      "op": "assert // check self.fixed_arr exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "317": {
      "retsub": true,
      "op": "retsub"
    },
    "318": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg",
      "params": {
        "arg#0": "bytes"
      },
      "block": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "321": {
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg_block@0"
    },
    "324": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg_block@0",
      "stack_in": [],
      "op": "bytec 5 // \"native_arr\"",
      "defined_out": [
        "\"native_arr\""
      ],
      "stack_out": [
        "\"native_arr\""
      ]
    },
    "326": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"native_arr\"",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "\"native_arr\"",
        "arg#0 (copy)"
      ]
    },
    "328": {
      "op": "app_global_put",
      "stack_out": []
    },
    "329": {
      "retsub": true,
      "op": "retsub"
    },
    "330": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret",
      "params": {},
      "block": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret",
      "stack_in": [],
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret_block@0"
    },
    "333": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "334": {
      "op": "bytec 5 // \"native_arr\"",
      "defined_out": [
        "\"native_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"native_arr\""
      ]
    },
    "336": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "337": {
      "error": "check self.native_arr exists",
      "op": "assert // check self.native_arr exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "338": {
      "retsub": true,
      "op": "retsub"
    },
    "339": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.log_it",
      "params": {},
      "block": "test_cases.mutable_native_types.abi_call.CallMe.log_it",
      "stack_in": [],
      "op": "b test_cases.mutable_native_types.abi_call.CallMe.log_it_block@0"
    },
    "342": {
      "block": "test_cases.mutable_native_types.abi_call.CallMe.log_it_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "343": {
      "op": "bytec_1 // \"fixed_struct\"",
      "defined_out": [
        "\"fixed_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_struct\""
      ]
    },
    "344": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "345": {
      "error": "check self.fixed_struct exists",
      "op": "assert // check self.fixed_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "346": {
      "op": "log",
      "stack_out": []
    },
    "347": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "348": {
      "op": "bytec_2 // \"nested_struct\"",
      "defined_out": [
        "\"nested_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested_struct\""
      ]
    },
    "349": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "350": {
      "error": "check self.nested_struct exists",
      "op": "assert // check self.nested_struct exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "351": {
      "op": "log",
      "stack_out": []
    },
    "352": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "353": {
      "op": "bytec_3 // \"dynamic_struct\"",
      "defined_out": [
        "\"dynamic_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"dynamic_struct\""
      ]
    },
    "354": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "355": {
      "error": "check self.dynamic_struct exists",
      "op": "assert // check self.dynamic_struct exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "356": {
      "op": "log",
      "stack_out": []
    },
    "357": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "358": {
      "op": "bytec 4 // \"fixed_arr\"",
      "defined_out": [
        "\"fixed_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_arr\""
      ]
    },
    "360": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "361": {
      "error": "check self.fixed_arr exists",
      "op": "assert // check self.fixed_arr exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "362": {
      "op": "log",
      "stack_out": []
    },
    "363": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "364": {
      "op": "bytec 5 // \"native_arr\"",
      "defined_out": [
        "\"native_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"native_arr\""
      ]
    },
    "366": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "367": {
      "error": "check self.native_arr exists",
      "op": "assert // check self.native_arr exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "368": {
      "op": "log",
      "stack_out": []
    },
    "369": {
      "retsub": true,
      "op": "retsub"
    },
    "370": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program",
      "stack_in": [],
      "op": "b approval_program_block@0"
    },
    "373": {
      "block": "approval_program_block@0",
      "stack_in": [],
      "op": "b approval_program_block@1"
    },
    "376": {
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "378": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "379": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "380": {
      "op": "bz approval_program___algopy_default_create@22",
      "stack_out": []
    },
    "383": {
      "op": "b approval_program_abi_routing@2"
    },
    "386": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "389": {
      "op": "pushbytes 0x24378d3c // method \"delete()void\"",
      "defined_out": [
        "Method(delete()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(delete()void)"
      ]
    },
    "395": {
      "op": "uncover 1",
      "stack_out": [
        "Method(delete()void)",
        "tmp%2#0"
      ]
    },
    "397": {
      "op": "match approval_program_delete_route@3",
      "stack_out": []
    },
    "401": {
      "op": "b approval_program_switch_case_default@4"
    },
    "404": {
      "block": "approval_program_switch_case_default@4",
      "stack_in": [],
      "op": "b approval_program_switch_case_next@5"
    },
    "407": {
      "block": "approval_program_switch_case_next@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "409": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "410": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "411": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "412": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "414": {
      "op": "bz approval_program_create_NoOp@20",
      "stack_out": []
    },
    "417": {
      "op": "b approval_program_call_NoOp@6"
    },
    "420": {
      "block": "approval_program_call_NoOp@6",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "423": {
      "op": "pushbytes 0x11b19b95 // method \"fixed_struct_arg((uint64,uint64))void\"",
      "defined_out": [
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(fixed_struct_arg((uint64,uint64))void)"
      ]
    },
    "429": {
      "op": "pushbytes 0xd28b964a // method \"fixed_struct_ret()(uint64,uint64)\"",
      "defined_out": [
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))"
      ]
    },
    "435": {
      "op": "pushbytes 0xea18655f // method \"nested_struct_arg(((uint64,uint64),uint64))void\"",
      "defined_out": [
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)"
      ]
    },
    "441": {
      "op": "pushbytes 0xbb3bfdb7 // method \"nested_struct_ret()((uint64,uint64),uint64)\"",
      "defined_out": [
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))"
      ]
    },
    "447": {
      "op": "pushbytes 0x46ec14a0 // method \"dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void\"",
      "defined_out": [
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)"
      ]
    },
    "453": {
      "op": "pushbytes 0x9b4d0926 // method \"dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])\"",
      "defined_out": [
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))"
      ]
    },
    "459": {
      "op": "pushbytes 0x4f0deb50 // method \"fixed_arr_arg((uint64,uint64)[3])void\"",
      "defined_out": [
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)"
      ]
    },
    "465": {
      "op": "pushbytes 0x59664ab6 // method \"fixed_arr_ret()(uint64,uint64)[3]\"",
      "defined_out": [
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])"
      ]
    },
    "471": {
      "op": "pushbytes 0x125d1376 // method \"native_arr_arg((uint64,uint64)[])void\"",
      "defined_out": [
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(native_arr_arg((uint64,uint64)[])void)"
      ]
    },
    "477": {
      "op": "pushbytes 0x818e4a62 // method \"native_arr_ret()(uint64,uint64)[]\"",
      "defined_out": [
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])"
      ]
    },
    "483": {
      "op": "pushbytes 0x9bbe1032 // method \"log_it()void\"",
      "defined_out": [
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(log_it()void)",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(log_it()void)"
      ]
    },
    "489": {
      "op": "uncover 11",
      "stack_out": [
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(log_it()void)",
        "tmp%11#0"
      ]
    },
    "491": {
      "op": "match approval_program_fixed_struct_arg_route@7 approval_program_fixed_struct_ret_route@8 approval_program_nested_struct_arg_route@9 approval_program_nested_struct_ret_route@10 approval_program_dynamic_struct_arg_route@11 approval_program_dynamic_struct_ret_route@12 approval_program_fixed_arr_arg_route@13 approval_program_fixed_arr_ret_route@14 approval_program_native_arr_arg_route@15 approval_program_native_arr_ret_route@16 approval_program_log_it_route@17",
      "stack_out": []
    },
    "515": {
      "op": "b approval_program_switch_case_default@18"
    },
    "518": {
      "block": "approval_program_switch_case_default@18",
      "stack_in": [],
      "op": "b approval_program_switch_case_next@19"
    },
    "521": {
      "block": "approval_program_switch_case_next@19",
      "stack_in": [],
      "op": "b approval_program_after_if_else@21"
    },
    "524": {
      "block": "approval_program_after_if_else@21",
      "stack_in": [],
      "op": "b approval_program_after_if_else@25"
    },
    "527": {
      "block": "approval_program_after_if_else@25",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "528": {
      "block": "approval_program_log_it_route@17",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.log_it[routing]",
      "op": "callsub log_it"
    },
    "531": {
      "op": "b approval_program_switch_case_next@19"
    },
    "534": {
      "block": "approval_program_native_arr_ret_route@16",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret[routing]",
      "op": "callsub native_arr_ret"
    },
    "537": {
      "op": "b approval_program_switch_case_next@19"
    },
    "540": {
      "block": "approval_program_native_arr_arg_route@15",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg[routing]",
      "op": "callsub native_arr_arg"
    },
    "543": {
      "op": "b approval_program_switch_case_next@19"
    },
    "546": {
      "block": "approval_program_fixed_arr_ret_route@14",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret[routing]",
      "op": "callsub fixed_arr_ret"
    },
    "549": {
      "op": "b approval_program_switch_case_next@19"
    },
    "552": {
      "block": "approval_program_fixed_arr_arg_route@13",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg[routing]",
      "op": "callsub fixed_arr_arg"
    },
    "555": {
      "op": "b approval_program_switch_case_next@19"
    },
    "558": {
      "block": "approval_program_dynamic_struct_ret_route@12",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret[routing]",
      "op": "callsub dynamic_struct_ret"
    },
    "561": {
      "op": "b approval_program_switch_case_next@19"
    },
    "564": {
      "block": "approval_program_dynamic_struct_arg_route@11",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg[routing]",
      "op": "callsub dynamic_struct_arg"
    },
    "567": {
      "op": "b approval_program_switch_case_next@19"
    },
    "570": {
      "block": "approval_program_nested_struct_ret_route@10",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret[routing]",
      "op": "callsub nested_struct_ret"
    },
    "573": {
      "op": "b approval_program_switch_case_next@19"
    },
    "576": {
      "block": "approval_program_nested_struct_arg_route@9",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg[routing]",
      "op": "callsub nested_struct_arg"
    },
    "579": {
      "op": "b approval_program_switch_case_next@19"
    },
    "582": {
      "block": "approval_program_fixed_struct_ret_route@8",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret[routing]",
      "op": "callsub fixed_struct_ret"
    },
    "585": {
      "op": "b approval_program_switch_case_next@19"
    },
    "588": {
      "block": "approval_program_fixed_struct_arg_route@7",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg[routing]",
      "op": "callsub fixed_struct_arg"
    },
    "591": {
      "op": "b approval_program_switch_case_next@19"
    },
    "594": {
      "block": "approval_program_create_NoOp@20",
      "stack_in": [],
      "op": "b approval_program_after_if_else@21"
    },
    "597": {
      "block": "approval_program_delete_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "599": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "DeleteApplication"
      ]
    },
    "601": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "602": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "604": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0"
      ]
    },
    "605": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "606": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "607": {
      "error": "OnCompletion must be DeleteApplication && can only call when not creating",
      "op": "assert // OnCompletion must be DeleteApplication && can only call when not creating",
      "stack_out": []
    },
    "608": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.delete[routing]",
      "op": "callsub delete"
    },
    "611": {
      "op": "b approval_program_switch_case_next@5"
    },
    "614": {
      "block": "approval_program___algopy_default_create@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "616": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "NoOp"
      ]
    },
    "617": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "618": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "620": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "0"
      ]
    },
    "621": {
      "op": "==",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "622": {
      "op": "&&",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "623": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "624": {
      "op": "b approval_program_block@23"
    },
    "627": {
      "block": "approval_program_block@23",
      "stack_in": [],
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__algopy_default_create@24"
    },
    "630": {
      "block": "approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__algopy_default_create@24",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "631": {
      "op": "return",
      "stack_out": []
    }
  }
}