{
  "version": 3,
  "sources": [
    "../abi_call.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;;;;;;AAEQ;AAAA;;AAAA;;;;;AAIO;AAAA;AAAA;AAAA;AAAP;AAER;;;;;;AAEQ;AAAA;;AAAA;;;;;AAIO;AAAA;AAAA;AAAA;AAAP;AAER;;;;;;AAEQ;AAAA;;AAAA;;;;;AAIO;AAAA;AAAA;AAAA;AAAP;AAER;;;;;;AAEQ;;AAAA;;AAAA;;;;;AAIO;AAAA;;AAAA;AAAA;AAAP;AAER;;;;;;AAEQ;;AAAA;;AAAA;;;;;AAIO;AAAA;;AAAA;AAAA;AAAP;;;;AAII;AAAA;AAAA;AAAA;AAAJ;AACI;AAAA;AAAA;AAAA;AAAJ;AACI;AAAA;AAAA;AAAA;AAAJ;AACI;AAAA;;AAAA;AAAA;AAAJ;AACI;AAAA;;AAAA;AAAA;AAAJ;;;;;;;;;;;;;AA1DR;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AAAA;;;;;;;;;;;AAoDK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA5CL;;;AA4CK;;;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AApCL;;;AAoCK;;;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA5BL;;;AA4BK;;;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AApBL;;;AAoBK;;;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAZL;;;AAYK;;;AAAA;;;;;;AAJA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;AARL;;AAAA;AAAA;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x151f7c75 \"fixed_struct\" \"nested_struct\" \"dynamic_struct\" \"fixed_arr\" \"native_arr\""
    },
    "75": {
      "op": "b main_block@0"
    },
    "78": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "80": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "83": {
      "op": "b main_call___init__@1"
    },
    "86": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.__init__",
      "op": "callsub __init__"
    },
    "89": {
      "op": "b main_after_if_else@2"
    },
    "92": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "95": {
      "op": "return",
      "stack_out": []
    },
    "96": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "99": {
      "block": "__init___block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "100": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.delete",
      "params": {},
      "block": "delete",
      "stack_in": [],
      "op": "b delete_block@0"
    },
    "103": {
      "block": "delete_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "104": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg",
      "params": {
        "arg#0": "bytes"
      },
      "block": "fixed_struct_arg",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "107": {
      "op": "b fixed_struct_arg_block@0"
    },
    "110": {
      "block": "fixed_struct_arg_block@0",
      "stack_in": [],
      "op": "bytec_1 // \"fixed_struct\"",
      "defined_out": [
        "\"fixed_struct\""
      ],
      "stack_out": [
        "\"fixed_struct\""
      ]
    },
    "111": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"fixed_struct\"",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "\"fixed_struct\"",
        "arg#0 (copy)"
      ]
    },
    "113": {
      "op": "app_global_put",
      "stack_out": []
    },
    "114": {
      "retsub": true,
      "op": "retsub"
    },
    "115": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret",
      "params": {},
      "block": "fixed_struct_ret",
      "stack_in": [],
      "op": "b fixed_struct_ret_block@0"
    },
    "118": {
      "block": "fixed_struct_ret_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "119": {
      "op": "bytec_1 // \"fixed_struct\"",
      "defined_out": [
        "\"fixed_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_struct\""
      ]
    },
    "120": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "121": {
      "error": "check self.fixed_struct exists",
      "op": "assert // check self.fixed_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "122": {
      "retsub": true,
      "op": "retsub"
    },
    "123": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg",
      "params": {
        "arg#0": "bytes"
      },
      "block": "nested_struct_arg",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "126": {
      "op": "b nested_struct_arg_block@0"
    },
    "129": {
      "block": "nested_struct_arg_block@0",
      "stack_in": [],
      "op": "bytec_2 // \"nested_struct\"",
      "defined_out": [
        "\"nested_struct\""
      ],
      "stack_out": [
        "\"nested_struct\""
      ]
    },
    "130": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"nested_struct\"",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "\"nested_struct\"",
        "arg#0 (copy)"
      ]
    },
    "132": {
      "op": "app_global_put",
      "stack_out": []
    },
    "133": {
      "retsub": true,
      "op": "retsub"
    },
    "134": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret",
      "params": {},
      "block": "nested_struct_ret",
      "stack_in": [],
      "op": "b nested_struct_ret_block@0"
    },
    "137": {
      "block": "nested_struct_ret_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "138": {
      "op": "bytec_2 // \"nested_struct\"",
      "defined_out": [
        "\"nested_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested_struct\""
      ]
    },
    "139": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "140": {
      "error": "check self.nested_struct exists",
      "op": "assert // check self.nested_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "141": {
      "retsub": true,
      "op": "retsub"
    },
    "142": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg",
      "params": {
        "arg#0": "bytes"
      },
      "block": "dynamic_struct_arg",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "145": {
      "op": "b dynamic_struct_arg_block@0"
    },
    "148": {
      "block": "dynamic_struct_arg_block@0",
      "stack_in": [],
      "op": "bytec_3 // \"dynamic_struct\"",
      "defined_out": [
        "\"dynamic_struct\""
      ],
      "stack_out": [
        "\"dynamic_struct\""
      ]
    },
    "149": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"dynamic_struct\"",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "\"dynamic_struct\"",
        "arg#0 (copy)"
      ]
    },
    "151": {
      "op": "app_global_put",
      "stack_out": []
    },
    "152": {
      "retsub": true,
      "op": "retsub"
    },
    "153": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret",
      "params": {},
      "block": "dynamic_struct_ret",
      "stack_in": [],
      "op": "b dynamic_struct_ret_block@0"
    },
    "156": {
      "block": "dynamic_struct_ret_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "157": {
      "op": "bytec_3 // \"dynamic_struct\"",
      "defined_out": [
        "\"dynamic_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"dynamic_struct\""
      ]
    },
    "158": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "159": {
      "error": "check self.dynamic_struct exists",
      "op": "assert // check self.dynamic_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "160": {
      "retsub": true,
      "op": "retsub"
    },
    "161": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg",
      "params": {
        "arg#0": "bytes"
      },
      "block": "fixed_arr_arg",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "164": {
      "op": "b fixed_arr_arg_block@0"
    },
    "167": {
      "block": "fixed_arr_arg_block@0",
      "stack_in": [],
      "op": "bytec 4 // \"fixed_arr\"",
      "defined_out": [
        "\"fixed_arr\""
      ],
      "stack_out": [
        "\"fixed_arr\""
      ]
    },
    "169": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"fixed_arr\"",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "\"fixed_arr\"",
        "arg#0 (copy)"
      ]
    },
    "171": {
      "op": "app_global_put",
      "stack_out": []
    },
    "172": {
      "retsub": true,
      "op": "retsub"
    },
    "173": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret",
      "params": {},
      "block": "fixed_arr_ret",
      "stack_in": [],
      "op": "b fixed_arr_ret_block@0"
    },
    "176": {
      "block": "fixed_arr_ret_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "177": {
      "op": "bytec 4 // \"fixed_arr\"",
      "defined_out": [
        "\"fixed_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_arr\""
      ]
    },
    "179": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "180": {
      "error": "check self.fixed_arr exists",
      "op": "assert // check self.fixed_arr exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "181": {
      "retsub": true,
      "op": "retsub"
    },
    "182": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg",
      "params": {
        "arg#0": "bytes"
      },
      "block": "native_arr_arg",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "185": {
      "op": "b native_arr_arg_block@0"
    },
    "188": {
      "block": "native_arr_arg_block@0",
      "stack_in": [],
      "op": "bytec 5 // \"native_arr\"",
      "defined_out": [
        "\"native_arr\""
      ],
      "stack_out": [
        "\"native_arr\""
      ]
    },
    "190": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"native_arr\"",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "\"native_arr\"",
        "arg#0 (copy)"
      ]
    },
    "192": {
      "op": "app_global_put",
      "stack_out": []
    },
    "193": {
      "retsub": true,
      "op": "retsub"
    },
    "194": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret",
      "params": {},
      "block": "native_arr_ret",
      "stack_in": [],
      "op": "b native_arr_ret_block@0"
    },
    "197": {
      "block": "native_arr_ret_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "198": {
      "op": "bytec 5 // \"native_arr\"",
      "defined_out": [
        "\"native_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"native_arr\""
      ]
    },
    "200": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "201": {
      "error": "check self.native_arr exists",
      "op": "assert // check self.native_arr exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "202": {
      "retsub": true,
      "op": "retsub"
    },
    "203": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.log_it",
      "params": {},
      "block": "log_it",
      "stack_in": [],
      "op": "b log_it_block@0"
    },
    "206": {
      "block": "log_it_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "207": {
      "op": "bytec_1 // \"fixed_struct\"",
      "defined_out": [
        "\"fixed_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_struct\""
      ]
    },
    "208": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "209": {
      "error": "check self.fixed_struct exists",
      "op": "assert // check self.fixed_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "210": {
      "op": "log",
      "stack_out": []
    },
    "211": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "212": {
      "op": "bytec_2 // \"nested_struct\"",
      "defined_out": [
        "\"nested_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested_struct\""
      ]
    },
    "213": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "214": {
      "error": "check self.nested_struct exists",
      "op": "assert // check self.nested_struct exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "215": {
      "op": "log",
      "stack_out": []
    },
    "216": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "217": {
      "op": "bytec_3 // \"dynamic_struct\"",
      "defined_out": [
        "\"dynamic_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"dynamic_struct\""
      ]
    },
    "218": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "219": {
      "error": "check self.dynamic_struct exists",
      "op": "assert // check self.dynamic_struct exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "220": {
      "op": "log",
      "stack_out": []
    },
    "221": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "222": {
      "op": "bytec 4 // \"fixed_arr\"",
      "defined_out": [
        "\"fixed_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_arr\""
      ]
    },
    "224": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "225": {
      "error": "check self.fixed_arr exists",
      "op": "assert // check self.fixed_arr exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "226": {
      "op": "log",
      "stack_out": []
    },
    "227": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "228": {
      "op": "bytec 5 // \"native_arr\"",
      "defined_out": [
        "\"native_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"native_arr\""
      ]
    },
    "230": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "231": {
      "error": "check self.native_arr exists",
      "op": "assert // check self.native_arr exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "232": {
      "op": "log",
      "stack_out": []
    },
    "233": {
      "retsub": true,
      "op": "retsub"
    },
    "234": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "237": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "239": {
      "op": "b approval_program_block@0"
    },
    "242": {
      "block": "approval_program_block@0",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b approval_program_block@1"
    },
    "245": {
      "block": "approval_program_block@1",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#1"
      ]
    },
    "247": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#1",
        "0"
      ]
    },
    "248": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "249": {
      "op": "bz approval_program_bare_routing@17",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "252": {
      "op": "b approval_program_abi_routing@2"
    },
    "255": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "258": {
      "op": "pushbytes 0x24378d3c // method \"delete()void\"",
      "defined_out": [
        "Method(delete()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(delete()void)"
      ]
    },
    "264": {
      "op": "pushbytes 0x11b19b95 // method \"fixed_struct_arg((uint64,uint64))void\"",
      "defined_out": [
        "Method(delete()void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(delete()void)",
        "Method(fixed_struct_arg((uint64,uint64))void)"
      ]
    },
    "270": {
      "op": "pushbytes 0xd28b964a // method \"fixed_struct_ret()(uint64,uint64)\"",
      "defined_out": [
        "Method(delete()void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(delete()void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))"
      ]
    },
    "276": {
      "op": "pushbytes 0xea18655f // method \"nested_struct_arg(((uint64,uint64),uint64))void\"",
      "defined_out": [
        "Method(delete()void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(delete()void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)"
      ]
    },
    "282": {
      "op": "pushbytes 0xbb3bfdb7 // method \"nested_struct_ret()((uint64,uint64),uint64)\"",
      "defined_out": [
        "Method(delete()void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(delete()void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))"
      ]
    },
    "288": {
      "op": "pushbytes 0x46ec14a0 // method \"dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void\"",
      "defined_out": [
        "Method(delete()void)",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(delete()void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)"
      ]
    },
    "294": {
      "op": "pushbytes 0x9b4d0926 // method \"dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])\"",
      "defined_out": [
        "Method(delete()void)",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(delete()void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))"
      ]
    },
    "300": {
      "op": "pushbytes 0x4f0deb50 // method \"fixed_arr_arg((uint64,uint64)[3])void\"",
      "defined_out": [
        "Method(delete()void)",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(delete()void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)"
      ]
    },
    "306": {
      "op": "pushbytes 0x59664ab6 // method \"fixed_arr_ret()(uint64,uint64)[3]\"",
      "defined_out": [
        "Method(delete()void)",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(delete()void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])"
      ]
    },
    "312": {
      "op": "pushbytes 0x125d1376 // method \"native_arr_arg((uint64,uint64)[])void\"",
      "defined_out": [
        "Method(delete()void)",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(delete()void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(native_arr_arg((uint64,uint64)[])void)"
      ]
    },
    "318": {
      "op": "pushbytes 0x818e4a62 // method \"native_arr_ret()(uint64,uint64)[]\"",
      "defined_out": [
        "Method(delete()void)",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(delete()void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])"
      ]
    },
    "324": {
      "op": "pushbytes 0x9bbe1032 // method \"log_it()void\"",
      "defined_out": [
        "Method(delete()void)",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(log_it()void)",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(delete()void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(log_it()void)"
      ]
    },
    "330": {
      "op": "uncover 12",
      "stack_out": [
        "tmp%0#0",
        "Method(delete()void)",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(log_it()void)",
        "tmp%2#0"
      ]
    },
    "332": {
      "op": "match approval_program_delete_route@3 approval_program_fixed_struct_arg_route@4 approval_program_fixed_struct_ret_route@5 approval_program_nested_struct_arg_route@6 approval_program_nested_struct_ret_route@7 approval_program_dynamic_struct_arg_route@8 approval_program_dynamic_struct_ret_route@9 approval_program_fixed_arr_arg_route@10 approval_program_fixed_arr_ret_route@11 approval_program_native_arr_arg_route@12 approval_program_native_arr_ret_route@13 approval_program_log_it_route@14",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "358": {
      "op": "b approval_program_switch_case_default@15"
    },
    "361": {
      "block": "approval_program_switch_case_default@15",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b approval_program_switch_case_next@16"
    },
    "364": {
      "block": "approval_program_switch_case_next@16",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b approval_program_after_if_else@23"
    },
    "367": {
      "block": "approval_program_after_if_else@23",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ]
    },
    "368": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "370": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@24"
    },
    "373": {
      "block": "approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@24",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "375": {
      "op": "uncover 1"
    },
    "377": {
      "retsub": true,
      "op": "retsub"
    },
    "378": {
      "block": "approval_program_log_it_route@14",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%57#0"
      ]
    },
    "380": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%57#0",
        "NoOp"
      ]
    },
    "381": {
      "op": "==",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%58#0"
      ]
    },
    "382": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "383": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%59#0"
      ]
    },
    "385": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%59#0",
        "0"
      ]
    },
    "386": {
      "op": "!=",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%60#0"
      ]
    },
    "387": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "388": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.log_it",
      "op": "callsub log_it"
    },
    "391": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ]
    },
    "392": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "394": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@24"
    },
    "397": {
      "block": "approval_program_native_arr_ret_route@13",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%51#0"
      ]
    },
    "399": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%51#0",
        "NoOp"
      ]
    },
    "400": {
      "op": "==",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%52#0"
      ]
    },
    "401": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "402": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%53#0"
      ]
    },
    "404": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%53#0",
        "0"
      ]
    },
    "405": {
      "op": "!=",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%54#0"
      ]
    },
    "406": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "407": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret",
      "op": "callsub native_arr_ret",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%55#0"
      ]
    },
    "410": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%55#0",
        "0x151f7c75"
      ]
    },
    "411": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%55#0"
      ]
    },
    "413": {
      "op": "concat",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%56#0"
      ]
    },
    "414": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "415": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ]
    },
    "416": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "418": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@24"
    },
    "421": {
      "block": "approval_program_native_arr_arg_route@12",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%47#0"
      ]
    },
    "423": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%47#0",
        "NoOp"
      ]
    },
    "424": {
      "op": "==",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%48#0"
      ]
    },
    "425": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "426": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%49#0"
      ]
    },
    "428": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%49#0",
        "0"
      ]
    },
    "429": {
      "op": "!=",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%50#0"
      ]
    },
    "430": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "431": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint64)[])%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+(uint64,uint64)[])%0#0"
      ]
    },
    "434": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg",
      "op": "callsub native_arr_arg",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "437": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ]
    },
    "438": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "440": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@24"
    },
    "443": {
      "block": "approval_program_fixed_arr_ret_route@11",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%41#0"
      ]
    },
    "445": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%41#0",
        "NoOp"
      ]
    },
    "446": {
      "op": "==",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%42#0"
      ]
    },
    "447": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "448": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%43#0"
      ]
    },
    "450": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%43#0",
        "0"
      ]
    },
    "451": {
      "op": "!=",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%44#0"
      ]
    },
    "452": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "453": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret",
      "op": "callsub fixed_arr_ret",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%45#0"
      ]
    },
    "456": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%45#0",
        "0x151f7c75"
      ]
    },
    "457": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%45#0"
      ]
    },
    "459": {
      "op": "concat",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%46#0"
      ]
    },
    "460": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "461": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ]
    },
    "462": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "464": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@24"
    },
    "467": {
      "block": "approval_program_fixed_arr_arg_route@10",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%37#0"
      ]
    },
    "469": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%37#0",
        "NoOp"
      ]
    },
    "470": {
      "op": "==",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%38#0"
      ]
    },
    "471": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "472": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%39#0"
      ]
    },
    "474": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%39#0",
        "0"
      ]
    },
    "475": {
      "op": "!=",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%40#0"
      ]
    },
    "476": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "477": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint64)[3])%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded((uint64,uint64)[3])%0#0"
      ]
    },
    "480": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg",
      "op": "callsub fixed_arr_arg",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "483": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ]
    },
    "484": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "486": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@24"
    },
    "489": {
      "block": "approval_program_dynamic_struct_ret_route@9",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%31#0"
      ]
    },
    "491": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%31#0",
        "NoOp"
      ]
    },
    "492": {
      "op": "==",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%32#0"
      ]
    },
    "493": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "494": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%33#0"
      ]
    },
    "496": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%33#0",
        "0"
      ]
    },
    "497": {
      "op": "!=",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%34#0"
      ]
    },
    "498": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "499": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret",
      "op": "callsub dynamic_struct_ret",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%35#0"
      ]
    },
    "502": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%35#0",
        "0x151f7c75"
      ]
    },
    "503": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%35#0"
      ]
    },
    "505": {
      "op": "concat",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%36#0"
      ]
    },
    "506": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "507": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ]
    },
    "508": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "510": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@24"
    },
    "513": {
      "block": "approval_program_dynamic_struct_arg_route@8",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%27#0"
      ]
    },
    "515": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%27#0",
        "NoOp"
      ]
    },
    "516": {
      "op": "==",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%28#0"
      ]
    },
    "517": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "518": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%29#0"
      ]
    },
    "520": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%29#0",
        "0"
      ]
    },
    "521": {
      "op": "!=",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%30#0"
      ]
    },
    "522": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "523": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%0#0"
      ]
    },
    "526": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg",
      "op": "callsub dynamic_struct_arg",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "529": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ]
    },
    "530": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "532": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@24"
    },
    "535": {
      "block": "approval_program_nested_struct_ret_route@7",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%21#0"
      ]
    },
    "537": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%21#0",
        "NoOp"
      ]
    },
    "538": {
      "op": "==",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%22#0"
      ]
    },
    "539": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "540": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%23#0"
      ]
    },
    "542": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%23#0",
        "0"
      ]
    },
    "543": {
      "op": "!=",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%24#0"
      ]
    },
    "544": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "545": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret",
      "op": "callsub nested_struct_ret",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%25#0"
      ]
    },
    "548": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%25#0",
        "0x151f7c75"
      ]
    },
    "549": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%25#0"
      ]
    },
    "551": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%26#0"
      ]
    },
    "552": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "553": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ]
    },
    "554": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "556": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@24"
    },
    "559": {
      "block": "approval_program_nested_struct_arg_route@6",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0"
      ]
    },
    "561": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0",
        "NoOp"
      ]
    },
    "562": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%18#0"
      ]
    },
    "563": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "564": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%19#0"
      ]
    },
    "566": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%19#0",
        "0"
      ]
    },
    "567": {
      "op": "!=",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%20#0"
      ]
    },
    "568": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "569": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint64),uint64)%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded((uint64,uint64),uint64)%0#0"
      ]
    },
    "572": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg",
      "op": "callsub nested_struct_arg",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "575": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ]
    },
    "576": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "578": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@24"
    },
    "581": {
      "block": "approval_program_fixed_struct_ret_route@5",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "583": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%11#0",
        "NoOp"
      ]
    },
    "584": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0"
      ]
    },
    "585": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "586": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%13#0"
      ]
    },
    "588": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%13#0",
        "0"
      ]
    },
    "589": {
      "op": "!=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%14#0"
      ]
    },
    "590": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "591": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret",
      "op": "callsub fixed_struct_ret",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%15#0"
      ]
    },
    "594": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%15#0",
        "0x151f7c75"
      ]
    },
    "595": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%15#0"
      ]
    },
    "597": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%16#0"
      ]
    },
    "598": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "599": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ]
    },
    "600": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "602": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@24"
    },
    "605": {
      "block": "approval_program_fixed_struct_arg_route@4",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "607": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "NoOp"
      ]
    },
    "608": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "609": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "610": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0"
      ]
    },
    "612": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "0"
      ]
    },
    "613": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%10#0"
      ]
    },
    "614": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "615": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "618": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg",
      "op": "callsub fixed_struct_arg",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "621": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ]
    },
    "622": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "624": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@24"
    },
    "627": {
      "block": "approval_program_delete_route@3",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "629": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "DeleteApplication"
      ]
    },
    "631": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "632": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "633": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "635": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "0"
      ]
    },
    "636": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "637": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "638": {
      "callsub": "test_cases.mutable_native_types.abi_call.CallMe.delete",
      "op": "callsub delete"
    },
    "641": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ]
    },
    "642": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "644": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@24"
    },
    "647": {
      "block": "approval_program_bare_routing@17",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%61#0"
      ]
    },
    "649": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%61#0",
        "0"
      ]
    },
    "650": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0",
        "tmp%61#0"
      ]
    },
    "652": {
      "op": "match approval_program___algopy_default_create@18",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "656": {
      "op": "b approval_program_switch_case_default@21"
    },
    "659": {
      "block": "approval_program_switch_case_default@21",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b approval_program_switch_case_next@22"
    },
    "662": {
      "block": "approval_program_switch_case_next@22",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b approval_program_after_if_else@23"
    },
    "665": {
      "block": "approval_program___algopy_default_create@18",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%62#0"
      ]
    },
    "667": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%62#0",
        "0"
      ]
    },
    "668": {
      "op": "==",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%63#0"
      ]
    },
    "669": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "670": {
      "op": "b approval_program_block@19"
    },
    "673": {
      "block": "approval_program_block@19",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__algopy_default_create@20"
    },
    "676": {
      "block": "approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__algopy_default_create@20",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__%0#0"
      ]
    },
    "677": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "679": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@24"
    }
  }
}