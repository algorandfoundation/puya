{
  "version": 3,
  "sources": [
    "../case3_with_mutable_struct.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AAAA;AAuEK;;;;;;AAbA;;;;;;AANA;;;;;;AANA;;;;;;AALA;;;;;;AALA;;;;;;AATA;;;;;;AALA;;;;;;AAPA;;;;;;AAJA;;;;;;AAPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;;AAOA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAOA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAKA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AASA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAKA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAKA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAaA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAjEU;AAAA;;;AAAA;AAAP;AAC2B;;AAA3B;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AACyB;;AAAzB;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;;AAAkC;AAAlC;AAAA;AAAA;;AAAA;;;;;AAIO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAEH;;;;;;;;AAEG;;;AACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2B;AAA3B;AAAP;AACA;AAAA;AAAA;AAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAzB;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AAA5B;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAEH;;;;;;AAEkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAR;;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAP;AAEH;;;;;;AAEW;AACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAAjB;AAAiB;;;;AAAjB;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAY;;AACM;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACG;AAAA;AAAA;AAAA;AAAA;AAAT;;AAAA;AACS;;AAAA;AAAA;AAAA;AAAA;AAAT;AAAA;;;;;AAHK;;AAAA;AAAA;AAAA;;;;;AAIT;AAEH;;;;;;;AAEmB;;AAAA;AAAA;AAAP;AAAjB;AAAiB;;;;AAAjB;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAY;;AACa;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAb;;;AAAA;;;;;AADK;;AAAA;AAAA;AAAA;;;;;;AAGZ;;;;;;;AAEY;AAAjB;AAAiB;;;;AAAjB;;AAAwB;;AAAxB;AAAA;;;AAAA;;;AAAY;;AACa;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAb;;;AAAA;;;;;AADK;;AAAA;AAAA;AAAA;;;;;;AAGZ;;;;;;AAEG;;;AACgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAAjB;AAAiB;;;;AAAjB;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAY;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;;AADK;;AAAA;AAAA;AAAA;;;;;;AAGZ;;;;;;AAEG;;;AACgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAAjB;AAAiB;;;;AAAjB;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAY;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;;AADK;;AAAA;AAAA;AAAA;;;;;;AAGZ;;;;;;AAEU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;;AAAQ;;AAAR;AAA5B;AAAP;AACQ;AAAA;AAAA;AAAA;AAAA;;AAAA;AAIA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AACM;;AAAQ;AAAR;AAAN;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AACM;;AAAQ;;AAAR;AAAN;AAAA;AAAA;AAAA;AAJD;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAP;AAQH;;;;;;AAEY;AAAA;AAAA;;;AACD;AAAA;AAAA;AAAA;AAAA;;AAAA;AAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAAjB;AAAiB;;;;AAAjB;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAY;;AACc;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAd;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;AADK;;AAAA;AAAA;AAAA;;;;;AAET;;;;AAIO;AAAA;AAAA;AAAA;;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAA4B;;AAA5B;AAAP;AAEI;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA0B;;AAA1B;AADJ;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 8 1 16 128 34176"
    },
    "12": {
      "op": "bytecblock \"tup_bag\" 0x151f7c75 0x"
    },
    "28": {
      "op": "b main_block@0"
    },
    "31": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "33": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "36": {
      "op": "b main_call___init__@1"
    },
    "39": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__init__",
      "op": "callsub __init__"
    },
    "42": {
      "op": "b main_after_if_else@2"
    },
    "45": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "b main_block@3"
    },
    "48": {
      "block": "main_block@3",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "50": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "51": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "52": {
      "op": "bz main___algopy_default_create@20",
      "stack_out": []
    },
    "55": {
      "op": "b main_abi_routing@4"
    },
    "58": {
      "block": "main_abi_routing@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "60": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "NoOp"
      ]
    },
    "61": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "62": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "63": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "65": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "66": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "67": {
      "op": "bz main_create_NoOp@18",
      "stack_out": []
    },
    "70": {
      "op": "b main_call_NoOp@5"
    },
    "73": {
      "block": "main_call_NoOp@5",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "76": {
      "op": "pushbytes 0xa67ea2ab // method \"create_box()void\"",
      "defined_out": [
        "Method(create_box()void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(create_box()void)"
      ]
    },
    "82": {
      "op": "pushbytes 0x028840ea // method \"num_tups()uint64\"",
      "defined_out": [
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)"
      ]
    },
    "88": {
      "op": "pushbytes 0xf75cee9d // method \"add_tup((uint64,uint64))void\"",
      "defined_out": [
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)"
      ]
    },
    "94": {
      "op": "pushbytes 0x880b5534 // method \"get_tup(uint64)(uint64,uint64)\"",
      "defined_out": [
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(num_tups()uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))"
      ]
    },
    "100": {
      "op": "pushbytes 0x53030b41 // method \"sum()uint64\"",
      "defined_out": [
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(num_tups()uint64)",
        "Method(sum()uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(sum()uint64)"
      ]
    },
    "106": {
      "op": "pushbytes 0x7d39df51 // method \"add_many_tups((uint64,uint64)[])void\"",
      "defined_out": [
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(num_tups()uint64)",
        "Method(sum()uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(sum()uint64)",
        "Method(add_many_tups((uint64,uint64)[])void)"
      ]
    },
    "112": {
      "op": "pushbytes 0x7a1e7b43 // method \"add_fixed_tups((uint64,uint64)[3])void\"",
      "defined_out": [
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(num_tups()uint64)",
        "Method(sum()uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(sum()uint64)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_fixed_tups((uint64,uint64)[3])void)"
      ]
    },
    "118": {
      "op": "pushbytes 0x3447847f // method \"set_a(uint64)void\"",
      "defined_out": [
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(num_tups()uint64)",
        "Method(set_a(uint64)void)",
        "Method(sum()uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(sum()uint64)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(set_a(uint64)void)"
      ]
    },
    "124": {
      "op": "pushbytes 0x2ba64852 // method \"set_b(uint64)void\"",
      "defined_out": [
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(num_tups()uint64)",
        "Method(set_a(uint64)void)",
        "Method(set_b(uint64)void)",
        "Method(sum()uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(sum()uint64)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(set_a(uint64)void)",
        "Method(set_b(uint64)void)"
      ]
    },
    "130": {
      "op": "pushbytes 0xabc9be78 // method \"get_3_tups(uint64)(uint64,uint64)[3]\"",
      "defined_out": [
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(get_3_tups(uint64)(uint64,uint64)[3])",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(num_tups()uint64)",
        "Method(set_a(uint64)void)",
        "Method(set_b(uint64)void)",
        "Method(sum()uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(sum()uint64)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(set_a(uint64)void)",
        "Method(set_b(uint64)void)",
        "Method(get_3_tups(uint64)(uint64,uint64)[3])"
      ]
    },
    "136": {
      "op": "pushbytes 0x73457a19 // method \"get_all_tups()(uint64,uint64)[]\"",
      "defined_out": [
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(get_3_tups(uint64)(uint64,uint64)[3])",
        "Method(get_all_tups()(uint64,uint64)[])",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(num_tups()uint64)",
        "Method(set_a(uint64)void)",
        "Method(set_b(uint64)void)",
        "Method(sum()uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(sum()uint64)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(set_a(uint64)void)",
        "Method(set_b(uint64)void)",
        "Method(get_3_tups(uint64)(uint64,uint64)[3])",
        "Method(get_all_tups()(uint64,uint64)[])"
      ]
    },
    "142": {
      "op": "uncover 11",
      "stack_out": [
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(sum()uint64)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(set_a(uint64)void)",
        "Method(set_b(uint64)void)",
        "Method(get_3_tups(uint64)(uint64,uint64)[3])",
        "Method(get_all_tups()(uint64,uint64)[])",
        "tmp%6#0"
      ]
    },
    "144": {
      "op": "match main_create_box_route@6 main_num_tups_route@7 main_add_tup_route@8 main_get_tup_route@9 main_sum_route@10 main_add_many_tups_route@11 main_add_fixed_tups_route@12 main_set_a_route@13 main_set_b_route@14 main_get_3_tups_route@15 main_get_all_tups_route@16",
      "stack_out": []
    },
    "168": {
      "op": "b main_switch_case_next@17"
    },
    "171": {
      "block": "main_switch_case_next@17",
      "stack_in": [],
      "op": "b main_after_if_else@19"
    },
    "174": {
      "block": "main_after_if_else@19",
      "stack_in": [],
      "op": "b main_after_if_else@21"
    },
    "177": {
      "block": "main_after_if_else@21",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "178": {
      "block": "main_get_all_tups_route@16",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups[routing]",
      "op": "callsub get_all_tups"
    },
    "181": {
      "op": "b main_switch_case_next@17"
    },
    "184": {
      "block": "main_get_3_tups_route@15",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_3_tups[routing]",
      "op": "callsub get_3_tups"
    },
    "187": {
      "op": "b main_switch_case_next@17"
    },
    "190": {
      "block": "main_set_b_route@14",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b[routing]",
      "op": "callsub set_b"
    },
    "193": {
      "op": "b main_switch_case_next@17"
    },
    "196": {
      "block": "main_set_a_route@13",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a[routing]",
      "op": "callsub set_a"
    },
    "199": {
      "op": "b main_switch_case_next@17"
    },
    "202": {
      "block": "main_add_fixed_tups_route@12",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups[routing]",
      "op": "callsub add_fixed_tups"
    },
    "205": {
      "op": "b main_switch_case_next@17"
    },
    "208": {
      "block": "main_add_many_tups_route@11",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups[routing]",
      "op": "callsub add_many_tups"
    },
    "211": {
      "op": "b main_switch_case_next@17"
    },
    "214": {
      "block": "main_sum_route@10",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum[routing]",
      "op": "callsub sum"
    },
    "217": {
      "op": "b main_switch_case_next@17"
    },
    "220": {
      "block": "main_get_tup_route@9",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_tup[routing]",
      "op": "callsub get_tup"
    },
    "223": {
      "op": "b main_switch_case_next@17"
    },
    "226": {
      "block": "main_add_tup_route@8",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup[routing]",
      "op": "callsub add_tup"
    },
    "229": {
      "op": "b main_switch_case_next@17"
    },
    "232": {
      "block": "main_num_tups_route@7",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.num_tups[routing]",
      "op": "callsub num_tups"
    },
    "235": {
      "op": "b main_switch_case_next@17"
    },
    "238": {
      "block": "main_create_box_route@6",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.create_box[routing]",
      "op": "callsub create_box"
    },
    "241": {
      "op": "b main_switch_case_next@17"
    },
    "244": {
      "block": "main_create_NoOp@18",
      "stack_in": [],
      "op": "b main_after_if_else@19"
    },
    "247": {
      "block": "main___algopy_default_create@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "249": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "250": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "251": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "253": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0"
      ]
    },
    "254": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "255": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "256": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "257": {
      "op": "b main_block@23"
    },
    "260": {
      "block": "main_block@23",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__algopy_default_create@24"
    },
    "263": {
      "block": "main_after_inlined_test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__algopy_default_create@24",
      "stack_in": [],
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "264": {
      "op": "return",
      "stack_out": []
    },
    "265": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.create_box[routing]",
      "params": {},
      "block": "create_box",
      "stack_in": [],
      "op": "b create_box_block@0"
    },
    "268": {
      "block": "create_box_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.create_box",
      "op": "callsub test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.create_box"
    },
    "271": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "272": {
      "op": "return",
      "stack_out": []
    },
    "273": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.num_tups[routing]",
      "params": {},
      "block": "num_tups",
      "stack_in": [],
      "op": "b num_tups_block@0"
    },
    "276": {
      "block": "num_tups_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.num_tups",
      "op": "callsub test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.num_tups",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "279": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "280": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "281": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "283": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "284": {
      "op": "log",
      "stack_out": []
    },
    "285": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "286": {
      "op": "return",
      "stack_out": []
    },
    "287": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup[routing]",
      "params": {},
      "block": "add_tup",
      "stack_in": [],
      "op": "b add_tup_block@0"
    },
    "290": {
      "block": "add_tup_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "293": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "294": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "295": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "16"
      ]
    },
    "296": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "297": {
      "error": "invalid number of bytes for (uint64,uint64)",
      "op": "assert // invalid number of bytes for (uint64,uint64)",
      "defined_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "298": {
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup",
      "op": "callsub test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup",
      "defined_out": [
        "add_tup%0#0"
      ],
      "stack_out": [
        "add_tup%0#0"
      ]
    },
    "301": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "add_tup%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "1"
      ]
    },
    "302": {
      "op": "return",
      "stack_out": [
        "add_tup%0#0"
      ]
    },
    "303": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_tup[routing]",
      "params": {},
      "block": "get_tup",
      "stack_in": [],
      "op": "b get_tup_block@0"
    },
    "306": {
      "block": "get_tup_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "309": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "310": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "311": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "312": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "313": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "314": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "315": {
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_tup",
      "op": "callsub test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_tup",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "318": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "319": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "321": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "322": {
      "op": "log",
      "stack_out": []
    },
    "323": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "324": {
      "op": "return",
      "stack_out": []
    },
    "325": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum[routing]",
      "params": {},
      "block": "sum",
      "stack_in": [],
      "op": "b sum_block@0"
    },
    "328": {
      "block": "sum_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum",
      "op": "callsub test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "331": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "332": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "333": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "335": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "336": {
      "op": "log",
      "stack_out": []
    },
    "337": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "338": {
      "op": "return",
      "stack_out": []
    },
    "339": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups[routing]",
      "params": {},
      "block": "add_many_tups",
      "stack_in": [],
      "op": "b add_many_tups_block@0"
    },
    "342": {
      "block": "add_many_tups_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "345": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "346": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "347": {
      "op": "extract_uint16",
      "defined_out": [
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0"
      ]
    },
    "348": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0",
        "16"
      ]
    },
    "349": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0"
      ]
    },
    "350": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "352": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "353": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "355": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "356": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "357": {
      "error": "invalid number of bytes for (len+(uint64,uint64)[])",
      "op": "assert // invalid number of bytes for (len+(uint64,uint64)[])",
      "defined_out": [
        "as_Encoded(len+(uint64,uint64)[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+(uint64,uint64)[])%0#0"
      ]
    },
    "358": {
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups",
      "op": "callsub test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups",
      "stack_out": []
    },
    "361": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "362": {
      "op": "return",
      "stack_out": []
    },
    "363": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups[routing]",
      "params": {},
      "block": "add_fixed_tups",
      "stack_in": [],
      "op": "b add_fixed_tups_block@0"
    },
    "366": {
      "block": "add_fixed_tups_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "369": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "370": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "371": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "48"
      ]
    },
    "373": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "374": {
      "error": "invalid number of bytes for (uint64,uint64)[3]",
      "op": "assert // invalid number of bytes for (uint64,uint64)[3]",
      "defined_out": [
        "as_Encoded((uint64,uint64)[3])%0#0"
      ],
      "stack_out": [
        "as_Encoded((uint64,uint64)[3])%0#0"
      ]
    },
    "375": {
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups",
      "op": "callsub test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups",
      "stack_out": []
    },
    "378": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "379": {
      "op": "return",
      "stack_out": []
    },
    "380": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a[routing]",
      "params": {},
      "block": "set_a",
      "stack_in": [],
      "op": "b set_a_block@0"
    },
    "383": {
      "block": "set_a_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "386": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "387": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "388": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "389": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "390": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "391": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "392": {
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a",
      "op": "callsub test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a",
      "stack_out": []
    },
    "395": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "396": {
      "op": "return",
      "stack_out": []
    },
    "397": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b[routing]",
      "params": {},
      "block": "set_b",
      "stack_in": [],
      "op": "b set_b_block@0"
    },
    "400": {
      "block": "set_b_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "403": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "404": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "405": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "406": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "407": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "408": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "409": {
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b",
      "op": "callsub test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b",
      "stack_out": []
    },
    "412": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "413": {
      "op": "return",
      "stack_out": []
    },
    "414": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_3_tups[routing]",
      "params": {},
      "block": "get_3_tups",
      "stack_in": [],
      "op": "b get_3_tups_block@0"
    },
    "417": {
      "block": "get_3_tups_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "420": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "421": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "422": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "423": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "424": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "425": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "426": {
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_3_tups",
      "op": "callsub test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_3_tups",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "429": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "430": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "432": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "433": {
      "op": "log",
      "stack_out": []
    },
    "434": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "435": {
      "op": "return",
      "stack_out": []
    },
    "436": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups[routing]",
      "params": {},
      "block": "get_all_tups",
      "stack_in": [],
      "op": "b get_all_tups_block@0"
    },
    "439": {
      "block": "get_all_tups_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups",
      "op": "callsub test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "442": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "443": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "445": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "446": {
      "op": "log",
      "stack_out": []
    },
    "447": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "448": {
      "op": "return",
      "stack_out": []
    },
    "449": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "452": {
      "block": "__init___block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "453": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.create_box",
      "params": {},
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.create_box",
      "stack_in": [],
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.create_box_block@0"
    },
    "456": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.create_box_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "457": {
      "op": "pushint 4273 // 4273",
      "defined_out": [
        "\"tup_bag\"",
        "4273"
      ],
      "stack_out": [
        "\"tup_bag\"",
        "4273"
      ]
    },
    "460": {
      "op": "box_create",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "461": {
      "error": "box already exists",
      "op": "assert // box already exists",
      "stack_out": []
    },
    "462": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "464": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "tmp%1#0",
        "\"tup_bag\""
      ]
    },
    "465": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "466": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "encoded_value%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "storage_value%0#0"
      ]
    },
    "467": {
      "op": "pushint 136 // 136",
      "defined_out": [
        "136",
        "encoded_value%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "storage_value%0#0",
        "136"
      ]
    },
    "470": {
      "op": "uncover 2",
      "stack_out": [
        "storage_value%0#0",
        "136",
        "encoded_value%0#0"
      ]
    },
    "472": {
      "op": "replace3",
      "defined_out": [
        "updated_tuple%0#0"
      ],
      "stack_out": [
        "updated_tuple%0#0"
      ]
    },
    "473": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "updated_tuple%0#0",
        "\"tup_bag\""
      ]
    },
    "474": {
      "op": "uncover 1",
      "stack_out": [
        "\"tup_bag\"",
        "updated_tuple%0#0"
      ]
    },
    "476": {
      "op": "box_put",
      "stack_out": []
    },
    "477": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "479": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "tmp%2#0",
        "\"tup_bag\""
      ]
    },
    "480": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "481": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "storage_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "storage_value%1#0"
      ]
    },
    "482": {
      "op": "uncover 1",
      "stack_out": [
        "storage_value%1#0",
        "tmp%2#0"
      ]
    },
    "484": {
      "op": "itob",
      "defined_out": [
        "encoded_value%1#0",
        "storage_value%1#0"
      ],
      "stack_out": [
        "storage_value%1#0",
        "encoded_value%1#0"
      ]
    },
    "485": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_value%1#0",
        "storage_value%1#0"
      ]
    },
    "487": {
      "op": "pushint 168 // 168",
      "defined_out": [
        "168",
        "encoded_value%1#0",
        "storage_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "storage_value%1#0",
        "168"
      ]
    },
    "490": {
      "op": "uncover 2",
      "stack_out": [
        "storage_value%1#0",
        "168",
        "encoded_value%1#0"
      ]
    },
    "492": {
      "op": "replace3",
      "defined_out": [
        "updated_tuple%1#0"
      ],
      "stack_out": [
        "updated_tuple%1#0"
      ]
    },
    "493": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "updated_tuple%1#0",
        "\"tup_bag\""
      ]
    },
    "494": {
      "op": "uncover 1",
      "stack_out": [
        "\"tup_bag\"",
        "updated_tuple%1#0"
      ]
    },
    "496": {
      "op": "box_put",
      "stack_out": []
    },
    "497": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "498": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ]
    },
    "499": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "storage_value%2#0"
      ],
      "stack_out": [
        "storage_value%2#0"
      ]
    },
    "500": {
      "op": "intc 5 // 34176",
      "defined_out": [
        "34176",
        "storage_value%2#0"
      ],
      "stack_out": [
        "storage_value%2#0",
        "34176"
      ]
    },
    "502": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "34176",
        "storage_value%2#0"
      ],
      "stack_out": [
        "storage_value%2#0",
        "34176",
        "1"
      ]
    },
    "503": {
      "op": "setbit",
      "defined_out": [
        "updated_tuple%2#0"
      ],
      "stack_out": [
        "updated_tuple%2#0"
      ]
    },
    "504": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "updated_tuple%2#0",
        "\"tup_bag\""
      ]
    },
    "505": {
      "op": "uncover 1",
      "stack_out": [
        "\"tup_bag\"",
        "updated_tuple%2#0"
      ]
    },
    "507": {
      "op": "box_put",
      "stack_out": []
    },
    "508": {
      "retsub": true,
      "op": "retsub"
    },
    "509": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.num_tups",
      "params": {},
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.num_tups",
      "stack_in": [],
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.num_tups_block@0"
    },
    "512": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.num_tups_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "513": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "514": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "515": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "0"
      ]
    },
    "516": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "0",
        "8"
      ]
    },
    "517": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "518": {
      "op": "btoi",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "519": {
      "retsub": true,
      "op": "retsub"
    },
    "520": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup",
      "params": {
        "tup#0": "bytes"
      },
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "523": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup_block@0"
    },
    "526": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "tup%out#0"
      ],
      "stack_out": [
        "tup%out#0"
      ]
    },
    "528": {
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner",
      "op": "callsub _check_owner"
    },
    "531": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\"",
        "tup%out#0"
      ],
      "stack_out": [
        "tup%out#0",
        "\"tup_bag\""
      ]
    },
    "532": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "tup%out#0"
      ],
      "stack_out": [
        "tup%out#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "533": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "storage_value%0#0",
        "tup%out#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%0#0"
      ]
    },
    "534": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "storage_value%0#0",
        "tup%out#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%0#0",
        "0"
      ]
    },
    "535": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "storage_value%0#0",
        "tup%out#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%0#0",
        "0",
        "8"
      ]
    },
    "536": {
      "op": "extract3",
      "defined_out": [
        "tup%out#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tup%out#0",
        "tuple_item%0#0"
      ]
    },
    "537": {
      "op": "btoi",
      "defined_out": [
        "tup%out#0",
        "values%0#0"
      ],
      "stack_out": [
        "tup%out#0",
        "values%0#0"
      ]
    },
    "538": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tup%out#0",
        "values%0#0",
        "8"
      ]
    },
    "539": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tup%out#0"
      ],
      "stack_out": [
        "tup%out#0",
        "tmp%0#0"
      ]
    },
    "540": {
      "error": "too many tups",
      "op": "assert // too many tups",
      "stack_out": [
        "tup%out#0"
      ]
    },
    "541": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "tup%out#0",
        "\"tup_bag\""
      ]
    },
    "542": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0",
        "tup%out#0"
      ],
      "stack_out": [
        "tup%out#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "543": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "storage_value%1#0",
        "tup%out#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%1#0"
      ]
    },
    "544": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "tup%out#0",
        "storage_value%1#0",
        "\"tup_bag\""
      ]
    },
    "545": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0",
        "storage_value%1#0",
        "tup%out#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%1#0",
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ]
    },
    "546": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "storage_value%1#0",
        "storage_value%2#0",
        "tup%out#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%1#0",
        "storage_value%2#0"
      ]
    },
    "547": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tup%out#0",
        "storage_value%1#0",
        "storage_value%2#0",
        "0"
      ]
    },
    "548": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tup%out#0",
        "storage_value%1#0",
        "storage_value%2#0",
        "0",
        "8"
      ]
    },
    "549": {
      "op": "extract3",
      "defined_out": [
        "storage_value%1#0",
        "tup%out#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%1#0",
        "tuple_item%1#0"
      ]
    },
    "550": {
      "op": "btoi",
      "defined_out": [
        "storage_value%1#0",
        "tup%out#0",
        "values%1#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%1#0",
        "values%1#0"
      ]
    },
    "551": {
      "op": "dig 1",
      "defined_out": [
        "storage_value%1#0",
        "storage_value%1#0 (copy)",
        "tup%out#0",
        "values%1#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%1#0",
        "values%1#0",
        "storage_value%1#0 (copy)"
      ]
    },
    "553": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tup%out#0",
        "storage_value%1#0",
        "values%1#0",
        "storage_value%1#0 (copy)",
        "8"
      ]
    },
    "554": {
      "op": "intc 4 // 128",
      "defined_out": [
        "128",
        "8",
        "storage_value%1#0",
        "storage_value%1#0 (copy)",
        "tup%out#0",
        "values%1#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%1#0",
        "values%1#0",
        "storage_value%1#0 (copy)",
        "8",
        "128"
      ]
    },
    "556": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%2#0",
        "storage_value%1#0",
        "tup%out#0",
        "values%1#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%1#0",
        "values%1#0",
        "aggregate%extract%2#0"
      ]
    },
    "557": {
      "op": "uncover 1",
      "stack_out": [
        "tup%out#0",
        "storage_value%1#0",
        "aggregate%extract%2#0",
        "values%1#0"
      ]
    },
    "559": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "aggregate%extract%2#0",
        "storage_value%1#0",
        "tup%out#0",
        "values%1#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%1#0",
        "aggregate%extract%2#0",
        "values%1#0",
        "16"
      ]
    },
    "560": {
      "op": "*",
      "defined_out": [
        "aggregate%extract%2#0",
        "aggregate%write_offset%0#0",
        "storage_value%1#0",
        "tup%out#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%1#0",
        "aggregate%extract%2#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "561": {
      "op": "frame_dig -1",
      "stack_out": [
        "tup%out#0",
        "storage_value%1#0",
        "aggregate%extract%2#0",
        "aggregate%write_offset%0#0",
        "tup#0 (copy)"
      ]
    },
    "563": {
      "error": "index access is out of bounds",
      "op": "replace3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%updated_array%0#0",
        "storage_value%1#0",
        "tup%out#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%1#0",
        "aggregate%updated_array%0#0"
      ]
    },
    "564": {
      "op": "uncover 1",
      "stack_out": [
        "tup%out#0",
        "aggregate%updated_array%0#0",
        "storage_value%1#0"
      ]
    },
    "566": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tup%out#0",
        "aggregate%updated_array%0#0",
        "storage_value%1#0",
        "8"
      ]
    },
    "567": {
      "op": "uncover 2",
      "stack_out": [
        "tup%out#0",
        "storage_value%1#0",
        "8",
        "aggregate%updated_array%0#0"
      ]
    },
    "569": {
      "op": "replace3",
      "defined_out": [
        "tup%out#0",
        "updated_tuple%0#0"
      ],
      "stack_out": [
        "tup%out#0",
        "updated_tuple%0#0"
      ]
    },
    "570": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "tup%out#0",
        "updated_tuple%0#0",
        "\"tup_bag\""
      ]
    },
    "571": {
      "op": "uncover 1",
      "stack_out": [
        "tup%out#0",
        "\"tup_bag\"",
        "updated_tuple%0#0"
      ]
    },
    "573": {
      "op": "box_put",
      "stack_out": [
        "tup%out#0"
      ]
    },
    "574": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "tup%out#0",
        "\"tup_bag\""
      ]
    },
    "575": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%6#0",
        "aggregate%box_get%7#0",
        "tup%out#0"
      ],
      "stack_out": [
        "tup%out#0",
        "aggregate%box_get%6#0",
        "aggregate%box_get%7#0"
      ]
    },
    "576": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "storage_value%3#0",
        "tup%out#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%3#0"
      ]
    },
    "577": {
      "op": "dup",
      "defined_out": [
        "storage_value%3#0",
        "storage_value%3#0 (copy)",
        "tup%out#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%3#0",
        "storage_value%3#0 (copy)"
      ]
    },
    "578": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tup%out#0",
        "storage_value%3#0",
        "storage_value%3#0 (copy)",
        "0"
      ]
    },
    "579": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tup%out#0",
        "storage_value%3#0",
        "storage_value%3#0 (copy)",
        "0",
        "8"
      ]
    },
    "580": {
      "op": "extract3",
      "defined_out": [
        "storage_value%3#0",
        "tup%out#0",
        "tuple_item%2#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%3#0",
        "tuple_item%2#0"
      ]
    },
    "581": {
      "op": "btoi",
      "defined_out": [
        "storage_value%3#0",
        "tup%out#0",
        "values%2#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%3#0",
        "values%2#0"
      ]
    },
    "582": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "storage_value%3#0",
        "tup%out#0",
        "values%2#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%3#0",
        "values%2#0",
        "1"
      ]
    },
    "583": {
      "op": "+",
      "defined_out": [
        "storage_value%3#0",
        "tmp%1#0",
        "tup%out#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%3#0",
        "tmp%1#0"
      ]
    },
    "584": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "storage_value%3#0",
        "tup%out#0"
      ],
      "stack_out": [
        "tup%out#0",
        "storage_value%3#0",
        "encoded_value%0#0"
      ]
    },
    "585": {
      "op": "uncover 1",
      "stack_out": [
        "tup%out#0",
        "encoded_value%0#0",
        "storage_value%3#0"
      ]
    },
    "587": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tup%out#0",
        "encoded_value%0#0",
        "storage_value%3#0",
        "0"
      ]
    },
    "588": {
      "op": "uncover 2",
      "stack_out": [
        "tup%out#0",
        "storage_value%3#0",
        "0",
        "encoded_value%0#0"
      ]
    },
    "590": {
      "op": "replace3",
      "defined_out": [
        "tup%out#0",
        "updated_tuple%1#0"
      ],
      "stack_out": [
        "tup%out#0",
        "updated_tuple%1#0"
      ]
    },
    "591": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "tup%out#0",
        "updated_tuple%1#0",
        "\"tup_bag\""
      ]
    },
    "592": {
      "op": "uncover 1",
      "stack_out": [
        "tup%out#0",
        "\"tup_bag\"",
        "updated_tuple%1#0"
      ]
    },
    "594": {
      "op": "box_put",
      "stack_out": [
        "tup%out#0"
      ]
    },
    "595": {
      "retsub": true,
      "op": "retsub"
    },
    "596": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_tup",
      "params": {
        "index#0": "uint64"
      },
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_tup",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "599": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_tup_block@0"
    },
    "602": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_tup_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "603": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "604": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "605": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "0"
      ]
    },
    "606": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "0",
        "8"
      ]
    },
    "607": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "608": {
      "op": "btoi",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "609": {
      "op": "frame_dig -1",
      "defined_out": [
        "index#0 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "index#0 (copy)"
      ]
    },
    "611": {
      "op": ">",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "612": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": []
    },
    "613": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "614": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ],
      "stack_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "615": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "storage_value%1#0"
      ],
      "stack_out": [
        "storage_value%1#0"
      ]
    },
    "616": {
      "op": "intc_1 // 8",
      "stack_out": [
        "storage_value%1#0",
        "8"
      ]
    },
    "617": {
      "op": "intc 4 // 128",
      "defined_out": [
        "128",
        "8",
        "storage_value%1#0"
      ],
      "stack_out": [
        "storage_value%1#0",
        "8",
        "128"
      ]
    },
    "619": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%1#0"
      ],
      "stack_out": [
        "tuple_item%1#0"
      ]
    },
    "620": {
      "op": "frame_dig -1",
      "stack_out": [
        "tuple_item%1#0",
        "index#0 (copy)"
      ]
    },
    "622": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "index#0 (copy)",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "tuple_item%1#0",
        "index#0 (copy)",
        "16"
      ]
    },
    "623": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "tuple_item%1#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "624": {
      "op": "intc_3 // 16",
      "stack_out": [
        "tuple_item%1#0",
        "aggregate%bytes_offset%0#0",
        "16"
      ]
    },
    "625": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%0#0"
      ],
      "stack_out": [
        "array_item%0#0"
      ]
    },
    "626": {
      "retsub": true,
      "op": "retsub"
    },
    "627": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum",
      "params": {},
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "630": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum_block@0"
    },
    "633": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [],
      "stack_out": [
        "total#0"
      ]
    },
    "634": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "total#0",
        "\"tup_bag\""
      ]
    },
    "635": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "636": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0"
      ]
    },
    "637": {
      "op": "intc_0 // 0",
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "0"
      ]
    },
    "638": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "storage_value%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "0",
        "8"
      ]
    },
    "639": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "total#0",
        "tuple_item%0#0"
      ]
    },
    "640": {
      "op": "btoi",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0"
      ]
    },
    "641": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "1"
      ]
    },
    "642": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "total#0",
        "values%0#0"
      ]
    },
    "643": {
      "op": "intc_0 // 0",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0"
      ]
    },
    "644": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum_for_header@1"
    },
    "647": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum_for_header@1",
      "stack_in": [
        "total#0",
        "values%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "649": {
      "op": "frame_dig 1",
      "defined_out": [
        "value_internal%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0",
        "values%0#0"
      ]
    },
    "651": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "value_internal%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "652": {
      "op": "bz test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum_after_for@4",
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0"
      ]
    },
    "655": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum_for_body@2"
    },
    "658": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum_for_body@2",
      "stack_in": [
        "total#0",
        "values%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "i#0"
      ]
    },
    "660": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\"",
        "i#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "\"tup_bag\""
      ]
    },
    "661": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0",
        "i#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "662": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "storage_value%1#0"
      ]
    },
    "663": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "storage_value%1#0",
        "8"
      ]
    },
    "664": {
      "op": "intc 4 // 128",
      "defined_out": [
        "128",
        "8",
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "storage_value%1#0",
        "8",
        "128"
      ]
    },
    "666": {
      "op": "extract3",
      "defined_out": [
        "i#0",
        "tuple_item%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "tuple_item%1#0"
      ]
    },
    "667": {
      "op": "uncover 1",
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "tuple_item%1#0",
        "i#0"
      ]
    },
    "669": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "i#0",
        "tuple_item%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "tuple_item%1#0",
        "i#0",
        "16"
      ]
    },
    "670": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "tuple_item%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "tuple_item%1#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "671": {
      "op": "intc_3 // 16",
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "tuple_item%1#0",
        "aggregate%bytes_offset%0#0",
        "16"
      ]
    },
    "672": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "tup#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "tup#0"
      ]
    },
    "673": {
      "op": "dup",
      "defined_out": [
        "tup#0",
        "tup#0 (copy)",
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "674": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tup#0",
        "tup#0 (copy)",
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "tup#0",
        "tup#0 (copy)",
        "0"
      ]
    },
    "675": {
      "op": "intc_1 // 8",
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "tup#0",
        "tup#0 (copy)",
        "0",
        "8"
      ]
    },
    "676": {
      "op": "extract3",
      "defined_out": [
        "tup#0",
        "tuple_item%2#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "tup#0",
        "tuple_item%2#0"
      ]
    },
    "677": {
      "op": "btoi",
      "defined_out": [
        "tup#0",
        "value_internal%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "tup#0",
        "values%1#0"
      ]
    },
    "678": {
      "op": "frame_dig 0",
      "defined_out": [
        "total#0",
        "tup#0",
        "value_internal%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "tup#0",
        "values%1#0",
        "total#0"
      ]
    },
    "680": {
      "op": "+",
      "defined_out": [
        "total#0",
        "tup#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "tup#0",
        "total#0"
      ]
    },
    "681": {
      "op": "uncover 1",
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "total#0",
        "tup#0"
      ]
    },
    "683": {
      "op": "intc_1 // 8",
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "total#0",
        "tup#0",
        "8"
      ]
    },
    "684": {
      "op": "intc_1 // 8",
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "total#0",
        "tup#0",
        "8",
        "8"
      ]
    },
    "685": {
      "op": "extract3",
      "defined_out": [
        "total#0",
        "tuple_item%3#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "total#0",
        "tuple_item%3#0"
      ]
    },
    "686": {
      "op": "btoi",
      "defined_out": [
        "total#0",
        "value_internal%0#0",
        "values%2#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "total#0",
        "values%2#0"
      ]
    },
    "687": {
      "op": "+",
      "defined_out": [
        "tmp%1#0",
        "total#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "tmp%1#0"
      ]
    },
    "688": {
      "op": "frame_bury 0",
      "defined_out": [
        "total#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0"
      ]
    },
    "690": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum_for_footer@3"
    },
    "693": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum_for_footer@3",
      "stack_in": [
        "total#0",
        "values%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "695": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0",
        "1"
      ]
    },
    "696": {
      "op": "+",
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "697": {
      "op": "frame_bury 2",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0"
      ]
    },
    "699": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum_for_header@1"
    },
    "702": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum_after_for@4",
      "stack_in": [
        "total#0",
        "values%0#0",
        "value_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "value_internal%0#0",
        "total#0"
      ]
    },
    "703": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups",
      "params": {
        "tups#0": "bytes"
      },
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "706": {
      "op": "intc_0 // 0",
      "stack_out": [
        "add_tup%0#0"
      ]
    },
    "707": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups_block@0"
    },
    "710": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups_block@0",
      "stack_in": [
        "add_tup%0#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "tups#0 (copy)"
      ],
      "stack_out": [
        "add_tup%0#0",
        "tups#0 (copy)"
      ]
    },
    "712": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tups#0 (copy)"
      ],
      "stack_out": [
        "add_tup%0#0",
        "tups#0 (copy)",
        "0"
      ]
    },
    "713": {
      "op": "extract_uint16",
      "defined_out": [],
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0"
      ]
    },
    "714": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "1"
      ]
    },
    "715": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0"
      ]
    },
    "716": {
      "op": "intc_0 // 0",
      "defined_out": [],
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0"
      ]
    },
    "717": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups_for_header@1"
    },
    "720": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups_for_header@1",
      "stack_in": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "722": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0",
        "value_internal%0#0",
        "tmp%0#0"
      ]
    },
    "724": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "tmp%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "725": {
      "op": "bz test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups_after_for@4",
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0"
      ]
    },
    "728": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups_for_body@2"
    },
    "731": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups_for_body@2",
      "stack_in": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0",
        "i#0"
      ]
    },
    "733": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "tups#0 (copy)",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0",
        "i#0",
        "tups#0 (copy)"
      ]
    },
    "735": {
      "op": "len",
      "defined_out": [
        "aggregate%total_length%0#0",
        "i#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0",
        "i#0",
        "aggregate%total_length%0#0"
      ]
    },
    "736": {
      "op": "frame_dig -1",
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0",
        "i#0",
        "aggregate%total_length%0#0",
        "tups#0 (copy)"
      ]
    },
    "738": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%total_length%0#0",
        "i#0",
        "tups#0 (copy)",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0",
        "i#0",
        "aggregate%total_length%0#0",
        "tups#0 (copy)",
        "2"
      ]
    },
    "740": {
      "op": "uncover 2",
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0",
        "i#0",
        "tups#0 (copy)",
        "2",
        "aggregate%total_length%0#0"
      ]
    },
    "742": {
      "op": "substring3",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "i#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0",
        "i#0",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "743": {
      "op": "uncover 1",
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "i#0"
      ]
    },
    "745": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "aggregate%array_trimmed%0#0",
        "i#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "i#0",
        "16"
      ]
    },
    "746": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "747": {
      "op": "intc_3 // 16",
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "16"
      ]
    },
    "748": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0",
        "array_item%0#0"
      ]
    },
    "749": {
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup",
      "op": "callsub test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup",
      "defined_out": [
        "add_tup%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0",
        "add_tup%0#0"
      ]
    },
    "752": {
      "op": "frame_bury 0",
      "defined_out": [
        "add_tup%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0"
      ]
    },
    "754": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups_for_footer@3"
    },
    "757": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups_for_footer@3",
      "stack_in": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "759": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0",
        "value_internal%0#0",
        "1"
      ]
    },
    "760": {
      "op": "+",
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "761": {
      "op": "frame_bury 2",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0"
      ]
    },
    "763": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups_for_header@1"
    },
    "766": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups_after_for@4",
      "stack_in": [
        "add_tup%0#0",
        "tmp%0#0",
        "value_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "767": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups",
      "params": {
        "tups#0": "bytes"
      },
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "770": {
      "op": "intc_0 // 0",
      "stack_out": [
        "add_tup%0#0"
      ]
    },
    "771": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups_block@0"
    },
    "774": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups_block@0",
      "stack_in": [
        "add_tup%0#0"
      ],
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "add_tup%0#0",
        "1"
      ]
    },
    "775": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "add_tup%0#0"
      ]
    },
    "776": {
      "op": "intc_0 // 0",
      "defined_out": [],
      "stack_out": [
        "add_tup%0#0",
        "value_internal%0#0"
      ]
    },
    "777": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups_for_header@1"
    },
    "780": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups_for_header@1",
      "stack_in": [
        "add_tup%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "782": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "value_internal%0#0",
        "value_internal%0#0",
        "3"
      ]
    },
    "784": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "value_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "785": {
      "op": "bz test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups_after_for@4",
      "stack_out": [
        "add_tup%0#0",
        "value_internal%0#0"
      ]
    },
    "788": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups_for_body@2"
    },
    "791": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups_for_body@2",
      "stack_in": [
        "add_tup%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "value_internal%0#0",
        "i#0"
      ]
    },
    "793": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "i#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "value_internal%0#0",
        "i#0",
        "16"
      ]
    },
    "794": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "value_internal%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "795": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "tups#0 (copy)",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "value_internal%0#0",
        "aggregate%bytes_offset%0#0",
        "tups#0 (copy)"
      ]
    },
    "797": {
      "op": "uncover 1",
      "stack_out": [
        "add_tup%0#0",
        "value_internal%0#0",
        "tups#0 (copy)",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "799": {
      "op": "intc_3 // 16",
      "stack_out": [
        "add_tup%0#0",
        "value_internal%0#0",
        "tups#0 (copy)",
        "aggregate%bytes_offset%0#0",
        "16"
      ]
    },
    "800": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "value_internal%0#0",
        "array_item%0#0"
      ]
    },
    "801": {
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup",
      "op": "callsub test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup",
      "defined_out": [
        "add_tup%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "value_internal%0#0",
        "add_tup%0#0"
      ]
    },
    "804": {
      "op": "frame_bury 0",
      "defined_out": [
        "add_tup%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "value_internal%0#0"
      ]
    },
    "806": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups_for_footer@3"
    },
    "809": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups_for_footer@3",
      "stack_in": [
        "add_tup%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "811": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "value_internal%0#0",
        "value_internal%0#0",
        "1"
      ]
    },
    "812": {
      "op": "+",
      "stack_out": [
        "add_tup%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "813": {
      "op": "frame_bury 1",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "add_tup%0#0",
        "value_internal%0#0"
      ]
    },
    "815": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups_for_header@1"
    },
    "818": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups_after_for@4",
      "stack_in": [
        "add_tup%0#0",
        "value_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "819": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a",
      "params": {
        "a#0": "uint64"
      },
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "822": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a_block@0"
    },
    "825": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner",
      "op": "callsub _check_owner"
    },
    "828": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "829": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "830": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "831": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "0"
      ]
    },
    "832": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "0",
        "8"
      ]
    },
    "833": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "834": {
      "op": "btoi",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "835": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "1"
      ]
    },
    "836": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "values%0#0"
      ]
    },
    "837": {
      "op": "intc_0 // 0",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0"
      ]
    },
    "838": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a_for_header@1"
    },
    "841": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a_for_header@1",
      "stack_in": [
        "values%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "843": {
      "op": "frame_dig 0",
      "defined_out": [
        "value_internal%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0",
        "values%0#0"
      ]
    },
    "845": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "value_internal%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "846": {
      "op": "bz test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a_after_for@4",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0"
      ]
    },
    "849": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a_for_body@2"
    },
    "852": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a_for_body@2",
      "stack_in": [
        "values%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0"
      ]
    },
    "854": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\"",
        "i#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "\"tup_bag\""
      ]
    },
    "855": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0",
        "i#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "856": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "storage_value%1#0"
      ]
    },
    "857": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "storage_value%1#0",
        "a#0 (copy)"
      ]
    },
    "859": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "storage_value%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "860": {
      "op": "cover 1",
      "defined_out": [
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0"
      ]
    },
    "862": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)"
      ]
    },
    "863": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)",
        "8"
      ]
    },
    "864": {
      "op": "intc 4 // 128",
      "defined_out": [
        "128",
        "8",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)",
        "8",
        "128"
      ]
    },
    "866": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0"
      ]
    },
    "867": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%extract%1#0",
        "encoded_value%0#0",
        "i#0",
        "i#0 (copy)",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "i#0 (copy)"
      ]
    },
    "869": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "aggregate%extract%1#0",
        "encoded_value%0#0",
        "i#0",
        "i#0 (copy)",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "i#0 (copy)",
        "16"
      ]
    },
    "870": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%extract%1#0",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "871": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%1#0 (copy)",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%extract%1#0 (copy)"
      ]
    },
    "873": {
      "op": "uncover 1",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%extract%1#0 (copy)",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "875": {
      "op": "intc_3 // 16",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%extract%1#0 (copy)",
        "aggregate%bytes_offset%0#0",
        "16"
      ]
    },
    "876": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "aggregate%extract%1#0",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "877": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%encoded_element%0#0",
        "aggregate%extract%1#0",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%encoded_element%0#0",
        "0"
      ]
    },
    "878": {
      "op": "uncover 4",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%encoded_element%0#0",
        "0",
        "encoded_value%0#0"
      ]
    },
    "880": {
      "op": "replace3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%updated_data%0#0",
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%updated_data%0#0"
      ]
    },
    "881": {
      "op": "uncover 3",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%updated_data%0#0",
        "i#0"
      ]
    },
    "883": {
      "op": "intc_3 // 16",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%updated_data%0#0",
        "i#0",
        "16"
      ]
    },
    "884": {
      "op": "*",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%updated_data%0#0",
        "aggregate%write_offset%0#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%updated_data%0#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "885": {
      "op": "uncover 2",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "storage_value%1#0",
        "aggregate%updated_data%0#0",
        "aggregate%write_offset%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "887": {
      "op": "uncover 1",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "storage_value%1#0",
        "aggregate%updated_data%0#0",
        "aggregate%extract%1#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "889": {
      "op": "uncover 2",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%write_offset%0#0",
        "aggregate%updated_data%0#0"
      ]
    },
    "891": {
      "error": "index access is out of bounds",
      "op": "replace3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%updated_array%0#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "storage_value%1#0",
        "aggregate%updated_array%0#0"
      ]
    },
    "892": {
      "op": "uncover 1",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "aggregate%updated_array%0#0",
        "storage_value%1#0"
      ]
    },
    "894": {
      "op": "intc_1 // 8",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "aggregate%updated_array%0#0",
        "storage_value%1#0",
        "8"
      ]
    },
    "895": {
      "op": "uncover 2",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "storage_value%1#0",
        "8",
        "aggregate%updated_array%0#0"
      ]
    },
    "897": {
      "op": "replace3",
      "defined_out": [
        "updated_tuple%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "updated_tuple%0#0"
      ]
    },
    "898": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "updated_tuple%0#0",
        "\"tup_bag\""
      ]
    },
    "899": {
      "op": "uncover 1",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "\"tup_bag\"",
        "updated_tuple%0#0"
      ]
    },
    "901": {
      "op": "box_put",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0"
      ]
    },
    "902": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a_for_footer@3"
    },
    "905": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a_for_footer@3",
      "stack_in": [
        "values%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "907": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0",
        "1"
      ]
    },
    "908": {
      "op": "+",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "909": {
      "op": "frame_bury 1",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0"
      ]
    },
    "911": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a_for_header@1"
    },
    "914": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a_after_for@4",
      "stack_in": [
        "values%0#0",
        "value_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "915": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b",
      "params": {
        "b#0": "uint64"
      },
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "918": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b_block@0"
    },
    "921": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner",
      "op": "callsub _check_owner"
    },
    "924": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "925": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "926": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "927": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "0"
      ]
    },
    "928": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "0",
        "8"
      ]
    },
    "929": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "930": {
      "op": "btoi",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "931": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "1"
      ]
    },
    "932": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "values%0#0"
      ]
    },
    "933": {
      "op": "intc_0 // 0",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0"
      ]
    },
    "934": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b_for_header@1"
    },
    "937": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b_for_header@1",
      "stack_in": [
        "values%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "939": {
      "op": "frame_dig 0",
      "defined_out": [
        "value_internal%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0",
        "values%0#0"
      ]
    },
    "941": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "value_internal%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "942": {
      "op": "bz test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b_after_for@4",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0"
      ]
    },
    "945": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b_for_body@2"
    },
    "948": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b_for_body@2",
      "stack_in": [
        "values%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0"
      ]
    },
    "950": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\"",
        "i#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "\"tup_bag\""
      ]
    },
    "951": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0",
        "i#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "952": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "storage_value%1#0"
      ]
    },
    "953": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "storage_value%1#0",
        "b#0 (copy)"
      ]
    },
    "955": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "storage_value%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "956": {
      "op": "cover 1",
      "defined_out": [
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0"
      ]
    },
    "958": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)"
      ]
    },
    "959": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)",
        "8"
      ]
    },
    "960": {
      "op": "intc 4 // 128",
      "defined_out": [
        "128",
        "8",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)",
        "8",
        "128"
      ]
    },
    "962": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0"
      ]
    },
    "963": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%extract%1#0",
        "encoded_value%0#0",
        "i#0",
        "i#0 (copy)",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "i#0 (copy)"
      ]
    },
    "965": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "aggregate%extract%1#0",
        "encoded_value%0#0",
        "i#0",
        "i#0 (copy)",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "i#0 (copy)",
        "16"
      ]
    },
    "966": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%extract%1#0",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "967": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%1#0 (copy)",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%extract%1#0 (copy)"
      ]
    },
    "969": {
      "op": "uncover 1",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%extract%1#0 (copy)",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "971": {
      "op": "intc_3 // 16",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%extract%1#0 (copy)",
        "aggregate%bytes_offset%0#0",
        "16"
      ]
    },
    "972": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "aggregate%extract%1#0",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "973": {
      "op": "intc_1 // 8",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%encoded_element%0#0",
        "8"
      ]
    },
    "974": {
      "op": "uncover 4",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%encoded_element%0#0",
        "8",
        "encoded_value%0#0"
      ]
    },
    "976": {
      "op": "replace3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%updated_data%0#0",
        "i#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%updated_data%0#0"
      ]
    },
    "977": {
      "op": "uncover 3",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%updated_data%0#0",
        "i#0"
      ]
    },
    "979": {
      "op": "intc_3 // 16",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%updated_data%0#0",
        "i#0",
        "16"
      ]
    },
    "980": {
      "op": "*",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%updated_data%0#0",
        "aggregate%write_offset%0#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%updated_data%0#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "981": {
      "op": "uncover 2",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "storage_value%1#0",
        "aggregate%updated_data%0#0",
        "aggregate%write_offset%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "983": {
      "op": "uncover 1",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "storage_value%1#0",
        "aggregate%updated_data%0#0",
        "aggregate%extract%1#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "985": {
      "op": "uncover 2",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%write_offset%0#0",
        "aggregate%updated_data%0#0"
      ]
    },
    "987": {
      "error": "index access is out of bounds",
      "op": "replace3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%updated_array%0#0",
        "storage_value%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "storage_value%1#0",
        "aggregate%updated_array%0#0"
      ]
    },
    "988": {
      "op": "uncover 1",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "aggregate%updated_array%0#0",
        "storage_value%1#0"
      ]
    },
    "990": {
      "op": "intc_1 // 8",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "aggregate%updated_array%0#0",
        "storage_value%1#0",
        "8"
      ]
    },
    "991": {
      "op": "uncover 2",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "storage_value%1#0",
        "8",
        "aggregate%updated_array%0#0"
      ]
    },
    "993": {
      "op": "replace3",
      "defined_out": [
        "updated_tuple%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "updated_tuple%0#0"
      ]
    },
    "994": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "updated_tuple%0#0",
        "\"tup_bag\""
      ]
    },
    "995": {
      "op": "uncover 1",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "\"tup_bag\"",
        "updated_tuple%0#0"
      ]
    },
    "997": {
      "op": "box_put",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0"
      ]
    },
    "998": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b_for_footer@3"
    },
    "1001": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b_for_footer@3",
      "stack_in": [
        "values%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "1003": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0",
        "1"
      ]
    },
    "1004": {
      "op": "+",
      "stack_out": [
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "1005": {
      "op": "frame_bury 1",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "value_internal%0#0"
      ]
    },
    "1007": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b_for_header@1"
    },
    "1010": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b_after_for@4",
      "stack_in": [
        "values%0#0",
        "value_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1011": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_3_tups",
      "params": {
        "start#0": "uint64"
      },
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_3_tups",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1014": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_3_tups_block@0"
    },
    "1017": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_3_tups_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "1018": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1019": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "1020": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "0"
      ]
    },
    "1021": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "0",
        "8"
      ]
    },
    "1022": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "1023": {
      "op": "btoi",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "1024": {
      "op": "frame_dig -1",
      "defined_out": [
        "start#0 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "start#0 (copy)"
      ]
    },
    "1026": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "start#0 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "start#0 (copy)",
        "3"
      ]
    },
    "1028": {
      "op": "+",
      "defined_out": [
        "tmp%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "tmp%0#0"
      ]
    },
    "1029": {
      "op": ">=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1030": {
      "error": "not enough items",
      "op": "assert // not enough items",
      "stack_out": []
    },
    "1031": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "1032": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ],
      "stack_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "1033": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "storage_value%1#0"
      ],
      "stack_out": [
        "storage_value%1#0"
      ]
    },
    "1034": {
      "op": "intc_1 // 8",
      "stack_out": [
        "storage_value%1#0",
        "8"
      ]
    },
    "1035": {
      "op": "intc 4 // 128",
      "defined_out": [
        "128",
        "8",
        "storage_value%1#0"
      ],
      "stack_out": [
        "storage_value%1#0",
        "8",
        "128"
      ]
    },
    "1037": {
      "op": "extract3",
      "defined_out": [
        "items#0"
      ],
      "stack_out": [
        "items#0"
      ]
    },
    "1038": {
      "op": "frame_dig -1",
      "stack_out": [
        "items#0",
        "start#0 (copy)"
      ]
    },
    "1040": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "items#0",
        "start#0 (copy)"
      ],
      "stack_out": [
        "items#0",
        "start#0 (copy)",
        "16"
      ]
    },
    "1041": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "items#0"
      ],
      "stack_out": [
        "items#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "1042": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "items#0",
        "items#0 (copy)"
      ],
      "stack_out": [
        "items#0",
        "aggregate%bytes_offset%0#0",
        "items#0 (copy)"
      ]
    },
    "1044": {
      "op": "uncover 1",
      "stack_out": [
        "items#0",
        "items#0 (copy)",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "1046": {
      "op": "intc_3 // 16",
      "stack_out": [
        "items#0",
        "items#0 (copy)",
        "aggregate%bytes_offset%0#0",
        "16"
      ]
    },
    "1047": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "items#0"
      ],
      "stack_out": [
        "items#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "1048": {
      "op": "cover 1",
      "defined_out": [
        "array_item%0#0",
        "items#0"
      ],
      "stack_out": [
        "array_item%0#0",
        "items#0"
      ]
    },
    "1050": {
      "op": "frame_dig -1",
      "stack_out": [
        "array_item%0#0",
        "items#0",
        "start#0 (copy)"
      ]
    },
    "1052": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "array_item%0#0",
        "items#0",
        "start#0 (copy)"
      ],
      "stack_out": [
        "array_item%0#0",
        "items#0",
        "start#0 (copy)",
        "1"
      ]
    },
    "1053": {
      "op": "+",
      "defined_out": [
        "array_item%0#0",
        "items#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "array_item%0#0",
        "items#0",
        "tmp%2#0"
      ]
    },
    "1054": {
      "op": "intc_3 // 16",
      "stack_out": [
        "array_item%0#0",
        "items#0",
        "tmp%2#0",
        "16"
      ]
    },
    "1055": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%1#0",
        "array_item%0#0",
        "items#0"
      ],
      "stack_out": [
        "array_item%0#0",
        "items#0",
        "aggregate%bytes_offset%1#0"
      ]
    },
    "1056": {
      "op": "dig 1",
      "stack_out": [
        "array_item%0#0",
        "items#0",
        "aggregate%bytes_offset%1#0",
        "items#0 (copy)"
      ]
    },
    "1058": {
      "op": "uncover 1",
      "stack_out": [
        "array_item%0#0",
        "items#0",
        "items#0 (copy)",
        "aggregate%bytes_offset%1#0"
      ]
    },
    "1060": {
      "op": "intc_3 // 16",
      "stack_out": [
        "array_item%0#0",
        "items#0",
        "items#0 (copy)",
        "aggregate%bytes_offset%1#0",
        "16"
      ]
    },
    "1061": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%1#0",
        "array_item%0#0",
        "items#0"
      ],
      "stack_out": [
        "array_item%0#0",
        "items#0",
        "aggregate%encoded_element%1#0"
      ]
    },
    "1062": {
      "op": "cover 1",
      "defined_out": [
        "array_item%0#0",
        "array_item%1#0",
        "items#0"
      ],
      "stack_out": [
        "array_item%0#0",
        "array_item%1#0",
        "items#0"
      ]
    },
    "1064": {
      "op": "frame_dig -1",
      "stack_out": [
        "array_item%0#0",
        "array_item%1#0",
        "items#0",
        "start#0 (copy)"
      ]
    },
    "1066": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "array_item%0#0",
        "array_item%1#0",
        "items#0",
        "start#0 (copy)"
      ],
      "stack_out": [
        "array_item%0#0",
        "array_item%1#0",
        "items#0",
        "start#0 (copy)",
        "2"
      ]
    },
    "1068": {
      "op": "+",
      "defined_out": [
        "array_item%0#0",
        "array_item%1#0",
        "items#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "array_item%0#0",
        "array_item%1#0",
        "items#0",
        "tmp%3#0"
      ]
    },
    "1069": {
      "op": "intc_3 // 16",
      "stack_out": [
        "array_item%0#0",
        "array_item%1#0",
        "items#0",
        "tmp%3#0",
        "16"
      ]
    },
    "1070": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%2#0",
        "array_item%0#0",
        "array_item%1#0",
        "items#0"
      ],
      "stack_out": [
        "array_item%0#0",
        "array_item%1#0",
        "items#0",
        "aggregate%bytes_offset%2#0"
      ]
    },
    "1071": {
      "op": "intc_3 // 16",
      "stack_out": [
        "array_item%0#0",
        "array_item%1#0",
        "items#0",
        "aggregate%bytes_offset%2#0",
        "16"
      ]
    },
    "1072": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%0#0",
        "array_item%1#0",
        "array_item%2#0"
      ],
      "stack_out": [
        "array_item%0#0",
        "array_item%1#0",
        "array_item%2#0"
      ]
    },
    "1073": {
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x",
        "array_item%0#0",
        "array_item%1#0",
        "array_item%2#0"
      ],
      "stack_out": [
        "array_item%0#0",
        "array_item%1#0",
        "array_item%2#0",
        "0x"
      ]
    },
    "1074": {
      "op": "uncover 3",
      "stack_out": [
        "array_item%1#0",
        "array_item%2#0",
        "0x",
        "array_item%0#0"
      ]
    },
    "1076": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "array_item%1#0",
        "array_item%2#0"
      ],
      "stack_out": [
        "array_item%1#0",
        "array_item%2#0",
        "aggregate%head%0#0"
      ]
    },
    "1077": {
      "op": "uncover 2",
      "stack_out": [
        "array_item%2#0",
        "aggregate%head%0#0",
        "array_item%1#0"
      ]
    },
    "1079": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "array_item%2#0"
      ],
      "stack_out": [
        "array_item%2#0",
        "aggregate%head%1#0"
      ]
    },
    "1080": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "array_item%2#0"
      ]
    },
    "1082": {
      "op": "concat",
      "defined_out": [
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0"
      ]
    },
    "1083": {
      "retsub": true,
      "op": "retsub"
    },
    "1084": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups",
      "params": {},
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1087": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups_block@0"
    },
    "1090": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1091": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "1092": {
      "op": "extract 6 2",
      "defined_out": [],
      "stack_out": [
        "result#0"
      ]
    },
    "1095": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "result#0",
        "\"tup_bag\""
      ]
    },
    "1096": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "result#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1097": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "result#0",
        "storage_value%0#0"
      ]
    },
    "1098": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "storage_value%0#0"
      ],
      "stack_out": [
        "result#0",
        "storage_value%0#0",
        "8"
      ]
    },
    "1099": {
      "op": "intc 4 // 128",
      "defined_out": [
        "128",
        "8",
        "storage_value%0#0"
      ],
      "stack_out": [
        "result#0",
        "storage_value%0#0",
        "8",
        "128"
      ]
    },
    "1101": {
      "op": "extract3",
      "defined_out": [],
      "stack_out": [
        "result#0",
        "items#0"
      ]
    },
    "1102": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "result#0",
        "items#0",
        "\"tup_bag\""
      ]
    },
    "1103": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "1104": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "storage_value%1#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "storage_value%1#0"
      ]
    },
    "1105": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "items#0",
        "storage_value%1#0",
        "0"
      ]
    },
    "1106": {
      "op": "intc_1 // 8",
      "stack_out": [
        "result#0",
        "items#0",
        "storage_value%1#0",
        "0",
        "8"
      ]
    },
    "1107": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%1#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tuple_item%1#0"
      ]
    },
    "1108": {
      "op": "btoi",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0"
      ]
    },
    "1109": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "1"
      ]
    },
    "1110": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0"
      ]
    },
    "1111": {
      "op": "intc_0 // 0",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0"
      ]
    },
    "1112": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups_for_header@1"
    },
    "1115": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups_for_header@1",
      "stack_in": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "1117": {
      "op": "frame_dig 2",
      "defined_out": [
        "value_internal%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0",
        "values%0#0"
      ]
    },
    "1119": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "value_internal%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "1120": {
      "op": "bz test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups_after_for@4",
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0"
      ]
    },
    "1123": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups_for_body@2"
    },
    "1126": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups_for_body@2",
      "stack_in": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "i#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "i#0"
      ]
    },
    "1128": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "i#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "i#0",
        "16"
      ]
    },
    "1129": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "1130": {
      "op": "frame_dig 1",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "items#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "aggregate%bytes_offset%0#0",
        "items#0"
      ]
    },
    "1132": {
      "op": "uncover 1",
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "items#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "1134": {
      "op": "intc_3 // 16",
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "items#0",
        "aggregate%bytes_offset%0#0",
        "16"
      ]
    },
    "1135": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%0#0",
        "items#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "array_item%0#0"
      ]
    },
    "1136": {
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x",
        "array_item%0#0",
        "items#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "array_item%0#0",
        "0x"
      ]
    },
    "1137": {
      "op": "uncover 1",
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "0x",
        "array_item%0#0"
      ]
    },
    "1139": {
      "op": "concat",
      "defined_out": [
        "items#0",
        "tmp%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "tmp%0#0"
      ]
    },
    "1140": {
      "op": "frame_dig 0",
      "defined_out": [
        "items#0",
        "result#0",
        "tmp%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "tmp%0#0",
        "result#0"
      ]
    },
    "1142": {
      "op": "dup",
      "defined_out": [
        "items#0",
        "result#0",
        "result#0 (copy)",
        "tmp%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "tmp%0#0",
        "result#0 (copy)",
        "result#0 (copy)"
      ]
    },
    "1143": {
      "op": "cover 2",
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "result#0",
        "tmp%0#0",
        "result#0 (copy)"
      ]
    },
    "1145": {
      "op": "uncover 1",
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "result#0",
        "result#0 (copy)",
        "tmp%0#0"
      ]
    },
    "1147": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "items#0",
        "result#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "result#0",
        "concat%0#0"
      ]
    },
    "1148": {
      "op": "cover 1",
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "concat%0#0",
        "result#0"
      ]
    },
    "1150": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "concat%0#0",
        "items#0",
        "result#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "concat%0#0",
        "result#0",
        "0"
      ]
    },
    "1151": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "items#0",
        "result#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "1152": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "extract_uint16%0#0",
        "items#0",
        "result#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "1153": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0",
        "items#0",
        "result#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "1154": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0",
        "items#0",
        "result#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "1155": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "items#0",
        "result#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "1158": {
      "op": "uncover 1",
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "1160": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "1161": {
      "op": "uncover 2",
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "1163": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+(uint64,uint64)[])%0#0",
        "items#0",
        "result#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "as_Encoded(len+(uint64,uint64)[])%0#0"
      ]
    },
    "1164": {
      "op": "frame_bury 0",
      "defined_out": [
        "items#0",
        "result#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0"
      ]
    },
    "1166": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups_for_footer@3"
    },
    "1169": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups_for_footer@3",
      "stack_in": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "1171": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0",
        "1"
      ]
    },
    "1172": {
      "op": "+",
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "1173": {
      "op": "frame_bury 3",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0"
      ]
    },
    "1175": {
      "op": "b test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups_for_header@1"
    },
    "1178": {
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups_after_for@4",
      "stack_in": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "values%0#0",
        "value_internal%0#0",
        "result#0"
      ]
    },
    "1179": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner",
      "params": {},
      "block": "_check_owner",
      "stack_in": [],
      "op": "b _check_owner_block@0"
    },
    "1182": {
      "block": "_check_owner_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "1183": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1184": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "1185": {
      "op": "intc 5 // 34176",
      "defined_out": [
        "34176",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "34176"
      ]
    },
    "1187": {
      "op": "getbit",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "1188": {
      "error": "app not bootstrapped",
      "op": "assert // app not bootstrapped",
      "stack_out": []
    },
    "1189": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "1190": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ],
      "stack_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "1191": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "storage_value%1#0"
      ],
      "stack_out": [
        "storage_value%1#0"
      ]
    },
    "1192": {
      "op": "pushint 136 // 136",
      "defined_out": [
        "136",
        "storage_value%1#0"
      ],
      "stack_out": [
        "storage_value%1#0",
        "136"
      ]
    },
    "1195": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "136",
        "32",
        "storage_value%1#0"
      ],
      "stack_out": [
        "storage_value%1#0",
        "136",
        "32"
      ]
    },
    "1197": {
      "op": "extract3",
      "defined_out": [
        "values%1#0"
      ],
      "stack_out": [
        "values%1#0"
      ]
    },
    "1198": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "values%1#0",
        "tmp%0#0"
      ]
    },
    "1200": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1201": {
      "error": "sender not authorized",
      "op": "assert // sender not authorized",
      "stack_out": []
    },
    "1202": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "1203": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ]
    },
    "1204": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "defined_out": [
        "storage_value%2#0"
      ],
      "stack_out": [
        "storage_value%2#0"
      ]
    },
    "1205": {
      "op": "pushint 168 // 168",
      "defined_out": [
        "168",
        "storage_value%2#0"
      ],
      "stack_out": [
        "storage_value%2#0",
        "168"
      ]
    },
    "1208": {
      "op": "intc_1 // 8",
      "defined_out": [
        "168",
        "8",
        "storage_value%2#0"
      ],
      "stack_out": [
        "storage_value%2#0",
        "168",
        "8"
      ]
    },
    "1209": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%2#0"
      ],
      "stack_out": [
        "tuple_item%2#0"
      ]
    },
    "1210": {
      "op": "btoi",
      "defined_out": [
        "values%2#0"
      ],
      "stack_out": [
        "values%2#0"
      ]
    },
    "1211": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "tmp%2#0",
        "values%2#0"
      ],
      "stack_out": [
        "values%2#0",
        "tmp%2#0"
      ]
    },
    "1213": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1214": {
      "error": "this error should be impossible",
      "op": "assert // this error should be impossible",
      "stack_out": []
    },
    "1215": {
      "retsub": true,
      "op": "retsub"
    }
  }
}