{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8LA;;;AAEW;;AAAA;AAAA;AAAA;AAAA;AAAQ;;AAAA;AAAA;AAAA;AAAA;AAAR;AAAP;AAGJ;;;;;;AA5H0B;;AAAoB;AAAA;AAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACc;;AAAmB;AAAnB;AAAwB;;AAAmB;AAAnB;AAAA;AAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACW;;AAAmB;AAAnB;AAAwB;;AAAmB;AAAnB;AAAA;;AAHzB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAd;AAAA;AAAA;AAWM;;AACA;AAAA;AAGA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AALK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGL;AAHK;AAAA;AAAA;;;AAGL;AAHK;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAIL;AAJK;AAAA;AAAA;;;AAIL;AAJK;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAX;;;;;AAAA;AAAA;AAQA;AAAoB;AAApB;AACgB;;;AAAA;AAAhB;AAAA;AAAA;;AAIQ;;AAAA;AACG;AAAX;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACW;AAAX;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACW;;AAAX;AAAM;;AAAN;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAGK;AADc;AAAA;AAAA;AAAA;AACH;AADG;AAAA;AACQ;;AADR;AAAA;AAAA;AAAA;AAGZ;;AAAA;AAAP;AAEsC;AAApB;AAAA;AAAA;AAAA;AAAoB;AAApB;AAAA;AAAoB;AAApB;AAAA;AAAA;AAAA;AACK;AAAhB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAP;AACuB;AAAhB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAP;AACuB;;AAAhB;AAAA;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAP;AAEA;;AACO;;AAAA;AAAP;AAE2B;AAAb;AAAA;AAAA;AAAA;AAAwB;AAAxB;AAAA;AAAmC;;AAAnC;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACE;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAT;;AAAA;AAAP;AAE2C;AAAZ;AAAA;AAAA;AAAA;AAAuB;AAAvB;AAAA;AAAkC;;AAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAf;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAT;;AAAA;AAAP;AAEe;AACX;;;;;;;;;;AADW;AACK;;;;;;;;;;AADL;AACqB;;;;;;;;;;AADrB;AAAA;AAAA;AAGR;AAAP;;AAER;;;AAEe;AAAA;AAAA;AAAA;AAAoB;AAApB;AAAP;AACA;AAAA;AAAA;AAAA;AAAc;AAAA;AAAA;AAAA;AAAd;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAA;AAAA;AAAA;;AAER;;;AAEuB;AAAA;AAAA;AAAA;AAAR;;AAAA;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAER;;;AAEkC;AAAA;AAAA;AAAA;AAA1B;;AAAA;AAAA;AACgC;AAAA;AAAA;AAAA;AAAd;;AAAlB;;AAAA;;AAAA;AACO;;AAAA;;;AAAA;AAAP;AACgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAnB;;AAAA;AAAb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIY;;AAAR;AAAA;AAAA;AAAoB;;;AAApB;AAAA;AAAiC;;;AAAjC;AAAA;AAAA;AAAA;AAGe;AAAA;AAAA;;AAAA;AAAA;AAAY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAS;AAAA;;AAAA;AAAA;AAAA;AAAxC;;AAAA;AAAA;;AAAA;;AAAA;;AACO;;AAAA;AAAP;AACA;AACO;AAAA;AAAP;AACA;;;AACA;AAER;;;AAEY;;AAAJ;AACsB;;AAAlB;;AAAJ;AACI;;AAAJ;;AACiB;;AAAA;AAAb;;AAAA;AAAA;AAAJ;;;AAIR;;;AAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACkB;;AAAlB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACa;;AAAA;AAAb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAIO;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAER;;;AAEkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD;AAAA;;;AAAA;AAAe;;;AAAf;AAAT;;AACY;;AAAT;AAAX;;;AACmB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AACA;;AAAA;AACA;;;;;AACJ;;AAAA;AAxHR;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA+GK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAVA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA7FL;;;AAAA;AAAA;;;AA6FK;;;AAAA;;;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AApFL;;;AAAA;AAoFK;;;AAAA;;;;AAZA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAjEL;;;AAAA;AAiEK;;;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA5DL;;;AAAA;AAAA;;;AAAA;AA4DK;;;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtDL;;;AAsDK;;;AAAA;;;;AA9BA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAxBL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 16"
    },
    "7": {
      "op": "bytecblock 0x \"nested\" \"num_payments\" \"payments\" 0x70 0x6c \"box\" 0x151f7c75 \"box_map\""
    },
    "60": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "62": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "65": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.contract.Contract.__init__",
      "op": "callsub __init__"
    },
    "68": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "71": {
      "op": "return",
      "stack_out": []
    },
    "72": {
      "subroutine": "test_cases.mutable_native_types.contract.add",
      "params": {
        "val#0": "bytes"
      },
      "block": "add",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "75": {
      "block": "add_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "val#0 (copy)"
      ],
      "stack_out": [
        "val#0 (copy)"
      ]
    },
    "77": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "val#0 (copy)"
      ],
      "stack_out": [
        "val#0 (copy)",
        "0"
      ]
    },
    "78": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "val#0 (copy)"
      ],
      "stack_out": [
        "val#0 (copy)",
        "0",
        "8"
      ]
    },
    "79": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "80": {
      "op": "btoi",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "81": {
      "op": "frame_dig -1",
      "stack_out": [
        "values%0#0",
        "val#0 (copy)"
      ]
    },
    "83": {
      "op": "intc_2 // 8",
      "stack_out": [
        "values%0#0",
        "val#0 (copy)",
        "8"
      ]
    },
    "84": {
      "op": "dup",
      "stack_out": [
        "values%0#0",
        "val#0 (copy)",
        "8",
        "8"
      ]
    },
    "85": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "tuple_item%1#0"
      ]
    },
    "86": {
      "op": "btoi",
      "defined_out": [
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "values%0#0",
        "values%1#0"
      ]
    },
    "87": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "88": {
      "retsub": true,
      "op": "retsub"
    },
    "89": {
      "subroutine": "test_cases.mutable_native_types.contract.do_something",
      "params": {
        "pay#0": "bytes"
      },
      "block": "do_something",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "92": {
      "block": "do_something_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "pay%out#0"
      ],
      "stack_out": [
        "pay%out#0"
      ]
    },
    "94": {
      "retsub": true,
      "op": "retsub"
    },
    "95": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.__init__",
      "params": {},
      "block": "__init___block@0",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "97": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "98": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "99": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%as_Encoded(uint64)%0#1"
      ]
    },
    "100": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%as_Encoded(uint64)%0#1",
        "0x"
      ]
    },
    "101": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#1"
      ]
    },
    "102": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%encoded%0#1"
      ]
    },
    "103": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded%0#1",
        "tmp%1#0"
      ]
    },
    "104": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#1",
        "aggregate%encoded%0#1"
      ],
      "stack_out": [
        "aggregate%encoded%0#1",
        "aggregate%as_Encoded(uint64)%1#1"
      ]
    },
    "105": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%1#1"
      ],
      "stack_out": [
        "aggregate%encoded%1#1"
      ]
    },
    "106": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%encoded%1#1",
        "0x"
      ]
    },
    "107": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "108": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "110": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "1"
      ]
    },
    "111": {
      "op": "+",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "112": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "114": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "1"
      ]
    },
    "115": {
      "op": "+",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "116": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%6#0",
        "tmp%4#0"
      ]
    },
    "117": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%2#1",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%6#0",
        "aggregate%as_Encoded(uint64)%2#1"
      ]
    },
    "118": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%2#0",
        "tmp%6#0",
        "aggregate%as_Encoded(uint64)%2#1",
        "0x"
      ]
    },
    "119": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%6#0",
        "0x",
        "aggregate%as_Encoded(uint64)%2#1"
      ]
    },
    "120": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%3#1",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%6#0",
        "aggregate%encoded%3#1"
      ]
    },
    "121": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "aggregate%encoded%3#1",
        "tmp%6#0"
      ]
    },
    "122": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%3#1",
        "aggregate%encoded%3#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%encoded%3#1",
        "aggregate%as_Encoded(uint64)%3#1"
      ]
    },
    "123": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%4#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%encoded%4#1"
      ]
    },
    "124": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%2#0",
        "aggregate%encoded%4#1",
        "0x"
      ]
    },
    "125": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%7#0"
      ]
    },
    "126": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "128": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%8#0",
        "1"
      ]
    },
    "129": {
      "op": "+",
      "defined_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "130": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%10#0",
        "tmp%2#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "132": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "1"
      ]
    },
    "133": {
      "op": "+",
      "defined_out": [
        "tmp%11#0",
        "tmp%2#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "134": {
      "op": "cover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "136": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "tmp%7#0",
        "tmp%9#0",
        "0x"
      ]
    },
    "137": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%11#0",
        "tmp%7#0",
        "tmp%9#0",
        "0x",
        "tmp%2#0"
      ]
    },
    "139": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%6#1",
        "tmp%11#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%encoded%6#1"
      ]
    },
    "140": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%11#0",
        "tmp%9#0",
        "aggregate%encoded%6#1",
        "tmp%7#0"
      ]
    },
    "142": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%7#1",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%9#0",
        "aggregate%encoded%7#1"
      ]
    },
    "143": {
      "op": "cover 2",
      "stack_out": [
        "aggregate%encoded%7#1",
        "tmp%11#0",
        "tmp%9#0"
      ]
    },
    "145": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%4#1",
        "aggregate%encoded%7#1",
        "tmp%11#0"
      ],
      "stack_out": [
        "aggregate%encoded%7#1",
        "tmp%11#0",
        "aggregate%as_Encoded(uint64)%4#1"
      ]
    },
    "146": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%encoded%7#1",
        "tmp%11#0",
        "aggregate%as_Encoded(uint64)%4#1",
        "0x"
      ]
    },
    "147": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded%7#1",
        "tmp%11#0",
        "0x",
        "aggregate%as_Encoded(uint64)%4#1"
      ]
    },
    "148": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%7#1",
        "aggregate%encoded%8#1",
        "tmp%11#0"
      ],
      "stack_out": [
        "aggregate%encoded%7#1",
        "tmp%11#0",
        "aggregate%encoded%8#1"
      ]
    },
    "149": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded%7#1",
        "aggregate%encoded%8#1",
        "tmp%11#0"
      ]
    },
    "150": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%5#1",
        "aggregate%encoded%7#1",
        "aggregate%encoded%8#1"
      ],
      "stack_out": [
        "aggregate%encoded%7#1",
        "aggregate%encoded%8#1",
        "aggregate%as_Encoded(uint64)%5#1"
      ]
    },
    "151": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%7#1",
        "aggregate%encoded%9#1"
      ],
      "stack_out": [
        "aggregate%encoded%7#1",
        "aggregate%encoded%9#1"
      ]
    },
    "152": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%encoded%7#1",
        "aggregate%encoded%9#1",
        "0x"
      ]
    },
    "153": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%10#1",
        "aggregate%encoded%7#1"
      ],
      "stack_out": [
        "aggregate%encoded%7#1",
        "aggregate%encoded%10#1"
      ]
    },
    "154": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%11#1"
      ],
      "stack_out": [
        "aggregate%encoded%11#1"
      ]
    },
    "155": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%encoded%11#1",
        "0x"
      ]
    },
    "156": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "157": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "\"nested\""
      ]
    },
    "158": {
      "op": "swap",
      "stack_out": [
        "\"nested\"",
        "tmp%12#0"
      ]
    },
    "159": {
      "op": "app_global_put",
      "stack_out": []
    },
    "160": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "162": {
      "op": "dup",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "163": {
      "op": "swap",
      "stack_out": [
        "tmp%14#0",
        "tmp%13#0"
      ]
    },
    "164": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%13#0",
        "0"
      ]
    },
    "165": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%as_bytes%0#1"
      ]
    },
    "166": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%0#1",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%len_u16%0#1"
      ]
    },
    "169": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%len_u16%0#1",
        "0x"
      ]
    },
    "170": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%13#1",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%encoded%13#1"
      ]
    },
    "171": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%encoded%13#1",
        "0x"
      ]
    },
    "172": {
      "op": "concat",
      "defined_out": [
        "encoded_array%0#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%13#0",
        "encoded_array%0#0"
      ]
    },
    "173": {
      "op": "cover 2",
      "stack_out": [
        "encoded_array%0#0",
        "tmp%14#0",
        "tmp%13#0"
      ]
    },
    "175": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%6#1",
        "encoded_array%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%14#0",
        "aggregate%as_Encoded(uint64)%6#1"
      ]
    },
    "176": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_array%0#0",
        "tmp%14#0",
        "aggregate%as_Encoded(uint64)%6#1",
        "0x"
      ]
    },
    "177": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "tmp%14#0",
        "0x",
        "aggregate%as_Encoded(uint64)%6#1"
      ]
    },
    "178": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%15#1",
        "encoded_array%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%14#0",
        "aggregate%encoded%15#1"
      ]
    },
    "179": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%15#1",
        "tmp%14#0"
      ]
    },
    "180": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%7#1",
        "aggregate%encoded%15#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%15#1",
        "aggregate%as_Encoded(uint64)%7#1"
      ]
    },
    "181": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%16#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%16#1"
      ]
    },
    "182": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%16#1",
        "0x"
      ]
    },
    "183": {
      "op": "len",
      "defined_out": [
        "aggregate%encoded%16#1",
        "aggregate%length%0#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%16#1",
        "aggregate%length%0#1"
      ]
    },
    "184": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#1",
        "aggregate%encoded%16#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%16#1",
        "aggregate%as_bytes%1#1"
      ]
    },
    "185": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%16#1",
        "aggregate%length_uint16%0#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%16#1",
        "aggregate%length_uint16%0#1"
      ]
    },
    "188": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%16#1",
        "aggregate%length_uint16%0#1",
        "0x"
      ]
    },
    "189": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#1",
        "aggregate%encoded%16#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%16#1",
        "aggregate%as_Encoded(len+uint8[])%0#1"
      ]
    },
    "190": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%16#1",
        "aggregate%as_Encoded(len+uint8[])%0#1",
        "0x"
      ]
    },
    "191": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(len+uint8[])%0#1",
        "aggregate%as_Encoded(len+uint8[])%0#1 (copy)",
        "aggregate%encoded%16#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%16#1",
        "aggregate%as_Encoded(len+uint8[])%0#1",
        "0x",
        "aggregate%as_Encoded(len+uint8[])%0#1 (copy)"
      ]
    },
    "193": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#1",
        "aggregate%encoded%16#1",
        "aggregate%tail%0#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%16#1",
        "aggregate%as_Encoded(len+uint8[])%0#1",
        "aggregate%tail%0#1"
      ]
    },
    "194": {
      "op": "cover 2",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%tail%0#1",
        "aggregate%encoded%16#1",
        "aggregate%as_Encoded(len+uint8[])%0#1"
      ]
    },
    "196": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#1",
        "aggregate%encoded%16#1",
        "aggregate%tail%0#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%tail%0#1",
        "aggregate%encoded%16#1",
        "aggregate%data_length%0#1"
      ]
    },
    "197": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "aggregate%data_length%0#1",
        "aggregate%encoded%16#1",
        "aggregate%tail%0#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%tail%0#1",
        "aggregate%encoded%16#1",
        "aggregate%data_length%0#1",
        "22"
      ]
    },
    "199": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%16#1",
        "aggregate%tail%0#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%tail%0#1",
        "aggregate%encoded%16#1",
        "aggregate%current_tail_offset%0#1"
      ]
    },
    "200": {
      "op": "cover 2",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%0#1",
        "aggregate%encoded%16#1"
      ]
    },
    "202": {
      "op": "pushint 22 // 22",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%0#1",
        "aggregate%encoded%16#1",
        "22"
      ]
    },
    "204": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%16#1",
        "aggregate%tail%0#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%0#1",
        "aggregate%encoded%16#1",
        "aggregate%as_bytes%2#1"
      ]
    },
    "205": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%16#1",
        "aggregate%offset_as_uint16%0#1",
        "aggregate%tail%0#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%0#1",
        "aggregate%encoded%16#1",
        "aggregate%offset_as_uint16%0#1"
      ]
    },
    "208": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%0#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%0#1",
        "aggregate%encoded%17#1"
      ]
    },
    "209": {
      "op": "cover 2",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%0#1"
      ]
    },
    "211": {
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "\"\"",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%0#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%0#1",
        "\"\""
      ]
    },
    "212": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%17#1",
        "aggregate%length%1#1",
        "aggregate%tail%0#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%0#1",
        "aggregate%length%1#1"
      ]
    },
    "213": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%0#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%0#1",
        "aggregate%as_bytes%3#1"
      ]
    },
    "214": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%17#1",
        "aggregate%length_uint16%1#1",
        "aggregate%tail%0#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%0#1",
        "aggregate%length_uint16%1#1"
      ]
    },
    "217": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%0#1",
        "aggregate%length_uint16%1#1",
        "\"\""
      ]
    },
    "218": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%0#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%0#1",
        "aggregate%as_Encoded(len+utf8[])%0#1"
      ]
    },
    "219": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%tail%0#1"
      ]
    },
    "220": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%as_Encoded(len+utf8[])%0#1 (copy)",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%0#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%tail%0#1",
        "aggregate%as_Encoded(len+utf8[])%0#1 (copy)"
      ]
    },
    "222": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%1#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%tail%1#1"
      ]
    },
    "223": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%1#1",
        "aggregate%as_Encoded(len+utf8[])%0#1"
      ]
    },
    "224": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%data_length%1#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%1#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%1#1",
        "aggregate%data_length%1#1"
      ]
    },
    "225": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%current_tail_offset%0#1 (copy)",
        "aggregate%data_length%1#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%1#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%1#1",
        "aggregate%data_length%1#1",
        "aggregate%current_tail_offset%0#1 (copy)"
      ]
    },
    "227": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%current_tail_offset%1#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%1#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%1#1",
        "aggregate%current_tail_offset%1#1"
      ]
    },
    "228": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%current_tail_offset%1#1",
        "aggregate%tail%1#1"
      ]
    },
    "229": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%1#1",
        "aggregate%tail%1#1",
        "aggregate%current_tail_offset%0#1"
      ]
    },
    "231": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#1",
        "aggregate%current_tail_offset%1#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%1#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%1#1",
        "aggregate%tail%1#1",
        "aggregate%as_bytes%4#1"
      ]
    },
    "232": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%1#1",
        "aggregate%encoded%17#1",
        "aggregate%offset_as_uint16%1#1",
        "aggregate%tail%1#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%1#1",
        "aggregate%tail%1#1",
        "aggregate%offset_as_uint16%1#1"
      ]
    },
    "235": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%current_tail_offset%1#1",
        "aggregate%tail%1#1",
        "aggregate%offset_as_uint16%1#1",
        "aggregate%encoded%17#1"
      ]
    },
    "237": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%current_tail_offset%1#1",
        "aggregate%tail%1#1",
        "aggregate%encoded%17#1",
        "aggregate%offset_as_uint16%1#1"
      ]
    },
    "238": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%1#1",
        "aggregate%encoded%18#1",
        "aggregate%tail%1#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%current_tail_offset%1#1",
        "aggregate%tail%1#1",
        "aggregate%encoded%18#1"
      ]
    },
    "239": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%current_tail_offset%1#1",
        "aggregate%encoded%18#1",
        "aggregate%tail%1#1"
      ]
    },
    "240": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%current_tail_offset%1#1",
        "aggregate%encoded%18#1",
        "aggregate%tail%1#1",
        "encoded_array%0#0"
      ]
    },
    "242": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%1#1",
        "aggregate%encoded%18#1",
        "aggregate%tail%2#1"
      ],
      "stack_out": [
        "aggregate%current_tail_offset%1#1",
        "aggregate%encoded%18#1",
        "aggregate%tail%2#1"
      ]
    },
    "243": {
      "op": "swap",
      "stack_out": [
        "aggregate%current_tail_offset%1#1",
        "aggregate%tail%2#1",
        "aggregate%encoded%18#1"
      ]
    },
    "244": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%tail%2#1",
        "aggregate%encoded%18#1",
        "aggregate%current_tail_offset%1#1"
      ]
    },
    "246": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%5#1",
        "aggregate%encoded%18#1",
        "aggregate%tail%2#1"
      ],
      "stack_out": [
        "aggregate%tail%2#1",
        "aggregate%encoded%18#1",
        "aggregate%as_bytes%5#1"
      ]
    },
    "247": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%18#1",
        "aggregate%offset_as_uint16%2#1",
        "aggregate%tail%2#1"
      ],
      "stack_out": [
        "aggregate%tail%2#1",
        "aggregate%encoded%18#1",
        "aggregate%offset_as_uint16%2#1"
      ]
    },
    "250": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%19#1",
        "aggregate%tail%2#1"
      ],
      "stack_out": [
        "aggregate%tail%2#1",
        "aggregate%encoded%19#1"
      ]
    },
    "251": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded%19#1",
        "aggregate%tail%2#1"
      ]
    },
    "252": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "253": {
      "op": "pushbytes \"dyn\"",
      "defined_out": [
        "\"dyn\"",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "\"dyn\""
      ]
    },
    "258": {
      "op": "swap",
      "stack_out": [
        "\"dyn\"",
        "tmp%15#0"
      ]
    },
    "259": {
      "op": "app_global_put",
      "stack_out": []
    },
    "260": {
      "op": "bytec_2 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\""
      ],
      "stack_out": [
        "\"num_payments\""
      ]
    },
    "261": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"num_payments\"",
        "0"
      ]
    },
    "262": {
      "op": "app_global_put",
      "stack_out": []
    },
    "263": {
      "op": "pushint 384 // 384",
      "defined_out": [
        "384"
      ],
      "stack_out": [
        "384"
      ]
    },
    "266": {
      "op": "bzero",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "267": {
      "op": "bytec_3 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "\"payments\""
      ]
    },
    "268": {
      "op": "swap",
      "stack_out": [
        "\"payments\"",
        "tmp%16#0"
      ]
    },
    "269": {
      "op": "app_global_put",
      "stack_out": []
    },
    "270": {
      "retsub": true,
      "op": "retsub"
    },
    "271": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.fixed_initialize",
      "params": {},
      "block": "fixed_initialize_block@0",
      "stack_in": [],
      "op": "pushint 24 // 24",
      "defined_out": [
        "24"
      ],
      "stack_out": [
        "24"
      ]
    },
    "273": {
      "op": "bzero",
      "defined_out": [
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0"
      ]
    },
    "274": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "0"
      ]
    },
    "275": {
      "op": "itob",
      "defined_out": [
        "arr_3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%0#0"
      ]
    },
    "276": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_3#0",
        "encoded_value%0#0",
        "0"
      ]
    },
    "277": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "arr_3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%0#0",
        "0",
        "8"
      ]
    },
    "278": {
      "op": "*",
      "defined_out": [
        "aggregate%write_offset%0#1",
        "arr_3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%0#0",
        "aggregate%write_offset%0#1"
      ]
    },
    "279": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "aggregate%write_offset%0#1",
        "arr_3#0"
      ]
    },
    "281": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "arr_3#0",
        "aggregate%write_offset%0#1"
      ]
    },
    "282": {
      "op": "uncover 2",
      "stack_out": [
        "arr_3#0",
        "aggregate%write_offset%0#1",
        "encoded_value%0#0"
      ]
    },
    "284": {
      "op": "replace3",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "285": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "1"
      ]
    },
    "286": {
      "op": "itob",
      "defined_out": [
        "arr_3#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%1#0"
      ]
    },
    "287": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "encoded_value%1#0",
        "1"
      ]
    },
    "288": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "encoded_value%1#0",
        "1",
        "8"
      ]
    },
    "289": {
      "op": "*",
      "defined_out": [
        "aggregate%write_offset%1#1",
        "arr_3#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%1#0",
        "aggregate%write_offset%1#1"
      ]
    },
    "290": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%1#0",
        "aggregate%write_offset%1#1",
        "arr_3#0"
      ]
    },
    "292": {
      "op": "swap",
      "stack_out": [
        "encoded_value%1#0",
        "arr_3#0",
        "aggregate%write_offset%1#1"
      ]
    },
    "293": {
      "op": "uncover 2",
      "stack_out": [
        "arr_3#0",
        "aggregate%write_offset%1#1",
        "encoded_value%1#0"
      ]
    },
    "295": {
      "op": "replace3",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "296": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "2"
      ]
    },
    "298": {
      "op": "itob",
      "defined_out": [
        "arr_3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%2#0"
      ]
    },
    "299": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "arr_3#0",
        "encoded_value%2#0",
        "2"
      ]
    },
    "301": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "encoded_value%2#0",
        "2",
        "8"
      ]
    },
    "302": {
      "op": "*",
      "defined_out": [
        "aggregate%write_offset%2#1",
        "arr_3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%2#0",
        "aggregate%write_offset%2#1"
      ]
    },
    "303": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%2#0",
        "aggregate%write_offset%2#1",
        "arr_3#0"
      ]
    },
    "305": {
      "op": "swap",
      "stack_out": [
        "encoded_value%2#0",
        "arr_3#0",
        "aggregate%write_offset%2#1"
      ]
    },
    "306": {
      "op": "uncover 2",
      "stack_out": [
        "arr_3#0",
        "aggregate%write_offset%2#1",
        "encoded_value%2#0"
      ]
    },
    "308": {
      "op": "replace3",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "309": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_3#0",
        "0"
      ]
    },
    "310": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%3#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%as_Encoded(uint64)%3#1"
      ]
    },
    "311": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%3#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%as_Encoded(uint64)%3#1",
        "0x"
      ]
    },
    "312": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "0x",
        "aggregate%as_Encoded(uint64)%3#1"
      ]
    },
    "313": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%0#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%0#1"
      ]
    },
    "314": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%0#1",
        "1"
      ]
    },
    "315": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%4#1",
        "aggregate%encoded%0#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%0#1",
        "aggregate%as_Encoded(uint64)%4#1"
      ]
    },
    "316": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%1#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%1#1"
      ]
    },
    "317": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%1#1",
        "2"
      ]
    },
    "319": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%5#1",
        "aggregate%encoded%1#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%1#1",
        "aggregate%as_Encoded(uint64)%5#1"
      ]
    },
    "320": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%2#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%2#1"
      ]
    },
    "321": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%2#1",
        "0x"
      ]
    },
    "322": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_tuple#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_tuple#0"
      ]
    },
    "323": {
      "op": "dig 1",
      "defined_out": [
        "arr_3#0",
        "arr_3#0 (copy)",
        "arr_3_from_tuple#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_tuple#0",
        "arr_3#0 (copy)"
      ]
    },
    "325": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "arr_3#0",
        "tmp%1#0"
      ]
    },
    "326": {
      "error": "should be the same",
      "op": "assert // should be the same",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "327": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "1"
      ]
    },
    "328": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%6#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%as_Encoded(uint64)%6#1"
      ]
    },
    "329": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr_3#0",
        "aggregate%as_Encoded(uint64)%6#1",
        "0x"
      ]
    },
    "330": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "0x",
        "aggregate%as_Encoded(uint64)%6#1"
      ]
    },
    "331": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%4#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%4#1"
      ]
    },
    "332": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%4#1",
        "1"
      ]
    },
    "333": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%7#1",
        "aggregate%encoded%4#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%4#1",
        "aggregate%as_Encoded(uint64)%7#1"
      ]
    },
    "334": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%5#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%5#1"
      ]
    },
    "335": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%5#1",
        "1"
      ]
    },
    "336": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%8#1",
        "aggregate%encoded%5#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%5#1",
        "aggregate%as_Encoded(uint64)%8#1"
      ]
    },
    "337": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%6#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%6#1"
      ]
    },
    "338": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%6#1",
        "0x"
      ]
    },
    "339": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0"
      ]
    },
    "340": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "0"
      ]
    },
    "341": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "0",
        "8"
      ]
    },
    "342": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%3#1",
        "arr_3#0",
        "arr_3_from_full#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "aggregate%bytes_offset%3#1"
      ]
    },
    "343": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%bytes_offset%3#1",
        "arr_3#0",
        "arr_3_from_full#0",
        "arr_3_from_full#0 (copy)"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "aggregate%bytes_offset%3#1",
        "arr_3_from_full#0 (copy)"
      ]
    },
    "345": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "arr_3_from_full#0 (copy)",
        "aggregate%bytes_offset%3#1"
      ]
    },
    "346": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "arr_3_from_full#0 (copy)",
        "aggregate%bytes_offset%3#1",
        "8"
      ]
    },
    "347": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "array_item%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "array_item%0#0"
      ]
    },
    "348": {
      "op": "btoi",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "values%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "values%0#0"
      ]
    },
    "349": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "values%0#0",
        "1"
      ]
    },
    "350": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "tmp%2#0"
      ]
    },
    "351": {
      "op": "assert",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0"
      ]
    },
    "352": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "1"
      ]
    },
    "353": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "1",
        "8"
      ]
    },
    "354": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%4#1",
        "arr_3#0",
        "arr_3_from_full#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "aggregate%bytes_offset%4#1"
      ]
    },
    "355": {
      "op": "dig 1",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "aggregate%bytes_offset%4#1",
        "arr_3_from_full#0 (copy)"
      ]
    },
    "357": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "arr_3_from_full#0 (copy)",
        "aggregate%bytes_offset%4#1"
      ]
    },
    "358": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "arr_3_from_full#0 (copy)",
        "aggregate%bytes_offset%4#1",
        "8"
      ]
    },
    "359": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "array_item%1#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "array_item%1#0"
      ]
    },
    "360": {
      "op": "btoi",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "values%1#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "values%1#0"
      ]
    },
    "361": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "values%1#0",
        "1"
      ]
    },
    "362": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "tmp%3#0"
      ]
    },
    "363": {
      "op": "assert",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0"
      ]
    },
    "364": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "2"
      ]
    },
    "366": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "2",
        "8"
      ]
    },
    "367": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%5#1",
        "arr_3#0",
        "arr_3_from_full#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "aggregate%bytes_offset%5#1"
      ]
    },
    "368": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "aggregate%bytes_offset%5#1",
        "8"
      ]
    },
    "369": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "arr_3#0",
        "array_item%2#0"
      ],
      "stack_out": [
        "arr_3#0",
        "array_item%2#0"
      ]
    },
    "370": {
      "op": "btoi",
      "defined_out": [
        "arr_3#0",
        "values%2#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%2#0"
      ]
    },
    "371": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "values%2#0",
        "1"
      ]
    },
    "372": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "arr_3#0",
        "tmp%4#0"
      ]
    },
    "373": {
      "op": "assert",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "374": {
      "op": "dupn 2",
      "defined_out": [
        "arr_3#0",
        "arr_3#0 (copy)",
        "arr_3_from_fixed#0"
      ],
      "stack_out": [
        "arr_3_from_fixed#0",
        "arr_3#0",
        "arr_3#0 (copy)"
      ]
    },
    "376": {
      "op": "uncover 2",
      "stack_out": [
        "arr_3#0",
        "arr_3#0 (copy)",
        "arr_3_from_fixed#0"
      ]
    },
    "378": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "arr_3#0",
        "tmp%5#0"
      ]
    },
    "379": {
      "error": "should be the same",
      "op": "assert // should be the same",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "380": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_3#0",
        "0"
      ]
    },
    "381": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%9#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%as_Encoded(uint64)%9#1"
      ]
    },
    "382": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr_3#0",
        "aggregate%as_Encoded(uint64)%9#1",
        "0x"
      ]
    },
    "383": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "0x",
        "aggregate%as_Encoded(uint64)%9#1"
      ]
    },
    "384": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%8#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%8#1"
      ]
    },
    "385": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%8#1",
        "1"
      ]
    },
    "386": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%10#1",
        "aggregate%encoded%8#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%8#1",
        "aggregate%as_Encoded(uint64)%10#1"
      ]
    },
    "387": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%9#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%9#1"
      ]
    },
    "388": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%9#1",
        "2"
      ]
    },
    "390": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%11#1",
        "aggregate%encoded%9#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%9#1",
        "aggregate%as_Encoded(uint64)%11#1"
      ]
    },
    "391": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%10#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%10#1"
      ]
    },
    "392": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "aggregate%encoded%10#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%10#1",
        "3"
      ]
    },
    "394": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1",
        "aggregate%encoded%10#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%10#1",
        "aggregate%as_bytes%0#1"
      ]
    },
    "395": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%10#1",
        "aggregate%len_u16%0#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%10#1",
        "aggregate%len_u16%0#1"
      ]
    },
    "398": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "aggregate%len_u16%0#1",
        "aggregate%encoded%10#1"
      ]
    },
    "399": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%11#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%11#1"
      ]
    },
    "400": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%11#1",
        "0x"
      ]
    },
    "401": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "dynamic_arr#0"
      ],
      "stack_out": [
        "arr_3#0",
        "dynamic_arr#0"
      ]
    },
    "402": {
      "op": "dup",
      "defined_out": [
        "arr_3#0",
        "dynamic_arr#0",
        "dynamic_arr#0 (copy)"
      ],
      "stack_out": [
        "arr_3#0",
        "dynamic_arr#0",
        "dynamic_arr#0 (copy)"
      ]
    },
    "403": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_3#0",
        "dynamic_arr#0",
        "dynamic_arr#0 (copy)",
        "0"
      ]
    },
    "404": {
      "op": "extract_uint16",
      "defined_out": [
        "arr_3#0",
        "array_length%0#0",
        "dynamic_arr#0"
      ],
      "stack_out": [
        "arr_3#0",
        "dynamic_arr#0",
        "array_length%0#0"
      ]
    },
    "405": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "arr_3#0",
        "dynamic_arr#0",
        "array_length%0#0",
        "3"
      ]
    },
    "407": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "dynamic_arr#0",
        "eq%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "dynamic_arr#0",
        "eq%0#0"
      ]
    },
    "408": {
      "error": "invalid input length",
      "op": "assert // invalid input length",
      "stack_out": [
        "arr_3#0",
        "dynamic_arr#0"
      ]
    },
    "409": {
      "op": "extract 2 0",
      "defined_out": [
        "arr_3#0",
        "converted_array%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "converted_array%0#0"
      ]
    },
    "412": {
      "op": "dig 1",
      "stack_out": [
        "arr_3#0",
        "converted_array%0#0",
        "arr_3#0 (copy)"
      ]
    },
    "414": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "arr_3#0",
        "tmp%6#0"
      ]
    },
    "415": {
      "op": "assert",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "416": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_3#0",
        "0"
      ]
    },
    "417": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%12#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%as_Encoded(uint64)%12#1"
      ]
    },
    "418": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr_3#0",
        "aggregate%as_Encoded(uint64)%12#1",
        "0x"
      ]
    },
    "419": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "0x",
        "aggregate%as_Encoded(uint64)%12#1"
      ]
    },
    "420": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%13#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%13#1"
      ]
    },
    "421": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%13#1",
        "1"
      ]
    },
    "422": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%13#1",
        "aggregate%encoded%13#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%13#1",
        "aggregate%as_Encoded(uint64)%13#1"
      ]
    },
    "423": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%14#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%14#1"
      ]
    },
    "424": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%14#1",
        "2"
      ]
    },
    "426": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%14#1",
        "aggregate%encoded%14#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%14#1",
        "aggregate%as_Encoded(uint64)%14#1"
      ]
    },
    "427": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%15#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%15#1"
      ]
    },
    "428": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%15#1",
        "0x"
      ]
    },
    "429": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "awst_tmp%0#0"
      ]
    },
    "430": {
      "op": "dup",
      "defined_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "431": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "0"
      ]
    },
    "432": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "433": {
      "op": "extract3",
      "defined_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "tuple_item%0#0"
      ]
    },
    "434": {
      "op": "btoi",
      "defined_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "values%3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "values%3#0"
      ]
    },
    "435": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "awst_tmp%0#0"
      ]
    },
    "436": {
      "op": "dup",
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "437": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "8"
      ]
    },
    "438": {
      "op": "dup",
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "8",
        "8"
      ]
    },
    "439": {
      "op": "extract3",
      "defined_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "tuple_item%1#0",
        "values%3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "awst_tmp%0#0",
        "tuple_item%1#0"
      ]
    },
    "440": {
      "op": "btoi",
      "defined_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "values%3#0",
        "values%4#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "awst_tmp%0#0",
        "values%4#0"
      ]
    },
    "441": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "values%4#0",
        "awst_tmp%0#0"
      ]
    },
    "442": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "arr_3#0",
        "awst_tmp%0#0",
        "values%3#0",
        "values%4#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "values%4#0",
        "awst_tmp%0#0",
        "16"
      ]
    },
    "443": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "values%4#0",
        "awst_tmp%0#0",
        "16",
        "8"
      ]
    },
    "444": {
      "op": "extract3",
      "defined_out": [
        "arr_3#0",
        "tuple_item%2#0",
        "values%3#0",
        "values%4#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "values%4#0",
        "tuple_item%2#0"
      ]
    },
    "445": {
      "op": "btoi",
      "defined_out": [
        "arr_3#0",
        "values%3#0",
        "values%4#0",
        "values%5#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "values%4#0",
        "values%5#0"
      ]
    },
    "446": {
      "op": "uncover 2",
      "stack_out": [
        "arr_3#0",
        "values%4#0",
        "values%5#0",
        "values%3#0"
      ]
    },
    "448": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%15#1",
        "arr_3#0",
        "values%4#0",
        "values%5#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%4#0",
        "values%5#0",
        "aggregate%as_Encoded(uint64)%15#1"
      ]
    },
    "449": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr_3#0",
        "values%4#0",
        "values%5#0",
        "aggregate%as_Encoded(uint64)%15#1",
        "0x"
      ]
    },
    "450": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "values%4#0",
        "values%5#0",
        "0x",
        "aggregate%as_Encoded(uint64)%15#1"
      ]
    },
    "451": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%17#1",
        "arr_3#0",
        "values%4#0",
        "values%5#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%4#0",
        "values%5#0",
        "aggregate%encoded%17#1"
      ]
    },
    "452": {
      "op": "uncover 2",
      "stack_out": [
        "arr_3#0",
        "values%5#0",
        "aggregate%encoded%17#1",
        "values%4#0"
      ]
    },
    "454": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%16#1",
        "aggregate%encoded%17#1",
        "arr_3#0",
        "values%5#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%5#0",
        "aggregate%encoded%17#1",
        "aggregate%as_Encoded(uint64)%16#1"
      ]
    },
    "455": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%18#1",
        "arr_3#0",
        "values%5#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%5#0",
        "aggregate%encoded%18#1"
      ]
    },
    "456": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%18#1",
        "values%5#0"
      ]
    },
    "457": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%17#1",
        "aggregate%encoded%18#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%18#1",
        "aggregate%as_Encoded(uint64)%17#1"
      ]
    },
    "458": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%19#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%19#1"
      ]
    },
    "459": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%19#1",
        "0x"
      ]
    },
    "460": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "encoded_array%3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_array%3#0"
      ]
    },
    "461": {
      "op": "dig 1",
      "stack_out": [
        "arr_3#0",
        "encoded_array%3#0",
        "arr_3#0 (copy)"
      ]
    },
    "463": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "arr_3#0",
        "tmp%7#0"
      ]
    },
    "464": {
      "op": "assert",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "465": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr_3#0",
        "0x"
      ]
    },
    "466": {
      "op": "pushbytes 0x0000000000000000",
      "defined_out": [
        "0x",
        "0x0000000000000000",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "0x",
        "0x0000000000000000"
      ]
    },
    "476": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%21#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%21#1"
      ]
    },
    "477": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "aggregate%encoded%21#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%21#1",
        "0x0000000000000001"
      ]
    },
    "487": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%22#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%22#1"
      ]
    },
    "488": {
      "op": "pushbytes 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002",
        "aggregate%encoded%22#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%22#1",
        "0x0000000000000002"
      ]
    },
    "498": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%23#1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%23#1"
      ]
    },
    "499": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr_3#0",
        "aggregate%encoded%23#1",
        "0x"
      ]
    },
    "500": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "static_array#0"
      ],
      "stack_out": [
        "arr_3#0",
        "static_array#0"
      ]
    },
    "501": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "502": {
      "op": "assert",
      "stack_out": []
    },
    "503": {
      "retsub": true,
      "op": "retsub"
    },
    "504": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.add_payment",
      "params": {
        "pay#0": "bytes"
      },
      "block": "add_payment",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "507": {
      "block": "add_payment_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "508": {
      "op": "bytec_2 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"num_payments\""
      ]
    },
    "509": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "510": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "511": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "8"
      ]
    },
    "512": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "513": {
      "error": "too many payments",
      "op": "assert // too many payments",
      "stack_out": []
    },
    "514": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "515": {
      "op": "bytec_3 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"payments\""
      ]
    },
    "516": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "517": {
      "error": "check self.payments exists",
      "op": "assert // check self.payments exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "518": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "519": {
      "op": "bytec_2 // \"num_payments\"",
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "\"num_payments\""
      ]
    },
    "520": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "521": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "522": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "48"
      ]
    },
    "524": {
      "op": "*",
      "defined_out": [
        "aggregate%write_offset%0#1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%write_offset%0#1"
      ]
    },
    "525": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%write_offset%0#1",
        "maybe_value%1#0",
        "pay#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%write_offset%0#1",
        "pay#0 (copy)"
      ]
    },
    "527": {
      "op": "replace3",
      "defined_out": [
        "updated_array%0#0"
      ],
      "stack_out": [
        "updated_array%0#0"
      ]
    },
    "528": {
      "op": "bytec_3 // \"payments\"",
      "stack_out": [
        "updated_array%0#0",
        "\"payments\""
      ]
    },
    "529": {
      "op": "swap",
      "stack_out": [
        "\"payments\"",
        "updated_array%0#0"
      ]
    },
    "530": {
      "op": "app_global_put",
      "stack_out": []
    },
    "531": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "532": {
      "op": "bytec_2 // \"num_payments\"",
      "stack_out": [
        "0",
        "\"num_payments\""
      ]
    },
    "533": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "534": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "535": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "536": {
      "op": "+",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "537": {
      "op": "bytec_2 // \"num_payments\"",
      "stack_out": [
        "tmp%1#0",
        "\"num_payments\""
      ]
    },
    "538": {
      "op": "swap",
      "stack_out": [
        "\"num_payments\"",
        "tmp%1#0"
      ]
    },
    "539": {
      "op": "app_global_put",
      "stack_out": []
    },
    "540": {
      "retsub": true,
      "op": "retsub"
    },
    "541": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.increment_payment",
      "params": {
        "index#0": "uint64",
        "amt#0": "uint64"
      },
      "block": "increment_payment",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "544": {
      "block": "increment_payment_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "545": {
      "op": "bytec_2 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"num_payments\""
      ]
    },
    "546": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "547": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "548": {
      "op": "frame_dig -2",
      "defined_out": [
        "index#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "index#0 (copy)"
      ]
    },
    "550": {
      "op": ">",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "551": {
      "error": "invalid payment index",
      "op": "assert // invalid payment index",
      "stack_out": []
    },
    "552": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "553": {
      "op": "bytec_3 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"payments\""
      ]
    },
    "554": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "555": {
      "error": "check self.payments exists",
      "op": "assert // check self.payments exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "556": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%1#0",
        "index#0 (copy)"
      ]
    },
    "558": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "index#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "index#0 (copy)",
        "48"
      ]
    },
    "560": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#1"
      ]
    },
    "561": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%bytes_offset%0#1",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#1",
        "maybe_value%1#0 (copy)"
      ]
    },
    "563": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "aggregate%bytes_offset%0#1"
      ]
    },
    "564": {
      "op": "pushint 48 // 48",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "aggregate%bytes_offset%0#1",
        "48"
      ]
    },
    "566": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "array_item%0#0"
      ]
    },
    "567": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "array_item%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "array_item%0#0",
        "40"
      ]
    },
    "569": {
      "op": "intc_2 // 8",
      "defined_out": [
        "40",
        "8",
        "array_item%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "array_item%0#0",
        "40",
        "8"
      ]
    },
    "570": {
      "op": "extract3",
      "defined_out": [
        "maybe_value%1#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tuple_item%0#0"
      ]
    },
    "571": {
      "op": "btoi",
      "defined_out": [
        "maybe_value%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "values%0#0"
      ]
    },
    "572": {
      "op": "frame_dig -1",
      "defined_out": [
        "amt#0 (copy)",
        "maybe_value%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "values%0#0",
        "amt#0 (copy)"
      ]
    },
    "574": {
      "op": "+",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "575": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "encoded_value%0#0"
      ]
    },
    "576": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%1#0",
        "encoded_value%0#0",
        "index#0 (copy)"
      ]
    },
    "578": {
      "op": "pushint 48 // 48",
      "stack_out": [
        "maybe_value%1#0",
        "encoded_value%0#0",
        "index#0 (copy)",
        "48"
      ]
    },
    "580": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%1#1",
        "encoded_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "encoded_value%0#0",
        "aggregate%bytes_offset%1#1"
      ]
    },
    "581": {
      "op": "dig 2",
      "stack_out": [
        "maybe_value%1#0",
        "encoded_value%0#0",
        "aggregate%bytes_offset%1#1",
        "maybe_value%1#0 (copy)"
      ]
    },
    "583": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "encoded_value%0#0",
        "maybe_value%1#0 (copy)",
        "aggregate%bytes_offset%1#1"
      ]
    },
    "584": {
      "op": "pushint 48 // 48",
      "stack_out": [
        "maybe_value%1#0",
        "encoded_value%0#0",
        "maybe_value%1#0 (copy)",
        "aggregate%bytes_offset%1#1",
        "48"
      ]
    },
    "586": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%1#1",
        "encoded_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "encoded_value%0#0",
        "aggregate%encoded_element%1#1"
      ]
    },
    "587": {
      "op": "pushint 40 // 40",
      "stack_out": [
        "maybe_value%1#0",
        "encoded_value%0#0",
        "aggregate%encoded_element%1#1",
        "40"
      ]
    },
    "589": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%encoded_element%1#1",
        "40",
        "encoded_value%0#0"
      ]
    },
    "591": {
      "op": "replace3",
      "defined_out": [
        "aggregate%updated_data%0#1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%updated_data%0#1"
      ]
    },
    "592": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%updated_data%0#1",
        "index#0 (copy)"
      ]
    },
    "594": {
      "op": "pushint 48 // 48",
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%updated_data%0#1",
        "index#0 (copy)",
        "48"
      ]
    },
    "596": {
      "op": "*",
      "defined_out": [
        "aggregate%updated_data%0#1",
        "aggregate%write_offset%0#1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%updated_data%0#1",
        "aggregate%write_offset%0#1"
      ]
    },
    "597": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%updated_data%0#1",
        "aggregate%write_offset%0#1",
        "maybe_value%1#0"
      ]
    },
    "599": {
      "op": "swap",
      "stack_out": [
        "aggregate%updated_data%0#1",
        "maybe_value%1#0",
        "aggregate%write_offset%0#1"
      ]
    },
    "600": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%write_offset%0#1",
        "aggregate%updated_data%0#1"
      ]
    },
    "602": {
      "op": "replace3",
      "defined_out": [
        "updated_array%0#0"
      ],
      "stack_out": [
        "updated_array%0#0"
      ]
    },
    "603": {
      "op": "bytec_3 // \"payments\"",
      "stack_out": [
        "updated_array%0#0",
        "\"payments\""
      ]
    },
    "604": {
      "op": "swap",
      "stack_out": [
        "\"payments\"",
        "updated_array%0#0"
      ]
    },
    "605": {
      "op": "app_global_put",
      "stack_out": []
    },
    "606": {
      "retsub": true,
      "op": "retsub"
    },
    "607": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.create_storage",
      "params": {
        "box_key#0": "uint64"
      },
      "block": "create_storage",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "610": {
      "block": "create_storage_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "611": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "612": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "613": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "614": {
      "op": "bytec 4 // 0x70",
      "defined_out": [
        "0x70",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x70"
      ]
    },
    "616": {
      "op": "swap",
      "stack_out": [
        "0x70",
        "maybe_value%0#0"
      ]
    },
    "617": {
      "op": "app_global_put",
      "stack_out": []
    },
    "618": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "619": {
      "op": "bytec_1 // \"nested\"",
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "620": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "621": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "622": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%0#0"
      ]
    },
    "624": {
      "op": "bytec 5 // 0x6c",
      "defined_out": [
        "0x6c",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%0#0",
        "0x6c"
      ]
    },
    "626": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "0x6c",
        "maybe_value%1#0"
      ]
    },
    "628": {
      "op": "app_local_put",
      "stack_out": []
    },
    "629": {
      "op": "bytec 6 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "631": {
      "op": "pushint 2064 // 2064",
      "defined_out": [
        "\"box\"",
        "2064"
      ],
      "stack_out": [
        "\"box\"",
        "2064"
      ]
    },
    "634": {
      "op": "box_create",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "635": {
      "error": "expected box to not exist",
      "op": "assert // expected box to not exist",
      "stack_out": []
    },
    "636": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "637": {
      "op": "bytec_1 // \"nested\"",
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "638": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "639": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "640": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "641": {
      "op": "intc_3 // 16",
      "defined_out": [
        "0",
        "16",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "0",
        "16"
      ]
    },
    "642": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "643": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_key#0 (copy)",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "box_key#0 (copy)"
      ]
    },
    "645": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "encoded_value%0#0"
      ]
    },
    "646": {
      "op": "bytec 8 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "encoded_value%0#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "encoded_value%0#0",
        "\"box_map\""
      ]
    },
    "648": {
      "op": "swap",
      "stack_out": [
        "tuple_item%0#0",
        "\"box_map\"",
        "encoded_value%0#0"
      ]
    },
    "649": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "650": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "651": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#1",
        "aggregate%box_get%1#1",
        "box_prefixed_key%0#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#1",
        "aggregate%box_get%1#1"
      ]
    },
    "652": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "defined_out": [
        "box_prefixed_key%0#0",
        "storage_value%0#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "box_prefixed_key%0#0",
        "storage_value%0#0"
      ]
    },
    "653": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tuple_item%0#0",
        "box_prefixed_key%0#0",
        "storage_value%0#0",
        "0"
      ]
    },
    "654": {
      "op": "uncover 3",
      "stack_out": [
        "box_prefixed_key%0#0",
        "storage_value%0#0",
        "0",
        "tuple_item%0#0"
      ]
    },
    "656": {
      "op": "replace3",
      "defined_out": [
        "box_prefixed_key%0#0",
        "updated_tuple%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "updated_tuple%0#0"
      ]
    },
    "657": {
      "op": "box_put",
      "stack_out": []
    },
    "658": {
      "retsub": true,
      "op": "retsub"
    },
    "659": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.local_struct",
      "params": {},
      "block": "local_struct_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "aggregate%as_Encoded(uint8[32])%0#1"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint8[32])%0#1"
      ]
    },
    "661": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint8[32])%0#1"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint8[32])%0#1",
        "0x"
      ]
    },
    "662": {
      "op": "swap",
      "stack_out": [
        "0x",
        "aggregate%as_Encoded(uint8[32])%0#1"
      ]
    },
    "663": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%0#1"
      ],
      "stack_out": [
        "aggregate%encoded%0#1"
      ]
    },
    "664": {
      "op": "pushint 1234 // 1234",
      "defined_out": [
        "1234",
        "aggregate%encoded%0#1"
      ],
      "stack_out": [
        "aggregate%encoded%0#1",
        "1234"
      ]
    },
    "667": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#1",
        "aggregate%encoded%0#1"
      ],
      "stack_out": [
        "aggregate%encoded%0#1",
        "aggregate%as_Encoded(uint64)%0#1"
      ]
    },
    "668": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%1#1"
      ],
      "stack_out": [
        "aggregate%encoded%1#1"
      ]
    },
    "669": {
      "op": "pushint 567 // 567",
      "defined_out": [
        "567",
        "aggregate%encoded%1#1"
      ],
      "stack_out": [
        "aggregate%encoded%1#1",
        "567"
      ]
    },
    "672": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#1",
        "aggregate%encoded%1#1"
      ],
      "stack_out": [
        "aggregate%encoded%1#1",
        "aggregate%as_Encoded(uint64)%1#1"
      ]
    },
    "673": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%2#1"
      ],
      "stack_out": [
        "aggregate%encoded%2#1"
      ]
    },
    "674": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%encoded%2#1",
        "0x"
      ]
    },
    "675": {
      "op": "concat",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "676": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "677": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)",
        "0"
      ]
    },
    "678": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "0",
        "32",
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)",
        "0",
        "32"
      ]
    },
    "680": {
      "op": "extract3",
      "defined_out": [
        "a#0",
        "values%0#0"
      ],
      "stack_out": [
        "a#0",
        "values%0#0"
      ]
    },
    "681": {
      "op": "swap",
      "stack_out": [
        "values%0#0",
        "a#0"
      ]
    },
    "682": {
      "op": "dup",
      "stack_out": [
        "values%0#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "683": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "values%0#0",
        "a#0",
        "a#0 (copy)",
        "32"
      ]
    },
    "685": {
      "op": "intc_2 // 8",
      "defined_out": [
        "32",
        "8",
        "a#0",
        "a#0 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "a#0",
        "a#0 (copy)",
        "32",
        "8"
      ]
    },
    "686": {
      "op": "extract3",
      "defined_out": [
        "a#0",
        "tuple_item%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "a#0",
        "tuple_item%1#0"
      ]
    },
    "687": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "values%0#0",
        "a#0",
        "values%1#0"
      ]
    },
    "688": {
      "op": "swap",
      "stack_out": [
        "values%0#0",
        "values%1#0",
        "a#0"
      ]
    },
    "689": {
      "op": "dup",
      "stack_out": [
        "values%0#0",
        "values%1#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "690": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "a#0",
        "a#0 (copy)",
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "values%0#0",
        "values%1#0",
        "a#0",
        "a#0 (copy)",
        "40"
      ]
    },
    "692": {
      "op": "intc_2 // 8",
      "stack_out": [
        "values%0#0",
        "values%1#0",
        "a#0",
        "a#0 (copy)",
        "40",
        "8"
      ]
    },
    "693": {
      "op": "extract3",
      "defined_out": [
        "a#0",
        "tuple_item%2#0",
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "values%0#0",
        "values%1#0",
        "a#0",
        "tuple_item%2#0"
      ]
    },
    "694": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "values%0#0",
        "values%1#0",
        "values%2#0"
      ],
      "stack_out": [
        "values%0#0",
        "values%1#0",
        "a#0",
        "values%2#0"
      ]
    },
    "695": {
      "op": "uncover 3",
      "defined_out": [
        "a#0",
        "foo#0",
        "values%1#0",
        "values%2#0"
      ],
      "stack_out": [
        "values%1#0",
        "a#0",
        "values%2#0",
        "foo#0"
      ]
    },
    "697": {
      "op": "swap",
      "stack_out": [
        "values%1#0",
        "a#0",
        "foo#0",
        "values%2#0"
      ]
    },
    "698": {
      "op": "uncover 3",
      "defined_out": [
        "a#0",
        "bar#0",
        "foo#0",
        "values%2#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0",
        "values%2#0",
        "bar#0"
      ]
    },
    "700": {
      "op": "cover 2",
      "defined_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "foo#0"
      ],
      "stack_out": [
        "a#0",
        "bar#0",
        "foo#0",
        "baz#0"
      ]
    },
    "702": {
      "op": "cover 2",
      "stack_out": [
        "a#0",
        "baz#0",
        "bar#0",
        "foo#0"
      ]
    },
    "704": {
      "op": "global ZeroAddress",
      "defined_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "foo#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "baz#0",
        "bar#0",
        "foo#0",
        "tmp%2#0"
      ]
    },
    "706": {
      "op": "!=",
      "defined_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "baz#0",
        "bar#0",
        "tmp%3#0"
      ]
    },
    "707": {
      "error": "use foo",
      "op": "assert // use foo",
      "defined_out": [
        "a#0",
        "baz#0",
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "a#0",
        "baz#0",
        "reinterpret_bool%0#0"
      ]
    },
    "708": {
      "error": "use bar",
      "op": "assert // use bar",
      "stack_out": [
        "a#0",
        "baz#0"
      ]
    },
    "709": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "baz#0",
        "0"
      ]
    },
    "710": {
      "op": "!=",
      "defined_out": [
        "a#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%4#0"
      ]
    },
    "711": {
      "error": "use baz",
      "op": "assert // use baz",
      "stack_out": [
        "a#0"
      ]
    },
    "712": {
      "callsub": "test_cases.mutable_native_types.contract.do_something",
      "op": "callsub do_something"
    },
    "715": {
      "retsub": true,
      "op": "retsub"
    },
    "716": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.delete_storage",
      "params": {
        "box_key#0": "uint64"
      },
      "block": "delete_storage",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "719": {
      "block": "delete_storage_block@0",
      "stack_in": [],
      "op": "bytec 4 // 0x70",
      "defined_out": [
        "0x70"
      ],
      "stack_out": [
        "0x70"
      ]
    },
    "721": {
      "op": "app_global_del",
      "stack_out": []
    },
    "722": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "724": {
      "op": "bytec 5 // 0x6c",
      "defined_out": [
        "0x6c",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x6c"
      ]
    },
    "726": {
      "op": "app_local_del",
      "stack_out": []
    },
    "727": {
      "op": "bytec 6 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "729": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "730": {
      "op": "pop",
      "stack_out": []
    },
    "731": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_key#0 (copy)"
      ],
      "stack_out": [
        "box_key#0 (copy)"
      ]
    },
    "733": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "734": {
      "op": "bytec 8 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"box_map\""
      ]
    },
    "736": {
      "op": "swap",
      "stack_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ]
    },
    "737": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "738": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "739": {
      "op": "pop",
      "stack_out": []
    },
    "740": {
      "retsub": true,
      "op": "retsub"
    },
    "741": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.struct_arg",
      "params": {
        "box_key#0": "uint64",
        "a#0": "bytes"
      },
      "block": "struct_arg",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "744": {
      "block": "struct_arg_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "745": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "746": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "747": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "748": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "749": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "a#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "a#0 (copy)"
      ]
    },
    "751": {
      "op": "replace3",
      "defined_out": [
        "updated_tuple%0#0"
      ],
      "stack_out": [
        "updated_tuple%0#0"
      ]
    },
    "752": {
      "op": "bytec_1 // \"nested\"",
      "stack_out": [
        "updated_tuple%0#0",
        "\"nested\""
      ]
    },
    "753": {
      "op": "swap",
      "stack_out": [
        "\"nested\"",
        "updated_tuple%0#0"
      ]
    },
    "754": {
      "op": "app_global_put",
      "stack_out": []
    },
    "755": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "756": {
      "op": "bytec 4 // 0x70",
      "defined_out": [
        "0",
        "0x70"
      ],
      "stack_out": [
        "0",
        "0x70"
      ]
    },
    "758": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "759": {
      "error": "check self.nested_proxy exists",
      "op": "assert // check self.nested_proxy exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "760": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "761": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "a#0 (copy)"
      ]
    },
    "763": {
      "op": "replace3",
      "defined_out": [
        "updated_tuple%1#0"
      ],
      "stack_out": [
        "updated_tuple%1#0"
      ]
    },
    "764": {
      "op": "bytec 4 // 0x70",
      "stack_out": [
        "updated_tuple%1#0",
        "0x70"
      ]
    },
    "766": {
      "op": "swap",
      "stack_out": [
        "0x70",
        "updated_tuple%1#0"
      ]
    },
    "767": {
      "op": "app_global_put",
      "stack_out": []
    },
    "768": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "770": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "771": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "772": {
      "op": "bytec 5 // 0x6c",
      "defined_out": [
        "0",
        "0x6c",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0",
        "0x6c"
      ]
    },
    "774": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "775": {
      "error": "check self.nested_local exists for account",
      "op": "assert // check self.nested_local exists for account",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "776": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "777": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "0",
        "a#0 (copy)"
      ]
    },
    "779": {
      "op": "replace3",
      "defined_out": [
        "tmp%0#0",
        "updated_tuple%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_tuple%2#0"
      ]
    },
    "780": {
      "op": "swap",
      "stack_out": [
        "updated_tuple%2#0",
        "tmp%0#0"
      ]
    },
    "781": {
      "op": "bytec 5 // 0x6c",
      "stack_out": [
        "updated_tuple%2#0",
        "tmp%0#0",
        "0x6c"
      ]
    },
    "783": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "0x6c",
        "updated_tuple%2#0"
      ]
    },
    "785": {
      "op": "app_local_put",
      "stack_out": []
    },
    "786": {
      "op": "bytec 6 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "788": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#1",
        "aggregate%box_get%1#1"
      ],
      "stack_out": [
        "aggregate%box_get%0#1",
        "aggregate%box_get%1#1"
      ]
    },
    "789": {
      "error": "check self.box exists",
      "op": "assert // check self.box exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "790": {
      "op": "intc_0 // 0",
      "stack_out": [
        "storage_value%0#0",
        "0"
      ]
    },
    "791": {
      "op": "frame_dig -1",
      "stack_out": [
        "storage_value%0#0",
        "0",
        "a#0 (copy)"
      ]
    },
    "793": {
      "op": "replace3",
      "defined_out": [
        "updated_tuple%3#0"
      ],
      "stack_out": [
        "updated_tuple%3#0"
      ]
    },
    "794": {
      "op": "bytec 6 // \"box\"",
      "stack_out": [
        "updated_tuple%3#0",
        "\"box\""
      ]
    },
    "796": {
      "op": "swap",
      "stack_out": [
        "\"box\"",
        "updated_tuple%3#0"
      ]
    },
    "797": {
      "op": "box_put",
      "stack_out": []
    },
    "798": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_key#0 (copy)"
      ],
      "stack_out": [
        "box_key#0 (copy)"
      ]
    },
    "800": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "801": {
      "op": "bytec 8 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"box_map\""
      ]
    },
    "803": {
      "op": "swap",
      "stack_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ]
    },
    "804": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "805": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "806": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#1",
        "aggregate%box_get%3#1",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%box_get%2#1",
        "aggregate%box_get%3#1"
      ]
    },
    "807": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "defined_out": [
        "box_prefixed_key%0#0",
        "storage_value%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "storage_value%1#0"
      ]
    },
    "808": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "storage_value%1#0",
        "0"
      ]
    },
    "809": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "storage_value%1#0",
        "0",
        "a#0 (copy)"
      ]
    },
    "811": {
      "op": "replace3",
      "defined_out": [
        "box_prefixed_key%0#0",
        "updated_tuple%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "updated_tuple%4#0"
      ]
    },
    "812": {
      "op": "box_put",
      "stack_out": []
    },
    "813": {
      "retsub": true,
      "op": "retsub"
    },
    "814": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.struct_return",
      "params": {},
      "block": "struct_return_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "815": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "816": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "817": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "818": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "819": {
      "op": "intc_3 // 16",
      "defined_out": [
        "0",
        "16",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "16"
      ]
    },
    "820": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "821": {
      "retsub": true,
      "op": "retsub"
    },
    "822": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.tup_return",
      "params": {},
      "block": "tup_return_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "823": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "824": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "825": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "826": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "32"
      ]
    },
    "828": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "32",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "32",
        "16"
      ]
    },
    "829": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "830": {
      "op": "dup",
      "defined_out": [
        "tuple_item%0#0",
        "tuple_item%0#0 (copy)"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "tuple_item%0#0 (copy)"
      ]
    },
    "831": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tuple_item%0#0",
        "tuple_item%0#0 (copy)",
        "0"
      ]
    },
    "832": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "tuple_item%0#0",
        "tuple_item%0#0 (copy)"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "tuple_item%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "833": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#1",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "aggregate%extract%1#1"
      ]
    },
    "834": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#1",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "aggregate%item0%0#1"
      ]
    },
    "835": {
      "op": "swap",
      "stack_out": [
        "aggregate%item0%0#1",
        "tuple_item%0#0"
      ]
    },
    "836": {
      "op": "intc_2 // 8",
      "stack_out": [
        "aggregate%item0%0#1",
        "tuple_item%0#0",
        "8"
      ]
    },
    "837": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#1",
        "tuple_item%0#0",
        "8",
        "8"
      ]
    },
    "838": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%2#1",
        "aggregate%item0%0#1"
      ],
      "stack_out": [
        "aggregate%item0%0#1",
        "aggregate%extract%2#1"
      ]
    },
    "839": {
      "op": "btoi",
      "defined_out": [
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "values%0#0",
        "values%1#0"
      ]
    },
    "840": {
      "retsub": true,
      "op": "retsub"
    },
    "841": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.calculate_sum",
      "params": {},
      "block": "calculate_sum",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "844": {
      "block": "calculate_sum_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "845": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "846": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "847": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "848": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "849": {
      "op": "intc_3 // 16",
      "defined_out": [
        "0",
        "16",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "16"
      ]
    },
    "850": {
      "op": "extract3",
      "defined_out": [
        "fixed_a#0"
      ],
      "stack_out": [
        "fixed_a#0"
      ]
    },
    "851": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fixed_a#0",
        "0"
      ]
    },
    "852": {
      "op": "bytec_1 // \"nested\"",
      "stack_out": [
        "fixed_a#0",
        "0",
        "\"nested\""
      ]
    },
    "853": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fixed_a#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "fixed_a#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "854": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "fixed_a#0",
        "maybe_value%1#0"
      ]
    },
    "855": {
      "op": "intc_3 // 16",
      "stack_out": [
        "fixed_a#0",
        "maybe_value%1#0",
        "16"
      ]
    },
    "856": {
      "op": "dup",
      "stack_out": [
        "fixed_a#0",
        "maybe_value%1#0",
        "16",
        "16"
      ]
    },
    "857": {
      "op": "extract3",
      "defined_out": [
        "fixed_a#0",
        "fixed_b#0"
      ],
      "stack_out": [
        "fixed_a#0",
        "fixed_b#0"
      ]
    },
    "858": {
      "op": "swap",
      "stack_out": [
        "fixed_b#0",
        "fixed_a#0"
      ]
    },
    "859": {
      "callsub": "test_cases.mutable_native_types.contract.add",
      "op": "callsub add",
      "defined_out": [
        "fixed_b#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "fixed_b#0",
        "tmp%0#0"
      ]
    },
    "862": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "fixed_b#0"
      ]
    },
    "863": {
      "callsub": "test_cases.mutable_native_types.contract.add",
      "op": "callsub add",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "866": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "867": {
      "op": "dupn 2",
      "defined_out": [
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "869": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#0",
        "result#0 (copy)",
        "100"
      ]
    },
    "871": {
      "op": "<",
      "defined_out": [
        "result#0",
        "result#6",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%3#0"
      ]
    },
    "872": {
      "op": "bz calculate_sum_after_if_else@2",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "875": {
      "block": "calculate_sum_if_body@1",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "0"
      ]
    },
    "876": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "0",
        "\"nested\""
      ]
    },
    "877": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "878": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0"
      ]
    },
    "879": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0",
        "32"
      ]
    },
    "881": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "32",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0",
        "32",
        "16"
      ]
    },
    "882": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tuple_item%2#0"
      ]
    },
    "883": {
      "op": "dup",
      "defined_out": [
        "tuple_item%2#0",
        "tuple_item%2#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tuple_item%2#0",
        "tuple_item%2#0 (copy)"
      ]
    },
    "884": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "tuple_item%2#0",
        "tuple_item%2#0 (copy)",
        "0"
      ]
    },
    "885": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "tuple_item%2#0",
        "tuple_item%2#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tuple_item%2#0",
        "tuple_item%2#0 (copy)",
        "0",
        "8"
      ]
    },
    "886": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%3#1",
        "tuple_item%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tuple_item%2#0",
        "aggregate%extract%3#1"
      ]
    },
    "887": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#1",
        "tuple_item%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tuple_item%2#0",
        "aggregate%item0%0#1"
      ]
    },
    "888": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%item0%0#1",
        "tuple_item%2#0"
      ]
    },
    "889": {
      "op": "intc_2 // 8",
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%item0%0#1",
        "tuple_item%2#0",
        "8"
      ]
    },
    "890": {
      "op": "dup",
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%item0%0#1",
        "tuple_item%2#0",
        "8",
        "8"
      ]
    },
    "891": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%4#1",
        "aggregate%item0%0#1"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%item0%0#1",
        "aggregate%extract%4#1"
      ]
    },
    "892": {
      "op": "btoi",
      "defined_out": [
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "c#0",
        "d#0"
      ]
    },
    "893": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "d#0",
        "c#0"
      ]
    },
    "894": {
      "op": "frame_dig 0",
      "defined_out": [
        "c#0",
        "d#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "d#0",
        "c#0",
        "result#0"
      ]
    },
    "896": {
      "op": "+",
      "stack_out": [
        "result#0",
        "result#6",
        "d#0",
        "result#0"
      ]
    },
    "897": {
      "op": "+",
      "defined_out": [
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "result#6"
      ]
    },
    "898": {
      "op": "frame_bury 1",
      "defined_out": [
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "900": {
      "block": "calculate_sum_after_if_else@2",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "result#0"
      ]
    },
    "902": {
      "op": "frame_bury 0"
    },
    "904": {
      "retsub": true,
      "op": "retsub"
    },
    "905": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "907": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "908": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "909": {
      "op": "bz approval_program_bare_routing@15",
      "stack_out": []
    },
    "912": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "915": {
      "op": "pushbytes 0xd1276f81 // method \"fixed_initialize()void\"",
      "defined_out": [
        "Method(fixed_initialize()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)"
      ]
    },
    "921": {
      "op": "pushbytes 0x0d2ab4c0 // method \"add_payment((address,uint64,uint64))void\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(fixed_initialize()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)"
      ]
    },
    "927": {
      "op": "pushbytes 0xe8b5d56c // method \"increment_payment(uint64,uint64)void\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)"
      ]
    },
    "933": {
      "op": "pushbytes 0x875901e5 // method \"create_storage(uint64)void\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(create_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)"
      ]
    },
    "939": {
      "op": "pushbytes 0x4abb70f1 // method \"local_struct()(address,uint64,uint64)\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(create_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))"
      ]
    },
    "945": {
      "op": "pushbytes 0xaf05f48f // method \"delete_storage(uint64)void\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)"
      ]
    },
    "951": {
      "op": "pushbytes 0xe8d71c8c // method \"struct_arg(uint64,(uint64,uint64))void\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)"
      ]
    },
    "957": {
      "op": "pushbytes 0x01aaa39c // method \"struct_return()(uint64,uint64)\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))"
      ]
    },
    "963": {
      "op": "pushbytes 0x8313dee7 // method \"tup_return()(uint64,uint64)\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))"
      ]
    },
    "969": {
      "op": "pushbytes 0x2ca849c1 // method \"calculate_sum()uint64\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(calculate_sum()uint64)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "Method(calculate_sum()uint64)"
      ]
    },
    "975": {
      "op": "uncover 10",
      "stack_out": [
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "Method(calculate_sum()uint64)",
        "tmp%2#0"
      ]
    },
    "977": {
      "op": "match approval_program_fixed_initialize_route@3 approval_program_add_payment_route@4 approval_program_increment_payment_route@5 approval_program_create_storage_route@6 approval_program_local_struct_route@7 approval_program_delete_storage_route@8 approval_program_struct_arg_route@9 approval_program_struct_return_route@10 approval_program_tup_return_route@11 approval_program_calculate_sum_route@12",
      "stack_out": []
    },
    "999": {
      "block": "approval_program_after_if_else@21",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1000": {
      "block": "approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22",
      "stack_in": [
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "1001": {
      "block": "approval_program_calculate_sum_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "1003": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "NoOp"
      ]
    },
    "1004": {
      "op": "==",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "1005": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1006": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "1008": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "0"
      ]
    },
    "1009": {
      "op": "!=",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "1010": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1011": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.calculate_sum",
      "op": "callsub calculate_sum",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "1014": {
      "op": "itob",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "1015": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "0x151f7c75"
      ]
    },
    "1017": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%57#0"
      ]
    },
    "1018": {
      "op": "concat",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "1019": {
      "op": "log",
      "stack_out": []
    },
    "1020": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1021": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "1024": {
      "block": "approval_program_tup_return_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1026": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "NoOp"
      ]
    },
    "1027": {
      "op": "==",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1028": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1029": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "1031": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "0"
      ]
    },
    "1032": {
      "op": "!=",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "1033": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1034": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.tup_return",
      "op": "callsub tup_return",
      "defined_out": [
        "tmp%48#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "tmp%49#0"
      ]
    },
    "1037": {
      "op": "swap",
      "stack_out": [
        "tmp%49#0",
        "tmp%48#0"
      ]
    },
    "1038": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#1",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "aggregate%as_Encoded(uint64)%0#1"
      ]
    },
    "1039": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#1",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "aggregate%as_Encoded(uint64)%0#1",
        "0x"
      ]
    },
    "1040": {
      "op": "swap",
      "stack_out": [
        "tmp%49#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#1"
      ]
    },
    "1041": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%0#1",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "aggregate%encoded%0#1"
      ]
    },
    "1042": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded%0#1",
        "tmp%49#0"
      ]
    },
    "1043": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#1",
        "aggregate%encoded%0#1"
      ],
      "stack_out": [
        "aggregate%encoded%0#1",
        "aggregate%as_Encoded(uint64)%1#1"
      ]
    },
    "1044": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%1#1"
      ],
      "stack_out": [
        "aggregate%encoded%1#1"
      ]
    },
    "1045": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%encoded%1#1",
        "0x"
      ]
    },
    "1046": {
      "op": "concat",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "1047": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "0x151f7c75"
      ]
    },
    "1049": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%50#0"
      ]
    },
    "1050": {
      "op": "concat",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1051": {
      "op": "log",
      "stack_out": []
    },
    "1052": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1053": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "1056": {
      "block": "approval_program_struct_return_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "1058": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "NoOp"
      ]
    },
    "1059": {
      "op": "==",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "1060": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1061": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1063": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "0"
      ]
    },
    "1064": {
      "op": "!=",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1065": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1066": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.struct_return",
      "op": "callsub struct_return",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1069": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "0x151f7c75"
      ]
    },
    "1071": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%42#0"
      ]
    },
    "1072": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1073": {
      "op": "log",
      "stack_out": []
    },
    "1074": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1075": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "1078": {
      "block": "approval_program_struct_arg_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "1080": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "NoOp"
      ]
    },
    "1081": {
      "op": "==",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "1082": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1083": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "1085": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "0"
      ]
    },
    "1086": {
      "op": "!=",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "1087": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1088": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "1091": {
      "op": "btoi",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "1092": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "1095": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.struct_arg",
      "op": "callsub struct_arg",
      "stack_out": []
    },
    "1098": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1099": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "1102": {
      "block": "approval_program_delete_storage_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1104": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "NoOp"
      ]
    },
    "1105": {
      "op": "==",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "1106": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1107": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1109": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "0"
      ]
    },
    "1110": {
      "op": "!=",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "1111": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1112": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "1115": {
      "op": "btoi",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "1116": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.delete_storage",
      "op": "callsub delete_storage",
      "stack_out": []
    },
    "1119": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1120": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "1123": {
      "block": "approval_program_local_struct_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1125": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "NoOp"
      ]
    },
    "1126": {
      "op": "==",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1127": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1128": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1130": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "0"
      ]
    },
    "1131": {
      "op": "!=",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1132": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1133": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.local_struct",
      "op": "callsub local_struct",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1136": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "0x151f7c75"
      ]
    },
    "1138": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%26#0"
      ]
    },
    "1139": {
      "op": "concat",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1140": {
      "op": "log",
      "stack_out": []
    },
    "1141": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1142": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "1145": {
      "block": "approval_program_create_storage_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1147": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "NoOp"
      ]
    },
    "1148": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1149": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1150": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1152": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0"
      ]
    },
    "1153": {
      "op": "!=",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1154": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1155": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "1158": {
      "op": "btoi",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1159": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.create_storage",
      "op": "callsub create_storage",
      "stack_out": []
    },
    "1162": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1163": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "1166": {
      "block": "approval_program_increment_payment_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1168": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "NoOp"
      ]
    },
    "1169": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1170": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1171": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1173": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0"
      ]
    },
    "1174": {
      "op": "!=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1175": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1176": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "1179": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1180": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "1183": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1184": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.increment_payment",
      "op": "callsub increment_payment",
      "stack_out": []
    },
    "1187": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1188": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "1191": {
      "block": "approval_program_add_payment_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1193": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "1194": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1195": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1196": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1198": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "1199": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1200": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1201": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32],uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32],uint64,uint64)%0#0"
      ]
    },
    "1204": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.add_payment",
      "op": "callsub add_payment",
      "stack_out": []
    },
    "1207": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1208": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "1211": {
      "block": "approval_program_fixed_initialize_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1213": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "1214": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1215": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1216": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1218": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "1219": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1220": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1221": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.fixed_initialize",
      "op": "callsub fixed_initialize"
    },
    "1224": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1225": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "1228": {
      "block": "approval_program_bare_routing@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "1230": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "0"
      ]
    },
    "1231": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%59#0"
      ]
    },
    "1232": {
      "op": "match approval_program___algopy_default_create@16",
      "stack_out": []
    },
    "1236": {
      "block": "approval_program_switch_case_next@20",
      "stack_in": [],
      "op": "b approval_program_after_if_else@21"
    },
    "1239": {
      "block": "approval_program___algopy_default_create@16",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "1241": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "0"
      ]
    },
    "1242": {
      "op": "==",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "1243": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1244": {
      "block": "approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__algopy_default_create@18",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1245": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    }
  }
}