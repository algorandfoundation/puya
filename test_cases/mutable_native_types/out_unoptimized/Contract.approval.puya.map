{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiLA;;;AAEW;;AAAA;AAAA;AAAA;AAAA;AAAQ;;AAAA;AAAA;AAAA;AAAA;AAAR;AAAP;AAGJ;;;;;;AAlH0B;;AAAoB;AAAA;AAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACc;;AAAmB;AAAnB;AAAwB;;AAAmB;AAAnB;AAAA;AAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACW;;AAAmB;AAAnB;AAAwB;;AAAmB;AAAnB;AAAA;AAHzB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAd;AAAA;AAAA;AAWM;;AACA;AAAA;AAGA;;;;AAAA;AAAA;AAAA;;AALK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGL;AAHK;AAAA;AAAA;;;AAGL;AAHK;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAIL;AAJK;AAAA;AAAA;;;AAIL;AAJK;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAX;;;;;AAAA;AAAA;AAQA;AAAoB;AAApB;AACgB;;;AAAA;AAAhB;AAAA;AAAA;;AAIQ;;AAAA;AACG;AAAX;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACW;AAAX;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACW;;AAAX;AAAM;;AAAN;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAGK;AADc;AAAA;AAAA;AAAA;AACH;AADG;AAAA;AACQ;;AADR;AAAA;AAAA;AAAA;AAGZ;;AAAA;AAAP;AAEsC;AAApB;AAAoB;AAApB;AAAA;AAAoB;AAApB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACK;AAAhB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAP;AACuB;AAAhB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAP;AACuB;;AAAhB;AAAA;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAP;AAEkC;AAC3B;AAAP;;AAER;;;AAEe;AAAA;AAAA;AAAA;AAAoB;AAApB;AAAP;AACmC;;AAAnC;AAAA;AAAA;AAAA;AAAc;AAAA;AAAA;AAAA;AAAd;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAA;AAAA;AAAA;;AAER;;;AAEuB;AAAA;AAAA;AAAA;AAAR;;AAAA;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAER;;;AAEkC;AAAA;AAAA;AAAA;AAA1B;;AAAA;AAAA;AACgC;AAAA;AAAA;AAAA;AAAd;;AAAlB;;AAAA;;AAAA;AACO;;AAAA;;;AAAA;AAAP;AACgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAnB;;AAAA;AAAb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIY;;AAAR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoB;;;AAApB;AAAA;AAAiC;;;AAAjC;AAAA;AAAA;AAAA;AAGe;AAAA;AAAA;;AAAA;AAAA;AAAY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAS;AAAA;;AAAA;AAAA;AAAA;AAAxC;;AAAA;AAAA;;AAAA;;AAAA;;AACO;;AAAA;AAAP;AACA;AACO;AAAA;AAAP;AACA;;;AACA;AAER;;;AAEY;;AAAJ;AACsB;;AAAlB;;AAAJ;AACI;;AAAJ;;AACiB;;AAAA;AAAb;;AAAA;AAAA;AAAJ;;;AAIR;;;AAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACkB;;AAAlB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACa;;AAAA;AAAb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAIO;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAER;;;AAEkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD;AAAA;;;AAAA;AAAe;;;AAAf;AAAT;;AACY;;AAAT;AAAX;;;AACmB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AACA;;AAAA;AACA;;;;;AACJ;;AAAA;AA9GR;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAqGK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAVA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAnFL;;;AAAA;AAAA;;;AAmFK;;;AAAA;;;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA1EL;;;AAAA;AA0EK;;;AAAA;;;;AAZA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAvDL;;;AAAA;AAuDK;;;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlDL;;;AAAA;AAAA;;;AAAA;AAkDK;;;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA5CL;;;AA4CK;;;AAAA;;;;AApBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAxBL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 16"
    },
    "7": {
      "op": "bytecblock 0x \"nested\" \"num_payments\" \"payments\" 0x70 0x6c \"box\" 0x151f7c75 \"box_map\""
    },
    "60": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "62": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "65": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.contract.Contract.__init__",
      "op": "callsub __init__"
    },
    "68": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "71": {
      "op": "return",
      "stack_out": []
    },
    "72": {
      "subroutine": "test_cases.mutable_native_types.contract.add",
      "params": {
        "val#0": "bytes"
      },
      "block": "add",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "75": {
      "block": "add_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "val#0 (copy)"
      ],
      "stack_out": [
        "val#0 (copy)"
      ]
    },
    "77": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "val#0 (copy)"
      ],
      "stack_out": [
        "val#0 (copy)",
        "0"
      ]
    },
    "78": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "val#0 (copy)"
      ],
      "stack_out": [
        "val#0 (copy)",
        "0",
        "8"
      ]
    },
    "79": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "80": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "81": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "val#0 (copy)"
      ]
    },
    "83": {
      "op": "intc_2 // 8",
      "stack_out": [
        "tmp%0#0",
        "val#0 (copy)",
        "8"
      ]
    },
    "84": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "val#0 (copy)",
        "8",
        "8"
      ]
    },
    "85": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded%1#0"
      ]
    },
    "86": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "87": {
      "op": "+",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "88": {
      "retsub": true,
      "op": "retsub"
    },
    "89": {
      "subroutine": "test_cases.mutable_native_types.contract.do_something",
      "params": {
        "pay#0": "bytes"
      },
      "block": "do_something",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "92": {
      "block": "do_something_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "pay%out#0"
      ],
      "stack_out": [
        "pay%out#0"
      ]
    },
    "94": {
      "retsub": true,
      "op": "retsub"
    },
    "95": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.__init__",
      "params": {},
      "block": "__init___block@0",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "97": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "98": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "99": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "100": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "101": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "102": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded%0#0"
      ]
    },
    "103": {
      "op": "swap",
      "stack_out": [
        "encoded%0#0",
        "tmp%1#0"
      ]
    },
    "104": {
      "op": "itob",
      "defined_out": [
        "encoded%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "105": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0"
      ],
      "stack_out": [
        "encoded%1#0"
      ]
    },
    "106": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded%1#0",
        "0x"
      ]
    },
    "107": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0"
      ],
      "stack_out": [
        "encoded%2#0"
      ]
    },
    "108": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "encoded%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "tmp%2#0"
      ]
    },
    "110": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "encoded%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "tmp%2#0",
        "1"
      ]
    },
    "111": {
      "op": "+",
      "defined_out": [
        "encoded%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "tmp%3#0"
      ]
    },
    "112": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "encoded%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "114": {
      "op": "intc_1 // 1",
      "stack_out": [
        "encoded%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "1"
      ]
    },
    "115": {
      "op": "+",
      "defined_out": [
        "encoded%2#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "116": {
      "op": "swap",
      "stack_out": [
        "encoded%2#0",
        "tmp%5#0",
        "tmp%3#0"
      ]
    },
    "117": {
      "op": "itob",
      "defined_out": [
        "encoded%2#0",
        "tmp%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "tmp%5#0",
        "val_as_bytes%2#0"
      ]
    },
    "118": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded%2#0",
        "tmp%5#0",
        "val_as_bytes%2#0",
        "0x"
      ]
    },
    "119": {
      "op": "swap",
      "stack_out": [
        "encoded%2#0",
        "tmp%5#0",
        "0x",
        "val_as_bytes%2#0"
      ]
    },
    "120": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0",
        "encoded%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "tmp%5#0",
        "encoded%3#0"
      ]
    },
    "121": {
      "op": "swap",
      "stack_out": [
        "encoded%2#0",
        "encoded%3#0",
        "tmp%5#0"
      ]
    },
    "122": {
      "op": "itob",
      "defined_out": [
        "encoded%2#0",
        "encoded%3#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "encoded%3#0",
        "val_as_bytes%3#0"
      ]
    },
    "123": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0",
        "encoded%4#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "encoded%4#0"
      ]
    },
    "124": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded%2#0",
        "encoded%4#0",
        "0x"
      ]
    },
    "125": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0",
        "encoded%5#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "encoded%5#0"
      ]
    },
    "126": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "encoded%2#0",
        "encoded%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "encoded%5#0",
        "tmp%6#0"
      ]
    },
    "128": {
      "op": "intc_1 // 1",
      "stack_out": [
        "encoded%2#0",
        "encoded%5#0",
        "tmp%6#0",
        "1"
      ]
    },
    "129": {
      "op": "+",
      "defined_out": [
        "encoded%2#0",
        "encoded%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "encoded%5#0",
        "tmp%7#0"
      ]
    },
    "130": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "encoded%2#0",
        "encoded%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "encoded%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "132": {
      "op": "intc_1 // 1",
      "stack_out": [
        "encoded%2#0",
        "encoded%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "1"
      ]
    },
    "133": {
      "op": "+",
      "defined_out": [
        "encoded%2#0",
        "encoded%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "encoded%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "134": {
      "op": "swap",
      "stack_out": [
        "encoded%2#0",
        "encoded%5#0",
        "tmp%9#0",
        "tmp%7#0"
      ]
    },
    "135": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded%2#0",
        "encoded%5#0",
        "tmp%9#0",
        "tmp%7#0",
        "0x"
      ]
    },
    "136": {
      "op": "uncover 4",
      "stack_out": [
        "encoded%5#0",
        "tmp%9#0",
        "tmp%7#0",
        "0x",
        "encoded%2#0"
      ]
    },
    "138": {
      "op": "concat",
      "defined_out": [
        "encoded%5#0",
        "encoded%6#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "encoded%5#0",
        "tmp%9#0",
        "tmp%7#0",
        "encoded%6#0"
      ]
    },
    "139": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%9#0",
        "tmp%7#0",
        "encoded%6#0",
        "encoded%5#0"
      ]
    },
    "141": {
      "op": "concat",
      "defined_out": [
        "encoded%7#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%7#0",
        "encoded%7#0"
      ]
    },
    "142": {
      "op": "cover 2",
      "stack_out": [
        "encoded%7#0",
        "tmp%9#0",
        "tmp%7#0"
      ]
    },
    "144": {
      "op": "itob",
      "defined_out": [
        "encoded%7#0",
        "tmp%9#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "encoded%7#0",
        "tmp%9#0",
        "val_as_bytes%4#0"
      ]
    },
    "145": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded%7#0",
        "tmp%9#0",
        "val_as_bytes%4#0",
        "0x"
      ]
    },
    "146": {
      "op": "swap",
      "stack_out": [
        "encoded%7#0",
        "tmp%9#0",
        "0x",
        "val_as_bytes%4#0"
      ]
    },
    "147": {
      "op": "concat",
      "defined_out": [
        "encoded%7#0",
        "encoded%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "encoded%7#0",
        "tmp%9#0",
        "encoded%8#0"
      ]
    },
    "148": {
      "op": "swap",
      "stack_out": [
        "encoded%7#0",
        "encoded%8#0",
        "tmp%9#0"
      ]
    },
    "149": {
      "op": "itob",
      "defined_out": [
        "encoded%7#0",
        "encoded%8#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded%7#0",
        "encoded%8#0",
        "val_as_bytes%5#0"
      ]
    },
    "150": {
      "op": "concat",
      "defined_out": [
        "encoded%7#0",
        "encoded%9#0"
      ],
      "stack_out": [
        "encoded%7#0",
        "encoded%9#0"
      ]
    },
    "151": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded%7#0",
        "encoded%9#0",
        "0x"
      ]
    },
    "152": {
      "op": "concat",
      "defined_out": [
        "encoded%10#0",
        "encoded%7#0"
      ],
      "stack_out": [
        "encoded%7#0",
        "encoded%10#0"
      ]
    },
    "153": {
      "op": "concat",
      "defined_out": [
        "encoded%11#0"
      ],
      "stack_out": [
        "encoded%11#0"
      ]
    },
    "154": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded%11#0",
        "0x"
      ]
    },
    "155": {
      "op": "concat",
      "defined_out": [
        "encoded%12#0"
      ],
      "stack_out": [
        "encoded%12#0"
      ]
    },
    "156": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "encoded%12#0"
      ],
      "stack_out": [
        "encoded%12#0",
        "\"nested\""
      ]
    },
    "157": {
      "op": "swap",
      "stack_out": [
        "\"nested\"",
        "encoded%12#0"
      ]
    },
    "158": {
      "op": "app_global_put",
      "stack_out": []
    },
    "159": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "161": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "162": {
      "op": "swap",
      "stack_out": [
        "tmp%11#0",
        "tmp%10#0"
      ]
    },
    "163": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "0x0000",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%10#0",
        "0x0000"
      ]
    },
    "167": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%11#0",
        "tmp%10#0",
        "0x0000",
        "0x"
      ]
    },
    "168": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%10#0",
        "array_data%0#0"
      ]
    },
    "169": {
      "op": "cover 2",
      "stack_out": [
        "array_data%0#0",
        "tmp%11#0",
        "tmp%10#0"
      ]
    },
    "171": {
      "op": "itob",
      "defined_out": [
        "array_data%0#0",
        "tmp%11#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "tmp%11#0",
        "val_as_bytes%6#0"
      ]
    },
    "172": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "array_data%0#0",
        "tmp%11#0",
        "val_as_bytes%6#0",
        "0x"
      ]
    },
    "173": {
      "op": "swap",
      "stack_out": [
        "array_data%0#0",
        "tmp%11#0",
        "0x",
        "val_as_bytes%6#0"
      ]
    },
    "174": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "encoded%13#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "tmp%11#0",
        "encoded%13#0"
      ]
    },
    "175": {
      "op": "swap",
      "stack_out": [
        "array_data%0#0",
        "encoded%13#0",
        "tmp%11#0"
      ]
    },
    "176": {
      "op": "itob",
      "defined_out": [
        "array_data%0#0",
        "encoded%13#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%13#0",
        "val_as_bytes%7#0"
      ]
    },
    "177": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "encoded%14#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%14#0"
      ]
    },
    "178": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "array_data%0#0",
        "encoded%14#0",
        "0x"
      ]
    },
    "179": {
      "op": "len",
      "defined_out": [
        "array_data%0#0",
        "encoded%14#0",
        "length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%14#0",
        "length%0#0"
      ]
    },
    "180": {
      "op": "itob",
      "defined_out": [
        "array_data%0#0",
        "as_bytes%0#0",
        "encoded%14#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%14#0",
        "as_bytes%0#0"
      ]
    },
    "181": {
      "op": "extract 6 2",
      "defined_out": [
        "array_data%0#0",
        "encoded%14#0",
        "length_uint16%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%14#0",
        "length_uint16%0#0"
      ]
    },
    "184": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "array_data%0#0",
        "encoded%14#0",
        "length_uint16%0#0",
        "0x"
      ]
    },
    "185": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "encoded%14#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%14#0",
        "encoded_value%0#0"
      ]
    },
    "186": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "array_data%0#0",
        "encoded%14#0",
        "encoded_value%0#0",
        "0x"
      ]
    },
    "187": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "array_data%0#0",
        "encoded%14#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%14#0",
        "encoded_value%0#0",
        "0x",
        "encoded_value%0#0 (copy)"
      ]
    },
    "189": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "encoded%14#0",
        "encoded_value%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%14#0",
        "encoded_value%0#0",
        "tail%0#0"
      ]
    },
    "190": {
      "op": "cover 2",
      "stack_out": [
        "array_data%0#0",
        "tail%0#0",
        "encoded%14#0",
        "encoded_value%0#0"
      ]
    },
    "192": {
      "op": "len",
      "defined_out": [
        "array_data%0#0",
        "data_length%0#0",
        "encoded%14#0",
        "tail%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "tail%0#0",
        "encoded%14#0",
        "data_length%0#0"
      ]
    },
    "193": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "array_data%0#0",
        "data_length%0#0",
        "encoded%14#0",
        "tail%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "tail%0#0",
        "encoded%14#0",
        "data_length%0#0",
        "22"
      ]
    },
    "195": {
      "op": "+",
      "defined_out": [
        "array_data%0#0",
        "current_tail_offset%0#0",
        "encoded%14#0",
        "tail%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "tail%0#0",
        "encoded%14#0",
        "current_tail_offset%0#0"
      ]
    },
    "196": {
      "op": "cover 2",
      "stack_out": [
        "array_data%0#0",
        "current_tail_offset%0#0",
        "tail%0#0",
        "encoded%14#0"
      ]
    },
    "198": {
      "op": "pushint 22 // 22",
      "stack_out": [
        "array_data%0#0",
        "current_tail_offset%0#0",
        "tail%0#0",
        "encoded%14#0",
        "22"
      ]
    },
    "200": {
      "op": "itob",
      "defined_out": [
        "array_data%0#0",
        "as_bytes%1#0",
        "current_tail_offset%0#0",
        "encoded%14#0",
        "tail%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "current_tail_offset%0#0",
        "tail%0#0",
        "encoded%14#0",
        "as_bytes%1#0"
      ]
    },
    "201": {
      "op": "extract 6 2",
      "defined_out": [
        "array_data%0#0",
        "current_tail_offset%0#0",
        "encoded%14#0",
        "offset_as_uint16%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "current_tail_offset%0#0",
        "tail%0#0",
        "encoded%14#0",
        "offset_as_uint16%0#0"
      ]
    },
    "204": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "current_tail_offset%0#0",
        "encoded%15#0",
        "tail%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "current_tail_offset%0#0",
        "tail%0#0",
        "encoded%15#0"
      ]
    },
    "205": {
      "op": "cover 2",
      "stack_out": [
        "array_data%0#0",
        "encoded%15#0",
        "current_tail_offset%0#0",
        "tail%0#0"
      ]
    },
    "207": {
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "\"\"",
        "array_data%0#0",
        "current_tail_offset%0#0",
        "encoded%15#0",
        "tail%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%15#0",
        "current_tail_offset%0#0",
        "tail%0#0",
        "\"\""
      ]
    },
    "208": {
      "op": "len",
      "defined_out": [
        "array_data%0#0",
        "current_tail_offset%0#0",
        "encoded%15#0",
        "length%1#0",
        "tail%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%15#0",
        "current_tail_offset%0#0",
        "tail%0#0",
        "length%1#0"
      ]
    },
    "209": {
      "op": "itob",
      "defined_out": [
        "array_data%0#0",
        "as_bytes%2#0",
        "current_tail_offset%0#0",
        "encoded%15#0",
        "tail%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%15#0",
        "current_tail_offset%0#0",
        "tail%0#0",
        "as_bytes%2#0"
      ]
    },
    "210": {
      "op": "extract 6 2",
      "defined_out": [
        "array_data%0#0",
        "current_tail_offset%0#0",
        "encoded%15#0",
        "length_uint16%1#0",
        "tail%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%15#0",
        "current_tail_offset%0#0",
        "tail%0#0",
        "length_uint16%1#0"
      ]
    },
    "213": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "array_data%0#0",
        "encoded%15#0",
        "current_tail_offset%0#0",
        "tail%0#0",
        "length_uint16%1#0",
        "\"\""
      ]
    },
    "214": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "current_tail_offset%0#0",
        "encoded%15#0",
        "encoded_value%1#0",
        "tail%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%15#0",
        "current_tail_offset%0#0",
        "tail%0#0",
        "encoded_value%1#0"
      ]
    },
    "215": {
      "op": "swap",
      "stack_out": [
        "array_data%0#0",
        "encoded%15#0",
        "current_tail_offset%0#0",
        "encoded_value%1#0",
        "tail%0#0"
      ]
    },
    "216": {
      "op": "dig 1",
      "defined_out": [
        "array_data%0#0",
        "current_tail_offset%0#0",
        "encoded%15#0",
        "encoded_value%1#0",
        "encoded_value%1#0 (copy)",
        "tail%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%15#0",
        "current_tail_offset%0#0",
        "encoded_value%1#0",
        "tail%0#0",
        "encoded_value%1#0 (copy)"
      ]
    },
    "218": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "current_tail_offset%0#0",
        "encoded%15#0",
        "encoded_value%1#0",
        "tail%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%15#0",
        "current_tail_offset%0#0",
        "encoded_value%1#0",
        "tail%1#0"
      ]
    },
    "219": {
      "op": "swap",
      "stack_out": [
        "array_data%0#0",
        "encoded%15#0",
        "current_tail_offset%0#0",
        "tail%1#0",
        "encoded_value%1#0"
      ]
    },
    "220": {
      "op": "len",
      "defined_out": [
        "array_data%0#0",
        "current_tail_offset%0#0",
        "data_length%1#0",
        "encoded%15#0",
        "tail%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%15#0",
        "current_tail_offset%0#0",
        "tail%1#0",
        "data_length%1#0"
      ]
    },
    "221": {
      "op": "dig 2",
      "defined_out": [
        "array_data%0#0",
        "current_tail_offset%0#0",
        "current_tail_offset%0#0 (copy)",
        "data_length%1#0",
        "encoded%15#0",
        "tail%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%15#0",
        "current_tail_offset%0#0",
        "tail%1#0",
        "data_length%1#0",
        "current_tail_offset%0#0 (copy)"
      ]
    },
    "223": {
      "op": "+",
      "defined_out": [
        "array_data%0#0",
        "current_tail_offset%0#0",
        "current_tail_offset%1#0",
        "encoded%15#0",
        "tail%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%15#0",
        "current_tail_offset%0#0",
        "tail%1#0",
        "current_tail_offset%1#0"
      ]
    },
    "224": {
      "op": "swap",
      "stack_out": [
        "array_data%0#0",
        "encoded%15#0",
        "current_tail_offset%0#0",
        "current_tail_offset%1#0",
        "tail%1#0"
      ]
    },
    "225": {
      "op": "uncover 2",
      "stack_out": [
        "array_data%0#0",
        "encoded%15#0",
        "current_tail_offset%1#0",
        "tail%1#0",
        "current_tail_offset%0#0"
      ]
    },
    "227": {
      "op": "itob",
      "defined_out": [
        "array_data%0#0",
        "as_bytes%3#0",
        "current_tail_offset%1#0",
        "encoded%15#0",
        "tail%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%15#0",
        "current_tail_offset%1#0",
        "tail%1#0",
        "as_bytes%3#0"
      ]
    },
    "228": {
      "op": "extract 6 2",
      "defined_out": [
        "array_data%0#0",
        "current_tail_offset%1#0",
        "encoded%15#0",
        "offset_as_uint16%1#0",
        "tail%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%15#0",
        "current_tail_offset%1#0",
        "tail%1#0",
        "offset_as_uint16%1#0"
      ]
    },
    "231": {
      "op": "uncover 3",
      "stack_out": [
        "array_data%0#0",
        "current_tail_offset%1#0",
        "tail%1#0",
        "offset_as_uint16%1#0",
        "encoded%15#0"
      ]
    },
    "233": {
      "op": "swap",
      "stack_out": [
        "array_data%0#0",
        "current_tail_offset%1#0",
        "tail%1#0",
        "encoded%15#0",
        "offset_as_uint16%1#0"
      ]
    },
    "234": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "current_tail_offset%1#0",
        "encoded%16#0",
        "tail%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "current_tail_offset%1#0",
        "tail%1#0",
        "encoded%16#0"
      ]
    },
    "235": {
      "op": "swap",
      "stack_out": [
        "array_data%0#0",
        "current_tail_offset%1#0",
        "encoded%16#0",
        "tail%1#0"
      ]
    },
    "236": {
      "op": "uncover 3",
      "stack_out": [
        "current_tail_offset%1#0",
        "encoded%16#0",
        "tail%1#0",
        "array_data%0#0"
      ]
    },
    "238": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded%16#0",
        "tail%2#0"
      ],
      "stack_out": [
        "current_tail_offset%1#0",
        "encoded%16#0",
        "tail%2#0"
      ]
    },
    "239": {
      "op": "swap",
      "stack_out": [
        "current_tail_offset%1#0",
        "tail%2#0",
        "encoded%16#0"
      ]
    },
    "240": {
      "op": "uncover 2",
      "stack_out": [
        "tail%2#0",
        "encoded%16#0",
        "current_tail_offset%1#0"
      ]
    },
    "242": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "encoded%16#0",
        "tail%2#0"
      ],
      "stack_out": [
        "tail%2#0",
        "encoded%16#0",
        "as_bytes%4#0"
      ]
    },
    "243": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%16#0",
        "offset_as_uint16%2#0",
        "tail%2#0"
      ],
      "stack_out": [
        "tail%2#0",
        "encoded%16#0",
        "offset_as_uint16%2#0"
      ]
    },
    "246": {
      "op": "concat",
      "defined_out": [
        "encoded%17#0",
        "tail%2#0"
      ],
      "stack_out": [
        "tail%2#0",
        "encoded%17#0"
      ]
    },
    "247": {
      "op": "swap",
      "stack_out": [
        "encoded%17#0",
        "tail%2#0"
      ]
    },
    "248": {
      "op": "concat",
      "defined_out": [
        "encoded%18#0"
      ],
      "stack_out": [
        "encoded%18#0"
      ]
    },
    "249": {
      "op": "pushbytes \"dyn\"",
      "defined_out": [
        "\"dyn\"",
        "encoded%18#0"
      ],
      "stack_out": [
        "encoded%18#0",
        "\"dyn\""
      ]
    },
    "254": {
      "op": "swap",
      "stack_out": [
        "\"dyn\"",
        "encoded%18#0"
      ]
    },
    "255": {
      "op": "app_global_put",
      "stack_out": []
    },
    "256": {
      "op": "bytec_2 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\""
      ],
      "stack_out": [
        "\"num_payments\""
      ]
    },
    "257": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"num_payments\"",
        "0"
      ],
      "stack_out": [
        "\"num_payments\"",
        "0"
      ]
    },
    "258": {
      "op": "app_global_put",
      "stack_out": []
    },
    "259": {
      "op": "pushint 384 // 384",
      "defined_out": [
        "384"
      ],
      "stack_out": [
        "384"
      ]
    },
    "262": {
      "op": "bzero",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "263": {
      "op": "bytec_3 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "\"payments\""
      ]
    },
    "264": {
      "op": "swap",
      "stack_out": [
        "\"payments\"",
        "materialized_values%0#0"
      ]
    },
    "265": {
      "op": "app_global_put",
      "stack_out": []
    },
    "266": {
      "retsub": true,
      "op": "retsub"
    },
    "267": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.fixed_initialize",
      "params": {},
      "block": "fixed_initialize_block@0",
      "stack_in": [],
      "op": "pushint 24 // 24",
      "defined_out": [
        "24"
      ],
      "stack_out": [
        "24"
      ]
    },
    "269": {
      "op": "bzero",
      "defined_out": [
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0"
      ]
    },
    "270": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "0"
      ]
    },
    "271": {
      "op": "itob",
      "defined_out": [
        "arr_3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%0#0"
      ]
    },
    "272": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_3#0",
        "encoded_value%0#0",
        "0"
      ]
    },
    "273": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "arr_3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%0#0",
        "0",
        "8"
      ]
    },
    "274": {
      "op": "*",
      "defined_out": [
        "arr_3#0",
        "encoded_value%0#0",
        "write_offset%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%0#0",
        "write_offset%0#0"
      ]
    },
    "275": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "write_offset%0#0",
        "arr_3#0"
      ]
    },
    "277": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "arr_3#0",
        "write_offset%0#0"
      ]
    },
    "278": {
      "op": "uncover 2",
      "stack_out": [
        "arr_3#0",
        "write_offset%0#0",
        "encoded_value%0#0"
      ]
    },
    "280": {
      "op": "replace3",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "281": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "1"
      ]
    },
    "282": {
      "op": "itob",
      "defined_out": [
        "arr_3#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%1#0"
      ]
    },
    "283": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "encoded_value%1#0",
        "1"
      ]
    },
    "284": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "encoded_value%1#0",
        "1",
        "8"
      ]
    },
    "285": {
      "op": "*",
      "defined_out": [
        "arr_3#0",
        "encoded_value%1#0",
        "write_offset%1#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%1#0",
        "write_offset%1#0"
      ]
    },
    "286": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%1#0",
        "write_offset%1#0",
        "arr_3#0"
      ]
    },
    "288": {
      "op": "swap",
      "stack_out": [
        "encoded_value%1#0",
        "arr_3#0",
        "write_offset%1#0"
      ]
    },
    "289": {
      "op": "uncover 2",
      "stack_out": [
        "arr_3#0",
        "write_offset%1#0",
        "encoded_value%1#0"
      ]
    },
    "291": {
      "op": "replace3",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "292": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "2"
      ]
    },
    "294": {
      "op": "itob",
      "defined_out": [
        "arr_3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%2#0"
      ]
    },
    "295": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "arr_3#0",
        "encoded_value%2#0",
        "2"
      ]
    },
    "297": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "encoded_value%2#0",
        "2",
        "8"
      ]
    },
    "298": {
      "op": "*",
      "defined_out": [
        "arr_3#0",
        "encoded_value%2#0",
        "write_offset%2#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%2#0",
        "write_offset%2#0"
      ]
    },
    "299": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%2#0",
        "write_offset%2#0",
        "arr_3#0"
      ]
    },
    "301": {
      "op": "swap",
      "stack_out": [
        "encoded_value%2#0",
        "arr_3#0",
        "write_offset%2#0"
      ]
    },
    "302": {
      "op": "uncover 2",
      "stack_out": [
        "arr_3#0",
        "write_offset%2#0",
        "encoded_value%2#0"
      ]
    },
    "304": {
      "op": "replace3",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "305": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_3#0",
        "0"
      ]
    },
    "306": {
      "op": "itob",
      "defined_out": [
        "arr_3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "val_as_bytes%0#0"
      ]
    },
    "307": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "arr_3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "308": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "309": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "encoded%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded%0#0"
      ]
    },
    "310": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "encoded%0#0",
        "1"
      ]
    },
    "311": {
      "op": "itob",
      "defined_out": [
        "arr_3#0",
        "encoded%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "312": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "encoded%1#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded%1#0"
      ]
    },
    "313": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "arr_3#0",
        "encoded%1#0",
        "2"
      ]
    },
    "315": {
      "op": "itob",
      "defined_out": [
        "arr_3#0",
        "encoded%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "316": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "encoded%2#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded%2#0"
      ]
    },
    "317": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr_3#0",
        "encoded%2#0",
        "0x"
      ]
    },
    "318": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_tuple#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_tuple#0"
      ]
    },
    "319": {
      "op": "dig 1",
      "defined_out": [
        "arr_3#0",
        "arr_3#0 (copy)",
        "arr_3_from_tuple#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_tuple#0",
        "arr_3#0 (copy)"
      ]
    },
    "321": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "tmp%0#0"
      ]
    },
    "322": {
      "error": "should be the same",
      "op": "assert // should be the same",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "323": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "1"
      ]
    },
    "324": {
      "op": "itob",
      "defined_out": [
        "arr_3#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "val_as_bytes%3#0"
      ]
    },
    "325": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "val_as_bytes%3#0",
        "1"
      ]
    },
    "326": {
      "op": "itob",
      "defined_out": [
        "arr_3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "arr_3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "327": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "328": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0",
        "1"
      ]
    },
    "329": {
      "op": "itob",
      "defined_out": [
        "arr_3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "arr_3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%5#0"
      ]
    },
    "330": {
      "op": "cover 2",
      "stack_out": [
        "arr_3#0",
        "val_as_bytes%5#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "332": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr_3#0",
        "val_as_bytes%5#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0",
        "0x"
      ]
    },
    "333": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "val_as_bytes%5#0",
        "val_as_bytes%4#0",
        "0x",
        "val_as_bytes%3#0"
      ]
    },
    "334": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "result%0#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "arr_3#0",
        "val_as_bytes%5#0",
        "val_as_bytes%4#0",
        "result%0#0"
      ]
    },
    "335": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "val_as_bytes%5#0",
        "result%0#0",
        "val_as_bytes%4#0"
      ]
    },
    "336": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "result%1#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "arr_3#0",
        "val_as_bytes%5#0",
        "result%1#0"
      ]
    },
    "337": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "result%1#0",
        "val_as_bytes%5#0"
      ]
    },
    "338": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "result%2#0"
      ],
      "stack_out": [
        "arr_3#0",
        "result%2#0"
      ]
    },
    "339": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr_3#0",
        "result%2#0",
        "0x"
      ]
    },
    "340": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "0x",
        "result%2#0"
      ]
    },
    "341": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0"
      ]
    },
    "342": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "0"
      ]
    },
    "343": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "0",
        "8"
      ]
    },
    "344": {
      "op": "*",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "bytes_offset%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "bytes_offset%0#0"
      ]
    },
    "345": {
      "op": "dig 1",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "arr_3_from_full#0 (copy)",
        "bytes_offset%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "bytes_offset%0#0",
        "arr_3_from_full#0 (copy)"
      ]
    },
    "347": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "arr_3_from_full#0 (copy)",
        "bytes_offset%0#0"
      ]
    },
    "348": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "arr_3_from_full#0 (copy)",
        "bytes_offset%0#0",
        "8"
      ]
    },
    "349": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "encoded_element%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "encoded_element%0#0"
      ]
    },
    "350": {
      "op": "btoi",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "tmp%1#0"
      ]
    },
    "351": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "tmp%1#0",
        "1"
      ]
    },
    "352": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "tmp%2#0"
      ]
    },
    "353": {
      "op": "assert",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0"
      ]
    },
    "354": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "1"
      ]
    },
    "355": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "1",
        "8"
      ]
    },
    "356": {
      "op": "*",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "bytes_offset%1#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "bytes_offset%1#0"
      ]
    },
    "357": {
      "op": "dig 1",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "bytes_offset%1#0",
        "arr_3_from_full#0 (copy)"
      ]
    },
    "359": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "arr_3_from_full#0 (copy)",
        "bytes_offset%1#0"
      ]
    },
    "360": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "arr_3_from_full#0 (copy)",
        "bytes_offset%1#0",
        "8"
      ]
    },
    "361": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "encoded_element%1#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "encoded_element%1#0"
      ]
    },
    "362": {
      "op": "btoi",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "tmp%3#0"
      ]
    },
    "363": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "tmp%3#0",
        "1"
      ]
    },
    "364": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "tmp%4#0"
      ]
    },
    "365": {
      "op": "assert",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0"
      ]
    },
    "366": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "2"
      ]
    },
    "368": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "2",
        "8"
      ]
    },
    "369": {
      "op": "*",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "bytes_offset%2#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "bytes_offset%2#0"
      ]
    },
    "370": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "bytes_offset%2#0",
        "8"
      ]
    },
    "371": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "arr_3#0",
        "encoded_element%2#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_element%2#0"
      ]
    },
    "372": {
      "op": "btoi",
      "defined_out": [
        "arr_3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "arr_3#0",
        "tmp%5#0"
      ]
    },
    "373": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "tmp%5#0",
        "1"
      ]
    },
    "374": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "arr_3#0",
        "tmp%6#0"
      ]
    },
    "375": {
      "op": "assert",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "376": {
      "op": "dup",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_fixed#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_fixed#0"
      ]
    },
    "377": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "378": {
      "error": "should be the same",
      "op": "assert // should be the same",
      "stack_out": []
    },
    "379": {
      "retsub": true,
      "op": "retsub"
    },
    "380": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.add_payment",
      "params": {
        "pay#0": "bytes"
      },
      "block": "add_payment",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "383": {
      "block": "add_payment_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "384": {
      "op": "bytec_2 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"num_payments\""
      ]
    },
    "385": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "386": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "387": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "8"
      ]
    },
    "388": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "389": {
      "error": "too many payments",
      "op": "assert // too many payments",
      "stack_out": []
    },
    "390": {
      "op": "frame_dig -1",
      "defined_out": [
        "copy%0#0"
      ],
      "stack_out": [
        "copy%0#0"
      ]
    },
    "392": {
      "op": "intc_0 // 0",
      "stack_out": [
        "copy%0#0",
        "0"
      ]
    },
    "393": {
      "op": "bytec_3 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "0",
        "copy%0#0"
      ],
      "stack_out": [
        "copy%0#0",
        "0",
        "\"payments\""
      ]
    },
    "394": {
      "op": "app_global_get_ex",
      "defined_out": [
        "copy%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "copy%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "395": {
      "error": "check self.payments exists",
      "op": "assert // check self.payments exists",
      "stack_out": [
        "copy%0#0",
        "maybe_value%1#0"
      ]
    },
    "396": {
      "op": "intc_0 // 0",
      "stack_out": [
        "copy%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "397": {
      "op": "bytec_2 // \"num_payments\"",
      "stack_out": [
        "copy%0#0",
        "maybe_value%1#0",
        "0",
        "\"num_payments\""
      ]
    },
    "398": {
      "op": "app_global_get_ex",
      "defined_out": [
        "copy%0#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "copy%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "399": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "copy%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "400": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "copy%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "copy%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "48"
      ]
    },
    "402": {
      "op": "*",
      "defined_out": [
        "copy%0#0",
        "maybe_value%1#0",
        "write_offset%0#0"
      ],
      "stack_out": [
        "copy%0#0",
        "maybe_value%1#0",
        "write_offset%0#0"
      ]
    },
    "403": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%1#0",
        "write_offset%0#0",
        "copy%0#0"
      ]
    },
    "405": {
      "op": "replace3",
      "defined_out": [
        "updated_array%0#0"
      ],
      "stack_out": [
        "updated_array%0#0"
      ]
    },
    "406": {
      "op": "bytec_3 // \"payments\"",
      "stack_out": [
        "updated_array%0#0",
        "\"payments\""
      ]
    },
    "407": {
      "op": "swap",
      "stack_out": [
        "\"payments\"",
        "updated_array%0#0"
      ]
    },
    "408": {
      "op": "app_global_put",
      "stack_out": []
    },
    "409": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "410": {
      "op": "bytec_2 // \"num_payments\"",
      "stack_out": [
        "0",
        "\"num_payments\""
      ]
    },
    "411": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "412": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "413": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "414": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "415": {
      "op": "bytec_2 // \"num_payments\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"num_payments\""
      ]
    },
    "416": {
      "op": "swap",
      "stack_out": [
        "\"num_payments\"",
        "materialized_values%0#0"
      ]
    },
    "417": {
      "op": "app_global_put",
      "stack_out": []
    },
    "418": {
      "retsub": true,
      "op": "retsub"
    },
    "419": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.increment_payment",
      "params": {
        "index#0": "uint64",
        "amt#0": "uint64"
      },
      "block": "increment_payment",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "422": {
      "block": "increment_payment_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "423": {
      "op": "bytec_2 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"num_payments\""
      ]
    },
    "424": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "425": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "426": {
      "op": "frame_dig -2",
      "defined_out": [
        "index#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "index#0 (copy)"
      ]
    },
    "428": {
      "op": ">",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "429": {
      "error": "invalid payment index",
      "op": "assert // invalid payment index",
      "stack_out": []
    },
    "430": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "431": {
      "op": "bytec_3 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"payments\""
      ]
    },
    "432": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "433": {
      "error": "check self.payments exists",
      "op": "assert // check self.payments exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "434": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%1#0",
        "index#0 (copy)"
      ]
    },
    "436": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "index#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "index#0 (copy)",
        "48"
      ]
    },
    "438": {
      "op": "*",
      "defined_out": [
        "bytes_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "bytes_offset%0#0"
      ]
    },
    "439": {
      "op": "dig 1",
      "defined_out": [
        "bytes_offset%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "bytes_offset%0#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "441": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "bytes_offset%0#0"
      ]
    },
    "442": {
      "op": "pushint 48 // 48",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "bytes_offset%0#0",
        "48"
      ]
    },
    "444": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "encoded_element%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "encoded_element%0#0"
      ]
    },
    "445": {
      "op": "dup",
      "defined_out": [
        "encoded_element%0#0",
        "encoded_element%0#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "encoded_element%0#0",
        "encoded_element%0#0 (copy)"
      ]
    },
    "446": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "encoded_element%0#0",
        "encoded_element%0#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "encoded_element%0#0",
        "encoded_element%0#0 (copy)",
        "40"
      ]
    },
    "448": {
      "op": "intc_2 // 8",
      "defined_out": [
        "40",
        "8",
        "encoded_element%0#0",
        "encoded_element%0#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "encoded_element%0#0",
        "encoded_element%0#0 (copy)",
        "40",
        "8"
      ]
    },
    "449": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0",
        "encoded_element%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "encoded_element%0#0",
        "encoded%0#0"
      ]
    },
    "450": {
      "op": "btoi",
      "defined_out": [
        "encoded_element%0#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "encoded_element%0#0",
        "tmp%1#0"
      ]
    },
    "451": {
      "op": "frame_dig -1",
      "defined_out": [
        "amt#0 (copy)",
        "encoded_element%0#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "encoded_element%0#0",
        "tmp%1#0",
        "amt#0 (copy)"
      ]
    },
    "453": {
      "op": "+",
      "defined_out": [
        "encoded_element%0#0",
        "materialized_values%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "encoded_element%0#0",
        "materialized_values%0#0"
      ]
    },
    "454": {
      "op": "itob",
      "defined_out": [
        "encoded_element%0#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "encoded_element%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "455": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "encoded_element%0#0"
      ]
    },
    "456": {
      "op": "pushint 40 // 40",
      "stack_out": [
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "encoded_element%0#0",
        "40"
      ]
    },
    "458": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%1#0",
        "encoded_element%0#0",
        "40",
        "val_as_bytes%0#0"
      ]
    },
    "460": {
      "op": "replace3",
      "defined_out": [
        "maybe_value%1#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "updated_data%0#0"
      ]
    },
    "461": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%1#0",
        "updated_data%0#0",
        "index#0 (copy)"
      ]
    },
    "463": {
      "op": "pushint 48 // 48",
      "stack_out": [
        "maybe_value%1#0",
        "updated_data%0#0",
        "index#0 (copy)",
        "48"
      ]
    },
    "465": {
      "op": "*",
      "defined_out": [
        "maybe_value%1#0",
        "updated_data%0#0",
        "write_offset%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "updated_data%0#0",
        "write_offset%0#0"
      ]
    },
    "466": {
      "op": "uncover 2",
      "stack_out": [
        "updated_data%0#0",
        "write_offset%0#0",
        "maybe_value%1#0"
      ]
    },
    "468": {
      "op": "swap",
      "stack_out": [
        "updated_data%0#0",
        "maybe_value%1#0",
        "write_offset%0#0"
      ]
    },
    "469": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%1#0",
        "write_offset%0#0",
        "updated_data%0#0"
      ]
    },
    "471": {
      "op": "replace3",
      "defined_out": [
        "updated_array%0#0"
      ],
      "stack_out": [
        "updated_array%0#0"
      ]
    },
    "472": {
      "op": "bytec_3 // \"payments\"",
      "stack_out": [
        "updated_array%0#0",
        "\"payments\""
      ]
    },
    "473": {
      "op": "swap",
      "stack_out": [
        "\"payments\"",
        "updated_array%0#0"
      ]
    },
    "474": {
      "op": "app_global_put",
      "stack_out": []
    },
    "475": {
      "retsub": true,
      "op": "retsub"
    },
    "476": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.create_storage",
      "params": {
        "box_key#0": "uint64"
      },
      "block": "create_storage",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "479": {
      "block": "create_storage_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "480": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "481": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "482": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "defined_out": [
        "copy%0#0"
      ],
      "stack_out": [
        "copy%0#0"
      ]
    },
    "483": {
      "op": "bytec 4 // 0x70",
      "defined_out": [
        "0x70",
        "copy%0#0"
      ],
      "stack_out": [
        "copy%0#0",
        "0x70"
      ]
    },
    "485": {
      "op": "swap",
      "stack_out": [
        "0x70",
        "copy%0#0"
      ]
    },
    "486": {
      "op": "app_global_put",
      "stack_out": []
    },
    "487": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "488": {
      "op": "bytec_1 // \"nested\"",
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "489": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "490": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "defined_out": [
        "copy%1#0"
      ],
      "stack_out": [
        "copy%1#0"
      ]
    },
    "491": {
      "op": "txn Sender",
      "defined_out": [
        "copy%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "copy%1#0",
        "tmp%0#0"
      ]
    },
    "493": {
      "op": "bytec 5 // 0x6c",
      "defined_out": [
        "0x6c",
        "copy%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "copy%1#0",
        "tmp%0#0",
        "0x6c"
      ]
    },
    "495": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "0x6c",
        "copy%1#0"
      ]
    },
    "497": {
      "op": "app_local_put",
      "stack_out": []
    },
    "498": {
      "op": "bytec 6 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "500": {
      "op": "pushint 2064 // 2064",
      "defined_out": [
        "\"box\"",
        "2064"
      ],
      "stack_out": [
        "\"box\"",
        "2064"
      ]
    },
    "503": {
      "op": "box_create",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "504": {
      "error": "expected box to not exist",
      "op": "assert // expected box to not exist",
      "stack_out": []
    },
    "505": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "506": {
      "op": "bytec_1 // \"nested\"",
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "507": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "508": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "509": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "510": {
      "op": "intc_3 // 16",
      "defined_out": [
        "0",
        "16",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "0",
        "16"
      ]
    },
    "511": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "copy%2#0"
      ],
      "stack_out": [
        "copy%2#0"
      ]
    },
    "512": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_key#0 (copy)",
        "copy%2#0"
      ],
      "stack_out": [
        "copy%2#0",
        "box_key#0 (copy)"
      ]
    },
    "514": {
      "op": "itob",
      "defined_out": [
        "copy%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "copy%2#0",
        "encoded_value%0#0"
      ]
    },
    "515": {
      "op": "bytec 8 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "copy%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "copy%2#0",
        "encoded_value%0#0",
        "\"box_map\""
      ]
    },
    "517": {
      "op": "swap",
      "stack_out": [
        "copy%2#0",
        "\"box_map\"",
        "encoded_value%0#0"
      ]
    },
    "518": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "copy%2#0"
      ],
      "stack_out": [
        "copy%2#0",
        "box_prefixed_key%0#0"
      ]
    },
    "519": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "copy%2#0"
      ],
      "stack_out": [
        "copy%2#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "520": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "copy%2#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "copy%2#0",
        "box_prefixed_key%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "521": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "copy%2#0",
        "box_prefixed_key%0#0",
        "maybe_value%3#0"
      ]
    },
    "522": {
      "op": "intc_0 // 0",
      "stack_out": [
        "copy%2#0",
        "box_prefixed_key%0#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "523": {
      "op": "uncover 3",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_value%3#0",
        "0",
        "copy%2#0"
      ]
    },
    "525": {
      "op": "replace3",
      "defined_out": [
        "box_prefixed_key%0#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "updated_data%0#0"
      ]
    },
    "526": {
      "op": "box_put",
      "stack_out": []
    },
    "527": {
      "retsub": true,
      "op": "retsub"
    },
    "528": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.local_struct",
      "params": {},
      "block": "local_struct_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "530": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "531": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0"
      ]
    },
    "532": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0",
        "32"
      ]
    },
    "534": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "lengths_equal%0#0"
      ]
    },
    "535": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "536": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x"
      ]
    },
    "537": {
      "op": "swap",
      "stack_out": [
        "0x",
        "tmp%0#0"
      ]
    },
    "538": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "539": {
      "op": "pushint 1234 // 1234",
      "defined_out": [
        "1234",
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0",
        "1234"
      ]
    },
    "542": {
      "op": "itob",
      "defined_out": [
        "encoded%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "543": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0"
      ],
      "stack_out": [
        "encoded%1#0"
      ]
    },
    "544": {
      "op": "pushint 567 // 567",
      "defined_out": [
        "567",
        "encoded%1#0"
      ],
      "stack_out": [
        "encoded%1#0",
        "567"
      ]
    },
    "547": {
      "op": "itob",
      "defined_out": [
        "encoded%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "548": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0"
      ],
      "stack_out": [
        "encoded%2#0"
      ]
    },
    "549": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded%2#0",
        "0x"
      ]
    },
    "550": {
      "op": "concat",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "551": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "552": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)",
        "0"
      ]
    },
    "553": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "a#0",
        "a#0 (copy)",
        "0",
        "32"
      ]
    },
    "555": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "a#0",
        "encoded%4#0"
      ],
      "stack_out": [
        "a#0",
        "encoded%4#0"
      ]
    },
    "556": {
      "op": "swap",
      "stack_out": [
        "encoded%4#0",
        "a#0"
      ]
    },
    "557": {
      "op": "dup",
      "stack_out": [
        "encoded%4#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "558": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "encoded%4#0",
        "a#0",
        "a#0 (copy)",
        "32"
      ]
    },
    "560": {
      "op": "intc_2 // 8",
      "defined_out": [
        "32",
        "8",
        "a#0",
        "a#0 (copy)",
        "encoded%4#0"
      ],
      "stack_out": [
        "encoded%4#0",
        "a#0",
        "a#0 (copy)",
        "32",
        "8"
      ]
    },
    "561": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "a#0",
        "encoded%4#0",
        "encoded%5#0"
      ],
      "stack_out": [
        "encoded%4#0",
        "a#0",
        "encoded%5#0"
      ]
    },
    "562": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "encoded%4#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded%4#0",
        "a#0",
        "tmp%1#0"
      ]
    },
    "563": {
      "op": "swap",
      "stack_out": [
        "encoded%4#0",
        "tmp%1#0",
        "a#0"
      ]
    },
    "564": {
      "op": "dup",
      "stack_out": [
        "encoded%4#0",
        "tmp%1#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "565": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "a#0",
        "a#0 (copy)",
        "encoded%4#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded%4#0",
        "tmp%1#0",
        "a#0",
        "a#0 (copy)",
        "40"
      ]
    },
    "567": {
      "op": "intc_2 // 8",
      "stack_out": [
        "encoded%4#0",
        "tmp%1#0",
        "a#0",
        "a#0 (copy)",
        "40",
        "8"
      ]
    },
    "568": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "a#0",
        "encoded%4#0",
        "encoded%6#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded%4#0",
        "tmp%1#0",
        "a#0",
        "encoded%6#0"
      ]
    },
    "569": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "encoded%4#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded%4#0",
        "tmp%1#0",
        "a#0",
        "tmp%2#0"
      ]
    },
    "570": {
      "op": "uncover 3",
      "defined_out": [
        "a#0",
        "foo#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "a#0",
        "tmp%2#0",
        "foo#0"
      ]
    },
    "572": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "a#0",
        "foo#0",
        "tmp%2#0"
      ]
    },
    "573": {
      "op": "uncover 3",
      "defined_out": [
        "a#0",
        "bar#0",
        "foo#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0",
        "tmp%2#0",
        "bar#0"
      ]
    },
    "575": {
      "op": "cover 2",
      "defined_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "foo#0"
      ],
      "stack_out": [
        "a#0",
        "bar#0",
        "foo#0",
        "baz#0"
      ]
    },
    "577": {
      "op": "cover 2",
      "stack_out": [
        "a#0",
        "baz#0",
        "bar#0",
        "foo#0"
      ]
    },
    "579": {
      "op": "global ZeroAddress",
      "defined_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "foo#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "baz#0",
        "bar#0",
        "foo#0",
        "tmp%3#0"
      ]
    },
    "581": {
      "op": "!=",
      "defined_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "baz#0",
        "bar#0",
        "tmp%4#0"
      ]
    },
    "582": {
      "error": "use foo",
      "op": "assert // use foo",
      "defined_out": [
        "a#0",
        "baz#0",
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "a#0",
        "baz#0",
        "reinterpret_bool%0#0"
      ]
    },
    "583": {
      "error": "use bar",
      "op": "assert // use bar",
      "stack_out": [
        "a#0",
        "baz#0"
      ]
    },
    "584": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "baz#0",
        "0"
      ]
    },
    "585": {
      "op": "!=",
      "defined_out": [
        "a#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%5#0"
      ]
    },
    "586": {
      "error": "use baz",
      "op": "assert // use baz",
      "stack_out": [
        "a#0"
      ]
    },
    "587": {
      "callsub": "test_cases.mutable_native_types.contract.do_something",
      "op": "callsub do_something"
    },
    "590": {
      "retsub": true,
      "op": "retsub"
    },
    "591": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.delete_storage",
      "params": {
        "box_key#0": "uint64"
      },
      "block": "delete_storage",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "594": {
      "block": "delete_storage_block@0",
      "stack_in": [],
      "op": "bytec 4 // 0x70",
      "defined_out": [
        "0x70"
      ],
      "stack_out": [
        "0x70"
      ]
    },
    "596": {
      "op": "app_global_del",
      "stack_out": []
    },
    "597": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "599": {
      "op": "bytec 5 // 0x6c",
      "defined_out": [
        "0x6c",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x6c"
      ]
    },
    "601": {
      "op": "app_local_del",
      "stack_out": []
    },
    "602": {
      "op": "bytec 6 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "604": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "605": {
      "op": "pop",
      "stack_out": []
    },
    "606": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_key#0 (copy)"
      ],
      "stack_out": [
        "box_key#0 (copy)"
      ]
    },
    "608": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "609": {
      "op": "bytec 8 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"box_map\""
      ]
    },
    "611": {
      "op": "swap",
      "stack_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ]
    },
    "612": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "613": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "614": {
      "op": "pop",
      "stack_out": []
    },
    "615": {
      "retsub": true,
      "op": "retsub"
    },
    "616": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.struct_arg",
      "params": {
        "box_key#0": "uint64",
        "a#0": "bytes"
      },
      "block": "struct_arg",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "619": {
      "block": "struct_arg_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "620": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "621": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "622": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "623": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "624": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "a#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "a#0 (copy)"
      ]
    },
    "626": {
      "op": "replace3",
      "defined_out": [
        "updated_data%0#0"
      ],
      "stack_out": [
        "updated_data%0#0"
      ]
    },
    "627": {
      "op": "bytec_1 // \"nested\"",
      "stack_out": [
        "updated_data%0#0",
        "\"nested\""
      ]
    },
    "628": {
      "op": "swap",
      "stack_out": [
        "\"nested\"",
        "updated_data%0#0"
      ]
    },
    "629": {
      "op": "app_global_put",
      "stack_out": []
    },
    "630": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "631": {
      "op": "bytec 4 // 0x70",
      "defined_out": [
        "0",
        "0x70"
      ],
      "stack_out": [
        "0",
        "0x70"
      ]
    },
    "633": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "634": {
      "error": "check self.nested_proxy exists",
      "op": "assert // check self.nested_proxy exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "635": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "636": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "a#0 (copy)"
      ]
    },
    "638": {
      "op": "replace3",
      "defined_out": [
        "updated_data%1#0"
      ],
      "stack_out": [
        "updated_data%1#0"
      ]
    },
    "639": {
      "op": "bytec 4 // 0x70",
      "stack_out": [
        "updated_data%1#0",
        "0x70"
      ]
    },
    "641": {
      "op": "swap",
      "stack_out": [
        "0x70",
        "updated_data%1#0"
      ]
    },
    "642": {
      "op": "app_global_put",
      "stack_out": []
    },
    "643": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "645": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "646": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "647": {
      "op": "bytec 5 // 0x6c",
      "defined_out": [
        "0",
        "0x6c",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0",
        "0x6c"
      ]
    },
    "649": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "650": {
      "error": "check self.nested_local exists for account",
      "op": "assert // check self.nested_local exists for account",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "651": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "652": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "0",
        "a#0 (copy)"
      ]
    },
    "654": {
      "op": "replace3",
      "defined_out": [
        "tmp%0#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%2#0"
      ]
    },
    "655": {
      "op": "swap",
      "stack_out": [
        "updated_data%2#0",
        "tmp%0#0"
      ]
    },
    "656": {
      "op": "bytec 5 // 0x6c",
      "stack_out": [
        "updated_data%2#0",
        "tmp%0#0",
        "0x6c"
      ]
    },
    "658": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "0x6c",
        "updated_data%2#0"
      ]
    },
    "660": {
      "op": "app_local_put",
      "stack_out": []
    },
    "661": {
      "op": "bytec 6 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "663": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "664": {
      "error": "check self.box exists",
      "op": "assert // check self.box exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "665": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "0"
      ]
    },
    "666": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%3#0",
        "0",
        "a#0 (copy)"
      ]
    },
    "668": {
      "op": "replace3",
      "defined_out": [
        "updated_data%3#0"
      ],
      "stack_out": [
        "updated_data%3#0"
      ]
    },
    "669": {
      "op": "bytec 6 // \"box\"",
      "stack_out": [
        "updated_data%3#0",
        "\"box\""
      ]
    },
    "671": {
      "op": "swap",
      "stack_out": [
        "\"box\"",
        "updated_data%3#0"
      ]
    },
    "672": {
      "op": "box_put",
      "stack_out": []
    },
    "673": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_key#0 (copy)"
      ],
      "stack_out": [
        "box_key#0 (copy)"
      ]
    },
    "675": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "676": {
      "op": "bytec 8 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"box_map\""
      ]
    },
    "678": {
      "op": "swap",
      "stack_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ]
    },
    "679": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "680": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "681": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "682": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_value%4#0"
      ]
    },
    "683": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "684": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_value%4#0",
        "0",
        "a#0 (copy)"
      ]
    },
    "686": {
      "op": "replace3",
      "defined_out": [
        "box_prefixed_key%0#0",
        "updated_data%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "updated_data%4#0"
      ]
    },
    "687": {
      "op": "box_put",
      "stack_out": []
    },
    "688": {
      "retsub": true,
      "op": "retsub"
    },
    "689": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.struct_return",
      "params": {},
      "block": "struct_return_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "690": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "691": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "692": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "693": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "694": {
      "op": "intc_3 // 16",
      "defined_out": [
        "0",
        "16",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "16"
      ]
    },
    "695": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "696": {
      "retsub": true,
      "op": "retsub"
    },
    "697": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.tup_return",
      "params": {},
      "block": "tup_return_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "698": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "699": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "700": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "701": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "32"
      ]
    },
    "703": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "32",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "32",
        "16"
      ]
    },
    "704": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "705": {
      "op": "dup",
      "defined_out": [
        "encoded%0#0",
        "encoded%0#0 (copy)"
      ],
      "stack_out": [
        "encoded%0#0",
        "encoded%0#0 (copy)"
      ]
    },
    "706": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded%0#0",
        "encoded%0#0 (copy)",
        "0"
      ]
    },
    "707": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "encoded%0#0",
        "encoded%0#0 (copy)"
      ],
      "stack_out": [
        "encoded%0#0",
        "encoded%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "708": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0",
        "item0%0#0"
      ],
      "stack_out": [
        "encoded%0#0",
        "item0%0#0"
      ]
    },
    "709": {
      "op": "btoi",
      "defined_out": [
        "encoded%0#0",
        "item0%1#0"
      ],
      "stack_out": [
        "encoded%0#0",
        "item0%1#0"
      ]
    },
    "710": {
      "op": "swap",
      "stack_out": [
        "item0%1#0",
        "encoded%0#0"
      ]
    },
    "711": {
      "op": "intc_2 // 8",
      "stack_out": [
        "item0%1#0",
        "encoded%0#0",
        "8"
      ]
    },
    "712": {
      "op": "dup",
      "stack_out": [
        "item0%1#0",
        "encoded%0#0",
        "8",
        "8"
      ]
    },
    "713": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%1#0",
        "item1%0#0"
      ],
      "stack_out": [
        "item0%1#0",
        "item1%0#0"
      ]
    },
    "714": {
      "op": "btoi",
      "defined_out": [
        "item0%1#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%1#0",
        "item1%1#0"
      ]
    },
    "715": {
      "retsub": true,
      "op": "retsub"
    },
    "716": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.calculate_sum",
      "params": {},
      "block": "calculate_sum",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "719": {
      "block": "calculate_sum_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "720": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "721": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "722": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "723": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "724": {
      "op": "intc_3 // 16",
      "defined_out": [
        "0",
        "16",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "16"
      ]
    },
    "725": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "fixed_a#0"
      ],
      "stack_out": [
        "fixed_a#0"
      ]
    },
    "726": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fixed_a#0",
        "0"
      ]
    },
    "727": {
      "op": "bytec_1 // \"nested\"",
      "stack_out": [
        "fixed_a#0",
        "0",
        "\"nested\""
      ]
    },
    "728": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fixed_a#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "fixed_a#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "729": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "fixed_a#0",
        "maybe_value%1#0"
      ]
    },
    "730": {
      "op": "intc_3 // 16",
      "stack_out": [
        "fixed_a#0",
        "maybe_value%1#0",
        "16"
      ]
    },
    "731": {
      "op": "dup",
      "stack_out": [
        "fixed_a#0",
        "maybe_value%1#0",
        "16",
        "16"
      ]
    },
    "732": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "fixed_a#0",
        "fixed_b#0"
      ],
      "stack_out": [
        "fixed_a#0",
        "fixed_b#0"
      ]
    },
    "733": {
      "op": "swap",
      "stack_out": [
        "fixed_b#0",
        "fixed_a#0"
      ]
    },
    "734": {
      "callsub": "test_cases.mutable_native_types.contract.add",
      "op": "callsub add",
      "defined_out": [
        "fixed_b#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "fixed_b#0",
        "tmp%0#0"
      ]
    },
    "737": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "fixed_b#0"
      ]
    },
    "738": {
      "callsub": "test_cases.mutable_native_types.contract.add",
      "op": "callsub add",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "741": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "742": {
      "op": "dupn 2",
      "defined_out": [
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "744": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#0",
        "result#0 (copy)",
        "100"
      ]
    },
    "746": {
      "op": "<",
      "defined_out": [
        "result#0",
        "result#6",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%2#0"
      ]
    },
    "747": {
      "op": "bz calculate_sum_after_if_else@2",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "750": {
      "block": "calculate_sum_if_body@1",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "0"
      ]
    },
    "751": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "0",
        "\"nested\""
      ]
    },
    "752": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "753": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0"
      ]
    },
    "754": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0",
        "32"
      ]
    },
    "756": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "32",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0",
        "32",
        "16"
      ]
    },
    "757": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded%0#0"
      ]
    },
    "758": {
      "op": "dup",
      "defined_out": [
        "encoded%0#0",
        "encoded%0#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded%0#0",
        "encoded%0#0 (copy)"
      ]
    },
    "759": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "encoded%0#0",
        "encoded%0#0 (copy)",
        "0"
      ]
    },
    "760": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "encoded%0#0",
        "encoded%0#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded%0#0",
        "encoded%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "761": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0",
        "item0%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded%0#0",
        "item0%0#0"
      ]
    },
    "762": {
      "op": "btoi",
      "defined_out": [
        "encoded%0#0",
        "item0%1#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "encoded%0#0",
        "item0%1#0"
      ]
    },
    "763": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "item0%1#0",
        "encoded%0#0"
      ]
    },
    "764": {
      "op": "intc_2 // 8",
      "stack_out": [
        "result#0",
        "result#6",
        "item0%1#0",
        "encoded%0#0",
        "8"
      ]
    },
    "765": {
      "op": "dup",
      "stack_out": [
        "result#0",
        "result#6",
        "item0%1#0",
        "encoded%0#0",
        "8",
        "8"
      ]
    },
    "766": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%1#0",
        "item1%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "item0%1#0",
        "item1%0#0"
      ]
    },
    "767": {
      "op": "btoi",
      "defined_out": [
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "c#0",
        "d#0"
      ]
    },
    "768": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "d#0",
        "c#0"
      ]
    },
    "769": {
      "op": "frame_dig 0",
      "defined_out": [
        "c#0",
        "d#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "d#0",
        "c#0",
        "result#0"
      ]
    },
    "771": {
      "op": "+",
      "stack_out": [
        "result#0",
        "result#6",
        "d#0",
        "result#0"
      ]
    },
    "772": {
      "op": "+",
      "defined_out": [
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "result#6"
      ]
    },
    "773": {
      "op": "frame_bury 1",
      "defined_out": [
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "775": {
      "block": "calculate_sum_after_if_else@2",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "result#0"
      ]
    },
    "777": {
      "op": "frame_bury 0"
    },
    "779": {
      "retsub": true,
      "op": "retsub"
    },
    "780": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "782": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "783": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "784": {
      "op": "bz approval_program_bare_routing@15",
      "stack_out": []
    },
    "787": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "790": {
      "op": "pushbytes 0xd1276f81 // method \"fixed_initialize()void\"",
      "defined_out": [
        "Method(fixed_initialize()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)"
      ]
    },
    "796": {
      "op": "pushbytes 0x0d2ab4c0 // method \"add_payment((address,uint64,uint64))void\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(fixed_initialize()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)"
      ]
    },
    "802": {
      "op": "pushbytes 0xe8b5d56c // method \"increment_payment(uint64,uint64)void\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)"
      ]
    },
    "808": {
      "op": "pushbytes 0x875901e5 // method \"create_storage(uint64)void\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(create_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)"
      ]
    },
    "814": {
      "op": "pushbytes 0x4abb70f1 // method \"local_struct()(address,uint64,uint64)\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(create_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))"
      ]
    },
    "820": {
      "op": "pushbytes 0xaf05f48f // method \"delete_storage(uint64)void\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)"
      ]
    },
    "826": {
      "op": "pushbytes 0xe8d71c8c // method \"struct_arg(uint64,(uint64,uint64))void\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)"
      ]
    },
    "832": {
      "op": "pushbytes 0x01aaa39c // method \"struct_return()(uint64,uint64)\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))"
      ]
    },
    "838": {
      "op": "pushbytes 0x8313dee7 // method \"tup_return()(uint64,uint64)\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))"
      ]
    },
    "844": {
      "op": "pushbytes 0x2ca849c1 // method \"calculate_sum()uint64\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(calculate_sum()uint64)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "Method(calculate_sum()uint64)"
      ]
    },
    "850": {
      "op": "uncover 10",
      "stack_out": [
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "Method(calculate_sum()uint64)",
        "tmp%2#0"
      ]
    },
    "852": {
      "op": "match approval_program_fixed_initialize_route@3 approval_program_add_payment_route@4 approval_program_increment_payment_route@5 approval_program_create_storage_route@6 approval_program_local_struct_route@7 approval_program_delete_storage_route@8 approval_program_struct_arg_route@9 approval_program_struct_return_route@10 approval_program_tup_return_route@11 approval_program_calculate_sum_route@12",
      "stack_out": []
    },
    "874": {
      "block": "approval_program_after_if_else@21",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "875": {
      "block": "approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22",
      "stack_in": [
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "876": {
      "block": "approval_program_calculate_sum_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "878": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "NoOp"
      ]
    },
    "879": {
      "op": "==",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "880": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "881": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "883": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "0"
      ]
    },
    "884": {
      "op": "!=",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "885": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "886": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.calculate_sum",
      "op": "callsub calculate_sum",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "889": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "890": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "892": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "893": {
      "op": "concat",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "894": {
      "op": "log",
      "stack_out": []
    },
    "895": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "896": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "899": {
      "block": "approval_program_tup_return_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "901": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "NoOp"
      ]
    },
    "902": {
      "op": "==",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "903": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "904": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "906": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "0"
      ]
    },
    "907": {
      "op": "!=",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "908": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "909": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.tup_return",
      "op": "callsub tup_return",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%1#0"
      ]
    },
    "912": {
      "op": "swap",
      "stack_out": [
        "to_encode%1#0",
        "to_encode%0#0"
      ]
    },
    "913": {
      "op": "itob",
      "defined_out": [
        "to_encode%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "914": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "to_encode%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "915": {
      "op": "swap",
      "stack_out": [
        "to_encode%1#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "916": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "encoded%0#0"
      ]
    },
    "917": {
      "op": "swap",
      "stack_out": [
        "encoded%0#0",
        "to_encode%1#0"
      ]
    },
    "918": {
      "op": "itob",
      "defined_out": [
        "encoded%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "919": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0"
      ],
      "stack_out": [
        "encoded%1#0"
      ]
    },
    "920": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded%1#0",
        "0x"
      ]
    },
    "921": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0"
      ],
      "stack_out": [
        "encoded%2#0"
      ]
    },
    "922": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded%2#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "0x151f7c75"
      ]
    },
    "924": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded%2#0"
      ]
    },
    "925": {
      "op": "concat",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "926": {
      "op": "log",
      "stack_out": []
    },
    "927": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "928": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "931": {
      "block": "approval_program_struct_return_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "933": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "NoOp"
      ]
    },
    "934": {
      "op": "==",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "935": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "936": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "938": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "0"
      ]
    },
    "939": {
      "op": "!=",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "940": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "941": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.struct_return",
      "op": "callsub struct_return",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "944": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "0x151f7c75"
      ]
    },
    "946": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%42#0"
      ]
    },
    "947": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "948": {
      "op": "log",
      "stack_out": []
    },
    "949": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "950": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "953": {
      "block": "approval_program_struct_arg_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "955": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "NoOp"
      ]
    },
    "956": {
      "op": "==",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "957": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "958": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "960": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "0"
      ]
    },
    "961": {
      "op": "!=",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "962": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "963": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "966": {
      "op": "btoi",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "967": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint64))%0#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "reinterpret_Encoded((uint64,uint64))%0#0"
      ]
    },
    "970": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.struct_arg",
      "op": "callsub struct_arg",
      "stack_out": []
    },
    "973": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "974": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "977": {
      "block": "approval_program_delete_storage_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "979": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "NoOp"
      ]
    },
    "980": {
      "op": "==",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "981": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "982": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "984": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "0"
      ]
    },
    "985": {
      "op": "!=",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "986": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "987": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "990": {
      "op": "btoi",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "991": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.delete_storage",
      "op": "callsub delete_storage",
      "stack_out": []
    },
    "994": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "995": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "998": {
      "block": "approval_program_local_struct_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1000": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "NoOp"
      ]
    },
    "1001": {
      "op": "==",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1002": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1003": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1005": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "0"
      ]
    },
    "1006": {
      "op": "!=",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1007": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1008": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.local_struct",
      "op": "callsub local_struct",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1011": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "0x151f7c75"
      ]
    },
    "1013": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%26#0"
      ]
    },
    "1014": {
      "op": "concat",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1015": {
      "op": "log",
      "stack_out": []
    },
    "1016": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1017": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "1020": {
      "block": "approval_program_create_storage_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1022": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "NoOp"
      ]
    },
    "1023": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1024": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1025": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1027": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0"
      ]
    },
    "1028": {
      "op": "!=",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1029": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1030": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "1033": {
      "op": "btoi",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1034": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.create_storage",
      "op": "callsub create_storage",
      "stack_out": []
    },
    "1037": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1038": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "1041": {
      "block": "approval_program_increment_payment_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1043": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "NoOp"
      ]
    },
    "1044": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1045": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1046": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1048": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0"
      ]
    },
    "1049": {
      "op": "!=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1050": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1051": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "1054": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1055": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "1058": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1059": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.increment_payment",
      "op": "callsub increment_payment",
      "stack_out": []
    },
    "1062": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1063": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "1066": {
      "block": "approval_program_add_payment_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1068": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "1069": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1070": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1071": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1073": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "1074": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1075": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1076": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((uint8[32],uint64,uint64))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint8[32],uint64,uint64))%0#0"
      ]
    },
    "1079": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.add_payment",
      "op": "callsub add_payment",
      "stack_out": []
    },
    "1082": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1083": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "1086": {
      "block": "approval_program_fixed_initialize_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1088": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "1089": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1090": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1091": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1093": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "1094": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1095": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1096": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.fixed_initialize",
      "op": "callsub fixed_initialize"
    },
    "1099": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1100": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    },
    "1103": {
      "block": "approval_program_bare_routing@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "1105": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "0"
      ]
    },
    "1106": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%54#0"
      ]
    },
    "1107": {
      "op": "match approval_program___algopy_default_create@16",
      "stack_out": []
    },
    "1111": {
      "block": "approval_program_switch_case_next@20",
      "stack_in": [],
      "op": "b approval_program_after_if_else@21"
    },
    "1114": {
      "block": "approval_program___algopy_default_create@16",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "1116": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "0"
      ]
    },
    "1117": {
      "op": "==",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "1118": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1119": {
      "block": "approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__algopy_default_create@18",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1120": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@22"
    }
  }
}