{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqQA;;;AAEY;AACZ;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACiB;AAAA;AAAA;AAAA;AAAA;AAAT;;AAAA;AACS;AAAA;AAAA;AAAA;AAAA;AAAT;AAAA;;;;;;;;;;;AACJ;AAGJ;;;AAEW;;AAAA;AAAA;AAAA;AAAA;AAAQ;;AAAA;AAAA;AAAA;AAAA;AAAR;AAAP;AAGJ;;;;;;AAzM0B;;AAAoB;AAAA;AAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACc;;AAAmB;AAAnB;AAAwB;;AAAmB;AAAnB;AAAA;AAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACW;;AAAmB;AAAnB;AAAwB;;AAAmB;AAAnB;AAAA;;AAHzB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAd;AAAA;AAAA;AAWM;;AACA;AAAA;AAGA;AAAA;AAAA;;;AAAA;;AALK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGL;AAHK;AAAA;AAAA;;;AAGL;AAHK;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAIL;AAJK;AAAA;AAAA;;;AAIL;AAJK;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAX;;;;;AAAA;AAAA;AAQA;AAAoB;AAApB;AACgB;;AAAA;AAAhB;AAAA;AAAA;;AAIgD;AAA3C;AAAA;AAAA;AAAA;AAA2C;AAA3C;AAAA;AACL;AACO;AAAP;;AAIQ;;AAAA;AACG;AAAX;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACW;AAAX;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACW;;AAAX;AAAM;;AAAN;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAGK;AADc;AAAA;AAAA;AAAA;AACH;AADG;AAAA;AACQ;;AADR;AAAA;AAGZ;;AAAA;AAAP;AAEsC;AAApB;AAAA;AAAA;AAAA;AAAoB;AAApB;AAAA;AAAoB;AAApB;AAAA;AACK;AAAhB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAP;AACuB;AAAhB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAP;AACuB;;AAAhB;AAAA;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAP;AAEA;;AACO;;AAAA;AAAP;AAEc;;AAAA;AAAA;;;AAAO;AAAP;AAAA;AAAkB;AAAlB;AAAA;AAA6B;;AAA7B;AAAA;AACE;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAT;;AAAA;AAAP;AAE2C;AAAZ;AAAA;AAAA;AAAA;AAAuB;AAAvB;AAAA;AAAkC;;AAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAf;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAT;;AAAA;AAAP;AAEe;AACX;;;;;;;;;;AADW;AACK;;;;;;;;;;AADL;AACqB;;;;;;;;;;AADrB;AAGR;AAAP;;AAER;;;AAEe;AAAA;AAAA;AAAA;AAAoB;;AAApB;AAAP;AACA;AAAA;AAAA;AAAA;AAAc;AAAA;AAAA;AAAA;AAAd;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAA;AAAA;AAAA;;AAER;;;AAEuB;AAAA;AAAA;AAAA;AAAR;;AAAA;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAER;;;AAEkC;AAAA;AAAA;AAAA;AAA1B;;AAAA;AAAA;AACgC;AAAA;AAAA;AAAA;AAAd;;AAAlB;;AAAA;;AAAA;AACO;;AAAA;;;AAAA;AAAP;AACgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAnB;;AAAA;AAAb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIY;;AAAR;AAAA;AAAA;AAAoB;;;AAApB;AAAA;AAAiC;;;AAAjC;AAAA;AAGe;AAAA;AAAA;;AAAA;AAAA;AAAY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAS;AAAA;;AAAA;AAAA;AAAA;AAAxC;;AAAA;AAAA;;AAAA;;AAAA;;AACO;;AAAA;AAAP;AACA;AACO;AAAA;AAAP;AACA;;;AACA;AAER;;;AAEY;;AAAJ;AACsB;;AAAlB;;AAAJ;AACI;;AAAJ;;AACiB;;AAAA;AAAb;;AAAA;AAAA;AAAJ;;;AAER;;;AAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACkB;;AAAlB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACa;;AAAA;AAAb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAIO;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAER;;;AAEkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD;AAAA;;;AAAA;AAAe;;;AAAf;AAAT;;AACY;;AAAT;AAAX;;;AACmB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AACA;;AAAA;AACA;;;;;AACJ;;AAAA;AAER;;;;AAEe;;AAAA;AAAA;AAAc;AAAd;AAAP;AAEA;;AACO;AAAA;;AAAA;AAAP;AAEA;AACO;;AAAA;AAAP;AAEO;;;AAAA;AAAA;AAAA;AACP;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AACO;;AAAA;AAAA;AAAA;AAAc;AAAA;AAAA;AAAA;AAAA;AAAd;;AAAA;AAAP;AAEO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;;AAAA;AAAP;AAEA;;AAEO;AAAA;AAAP;AAE6B;;AAAmB;AAAnB;AAAwB;;AAAmB;;AAAnB;AAAA;AAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAf;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AACO;AAAA;AAAA;AAAe;AAAf;AAAP;AACO;AAAA;;;AAAiC;;AAAjC;AAAP;AACO;;AAAA;;AAAA;AAAP;AAE2B;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAK;AAAL;AAAA;AAAA;AAAA;AAApB;AAAA;AAAA;;;AAAA;AAAA;AACA;;AAAA;AAAP;AAEO;AAAA;AAAA;;;AACP;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACO;AAAP;AAEO;AAAA;AAAA;;;AAAP;AAEG;AAAA;AAAA;;;AAAA;AAAX;;;AACmB;;AAAA;AAAA;AAAe;;AAAA;AAAA;AAAf;AAAP;AAEM;AAAlB;AAAkB;AAAN;;AAAM;;AAAO;;AAAP;AAAlB;;;AACY;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AADM;;AAAA;AAAA;AAAA;;;;;AAGH;;AAAA;AAAA;AAAA;AAAe;;AAAf;AAAP;AAEA;;AACO;;;AAA2B;;AAA3B;AAAP;AAEA;AAAA;AAAA;;;AAAA;;AACA;AACO;;AAAA;;;AAA2B;;AAA3B;AAAP;AACO;AAAA;;;AAA2B;;AAA3B;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AACO;;;AAA2B;;AAA3B;AAAP;AAEA;;AAAA;;AAAA;AACO;AAAA;;AAAA;AAAA;AAAA;AAAP;AAEQ;;;AAAA;AAAA;AAAA;AACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAEO;AAAA;;AAAA;AAAA;AAAP;;AAAA;AA5LR;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA8HK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA9HL;;;AA8HK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAXA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAVA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAjGL;;;AAAA;AAAA;;;AAiGK;;;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA1FL;;;AAAA;AA0FK;;;AAAA;;;;AAZA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAvEL;;;AAAA;AAuEK;;;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlEL;;;AAAA;AAAA;;;AAAA;AAkEK;;;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA5DL;;;AA4DK;;;AAAA;;;;AA9BA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAxBL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 16"
    },
    "7": {
      "op": "bytecblock 0x \"nested\" \"num_payments\" \"payments\" 0x151f7c75 0x70 0x6c \"box\" \"box_map\" \"arr\""
    },
    "64": {
      "op": "pushbytes 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
    },
    "98": {
      "op": "store 0"
    },
    "100": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "102": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "105": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.contract.Contract.__init__",
      "op": "callsub __init__"
    },
    "108": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "111": {
      "op": "return",
      "stack_out": []
    },
    "112": {
      "subroutine": "_puya_lib.arc4.dynamic_array_pop_fixed_size",
      "params": {
        "array#0": "bytes",
        "fixed_byte_size#0": "uint64"
      },
      "block": "dynamic_array_pop_fixed_size",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "115": {
      "block": "dynamic_array_pop_fixed_size_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)"
      ]
    },
    "117": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)",
        "0"
      ]
    },
    "118": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0"
      ]
    },
    "119": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0",
        "1"
      ]
    },
    "120": {
      "op": "-",
      "defined_out": [
        "length_minus_1#0"
      ],
      "stack_out": [
        "length_minus_1#0"
      ]
    },
    "121": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "122": {
      "op": "extract 6 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "125": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%3#0",
        "array#0 (copy)"
      ]
    },
    "127": {
      "op": "swap",
      "stack_out": [
        "array#0 (copy)",
        "tmp%3#0"
      ]
    },
    "128": {
      "op": "replace2 0",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "130": {
      "op": "dup",
      "defined_out": [
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#0 (copy)"
      ]
    },
    "131": {
      "op": "len",
      "defined_out": [
        "result#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%5#0"
      ]
    },
    "132": {
      "op": "frame_dig -1",
      "defined_out": [
        "fixed_byte_size#0 (copy)",
        "result#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%5#0",
        "fixed_byte_size#0 (copy)"
      ]
    },
    "134": {
      "op": "-",
      "defined_out": [
        "item_location#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "item_location#0"
      ]
    },
    "135": {
      "op": "dup2",
      "defined_out": [
        "item_location#0",
        "item_location#0 (copy)",
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "item_location#0",
        "result#0 (copy)",
        "item_location#0 (copy)"
      ]
    },
    "136": {
      "op": "frame_dig -1",
      "stack_out": [
        "result#0",
        "item_location#0",
        "result#0 (copy)",
        "item_location#0 (copy)",
        "fixed_byte_size#0 (copy)"
      ]
    },
    "138": {
      "op": "extract3",
      "defined_out": [
        "item_location#0",
        "popped#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "item_location#0",
        "popped#0"
      ]
    },
    "139": {
      "op": "cover 2",
      "stack_out": [
        "popped#0",
        "result#0",
        "item_location#0"
      ]
    },
    "141": {
      "op": "swap",
      "stack_out": [
        "popped#0",
        "item_location#0",
        "result#0"
      ]
    },
    "142": {
      "op": "intc_0 // 0",
      "stack_out": [
        "popped#0",
        "item_location#0",
        "result#0",
        "0"
      ]
    },
    "143": {
      "op": "uncover 2",
      "stack_out": [
        "popped#0",
        "result#0",
        "0",
        "item_location#0"
      ]
    },
    "145": {
      "op": "substring3",
      "stack_out": [
        "popped#0",
        "result#0"
      ]
    },
    "146": {
      "retsub": true,
      "op": "retsub"
    },
    "147": {
      "subroutine": "test_cases.mutable_native_types.contract.sum_frozen_arr",
      "params": {
        "arr#0": "bytes"
      },
      "block": "sum_frozen_arr",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "150": {
      "block": "sum_frozen_arr_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0"
      ]
    },
    "151": {
      "op": "frame_dig -1",
      "defined_out": [
        "arr#0 (copy)",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "arr#0 (copy)"
      ]
    },
    "153": {
      "op": "intc_0 // 0",
      "stack_out": [
        "total#0",
        "arr#0 (copy)",
        "0"
      ]
    },
    "154": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0"
      ]
    },
    "155": {
      "op": "intc_0 // 0",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "156": {
      "block": "sum_frozen_arr_for_header@1",
      "stack_in": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "158": {
      "op": "frame_dig 1",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_length%0#0"
      ]
    },
    "160": {
      "op": "<",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "161": {
      "op": "bz sum_frozen_arr_after_for@4",
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "164": {
      "block": "sum_frozen_arr_for_body@2",
      "stack_in": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "arr#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "arr#0 (copy)"
      ]
    },
    "166": {
      "op": "len",
      "defined_out": [
        "aggregate%total_length%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%total_length%0#0"
      ]
    },
    "167": {
      "op": "frame_dig -1",
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%total_length%0#0",
        "arr#0 (copy)"
      ]
    },
    "169": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%total_length%0#0",
        "arr#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%total_length%0#0",
        "arr#0 (copy)",
        "2"
      ]
    },
    "171": {
      "op": "uncover 2",
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "arr#0 (copy)",
        "2",
        "aggregate%total_length%0#0"
      ]
    },
    "173": {
      "op": "substring3",
      "defined_out": [
        "aggregate%array_trimmed%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "174": {
      "op": "frame_dig 2",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0"
      ]
    },
    "176": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0",
        "16"
      ]
    },
    "177": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "178": {
      "op": "intc_3 // 16",
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "16"
      ]
    },
    "179": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "element#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "element#0"
      ]
    },
    "180": {
      "op": "dup",
      "defined_out": [
        "element#0",
        "element#0 (copy)",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "element#0",
        "element#0 (copy)"
      ]
    },
    "181": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "element#0",
        "element#0 (copy)",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "element#0",
        "element#0 (copy)",
        "0"
      ]
    },
    "182": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "element#0",
        "element#0 (copy)",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "element#0",
        "element#0 (copy)",
        "0",
        "8"
      ]
    },
    "183": {
      "op": "extract3",
      "defined_out": [
        "element#0",
        "item_index_internal%0#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "element#0",
        "tuple_item%0#0"
      ]
    },
    "184": {
      "op": "btoi",
      "defined_out": [
        "element#0",
        "item_index_internal%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "element#0",
        "values%0#0"
      ]
    },
    "185": {
      "op": "frame_dig 0",
      "defined_out": [
        "element#0",
        "item_index_internal%0#0",
        "total#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "element#0",
        "values%0#0",
        "total#0"
      ]
    },
    "187": {
      "op": "+",
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "element#0",
        "total#0"
      ]
    },
    "188": {
      "op": "swap",
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "total#0",
        "element#0"
      ]
    },
    "189": {
      "op": "intc_2 // 8",
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "total#0",
        "element#0",
        "8"
      ]
    },
    "190": {
      "op": "dup",
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "total#0",
        "element#0",
        "8",
        "8"
      ]
    },
    "191": {
      "op": "extract3",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "total#0",
        "tuple_item%1#0"
      ]
    },
    "192": {
      "op": "btoi",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0",
        "values%1#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "total#0",
        "values%1#0"
      ]
    },
    "193": {
      "op": "+",
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "194": {
      "op": "frame_bury 0",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "196": {
      "block": "sum_frozen_arr_for_footer@3",
      "stack_in": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "198": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "199": {
      "op": "+",
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "200": {
      "op": "frame_bury 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "202": {
      "op": "b sum_frozen_arr_for_header@1"
    },
    "205": {
      "block": "sum_frozen_arr_after_for@4",
      "stack_in": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "206": {
      "subroutine": "test_cases.mutable_native_types.contract.add",
      "params": {
        "val#0": "bytes"
      },
      "block": "add",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "209": {
      "block": "add_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "val#0 (copy)"
      ],
      "stack_out": [
        "val#0 (copy)"
      ]
    },
    "211": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "val#0 (copy)"
      ],
      "stack_out": [
        "val#0 (copy)",
        "0"
      ]
    },
    "212": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "val#0 (copy)"
      ],
      "stack_out": [
        "val#0 (copy)",
        "0",
        "8"
      ]
    },
    "213": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "214": {
      "op": "btoi",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "215": {
      "op": "frame_dig -1",
      "stack_out": [
        "values%0#0",
        "val#0 (copy)"
      ]
    },
    "217": {
      "op": "intc_2 // 8",
      "stack_out": [
        "values%0#0",
        "val#0 (copy)",
        "8"
      ]
    },
    "218": {
      "op": "dup",
      "stack_out": [
        "values%0#0",
        "val#0 (copy)",
        "8",
        "8"
      ]
    },
    "219": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "tuple_item%1#0"
      ]
    },
    "220": {
      "op": "btoi",
      "defined_out": [
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "values%0#0",
        "values%1#0"
      ]
    },
    "221": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "222": {
      "retsub": true,
      "op": "retsub"
    },
    "223": {
      "subroutine": "test_cases.mutable_native_types.contract.do_something",
      "params": {
        "pay#0": "bytes"
      },
      "block": "do_something",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "226": {
      "block": "do_something_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "pay%out#0"
      ],
      "stack_out": [
        "pay%out#0"
      ]
    },
    "228": {
      "retsub": true,
      "op": "retsub"
    },
    "229": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.__init__",
      "params": {},
      "block": "__init___block@0",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "231": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "232": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "233": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "234": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "235": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "236": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%head%0#0"
      ]
    },
    "237": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%1#0"
      ]
    },
    "238": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "239": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "240": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "242": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "1"
      ]
    },
    "243": {
      "op": "+",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "244": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "246": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "1"
      ]
    },
    "247": {
      "op": "+",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "248": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%6#0",
        "tmp%4#0"
      ]
    },
    "249": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%2#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%6#0",
        "aggregate%as_Encoded(uint64)%2#0"
      ]
    },
    "250": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%2#0",
        "tmp%6#0",
        "aggregate%as_Encoded(uint64)%2#0",
        "0x"
      ]
    },
    "251": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%6#0",
        "0x",
        "aggregate%as_Encoded(uint64)%2#0"
      ]
    },
    "252": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%6#0",
        "aggregate%head%2#0"
      ]
    },
    "253": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%2#0",
        "tmp%6#0"
      ]
    },
    "254": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%3#0",
        "aggregate%head%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(uint64)%3#0"
      ]
    },
    "255": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%7#0"
      ]
    },
    "256": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "258": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%8#0",
        "1"
      ]
    },
    "259": {
      "op": "+",
      "defined_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "260": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%10#0",
        "tmp%2#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "262": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "1"
      ]
    },
    "263": {
      "op": "+",
      "defined_out": [
        "tmp%11#0",
        "tmp%2#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "264": {
      "op": "cover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "266": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "tmp%7#0",
        "tmp%9#0",
        "0x"
      ]
    },
    "267": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%11#0",
        "tmp%7#0",
        "tmp%9#0",
        "0x",
        "tmp%2#0"
      ]
    },
    "269": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0",
        "tmp%11#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%head%4#0"
      ]
    },
    "270": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%11#0",
        "tmp%9#0",
        "aggregate%head%4#0",
        "tmp%7#0"
      ]
    },
    "272": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%9#0",
        "aggregate%head%5#0"
      ]
    },
    "273": {
      "op": "cover 2",
      "stack_out": [
        "aggregate%head%5#0",
        "tmp%11#0",
        "tmp%9#0"
      ]
    },
    "275": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%4#0",
        "aggregate%head%5#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "aggregate%head%5#0",
        "tmp%11#0",
        "aggregate%as_Encoded(uint64)%4#0"
      ]
    },
    "276": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%head%5#0",
        "tmp%11#0",
        "aggregate%as_Encoded(uint64)%4#0",
        "0x"
      ]
    },
    "277": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%5#0",
        "tmp%11#0",
        "0x",
        "aggregate%as_Encoded(uint64)%4#0"
      ]
    },
    "278": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "aggregate%head%6#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "aggregate%head%5#0",
        "tmp%11#0",
        "aggregate%head%6#0"
      ]
    },
    "279": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%5#0",
        "aggregate%head%6#0",
        "tmp%11#0"
      ]
    },
    "280": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%5#0",
        "aggregate%head%5#0",
        "aggregate%head%6#0"
      ],
      "stack_out": [
        "aggregate%head%5#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(uint64)%5#0"
      ]
    },
    "281": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64)%2#0",
        "aggregate%head%5#0"
      ],
      "stack_out": [
        "aggregate%head%5#0",
        "aggregate%as_Encoded(uint64,uint64)%2#0"
      ]
    },
    "282": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "283": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "\"nested\""
      ]
    },
    "284": {
      "op": "swap",
      "stack_out": [
        "\"nested\"",
        "tmp%12#0"
      ]
    },
    "285": {
      "op": "app_global_put",
      "stack_out": []
    },
    "286": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "288": {
      "op": "dup",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "289": {
      "op": "swap",
      "stack_out": [
        "tmp%14#0",
        "tmp%13#0"
      ]
    },
    "290": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%13#0",
        "0"
      ]
    },
    "291": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "292": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_array%0#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%13#0",
        "encoded_array%0#0"
      ]
    },
    "295": {
      "op": "cover 2",
      "stack_out": [
        "encoded_array%0#0",
        "tmp%14#0",
        "tmp%13#0"
      ]
    },
    "297": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%6#0",
        "encoded_array%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%14#0",
        "aggregate%as_Encoded(uint64)%6#0"
      ]
    },
    "298": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_array%0#0",
        "tmp%14#0",
        "aggregate%as_Encoded(uint64)%6#0",
        "0x"
      ]
    },
    "299": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "tmp%14#0",
        "0x",
        "aggregate%as_Encoded(uint64)%6#0"
      ]
    },
    "300": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%9#0",
        "encoded_array%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%14#0",
        "aggregate%head%9#0"
      ]
    },
    "301": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%9#0",
        "tmp%14#0"
      ]
    },
    "302": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%7#0",
        "aggregate%head%9#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%9#0",
        "aggregate%as_Encoded(uint64)%7#0"
      ]
    },
    "303": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%10#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%10#0"
      ]
    },
    "304": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%10#0",
        "0x"
      ]
    },
    "305": {
      "op": "len",
      "defined_out": [
        "aggregate%head%10#0",
        "aggregate%length%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%10#0",
        "aggregate%length%0#0"
      ]
    },
    "306": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%head%10#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%10#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "307": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%10#0",
        "aggregate%length_uint16%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%10#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "310": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%10#0",
        "aggregate%length_uint16%0#0",
        "0x"
      ]
    },
    "311": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%10#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%10#0",
        "aggregate%as_Encoded(len+uint8[])%1#0"
      ]
    },
    "312": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%10#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%10#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "22"
      ]
    },
    "314": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_bytes%2#0",
        "aggregate%head%10#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%10#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "315": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%10#0",
        "aggregate%offset_as_uint16%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%10#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "318": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%offset_as_uint16%0#0",
        "aggregate%head%10#0"
      ]
    },
    "320": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%10#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "321": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%11#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%11#0"
      ]
    },
    "322": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%11#0",
        "aggregate%as_Encoded(len+uint8[])%1#0"
      ]
    },
    "323": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%1#0 (copy)",
        "aggregate%head%11#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%11#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+uint8[])%1#0 (copy)"
      ]
    },
    "324": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%data_length%0#0",
        "aggregate%head%11#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%11#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%data_length%0#0"
      ]
    },
    "325": {
      "op": "pushint 22 // 22",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%11#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%data_length%0#0",
        "22"
      ]
    },
    "327": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%11#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%11#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "328": {
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "\"\"",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%11#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%11#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "\"\""
      ]
    },
    "329": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%11#0",
        "aggregate%length%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%11#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length%1#0"
      ]
    },
    "330": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_bytes%3#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%11#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%11#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "331": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%11#0",
        "aggregate%length_uint16%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%11#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "334": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%11#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0",
        "\"\""
      ]
    },
    "335": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%11#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%11#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "336": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%0#0 (copy)",
        "aggregate%head%11#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%11#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0 (copy)"
      ]
    },
    "338": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%11#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%11#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "339": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%11#0",
        "aggregate%offset_as_uint16%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%11#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "342": {
      "op": "uncover 4",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%11#0"
      ]
    },
    "344": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%11#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "345": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%12#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%12#0"
      ]
    },
    "346": {
      "op": "cover 2",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%12#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "348": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0 (copy)",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%12#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%12#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0 (copy)"
      ]
    },
    "349": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%data_length%1#0",
        "aggregate%head%12#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%12#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%data_length%1#0"
      ]
    },
    "350": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%data_length%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "352": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%12#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%1#0"
      ]
    },
    "353": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%5#0",
        "aggregate%head%12#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "354": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%12#0",
        "aggregate%offset_as_uint16%2#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "357": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%2#0",
        "aggregate%head%12#0"
      ]
    },
    "359": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%12#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "360": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%13#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%13#0"
      ]
    },
    "361": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%13#0",
        "aggregate%as_Encoded(len+uint8[])%1#0"
      ]
    },
    "363": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "364": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%concat%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "365": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%concat%1#0"
      ]
    },
    "366": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%1#0",
        "encoded_array%0#0"
      ]
    },
    "367": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "368": {
      "op": "pushbytes \"dyn\"",
      "defined_out": [
        "\"dyn\"",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "\"dyn\""
      ]
    },
    "373": {
      "op": "swap",
      "stack_out": [
        "\"dyn\"",
        "tmp%15#0"
      ]
    },
    "374": {
      "op": "app_global_put",
      "stack_out": []
    },
    "375": {
      "op": "bytec_2 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\""
      ],
      "stack_out": [
        "\"num_payments\""
      ]
    },
    "376": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"num_payments\"",
        "0"
      ]
    },
    "377": {
      "op": "app_global_put",
      "stack_out": []
    },
    "378": {
      "op": "pushint 96 // 96",
      "defined_out": [
        "96"
      ],
      "stack_out": [
        "96"
      ]
    },
    "380": {
      "op": "bzero",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "381": {
      "op": "bytec_3 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "\"payments\""
      ]
    },
    "382": {
      "op": "swap",
      "stack_out": [
        "\"payments\"",
        "tmp%16#0"
      ]
    },
    "383": {
      "op": "app_global_put",
      "stack_out": []
    },
    "384": {
      "retsub": true,
      "op": "retsub"
    },
    "385": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.test_imm_fixed_array",
      "params": {},
      "block": "test_imm_fixed_array_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "386": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "387": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "388": {
      "op": "swap",
      "stack_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "389": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0"
      ]
    },
    "390": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%head%0#0",
        "0"
      ]
    },
    "391": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "392": {
      "op": "concat",
      "defined_out": [
        "ok#0"
      ],
      "stack_out": [
        "ok#0"
      ]
    },
    "393": {
      "op": "dup",
      "defined_out": [
        "ok#0",
        "ok2#0"
      ],
      "stack_out": [
        "ok2#0",
        "ok#0"
      ]
    },
    "394": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "395": {
      "op": "assert",
      "stack_out": []
    },
    "396": {
      "retsub": true,
      "op": "retsub"
    },
    "397": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.fixed_initialize",
      "params": {},
      "block": "fixed_initialize_block@0",
      "stack_in": [],
      "op": "pushint 24 // 24",
      "defined_out": [
        "24"
      ],
      "stack_out": [
        "24"
      ]
    },
    "399": {
      "op": "bzero",
      "defined_out": [
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0"
      ]
    },
    "400": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "0"
      ]
    },
    "401": {
      "op": "itob",
      "defined_out": [
        "arr_3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%0#0"
      ]
    },
    "402": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_3#0",
        "encoded_value%0#0",
        "0"
      ]
    },
    "403": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "arr_3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%0#0",
        "0",
        "8"
      ]
    },
    "404": {
      "op": "*",
      "defined_out": [
        "aggregate%write_offset%0#0",
        "arr_3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%0#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "405": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "aggregate%write_offset%0#0",
        "arr_3#0"
      ]
    },
    "407": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "arr_3#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "408": {
      "op": "uncover 2",
      "stack_out": [
        "arr_3#0",
        "aggregate%write_offset%0#0",
        "encoded_value%0#0"
      ]
    },
    "410": {
      "op": "replace3",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "411": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "1"
      ]
    },
    "412": {
      "op": "itob",
      "defined_out": [
        "arr_3#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%1#0"
      ]
    },
    "413": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "encoded_value%1#0",
        "1"
      ]
    },
    "414": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "encoded_value%1#0",
        "1",
        "8"
      ]
    },
    "415": {
      "op": "*",
      "defined_out": [
        "aggregate%write_offset%1#0",
        "arr_3#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%1#0",
        "aggregate%write_offset%1#0"
      ]
    },
    "416": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%1#0",
        "aggregate%write_offset%1#0",
        "arr_3#0"
      ]
    },
    "418": {
      "op": "swap",
      "stack_out": [
        "encoded_value%1#0",
        "arr_3#0",
        "aggregate%write_offset%1#0"
      ]
    },
    "419": {
      "op": "uncover 2",
      "stack_out": [
        "arr_3#0",
        "aggregate%write_offset%1#0",
        "encoded_value%1#0"
      ]
    },
    "421": {
      "op": "replace3",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "422": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "2"
      ]
    },
    "424": {
      "op": "itob",
      "defined_out": [
        "arr_3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%2#0"
      ]
    },
    "425": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "arr_3#0",
        "encoded_value%2#0",
        "2"
      ]
    },
    "427": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "encoded_value%2#0",
        "2",
        "8"
      ]
    },
    "428": {
      "op": "*",
      "defined_out": [
        "aggregate%write_offset%2#0",
        "arr_3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_value%2#0",
        "aggregate%write_offset%2#0"
      ]
    },
    "429": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%2#0",
        "aggregate%write_offset%2#0",
        "arr_3#0"
      ]
    },
    "431": {
      "op": "swap",
      "stack_out": [
        "encoded_value%2#0",
        "arr_3#0",
        "aggregate%write_offset%2#0"
      ]
    },
    "432": {
      "op": "uncover 2",
      "stack_out": [
        "arr_3#0",
        "aggregate%write_offset%2#0",
        "encoded_value%2#0"
      ]
    },
    "434": {
      "op": "replace3",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "435": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_3#0",
        "0"
      ]
    },
    "436": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%3#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%as_Encoded(uint64)%3#0"
      ]
    },
    "437": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%3#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%as_Encoded(uint64)%3#0",
        "0x"
      ]
    },
    "438": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "0x",
        "aggregate%as_Encoded(uint64)%3#0"
      ]
    },
    "439": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%0#0"
      ]
    },
    "440": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "aggregate%head%0#0",
        "1"
      ]
    },
    "441": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%4#0",
        "aggregate%head%0#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%4#0"
      ]
    },
    "442": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%1#0"
      ]
    },
    "443": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "arr_3#0",
        "aggregate%head%1#0",
        "2"
      ]
    },
    "445": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%5#0",
        "aggregate%head%1#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%5#0"
      ]
    },
    "446": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_tuple#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_tuple#0"
      ]
    },
    "447": {
      "op": "dig 1",
      "defined_out": [
        "arr_3#0",
        "arr_3#0 (copy)",
        "arr_3_from_tuple#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_tuple#0",
        "arr_3#0 (copy)"
      ]
    },
    "449": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "arr_3#0",
        "tmp%1#0"
      ]
    },
    "450": {
      "error": "should be the same",
      "op": "assert // should be the same",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "451": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "1"
      ]
    },
    "452": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%6#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%as_Encoded(uint64)%6#0"
      ]
    },
    "453": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr_3#0",
        "aggregate%as_Encoded(uint64)%6#0",
        "0x"
      ]
    },
    "454": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "0x",
        "aggregate%as_Encoded(uint64)%6#0"
      ]
    },
    "455": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%3#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%3#0"
      ]
    },
    "456": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "aggregate%head%3#0",
        "1"
      ]
    },
    "457": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%7#0",
        "aggregate%head%3#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(uint64)%7#0"
      ]
    },
    "458": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%4#0"
      ]
    },
    "459": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "aggregate%head%4#0",
        "1"
      ]
    },
    "460": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%8#0",
        "aggregate%head%4#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%4#0",
        "aggregate%as_Encoded(uint64)%8#0"
      ]
    },
    "461": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0"
      ]
    },
    "462": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "0"
      ]
    },
    "463": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "0",
        "8"
      ]
    },
    "464": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%3#0",
        "arr_3#0",
        "arr_3_from_full#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "aggregate%bytes_offset%3#0"
      ]
    },
    "465": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%bytes_offset%3#0",
        "arr_3#0",
        "arr_3_from_full#0",
        "arr_3_from_full#0 (copy)"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "aggregate%bytes_offset%3#0",
        "arr_3_from_full#0 (copy)"
      ]
    },
    "467": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "arr_3_from_full#0 (copy)",
        "aggregate%bytes_offset%3#0"
      ]
    },
    "468": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "arr_3_from_full#0 (copy)",
        "aggregate%bytes_offset%3#0",
        "8"
      ]
    },
    "469": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "array_item%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "array_item%0#0"
      ]
    },
    "470": {
      "op": "btoi",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "values%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "values%0#0"
      ]
    },
    "471": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "values%0#0",
        "1"
      ]
    },
    "472": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "tmp%2#0"
      ]
    },
    "473": {
      "op": "assert",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0"
      ]
    },
    "474": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "1"
      ]
    },
    "475": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "1",
        "8"
      ]
    },
    "476": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%4#0",
        "arr_3#0",
        "arr_3_from_full#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "aggregate%bytes_offset%4#0"
      ]
    },
    "477": {
      "op": "dig 1",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "aggregate%bytes_offset%4#0",
        "arr_3_from_full#0 (copy)"
      ]
    },
    "479": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "arr_3_from_full#0 (copy)",
        "aggregate%bytes_offset%4#0"
      ]
    },
    "480": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "arr_3_from_full#0 (copy)",
        "aggregate%bytes_offset%4#0",
        "8"
      ]
    },
    "481": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "array_item%1#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "array_item%1#0"
      ]
    },
    "482": {
      "op": "btoi",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "values%1#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "values%1#0"
      ]
    },
    "483": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "values%1#0",
        "1"
      ]
    },
    "484": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "tmp%3#0"
      ]
    },
    "485": {
      "op": "assert",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0"
      ]
    },
    "486": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "2"
      ]
    },
    "488": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "2",
        "8"
      ]
    },
    "489": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%5#0",
        "arr_3#0",
        "arr_3_from_full#0"
      ],
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "aggregate%bytes_offset%5#0"
      ]
    },
    "490": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "arr_3_from_full#0",
        "aggregate%bytes_offset%5#0",
        "8"
      ]
    },
    "491": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "arr_3#0",
        "array_item%2#0"
      ],
      "stack_out": [
        "arr_3#0",
        "array_item%2#0"
      ]
    },
    "492": {
      "op": "btoi",
      "defined_out": [
        "arr_3#0",
        "values%2#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%2#0"
      ]
    },
    "493": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "values%2#0",
        "1"
      ]
    },
    "494": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "arr_3#0",
        "tmp%4#0"
      ]
    },
    "495": {
      "op": "assert",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "496": {
      "op": "dupn 2",
      "defined_out": [
        "arr_3#0",
        "arr_3#0 (copy)",
        "arr_3_from_fixed#0"
      ],
      "stack_out": [
        "arr_3_from_fixed#0",
        "arr_3#0",
        "arr_3#0 (copy)"
      ]
    },
    "498": {
      "op": "uncover 2",
      "stack_out": [
        "arr_3#0",
        "arr_3#0 (copy)",
        "arr_3_from_fixed#0"
      ]
    },
    "500": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "arr_3#0",
        "tmp%5#0"
      ]
    },
    "501": {
      "error": "should be the same",
      "op": "assert // should be the same",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "502": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "3"
      ]
    },
    "504": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "505": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%0#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%len_u16%0#0"
      ]
    },
    "508": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_3#0",
        "aggregate%len_u16%0#0",
        "0"
      ]
    },
    "509": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%9#0",
        "aggregate%len_u16%0#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%len_u16%0#0",
        "aggregate%as_Encoded(uint64)%9#0"
      ]
    },
    "510": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%6#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%6#0"
      ]
    },
    "511": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "aggregate%head%6#0",
        "1"
      ]
    },
    "512": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%10#0",
        "aggregate%head%6#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(uint64)%10#0"
      ]
    },
    "513": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%7#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%7#0"
      ]
    },
    "514": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "arr_3#0",
        "aggregate%head%7#0",
        "2"
      ]
    },
    "516": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%11#0",
        "aggregate%head%7#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%7#0",
        "aggregate%as_Encoded(uint64)%11#0"
      ]
    },
    "517": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "dynamic_arr#0"
      ],
      "stack_out": [
        "arr_3#0",
        "dynamic_arr#0"
      ]
    },
    "518": {
      "op": "dup",
      "defined_out": [
        "arr_3#0",
        "dynamic_arr#0",
        "dynamic_arr#0 (copy)"
      ],
      "stack_out": [
        "arr_3#0",
        "dynamic_arr#0",
        "dynamic_arr#0 (copy)"
      ]
    },
    "519": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_3#0",
        "dynamic_arr#0",
        "dynamic_arr#0 (copy)",
        "0"
      ]
    },
    "520": {
      "op": "extract_uint16",
      "defined_out": [
        "arr_3#0",
        "dynamic_arr#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "arr_3#0",
        "dynamic_arr#0",
        "tmp%6#0"
      ]
    },
    "521": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "arr_3#0",
        "dynamic_arr#0",
        "tmp%6#0",
        "3"
      ]
    },
    "523": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "dynamic_arr#0",
        "eq%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "dynamic_arr#0",
        "eq%0#0"
      ]
    },
    "524": {
      "error": "invalid input length",
      "op": "assert // invalid input length",
      "stack_out": [
        "arr_3#0",
        "dynamic_arr#0"
      ]
    },
    "525": {
      "op": "dup",
      "stack_out": [
        "arr_3#0",
        "dynamic_arr#0",
        "dynamic_arr#0 (copy)"
      ]
    },
    "526": {
      "op": "len",
      "defined_out": [
        "arr_3#0",
        "dynamic_arr#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "dynamic_arr#0",
        "total_length%0#0"
      ]
    },
    "527": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "total_length%0#0",
        "dynamic_arr#0"
      ]
    },
    "528": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "arr_3#0",
        "total_length%0#0",
        "dynamic_arr#0",
        "2"
      ]
    },
    "530": {
      "op": "uncover 2",
      "stack_out": [
        "arr_3#0",
        "dynamic_arr#0",
        "2",
        "total_length%0#0"
      ]
    },
    "532": {
      "op": "substring3",
      "defined_out": [
        "arr_3#0",
        "converted_array%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "converted_array%0#0"
      ]
    },
    "533": {
      "op": "dig 1",
      "stack_out": [
        "arr_3#0",
        "converted_array%0#0",
        "arr_3#0 (copy)"
      ]
    },
    "535": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "arr_3#0",
        "tmp%7#0"
      ]
    },
    "536": {
      "op": "assert",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "537": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_3#0",
        "0"
      ]
    },
    "538": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%12#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%as_Encoded(uint64)%12#0"
      ]
    },
    "539": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr_3#0",
        "aggregate%as_Encoded(uint64)%12#0",
        "0x"
      ]
    },
    "540": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "0x",
        "aggregate%as_Encoded(uint64)%12#0"
      ]
    },
    "541": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%9#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%9#0"
      ]
    },
    "542": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr_3#0",
        "aggregate%head%9#0",
        "1"
      ]
    },
    "543": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%13#0",
        "aggregate%head%9#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%9#0",
        "aggregate%as_Encoded(uint64)%13#0"
      ]
    },
    "544": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%10#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%10#0"
      ]
    },
    "545": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "arr_3#0",
        "aggregate%head%10#0",
        "2"
      ]
    },
    "547": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%14#0",
        "aggregate%head%10#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%10#0",
        "aggregate%as_Encoded(uint64)%14#0"
      ]
    },
    "548": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "awst_tmp%0#0"
      ]
    },
    "549": {
      "op": "dup",
      "defined_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "550": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "0"
      ]
    },
    "551": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "552": {
      "op": "extract3",
      "defined_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "tuple_item%0#0"
      ]
    },
    "553": {
      "op": "btoi",
      "defined_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "values%3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "values%3#0"
      ]
    },
    "554": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "awst_tmp%0#0"
      ]
    },
    "555": {
      "op": "dup",
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "556": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "8"
      ]
    },
    "557": {
      "op": "dup",
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "8",
        "8"
      ]
    },
    "558": {
      "op": "extract3",
      "defined_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "tuple_item%1#0",
        "values%3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "awst_tmp%0#0",
        "tuple_item%1#0"
      ]
    },
    "559": {
      "op": "btoi",
      "defined_out": [
        "arr_3#0",
        "awst_tmp%0#0",
        "values%3#0",
        "values%4#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "awst_tmp%0#0",
        "values%4#0"
      ]
    },
    "560": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "values%4#0",
        "awst_tmp%0#0"
      ]
    },
    "561": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "arr_3#0",
        "awst_tmp%0#0",
        "values%3#0",
        "values%4#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "values%4#0",
        "awst_tmp%0#0",
        "16"
      ]
    },
    "562": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "values%4#0",
        "awst_tmp%0#0",
        "16",
        "8"
      ]
    },
    "563": {
      "op": "extract3",
      "defined_out": [
        "arr_3#0",
        "tuple_item%2#0",
        "values%3#0",
        "values%4#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "values%4#0",
        "tuple_item%2#0"
      ]
    },
    "564": {
      "op": "btoi",
      "defined_out": [
        "arr_3#0",
        "values%3#0",
        "values%4#0",
        "values%5#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%3#0",
        "values%4#0",
        "values%5#0"
      ]
    },
    "565": {
      "op": "uncover 2",
      "stack_out": [
        "arr_3#0",
        "values%4#0",
        "values%5#0",
        "values%3#0"
      ]
    },
    "567": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%15#0",
        "arr_3#0",
        "values%4#0",
        "values%5#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%4#0",
        "values%5#0",
        "aggregate%as_Encoded(uint64)%15#0"
      ]
    },
    "568": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr_3#0",
        "values%4#0",
        "values%5#0",
        "aggregate%as_Encoded(uint64)%15#0",
        "0x"
      ]
    },
    "569": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "values%4#0",
        "values%5#0",
        "0x",
        "aggregate%as_Encoded(uint64)%15#0"
      ]
    },
    "570": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%12#0",
        "arr_3#0",
        "values%4#0",
        "values%5#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%4#0",
        "values%5#0",
        "aggregate%head%12#0"
      ]
    },
    "571": {
      "op": "uncover 2",
      "stack_out": [
        "arr_3#0",
        "values%5#0",
        "aggregate%head%12#0",
        "values%4#0"
      ]
    },
    "573": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%16#0",
        "aggregate%head%12#0",
        "arr_3#0",
        "values%5#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%5#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded(uint64)%16#0"
      ]
    },
    "574": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%13#0",
        "arr_3#0",
        "values%5#0"
      ],
      "stack_out": [
        "arr_3#0",
        "values%5#0",
        "aggregate%head%13#0"
      ]
    },
    "575": {
      "op": "swap",
      "stack_out": [
        "arr_3#0",
        "aggregate%head%13#0",
        "values%5#0"
      ]
    },
    "576": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%17#0",
        "aggregate%head%13#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%13#0",
        "aggregate%as_Encoded(uint64)%17#0"
      ]
    },
    "577": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "encoded_array%3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "encoded_array%3#0"
      ]
    },
    "578": {
      "op": "dig 1",
      "stack_out": [
        "arr_3#0",
        "encoded_array%3#0",
        "arr_3#0 (copy)"
      ]
    },
    "580": {
      "op": "==",
      "defined_out": [
        "arr_3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "arr_3#0",
        "tmp%8#0"
      ]
    },
    "581": {
      "op": "assert",
      "stack_out": [
        "arr_3#0"
      ]
    },
    "582": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr_3#0",
        "0x"
      ]
    },
    "583": {
      "op": "pushbytes 0x0000000000000000",
      "defined_out": [
        "0x",
        "0x0000000000000000",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "0x",
        "0x0000000000000000"
      ]
    },
    "593": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%15#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%15#0"
      ]
    },
    "594": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "aggregate%head%15#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%15#0",
        "0x0000000000000001"
      ]
    },
    "604": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%16#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%16#0"
      ]
    },
    "605": {
      "op": "pushbytes 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002",
        "aggregate%head%16#0",
        "arr_3#0"
      ],
      "stack_out": [
        "arr_3#0",
        "aggregate%head%16#0",
        "0x0000000000000002"
      ]
    },
    "615": {
      "op": "concat",
      "defined_out": [
        "arr_3#0",
        "static_array#0"
      ],
      "stack_out": [
        "arr_3#0",
        "static_array#0"
      ]
    },
    "616": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "617": {
      "op": "assert",
      "stack_out": []
    },
    "618": {
      "retsub": true,
      "op": "retsub"
    },
    "619": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.add_payment",
      "params": {
        "pay#0": "bytes"
      },
      "block": "add_payment",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "622": {
      "block": "add_payment_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "623": {
      "op": "bytec_2 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"num_payments\""
      ]
    },
    "624": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "625": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "626": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "2"
      ]
    },
    "628": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "629": {
      "error": "too many payments",
      "op": "assert // too many payments",
      "stack_out": []
    },
    "630": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "631": {
      "op": "bytec_3 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"payments\""
      ]
    },
    "632": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "633": {
      "error": "check self.payments exists",
      "op": "assert // check self.payments exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "634": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "635": {
      "op": "bytec_2 // \"num_payments\"",
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "\"num_payments\""
      ]
    },
    "636": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "637": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "638": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "48"
      ]
    },
    "640": {
      "op": "*",
      "defined_out": [
        "aggregate%write_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "641": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%write_offset%0#0",
        "maybe_value%1#0",
        "pay#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%write_offset%0#0",
        "pay#0 (copy)"
      ]
    },
    "643": {
      "op": "replace3",
      "defined_out": [
        "updated_array%0#0"
      ],
      "stack_out": [
        "updated_array%0#0"
      ]
    },
    "644": {
      "op": "bytec_3 // \"payments\"",
      "stack_out": [
        "updated_array%0#0",
        "\"payments\""
      ]
    },
    "645": {
      "op": "swap",
      "stack_out": [
        "\"payments\"",
        "updated_array%0#0"
      ]
    },
    "646": {
      "op": "app_global_put",
      "stack_out": []
    },
    "647": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "648": {
      "op": "bytec_2 // \"num_payments\"",
      "stack_out": [
        "0",
        "\"num_payments\""
      ]
    },
    "649": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "650": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "651": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "652": {
      "op": "+",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "653": {
      "op": "bytec_2 // \"num_payments\"",
      "stack_out": [
        "tmp%1#0",
        "\"num_payments\""
      ]
    },
    "654": {
      "op": "swap",
      "stack_out": [
        "\"num_payments\"",
        "tmp%1#0"
      ]
    },
    "655": {
      "op": "app_global_put",
      "stack_out": []
    },
    "656": {
      "retsub": true,
      "op": "retsub"
    },
    "657": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.increment_payment",
      "params": {
        "index#0": "uint64",
        "amt#0": "uint64"
      },
      "block": "increment_payment",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "660": {
      "block": "increment_payment_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "661": {
      "op": "bytec_2 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"num_payments\""
      ]
    },
    "662": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "663": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "664": {
      "op": "frame_dig -2",
      "defined_out": [
        "index#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "index#0 (copy)"
      ]
    },
    "666": {
      "op": ">",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "667": {
      "error": "invalid payment index",
      "op": "assert // invalid payment index",
      "stack_out": []
    },
    "668": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "669": {
      "op": "bytec_3 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"payments\""
      ]
    },
    "670": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "671": {
      "error": "check self.payments exists",
      "op": "assert // check self.payments exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "672": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%1#0",
        "index#0 (copy)"
      ]
    },
    "674": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "index#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "index#0 (copy)",
        "48"
      ]
    },
    "676": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "677": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "679": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "680": {
      "op": "pushint 48 // 48",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "aggregate%bytes_offset%0#0",
        "48"
      ]
    },
    "682": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "array_item%0#0"
      ]
    },
    "683": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "array_item%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "array_item%0#0",
        "40"
      ]
    },
    "685": {
      "op": "intc_2 // 8",
      "defined_out": [
        "40",
        "8",
        "array_item%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "array_item%0#0",
        "40",
        "8"
      ]
    },
    "686": {
      "op": "extract3",
      "defined_out": [
        "maybe_value%1#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tuple_item%0#0"
      ]
    },
    "687": {
      "op": "btoi",
      "defined_out": [
        "maybe_value%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "values%0#0"
      ]
    },
    "688": {
      "op": "frame_dig -1",
      "defined_out": [
        "amt#0 (copy)",
        "maybe_value%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "values%0#0",
        "amt#0 (copy)"
      ]
    },
    "690": {
      "op": "+",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "691": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "encoded_value%0#0"
      ]
    },
    "692": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%1#0",
        "encoded_value%0#0",
        "index#0 (copy)"
      ]
    },
    "694": {
      "op": "pushint 48 // 48",
      "stack_out": [
        "maybe_value%1#0",
        "encoded_value%0#0",
        "index#0 (copy)",
        "48"
      ]
    },
    "696": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%1#0",
        "encoded_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "encoded_value%0#0",
        "aggregate%bytes_offset%1#0"
      ]
    },
    "697": {
      "op": "dig 2",
      "stack_out": [
        "maybe_value%1#0",
        "encoded_value%0#0",
        "aggregate%bytes_offset%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "699": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "encoded_value%0#0",
        "maybe_value%1#0 (copy)",
        "aggregate%bytes_offset%1#0"
      ]
    },
    "700": {
      "op": "pushint 48 // 48",
      "stack_out": [
        "maybe_value%1#0",
        "encoded_value%0#0",
        "maybe_value%1#0 (copy)",
        "aggregate%bytes_offset%1#0",
        "48"
      ]
    },
    "702": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%1#0",
        "encoded_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "encoded_value%0#0",
        "aggregate%encoded_element%1#0"
      ]
    },
    "703": {
      "op": "pushint 40 // 40",
      "stack_out": [
        "maybe_value%1#0",
        "encoded_value%0#0",
        "aggregate%encoded_element%1#0",
        "40"
      ]
    },
    "705": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%encoded_element%1#0",
        "40",
        "encoded_value%0#0"
      ]
    },
    "707": {
      "op": "replace3",
      "defined_out": [
        "aggregate%updated_data%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%updated_data%0#0"
      ]
    },
    "708": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%updated_data%0#0",
        "index#0 (copy)"
      ]
    },
    "710": {
      "op": "pushint 48 // 48",
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%updated_data%0#0",
        "index#0 (copy)",
        "48"
      ]
    },
    "712": {
      "op": "*",
      "defined_out": [
        "aggregate%updated_data%0#0",
        "aggregate%write_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%updated_data%0#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "713": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%updated_data%0#0",
        "aggregate%write_offset%0#0",
        "maybe_value%1#0"
      ]
    },
    "715": {
      "op": "swap",
      "stack_out": [
        "aggregate%updated_data%0#0",
        "maybe_value%1#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "716": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%write_offset%0#0",
        "aggregate%updated_data%0#0"
      ]
    },
    "718": {
      "op": "replace3",
      "defined_out": [
        "updated_array%0#0"
      ],
      "stack_out": [
        "updated_array%0#0"
      ]
    },
    "719": {
      "op": "bytec_3 // \"payments\"",
      "stack_out": [
        "updated_array%0#0",
        "\"payments\""
      ]
    },
    "720": {
      "op": "swap",
      "stack_out": [
        "\"payments\"",
        "updated_array%0#0"
      ]
    },
    "721": {
      "op": "app_global_put",
      "stack_out": []
    },
    "722": {
      "retsub": true,
      "op": "retsub"
    },
    "723": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.create_storage",
      "params": {
        "box_key#0": "uint64"
      },
      "block": "create_storage",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "726": {
      "block": "create_storage_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "727": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "728": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "729": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "730": {
      "op": "bytec 5 // 0x70",
      "defined_out": [
        "0x70",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x70"
      ]
    },
    "732": {
      "op": "swap",
      "stack_out": [
        "0x70",
        "maybe_value%0#0"
      ]
    },
    "733": {
      "op": "app_global_put",
      "stack_out": []
    },
    "734": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "735": {
      "op": "bytec_1 // \"nested\"",
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "736": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "737": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "738": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%0#0"
      ]
    },
    "740": {
      "op": "bytec 6 // 0x6c",
      "defined_out": [
        "0x6c",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%0#0",
        "0x6c"
      ]
    },
    "742": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "0x6c",
        "maybe_value%1#0"
      ]
    },
    "744": {
      "op": "app_local_put",
      "stack_out": []
    },
    "745": {
      "op": "bytec 7 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "747": {
      "op": "pushint 2064 // 2064",
      "defined_out": [
        "\"box\"",
        "2064"
      ],
      "stack_out": [
        "\"box\"",
        "2064"
      ]
    },
    "750": {
      "op": "box_create",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "751": {
      "error": "expected box to not exist",
      "op": "assert // expected box to not exist",
      "stack_out": []
    },
    "752": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "753": {
      "op": "bytec_1 // \"nested\"",
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "754": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "755": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "756": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "757": {
      "op": "intc_3 // 16",
      "defined_out": [
        "0",
        "16",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "0",
        "16"
      ]
    },
    "758": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "759": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_key#0 (copy)",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "box_key#0 (copy)"
      ]
    },
    "761": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "encoded_value%0#0"
      ]
    },
    "762": {
      "op": "bytec 8 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "encoded_value%0#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "encoded_value%0#0",
        "\"box_map\""
      ]
    },
    "764": {
      "op": "swap",
      "stack_out": [
        "tuple_item%0#0",
        "\"box_map\"",
        "encoded_value%0#0"
      ]
    },
    "765": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "766": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "767": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "box_prefixed_key%0#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "768": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "defined_out": [
        "box_prefixed_key%0#0",
        "storage_value%0#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "box_prefixed_key%0#0",
        "storage_value%0#0"
      ]
    },
    "769": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tuple_item%0#0",
        "box_prefixed_key%0#0",
        "storage_value%0#0",
        "0"
      ]
    },
    "770": {
      "op": "uncover 3",
      "stack_out": [
        "box_prefixed_key%0#0",
        "storage_value%0#0",
        "0",
        "tuple_item%0#0"
      ]
    },
    "772": {
      "op": "replace3",
      "defined_out": [
        "box_prefixed_key%0#0",
        "updated_tuple%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "updated_tuple%0#0"
      ]
    },
    "773": {
      "op": "box_put",
      "stack_out": []
    },
    "774": {
      "retsub": true,
      "op": "retsub"
    },
    "775": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.local_struct",
      "params": {},
      "block": "local_struct_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "aggregate%as_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint8[32])%0#0"
      ]
    },
    "777": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint8[32])%0#0",
        "0x"
      ]
    },
    "778": {
      "op": "swap",
      "stack_out": [
        "0x",
        "aggregate%as_Encoded(uint8[32])%0#0"
      ]
    },
    "779": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0"
      ]
    },
    "780": {
      "op": "pushint 1234 // 1234",
      "defined_out": [
        "1234",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "1234"
      ]
    },
    "783": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "784": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "785": {
      "op": "pushint 567 // 567",
      "defined_out": [
        "567",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "567"
      ]
    },
    "788": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "789": {
      "op": "concat",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "790": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "791": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)",
        "0"
      ]
    },
    "792": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "0",
        "32",
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)",
        "0",
        "32"
      ]
    },
    "794": {
      "op": "extract3",
      "defined_out": [
        "a#0",
        "values%0#0"
      ],
      "stack_out": [
        "a#0",
        "values%0#0"
      ]
    },
    "795": {
      "op": "swap",
      "stack_out": [
        "values%0#0",
        "a#0"
      ]
    },
    "796": {
      "op": "dup",
      "stack_out": [
        "values%0#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "797": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "values%0#0",
        "a#0",
        "a#0 (copy)",
        "32"
      ]
    },
    "799": {
      "op": "intc_2 // 8",
      "defined_out": [
        "32",
        "8",
        "a#0",
        "a#0 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "a#0",
        "a#0 (copy)",
        "32",
        "8"
      ]
    },
    "800": {
      "op": "extract3",
      "defined_out": [
        "a#0",
        "tuple_item%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "a#0",
        "tuple_item%1#0"
      ]
    },
    "801": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "values%0#0",
        "a#0",
        "values%1#0"
      ]
    },
    "802": {
      "op": "swap",
      "stack_out": [
        "values%0#0",
        "values%1#0",
        "a#0"
      ]
    },
    "803": {
      "op": "dup",
      "stack_out": [
        "values%0#0",
        "values%1#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "804": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "a#0",
        "a#0 (copy)",
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "values%0#0",
        "values%1#0",
        "a#0",
        "a#0 (copy)",
        "40"
      ]
    },
    "806": {
      "op": "intc_2 // 8",
      "stack_out": [
        "values%0#0",
        "values%1#0",
        "a#0",
        "a#0 (copy)",
        "40",
        "8"
      ]
    },
    "807": {
      "op": "extract3",
      "defined_out": [
        "a#0",
        "tuple_item%2#0",
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "values%0#0",
        "values%1#0",
        "a#0",
        "tuple_item%2#0"
      ]
    },
    "808": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "values%0#0",
        "values%1#0",
        "values%2#0"
      ],
      "stack_out": [
        "values%0#0",
        "values%1#0",
        "a#0",
        "values%2#0"
      ]
    },
    "809": {
      "op": "uncover 3",
      "defined_out": [
        "a#0",
        "foo#0",
        "values%1#0",
        "values%2#0"
      ],
      "stack_out": [
        "values%1#0",
        "a#0",
        "values%2#0",
        "foo#0"
      ]
    },
    "811": {
      "op": "swap",
      "stack_out": [
        "values%1#0",
        "a#0",
        "foo#0",
        "values%2#0"
      ]
    },
    "812": {
      "op": "uncover 3",
      "defined_out": [
        "a#0",
        "bar#0",
        "foo#0",
        "values%2#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0",
        "values%2#0",
        "bar#0"
      ]
    },
    "814": {
      "op": "cover 2",
      "defined_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "foo#0"
      ],
      "stack_out": [
        "a#0",
        "bar#0",
        "foo#0",
        "baz#0"
      ]
    },
    "816": {
      "op": "cover 2",
      "stack_out": [
        "a#0",
        "baz#0",
        "bar#0",
        "foo#0"
      ]
    },
    "818": {
      "op": "global ZeroAddress",
      "defined_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "foo#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "baz#0",
        "bar#0",
        "foo#0",
        "tmp%2#0"
      ]
    },
    "820": {
      "op": "!=",
      "defined_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "baz#0",
        "bar#0",
        "tmp%3#0"
      ]
    },
    "821": {
      "error": "use foo",
      "op": "assert // use foo",
      "defined_out": [
        "a#0",
        "baz#0",
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "a#0",
        "baz#0",
        "reinterpret_bool%0#0"
      ]
    },
    "822": {
      "error": "use bar",
      "op": "assert // use bar",
      "stack_out": [
        "a#0",
        "baz#0"
      ]
    },
    "823": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "baz#0",
        "0"
      ]
    },
    "824": {
      "op": "!=",
      "defined_out": [
        "a#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%4#0"
      ]
    },
    "825": {
      "error": "use baz",
      "op": "assert // use baz",
      "stack_out": [
        "a#0"
      ]
    },
    "826": {
      "callsub": "test_cases.mutable_native_types.contract.do_something",
      "op": "callsub do_something"
    },
    "829": {
      "retsub": true,
      "op": "retsub"
    },
    "830": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.delete_storage",
      "params": {
        "box_key#0": "uint64"
      },
      "block": "delete_storage",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "833": {
      "block": "delete_storage_block@0",
      "stack_in": [],
      "op": "bytec 5 // 0x70",
      "defined_out": [
        "0x70"
      ],
      "stack_out": [
        "0x70"
      ]
    },
    "835": {
      "op": "app_global_del",
      "stack_out": []
    },
    "836": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "838": {
      "op": "bytec 6 // 0x6c",
      "defined_out": [
        "0x6c",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x6c"
      ]
    },
    "840": {
      "op": "app_local_del",
      "stack_out": []
    },
    "841": {
      "op": "bytec 7 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "843": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "844": {
      "op": "pop",
      "stack_out": []
    },
    "845": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_key#0 (copy)"
      ],
      "stack_out": [
        "box_key#0 (copy)"
      ]
    },
    "847": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "848": {
      "op": "bytec 8 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"box_map\""
      ]
    },
    "850": {
      "op": "swap",
      "stack_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ]
    },
    "851": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "852": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "853": {
      "op": "pop",
      "stack_out": []
    },
    "854": {
      "retsub": true,
      "op": "retsub"
    },
    "855": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.struct_arg",
      "params": {
        "box_key#0": "uint64",
        "a#0": "bytes"
      },
      "block": "struct_arg",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "858": {
      "block": "struct_arg_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "859": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "860": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "861": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "862": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "863": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "a#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "a#0 (copy)"
      ]
    },
    "865": {
      "op": "replace3",
      "defined_out": [
        "updated_tuple%0#0"
      ],
      "stack_out": [
        "updated_tuple%0#0"
      ]
    },
    "866": {
      "op": "bytec_1 // \"nested\"",
      "stack_out": [
        "updated_tuple%0#0",
        "\"nested\""
      ]
    },
    "867": {
      "op": "swap",
      "stack_out": [
        "\"nested\"",
        "updated_tuple%0#0"
      ]
    },
    "868": {
      "op": "app_global_put",
      "stack_out": []
    },
    "869": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "870": {
      "op": "bytec 5 // 0x70",
      "defined_out": [
        "0",
        "0x70"
      ],
      "stack_out": [
        "0",
        "0x70"
      ]
    },
    "872": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "873": {
      "error": "check self.nested_proxy exists",
      "op": "assert // check self.nested_proxy exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "874": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "875": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "a#0 (copy)"
      ]
    },
    "877": {
      "op": "replace3",
      "defined_out": [
        "updated_tuple%1#0"
      ],
      "stack_out": [
        "updated_tuple%1#0"
      ]
    },
    "878": {
      "op": "bytec 5 // 0x70",
      "stack_out": [
        "updated_tuple%1#0",
        "0x70"
      ]
    },
    "880": {
      "op": "swap",
      "stack_out": [
        "0x70",
        "updated_tuple%1#0"
      ]
    },
    "881": {
      "op": "app_global_put",
      "stack_out": []
    },
    "882": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "884": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "885": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "886": {
      "op": "bytec 6 // 0x6c",
      "defined_out": [
        "0",
        "0x6c",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0",
        "0x6c"
      ]
    },
    "888": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "889": {
      "error": "check self.nested_local exists for account",
      "op": "assert // check self.nested_local exists for account",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "890": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "891": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "0",
        "a#0 (copy)"
      ]
    },
    "893": {
      "op": "replace3",
      "defined_out": [
        "tmp%0#0",
        "updated_tuple%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_tuple%2#0"
      ]
    },
    "894": {
      "op": "swap",
      "stack_out": [
        "updated_tuple%2#0",
        "tmp%0#0"
      ]
    },
    "895": {
      "op": "bytec 6 // 0x6c",
      "stack_out": [
        "updated_tuple%2#0",
        "tmp%0#0",
        "0x6c"
      ]
    },
    "897": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "0x6c",
        "updated_tuple%2#0"
      ]
    },
    "899": {
      "op": "app_local_put",
      "stack_out": []
    },
    "900": {
      "op": "bytec 7 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "902": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "903": {
      "error": "check self.box exists",
      "op": "assert // check self.box exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "904": {
      "op": "intc_0 // 0",
      "stack_out": [
        "storage_value%0#0",
        "0"
      ]
    },
    "905": {
      "op": "frame_dig -1",
      "stack_out": [
        "storage_value%0#0",
        "0",
        "a#0 (copy)"
      ]
    },
    "907": {
      "op": "replace3",
      "defined_out": [
        "updated_tuple%3#0"
      ],
      "stack_out": [
        "updated_tuple%3#0"
      ]
    },
    "908": {
      "op": "bytec 7 // \"box\"",
      "stack_out": [
        "updated_tuple%3#0",
        "\"box\""
      ]
    },
    "910": {
      "op": "swap",
      "stack_out": [
        "\"box\"",
        "updated_tuple%3#0"
      ]
    },
    "911": {
      "op": "box_put",
      "stack_out": []
    },
    "912": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_key#0 (copy)"
      ],
      "stack_out": [
        "box_key#0 (copy)"
      ]
    },
    "914": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "915": {
      "op": "bytec 8 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"box_map\""
      ]
    },
    "917": {
      "op": "swap",
      "stack_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ]
    },
    "918": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "919": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "920": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "921": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "defined_out": [
        "box_prefixed_key%0#0",
        "storage_value%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "storage_value%1#0"
      ]
    },
    "922": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "storage_value%1#0",
        "0"
      ]
    },
    "923": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "storage_value%1#0",
        "0",
        "a#0 (copy)"
      ]
    },
    "925": {
      "op": "replace3",
      "defined_out": [
        "box_prefixed_key%0#0",
        "updated_tuple%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "updated_tuple%4#0"
      ]
    },
    "926": {
      "op": "box_put",
      "stack_out": []
    },
    "927": {
      "retsub": true,
      "op": "retsub"
    },
    "928": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.struct_return",
      "params": {},
      "block": "struct_return_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "929": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "930": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "931": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "932": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "933": {
      "op": "intc_3 // 16",
      "defined_out": [
        "0",
        "16",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "16"
      ]
    },
    "934": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "935": {
      "retsub": true,
      "op": "retsub"
    },
    "936": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.tup_return",
      "params": {},
      "block": "tup_return_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "937": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "938": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "939": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "940": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "32"
      ]
    },
    "942": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "32",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "32",
        "16"
      ]
    },
    "943": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "944": {
      "op": "dup",
      "defined_out": [
        "tuple_item%0#0",
        "tuple_item%0#0 (copy)"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "tuple_item%0#0 (copy)"
      ]
    },
    "945": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tuple_item%0#0",
        "tuple_item%0#0 (copy)",
        "0"
      ]
    },
    "946": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "tuple_item%0#0",
        "tuple_item%0#0 (copy)"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "tuple_item%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "947": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "948": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "949": {
      "op": "swap",
      "stack_out": [
        "aggregate%item0%0#0",
        "tuple_item%0#0"
      ]
    },
    "950": {
      "op": "intc_2 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "tuple_item%0#0",
        "8"
      ]
    },
    "951": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "tuple_item%0#0",
        "8",
        "8"
      ]
    },
    "952": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%2#0",
        "aggregate%item0%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%2#0"
      ]
    },
    "953": {
      "op": "btoi",
      "defined_out": [
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "values%0#0",
        "values%1#0"
      ]
    },
    "954": {
      "retsub": true,
      "op": "retsub"
    },
    "955": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.calculate_sum",
      "params": {},
      "block": "calculate_sum",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "958": {
      "block": "calculate_sum_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "959": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "960": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "961": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "962": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "963": {
      "op": "intc_3 // 16",
      "defined_out": [
        "0",
        "16",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "16"
      ]
    },
    "964": {
      "op": "extract3",
      "defined_out": [
        "fixed_a#0"
      ],
      "stack_out": [
        "fixed_a#0"
      ]
    },
    "965": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fixed_a#0",
        "0"
      ]
    },
    "966": {
      "op": "bytec_1 // \"nested\"",
      "stack_out": [
        "fixed_a#0",
        "0",
        "\"nested\""
      ]
    },
    "967": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fixed_a#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "fixed_a#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "968": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "fixed_a#0",
        "maybe_value%1#0"
      ]
    },
    "969": {
      "op": "intc_3 // 16",
      "stack_out": [
        "fixed_a#0",
        "maybe_value%1#0",
        "16"
      ]
    },
    "970": {
      "op": "dup",
      "stack_out": [
        "fixed_a#0",
        "maybe_value%1#0",
        "16",
        "16"
      ]
    },
    "971": {
      "op": "extract3",
      "defined_out": [
        "fixed_a#0",
        "fixed_b#0"
      ],
      "stack_out": [
        "fixed_a#0",
        "fixed_b#0"
      ]
    },
    "972": {
      "op": "swap",
      "stack_out": [
        "fixed_b#0",
        "fixed_a#0"
      ]
    },
    "973": {
      "callsub": "test_cases.mutable_native_types.contract.add",
      "op": "callsub add",
      "defined_out": [
        "fixed_b#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "fixed_b#0",
        "tmp%0#0"
      ]
    },
    "976": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "fixed_b#0"
      ]
    },
    "977": {
      "callsub": "test_cases.mutable_native_types.contract.add",
      "op": "callsub add",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "980": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "981": {
      "op": "dupn 2",
      "defined_out": [
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "983": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#0",
        "result#0 (copy)",
        "100"
      ]
    },
    "985": {
      "op": "<",
      "defined_out": [
        "result#0",
        "result#6",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%3#0"
      ]
    },
    "986": {
      "op": "bz calculate_sum_after_if_else@2",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "989": {
      "block": "calculate_sum_if_body@1",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "0"
      ]
    },
    "990": {
      "op": "bytec_1 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "0",
        "\"nested\""
      ]
    },
    "991": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "992": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0"
      ]
    },
    "993": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0",
        "32"
      ]
    },
    "995": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "32",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0",
        "32",
        "16"
      ]
    },
    "996": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tuple_item%2#0"
      ]
    },
    "997": {
      "op": "dup",
      "defined_out": [
        "tuple_item%2#0",
        "tuple_item%2#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tuple_item%2#0",
        "tuple_item%2#0 (copy)"
      ]
    },
    "998": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "tuple_item%2#0",
        "tuple_item%2#0 (copy)",
        "0"
      ]
    },
    "999": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "tuple_item%2#0",
        "tuple_item%2#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tuple_item%2#0",
        "tuple_item%2#0 (copy)",
        "0",
        "8"
      ]
    },
    "1000": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%3#0",
        "tuple_item%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tuple_item%2#0",
        "aggregate%extract%3#0"
      ]
    },
    "1001": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "tuple_item%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tuple_item%2#0",
        "aggregate%item0%0#0"
      ]
    },
    "1002": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%item0%0#0",
        "tuple_item%2#0"
      ]
    },
    "1003": {
      "op": "intc_2 // 8",
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%item0%0#0",
        "tuple_item%2#0",
        "8"
      ]
    },
    "1004": {
      "op": "dup",
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%item0%0#0",
        "tuple_item%2#0",
        "8",
        "8"
      ]
    },
    "1005": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%4#0",
        "aggregate%item0%0#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%item0%0#0",
        "aggregate%extract%4#0"
      ]
    },
    "1006": {
      "op": "btoi",
      "defined_out": [
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "c#0",
        "d#0"
      ]
    },
    "1007": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "d#0",
        "c#0"
      ]
    },
    "1008": {
      "op": "frame_dig 0",
      "defined_out": [
        "c#0",
        "d#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "d#0",
        "c#0",
        "result#0"
      ]
    },
    "1010": {
      "op": "+",
      "stack_out": [
        "result#0",
        "result#6",
        "d#0",
        "result#0"
      ]
    },
    "1011": {
      "op": "+",
      "defined_out": [
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "result#6"
      ]
    },
    "1012": {
      "op": "frame_bury 1",
      "defined_out": [
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "1014": {
      "block": "calculate_sum_after_if_else@2",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "result#0"
      ]
    },
    "1016": {
      "op": "frame_bury 0"
    },
    "1018": {
      "retsub": true,
      "op": "retsub"
    },
    "1019": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.test_arr",
      "params": {
        "arr#0": "bytes"
      },
      "block": "test_arr",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1022": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "_i#0"
      ]
    },
    "1023": {
      "block": "test_arr_block@0",
      "stack_in": [
        "_i#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "arr#0 (copy)"
      ],
      "stack_out": [
        "_i#0",
        "arr#0 (copy)"
      ]
    },
    "1025": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr#0 (copy)"
      ],
      "stack_out": [
        "_i#0",
        "arr#0 (copy)",
        "0"
      ]
    },
    "1026": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "_i#0",
        "tmp%0#0"
      ]
    },
    "1027": {
      "op": "intc_0 // 0",
      "stack_out": [
        "_i#0",
        "tmp%0#0",
        "0"
      ]
    },
    "1028": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "_i#0",
        "tmp%1#0"
      ]
    },
    "1029": {
      "error": "expected empty array",
      "op": "assert // expected empty array",
      "stack_out": [
        "_i#0"
      ]
    },
    "1030": {
      "op": "frame_dig -1",
      "defined_out": [
        "arr2#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0"
      ]
    },
    "1032": {
      "op": "dup",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr#0 (copy)"
      ]
    },
    "1033": {
      "op": "dig 1",
      "defined_out": [
        "arr#0 (copy)",
        "arr2#0",
        "arr2#0 (copy)"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr#0 (copy)",
        "arr2#0 (copy)"
      ]
    },
    "1035": {
      "op": "==",
      "defined_out": [
        "arr2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%2#0"
      ]
    },
    "1036": {
      "error": "expected arrays to be the same",
      "op": "assert // expected arrays to be the same",
      "stack_out": [
        "_i#0",
        "arr2#0"
      ]
    },
    "1037": {
      "op": "dup",
      "defined_out": [
        "arr2#0",
        "arr3#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr3#0"
      ]
    },
    "1038": {
      "op": "frame_dig -1",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr3#0",
        "arr#0 (copy)"
      ]
    },
    "1040": {
      "op": "==",
      "defined_out": [
        "arr2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%3#0"
      ]
    },
    "1041": {
      "error": "expected arrays to be the same",
      "op": "assert // expected arrays to be the same",
      "stack_out": [
        "_i#0",
        "arr2#0"
      ]
    },
    "1042": {
      "callsub": "_puya_lib.mem.new_slot",
      "op": "callsub _puya_lib.mem.new_slot",
      "defined_out": [
        "arr2#0",
        "slot%0#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "slot%0#0"
      ]
    },
    "1045": {
      "op": "dup",
      "defined_out": [
        "arr2#0",
        "slot%0#0",
        "slot%0#0 (copy)"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "slot%0#0",
        "slot%0#0 (copy)"
      ]
    },
    "1046": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "arr2#0",
        "slot%0#0",
        "slot%0#0 (copy)"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "slot%0#0",
        "slot%0#0 (copy)",
        "0x"
      ]
    },
    "1047": {
      "op": "stores",
      "defined_out": [
        "arr2#0",
        "arr4#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr4#0"
      ]
    },
    "1048": {
      "op": "dup",
      "defined_out": [
        "arr2#0",
        "arr4#0",
        "arr4#0 (copy)"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr4#0",
        "arr4#0 (copy)"
      ]
    },
    "1049": {
      "op": "loads",
      "defined_out": [
        "arr2#0",
        "arr4#0",
        "slot_contents%0#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr4#0",
        "slot_contents%0#0"
      ]
    },
    "1050": {
      "op": "frame_dig -1",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr4#0",
        "slot_contents%0#0",
        "arr#0 (copy)"
      ]
    },
    "1052": {
      "op": "len",
      "defined_out": [
        "arr2#0",
        "arr4#0",
        "slot_contents%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr4#0",
        "slot_contents%0#0",
        "total_length%0#0"
      ]
    },
    "1053": {
      "op": "frame_dig -1",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr4#0",
        "slot_contents%0#0",
        "total_length%0#0",
        "arr#0 (copy)"
      ]
    },
    "1055": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "arr#0 (copy)",
        "arr2#0",
        "arr4#0",
        "slot_contents%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr4#0",
        "slot_contents%0#0",
        "total_length%0#0",
        "arr#0 (copy)",
        "2"
      ]
    },
    "1057": {
      "op": "uncover 2",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr4#0",
        "slot_contents%0#0",
        "arr#0 (copy)",
        "2",
        "total_length%0#0"
      ]
    },
    "1059": {
      "op": "substring3",
      "defined_out": [
        "arr2#0",
        "arr4#0",
        "extract_to_end%0#0",
        "slot_contents%0#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr4#0",
        "slot_contents%0#0",
        "extract_to_end%0#0"
      ]
    },
    "1060": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "arr2#0",
        "arr4#0",
        "concat%0#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr4#0",
        "concat%0#0"
      ]
    },
    "1061": {
      "op": "dig 1",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr4#0",
        "concat%0#0",
        "arr4#0 (copy)"
      ]
    },
    "1063": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr4#0",
        "arr4#0 (copy)",
        "concat%0#0"
      ]
    },
    "1064": {
      "op": "stores",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr4#0"
      ]
    },
    "1065": {
      "op": "frame_dig -1",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr4#0",
        "arr#0 (copy)"
      ]
    },
    "1067": {
      "op": "intc_0 // 0",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr4#0",
        "arr#0 (copy)",
        "0"
      ]
    },
    "1068": {
      "op": "extract_uint16",
      "defined_out": [
        "arr2#0",
        "arr4#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr4#0",
        "tmp%4#0"
      ]
    },
    "1069": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%4#0",
        "arr4#0"
      ]
    },
    "1070": {
      "op": "dup",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%4#0",
        "arr4#0",
        "arr4#0 (copy)"
      ]
    },
    "1071": {
      "op": "loads",
      "defined_out": [
        "aggregate%slot_contents%0#0",
        "arr2#0",
        "arr4#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%4#0",
        "arr4#0",
        "aggregate%slot_contents%0#0"
      ]
    },
    "1072": {
      "op": "len",
      "defined_out": [
        "aggregate%bytes_len%0#0",
        "arr2#0",
        "arr4#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%4#0",
        "arr4#0",
        "aggregate%bytes_len%0#0"
      ]
    },
    "1073": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "aggregate%bytes_len%0#0",
        "arr2#0",
        "arr4#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%4#0",
        "arr4#0",
        "aggregate%bytes_len%0#0",
        "16"
      ]
    },
    "1074": {
      "op": "/",
      "defined_out": [
        "arr2#0",
        "arr4#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%4#0",
        "arr4#0",
        "tmp%5#0"
      ]
    },
    "1075": {
      "op": "uncover 2",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr4#0",
        "tmp%5#0",
        "tmp%4#0"
      ]
    },
    "1077": {
      "op": "==",
      "defined_out": [
        "arr2#0",
        "arr4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr4#0",
        "tmp%6#0"
      ]
    },
    "1078": {
      "error": "expected arrays to be the same length",
      "op": "assert // expected arrays to be the same length",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr4#0"
      ]
    },
    "1079": {
      "op": "loads",
      "defined_out": [
        "arr2#0",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "slot_contents%1#0"
      ]
    },
    "1080": {
      "op": "dup",
      "defined_out": [
        "arr2#0",
        "slot_contents%1#0",
        "slot_contents%1#0 (copy)"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "slot_contents%1#0",
        "slot_contents%1#0 (copy)"
      ]
    },
    "1081": {
      "op": "len",
      "defined_out": [
        "aggregate%bytes_len%1#0",
        "arr2#0",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "slot_contents%1#0",
        "aggregate%bytes_len%1#0"
      ]
    },
    "1082": {
      "op": "intc_3 // 16",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "slot_contents%1#0",
        "aggregate%bytes_len%1#0",
        "16"
      ]
    },
    "1083": {
      "op": "/",
      "defined_out": [
        "arr2#0",
        "slot_contents%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "slot_contents%1#0",
        "tmp%7#0"
      ]
    },
    "1084": {
      "op": "itob",
      "defined_out": [
        "arr2#0",
        "as_bytes%0#0",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "slot_contents%1#0",
        "as_bytes%0#0"
      ]
    },
    "1085": {
      "op": "extract 6 2",
      "defined_out": [
        "arr2#0",
        "as_u16_bytes%0#0",
        "slot_contents%1#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "slot_contents%1#0",
        "as_u16_bytes%0#0"
      ]
    },
    "1088": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "as_u16_bytes%0#0",
        "slot_contents%1#0"
      ]
    },
    "1089": {
      "op": "concat",
      "defined_out": [
        "arr2#0",
        "arr5#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr5#0"
      ]
    },
    "1090": {
      "op": "frame_dig -1",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr5#0",
        "arr#0 (copy)"
      ]
    },
    "1092": {
      "op": "==",
      "defined_out": [
        "arr2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%8#0"
      ]
    },
    "1093": {
      "error": "expected arrays to be the same",
      "op": "assert // expected arrays to be the same",
      "stack_out": [
        "_i#0",
        "arr2#0"
      ]
    },
    "1094": {
      "op": "frame_dig -1",
      "defined_out": [
        "arr2#0",
        "arr6#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr6#0"
      ]
    },
    "1096": {
      "op": "dup",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "arr6#0",
        "arr#0 (copy)"
      ]
    },
    "1097": {
      "op": "==",
      "defined_out": [
        "arr2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%11#0"
      ]
    },
    "1098": {
      "error": "expected arrays to be the same",
      "op": "assert // expected arrays to be the same",
      "stack_out": [
        "_i#0",
        "arr2#0"
      ]
    },
    "1099": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "arr2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%12#0"
      ]
    },
    "1101": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arr2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%12#0",
        "1"
      ]
    },
    "1102": {
      "op": "+",
      "defined_out": [
        "arr2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%13#0"
      ]
    },
    "1103": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "arr2#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "1105": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%13#0",
        "tmp%14#0",
        "2"
      ]
    },
    "1107": {
      "op": "+",
      "defined_out": [
        "arr2#0",
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "1108": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%15#0",
        "tmp%13#0"
      ]
    },
    "1109": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "arr2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%15#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1110": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%15#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "1111": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%15#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1112": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "arr2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "tmp%15#0",
        "aggregate%head%0#0"
      ]
    },
    "1113": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "aggregate%head%0#0",
        "tmp%15#0"
      ]
    },
    "1114": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%0#0",
        "arr2#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "1115": {
      "op": "concat",
      "defined_out": [
        "arr2#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "arr2#0",
        "fixed_struct#0"
      ]
    },
    "1116": {
      "op": "dup",
      "stack_out": [
        "_i#0",
        "arr2#0",
        "fixed_struct#0",
        "fixed_struct#0"
      ]
    },
    "1117": {
      "op": "cover 2",
      "defined_out": [
        "arr2#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "fixed_struct#0"
      ]
    },
    "1119": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "fixed_struct#0",
        "0x"
      ]
    },
    "1120": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "0x",
        "fixed_struct#0"
      ]
    },
    "1121": {
      "op": "concat",
      "defined_out": [
        "arr2#0",
        "fixed_struct#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "tmp%17#0"
      ]
    },
    "1122": {
      "op": "dig 1",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "tmp%17#0",
        "arr2#0 (copy)"
      ]
    },
    "1124": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "arr2#0 (copy)",
        "tmp%17#0"
      ]
    },
    "1125": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "arr2#0",
        "concat%1#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "concat%1#0"
      ]
    },
    "1126": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "concat%1#0",
        "arr2#0"
      ]
    },
    "1127": {
      "op": "intc_0 // 0",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "concat%1#0",
        "arr2#0",
        "0"
      ]
    },
    "1128": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%1#0",
        "extract_uint16%0#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "concat%1#0",
        "extract_uint16%0#0"
      ]
    },
    "1129": {
      "op": "intc_1 // 1",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "concat%1#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "1130": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%1#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "concat%1#0",
        "add%0#0"
      ]
    },
    "1131": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "concat%1#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "concat%1#0",
        "as_bytes%1#0"
      ]
    },
    "1132": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%1#0",
        "concat%1#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "concat%1#0",
        "as_u16_bytes%1#0"
      ]
    },
    "1135": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "as_u16_bytes%1#0",
        "concat%1#0"
      ]
    },
    "1136": {
      "op": "intc_0 // 0",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "as_u16_bytes%1#0",
        "concat%1#0",
        "0"
      ]
    },
    "1137": {
      "op": "uncover 2",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "concat%1#0",
        "0",
        "as_u16_bytes%1#0"
      ]
    },
    "1139": {
      "op": "replace3",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0"
      ]
    },
    "1140": {
      "op": "dup",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "arr2#0 (copy)"
      ]
    },
    "1141": {
      "op": "intc_0 // 0",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "arr2#0 (copy)",
        "0"
      ]
    },
    "1142": {
      "op": "extract_uint16",
      "defined_out": [
        "arr2#0",
        "fixed_struct#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "tmp%18#0"
      ]
    },
    "1143": {
      "op": "intc_1 // 1",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "tmp%18#0",
        "1"
      ]
    },
    "1144": {
      "op": "==",
      "defined_out": [
        "arr2#0",
        "fixed_struct#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "tmp%19#0"
      ]
    },
    "1145": {
      "error": "expected array to have 1 item",
      "op": "assert // expected array to have 1 item",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0"
      ]
    },
    "1146": {
      "op": "dup",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "arr2#0 (copy)"
      ]
    },
    "1147": {
      "callsub": "test_cases.mutable_native_types.contract.sum_frozen_arr",
      "op": "callsub sum_frozen_arr",
      "defined_out": [
        "arr2#0",
        "fixed_struct#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "tmp%21#0"
      ]
    },
    "1150": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "arr2#0",
        "fixed_struct#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "tmp%21#0",
        "7"
      ]
    },
    "1152": {
      "op": "==",
      "defined_out": [
        "arr2#0",
        "fixed_struct#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "tmp%22#0"
      ]
    },
    "1153": {
      "error": "expected sum to be 7",
      "op": "assert // expected sum to be 7",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0"
      ]
    },
    "1154": {
      "op": "frame_dig -1",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "arr#0 (copy)"
      ]
    },
    "1156": {
      "op": "dig 1",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "arr#0 (copy)",
        "arr2#0 (copy)"
      ]
    },
    "1158": {
      "op": "!=",
      "defined_out": [
        "arr2#0",
        "fixed_struct#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "tmp%23#0"
      ]
    },
    "1159": {
      "error": "expected arrays to be different",
      "op": "assert // expected arrays to be different",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0"
      ]
    },
    "1160": {
      "op": "dup",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "arr2#0 (copy)"
      ]
    },
    "1161": {
      "op": "len",
      "defined_out": [
        "aggregate%total_length%0#0",
        "arr2#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "aggregate%total_length%0#0"
      ]
    },
    "1162": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "aggregate%total_length%0#0",
        "arr2#0"
      ]
    },
    "1163": {
      "op": "dup",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "aggregate%total_length%0#0",
        "arr2#0",
        "arr2#0 (copy)"
      ]
    },
    "1164": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "aggregate%total_length%0#0",
        "arr2#0",
        "arr2#0 (copy)",
        "2"
      ]
    },
    "1166": {
      "op": "uncover 3",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "arr2#0 (copy)",
        "2",
        "aggregate%total_length%0#0"
      ]
    },
    "1168": {
      "op": "substring3",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "arr2#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "1169": {
      "op": "intc_0 // 0",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "aggregate%array_trimmed%0#0",
        "0"
      ]
    },
    "1170": {
      "op": "intc_3 // 16",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "aggregate%array_trimmed%0#0",
        "0",
        "16"
      ]
    },
    "1171": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "arr2#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "1172": {
      "op": "intc_3 // 16",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "16"
      ]
    },
    "1173": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "arr2#0",
        "array_item%0#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "array_item%0#0"
      ]
    },
    "1174": {
      "op": "intc_1 // 1",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "array_item%0#0",
        "1"
      ]
    },
    "1175": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "arr2#0",
        "array_item%0#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "array_item%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "1176": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%0#0",
        "arr2#0",
        "array_item%0#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "array_item%0#0",
        "aggregate%len_u16%0#0"
      ]
    },
    "1179": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "aggregate%len_u16%0#0",
        "array_item%0#0"
      ]
    },
    "1180": {
      "op": "concat",
      "defined_out": [
        "arr2#0",
        "arr7#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "arr7#0"
      ]
    },
    "1181": {
      "op": "dig 1",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "arr7#0",
        "arr2#0 (copy)"
      ]
    },
    "1183": {
      "op": "==",
      "defined_out": [
        "arr2#0",
        "fixed_struct#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "tmp%24#0"
      ]
    },
    "1184": {
      "error": "expected arrays to be the same",
      "op": "assert // expected arrays to be the same",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0"
      ]
    },
    "1185": {
      "op": "intc_0 // 0",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "0"
      ]
    },
    "1186": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "arr2#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "1187": {
      "op": "extract 6 2",
      "defined_out": [
        "arr2#0",
        "arr8#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "arr8#0"
      ]
    },
    "1190": {
      "op": "dig 1",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "arr8#0",
        "arr2#0 (copy)"
      ]
    },
    "1192": {
      "op": "len",
      "defined_out": [
        "arr2#0",
        "arr8#0",
        "fixed_struct#0",
        "total_length%1#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "arr8#0",
        "total_length%1#0"
      ]
    },
    "1193": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "total_length%1#0",
        "arr8#0"
      ]
    },
    "1194": {
      "op": "dig 2",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "total_length%1#0",
        "arr8#0",
        "arr2#0 (copy)"
      ]
    },
    "1196": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "total_length%1#0",
        "arr8#0",
        "arr2#0 (copy)",
        "2"
      ]
    },
    "1198": {
      "op": "uncover 3",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "arr8#0",
        "arr2#0 (copy)",
        "2",
        "total_length%1#0"
      ]
    },
    "1200": {
      "op": "substring3",
      "defined_out": [
        "arr2#0",
        "arr8#0",
        "extract_to_end%1#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "arr8#0",
        "extract_to_end%1#0"
      ]
    },
    "1201": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "arr2#0",
        "concat%2#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "concat%2#0"
      ]
    },
    "1202": {
      "op": "dup",
      "defined_out": [
        "arr2#0",
        "concat%2#0",
        "concat%2#0 (copy)",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "concat%2#0",
        "concat%2#0 (copy)"
      ]
    },
    "1203": {
      "op": "len",
      "defined_out": [
        "arr2#0",
        "concat%2#0",
        "fixed_struct#0",
        "total_length%2#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "concat%2#0",
        "total_length%2#0"
      ]
    },
    "1204": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "total_length%2#0",
        "concat%2#0"
      ]
    },
    "1205": {
      "op": "dup",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "total_length%2#0",
        "concat%2#0",
        "concat%2#0 (copy)"
      ]
    },
    "1206": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "total_length%2#0",
        "concat%2#0",
        "concat%2#0 (copy)",
        "2"
      ]
    },
    "1208": {
      "op": "uncover 3",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "concat%2#0",
        "concat%2#0 (copy)",
        "2",
        "total_length%2#0"
      ]
    },
    "1210": {
      "op": "substring3",
      "defined_out": [
        "arr2#0",
        "concat%2#0",
        "extract_to_end%2#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "concat%2#0",
        "extract_to_end%2#0"
      ]
    },
    "1211": {
      "op": "len",
      "defined_out": [
        "arr2#0",
        "concat%2#0",
        "fixed_struct#0",
        "len%0#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "concat%2#0",
        "len%0#0"
      ]
    },
    "1212": {
      "op": "intc_3 // 16",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "concat%2#0",
        "len%0#0",
        "16"
      ]
    },
    "1213": {
      "op": "/",
      "defined_out": [
        "arr2#0",
        "concat%2#0",
        "div_floor%0#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "concat%2#0",
        "div_floor%0#0"
      ]
    },
    "1214": {
      "op": "itob",
      "defined_out": [
        "arr2#0",
        "as_bytes%2#0",
        "concat%2#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "concat%2#0",
        "as_bytes%2#0"
      ]
    },
    "1215": {
      "op": "extract 6 2",
      "defined_out": [
        "arr2#0",
        "as_u16_bytes%2#0",
        "concat%2#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "concat%2#0",
        "as_u16_bytes%2#0"
      ]
    },
    "1218": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "as_u16_bytes%2#0",
        "concat%2#0"
      ]
    },
    "1219": {
      "op": "intc_0 // 0",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "as_u16_bytes%2#0",
        "concat%2#0",
        "0"
      ]
    },
    "1220": {
      "op": "uncover 2",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "concat%2#0",
        "0",
        "as_u16_bytes%2#0"
      ]
    },
    "1222": {
      "op": "replace3",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "arr8#0"
      ]
    },
    "1223": {
      "op": "dup",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr2#0",
        "arr8#0",
        "arr8#0"
      ]
    },
    "1224": {
      "op": "cover 2",
      "defined_out": [
        "arr2#0",
        "arr8#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr8#0"
      ]
    },
    "1226": {
      "op": "==",
      "defined_out": [
        "arr8#0",
        "fixed_struct#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "tmp%25#0"
      ]
    },
    "1227": {
      "error": "expected arrays to be the same",
      "op": "assert // expected arrays to be the same",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0"
      ]
    },
    "1228": {
      "op": "intc_0 // 0",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "0"
      ]
    },
    "1229": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "arr8#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "1230": {
      "op": "extract 6 2",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0"
      ]
    },
    "1233": {
      "op": "dup",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0"
      ]
    },
    "1234": {
      "op": "intc_0 // 0",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "0"
      ]
    },
    "1235": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "arr2#0",
        "arr8#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "1236": {
      "op": "extract 6 2",
      "defined_out": [
        "arr2#0",
        "arr8#0",
        "encoded_array%4#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "encoded_array%4#0"
      ]
    },
    "1239": {
      "op": "!=",
      "defined_out": [
        "arr2#0",
        "arr8#0",
        "fixed_struct#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "tmp%26#0"
      ]
    },
    "1240": {
      "op": "bz test_arr_after_if_else@2",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0"
      ]
    },
    "1243": {
      "block": "test_arr_if_body@1",
      "stack_in": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "arr2#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0"
      ]
    },
    "1245": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr2#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "0"
      ]
    },
    "1246": {
      "op": "extract_uint16",
      "defined_out": [
        "arr2#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "tmp%27#0"
      ]
    },
    "1247": {
      "op": "frame_dig 2",
      "defined_out": [
        "arr2#0",
        "arr8#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "tmp%27#0",
        "arr8#0"
      ]
    },
    "1249": {
      "op": "intc_0 // 0",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "tmp%27#0",
        "arr8#0",
        "0"
      ]
    },
    "1250": {
      "op": "extract_uint16",
      "defined_out": [
        "arr2#0",
        "arr8#0",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "1251": {
      "op": "==",
      "defined_out": [
        "arr2#0",
        "arr8#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "tmp%29#0"
      ]
    },
    "1252": {
      "error": "expected array lengths to be the same",
      "op": "assert // expected array lengths to be the same",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0"
      ]
    },
    "1253": {
      "block": "test_arr_after_if_else@2",
      "stack_in": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "1"
      ]
    },
    "1254": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0"
      ]
    },
    "1255": {
      "op": "intc_0 // 0",
      "defined_out": [
        "_i#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "_i#0"
      ]
    },
    "1256": {
      "op": "frame_bury 0",
      "defined_out": [
        "_i#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0"
      ]
    },
    "1258": {
      "block": "test_arr_for_header@3",
      "stack_in": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "_i#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "_i#0"
      ]
    },
    "1260": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "_i#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "_i#0",
        "3"
      ]
    },
    "1262": {
      "op": "<",
      "defined_out": [
        "_i#0",
        "continue_looping%0#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "continue_looping%0#0"
      ]
    },
    "1263": {
      "op": "bz test_arr_after_for@6",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0"
      ]
    },
    "1266": {
      "block": "test_arr_for_body@4",
      "stack_in": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0"
      ],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "0x"
      ]
    },
    "1267": {
      "op": "frame_dig 1",
      "defined_out": [
        "0x",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "0x",
        "fixed_struct#0"
      ]
    },
    "1269": {
      "op": "concat",
      "defined_out": [
        "fixed_struct#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "tmp%30#0"
      ]
    },
    "1270": {
      "op": "frame_dig 3",
      "defined_out": [
        "arr2#0",
        "fixed_struct#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "tmp%30#0",
        "arr2#0"
      ]
    },
    "1272": {
      "op": "dup",
      "defined_out": [
        "arr2#0",
        "arr2#0 (copy)",
        "fixed_struct#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "tmp%30#0",
        "arr2#0 (copy)",
        "arr2#0 (copy)"
      ]
    },
    "1273": {
      "op": "cover 2",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "tmp%30#0",
        "arr2#0 (copy)"
      ]
    },
    "1275": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "arr2#0 (copy)",
        "tmp%30#0"
      ]
    },
    "1276": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "arr2#0",
        "concat%3#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "concat%3#0"
      ]
    },
    "1277": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "concat%3#0",
        "arr2#0"
      ]
    },
    "1278": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr2#0",
        "concat%3#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "concat%3#0",
        "arr2#0",
        "0"
      ]
    },
    "1279": {
      "op": "extract_uint16",
      "defined_out": [
        "arr2#0",
        "concat%3#0",
        "extract_uint16%1#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "concat%3#0",
        "extract_uint16%1#0"
      ]
    },
    "1280": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arr2#0",
        "concat%3#0",
        "extract_uint16%1#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "concat%3#0",
        "extract_uint16%1#0",
        "1"
      ]
    },
    "1281": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "arr2#0",
        "concat%3#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "concat%3#0",
        "add%1#0"
      ]
    },
    "1282": {
      "op": "itob",
      "defined_out": [
        "arr2#0",
        "as_bytes%3#0",
        "concat%3#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "concat%3#0",
        "as_bytes%3#0"
      ]
    },
    "1283": {
      "op": "extract 6 2",
      "defined_out": [
        "arr2#0",
        "as_u16_bytes%3#0",
        "concat%3#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "concat%3#0",
        "as_u16_bytes%3#0"
      ]
    },
    "1286": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "as_u16_bytes%3#0",
        "concat%3#0"
      ]
    },
    "1287": {
      "op": "intc_0 // 0",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "as_u16_bytes%3#0",
        "concat%3#0",
        "0"
      ]
    },
    "1288": {
      "op": "uncover 2",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "concat%3#0",
        "0",
        "as_u16_bytes%3#0"
      ]
    },
    "1290": {
      "op": "replace3",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0"
      ]
    },
    "1291": {
      "op": "frame_bury 3",
      "defined_out": [
        "arr2#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0"
      ]
    },
    "1293": {
      "block": "test_arr_for_footer@5",
      "stack_in": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "_i#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "_i#0"
      ]
    },
    "1295": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "_i#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "_i#0",
        "1"
      ]
    },
    "1296": {
      "op": "+",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "_i#0"
      ]
    },
    "1297": {
      "op": "frame_bury 0",
      "defined_out": [
        "_i#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0"
      ]
    },
    "1299": {
      "op": "b test_arr_for_header@3"
    },
    "1302": {
      "block": "test_arr_after_for@6",
      "stack_in": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "arr2#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0"
      ]
    },
    "1304": {
      "op": "dup",
      "defined_out": [
        "arr2#0",
        "arr2#0 (copy)"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "arr2#0 (copy)"
      ]
    },
    "1305": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr2#0",
        "arr2#0 (copy)"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "arr2#0 (copy)",
        "0"
      ]
    },
    "1306": {
      "op": "extract_uint16",
      "defined_out": [
        "arr2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "tmp%31#0"
      ]
    },
    "1307": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "arr2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "tmp%31#0",
        "3"
      ]
    },
    "1309": {
      "op": "==",
      "defined_out": [
        "arr2#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "tmp%32#0"
      ]
    },
    "1310": {
      "error": "expected 3 elements",
      "op": "assert // expected 3 elements",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0"
      ]
    },
    "1311": {
      "op": "dupn 2",
      "defined_out": [
        "arr2#0",
        "frozen1#0",
        "frozen1#0 (copy)"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen1#0",
        "frozen1#0 (copy)"
      ]
    },
    "1313": {
      "callsub": "test_cases.mutable_native_types.contract.sum_frozen_arr",
      "op": "callsub sum_frozen_arr",
      "defined_out": [
        "arr2#0",
        "frozen1#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen1#0",
        "tmp%34#0"
      ]
    },
    "1316": {
      "op": "pushint 21 // 21",
      "defined_out": [
        "21",
        "arr2#0",
        "frozen1#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen1#0",
        "tmp%34#0",
        "21"
      ]
    },
    "1318": {
      "op": "==",
      "defined_out": [
        "arr2#0",
        "frozen1#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen1#0",
        "tmp%35#0"
      ]
    },
    "1319": {
      "error": "expected sum to be 21",
      "op": "assert // expected sum to be 21",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen1#0"
      ]
    },
    "1320": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "frozen1#0",
        "arr2#0"
      ]
    },
    "1321": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "arr2#0",
        "frozen1#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "frozen1#0",
        "arr2#0",
        "16"
      ]
    },
    "1322": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_fixed_size",
      "op": "callsub dynamic_array_pop_fixed_size",
      "defined_out": [
        "arr2#0",
        "frozen1#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "frozen1#0",
        "tmp%36#0",
        "tmp%37#0"
      ]
    },
    "1325": {
      "op": "bury 1",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "frozen1#0",
        "arr2#0"
      ]
    },
    "1327": {
      "op": "dup",
      "defined_out": [
        "arr2#0",
        "frozen1#0",
        "frozen2#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "frozen1#0",
        "arr2#0",
        "frozen2#0"
      ]
    },
    "1328": {
      "op": "uncover 2",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen2#0",
        "frozen1#0"
      ]
    },
    "1330": {
      "callsub": "test_cases.mutable_native_types.contract.sum_frozen_arr",
      "op": "callsub sum_frozen_arr",
      "defined_out": [
        "arr2#0",
        "frozen2#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen2#0",
        "tmp%39#0"
      ]
    },
    "1333": {
      "op": "pushint 21 // 21",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen2#0",
        "tmp%39#0",
        "21"
      ]
    },
    "1335": {
      "op": "==",
      "defined_out": [
        "arr2#0",
        "frozen2#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen2#0",
        "tmp%40#0"
      ]
    },
    "1336": {
      "error": "expected sum to be 21",
      "op": "assert // expected sum to be 21",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen2#0"
      ]
    },
    "1337": {
      "op": "dup",
      "defined_out": [
        "arr2#0",
        "frozen2#0",
        "frozen2#0 (copy)"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen2#0",
        "frozen2#0 (copy)"
      ]
    },
    "1338": {
      "callsub": "test_cases.mutable_native_types.contract.sum_frozen_arr",
      "op": "callsub sum_frozen_arr",
      "defined_out": [
        "arr2#0",
        "frozen2#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen2#0",
        "tmp%41#0"
      ]
    },
    "1341": {
      "op": "pushint 14 // 14",
      "defined_out": [
        "14",
        "arr2#0",
        "frozen2#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen2#0",
        "tmp%41#0",
        "14"
      ]
    },
    "1343": {
      "op": "==",
      "defined_out": [
        "arr2#0",
        "frozen2#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen2#0",
        "tmp%42#0"
      ]
    },
    "1344": {
      "error": "expected sum to be 14",
      "op": "assert // expected sum to be 14",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen2#0"
      ]
    },
    "1345": {
      "op": "dup",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen2#0",
        "frozen2#0 (copy)"
      ]
    },
    "1346": {
      "op": "len",
      "defined_out": [
        "arr2#0",
        "frozen2#0",
        "total_length%3#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen2#0",
        "total_length%3#0"
      ]
    },
    "1347": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "total_length%3#0",
        "frozen2#0"
      ]
    },
    "1348": {
      "op": "dup",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "total_length%3#0",
        "frozen2#0",
        "frozen2#0 (copy)"
      ]
    },
    "1349": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "arr2#0",
        "frozen2#0",
        "frozen2#0 (copy)",
        "total_length%3#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "total_length%3#0",
        "frozen2#0",
        "frozen2#0 (copy)",
        "2"
      ]
    },
    "1351": {
      "op": "uncover 3",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen2#0",
        "frozen2#0 (copy)",
        "2",
        "total_length%3#0"
      ]
    },
    "1353": {
      "op": "substring3",
      "defined_out": [
        "arr2#0",
        "extract_to_end%3#0",
        "frozen2#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen2#0",
        "extract_to_end%3#0"
      ]
    },
    "1354": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "arr2#0",
        "concat%4#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "concat%4#0"
      ]
    },
    "1355": {
      "op": "dup",
      "defined_out": [
        "arr2#0",
        "concat%4#0",
        "concat%4#0 (copy)"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "concat%4#0",
        "concat%4#0 (copy)"
      ]
    },
    "1356": {
      "op": "len",
      "defined_out": [
        "arr2#0",
        "concat%4#0",
        "total_length%4#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "concat%4#0",
        "total_length%4#0"
      ]
    },
    "1357": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "total_length%4#0",
        "concat%4#0"
      ]
    },
    "1358": {
      "op": "dup",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "total_length%4#0",
        "concat%4#0",
        "concat%4#0 (copy)"
      ]
    },
    "1359": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "total_length%4#0",
        "concat%4#0",
        "concat%4#0 (copy)",
        "2"
      ]
    },
    "1361": {
      "op": "uncover 3",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "concat%4#0",
        "concat%4#0 (copy)",
        "2",
        "total_length%4#0"
      ]
    },
    "1363": {
      "op": "substring3",
      "defined_out": [
        "arr2#0",
        "concat%4#0",
        "extract_to_end%4#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "concat%4#0",
        "extract_to_end%4#0"
      ]
    },
    "1364": {
      "op": "len",
      "defined_out": [
        "arr2#0",
        "concat%4#0",
        "len%1#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "concat%4#0",
        "len%1#0"
      ]
    },
    "1365": {
      "op": "intc_3 // 16",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "concat%4#0",
        "len%1#0",
        "16"
      ]
    },
    "1366": {
      "op": "/",
      "defined_out": [
        "arr2#0",
        "concat%4#0",
        "div_floor%1#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "concat%4#0",
        "div_floor%1#0"
      ]
    },
    "1367": {
      "op": "itob",
      "defined_out": [
        "arr2#0",
        "as_bytes%4#0",
        "concat%4#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "concat%4#0",
        "as_bytes%4#0"
      ]
    },
    "1368": {
      "op": "extract 6 2",
      "defined_out": [
        "arr2#0",
        "as_u16_bytes%4#0",
        "concat%4#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "concat%4#0",
        "as_u16_bytes%4#0"
      ]
    },
    "1371": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "as_u16_bytes%4#0",
        "concat%4#0"
      ]
    },
    "1372": {
      "op": "intc_0 // 0",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "as_u16_bytes%4#0",
        "concat%4#0",
        "0"
      ]
    },
    "1373": {
      "op": "uncover 2",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "concat%4#0",
        "0",
        "as_u16_bytes%4#0"
      ]
    },
    "1375": {
      "op": "replace3",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "frozen2#0"
      ]
    },
    "1376": {
      "callsub": "test_cases.mutable_native_types.contract.sum_frozen_arr",
      "op": "callsub sum_frozen_arr",
      "defined_out": [
        "arr2#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "tmp%43#0"
      ]
    },
    "1379": {
      "op": "pushint 28 // 28",
      "defined_out": [
        "28",
        "arr2#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "tmp%43#0",
        "28"
      ]
    },
    "1381": {
      "op": "==",
      "defined_out": [
        "arr2#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "tmp%44#0"
      ]
    },
    "1382": {
      "error": "and the sum shall be 41",
      "op": "assert // and the sum shall be 41",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0"
      ]
    },
    "1383": {
      "op": "bytec 9 // \"arr\"",
      "defined_out": [
        "\"arr\"",
        "arr2#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "\"arr\""
      ]
    },
    "1385": {
      "op": "dig 1",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "\"arr\"",
        "arr2#0 (copy)"
      ]
    },
    "1387": {
      "op": "app_global_put",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0"
      ]
    },
    "1388": {
      "op": "intc_0 // 0",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "0"
      ]
    },
    "1389": {
      "op": "bytec 9 // \"arr\"",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "0",
        "\"arr\""
      ]
    },
    "1391": {
      "op": "app_global_get_ex",
      "defined_out": [
        "arr2#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1392": {
      "error": "check self.arr exists",
      "op": "assert // check self.arr exists",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr2#0",
        "maybe_value%0#0"
      ]
    },
    "1393": {
      "op": "==",
      "defined_out": [
        "arr2#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "tmp%45#0"
      ]
    },
    "1394": {
      "error": "expected array in storage to be the same",
      "op": "assert // expected array in storage to be the same",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0"
      ]
    },
    "1395": {
      "callsub": "_puya_lib.mem.new_slot",
      "op": "callsub _puya_lib.mem.new_slot",
      "defined_out": [
        "arr2#0",
        "slot%1#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "slot%1#0"
      ]
    },
    "1398": {
      "op": "dup",
      "defined_out": [
        "arr2#0",
        "slot%1#0",
        "slot%1#0 (copy)"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "slot%1#0",
        "slot%1#0 (copy)"
      ]
    },
    "1399": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "arr2#0",
        "slot%1#0",
        "slot%1#0 (copy)"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "slot%1#0",
        "slot%1#0 (copy)",
        "0x"
      ]
    },
    "1400": {
      "op": "stores",
      "defined_out": [
        "arr11#0",
        "arr2#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr11#0"
      ]
    },
    "1401": {
      "op": "dup",
      "defined_out": [
        "arr11#0",
        "arr11#0 (copy)",
        "arr2#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr11#0",
        "arr11#0 (copy)"
      ]
    },
    "1402": {
      "op": "loads",
      "defined_out": [
        "aggregate%slot_contents%1#0",
        "arr11#0",
        "arr2#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr11#0",
        "aggregate%slot_contents%1#0"
      ]
    },
    "1403": {
      "op": "len",
      "defined_out": [
        "aggregate%bytes_len%2#0",
        "arr11#0",
        "arr2#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr11#0",
        "aggregate%bytes_len%2#0"
      ]
    },
    "1404": {
      "op": "intc_3 // 16",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr11#0",
        "aggregate%bytes_len%2#0",
        "16"
      ]
    },
    "1405": {
      "op": "/",
      "defined_out": [
        "arr11#0",
        "arr2#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr11#0",
        "tmp%46#0"
      ]
    },
    "1406": {
      "op": "intc_0 // 0",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr11#0",
        "tmp%46#0",
        "0"
      ]
    },
    "1407": {
      "op": "==",
      "defined_out": [
        "arr11#0",
        "arr2#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr11#0",
        "tmp%47#0"
      ]
    },
    "1408": {
      "op": "assert",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr11#0"
      ]
    },
    "1409": {
      "op": "dup",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr11#0",
        "arr11#0 (copy)"
      ]
    },
    "1410": {
      "op": "loads",
      "defined_out": [
        "arr11#0",
        "arr2#0",
        "slot_contents%2#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr11#0",
        "slot_contents%2#0"
      ]
    },
    "1411": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr11#0",
        "slot_contents%2#0",
        "0x"
      ]
    },
    "1412": {
      "op": "frame_dig 1",
      "defined_out": [
        "0x",
        "arr11#0",
        "arr2#0",
        "fixed_struct#0",
        "slot_contents%2#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr11#0",
        "slot_contents%2#0",
        "0x",
        "fixed_struct#0"
      ]
    },
    "1414": {
      "op": "concat",
      "defined_out": [
        "arr11#0",
        "arr2#0",
        "fixed_struct#0",
        "slot_contents%2#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr11#0",
        "slot_contents%2#0",
        "tmp%48#0"
      ]
    },
    "1415": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "arr11#0",
        "arr2#0",
        "concat%5#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr11#0",
        "concat%5#0"
      ]
    },
    "1416": {
      "op": "dig 1",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr11#0",
        "concat%5#0",
        "arr11#0 (copy)"
      ]
    },
    "1418": {
      "op": "swap",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr11#0",
        "arr11#0 (copy)",
        "concat%5#0"
      ]
    },
    "1419": {
      "op": "stores",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "arr11#0"
      ]
    },
    "1420": {
      "op": "loads",
      "defined_out": [
        "aggregate%slot_contents%2#0",
        "arr2#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "aggregate%slot_contents%2#0"
      ]
    },
    "1421": {
      "op": "len",
      "defined_out": [
        "aggregate%bytes_len%3#0",
        "arr2#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "aggregate%bytes_len%3#0"
      ]
    },
    "1422": {
      "op": "intc_3 // 16",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "aggregate%bytes_len%3#0",
        "16"
      ]
    },
    "1423": {
      "op": "/",
      "defined_out": [
        "arr2#0",
        "fixed_struct#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "tmp%49#0"
      ]
    },
    "1424": {
      "op": "intc_0 // 0",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "tmp%49#0",
        "0"
      ]
    },
    "1425": {
      "op": "!=",
      "defined_out": [
        "arr2#0",
        "fixed_struct#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "tmp%50#0"
      ]
    },
    "1426": {
      "op": "assert",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0"
      ]
    },
    "1427": {
      "op": "intc_0 // 0",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "0"
      ]
    },
    "1428": {
      "op": "bytec 9 // \"arr\"",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "0",
        "\"arr\""
      ]
    },
    "1430": {
      "op": "app_global_get_ex",
      "defined_out": [
        "arr2#0",
        "fixed_struct#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1431": {
      "error": "check self.arr exists",
      "op": "assert // check self.arr exists",
      "stack_out": [
        "_i#0",
        "fixed_struct#0",
        "arr8#0",
        "arr2#0",
        "maybe_value%1#0"
      ]
    },
    "1432": {
      "op": "frame_bury 0"
    },
    "1434": {
      "retsub": true,
      "op": "retsub"
    },
    "1435": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1437": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "1438": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1439": {
      "op": "bz approval_program_bare_routing@17",
      "stack_out": []
    },
    "1442": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1445": {
      "op": "pushbytes 0x67a5a02d // method \"test_imm_fixed_array()void\"",
      "defined_out": [
        "Method(test_imm_fixed_array()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_imm_fixed_array()void)"
      ]
    },
    "1451": {
      "op": "pushbytes 0xd1276f81 // method \"fixed_initialize()void\"",
      "defined_out": [
        "Method(fixed_initialize()void)",
        "Method(test_imm_fixed_array()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_imm_fixed_array()void)",
        "Method(fixed_initialize()void)"
      ]
    },
    "1457": {
      "op": "pushbytes 0x0d2ab4c0 // method \"add_payment((address,uint64,uint64))void\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(fixed_initialize()void)",
        "Method(test_imm_fixed_array()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_imm_fixed_array()void)",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)"
      ]
    },
    "1463": {
      "op": "pushbytes 0xe8b5d56c // method \"increment_payment(uint64,uint64)void\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(test_imm_fixed_array()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_imm_fixed_array()void)",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)"
      ]
    },
    "1469": {
      "op": "pushbytes 0x875901e5 // method \"create_storage(uint64)void\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(create_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(test_imm_fixed_array()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_imm_fixed_array()void)",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)"
      ]
    },
    "1475": {
      "op": "pushbytes 0x4abb70f1 // method \"local_struct()(address,uint64,uint64)\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(create_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(test_imm_fixed_array()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_imm_fixed_array()void)",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))"
      ]
    },
    "1481": {
      "op": "pushbytes 0xaf05f48f // method \"delete_storage(uint64)void\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(test_imm_fixed_array()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_imm_fixed_array()void)",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)"
      ]
    },
    "1487": {
      "op": "pushbytes 0xe8d71c8c // method \"struct_arg(uint64,(uint64,uint64))void\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(test_imm_fixed_array()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_imm_fixed_array()void)",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)"
      ]
    },
    "1493": {
      "op": "pushbytes 0x01aaa39c // method \"struct_return()(uint64,uint64)\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(test_imm_fixed_array()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_imm_fixed_array()void)",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))"
      ]
    },
    "1499": {
      "op": "pushbytes 0x8313dee7 // method \"tup_return()(uint64,uint64)\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(test_imm_fixed_array()void)",
        "Method(tup_return()(uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_imm_fixed_array()void)",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))"
      ]
    },
    "1505": {
      "op": "pushbytes 0x2ca849c1 // method \"calculate_sum()uint64\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(calculate_sum()uint64)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(test_imm_fixed_array()void)",
        "Method(tup_return()(uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_imm_fixed_array()void)",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "Method(calculate_sum()uint64)"
      ]
    },
    "1511": {
      "op": "pushbytes 0x3d8e707d // method \"test_arr((uint64,uint64)[])(uint64,uint64)[]\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(calculate_sum()uint64)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(test_arr((uint64,uint64)[])(uint64,uint64)[])",
        "Method(test_imm_fixed_array()void)",
        "Method(tup_return()(uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_imm_fixed_array()void)",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "Method(calculate_sum()uint64)",
        "Method(test_arr((uint64,uint64)[])(uint64,uint64)[])"
      ]
    },
    "1517": {
      "op": "uncover 12",
      "stack_out": [
        "Method(test_imm_fixed_array()void)",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "Method(calculate_sum()uint64)",
        "Method(test_arr((uint64,uint64)[])(uint64,uint64)[])",
        "tmp%2#0"
      ]
    },
    "1519": {
      "op": "match approval_program_test_imm_fixed_array_route@3 approval_program_fixed_initialize_route@4 approval_program_add_payment_route@5 approval_program_increment_payment_route@6 approval_program_create_storage_route@7 approval_program_local_struct_route@8 approval_program_delete_storage_route@9 approval_program_struct_arg_route@10 approval_program_struct_return_route@11 approval_program_tup_return_route@12 approval_program_calculate_sum_route@13 approval_program_test_arr_route@14",
      "stack_out": []
    },
    "1545": {
      "block": "approval_program_after_if_else@23",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1546": {
      "block": "approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@24",
      "stack_in": [
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "1547": {
      "block": "approval_program_test_arr_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "1549": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "NoOp"
      ]
    },
    "1550": {
      "op": "==",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "1551": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1552": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "1554": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "0"
      ]
    },
    "1555": {
      "op": "!=",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "1556": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1557": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint64)[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint64)[])%0#0"
      ]
    },
    "1560": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.test_arr",
      "op": "callsub test_arr",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "1563": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "0x151f7c75"
      ]
    },
    "1565": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%67#0"
      ]
    },
    "1566": {
      "op": "concat",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "1567": {
      "op": "log",
      "stack_out": []
    },
    "1568": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1569": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@24"
    },
    "1572": {
      "block": "approval_program_calculate_sum_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "1574": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "NoOp"
      ]
    },
    "1575": {
      "op": "==",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "1576": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1577": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "1579": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0",
        "0"
      ]
    },
    "1580": {
      "op": "!=",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "1581": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1582": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.calculate_sum",
      "op": "callsub calculate_sum",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "1585": {
      "op": "itob",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "1586": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0",
        "0x151f7c75"
      ]
    },
    "1588": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%61#0"
      ]
    },
    "1589": {
      "op": "concat",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "1590": {
      "op": "log",
      "stack_out": []
    },
    "1591": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1592": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@24"
    },
    "1595": {
      "block": "approval_program_tup_return_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "1597": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "NoOp"
      ]
    },
    "1598": {
      "op": "==",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1599": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1600": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "1602": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "0"
      ]
    },
    "1603": {
      "op": "!=",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1604": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1605": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.tup_return",
      "op": "callsub tup_return",
      "defined_out": [
        "tmp%52#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%53#0"
      ]
    },
    "1608": {
      "op": "swap",
      "stack_out": [
        "tmp%53#0",
        "tmp%52#0"
      ]
    },
    "1609": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1610": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "1611": {
      "op": "swap",
      "stack_out": [
        "tmp%53#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1612": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "aggregate%head%0#0"
      ]
    },
    "1613": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%53#0"
      ]
    },
    "1614": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "1615": {
      "op": "concat",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "1616": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "0x151f7c75"
      ]
    },
    "1618": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%54#0"
      ]
    },
    "1619": {
      "op": "concat",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "1620": {
      "op": "log",
      "stack_out": []
    },
    "1621": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1622": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@24"
    },
    "1625": {
      "block": "approval_program_struct_return_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1627": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "NoOp"
      ]
    },
    "1628": {
      "op": "==",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1629": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1630": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1632": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "0"
      ]
    },
    "1633": {
      "op": "!=",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1634": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1635": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.struct_return",
      "op": "callsub struct_return",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "1638": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "0x151f7c75"
      ]
    },
    "1640": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%46#0"
      ]
    },
    "1641": {
      "op": "concat",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "1642": {
      "op": "log",
      "stack_out": []
    },
    "1643": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1644": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@24"
    },
    "1647": {
      "block": "approval_program_struct_arg_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "1649": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "NoOp"
      ]
    },
    "1650": {
      "op": "==",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "1651": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1652": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "1654": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "0"
      ]
    },
    "1655": {
      "op": "!=",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1656": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1657": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "1660": {
      "op": "btoi",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1661": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "1664": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.struct_arg",
      "op": "callsub struct_arg",
      "stack_out": []
    },
    "1667": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1668": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@24"
    },
    "1671": {
      "block": "approval_program_delete_storage_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "1673": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "NoOp"
      ]
    },
    "1674": {
      "op": "==",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "1675": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1676": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "1678": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "0"
      ]
    },
    "1679": {
      "op": "!=",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "1680": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1681": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "1684": {
      "op": "btoi",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "1685": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.delete_storage",
      "op": "callsub delete_storage",
      "stack_out": []
    },
    "1688": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1689": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@24"
    },
    "1692": {
      "block": "approval_program_local_struct_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1694": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "NoOp"
      ]
    },
    "1695": {
      "op": "==",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1696": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1697": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1699": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "0"
      ]
    },
    "1700": {
      "op": "!=",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "1701": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1702": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.local_struct",
      "op": "callsub local_struct",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1705": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "0x151f7c75"
      ]
    },
    "1707": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%30#0"
      ]
    },
    "1708": {
      "op": "concat",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "1709": {
      "op": "log",
      "stack_out": []
    },
    "1710": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1711": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@24"
    },
    "1714": {
      "block": "approval_program_create_storage_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1716": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "NoOp"
      ]
    },
    "1717": {
      "op": "==",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1718": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1719": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1721": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "0"
      ]
    },
    "1722": {
      "op": "!=",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1723": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1724": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "1727": {
      "op": "btoi",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1728": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.create_storage",
      "op": "callsub create_storage",
      "stack_out": []
    },
    "1731": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1732": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@24"
    },
    "1735": {
      "block": "approval_program_increment_payment_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1737": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "NoOp"
      ]
    },
    "1738": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1739": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1740": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1742": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0"
      ]
    },
    "1743": {
      "op": "!=",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1744": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1745": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "1748": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1749": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "1752": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "1753": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.increment_payment",
      "op": "callsub increment_payment",
      "stack_out": []
    },
    "1756": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1757": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@24"
    },
    "1760": {
      "block": "approval_program_add_payment_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1762": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "NoOp"
      ]
    },
    "1763": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1764": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1765": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1767": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0"
      ]
    },
    "1768": {
      "op": "!=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1769": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1770": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32],uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32],uint64,uint64)%0#0"
      ]
    },
    "1773": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.add_payment",
      "op": "callsub add_payment",
      "stack_out": []
    },
    "1776": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1777": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@24"
    },
    "1780": {
      "block": "approval_program_fixed_initialize_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1782": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "1783": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1784": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1785": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1787": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "1788": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1789": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1790": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.fixed_initialize",
      "op": "callsub fixed_initialize"
    },
    "1793": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1794": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@24"
    },
    "1797": {
      "block": "approval_program_test_imm_fixed_array_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1799": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "1800": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1801": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1802": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1804": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "1805": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1806": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1807": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.test_imm_fixed_array",
      "op": "callsub test_imm_fixed_array"
    },
    "1810": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1811": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@24"
    },
    "1814": {
      "block": "approval_program_bare_routing@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "1816": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "0"
      ]
    },
    "1817": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%69#0"
      ]
    },
    "1818": {
      "op": "match approval_program___algopy_default_create@18",
      "stack_out": []
    },
    "1822": {
      "block": "approval_program_switch_case_next@22",
      "stack_in": [],
      "op": "b approval_program_after_if_else@23"
    },
    "1825": {
      "block": "approval_program___algopy_default_create@18",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "1827": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0",
        "0"
      ]
    },
    "1828": {
      "op": "==",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "1829": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1830": {
      "block": "approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__algopy_default_create@20",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1831": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@24"
    },
    "1834": {
      "subroutine": "_puya_lib.mem.new_slot",
      "params": {},
      "block": "_puya_lib.mem.new_slot@entry",
      "stack_in": [],
      "op": "load 0",
      "defined_out": [
        "slot_allocations"
      ],
      "stack_out": [
        "slot_allocations"
      ]
    },
    "1836": {
      "op": "bitlen",
      "defined_out": [
        "free_slot#0"
      ],
      "stack_out": [
        "free_slot#0"
      ]
    },
    "1837": {
      "op": "load 0",
      "stack_out": [
        "free_slot#0",
        "slot_allocations"
      ]
    },
    "1839": {
      "op": "pushint 256 // 256",
      "defined_out": [
        "256",
        "free_slot#0",
        "slot_allocations"
      ],
      "stack_out": [
        "free_slot#0",
        "slot_allocations",
        "256"
      ]
    },
    "1842": {
      "op": "dig 2",
      "defined_out": [
        "256",
        "free_slot#0",
        "free_slot#0 (copy)",
        "slot_allocations"
      ],
      "stack_out": [
        "free_slot#0",
        "slot_allocations",
        "256",
        "free_slot#0 (copy)"
      ]
    },
    "1844": {
      "op": "-",
      "defined_out": [
        "free_slot#0",
        "free_slot_idx",
        "slot_allocations"
      ],
      "stack_out": [
        "free_slot#0",
        "slot_allocations",
        "free_slot_idx"
      ]
    },
    "1845": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "free_slot#0",
        "free_slot_idx",
        "slot_allocations"
      ],
      "stack_out": [
        "free_slot#0",
        "slot_allocations",
        "free_slot_idx",
        "0"
      ]
    },
    "1846": {
      "error": "no available slots",
      "op": "setbit // on error: no available slots",
      "defined_out": [
        "free_slot#0",
        "new_slot_allocations"
      ],
      "stack_out": [
        "free_slot#0",
        "new_slot_allocations"
      ]
    },
    "1847": {
      "op": "store 0",
      "stack_out": [
        "free_slot#0"
      ]
    },
    "1849": {
      "retsub": true,
      "op": "retsub"
    }
  }
}