#pragma version 10
#pragma typetrack false

// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 8 0 1 16 128 34176
    bytecblock "tup_bag" 0x151f7c75 0x
    b block@0

block@0:
    txn ApplicationID
    bnz after_if_else@2
    b call___init__@1

call___init__@1:
    callsub __init__
    b after_if_else@2

after_if_else@2:
    callsub approval_program
    return


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.create_box[routing]() -> void:
create_box:
    b create_box_block@0

create_box_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:38
    // @arc4.abimethod()
    callsub test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.create_box
    intc_2 // 1
    return


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.num_tups[routing]() -> void:
num_tups:
    b num_tups_block@0

num_tups_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:45
    // @arc4.abimethod()
    callsub test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.num_tups
    itob
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    return


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup[routing]() -> void:
add_tup:
    b add_tup_block@0

add_tup_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:49
    // @arc4.abimethod()
    txna ApplicationArgs 1
    callsub test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup
    intc_2 // 1
    return


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_tup[routing]() -> void:
get_tup:
    b get_tup_block@0

get_tup_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:56
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    callsub test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_tup
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    return


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum[routing]() -> void:
sum:
    b sum_block@0

sum_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:61
    // @arc4.abimethod()
    callsub test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum
    itob
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    return


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups[routing]() -> void:
add_many_tups:
    b add_many_tups_block@0

add_many_tups_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:70
    // @arc4.abimethod()
    txna ApplicationArgs 1
    callsub test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups
    intc_2 // 1
    return


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups[routing]() -> void:
add_fixed_tups:
    b add_fixed_tups_block@0

add_fixed_tups_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:75
    // @arc4.abimethod()
    txna ApplicationArgs 1
    callsub test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups
    intc_2 // 1
    return


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a[routing]() -> void:
set_a:
    b set_a_block@0

set_a_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:80
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    callsub test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a
    intc_2 // 1
    return


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b[routing]() -> void:
set_b:
    b set_b_block@0

set_b_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:87
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    callsub test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b
    intc_2 // 1
    return


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_3_tups[routing]() -> void:
get_3_tups:
    b get_3_tups_block@0

get_3_tups_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:94
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    callsub test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_3_tups
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    return


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups[routing]() -> void:
get_all_tups:
    b get_all_tups_block@0

get_all_tups_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:107
    // @arc4.abimethod()
    callsub test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    return


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__init__() -> void:
__init__:
    b __init___block@0

__init___block@0:
    retsub


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.create_box() -> void:
test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.create_box:
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.create_box_block@0

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.create_box_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:40
    // assert self.tup_bag.create(), "box already exists"
    bytec_0 // "tup_bag"
    pushint 4273 // 4273
    box_create
    assert // box already exists
    // mutable_native_types/case2_with_immutable_struct.py:41
    // self.tup_bag.value.owner = Txn.sender
    txn Sender
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    pushint 136 // 136
    uncover 2
    replace3
    bytec_0 // "tup_bag"
    uncover 1
    box_put
    // mutable_native_types/case2_with_immutable_struct.py:42
    // self.tup_bag.value.app = Global.current_application_id
    global CurrentApplicationID
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    uncover 1
    itob
    uncover 1
    pushint 168 // 168
    uncover 2
    replace3
    bytec_0 // "tup_bag"
    uncover 1
    box_put
    // mutable_native_types/case2_with_immutable_struct.py:43
    // self.tup_bag.value.bootstrapped = True
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc 5 // 34176
    intc_2 // 1
    setbit
    bytec_0 // "tup_bag"
    uncover 1
    box_put
    retsub


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.num_tups() -> uint64:
test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.num_tups:
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.num_tups_block@0

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.num_tups_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:47
    // return self.tup_bag.value.count
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    retsub


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup(tup: bytes) -> void:
test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup:
    // mutable_native_types/case2_with_immutable_struct.py:49-50
    // @arc4.abimethod()
    // def add_tup(self, tup: NamedTup) -> None:
    proto 1 0
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup_block@0

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:51
    // self._check_owner()
    callsub _check_owner
    // mutable_native_types/case2_with_immutable_struct.py:52
    // assert self.tup_bag.value.count < self.tup_bag.value.items.length, "too many tups"
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    intc_0 // 8
    <
    assert // too many tups
    // mutable_native_types/case2_with_immutable_struct.py:53
    // self.tup_bag.value.items[self.tup_bag.value.count] = tup
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    dig 1
    intc_0 // 8
    intc 4 // 128
    extract3
    uncover 1
    intc_3 // 16
    *
    frame_dig -1
    replace3 // on error: index access is out of bounds
    uncover 1
    intc_0 // 8
    uncover 2
    replace3
    bytec_0 // "tup_bag"
    uncover 1
    box_put
    // mutable_native_types/case2_with_immutable_struct.py:54
    // self.tup_bag.value.count += 1
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    intc_2 // 1
    +
    itob
    uncover 1
    intc_1 // 0
    uncover 2
    replace3
    bytec_0 // "tup_bag"
    uncover 1
    box_put
    retsub


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_tup(index: uint64) -> bytes:
test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_tup:
    // mutable_native_types/case2_with_immutable_struct.py:56-57
    // @arc4.abimethod()
    // def get_tup(self, index: UInt64) -> NamedTup:
    proto 1 1
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_tup_block@0

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_tup_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:58
    // assert index < self.tup_bag.value.count, "index out of bounds"
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    frame_dig -1
    >
    assert // index out of bounds
    // mutable_native_types/case2_with_immutable_struct.py:59
    // return self.tup_bag.value.items[index]
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 8
    intc 4 // 128
    extract3
    frame_dig -1
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    retsub


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum() -> uint64:
test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum:
    // mutable_native_types/case2_with_immutable_struct.py:61-62
    // @arc4.abimethod()
    // def sum(self) -> UInt64:
    proto 0 1
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum_block@0

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:63
    // total = UInt64()
    intc_1 // 0
    // mutable_native_types/case2_with_immutable_struct.py:64
    // for i in urange(self.tup_bag.value.count):
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    intc_2 // 1
    assert // Step cannot be zero
    intc_1 // 0
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum_for_header@1

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum_for_header@1:
    // mutable_native_types/case2_with_immutable_struct.py:64
    // for i in urange(self.tup_bag.value.count):
    frame_dig 2
    frame_dig 1
    <
    bz test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum_after_for@4
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum_for_body@2

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum_for_body@2:
    // mutable_native_types/case2_with_immutable_struct.py:65
    // tup = self.tup_bag.value.items[i]
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 8
    intc 4 // 128
    extract3
    frame_dig 2
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    // mutable_native_types/case2_with_immutable_struct.py:66
    // total += tup.a
    dup
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    frame_dig 0
    +
    // mutable_native_types/case2_with_immutable_struct.py:67
    // total += tup.b
    uncover 1
    intc_0 // 8
    intc_0 // 8
    extract3
    btoi
    +
    frame_bury 0
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum_for_footer@3

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum_for_footer@3:
    // mutable_native_types/case2_with_immutable_struct.py:64
    // for i in urange(self.tup_bag.value.count):
    frame_dig 2
    intc_2 // 1
    +
    frame_bury 2
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum_for_header@1

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum_after_for@4:
    // mutable_native_types/case2_with_immutable_struct.py:68
    // return total
    retsub


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups(tups: bytes) -> void:
test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups:
    // mutable_native_types/case2_with_immutable_struct.py:70-71
    // @arc4.abimethod()
    // def add_many_tups(self, tups: NativeArray[NamedTup]) -> None:
    proto 1 0
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups_block@0

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:72
    // for tup in tups:
    frame_dig -1
    intc_1 // 0
    extract_uint16
    intc_1 // 0
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups_for_header@1

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups_for_header@1:
    // mutable_native_types/case2_with_immutable_struct.py:72
    // for tup in tups:
    frame_dig 1
    frame_dig 0
    <
    bz test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups_after_for@4
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups_for_body@2

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups_for_body@2:
    // mutable_native_types/case2_with_immutable_struct.py:72
    // for tup in tups:
    frame_dig -1
    len
    frame_dig -1
    pushint 2 // 2
    uncover 2
    substring3
    frame_dig 1
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    // mutable_native_types/case2_with_immutable_struct.py:73
    // self.add_tup(tup)
    callsub test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups_for_footer@3

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups_for_footer@3:
    frame_dig 1
    intc_2 // 1
    +
    frame_bury 1
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups_for_header@1

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups_after_for@4:
    retsub


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups(tups: bytes) -> void:
test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups:
    // mutable_native_types/case2_with_immutable_struct.py:75-76
    // @arc4.abimethod()
    // def add_fixed_tups(self, tups: FixedArray[NamedTup, typing.Literal[3]]) -> None:
    proto 1 0
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups_block@0

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups_block@0:
    intc_1 // 0
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups_for_header@1

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups_for_header@1:
    // mutable_native_types/case2_with_immutable_struct.py:77
    // for tup in tups:
    frame_dig 0
    pushint 3 // 3
    <
    bz test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups_after_for@4
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups_for_body@2

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups_for_body@2:
    // mutable_native_types/case2_with_immutable_struct.py:77
    // for tup in tups:
    frame_dig 0
    intc_3 // 16
    *
    frame_dig -1
    uncover 1
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    // mutable_native_types/case2_with_immutable_struct.py:78
    // self.add_tup(tup)
    callsub test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups_for_footer@3

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups_for_footer@3:
    frame_dig 0
    intc_2 // 1
    +
    frame_bury 0
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups_for_header@1

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups_after_for@4:
    retsub


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a(a: uint64) -> void:
test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a:
    // mutable_native_types/case2_with_immutable_struct.py:80-81
    // @arc4.abimethod()
    // def set_a(self, a: UInt64) -> None:
    proto 1 0
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a_block@0

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:82
    // self._check_owner()
    callsub _check_owner
    // mutable_native_types/case2_with_immutable_struct.py:83
    // for i in urange(self.tup_bag.value.count):
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    intc_2 // 1
    assert // Step cannot be zero
    intc_1 // 0
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a_for_header@1

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a_for_header@1:
    // mutable_native_types/case2_with_immutable_struct.py:83
    // for i in urange(self.tup_bag.value.count):
    frame_dig 1
    frame_dig 0
    <
    bz test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a_after_for@4
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a_for_body@2

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a_for_body@2:
    // mutable_native_types/case2_with_immutable_struct.py:84
    // tup = self.tup_bag.value.items[i]
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 8
    intc 4 // 128
    extract3
    frame_dig 1
    dup
    cover 2
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    // mutable_native_types/case2_with_immutable_struct.py:85
    // self.tup_bag.value.items[i] = tup._replace(a=a)
    intc_0 // 8
    intc_0 // 8
    extract3
    btoi
    frame_dig -1
    itob
    bytec_2 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    intc_0 // 8
    intc 4 // 128
    extract3
    uncover 3
    intc_3 // 16
    *
    uncover 3
    replace3 // on error: index access is out of bounds
    uncover 1
    intc_0 // 8
    uncover 2
    replace3
    bytec_0 // "tup_bag"
    uncover 1
    box_put
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a_for_footer@3

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a_for_footer@3:
    // mutable_native_types/case2_with_immutable_struct.py:83
    // for i in urange(self.tup_bag.value.count):
    frame_dig 1
    intc_2 // 1
    +
    frame_bury 1
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a_for_header@1

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a_after_for@4:
    retsub


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b(b: uint64) -> void:
test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b:
    // mutable_native_types/case2_with_immutable_struct.py:87-88
    // @arc4.abimethod()
    // def set_b(self, b: UInt64) -> None:
    proto 1 0
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b_block@0

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:89
    // self._check_owner()
    callsub _check_owner
    // mutable_native_types/case2_with_immutable_struct.py:90
    // for i in urange(self.tup_bag.value.count):
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    intc_2 // 1
    assert // Step cannot be zero
    intc_1 // 0
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b_for_header@1

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b_for_header@1:
    // mutable_native_types/case2_with_immutable_struct.py:90
    // for i in urange(self.tup_bag.value.count):
    frame_dig 1
    frame_dig 0
    <
    bz test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b_after_for@4
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b_for_body@2

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b_for_body@2:
    // mutable_native_types/case2_with_immutable_struct.py:91
    // tup = self.tup_bag.value.items[i]
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 8
    intc 4 // 128
    extract3
    frame_dig 1
    dup
    cover 2
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    // mutable_native_types/case2_with_immutable_struct.py:92
    // self.tup_bag.value.items[i] = tup._replace(b=b)
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    itob
    bytec_2 // 0x
    uncover 1
    concat
    frame_dig -1
    itob
    concat
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    intc_0 // 8
    intc 4 // 128
    extract3
    uncover 3
    intc_3 // 16
    *
    uncover 3
    replace3 // on error: index access is out of bounds
    uncover 1
    intc_0 // 8
    uncover 2
    replace3
    bytec_0 // "tup_bag"
    uncover 1
    box_put
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b_for_footer@3

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b_for_footer@3:
    // mutable_native_types/case2_with_immutable_struct.py:90
    // for i in urange(self.tup_bag.value.count):
    frame_dig 1
    intc_2 // 1
    +
    frame_bury 1
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b_for_header@1

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b_after_for@4:
    retsub


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_3_tups(start: uint64) -> bytes:
test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_3_tups:
    // mutable_native_types/case2_with_immutable_struct.py:94-95
    // @arc4.abimethod()
    // def get_3_tups(self, start: UInt64) -> FixedArray[NamedTup, typing.Literal[3]]:
    proto 1 1
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_3_tups_block@0

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_3_tups_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:96
    // assert self.tup_bag.value.count >= start + 3, "not enough items"
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    frame_dig -1
    pushint 3 // 3
    +
    >=
    assert // not enough items
    // mutable_native_types/case2_with_immutable_struct.py:97
    // items = self.tup_bag.value.items.copy()
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 8
    intc 4 // 128
    extract3
    // mutable_native_types/case2_with_immutable_struct.py:101
    // items[start],
    frame_dig -1
    intc_3 // 16
    *
    dig 1
    uncover 1
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    cover 1
    // mutable_native_types/case2_with_immutable_struct.py:102
    // items[start + 1],
    frame_dig -1
    intc_2 // 1
    +
    intc_3 // 16
    *
    dig 1
    uncover 1
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    cover 1
    // mutable_native_types/case2_with_immutable_struct.py:103
    // items[start + 2],
    frame_dig -1
    pushint 2 // 2
    +
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    // mutable_native_types/case2_with_immutable_struct.py:99-105
    // return FixedArray[NamedTup, typing.Literal[3]](
    //     (
    //         items[start],
    //         items[start + 1],
    //         items[start + 2],
    //     )
    // )
    bytec_2 // 0x
    uncover 3
    concat
    uncover 2
    concat
    uncover 1
    concat
    retsub


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups() -> bytes:
test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups:
    // mutable_native_types/case2_with_immutable_struct.py:107-108
    // @arc4.abimethod()
    // def get_all_tups(self) -> NativeArray[NamedTup]:
    proto 0 1
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups_block@0

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:109
    // result = NativeArray[NamedTup]()
    intc_1 // 0
    itob
    extract 6 2
    // mutable_native_types/case2_with_immutable_struct.py:110
    // items = self.tup_bag.value.items.copy()
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_0 // 8
    intc 4 // 128
    extract3
    // mutable_native_types/case2_with_immutable_struct.py:111-112
    // # TODO: improve this once slicing is supported
    // for i in urange(self.tup_bag.value.count):
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    intc_2 // 1
    assert // Step cannot be zero
    intc_1 // 0
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups_for_header@1

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups_for_header@1:
    // mutable_native_types/case2_with_immutable_struct.py:111-112
    // # TODO: improve this once slicing is supported
    // for i in urange(self.tup_bag.value.count):
    frame_dig 3
    frame_dig 2
    <
    bz test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups_after_for@4
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups_for_body@2

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups_for_body@2:
    // mutable_native_types/case2_with_immutable_struct.py:113
    // result.append(items[i])
    frame_dig 3
    intc_3 // 16
    *
    frame_dig 1
    uncover 1
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    bytec_2 // 0x
    uncover 1
    concat
    frame_dig 0
    dup
    cover 2
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_1 // 0
    extract_uint16
    intc_2 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_1 // 0
    uncover 2
    replace3
    frame_bury 0
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups_for_footer@3

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups_for_footer@3:
    // mutable_native_types/case2_with_immutable_struct.py:111-112
    // # TODO: improve this once slicing is supported
    // for i in urange(self.tup_bag.value.count):
    frame_dig 3
    intc_2 // 1
    +
    frame_bury 3
    b test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups_for_header@1

test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups_after_for@4:
    // mutable_native_types/case2_with_immutable_struct.py:114
    // return result
    retsub


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct._check_owner() -> void:
_check_owner:
    b _check_owner_block@0

_check_owner_block@0:
    // mutable_native_types/case2_with_immutable_struct.py:118
    // assert self.tup_bag.value.bootstrapped, "app not bootstrapped"
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc 5 // 34176
    getbit
    assert // app not bootstrapped
    // mutable_native_types/case2_with_immutable_struct.py:119
    // assert self.tup_bag.value.owner == Txn.sender, "sender not authorized"
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    pushint 136 // 136
    pushint 32 // 32
    extract3
    txn Sender
    ==
    assert // sender not authorized
    // mutable_native_types/case2_with_immutable_struct.py:121
    // self.tup_bag.value.app == Global.current_application_id
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    pushint 168 // 168
    intc_0 // 8
    extract3
    btoi
    global CurrentApplicationID
    ==
    // mutable_native_types/case2_with_immutable_struct.py:120-122
    // assert (
    //     self.tup_bag.value.app == Global.current_application_id
    // ), "this error should be impossible"
    assert // this error should be impossible
    retsub


// algopy.arc4.ARC4Contract.approval_program() -> uint64:
approval_program:
    b approval_program_block@0

approval_program_block@0:
    b approval_program_block@1

approval_program_block@1:
    // mutable_native_types/case2_with_immutable_struct.py:34
    // class Case2WithImmStruct(arc4.ARC4Contract):
    txn NumAppArgs
    intc_1 // 0
    !=
    bz approval_program___algopy_default_create@19
    b approval_program_abi_routing@2

approval_program_abi_routing@2:
    // mutable_native_types/case2_with_immutable_struct.py:34
    // class Case2WithImmStruct(arc4.ARC4Contract):
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    bz approval_program_create_NoOp@17
    b approval_program_call_NoOp@3

approval_program_call_NoOp@3:
    // mutable_native_types/case2_with_immutable_struct.py:34
    // class Case2WithImmStruct(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xa67ea2ab // method "create_box()void"
    pushbytes 0x028840ea // method "num_tups()uint64"
    pushbytes 0xf75cee9d // method "add_tup((uint64,uint64))void"
    pushbytes 0x880b5534 // method "get_tup(uint64)(uint64,uint64)"
    pushbytes 0x53030b41 // method "sum()uint64"
    pushbytes 0x7d39df51 // method "add_many_tups((uint64,uint64)[])void"
    pushbytes 0x7a1e7b43 // method "add_fixed_tups((uint64,uint64)[3])void"
    pushbytes 0x3447847f // method "set_a(uint64)void"
    pushbytes 0x2ba64852 // method "set_b(uint64)void"
    pushbytes 0xabc9be78 // method "get_3_tups(uint64)(uint64,uint64)[3]"
    pushbytes 0x73457a19 // method "get_all_tups()(uint64,uint64)[]"
    uncover 11
    match approval_program_create_box_route@4 approval_program_num_tups_route@5 approval_program_add_tup_route@6 approval_program_get_tup_route@7 approval_program_sum_route@8 approval_program_add_many_tups_route@9 approval_program_add_fixed_tups_route@10 approval_program_set_a_route@11 approval_program_set_b_route@12 approval_program_get_3_tups_route@13 approval_program_get_all_tups_route@14
    b approval_program_switch_case_default@15

approval_program_switch_case_default@15:
    b approval_program_switch_case_next@16

approval_program_switch_case_next@16:
    b approval_program_after_if_else@18

approval_program_after_if_else@18:
    b approval_program_after_if_else@22

approval_program_after_if_else@22:
    // mutable_native_types/case2_with_immutable_struct.py:34
    // class Case2WithImmStruct(arc4.ARC4Contract):
    err

approval_program_get_all_tups_route@14:
    // mutable_native_types/case2_with_immutable_struct.py:107
    // @arc4.abimethod()
    callsub get_all_tups
    b approval_program_switch_case_next@16

approval_program_get_3_tups_route@13:
    // mutable_native_types/case2_with_immutable_struct.py:94
    // @arc4.abimethod()
    callsub get_3_tups
    b approval_program_switch_case_next@16

approval_program_set_b_route@12:
    // mutable_native_types/case2_with_immutable_struct.py:87
    // @arc4.abimethod()
    callsub set_b
    b approval_program_switch_case_next@16

approval_program_set_a_route@11:
    // mutable_native_types/case2_with_immutable_struct.py:80
    // @arc4.abimethod()
    callsub set_a
    b approval_program_switch_case_next@16

approval_program_add_fixed_tups_route@10:
    // mutable_native_types/case2_with_immutable_struct.py:75
    // @arc4.abimethod()
    callsub add_fixed_tups
    b approval_program_switch_case_next@16

approval_program_add_many_tups_route@9:
    // mutable_native_types/case2_with_immutable_struct.py:70
    // @arc4.abimethod()
    callsub add_many_tups
    b approval_program_switch_case_next@16

approval_program_sum_route@8:
    // mutable_native_types/case2_with_immutable_struct.py:61
    // @arc4.abimethod()
    callsub sum
    b approval_program_switch_case_next@16

approval_program_get_tup_route@7:
    // mutable_native_types/case2_with_immutable_struct.py:56
    // @arc4.abimethod()
    callsub get_tup
    b approval_program_switch_case_next@16

approval_program_add_tup_route@6:
    // mutable_native_types/case2_with_immutable_struct.py:49
    // @arc4.abimethod()
    callsub add_tup
    b approval_program_switch_case_next@16

approval_program_num_tups_route@5:
    // mutable_native_types/case2_with_immutable_struct.py:45
    // @arc4.abimethod()
    callsub num_tups
    b approval_program_switch_case_next@16

approval_program_create_box_route@4:
    // mutable_native_types/case2_with_immutable_struct.py:38
    // @arc4.abimethod()
    callsub create_box
    b approval_program_switch_case_next@16

approval_program_create_NoOp@17:
    b approval_program_after_if_else@18

approval_program___algopy_default_create@19:
    txn OnCompletion
    intc_1 // NoOp
    ==
    txn ApplicationID
    intc_1 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b approval_program_block@20

approval_program_block@20:
    b approval_program_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__algopy_default_create@21

approval_program_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__algopy_default_create@21:
    intc_2 // 1
    return
