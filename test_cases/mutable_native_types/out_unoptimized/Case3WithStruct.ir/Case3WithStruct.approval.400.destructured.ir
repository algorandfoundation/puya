main test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__init__() -> void:
    block@0: // L35
        return 

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.create_box() -> void:
    block@0: // L38
        let tmp%0#0: bool = (box_create "tup_bag" 4273u)
        (assert tmp%0#0) // box already exists
        let tmp%1#0: account = (txn Sender)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%1#0
        let encoded_value%0#0: Encoded(uint8[32]) = aggregate%as_Encoded(uint8[32])%0#0
        let aggregate%updated_data%0#0: bytes = (replace3 storage_value%0#0 136u encoded_value%0#0)
        let updated_tuple%0#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = aggregate%updated_data%0#0
        (box_put "tup_bag" updated_tuple%0#0)
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%3#0) // check self.tup_bag exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%updated_data%1#0: bytes = (replace3 storage_value%1#0 168u encoded_value%1#0)
        let updated_tuple%1#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = aggregate%updated_data%1#0
        (box_put "tup_bag" updated_tuple%1#0)
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%5#0) // check self.tup_bag exists
        let storage_value%2#0: bytes = aggregate%box_get%4#0
        let aggregate%updated_data%2#0: bytes = (setbit storage_value%2#0 34176u 1u)
        let updated_tuple%2#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = aggregate%updated_data%2#0
        (box_put "tup_bag" updated_tuple%2#0)
        return 

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.num_tups() -> uint64:
    block@0: // L45
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        return values%0#0

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(tup: Encoded(uint64,uint64)) -> Encoded(uint64,uint64):
    block@0: // L49
        let tup%out#0: Encoded(uint64,uint64) = tup#0
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner()
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%0#0: bool = (< values%0#0 8u)
        (assert tmp%0#0) // too many tups
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%3#0) // check self.tup_bag exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%5#0) // check self.tup_bag exists
        let storage_value%2#0: bytes = aggregate%box_get%4#0
        let aggregate%extract%1#0: bytes = (extract3 storage_value%2#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let encoded_value%0#0: Encoded(uint64,uint64) = tup#0
        let aggregate%extract%2#0: bytes = (extract3 storage_value%1#0 8u 128u)
        let aggregate%write_offset%0#0: uint64 = (* values%1#0 16u)
        let aggregate%updated_array%0#0: bytes = (replace3 aggregate%extract%2#0 aggregate%write_offset%0#0 encoded_value%0#0)
        let aggregate%updated_data%0#0: bytes = (replace3 storage_value%1#0 8u aggregate%updated_array%0#0)
        let updated_tuple%0#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = aggregate%updated_data%0#0
        (box_put "tup_bag" updated_tuple%0#0)
        let (aggregate%box_get%6#0: bytes, aggregate%box_get%7#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%7#0) // check self.tup_bag exists
        let storage_value%3#0: bytes = aggregate%box_get%6#0
        let aggregate%extract%3#0: bytes = (extract3 storage_value%3#0 0u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%3#0
        let values%2#0: uint64 = (btoi tuple_item%2#0)
        let tmp%1#0: uint64 = (+ values%2#0 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%updated_data%1#0: bytes = (replace3 storage_value%3#0 0u encoded_value%1#0)
        let updated_tuple%1#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = aggregate%updated_data%1#0
        (box_put "tup_bag" updated_tuple%1#0)
        return tup%out#0

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_tup(index: uint64) -> Encoded(uint64,uint64):
    block@0: // L56
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%0#0: bool = (< index#0 values%0#0)
        (assert tmp%0#0) // index out of bounds
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%3#0) // check self.tup_bag exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%extract%1#0: bytes = (extract3 storage_value%1#0 8u 128u)
        let tuple_item%1#0: Encoded((uint64,uint64)[8]) = aggregate%extract%1#0
        let values%1#0: Encoded((uint64,uint64)[8]) = tuple_item%1#0
        let aggregate%bytes_offset%0#0: uint64 = (* index#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 values%1#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#0
        let values%2#0: Encoded(uint64,uint64) = array_item%0#0
        return values%2#0

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum() -> uint64:
    block@0: // L61
        let total#0: uint64 = 0u
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L64
        let continue_looping%0#0: bool = (< i#0 values%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L65
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%3#0) // check self.tup_bag exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%extract%1#0: bytes = (extract3 storage_value%1#0 8u 128u)
        let tuple_item%1#0: Encoded((uint64,uint64)[8]) = aggregate%extract%1#0
        let values%1#0: Encoded((uint64,uint64)[8]) = tuple_item%1#0
        let aggregate%bytes_offset%0#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 values%1#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#0
        let values%2#0: Encoded(uint64,uint64) = array_item%0#0
        let tup#0: Encoded(uint64,uint64) = values%2#0
        let aggregate%extract%2#0: bytes = (extract3 tup#0 0u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#0
        let values%3#0: uint64 = (btoi tuple_item%2#0)
        let tmp%0#0: uint64 = (+ total#0 values%3#0)
        let total#0: uint64 = tmp%0#0
        let aggregate%extract%3#0: bytes = (extract3 tup#0 8u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%3#0
        let values%4#0: uint64 = (btoi tuple_item%3#0)
        let tmp%1#0: uint64 = (+ total#0 values%4#0)
        let total#0: uint64 = tmp%1#0
        goto block@3
    block@3: // for_footer_L64
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L64
        return total#0

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups(tups: Encoded(len+(uint64,uint64)[])) -> void:
    block@0: // L70
        let array_length%0#0: uint64 = (extract_uint16 tups#0 0u)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L72
        let continue_looping%0#0: bool = (< i#0 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L73
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) tups#0)
        let aggregate%bytes_offset%0#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#0
        let values%0#0: Encoded(uint64,uint64) = array_item%0#0
        let add_tup%0#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(values%0#0)
        goto block@3
    block@3: // for_footer_L72
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L72
        return 

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups(tups: Encoded((uint64,uint64)[3])) -> void:
    block@0: // L75
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L77
        let continue_looping%0#0: bool = (< i#0 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L78
        let aggregate%bytes_offset%0#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 tups#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#0
        let values%0#0: Encoded(uint64,uint64) = array_item%0#0
        let add_tup%0#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(values%0#0)
        goto block@3
    block@3: // for_footer_L77
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L77
        return 

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a(a: uint64) -> void:
    block@0: // L80
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner()
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L83
        let continue_looping%0#0: bool = (< i#0 values%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L84
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%3#0) // check self.tup_bag exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob a#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%extract%1#0: bytes = (extract3 storage_value%1#0 8u 128u)
        let aggregate%bytes_offset%0#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%extract%1#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let aggregate%updated_data%0#0: bytes = (replace3 aggregate%encoded_element%0#0 0u encoded_value%0#0)
        let aggregate%write_offset%0#0: uint64 = (* i#0 16u)
        let aggregate%updated_array%0#0: bytes = (replace3 aggregate%extract%1#0 aggregate%write_offset%0#0 aggregate%updated_data%0#0)
        let aggregate%updated_data%1#0: bytes = (replace3 storage_value%1#0 8u aggregate%updated_array%0#0)
        let updated_tuple%0#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = aggregate%updated_data%1#0
        (box_put "tup_bag" updated_tuple%0#0)
        goto block@3
    block@3: // for_footer_L83
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L83
        return 

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b(b: uint64) -> void:
    block@0: // L86
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner()
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L89
        let continue_looping%0#0: bool = (< i#0 values%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L90
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%3#0) // check self.tup_bag exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob b#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%extract%1#0: bytes = (extract3 storage_value%1#0 8u 128u)
        let aggregate%bytes_offset%0#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%extract%1#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let aggregate%updated_data%0#0: bytes = (replace3 aggregate%encoded_element%0#0 8u encoded_value%0#0)
        let aggregate%write_offset%0#0: uint64 = (* i#0 16u)
        let aggregate%updated_array%0#0: bytes = (replace3 aggregate%extract%1#0 aggregate%write_offset%0#0 aggregate%updated_data%0#0)
        let aggregate%updated_data%1#0: bytes = (replace3 storage_value%1#0 8u aggregate%updated_array%0#0)
        let updated_tuple%0#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = aggregate%updated_data%1#0
        (box_put "tup_bag" updated_tuple%0#0)
        goto block@3
    block@3: // for_footer_L89
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L89
        return 

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_3_tups(start: uint64) -> Encoded((uint64,uint64)[3]):
    block@0: // L92
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%0#0: uint64 = (+ start#0 3u)
        let tmp%1#0: bool = (>= values%0#0 tmp%0#0)
        (assert tmp%1#0) // not enough items
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%3#0) // check self.tup_bag exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%extract%1#0: bytes = (extract3 storage_value%1#0 8u 128u)
        let tuple_item%1#0: Encoded((uint64,uint64)[8]) = aggregate%extract%1#0
        let values%1#0: Encoded((uint64,uint64)[8]) = tuple_item%1#0
        let items#0: Encoded((uint64,uint64)[8]) = values%1#0
        let aggregate%bytes_offset%0#0: uint64 = (* start#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 items#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#0
        let values%2#0: Encoded(uint64,uint64) = array_item%0#0
        let tmp%2#0: uint64 = (+ start#0 1u)
        let aggregate%bytes_offset%1#0: uint64 = (* tmp%2#0 16u)
        let aggregate%encoded_element%1#0: bytes = (extract3 items#0 aggregate%bytes_offset%1#0 16u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64,uint64) = aggregate%encoded_element%1#0
        let values%3#0: Encoded(uint64,uint64) = array_item%1#0
        let tmp%3#0: uint64 = (+ start#0 2u)
        let aggregate%bytes_offset%2#0: uint64 = (* tmp%3#0 16u)
        let aggregate%encoded_element%2#0: bytes = (extract3 items#0 aggregate%bytes_offset%2#0 16u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64,uint64) = aggregate%encoded_element%2#0
        let values%4#0: Encoded(uint64,uint64) = array_item%2#0
        let aggregate%head%0#0: bytes = (concat 0x values%2#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 values%3#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 values%4#0)
        let aggregate%as_Encoded((uint64,uint64)[3])%0#0: Encoded((uint64,uint64)[3]) = aggregate%head%2#0
        let encoded_array%0#0: Encoded((uint64,uint64)[3]) = aggregate%as_Encoded((uint64,uint64)[3])%0#0
        return encoded_array%0#0

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups() -> Encoded(len+(uint64,uint64)[]):
    block@0: // L105
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = aggregate%len_u16%0#0
        let encoded_array%0#0: Encoded(len+(uint64,uint64)[]) = aggregate%as_Encoded(len+(uint64,uint64)[])%0#0
        let result#0: Encoded(len+(uint64,uint64)[]) = encoded_array%0#0
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%0#0 8u 128u)
        let tuple_item%0#0: Encoded((uint64,uint64)[8]) = aggregate%extract%0#0
        let values%0#0: Encoded((uint64,uint64)[8]) = tuple_item%0#0
        let items#0: Encoded((uint64,uint64)[8]) = values%0#0
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%3#0) // check self.tup_bag exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%extract%1#0: bytes = (extract3 storage_value%1#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L110
        let continue_looping%0#0: bool = (< i#0 values%1#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L111
        let aggregate%bytes_offset%0#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 items#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#0
        let values%2#0: Encoded(uint64,uint64) = array_item%0#0
        let aggregate%head%0#0: bytes = (concat 0x values%2#0)
        let aggregate%as_Encoded((uint64,uint64)[])%0#0: Encoded((uint64,uint64)[]) = aggregate%head%0#0
        let tmp%0#0: Encoded((uint64,uint64)[]) = aggregate%as_Encoded((uint64,uint64)[])%0#0
        let concat%0#0: Encoded(len+(uint64,uint64)[]) = (concat result#0 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 result#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = replace%0#0
        let result#0: Encoded(len+(uint64,uint64)[]) = as_Encoded(len+(uint64,uint64)[])%0#0
        goto block@3
    block@3: // for_footer_L110
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L110
        return result#0

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner() -> void:
    block@0: // L114
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%1#0) // check self.tup_bag exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%get_bit%0#0: uint64 = (getbit storage_value%0#0 34176u)
        let tuple_item%0#0: bool = aggregate%get_bit%0#0
        let values%0#0: bool = tuple_item%0#0
        (assert values%0#0) // app not bootstrapped
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%3#0) // check self.tup_bag exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%1#0 136u 32u)
        let tuple_item%1#0: Encoded(uint8[32]) = aggregate%extract%0#0
        let values%1#0: account = tuple_item%1#0
        let tmp%0#0: account = (txn Sender)
        let tmp%1#0: bool = (== values%1#0 tmp%0#0)
        (assert tmp%1#0) // sender not authorized
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "tup_bag")
        (assert aggregate%box_get%5#0) // check self.tup_bag exists
        let storage_value%2#0: bytes = aggregate%box_get%4#0
        let aggregate%extract%1#0: bytes = (extract3 storage_value%2#0 168u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%1#0
        let values%2#0: uint64 = (btoi tuple_item%2#0)
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let tmp%3#0: bool = (== values%2#0 tmp%2#0)
        (assert tmp%3#0) // this error should be impossible
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L34
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@16
    block@2: // abi_routing_L34
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create_box()void" => block@3, method "num_tups()uint64" => block@4, method "add_tup((uint64,uint64))void" => block@5, method "get_tup(uint64)(uint64,uint64)" => block@6, method "sum()uint64" => block@7, method "add_many_tups((uint64,uint64)[])void" => block@8, method "add_fixed_tups((uint64,uint64)[3])void" => block@9, method "set_a(uint64)void" => block@10, method "set_b(uint64)void" => block@11, method "get_3_tups(uint64)(uint64,uint64)[3]" => block@12, method "get_all_tups()(uint64,uint64)[]" => block@13, * => block@14}
    block@3: // create_box_route_L38
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.create_box()
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@23
    block@4: // num_tups_route_L45
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let tmp%11#0: uint64 = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.num_tups()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%11#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%12#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%13#0: bytes = (concat 0x151f7c75 tmp%12#0)
        (log tmp%13#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@23
    block@5: // add_tup_route_L49
        let tmp%14#0: uint64 = (txn OnCompletion)
        let tmp%15#0: bool = (== tmp%14#0 NoOp)
        (assert tmp%15#0) // OnCompletion is not NoOp
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (!= tmp%16#0 0u)
        (assert tmp%17#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let add_tup%0#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(reinterpret_Encoded(uint64,uint64)%0#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@23
    block@6: // get_tup_route_L56
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (== tmp%18#0 NoOp)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (!= tmp%20#0 0u)
        (assert tmp%21#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%22#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%23#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_tup(tmp%22#0)
        let tmp%24#0: bytes = (concat 0x151f7c75 tmp%23#0)
        (log tmp%24#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@23
    block@7: // sum_route_L61
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (== tmp%25#0 NoOp)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        let tmp%28#0: bool = (!= tmp%27#0 0u)
        (assert tmp%28#0) // can only call when not creating
        let tmp%29#0: uint64 = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum()
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%29#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let tmp%30#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#0
        let tmp%31#0: bytes = (concat 0x151f7c75 tmp%30#0)
        (log tmp%31#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@23
    block@8: // add_many_tups_route_L70
        let tmp%32#0: uint64 = (txn OnCompletion)
        let tmp%33#0: bool = (== tmp%32#0 NoOp)
        (assert tmp%33#0) // OnCompletion is not NoOp
        let tmp%34#0: uint64 = (txn ApplicationID)
        let tmp%35#0: bool = (!= tmp%34#0 0u)
        (assert tmp%35#0) // can only call when not creating
        let reinterpret_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups(reinterpret_Encoded(len+(uint64,uint64)[])%0#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@23
    block@9: // add_fixed_tups_route_L75
        let tmp%36#0: uint64 = (txn OnCompletion)
        let tmp%37#0: bool = (== tmp%36#0 NoOp)
        (assert tmp%37#0) // OnCompletion is not NoOp
        let tmp%38#0: uint64 = (txn ApplicationID)
        let tmp%39#0: bool = (!= tmp%38#0 0u)
        (assert tmp%39#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64)[3])%0#0: Encoded((uint64,uint64)[3]) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups(reinterpret_Encoded((uint64,uint64)[3])%0#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@23
    block@10: // set_a_route_L80
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (== tmp%40#0 NoOp)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        let tmp%43#0: bool = (!= tmp%42#0 0u)
        (assert tmp%43#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%44#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a(tmp%44#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@23
    block@11: // set_b_route_L86
        let tmp%45#0: uint64 = (txn OnCompletion)
        let tmp%46#0: bool = (== tmp%45#0 NoOp)
        (assert tmp%46#0) // OnCompletion is not NoOp
        let tmp%47#0: uint64 = (txn ApplicationID)
        let tmp%48#0: bool = (!= tmp%47#0 0u)
        (assert tmp%48#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%49#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b(tmp%49#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@23
    block@12: // get_3_tups_route_L92
        let tmp%50#0: uint64 = (txn OnCompletion)
        let tmp%51#0: bool = (== tmp%50#0 NoOp)
        (assert tmp%51#0) // OnCompletion is not NoOp
        let tmp%52#0: uint64 = (txn ApplicationID)
        let tmp%53#0: bool = (!= tmp%52#0 0u)
        (assert tmp%53#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%54#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        let tmp%55#0: Encoded((uint64,uint64)[3]) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_3_tups(tmp%54#0)
        let tmp%56#0: bytes = (concat 0x151f7c75 tmp%55#0)
        (log tmp%56#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@23
    block@13: // get_all_tups_route_L105
        let tmp%57#0: uint64 = (txn OnCompletion)
        let tmp%58#0: bool = (== tmp%57#0 NoOp)
        (assert tmp%58#0) // OnCompletion is not NoOp
        let tmp%59#0: uint64 = (txn ApplicationID)
        let tmp%60#0: bool = (!= tmp%59#0 0u)
        (assert tmp%60#0) // can only call when not creating
        let tmp%61#0: Encoded(len+(uint64,uint64)[]) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups()
        let tmp%62#0: bytes = (concat 0x151f7c75 tmp%61#0)
        (log tmp%62#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@23
    block@14: // switch_case_default_L34
        goto block@15
    block@15: // switch_case_next_L34
        goto block@22
    block@16: // bare_routing_L34
        let tmp%63#0: uint64 = (txn OnCompletion)
        switch tmp%63#0 {0u => block@17, * => block@20}
    block@17: // __algopy_default_create_L1
        let tmp%64#0: uint64 = (txn ApplicationID)
        let tmp%65#0: bool = (== tmp%64#0 0u)
        (assert tmp%65#0) // can only call when creating
        goto block@18
    block@18: // L1
        goto block@19
    block@19: // after_inlined_test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__algopy_default_create_L1
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@23
    block@20: // switch_case_default_L34
        goto block@21
    block@21: // switch_case_next_L34
        goto block@22
    block@22: // after_if_else_L34
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0
        goto block@23
    block@23: // after_inlined_test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router___L1
        return tmp%0#0