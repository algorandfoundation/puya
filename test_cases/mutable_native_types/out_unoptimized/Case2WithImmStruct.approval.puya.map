{
  "version": 3,
  "sources": [
    "../case2_with_immutable_struct.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCe;AAAA;;;AAAA;AAAP;AAC2B;;AAA3B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACyB;;AAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAIO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAER;;;AAEQ;;;AACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2B;AAA3B;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AAA5B;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAER;;;AAEuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAR;;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAP;AAER;;;AAEgB;AACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAAjB;AAAiB;AAAA;;AAAA;;AAAA;AAAjB;;;AACkB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACG;AAAA;AAAA;AAAA;AAAA;AAAT;;AAAA;AACS;AAAA;AAAA;AAAA;AAAA;AAAT;AAAA;;AAHK;;AAAA;AAAA;AAAA;;;;;AAIT;AAER;;;AAEA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACY;;;;;;;;;;;;;AAEZ;;;;AAEA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACY;;;;;;;;;;;;;AAEZ;;;AAEQ;;;AACgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAAjB;AAAiB;AAAA;;AAAA;;AAAA;AAAjB;;;AACkB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACwB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAFK;;AAAA;AAAA;AAAA;;;;;;AAIjB;;;AAEQ;;;AACgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAAjB;AAAiB;AAAA;;AAAA;;AAAA;AAAjB;;;AACkB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAFK;;AAAA;AAAA;AAAA;;;;;;AAIjB;;;AAEe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;;AAAQ;;AAAR;AAA5B;AAAP;AACQ;AAAA;AAAA;AAAA;AAAA;;AAAA;AAIA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACM;;AAAQ;AAAR;AAAN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACM;;AAAQ;;AAAR;AAAN;AAAA;AAAA;AAAA;AAJD;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAQR;;;AAEiB;;;;AAAA;AAAA;AACD;AAAA;AAAA;AAAA;AAAA;;AAAA;AAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAAjB;AAAiB;AAAA;;AAAA;;AAAA;AAAjB;;;AACY;;AAAA;;;AAAc;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AADK;;AAAA;AAAA;AAAA;;;;;AAET;AAIO;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAA4B;;AAA5B;AAAP;AAEI;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA0B;;AAA1B;AADJ;;AApFR;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAwEK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAbA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA3DL;;;AAAA;AA2DK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AApDL;;;AAAA;AAoDK;;;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA7CL;;;AAAA;AA6CK;;;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAxCL;;;AAwCK;;;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAnCL;;;AAmCK;;;AAAA;;;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AArBL;;;AAAA;AAqBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAdL;;;AAcK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAJL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 8 16 1 128"
    },
    "9": {
      "op": "bytecblock \"tup_bag\" 0x 0x151f7c75"
    },
    "25": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "27": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "30": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__init__",
      "op": "callsub __init__"
    },
    "33": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "36": {
      "op": "return",
      "stack_out": []
    },
    "37": {
      "subroutine": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__init__",
      "params": {},
      "block": "__init___block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "38": {
      "subroutine": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.create_box",
      "params": {},
      "block": "create_box_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "39": {
      "op": "pushint 176 // 176",
      "defined_out": [
        "\"tup_bag\"",
        "176"
      ],
      "stack_out": [
        "\"tup_bag\"",
        "176"
      ]
    },
    "42": {
      "op": "box_create",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "43": {
      "error": "box already exists",
      "op": "assert // box already exists",
      "stack_out": []
    },
    "44": {
      "op": "txn Sender",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "46": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"tup_bag\""
      ]
    },
    "47": {
      "op": "box_get",
      "defined_out": [
        "materialized_values%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "48": {
      "op": "swap",
      "stack_out": [
        "materialized_values%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "49": {
      "op": "cover 2",
      "stack_out": [
        "maybe_value%0#0",
        "materialized_values%0#0",
        "maybe_exists%0#0"
      ]
    },
    "51": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%0#0",
        "materialized_values%0#0"
      ]
    },
    "52": {
      "op": "dup",
      "defined_out": [
        "materialized_values%0#0",
        "materialized_values%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "materialized_values%0#0",
        "materialized_values%0#0 (copy)"
      ]
    },
    "53": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "materialized_values%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "materialized_values%0#0",
        "length%0#0"
      ]
    },
    "54": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "length%0#0",
        "materialized_values%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "materialized_values%0#0",
        "length%0#0",
        "32"
      ]
    },
    "56": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "materialized_values%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "materialized_values%0#0",
        "lengths_equal%0#0"
      ]
    },
    "57": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "maybe_value%0#0",
        "materialized_values%0#0"
      ]
    },
    "58": {
      "op": "swap",
      "stack_out": [
        "materialized_values%0#0",
        "maybe_value%0#0"
      ]
    },
    "59": {
      "op": "pushint 136 // 136",
      "defined_out": [
        "136",
        "materialized_values%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "maybe_value%0#0",
        "136"
      ]
    },
    "62": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "136",
        "materialized_values%0#0"
      ]
    },
    "64": {
      "op": "replace3",
      "defined_out": [
        "updated_data%0#0"
      ],
      "stack_out": [
        "updated_data%0#0"
      ]
    },
    "65": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "updated_data%0#0",
        "\"tup_bag\""
      ]
    },
    "66": {
      "op": "swap",
      "stack_out": [
        "\"tup_bag\"",
        "updated_data%0#0"
      ]
    },
    "67": {
      "op": "box_put",
      "stack_out": []
    },
    "68": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "materialized_values%1#0"
      ],
      "stack_out": [
        "materialized_values%1#0"
      ]
    },
    "70": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "materialized_values%1#0",
        "\"tup_bag\""
      ]
    },
    "71": {
      "op": "box_get",
      "defined_out": [
        "materialized_values%1#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "materialized_values%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "72": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "materialized_values%1#0",
        "maybe_value%1#0"
      ]
    },
    "73": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "materialized_values%1#0"
      ]
    },
    "74": {
      "op": "itob",
      "defined_out": [
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "75": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "76": {
      "op": "pushint 168 // 168",
      "defined_out": [
        "168",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "168"
      ]
    },
    "79": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%1#0",
        "168",
        "val_as_bytes%0#0"
      ]
    },
    "81": {
      "op": "replace3",
      "defined_out": [
        "updated_data%1#0"
      ],
      "stack_out": [
        "updated_data%1#0"
      ]
    },
    "82": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "updated_data%1#0",
        "\"tup_bag\""
      ]
    },
    "83": {
      "op": "swap",
      "stack_out": [
        "\"tup_bag\"",
        "updated_data%1#0"
      ]
    },
    "84": {
      "op": "box_put",
      "stack_out": []
    },
    "85": {
      "retsub": true,
      "op": "retsub"
    },
    "86": {
      "subroutine": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.num_tups",
      "params": {},
      "block": "num_tups_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "87": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "88": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "89": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "90": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "8"
      ]
    },
    "91": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "92": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "93": {
      "retsub": true,
      "op": "retsub"
    },
    "94": {
      "subroutine": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup",
      "params": {
        "tup#0": "bytes"
      },
      "block": "add_tup",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "97": {
      "block": "add_tup_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct._check_owner",
      "op": "callsub _check_owner"
    },
    "100": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "101": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "102": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "103": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "104": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "8"
      ]
    },
    "105": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "106": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "107": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tmp%0#0",
        "8"
      ]
    },
    "108": {
      "op": "<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "109": {
      "error": "too many tups",
      "op": "assert // too many tups",
      "stack_out": []
    },
    "110": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "111": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "112": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "113": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "114": {
      "op": "intc_1 // 8",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "8"
      ]
    },
    "115": {
      "op": "intc 4 // 128",
      "defined_out": [
        "128",
        "8",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "8",
        "128"
      ]
    },
    "117": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ]
    },
    "118": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "\"tup_bag\""
      ]
    },
    "119": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "120": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "maybe_value%2#0"
      ]
    },
    "121": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "122": {
      "op": "intc_1 // 8",
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "maybe_value%2#0",
        "0",
        "8"
      ]
    },
    "123": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "encoded%1#0"
      ]
    },
    "124": {
      "op": "btoi",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "125": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "16"
      ]
    },
    "126": {
      "op": "*",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "write_offset%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "write_offset%0#0"
      ]
    },
    "127": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "tup#0 (copy)",
        "write_offset%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "write_offset%0#0",
        "tup#0 (copy)"
      ]
    },
    "129": {
      "op": "replace3",
      "defined_out": [
        "maybe_value%1#0",
        "updated_array%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "updated_array%0#0"
      ]
    },
    "130": {
      "op": "swap",
      "stack_out": [
        "updated_array%0#0",
        "maybe_value%1#0"
      ]
    },
    "131": {
      "op": "intc_1 // 8",
      "stack_out": [
        "updated_array%0#0",
        "maybe_value%1#0",
        "8"
      ]
    },
    "132": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%1#0",
        "8",
        "updated_array%0#0"
      ]
    },
    "134": {
      "op": "replace3",
      "defined_out": [
        "updated_data%0#0"
      ],
      "stack_out": [
        "updated_data%0#0"
      ]
    },
    "135": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "updated_data%0#0",
        "\"tup_bag\""
      ]
    },
    "136": {
      "op": "swap",
      "stack_out": [
        "\"tup_bag\"",
        "updated_data%0#0"
      ]
    },
    "137": {
      "op": "box_put",
      "stack_out": []
    },
    "138": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "139": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "140": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "141": {
      "op": "dup",
      "defined_out": [
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)"
      ]
    },
    "142": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)",
        "0"
      ]
    },
    "143": {
      "op": "intc_1 // 8",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)",
        "0",
        "8"
      ]
    },
    "144": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "encoded%2#0"
      ]
    },
    "145": {
      "op": "btoi",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "tmp%4#0"
      ]
    },
    "146": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "tmp%4#0",
        "1"
      ]
    },
    "147": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "materialized_values%0#0"
      ]
    },
    "148": {
      "op": "itob",
      "defined_out": [
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "149": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%3#0"
      ]
    },
    "150": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "151": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%3#0",
        "0",
        "val_as_bytes%0#0"
      ]
    },
    "153": {
      "op": "replace3",
      "defined_out": [
        "updated_data%1#0"
      ],
      "stack_out": [
        "updated_data%1#0"
      ]
    },
    "154": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "updated_data%1#0",
        "\"tup_bag\""
      ]
    },
    "155": {
      "op": "swap",
      "stack_out": [
        "\"tup_bag\"",
        "updated_data%1#0"
      ]
    },
    "156": {
      "op": "box_put",
      "stack_out": []
    },
    "157": {
      "retsub": true,
      "op": "retsub"
    },
    "158": {
      "subroutine": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_tup",
      "params": {
        "index#0": "uint64"
      },
      "block": "get_tup",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "161": {
      "block": "get_tup_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "162": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "163": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "164": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "165": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "8"
      ]
    },
    "166": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "167": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "168": {
      "op": "frame_dig -1",
      "defined_out": [
        "index#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "index#0 (copy)"
      ]
    },
    "170": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "171": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": []
    },
    "172": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "173": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "174": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "175": {
      "op": "intc_1 // 8",
      "stack_out": [
        "maybe_value%1#0",
        "8"
      ]
    },
    "176": {
      "op": "intc 4 // 128",
      "defined_out": [
        "128",
        "8",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "8",
        "128"
      ]
    },
    "178": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "179": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%2#0",
        "index#0 (copy)"
      ]
    },
    "181": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "index#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "index#0 (copy)",
        "16"
      ]
    },
    "182": {
      "op": "*",
      "defined_out": [
        "bytes_offset%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "bytes_offset%0#0"
      ]
    },
    "183": {
      "op": "intc_2 // 16",
      "stack_out": [
        "tmp%2#0",
        "bytes_offset%0#0",
        "16"
      ]
    },
    "184": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "encoded_element%0#0"
      ],
      "stack_out": [
        "encoded_element%0#0"
      ]
    },
    "185": {
      "retsub": true,
      "op": "retsub"
    },
    "186": {
      "subroutine": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum",
      "params": {},
      "block": "sum",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "189": {
      "block": "sum_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0"
      ]
    },
    "190": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\"",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "\"tup_bag\""
      ]
    },
    "191": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "192": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "total#0",
        "maybe_value%0#0"
      ]
    },
    "193": {
      "op": "intc_0 // 0",
      "stack_out": [
        "total#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "194": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "maybe_value%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "maybe_value%0#0",
        "0",
        "8"
      ]
    },
    "195": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "encoded%0#0"
      ]
    },
    "196": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0"
      ]
    },
    "197": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "1"
      ]
    },
    "198": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "total#0",
        "tmp%0#0"
      ]
    },
    "199": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0",
        "tmp%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "200": {
      "block": "sum_for_header@1",
      "stack_in": [
        "total#0",
        "tmp%0#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "202": {
      "op": "frame_dig 1",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "204": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "205": {
      "op": "bz sum_after_for@4",
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "208": {
      "block": "sum_for_body@2",
      "stack_in": [
        "total#0",
        "tmp%0#0",
        "i#0"
      ],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "\"tup_bag\""
      ]
    },
    "209": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "210": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "maybe_value%1#0"
      ]
    },
    "211": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "maybe_value%1#0",
        "8"
      ]
    },
    "212": {
      "op": "intc 4 // 128",
      "defined_out": [
        "128",
        "8",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "maybe_value%1#0",
        "8",
        "128"
      ]
    },
    "214": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "215": {
      "op": "frame_dig 2",
      "defined_out": [
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "tmp%1#0",
        "i#0"
      ]
    },
    "217": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "tmp%1#0",
        "i#0",
        "16"
      ]
    },
    "218": {
      "op": "*",
      "defined_out": [
        "bytes_offset%0#0",
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "tmp%1#0",
        "bytes_offset%0#0"
      ]
    },
    "219": {
      "op": "intc_2 // 16",
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "tmp%1#0",
        "bytes_offset%0#0",
        "16"
      ]
    },
    "220": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "i#0",
        "tup#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "tup#0"
      ]
    },
    "221": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "tup#0",
        "tup#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "tup#0",
        "tup#0 (copy)"
      ]
    },
    "222": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "i#0",
        "tup#0",
        "tup#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "tup#0",
        "tup#0 (copy)",
        "0"
      ]
    },
    "223": {
      "op": "intc_1 // 8",
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "tup#0",
        "tup#0 (copy)",
        "0",
        "8"
      ]
    },
    "224": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%1#0",
        "i#0",
        "tup#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "tup#0",
        "encoded%1#0"
      ]
    },
    "225": {
      "op": "btoi",
      "defined_out": [
        "i#0",
        "tmp%2#0",
        "tup#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "tup#0",
        "tmp%2#0"
      ]
    },
    "226": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "tmp%2#0",
        "total#0",
        "tup#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "tup#0",
        "tmp%2#0",
        "total#0"
      ]
    },
    "228": {
      "op": "+",
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "tup#0",
        "total#0"
      ]
    },
    "229": {
      "op": "swap",
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "total#0",
        "tup#0"
      ]
    },
    "230": {
      "op": "intc_1 // 8",
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "total#0",
        "tup#0",
        "8"
      ]
    },
    "231": {
      "op": "dup",
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "total#0",
        "tup#0",
        "8",
        "8"
      ]
    },
    "232": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%2#0",
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "total#0",
        "encoded%2#0"
      ]
    },
    "233": {
      "op": "btoi",
      "defined_out": [
        "i#0",
        "tmp%3#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "total#0",
        "tmp%3#0"
      ]
    },
    "234": {
      "op": "+",
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "total#0"
      ]
    },
    "235": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "237": {
      "block": "sum_for_footer@3",
      "stack_in": [
        "total#0",
        "tmp%0#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "239": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "240": {
      "op": "+",
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "241": {
      "op": "frame_bury 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "243": {
      "op": "b sum_for_header@1"
    },
    "246": {
      "block": "sum_after_for@4",
      "stack_in": [
        "total#0",
        "tmp%0#0",
        "i#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "tmp%0#0",
        "i#0",
        "total#0"
      ]
    },
    "247": {
      "subroutine": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups",
      "params": {
        "tups#0": "bytes"
      },
      "block": "add_many_tups",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "250": {
      "block": "add_many_tups_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "tups#0 (copy)"
      ],
      "stack_out": [
        "tups#0 (copy)"
      ]
    },
    "252": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tups#0 (copy)"
      ],
      "stack_out": [
        "tups#0 (copy)",
        "0"
      ]
    },
    "253": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length%0#0"
      ],
      "stack_out": [
        "array_length%0#0"
      ]
    },
    "254": {
      "op": "intc_0 // 0",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "255": {
      "block": "add_many_tups_for_header@1",
      "stack_in": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "257": {
      "op": "frame_dig 0",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_length%0#0"
      ]
    },
    "259": {
      "op": "<",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "260": {
      "op": "bz add_many_tups_after_for@4",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "263": {
      "block": "add_many_tups_for_body@2",
      "stack_in": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "tups#0 (copy)"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "tups#0 (copy)"
      ]
    },
    "265": {
      "op": "extract 2 0",
      "defined_out": [
        "array_trimmed%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_trimmed%0#0"
      ]
    },
    "268": {
      "op": "frame_dig 1",
      "defined_out": [
        "array_trimmed%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_trimmed%0#0",
        "item_index_internal%0#0"
      ]
    },
    "270": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "array_trimmed%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_trimmed%0#0",
        "item_index_internal%0#0",
        "16"
      ]
    },
    "271": {
      "op": "*",
      "defined_out": [
        "array_trimmed%0#0",
        "bytes_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_trimmed%0#0",
        "bytes_offset%0#0"
      ]
    },
    "272": {
      "op": "intc_2 // 16",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_trimmed%0#0",
        "bytes_offset%0#0",
        "16"
      ]
    },
    "273": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "item_index_internal%0#0",
        "tup#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "tup#0"
      ]
    },
    "274": {
      "callsub": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup",
      "op": "callsub add_tup",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "277": {
      "block": "add_many_tups_for_footer@3",
      "stack_in": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "279": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "280": {
      "op": "+",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "281": {
      "op": "frame_bury 1",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "283": {
      "op": "b add_many_tups_for_header@1"
    },
    "286": {
      "block": "add_many_tups_after_for@4",
      "stack_in": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "287": {
      "subroutine": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups",
      "params": {
        "tups#0": "bytes"
      },
      "block": "add_fixed_tups",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "290": {
      "block": "add_fixed_tups_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0"
      ]
    },
    "291": {
      "block": "add_fixed_tups_for_header@1",
      "stack_in": [
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "293": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "3"
      ]
    },
    "295": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "296": {
      "op": "bz add_fixed_tups_after_for@4",
      "stack_out": [
        "item_index_internal%0#0"
      ]
    },
    "299": {
      "block": "add_fixed_tups_for_body@2",
      "stack_in": [
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "301": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "16"
      ]
    },
    "302": {
      "op": "*",
      "defined_out": [
        "bytes_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "bytes_offset%0#0"
      ]
    },
    "303": {
      "op": "frame_dig -1",
      "defined_out": [
        "bytes_offset%0#0",
        "item_index_internal%0#0",
        "tups#0 (copy)"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "bytes_offset%0#0",
        "tups#0 (copy)"
      ]
    },
    "305": {
      "op": "swap",
      "stack_out": [
        "item_index_internal%0#0",
        "tups#0 (copy)",
        "bytes_offset%0#0"
      ]
    },
    "306": {
      "op": "intc_2 // 16",
      "stack_out": [
        "item_index_internal%0#0",
        "tups#0 (copy)",
        "bytes_offset%0#0",
        "16"
      ]
    },
    "307": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "item_index_internal%0#0",
        "tup#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tup#0"
      ]
    },
    "308": {
      "callsub": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup",
      "op": "callsub add_tup",
      "stack_out": [
        "item_index_internal%0#0"
      ]
    },
    "311": {
      "block": "add_fixed_tups_for_footer@3",
      "stack_in": [
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "313": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "314": {
      "op": "+",
      "stack_out": [
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "315": {
      "op": "frame_bury 0",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0"
      ]
    },
    "317": {
      "op": "b add_fixed_tups_for_header@1"
    },
    "320": {
      "block": "add_fixed_tups_after_for@4",
      "stack_in": [
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "321": {
      "subroutine": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a",
      "params": {
        "a#0": "uint64"
      },
      "block": "set_a",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "324": {
      "block": "set_a_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct._check_owner",
      "op": "callsub _check_owner"
    },
    "327": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "328": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "329": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "330": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "331": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "8"
      ]
    },
    "332": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "333": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "334": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "335": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "336": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0"
      ]
    },
    "337": {
      "block": "set_a_for_header@1",
      "stack_in": [
        "tmp%0#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "339": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "341": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "342": {
      "op": "bz set_a_after_for@4",
      "stack_out": [
        "tmp%0#0",
        "i#0"
      ]
    },
    "345": {
      "block": "set_a_for_body@2",
      "stack_in": [
        "tmp%0#0",
        "i#0"
      ],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "\"tup_bag\""
      ]
    },
    "346": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "347": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "maybe_value%1#0"
      ]
    },
    "348": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "maybe_value%1#0",
        "8"
      ]
    },
    "349": {
      "op": "intc 4 // 128",
      "defined_out": [
        "128",
        "8",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "maybe_value%1#0",
        "8",
        "128"
      ]
    },
    "351": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "352": {
      "op": "frame_dig 1",
      "defined_out": [
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "tmp%1#0",
        "i#0"
      ]
    },
    "354": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "tmp%1#0",
        "i#0 (copy)",
        "i#0 (copy)"
      ]
    },
    "355": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%1#0",
        "i#0 (copy)"
      ]
    },
    "357": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "i#0",
        "i#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%1#0",
        "i#0 (copy)",
        "16"
      ]
    },
    "358": {
      "op": "*",
      "defined_out": [
        "bytes_offset%0#0",
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%1#0",
        "bytes_offset%0#0"
      ]
    },
    "359": {
      "op": "intc_2 // 16",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%1#0",
        "bytes_offset%0#0",
        "16"
      ]
    },
    "360": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "i#0",
        "tup#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tup#0"
      ]
    },
    "361": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tup#0",
        "8"
      ]
    },
    "362": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tup#0",
        "8",
        "8"
      ]
    },
    "363": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%1#0",
        "i#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%1#0"
      ]
    },
    "364": {
      "op": "btoi",
      "defined_out": [
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%2#0"
      ]
    },
    "365": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%2#0",
        "a#0 (copy)"
      ]
    },
    "367": {
      "op": "itob",
      "defined_out": [
        "i#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "368": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "i#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%2#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "369": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%2#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "370": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%2#0",
        "encoded%2#0"
      ]
    },
    "371": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%2#0",
        "tmp%2#0"
      ]
    },
    "372": {
      "op": "itob",
      "defined_out": [
        "encoded%2#0",
        "i#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "373": {
      "op": "concat",
      "defined_out": [
        "encoded%3#0",
        "i#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%3#0"
      ]
    },
    "374": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%3#0",
        "0x"
      ]
    },
    "375": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0",
        "i#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%4#0"
      ]
    },
    "376": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%4#0",
        "\"tup_bag\""
      ]
    },
    "377": {
      "op": "box_get",
      "defined_out": [
        "encoded%4#0",
        "i#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%4#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "378": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%4#0",
        "maybe_value%2#0"
      ]
    },
    "379": {
      "op": "dup",
      "defined_out": [
        "encoded%4#0",
        "i#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%4#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ]
    },
    "380": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%4#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)",
        "8"
      ]
    },
    "381": {
      "op": "intc 4 // 128",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%4#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)",
        "8",
        "128"
      ]
    },
    "383": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%4#0",
        "i#0",
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%4#0",
        "maybe_value%2#0",
        "tmp%3#0"
      ]
    },
    "384": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "encoded%4#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "i#0"
      ]
    },
    "386": {
      "op": "intc_2 // 16",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "encoded%4#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "i#0",
        "16"
      ]
    },
    "387": {
      "op": "*",
      "defined_out": [
        "encoded%4#0",
        "i#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "write_offset%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "encoded%4#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "write_offset%0#0"
      ]
    },
    "388": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "write_offset%0#0",
        "encoded%4#0"
      ]
    },
    "390": {
      "op": "replace3",
      "defined_out": [
        "i#0",
        "maybe_value%2#0",
        "updated_array%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "maybe_value%2#0",
        "updated_array%0#0"
      ]
    },
    "391": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "updated_array%0#0",
        "maybe_value%2#0"
      ]
    },
    "392": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "updated_array%0#0",
        "maybe_value%2#0",
        "8"
      ]
    },
    "393": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "maybe_value%2#0",
        "8",
        "updated_array%0#0"
      ]
    },
    "395": {
      "op": "replace3",
      "defined_out": [
        "i#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "updated_data%0#0"
      ]
    },
    "396": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "updated_data%0#0",
        "\"tup_bag\""
      ]
    },
    "397": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "\"tup_bag\"",
        "updated_data%0#0"
      ]
    },
    "398": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "i#0"
      ]
    },
    "399": {
      "block": "set_a_for_footer@3",
      "stack_in": [
        "tmp%0#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "401": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "402": {
      "op": "+",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "403": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0"
      ]
    },
    "405": {
      "op": "b set_a_for_header@1"
    },
    "408": {
      "block": "set_a_after_for@4",
      "stack_in": [
        "tmp%0#0",
        "i#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "409": {
      "subroutine": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b",
      "params": {
        "b#0": "uint64"
      },
      "block": "set_b",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "412": {
      "block": "set_b_block@0",
      "stack_in": [],
      "callsub": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct._check_owner",
      "op": "callsub _check_owner"
    },
    "415": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "416": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "417": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "418": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "419": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "8"
      ]
    },
    "420": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "421": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "422": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "423": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "424": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0"
      ]
    },
    "425": {
      "block": "set_b_for_header@1",
      "stack_in": [
        "tmp%0#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "427": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "429": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "430": {
      "op": "bz set_b_after_for@4",
      "stack_out": [
        "tmp%0#0",
        "i#0"
      ]
    },
    "433": {
      "block": "set_b_for_body@2",
      "stack_in": [
        "tmp%0#0",
        "i#0"
      ],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "\"tup_bag\""
      ]
    },
    "434": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "435": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "maybe_value%1#0"
      ]
    },
    "436": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "maybe_value%1#0",
        "8"
      ]
    },
    "437": {
      "op": "intc 4 // 128",
      "defined_out": [
        "128",
        "8",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "maybe_value%1#0",
        "8",
        "128"
      ]
    },
    "439": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "440": {
      "op": "frame_dig 1",
      "defined_out": [
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "tmp%1#0",
        "i#0"
      ]
    },
    "442": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "tmp%1#0",
        "i#0 (copy)",
        "i#0 (copy)"
      ]
    },
    "443": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%1#0",
        "i#0 (copy)"
      ]
    },
    "445": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "i#0",
        "i#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%1#0",
        "i#0 (copy)",
        "16"
      ]
    },
    "446": {
      "op": "*",
      "defined_out": [
        "bytes_offset%0#0",
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%1#0",
        "bytes_offset%0#0"
      ]
    },
    "447": {
      "op": "intc_2 // 16",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%1#0",
        "bytes_offset%0#0",
        "16"
      ]
    },
    "448": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "i#0",
        "tup#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tup#0"
      ]
    },
    "449": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "i#0",
        "tup#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tup#0",
        "0"
      ]
    },
    "450": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tup#0",
        "0",
        "8"
      ]
    },
    "451": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%1#0",
        "i#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%1#0"
      ]
    },
    "452": {
      "op": "btoi",
      "defined_out": [
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%2#0"
      ]
    },
    "453": {
      "op": "itob",
      "defined_out": [
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "val_as_bytes%0#0"
      ]
    },
    "454": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "455": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "456": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0",
        "i#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%2#0"
      ]
    },
    "457": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "encoded%2#0",
        "i#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%2#0",
        "b#0 (copy)"
      ]
    },
    "459": {
      "op": "itob",
      "defined_out": [
        "encoded%2#0",
        "i#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "460": {
      "op": "concat",
      "defined_out": [
        "encoded%3#0",
        "i#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%3#0"
      ]
    },
    "461": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%3#0",
        "0x"
      ]
    },
    "462": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0",
        "i#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%4#0"
      ]
    },
    "463": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%4#0",
        "\"tup_bag\""
      ]
    },
    "464": {
      "op": "box_get",
      "defined_out": [
        "encoded%4#0",
        "i#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%4#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "465": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%4#0",
        "maybe_value%2#0"
      ]
    },
    "466": {
      "op": "dup",
      "defined_out": [
        "encoded%4#0",
        "i#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%4#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ]
    },
    "467": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%4#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)",
        "8"
      ]
    },
    "468": {
      "op": "intc 4 // 128",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%4#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)",
        "8",
        "128"
      ]
    },
    "470": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%4#0",
        "i#0",
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "encoded%4#0",
        "maybe_value%2#0",
        "tmp%3#0"
      ]
    },
    "471": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "encoded%4#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "i#0"
      ]
    },
    "473": {
      "op": "intc_2 // 16",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "encoded%4#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "i#0",
        "16"
      ]
    },
    "474": {
      "op": "*",
      "defined_out": [
        "encoded%4#0",
        "i#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "write_offset%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "encoded%4#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "write_offset%0#0"
      ]
    },
    "475": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "write_offset%0#0",
        "encoded%4#0"
      ]
    },
    "477": {
      "op": "replace3",
      "defined_out": [
        "i#0",
        "maybe_value%2#0",
        "updated_array%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "maybe_value%2#0",
        "updated_array%0#0"
      ]
    },
    "478": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "updated_array%0#0",
        "maybe_value%2#0"
      ]
    },
    "479": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "updated_array%0#0",
        "maybe_value%2#0",
        "8"
      ]
    },
    "480": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "maybe_value%2#0",
        "8",
        "updated_array%0#0"
      ]
    },
    "482": {
      "op": "replace3",
      "defined_out": [
        "i#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "updated_data%0#0"
      ]
    },
    "483": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "updated_data%0#0",
        "\"tup_bag\""
      ]
    },
    "484": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "\"tup_bag\"",
        "updated_data%0#0"
      ]
    },
    "485": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "i#0"
      ]
    },
    "486": {
      "block": "set_b_for_footer@3",
      "stack_in": [
        "tmp%0#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "488": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "489": {
      "op": "+",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "490": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0"
      ]
    },
    "492": {
      "op": "b set_b_for_header@1"
    },
    "495": {
      "block": "set_b_after_for@4",
      "stack_in": [
        "tmp%0#0",
        "i#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "496": {
      "subroutine": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_3_tups",
      "params": {
        "start#0": "uint64"
      },
      "block": "get_3_tups",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "499": {
      "block": "get_3_tups_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "500": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "501": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "502": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "503": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "8"
      ]
    },
    "504": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "505": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "506": {
      "op": "frame_dig -1",
      "defined_out": [
        "start#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "start#0 (copy)"
      ]
    },
    "508": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "start#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "start#0 (copy)",
        "3"
      ]
    },
    "510": {
      "op": "+",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "511": {
      "op": ">=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "512": {
      "error": "not enough items",
      "op": "assert // not enough items",
      "stack_out": []
    },
    "513": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "514": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "515": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "516": {
      "op": "intc_1 // 8",
      "stack_out": [
        "maybe_value%1#0",
        "8"
      ]
    },
    "517": {
      "op": "intc 4 // 128",
      "defined_out": [
        "128",
        "8",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "8",
        "128"
      ]
    },
    "519": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "items#0"
      ],
      "stack_out": [
        "items#0"
      ]
    },
    "520": {
      "op": "frame_dig -1",
      "stack_out": [
        "items#0",
        "start#0 (copy)"
      ]
    },
    "522": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "items#0",
        "start#0 (copy)"
      ],
      "stack_out": [
        "items#0",
        "start#0 (copy)",
        "16"
      ]
    },
    "523": {
      "op": "*",
      "defined_out": [
        "bytes_offset%0#0",
        "items#0"
      ],
      "stack_out": [
        "items#0",
        "bytes_offset%0#0"
      ]
    },
    "524": {
      "op": "dig 1",
      "defined_out": [
        "bytes_offset%0#0",
        "items#0",
        "items#0 (copy)"
      ],
      "stack_out": [
        "items#0",
        "bytes_offset%0#0",
        "items#0 (copy)"
      ]
    },
    "526": {
      "op": "swap",
      "stack_out": [
        "items#0",
        "items#0 (copy)",
        "bytes_offset%0#0"
      ]
    },
    "527": {
      "op": "intc_2 // 16",
      "stack_out": [
        "items#0",
        "items#0 (copy)",
        "bytes_offset%0#0",
        "16"
      ]
    },
    "528": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "encoded_element%0#0",
        "items#0"
      ],
      "stack_out": [
        "items#0",
        "encoded_element%0#0"
      ]
    },
    "529": {
      "op": "swap",
      "stack_out": [
        "encoded_element%0#0",
        "items#0"
      ]
    },
    "530": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_element%0#0",
        "items#0",
        "start#0 (copy)"
      ]
    },
    "532": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1",
        "encoded_element%0#0",
        "items#0",
        "start#0 (copy)"
      ],
      "stack_out": [
        "encoded_element%0#0",
        "items#0",
        "start#0 (copy)",
        "1"
      ]
    },
    "533": {
      "op": "+",
      "defined_out": [
        "encoded_element%0#0",
        "items#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_element%0#0",
        "items#0",
        "tmp%4#0"
      ]
    },
    "534": {
      "op": "intc_2 // 16",
      "stack_out": [
        "encoded_element%0#0",
        "items#0",
        "tmp%4#0",
        "16"
      ]
    },
    "535": {
      "op": "*",
      "defined_out": [
        "bytes_offset%1#0",
        "encoded_element%0#0",
        "items#0"
      ],
      "stack_out": [
        "encoded_element%0#0",
        "items#0",
        "bytes_offset%1#0"
      ]
    },
    "536": {
      "op": "dig 1",
      "stack_out": [
        "encoded_element%0#0",
        "items#0",
        "bytes_offset%1#0",
        "items#0 (copy)"
      ]
    },
    "538": {
      "op": "swap",
      "stack_out": [
        "encoded_element%0#0",
        "items#0",
        "items#0 (copy)",
        "bytes_offset%1#0"
      ]
    },
    "539": {
      "op": "intc_2 // 16",
      "stack_out": [
        "encoded_element%0#0",
        "items#0",
        "items#0 (copy)",
        "bytes_offset%1#0",
        "16"
      ]
    },
    "540": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "encoded_element%0#0",
        "encoded_element%1#0",
        "items#0"
      ],
      "stack_out": [
        "encoded_element%0#0",
        "items#0",
        "encoded_element%1#0"
      ]
    },
    "541": {
      "op": "swap",
      "stack_out": [
        "encoded_element%0#0",
        "encoded_element%1#0",
        "items#0"
      ]
    },
    "542": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_element%0#0",
        "encoded_element%1#0",
        "items#0",
        "start#0 (copy)"
      ]
    },
    "544": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "encoded_element%0#0",
        "encoded_element%1#0",
        "items#0",
        "start#0 (copy)"
      ],
      "stack_out": [
        "encoded_element%0#0",
        "encoded_element%1#0",
        "items#0",
        "start#0 (copy)",
        "2"
      ]
    },
    "546": {
      "op": "+",
      "defined_out": [
        "encoded_element%0#0",
        "encoded_element%1#0",
        "items#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_element%0#0",
        "encoded_element%1#0",
        "items#0",
        "tmp%5#0"
      ]
    },
    "547": {
      "op": "intc_2 // 16",
      "stack_out": [
        "encoded_element%0#0",
        "encoded_element%1#0",
        "items#0",
        "tmp%5#0",
        "16"
      ]
    },
    "548": {
      "op": "*",
      "defined_out": [
        "bytes_offset%2#0",
        "encoded_element%0#0",
        "encoded_element%1#0",
        "items#0"
      ],
      "stack_out": [
        "encoded_element%0#0",
        "encoded_element%1#0",
        "items#0",
        "bytes_offset%2#0"
      ]
    },
    "549": {
      "op": "intc_2 // 16",
      "stack_out": [
        "encoded_element%0#0",
        "encoded_element%1#0",
        "items#0",
        "bytes_offset%2#0",
        "16"
      ]
    },
    "550": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "encoded_element%0#0",
        "encoded_element%1#0",
        "encoded_element%2#0"
      ],
      "stack_out": [
        "encoded_element%0#0",
        "encoded_element%1#0",
        "encoded_element%2#0"
      ]
    },
    "551": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "encoded_element%0#0",
        "encoded_element%1#0",
        "encoded_element%2#0"
      ],
      "stack_out": [
        "encoded_element%0#0",
        "encoded_element%1#0",
        "encoded_element%2#0",
        "0x"
      ]
    },
    "552": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_element%1#0",
        "encoded_element%2#0",
        "0x",
        "encoded_element%0#0"
      ]
    },
    "554": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0",
        "encoded_element%1#0",
        "encoded_element%2#0"
      ],
      "stack_out": [
        "encoded_element%1#0",
        "encoded_element%2#0",
        "encoded%1#0"
      ]
    },
    "555": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_element%2#0",
        "encoded%1#0",
        "encoded_element%1#0"
      ]
    },
    "557": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0",
        "encoded_element%2#0"
      ],
      "stack_out": [
        "encoded_element%2#0",
        "encoded%2#0"
      ]
    },
    "558": {
      "op": "swap",
      "stack_out": [
        "encoded%2#0",
        "encoded_element%2#0"
      ]
    },
    "559": {
      "op": "concat",
      "defined_out": [
        "encoded%3#0"
      ],
      "stack_out": [
        "encoded%3#0"
      ]
    },
    "560": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded%3#0",
        "0x"
      ]
    },
    "561": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0"
      ],
      "stack_out": [
        "encoded%4#0"
      ]
    },
    "562": {
      "retsub": true,
      "op": "retsub"
    },
    "563": {
      "subroutine": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups",
      "params": {},
      "block": "get_all_tups",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "566": {
      "block": "get_all_tups_block@0",
      "stack_in": [],
      "op": "pushbytes 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "0x0000"
      ]
    },
    "570": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "0x0000"
      ],
      "stack_out": [
        "0x0000",
        "0x"
      ]
    },
    "571": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "572": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\"",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "\"tup_bag\""
      ]
    },
    "573": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "574": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "result#0",
        "maybe_value%0#0"
      ]
    },
    "575": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "maybe_value%0#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "maybe_value%0#0",
        "8"
      ]
    },
    "576": {
      "op": "intc 4 // 128",
      "defined_out": [
        "128",
        "8",
        "maybe_value%0#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "maybe_value%0#0",
        "8",
        "128"
      ]
    },
    "578": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "items#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0"
      ]
    },
    "579": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "result#0",
        "items#0",
        "\"tup_bag\""
      ]
    },
    "580": {
      "op": "box_get",
      "defined_out": [
        "items#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "581": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "result#0",
        "items#0",
        "maybe_value%1#0"
      ]
    },
    "582": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "items#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "583": {
      "op": "intc_1 // 8",
      "stack_out": [
        "result#0",
        "items#0",
        "maybe_value%1#0",
        "0",
        "8"
      ]
    },
    "584": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0",
        "items#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "encoded%0#0"
      ]
    },
    "585": {
      "op": "btoi",
      "defined_out": [
        "items#0",
        "result#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0"
      ]
    },
    "586": {
      "op": "intc_3 // 1",
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "1"
      ]
    },
    "587": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0"
      ]
    },
    "588": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0",
        "items#0",
        "result#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0"
      ]
    },
    "589": {
      "block": "get_all_tups_for_header@1",
      "stack_in": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "i#0"
      ]
    },
    "591": {
      "op": "frame_dig 2",
      "defined_out": [
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "593": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "594": {
      "op": "bz get_all_tups_after_for@4",
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0"
      ]
    },
    "597": {
      "block": "get_all_tups_for_body@2",
      "stack_in": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "result#0"
      ]
    },
    "599": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "602": {
      "op": "frame_dig 3",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "i#0"
      ]
    },
    "604": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "i#0",
        "16"
      ]
    },
    "605": {
      "op": "*",
      "defined_out": [
        "bytes_offset%0#0",
        "expr_value_trimmed%0#0",
        "i#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "bytes_offset%0#0"
      ]
    },
    "606": {
      "op": "frame_dig 1",
      "defined_out": [
        "bytes_offset%0#0",
        "expr_value_trimmed%0#0",
        "i#0",
        "items#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "bytes_offset%0#0",
        "items#0"
      ]
    },
    "608": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "items#0",
        "bytes_offset%0#0"
      ]
    },
    "609": {
      "op": "intc_2 // 16",
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "items#0",
        "bytes_offset%0#0",
        "16"
      ]
    },
    "610": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "encoded_element%0#0",
        "expr_value_trimmed%0#0",
        "i#0",
        "items#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "encoded_element%0#0"
      ]
    },
    "611": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "encoded_element%0#0",
        "expr_value_trimmed%0#0",
        "i#0",
        "items#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "encoded_element%0#0",
        "0x"
      ]
    },
    "612": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "0x",
        "encoded_element%0#0"
      ]
    },
    "613": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0",
        "expr_value_trimmed%0#0",
        "i#0",
        "items#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "encoded%1#0"
      ]
    },
    "614": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "encoded%1#0",
        "0x"
      ]
    },
    "615": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0",
        "expr_value_trimmed%0#0",
        "i#0",
        "items#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "encoded%2#0"
      ]
    },
    "616": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "i#0",
        "items#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "concatenated%0#0"
      ]
    },
    "617": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "i#0",
        "items#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "618": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0",
        "i#0",
        "items#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "619": {
      "op": "intc_2 // 16",
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "16"
      ]
    },
    "620": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "i#0",
        "items#0",
        "len_%0#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "621": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "i#0",
        "items#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "622": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "i#0",
        "items#0",
        "len_16_bit%0#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "625": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "626": {
      "op": "concat",
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "result#0"
      ]
    },
    "627": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0",
        "items#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0"
      ]
    },
    "629": {
      "block": "get_all_tups_for_footer@3",
      "stack_in": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "i#0"
      ]
    },
    "631": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "632": {
      "op": "+",
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "i#0"
      ]
    },
    "633": {
      "op": "frame_bury 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0"
      ]
    },
    "635": {
      "op": "b get_all_tups_for_header@1"
    },
    "638": {
      "block": "get_all_tups_after_for@4",
      "stack_in": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "items#0",
        "tmp%1#0",
        "i#0",
        "result#0"
      ]
    },
    "639": {
      "subroutine": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct._check_owner",
      "params": {},
      "block": "_check_owner_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "640": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "641": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "642": {
      "op": "pushint 136 // 136",
      "defined_out": [
        "136",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "136"
      ]
    },
    "645": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "136",
        "32",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "136",
        "32"
      ]
    },
    "647": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "648": {
      "op": "txn Sender",
      "defined_out": [
        "encoded%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded%0#0",
        "tmp%0#0"
      ]
    },
    "650": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "651": {
      "error": "sender not authorized",
      "op": "assert // sender not authorized",
      "stack_out": []
    },
    "652": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "653": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "654": {
      "error": "check self.tup_bag exists",
      "op": "assert // check self.tup_bag exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "655": {
      "op": "pushint 168 // 168",
      "defined_out": [
        "168",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "168"
      ]
    },
    "658": {
      "op": "intc_1 // 8",
      "defined_out": [
        "168",
        "8",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "168",
        "8"
      ]
    },
    "659": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded%1#0"
      ],
      "stack_out": [
        "encoded%1#0"
      ]
    },
    "660": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "661": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "663": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "664": {
      "error": "this error should be impossible",
      "op": "assert // this error should be impossible",
      "stack_out": []
    },
    "665": {
      "retsub": true,
      "op": "retsub"
    },
    "666": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "668": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "669": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "670": {
      "op": "bz approval_program_bare_routing@16",
      "stack_out": []
    },
    "673": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "676": {
      "op": "pushbytes 0xa67ea2ab // method \"create_box()void\"",
      "defined_out": [
        "Method(create_box()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create_box()void)"
      ]
    },
    "682": {
      "op": "pushbytes 0x028840ea // method \"num_tups()uint64\"",
      "defined_out": [
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)"
      ]
    },
    "688": {
      "op": "pushbytes 0xf75cee9d // method \"add_tup((uint64,uint64))void\"",
      "defined_out": [
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)"
      ]
    },
    "694": {
      "op": "pushbytes 0x880b5534 // method \"get_tup(uint64)(uint64,uint64)\"",
      "defined_out": [
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(num_tups()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))"
      ]
    },
    "700": {
      "op": "pushbytes 0x53030b41 // method \"sum()uint64\"",
      "defined_out": [
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(num_tups()uint64)",
        "Method(sum()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(sum()uint64)"
      ]
    },
    "706": {
      "op": "pushbytes 0x7d39df51 // method \"add_many_tups((uint64,uint64)[])void\"",
      "defined_out": [
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(num_tups()uint64)",
        "Method(sum()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(sum()uint64)",
        "Method(add_many_tups((uint64,uint64)[])void)"
      ]
    },
    "712": {
      "op": "pushbytes 0x7a1e7b43 // method \"add_fixed_tups((uint64,uint64)[3])void\"",
      "defined_out": [
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(num_tups()uint64)",
        "Method(sum()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(sum()uint64)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_fixed_tups((uint64,uint64)[3])void)"
      ]
    },
    "718": {
      "op": "pushbytes 0x3447847f // method \"set_a(uint64)void\"",
      "defined_out": [
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(num_tups()uint64)",
        "Method(set_a(uint64)void)",
        "Method(sum()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(sum()uint64)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(set_a(uint64)void)"
      ]
    },
    "724": {
      "op": "pushbytes 0x2ba64852 // method \"set_b(uint64)void\"",
      "defined_out": [
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(num_tups()uint64)",
        "Method(set_a(uint64)void)",
        "Method(set_b(uint64)void)",
        "Method(sum()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(sum()uint64)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(set_a(uint64)void)",
        "Method(set_b(uint64)void)"
      ]
    },
    "730": {
      "op": "pushbytes 0xabc9be78 // method \"get_3_tups(uint64)(uint64,uint64)[3]\"",
      "defined_out": [
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(get_3_tups(uint64)(uint64,uint64)[3])",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(num_tups()uint64)",
        "Method(set_a(uint64)void)",
        "Method(set_b(uint64)void)",
        "Method(sum()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(sum()uint64)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(set_a(uint64)void)",
        "Method(set_b(uint64)void)",
        "Method(get_3_tups(uint64)(uint64,uint64)[3])"
      ]
    },
    "736": {
      "op": "pushbytes 0x73457a19 // method \"get_all_tups()(uint64,uint64)[]\"",
      "defined_out": [
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(get_3_tups(uint64)(uint64,uint64)[3])",
        "Method(get_all_tups()(uint64,uint64)[])",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(num_tups()uint64)",
        "Method(set_a(uint64)void)",
        "Method(set_b(uint64)void)",
        "Method(sum()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(sum()uint64)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(set_a(uint64)void)",
        "Method(set_b(uint64)void)",
        "Method(get_3_tups(uint64)(uint64,uint64)[3])",
        "Method(get_all_tups()(uint64,uint64)[])"
      ]
    },
    "742": {
      "op": "uncover 11",
      "stack_out": [
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(sum()uint64)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(set_a(uint64)void)",
        "Method(set_b(uint64)void)",
        "Method(get_3_tups(uint64)(uint64,uint64)[3])",
        "Method(get_all_tups()(uint64,uint64)[])",
        "tmp%2#0"
      ]
    },
    "744": {
      "op": "match approval_program_create_box_route@3 approval_program_num_tups_route@4 approval_program_add_tup_route@5 approval_program_get_tup_route@6 approval_program_sum_route@7 approval_program_add_many_tups_route@8 approval_program_add_fixed_tups_route@9 approval_program_set_a_route@10 approval_program_set_b_route@11 approval_program_get_3_tups_route@12 approval_program_get_all_tups_route@13",
      "stack_out": []
    },
    "768": {
      "block": "approval_program_after_if_else@22",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "769": {
      "block": "approval_program_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@23",
      "stack_in": [
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "770": {
      "block": "approval_program_get_all_tups_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "772": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "NoOp"
      ]
    },
    "773": {
      "op": "==",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "774": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "775": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "777": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "0"
      ]
    },
    "778": {
      "op": "!=",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "779": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "780": {
      "callsub": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_all_tups",
      "op": "callsub get_all_tups",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "783": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "0x151f7c75"
      ]
    },
    "784": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%57#0"
      ]
    },
    "785": {
      "op": "concat",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "786": {
      "op": "log",
      "stack_out": []
    },
    "787": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "788": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@23"
    },
    "791": {
      "block": "approval_program_get_3_tups_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "793": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "NoOp"
      ]
    },
    "794": {
      "op": "==",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "795": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "796": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "798": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "0"
      ]
    },
    "799": {
      "op": "!=",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "800": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "801": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "804": {
      "op": "btoi",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "805": {
      "callsub": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_3_tups",
      "op": "callsub get_3_tups",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "808": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "0x151f7c75"
      ]
    },
    "809": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%51#0"
      ]
    },
    "810": {
      "op": "concat",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "811": {
      "op": "log",
      "stack_out": []
    },
    "812": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "813": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@23"
    },
    "816": {
      "block": "approval_program_set_b_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "818": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "NoOp"
      ]
    },
    "819": {
      "op": "==",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "820": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "821": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "823": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "0"
      ]
    },
    "824": {
      "op": "!=",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "825": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "826": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "829": {
      "op": "btoi",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "830": {
      "callsub": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b",
      "op": "callsub set_b",
      "stack_out": []
    },
    "833": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "834": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@23"
    },
    "837": {
      "block": "approval_program_set_a_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "839": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "NoOp"
      ]
    },
    "840": {
      "op": "==",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "841": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "842": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "844": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "0"
      ]
    },
    "845": {
      "op": "!=",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "846": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "847": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "850": {
      "op": "btoi",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "851": {
      "callsub": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a",
      "op": "callsub set_a",
      "stack_out": []
    },
    "854": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "855": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@23"
    },
    "858": {
      "block": "approval_program_add_fixed_tups_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "860": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "NoOp"
      ]
    },
    "861": {
      "op": "==",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "862": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "863": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "865": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "0"
      ]
    },
    "866": {
      "op": "!=",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "867": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "868": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint64)[3])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64)[3])%0#0"
      ]
    },
    "871": {
      "callsub": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups",
      "op": "callsub add_fixed_tups",
      "stack_out": []
    },
    "874": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "875": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@23"
    },
    "878": {
      "block": "approval_program_add_many_tups_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "880": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "NoOp"
      ]
    },
    "881": {
      "op": "==",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "882": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "883": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "885": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "0"
      ]
    },
    "886": {
      "op": "!=",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "887": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "888": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint64)[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint64)[])%0#0"
      ]
    },
    "891": {
      "callsub": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups",
      "op": "callsub add_many_tups",
      "stack_out": []
    },
    "894": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "895": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@23"
    },
    "898": {
      "block": "approval_program_sum_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "900": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "NoOp"
      ]
    },
    "901": {
      "op": "==",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "902": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "903": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "905": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0"
      ]
    },
    "906": {
      "op": "!=",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "907": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "908": {
      "callsub": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum",
      "op": "callsub sum",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "911": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "912": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "913": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "914": {
      "op": "concat",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "915": {
      "op": "log",
      "stack_out": []
    },
    "916": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "917": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@23"
    },
    "920": {
      "block": "approval_program_get_tup_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "922": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "NoOp"
      ]
    },
    "923": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "924": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "925": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "927": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0"
      ]
    },
    "928": {
      "op": "!=",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "929": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "930": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "933": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "934": {
      "callsub": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_tup",
      "op": "callsub get_tup",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "937": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "938": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%21#0"
      ]
    },
    "939": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "940": {
      "op": "log",
      "stack_out": []
    },
    "941": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "942": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@23"
    },
    "945": {
      "block": "approval_program_add_tup_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "947": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "NoOp"
      ]
    },
    "948": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "949": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "950": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "952": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "0"
      ]
    },
    "953": {
      "op": "!=",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "954": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "955": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint64))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64))%0#0"
      ]
    },
    "958": {
      "callsub": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup",
      "op": "callsub add_tup",
      "stack_out": []
    },
    "961": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "962": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@23"
    },
    "965": {
      "block": "approval_program_num_tups_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "967": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "968": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "969": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "970": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "972": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "973": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "974": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "975": {
      "callsub": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.num_tups",
      "op": "callsub num_tups",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "978": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "979": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "980": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "981": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "982": {
      "op": "log",
      "stack_out": []
    },
    "983": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "984": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@23"
    },
    "987": {
      "block": "approval_program_create_box_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "989": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "990": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "991": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "992": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "994": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "995": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "996": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "997": {
      "callsub": "test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.create_box",
      "op": "callsub create_box"
    },
    "1000": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1001": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@23"
    },
    "1004": {
      "block": "approval_program_bare_routing@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "1006": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "0"
      ]
    },
    "1007": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%59#0"
      ]
    },
    "1008": {
      "op": "match approval_program___algopy_default_create@17",
      "stack_out": []
    },
    "1012": {
      "block": "approval_program_switch_case_next@21",
      "stack_in": [],
      "op": "b approval_program_after_if_else@22"
    },
    "1015": {
      "block": "approval_program___algopy_default_create@17",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "1017": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "0"
      ]
    },
    "1018": {
      "op": "==",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "1019": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1020": {
      "block": "approval_program_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__algopy_default_create@19",
      "stack_in": [],
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1021": {
      "op": "b approval_program_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@23"
    }
  }
}