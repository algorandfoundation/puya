main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@13
    block@2: // abi_routing_L102
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%4#0 ? block@3 : block@12
    block@3: // call_NoOp_L102
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test_fixed_struct()void" => block@4, method "test_nested_struct()void" => block@5, method "test_dynamic_struct()void" => block@6, method "test_fixed_array()void" => block@7, method "test_native_array()void" => block@8, method "test_log()void" => block@9, * => block@12}
    block@4: // test_fixed_struct_route_L103
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct[routing]()
        goto block@12
    block@5: // test_nested_struct_route_L122
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct[routing]()
        goto block@12
    block@6: // test_dynamic_struct_route_L149
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct[routing]()
        goto block@12
    block@7: // test_fixed_array_route_L188
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array[routing]()
        goto block@12
    block@8: // test_native_array_route_L214
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array[routing]()
        goto block@12
    block@9: // test_log_route_L242
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_log[routing]()
        goto block@12
    block@12: // after_if_else_L102
        fail
    block@13: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        test_cases.mutable_native_types.abi_call.TestAbiCall.__algopy_default_create()
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct[routing]() -> void:
    block@0: // L103
        itxn_begin
        let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = CyADAQAQJgYEFR98dQxmaXhlZF9zdHJ1Y3QNbmVzdGVkX3N0cnVjdA5keW5hbWljX3N0cnVjdAlmaXhlZF9hcnIKbmF0aXZlX2FycjEbQQBygAQkN408NhoAjgEAXDEZFEQxGESCCwQRsZuVBNKLlkoE6hhlXwS7O/23BEbsFKAEm00JJgRPDetQBFlmSrYEEl0TdgSBjkpiBJu+EDI2GgCOCwASAB8AKQA3AEEASABSAGEAbACCAI0AMRmBBRIxGBBDMRkUMRgUEEM2GgFJFSQSRClMZyJDIyllRChMULAiQzYaAUkVgRgSRCpMZyJDIyplRChMULAiQys2GgFnIkMjK2VEKExQsCJDNhoBSRWBMBJEJwRMZyJDIycEZUQoTFCwIkM2GgFJI1kkC4ECCEsBFRJEJwVMZyJDIycFZUQoTFCwIkMjKWVEsCMqZUSwIytlRLAjJwRlRLAjJwVlRLAiQw==
        let inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0: bytes = 
        let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = C4EBQw==
        let inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0: bytes = 
        let inner_txn_params%0%%param_ExtraProgramPages_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0: uint64 = 5u
        let inner_txn_params%0%%param_GlobalNumUint_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%param_LocalNumUint_idx_0#0: uint64 = 0u
        ((itxn_field LocalNumUint) inner_txn_params%0%%param_LocalNumUint_idx_0#0)
        ((itxn_field LocalNumByteSlice) inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0)
        ((itxn_field GlobalNumUint) inner_txn_params%0%%param_GlobalNumUint_idx_0#0)
        ((itxn_field GlobalNumByteSlice) inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0)
        ((itxn_field ExtraProgramPages) inner_txn_params%0%%param_ExtraProgramPages_idx_0#0)
        ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
        ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0)
        ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
        ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 1u)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#0 2u)
        let fixed_struct#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%1#0, tmp%3#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_arg((uint64,uint64))void")
        ((itxn_field ApplicationArgs) fixed_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_ret()(uint64,uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: Encoded(uint64,uint64) = ((extract 4 0) awst_tmp%0#0)
        let len%0#0: uint64 = (len res#0)
        let eq%0#0: bool = (== len%0#0 16u)
        (assert eq%0#0) // invalid number of bytes for (uint64,uint64)
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // application log value is not the result of an ABI return
        let tmp%8#0: bool = (== res#0 fixed_struct#0)
        (assert tmp%8#0) // should be the same
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let tmp%12#0: uint64 = (+ tmp%11#0 3u)
        let fixed_struct#1: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%10#0, tmp%12#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_arg((uint64,uint64))void")
        ((itxn_field ApplicationArgs) fixed_struct#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_ret()(uint64,uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#1: Encoded(uint64,uint64) = ((extract 4 0) awst_tmp%1#0)
        let len%1#0: uint64 = (len res#1)
        let eq%1#0: bool = (== len%1#0 16u)
        (assert eq%1#0) // invalid number of bytes for (uint64,uint64)
        let tmp%15#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%16#0: bool = (== tmp%15#0 0x151f7c75)
        (assert tmp%16#0) // application log value is not the result of an ABI return
        let tmp%17#0: bool = (== res#1 fixed_struct#1)
        (assert tmp%17#0) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct[routing]() -> void:
    block@0: // L122
        itxn_begin
        let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = CyADAQAQJgYEFR98dQxmaXhlZF9zdHJ1Y3QNbmVzdGVkX3N0cnVjdA5keW5hbWljX3N0cnVjdAlmaXhlZF9hcnIKbmF0aXZlX2FycjEbQQBygAQkN408NhoAjgEAXDEZFEQxGESCCwQRsZuVBNKLlkoE6hhlXwS7O/23BEbsFKAEm00JJgRPDetQBFlmSrYEEl0TdgSBjkpiBJu+EDI2GgCOCwASAB8AKQA3AEEASABSAGEAbACCAI0AMRmBBRIxGBBDMRkUMRgUEEM2GgFJFSQSRClMZyJDIyllRChMULAiQzYaAUkVgRgSRCpMZyJDIyplRChMULAiQys2GgFnIkMjK2VEKExQsCJDNhoBSRWBMBJEJwRMZyJDIycEZUQoTFCwIkM2GgFJI1kkC4ECCEsBFRJEJwVMZyJDIycFZUQoTFCwIkMjKWVEsCMqZUSwIytlRLAjJwRlRLAjJwVlRLAiQw==
        let inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0: bytes = 
        let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = C4EBQw==
        let inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0: bytes = 
        let inner_txn_params%0%%param_ExtraProgramPages_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0: uint64 = 5u
        let inner_txn_params%0%%param_GlobalNumUint_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%param_LocalNumUint_idx_0#0: uint64 = 0u
        ((itxn_field LocalNumUint) inner_txn_params%0%%param_LocalNumUint_idx_0#0)
        ((itxn_field LocalNumByteSlice) inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0)
        ((itxn_field GlobalNumUint) inner_txn_params%0%%param_GlobalNumUint_idx_0#0)
        ((itxn_field GlobalNumByteSlice) inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0)
        ((itxn_field ExtraProgramPages) inner_txn_params%0%%param_ExtraProgramPages_idx_0#0)
        ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
        ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0)
        ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
        ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 1u)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#0 2u)
        let tmp%4#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%1#0, tmp%3#0)
        let tmp%5#0: uint64 = (txn NumAppArgs)
        let tmp%6#0: uint64 = (+ tmp%5#0 3u)
        let nested_struct#0: Encoded((uint64,uint64),uint64) = bytes_encode<((uint64,uint64),uint64)>(tmp%4#0, tmp%6#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_arg(((uint64,uint64),uint64))void")
        ((itxn_field ApplicationArgs) nested_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_ret()((uint64,uint64),uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: Encoded((uint64,uint64),uint64) = ((extract 4 0) awst_tmp%0#0)
        let len%0#0: uint64 = (len res#0)
        let eq%0#0: bool = (== len%0#0 24u)
        (assert eq%0#0) // invalid number of bytes for ((uint64,uint64),uint64)
        let tmp%9#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
        (assert tmp%10#0) // application log value is not the result of an ABI return
        let tmp%11#0: bool = (== res#0 nested_struct#0)
        (assert tmp%11#0) // should be the same
        let tmp%12#0: uint64 = (txn NumAppArgs)
        let tmp%13#0: uint64 = (+ tmp%12#0 2u)
        let tmp%14#0: uint64 = (txn NumAppArgs)
        let tmp%15#0: uint64 = (+ tmp%14#0 3u)
        let tmp%16#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%13#0, tmp%15#0)
        let tmp%17#0: uint64 = (txn NumAppArgs)
        let tmp%18#0: uint64 = (+ tmp%17#0 4u)
        let nested_struct#1: Encoded((uint64,uint64),uint64) = bytes_encode<((uint64,uint64),uint64)>(tmp%16#0, tmp%18#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_arg(((uint64,uint64),uint64))void")
        ((itxn_field ApplicationArgs) nested_struct#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_ret()((uint64,uint64),uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#1: Encoded((uint64,uint64),uint64) = ((extract 4 0) awst_tmp%1#0)
        let len%1#0: uint64 = (len res#1)
        let eq%1#0: bool = (== len%1#0 24u)
        (assert eq%1#0) // invalid number of bytes for ((uint64,uint64),uint64)
        let tmp%21#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%22#0: bool = (== tmp%21#0 0x151f7c75)
        (assert tmp%22#0) // application log value is not the result of an ABI return
        let tmp%23#0: bool = (== res#1 nested_struct#1)
        (assert tmp%23#0) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct[routing]() -> void:
    block@0: // L149
        itxn_begin
        let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = CyADAQAQJgYEFR98dQxmaXhlZF9zdHJ1Y3QNbmVzdGVkX3N0cnVjdA5keW5hbWljX3N0cnVjdAlmaXhlZF9hcnIKbmF0aXZlX2FycjEbQQBygAQkN408NhoAjgEAXDEZFEQxGESCCwQRsZuVBNKLlkoE6hhlXwS7O/23BEbsFKAEm00JJgRPDetQBFlmSrYEEl0TdgSBjkpiBJu+EDI2GgCOCwASAB8AKQA3AEEASABSAGEAbACCAI0AMRmBBRIxGBBDMRkUMRgUEEM2GgFJFSQSRClMZyJDIyllRChMULAiQzYaAUkVgRgSRCpMZyJDIyplRChMULAiQys2GgFnIkMjK2VEKExQsCJDNhoBSRWBMBJEJwRMZyJDIycEZUQoTFCwIkM2GgFJI1kkC4ECCEsBFRJEJwVMZyJDIycFZUQoTFCwIkMjKWVEsCMqZUSwIytlRLAjJwRlRLAjJwVlRLAiQw==
        let inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0: bytes = 
        let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = C4EBQw==
        let inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0: bytes = 
        let inner_txn_params%0%%param_ExtraProgramPages_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0: uint64 = 5u
        let inner_txn_params%0%%param_GlobalNumUint_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%param_LocalNumUint_idx_0#0: uint64 = 0u
        ((itxn_field LocalNumUint) inner_txn_params%0%%param_LocalNumUint_idx_0#0)
        ((itxn_field LocalNumByteSlice) inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0)
        ((itxn_field GlobalNumUint) inner_txn_params%0%%param_GlobalNumUint_idx_0#0)
        ((itxn_field GlobalNumByteSlice) inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0)
        ((itxn_field ExtraProgramPages) inner_txn_params%0%%param_ExtraProgramPages_idx_0#0)
        ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
        ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0)
        ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
        ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 1u)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#0 2u)
        let fixed_struct#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%1#0, tmp%3#0)
        let tmp%5#0: uint64 = (txn NumAppArgs)
        let tmp%6#0: uint64 = (+ tmp%5#0 1u)
        let tmp%7#0: uint64 = (txn NumAppArgs)
        let tmp%8#0: uint64 = (+ tmp%7#0 2u)
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#0: uint64 = (+ tmp%9#0 3u)
        let tmp%11#0: bytes = (itob tmp%10#0)
        let encoded_array%0#0: Encoded(len+(uint64,uint64)[]) = bytes_encode<(len+(uint64,uint64)[])>(fixed_struct#0)
        let dynamic_struct#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = bytes_encode<(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))>(tmp%6#0, tmp%8#0, tmp%11#0, "Hello", encoded_array%0#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void")
        ((itxn_field ApplicationArgs) dynamic_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = ((extract 4 0) awst_tmp%0#0)
        let tmp%14#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%15#0: bool = (== tmp%14#0 0x151f7c75)
        (assert tmp%15#0) // application log value is not the result of an ABI return
        let tmp%16#0: bool = (== res#0 dynamic_struct#0)
        (assert tmp%16#0) // should be the same
        let tmp%17#0: uint64 = (txn NumAppArgs)
        let tmp%18#0: uint64 = (+ tmp%17#0 2u)
        let tmp%19#0: uint64 = (txn NumAppArgs)
        let tmp%20#0: uint64 = (+ tmp%19#0 3u)
        let tmp%21#0: uint64 = (txn NumAppArgs)
        let tmp%22#0: uint64 = (+ tmp%21#0 4u)
        let tmp%23#0: bytes = (itob tmp%22#0)
        let dynamic_struct#1: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = bytes_encode<(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))>(tmp%18#0, tmp%20#0, tmp%23#0, "Hello", encoded_array%0#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void")
        ((itxn_field ApplicationArgs) dynamic_struct#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#1: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = ((extract 4 0) awst_tmp%1#0)
        let tmp%26#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%27#0: bool = (== tmp%26#0 0x151f7c75)
        (assert tmp%27#0) // application log value is not the result of an ABI return
        let tmp%28#0: bool = (== res#1 dynamic_struct#1)
        (assert tmp%28#0) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array[routing]() -> void:
    block@0: // L188
        itxn_begin
        let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = CyADAQAQJgYEFR98dQxmaXhlZF9zdHJ1Y3QNbmVzdGVkX3N0cnVjdA5keW5hbWljX3N0cnVjdAlmaXhlZF9hcnIKbmF0aXZlX2FycjEbQQBygAQkN408NhoAjgEAXDEZFEQxGESCCwQRsZuVBNKLlkoE6hhlXwS7O/23BEbsFKAEm00JJgRPDetQBFlmSrYEEl0TdgSBjkpiBJu+EDI2GgCOCwASAB8AKQA3AEEASABSAGEAbACCAI0AMRmBBRIxGBBDMRkUMRgUEEM2GgFJFSQSRClMZyJDIyllRChMULAiQzYaAUkVgRgSRCpMZyJDIyplRChMULAiQys2GgFnIkMjK2VEKExQsCJDNhoBSRWBMBJEJwRMZyJDIycEZUQoTFCwIkM2GgFJI1kkC4ECCEsBFRJEJwVMZyJDIycFZUQoTFCwIkMjKWVEsCMqZUSwIytlRLAjJwRlRLAjJwVlRLAiQw==
        let inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0: bytes = 
        let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = C4EBQw==
        let inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0: bytes = 
        let inner_txn_params%0%%param_ExtraProgramPages_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0: uint64 = 5u
        let inner_txn_params%0%%param_GlobalNumUint_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%param_LocalNumUint_idx_0#0: uint64 = 0u
        ((itxn_field LocalNumUint) inner_txn_params%0%%param_LocalNumUint_idx_0#0)
        ((itxn_field LocalNumByteSlice) inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0)
        ((itxn_field GlobalNumUint) inner_txn_params%0%%param_GlobalNumUint_idx_0#0)
        ((itxn_field GlobalNumByteSlice) inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0)
        ((itxn_field ExtraProgramPages) inner_txn_params%0%%param_ExtraProgramPages_idx_0#0)
        ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
        ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0)
        ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
        ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 1u)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#0 2u)
        let fixed_struct#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%1#0, tmp%3#0)
        let fixed_arr#0: Encoded((uint64,uint64)[3]) = bytes_encode<(uint64,uint64)[3]>(fixed_struct#0, fixed_struct#0, fixed_struct#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_arg((uint64,uint64)[3])void")
        ((itxn_field ApplicationArgs) fixed_arr#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_ret()(uint64,uint64)[3]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: Encoded((uint64,uint64)[3]) = ((extract 4 0) awst_tmp%0#0)
        let len%0#0: uint64 = (len res#0)
        let eq%0#0: bool = (== len%0#0 48u)
        (assert eq%0#0) // invalid number of bytes for (uint64,uint64)[3]
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // application log value is not the result of an ABI return
        let tmp%8#0: bool = (== res#0 fixed_arr#0)
        (assert tmp%8#0) // should be the same
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let tmp%12#0: uint64 = (+ tmp%11#0 3u)
        let fixed_struct#1: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%10#0, tmp%12#0)
        let fixed_arr#1: Encoded((uint64,uint64)[3]) = bytes_encode<(uint64,uint64)[3]>(fixed_struct#1, fixed_struct#1, fixed_struct#1)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_arg((uint64,uint64)[3])void")
        ((itxn_field ApplicationArgs) fixed_arr#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_ret()(uint64,uint64)[3]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#1: Encoded((uint64,uint64)[3]) = ((extract 4 0) awst_tmp%1#0)
        let len%1#0: uint64 = (len res#1)
        let eq%1#0: bool = (== len%1#0 48u)
        (assert eq%1#0) // invalid number of bytes for (uint64,uint64)[3]
        let tmp%15#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%16#0: bool = (== tmp%15#0 0x151f7c75)
        (assert tmp%16#0) // application log value is not the result of an ABI return
        let tmp%17#0: bool = (== res#1 fixed_arr#1)
        (assert tmp%17#0) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array[routing]() -> void:
    block@0: // L214
        itxn_begin
        let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = CyADAQAQJgYEFR98dQxmaXhlZF9zdHJ1Y3QNbmVzdGVkX3N0cnVjdA5keW5hbWljX3N0cnVjdAlmaXhlZF9hcnIKbmF0aXZlX2FycjEbQQBygAQkN408NhoAjgEAXDEZFEQxGESCCwQRsZuVBNKLlkoE6hhlXwS7O/23BEbsFKAEm00JJgRPDetQBFlmSrYEEl0TdgSBjkpiBJu+EDI2GgCOCwASAB8AKQA3AEEASABSAGEAbACCAI0AMRmBBRIxGBBDMRkUMRgUEEM2GgFJFSQSRClMZyJDIyllRChMULAiQzYaAUkVgRgSRCpMZyJDIyplRChMULAiQys2GgFnIkMjK2VEKExQsCJDNhoBSRWBMBJEJwRMZyJDIycEZUQoTFCwIkM2GgFJI1kkC4ECCEsBFRJEJwVMZyJDIycFZUQoTFCwIkMjKWVEsCMqZUSwIytlRLAjJwRlRLAjJwVlRLAiQw==
        let inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0: bytes = 
        let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = C4EBQw==
        let inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0: bytes = 
        let inner_txn_params%0%%param_ExtraProgramPages_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0: uint64 = 5u
        let inner_txn_params%0%%param_GlobalNumUint_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%param_LocalNumUint_idx_0#0: uint64 = 0u
        ((itxn_field LocalNumUint) inner_txn_params%0%%param_LocalNumUint_idx_0#0)
        ((itxn_field LocalNumByteSlice) inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0)
        ((itxn_field GlobalNumUint) inner_txn_params%0%%param_GlobalNumUint_idx_0#0)
        ((itxn_field GlobalNumByteSlice) inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0)
        ((itxn_field ExtraProgramPages) inner_txn_params%0%%param_ExtraProgramPages_idx_0#0)
        ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
        ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0)
        ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
        ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 1u)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#0 2u)
        let fixed_struct#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%1#0, tmp%3#0)
        let native_arr#0: Encoded(len+(uint64,uint64)[]) = bytes_encode<(len+(uint64,uint64)[])>(fixed_struct#0, fixed_struct#0, fixed_struct#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_arg((uint64,uint64)[])void")
        ((itxn_field ApplicationArgs) native_arr#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_ret()(uint64,uint64)[]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: Encoded(len+(uint64,uint64)[]) = ((extract 4 0) awst_tmp%0#0)
        let length%0#0: uint64 = array_len(res#0)
        let mul%0#0: uint64 = (* length%0#0 16u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len res#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+(uint64,uint64)[])
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // application log value is not the result of an ABI return
        let tmp%8#0: bool = (== res#0 native_arr#0)
        (assert tmp%8#0) // should be the same
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let tmp%12#0: uint64 = (+ tmp%11#0 3u)
        let fixed_struct#1: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%10#0, tmp%12#0)
        let native_arr#1: Encoded(len+(uint64,uint64)[]) = bytes_encode<(len+(uint64,uint64)[])>(fixed_struct#1, fixed_struct#1, fixed_struct#1)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_arg((uint64,uint64)[])void")
        ((itxn_field ApplicationArgs) native_arr#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_ret()(uint64,uint64)[]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#1: Encoded(len+(uint64,uint64)[]) = ((extract 4 0) awst_tmp%1#0)
        let length%1#0: uint64 = array_len(res#1)
        let mul%1#0: uint64 = (* length%1#0 16u)
        let add%1#0: uint64 = (+ mul%1#0 2u)
        let len%1#0: uint64 = (len res#1)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for (len+(uint64,uint64)[])
        let tmp%15#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%16#0: bool = (== tmp%15#0 0x151f7c75)
        (assert tmp%16#0) // application log value is not the result of an ABI return
        let tmp%17#0: bool = (== res#1 native_arr#1)
        (assert tmp%17#0) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_log[routing]() -> void:
    block@0: // L242
        itxn_begin
        let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = CyADAQAQJgYEFR98dQxmaXhlZF9zdHJ1Y3QNbmVzdGVkX3N0cnVjdA5keW5hbWljX3N0cnVjdAlmaXhlZF9hcnIKbmF0aXZlX2FycjEbQQBygAQkN408NhoAjgEAXDEZFEQxGESCCwQRsZuVBNKLlkoE6hhlXwS7O/23BEbsFKAEm00JJgRPDetQBFlmSrYEEl0TdgSBjkpiBJu+EDI2GgCOCwASAB8AKQA3AEEASABSAGEAbACCAI0AMRmBBRIxGBBDMRkUMRgUEEM2GgFJFSQSRClMZyJDIyllRChMULAiQzYaAUkVgRgSRCpMZyJDIyplRChMULAiQys2GgFnIkMjK2VEKExQsCJDNhoBSRWBMBJEJwRMZyJDIycEZUQoTFCwIkM2GgFJI1kkC4ECCEsBFRJEJwVMZyJDIycFZUQoTFCwIkMjKWVEsCMqZUSwIytlRLAjJwRlRLAjJwVlRLAiQw==
        let inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0: bytes = 
        let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = C4EBQw==
        let inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0: bytes = 
        let inner_txn_params%0%%param_ExtraProgramPages_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0: uint64 = 5u
        let inner_txn_params%0%%param_GlobalNumUint_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%param_LocalNumUint_idx_0#0: uint64 = 0u
        ((itxn_field LocalNumUint) inner_txn_params%0%%param_LocalNumUint_idx_0#0)
        ((itxn_field LocalNumByteSlice) inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0)
        ((itxn_field GlobalNumUint) inner_txn_params%0%%param_GlobalNumUint_idx_0#0)
        ((itxn_field GlobalNumByteSlice) inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0)
        ((itxn_field ExtraProgramPages) inner_txn_params%0%%param_ExtraProgramPages_idx_0#0)
        ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
        ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_1#0)
        ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
        ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let fixed_struct#0: Encoded(uint64,uint64) = (bzero 16u)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_arg((uint64,uint64))void")
        ((itxn_field ApplicationArgs) fixed_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let nested_struct#0: Encoded((uint64,uint64),uint64) = (bzero 24u)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_arg(((uint64,uint64),uint64))void")
        ((itxn_field ApplicationArgs) nested_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let native_arr#0: Encoded(len+(uint64,uint64)[]) = bytes_encode<(len+(uint64,uint64)[])>()
        let dynamic_struct#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = bytes_encode<(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))>(0u, 0u, 0x, "", native_arr#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void")
        ((itxn_field ApplicationArgs) dynamic_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let fixed_arr#0: Encoded((uint64,uint64)[3]) = (bzero 48u)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_arg((uint64,uint64)[3])void")
        ((itxn_field ApplicationArgs) fixed_arr#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_arg((uint64,uint64)[])void")
        ((itxn_field ApplicationArgs) native_arr#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "log_it()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.NumLogs#0: uint64 = (itxn NumLogs)
        let tmp%4#0: bool = (== txn.NumLogs#0 5u)
        (assert tmp%4#0) // expected 5 logs
        let tmp%5#0: bytes = ((itxnas Logs) 0u)
        let tmp%7#0: bool = (== tmp%5#0 fixed_struct#0)
        (assert tmp%7#0) // expected fixed struct
        let tmp%8#0: bytes = ((itxnas Logs) 1u)
        let tmp%10#0: bool = (== tmp%8#0 nested_struct#0)
        (assert tmp%10#0) // expected nested struct
        let dynamic_struct_len#0: uint64 = 16u
        let dynamic_struct_len#1: uint64 = 22u
        let dynamic_struct_len#2: uint64 = 28u
        let tmp%14#0: bytes = ((itxnas Logs) 2u)
        let tmp%15#0: uint64 = (len tmp%14#0)
        let tmp%16#0: bool = (== tmp%15#0 28u)
        (assert tmp%16#0) // expected dynamic struct
        let tmp%17#0: bytes = ((itxnas Logs) 3u)
        let tmp%19#0: bool = (== tmp%17#0 fixed_arr#0)
        (assert tmp%19#0) // expected fixed array
        let tmp%20#0: bytes = ((itxnas Logs) 4u)
        let tmp%21#0: bytes = (bzero 2u)
        let tmp%22#0: bool = (== tmp%20#0 tmp%21#0)
        (assert tmp%22#0) // expected fixed array
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.__algopy_default_create() -> void:
    block@0: // L1
        return 