main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@13
    block@2: // abi_routing_L102
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test_fixed_struct()void" => block@4, method "test_nested_struct()void" => block@5, method "test_dynamic_struct()void" => block@6, method "test_fixed_array()void" => block@7, method "test_native_array()void" => block@8, method "test_log()void" => block@9, * => block@12}
    block@4: // test_fixed_struct_route_L103
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct[routing]()
        goto block@12
    block@5: // test_nested_struct_route_L122
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct[routing]()
        goto block@12
    block@6: // test_dynamic_struct_route_L149
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct[routing]()
        goto block@12
    block@7: // test_fixed_array_route_L188
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array[routing]()
        goto block@12
    block@8: // test_native_array_route_L214
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array[routing]()
        goto block@12
    block@9: // test_log_route_L242
        test_cases.mutable_native_types.abi_call.TestAbiCall.test_log[routing]()
        goto block@12
    block@12: // after_if_else_L102
        fail
    block@13: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_struct[routing]() -> void:
    block@0: // L103
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ClearStateProgramPages) C4EBQw==)
        ((itxn_field ApprovalProgramPages) CyAEAAEQAiYGBBUffHUMZml4ZWRfc3RydWN0DW5lc3RlZF9zdHJ1Y3QOZHluYW1pY19zdHJ1Y3QJZml4ZWRfYXJyCm5hdGl2ZV9hcnIxG0EAdIAEJDeNPDYaAI4BAFwxGRREMRhEggsEEbGblQTSi5ZKBOoYZV8Euzv9twRG7BSgBJtNCSYETw3rUARZZkq2BBJdE3YEgY5KYgSbvhAyNhoAjgsAFgAjAC0AOwBFAJQAngCtALgAzQDYADEZgQUSMRgQRCNDMRkUMRgUEEQjQzYaAUkVJBJEKUxnI0MiKWVEKExQsCNDNhoBSRWBGBJEKkxnI0MiKmVEKExQsCNDNhoBSSRZSYEWEkRLAYESWUsCTwJLAlIiWYEYCEoSREsCgRRZSwNPA0sCUiJZJQhPAghKEkRLAhVLA08DSwJSIlkkCyUITwIIEkQrTGcjQyIrZUQoTFCwI0M2GgFJFYEwEkQnBExnI0MiJwRlRChMULAjQzYaAUkiWSQLJQhLARUSRCcFTGcjQyInBWVEKExQsCNDIillRLAiKmVEsCIrZUSwIicEZUSwIicFZUSwI0M=)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 1u)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#0 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%head%0#0: bytes = aggregate%val_as_bytes%0#0
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%3#0)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_arg((uint64,uint64))void")
        ((itxn_field ApplicationArgs) fixed_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_ret()(uint64,uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: Encoded(uint64,uint64) = ((extract 4 0) awst_tmp%0#0)
        let len%0#0: uint64 = (len res#0)
        let eq%0#0: bool = (== len%0#0 16u)
        (assert eq%0#0) // invalid number of bytes for test_cases.mutable_native_types.abi_call.FixedStruct
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // application log value is not the result of an ABI return
        let tmp%8#0: bool = (== res#0 fixed_struct#0)
        (assert tmp%8#0) // should be the same
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let tmp%12#0: uint64 = (+ tmp%11#0 3u)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%10#0)
        let aggregate%head%2#0: bytes = aggregate%val_as_bytes%2#0
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%12#0)
        let fixed_struct#1: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%2#0 aggregate%val_as_bytes%3#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_arg((uint64,uint64))void")
        ((itxn_field ApplicationArgs) fixed_struct#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_ret()(uint64,uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#1: Encoded(uint64,uint64) = ((extract 4 0) awst_tmp%1#0)
        let len%1#0: uint64 = (len res#1)
        let eq%1#0: bool = (== len%1#0 16u)
        (assert eq%1#0) // invalid number of bytes for test_cases.mutable_native_types.abi_call.FixedStruct
        let tmp%15#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%16#0: bool = (== tmp%15#0 0x151f7c75)
        (assert tmp%16#0) // application log value is not the result of an ABI return
        let tmp%17#0: bool = (== res#1 fixed_struct#1)
        (assert tmp%17#0) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_nested_struct[routing]() -> void:
    block@0: // L122
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ClearStateProgramPages) C4EBQw==)
        ((itxn_field ApprovalProgramPages) CyAEAAEQAiYGBBUffHUMZml4ZWRfc3RydWN0DW5lc3RlZF9zdHJ1Y3QOZHluYW1pY19zdHJ1Y3QJZml4ZWRfYXJyCm5hdGl2ZV9hcnIxG0EAdIAEJDeNPDYaAI4BAFwxGRREMRhEggsEEbGblQTSi5ZKBOoYZV8Euzv9twRG7BSgBJtNCSYETw3rUARZZkq2BBJdE3YEgY5KYgSbvhAyNhoAjgsAFgAjAC0AOwBFAJQAngCtALgAzQDYADEZgQUSMRgQRCNDMRkUMRgUEEQjQzYaAUkVJBJEKUxnI0MiKWVEKExQsCNDNhoBSRWBGBJEKkxnI0MiKmVEKExQsCNDNhoBSSRZSYEWEkRLAYESWUsCTwJLAlIiWYEYCEoSREsCgRRZSwNPA0sCUiJZJQhPAghKEkRLAhVLA08DSwJSIlkkCyUITwIIEkQrTGcjQyIrZUQoTFCwI0M2GgFJFYEwEkQnBExnI0MiJwRlRChMULAjQzYaAUkiWSQLJQhLARUSRCcFTGcjQyInBWVEKExQsCNDIillRLAiKmVEsCIrZUSwIicEZUSwIicFZUSwI0M=)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 1u)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#0 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%head%0#0: bytes = aggregate%val_as_bytes%0#0
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%3#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let tmp%5#0: uint64 = (txn NumAppArgs)
        let tmp%6#0: uint64 = (+ tmp%5#0 3u)
        let aggregate%head%2#0: bytes = aggregate%head%1#0
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%6#0)
        let nested_struct#0: Encoded((uint64,uint64),uint64) = (concat aggregate%head%1#0 aggregate%val_as_bytes%2#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_arg(((uint64,uint64),uint64))void")
        ((itxn_field ApplicationArgs) nested_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_ret()((uint64,uint64),uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: Encoded((uint64,uint64),uint64) = ((extract 4 0) awst_tmp%0#0)
        let len%0#0: uint64 = (len res#0)
        let eq%0#0: bool = (== len%0#0 24u)
        (assert eq%0#0) // invalid number of bytes for test_cases.mutable_native_types.abi_call.NestedStruct
        let tmp%9#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
        (assert tmp%10#0) // application log value is not the result of an ABI return
        let tmp%11#0: bool = (== res#0 nested_struct#0)
        (assert tmp%11#0) // should be the same
        let tmp%12#0: uint64 = (txn NumAppArgs)
        let tmp%13#0: uint64 = (+ tmp%12#0 2u)
        let tmp%14#0: uint64 = (txn NumAppArgs)
        let tmp%15#0: uint64 = (+ tmp%14#0 3u)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%13#0)
        let aggregate%head%4#0: bytes = aggregate%val_as_bytes%3#0
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%15#0)
        let aggregate%head%5#0: bytes = (concat aggregate%val_as_bytes%3#0 aggregate%val_as_bytes%4#0)
        let tmp%17#0: uint64 = (txn NumAppArgs)
        let tmp%18#0: uint64 = (+ tmp%17#0 4u)
        let aggregate%head%6#0: bytes = aggregate%head%5#0
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%18#0)
        let nested_struct#1: Encoded((uint64,uint64),uint64) = (concat aggregate%head%5#0 aggregate%val_as_bytes%5#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_arg(((uint64,uint64),uint64))void")
        ((itxn_field ApplicationArgs) nested_struct#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_ret()((uint64,uint64),uint64)")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#1: Encoded((uint64,uint64),uint64) = ((extract 4 0) awst_tmp%1#0)
        let len%1#0: uint64 = (len res#1)
        let eq%1#0: bool = (== len%1#0 24u)
        (assert eq%1#0) // invalid number of bytes for test_cases.mutable_native_types.abi_call.NestedStruct
        let tmp%21#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%22#0: bool = (== tmp%21#0 0x151f7c75)
        (assert tmp%22#0) // application log value is not the result of an ABI return
        let tmp%23#0: bool = (== res#1 nested_struct#1)
        (assert tmp%23#0) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_dynamic_struct[routing]() -> void:
    block@0: // L149
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ClearStateProgramPages) C4EBQw==)
        ((itxn_field ApprovalProgramPages) CyAEAAEQAiYGBBUffHUMZml4ZWRfc3RydWN0DW5lc3RlZF9zdHJ1Y3QOZHluYW1pY19zdHJ1Y3QJZml4ZWRfYXJyCm5hdGl2ZV9hcnIxG0EAdIAEJDeNPDYaAI4BAFwxGRREMRhEggsEEbGblQTSi5ZKBOoYZV8Euzv9twRG7BSgBJtNCSYETw3rUARZZkq2BBJdE3YEgY5KYgSbvhAyNhoAjgsAFgAjAC0AOwBFAJQAngCtALgAzQDYADEZgQUSMRgQRCNDMRkUMRgUEEQjQzYaAUkVJBJEKUxnI0MiKWVEKExQsCNDNhoBSRWBGBJEKkxnI0MiKmVEKExQsCNDNhoBSSRZSYEWEkRLAYESWUsCTwJLAlIiWYEYCEoSREsCgRRZSwNPA0sCUiJZJQhPAghKEkRLAhVLA08DSwJSIlkkCyUITwIIEkQrTGcjQyIrZUQoTFCwI0M2GgFJFYEwEkQnBExnI0MiJwRlRChMULAjQzYaAUkiWSQLJQhLARUSRCcFTGcjQyInBWVEKExQsCNDIillRLAiKmVEsCIrZUSwIicEZUSwIicFZUSwI0M=)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 1u)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#0 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%3#0)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let tmp%5#0: uint64 = (txn NumAppArgs)
        let tmp%6#0: uint64 = (+ tmp%5#0 1u)
        let tmp%7#0: uint64 = (txn NumAppArgs)
        let tmp%8#0: uint64 = (+ tmp%7#0 2u)
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#0: uint64 = (+ tmp%9#0 3u)
        let tmp%11#0: bytes = (itob tmp%10#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = 0x0001
        let aggregate%head%2#0: bytes = (concat 0x0001 fixed_struct#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%6#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%8#0)
        let aggregate%head%4#0: bytes = (concat aggregate%val_as_bytes%2#0 aggregate%val_as_bytes%3#0)
        let aggregate%length%0#0: uint64 = 8u
        let aggregate%as_bytes%1#0: bytes[8] = (itob 8u)
        let aggregate%length_uint16%0#0: bytes = 0x0008
        let aggregate%encoded_value%0#0: bytes = (concat 0x0008 tmp%11#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob 22u)
        let aggregate%offset_as_uint16%0#0: bytes = 0x0016
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 0x0016)
        let aggregate%data_length%0#0: uint64 = (len aggregate%encoded_value%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 22u aggregate%data_length%0#0)
        let aggregate%length%1#0: uint64 = 5u
        let aggregate%as_bytes%3#0: bytes[8] = (itob 5u)
        let aggregate%length_uint16%1#0: bytes = 0x0005
        let aggregate%encoded_value%1#0: bytes = 0x000548656c6c6f
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = 7u
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 7u)
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%current_tail_offset%1#0)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%offset_as_uint16%2#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%7#0 aggregate%encoded_value%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 0x000548656c6c6f)
        let dynamic_struct#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = (concat aggregate%concat%1#0 aggregate%head%2#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void")
        ((itxn_field ApplicationArgs) dynamic_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = ((extract 4 0) awst_tmp%0#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 res#0 16u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 22u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 res#0 18u)
        let aggregate%substring3%0#0: bytes = (substring3 res#0 extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 aggregate%substring3%0#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%0#0 24u)
        let eq%1#0: bool = (== aggregate%extract_uint16%1#0 add%1#0)
        (assert eq%1#0) // invalid tail pointer at index 3 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))
        let aggregate%extract_uint16%3#0: uint64 = (extract_uint16 res#0 20u)
        let aggregate%substring3%1#0: bytes = (substring3 res#0 aggregate%extract_uint16%1#0 aggregate%extract_uint16%3#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 aggregate%substring3%1#0 0u) // on error: invalid array length header
        let add%2#0: uint64 = (+ aggregate%array_length%1#0 2u)
        let add%3#0: uint64 = (+ add%1#0 add%2#0)
        let eq%2#0: bool = (== aggregate%extract_uint16%3#0 add%3#0)
        (assert eq%2#0) // invalid tail pointer at index 4 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))
        let aggregate%len%0#0: uint64 = (len res#0)
        let aggregate%substring3%2#0: bytes = (substring3 res#0 aggregate%extract_uint16%3#0 aggregate%len%0#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 aggregate%substring3%2#0 0u) // on error: invalid array length header
        let mul%2#0: uint64 = (* aggregate%array_length%2#0 16u)
        let add%4#0: uint64 = (+ mul%2#0 2u)
        let add%5#0: uint64 = (+ add%3#0 add%4#0)
        let eq%3#0: bool = (== aggregate%len%0#0 add%5#0)
        (assert eq%3#0) // invalid number of bytes for test_cases.mutable_native_types.abi_call.DynamicStruct
        let tmp%17#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%18#0: bool = (== tmp%17#0 0x151f7c75)
        (assert tmp%18#0) // application log value is not the result of an ABI return
        let tmp%19#0: bool = (== res#0 dynamic_struct#0)
        (assert tmp%19#0) // should be the same
        let tmp%20#0: uint64 = (txn NumAppArgs)
        let tmp%21#0: uint64 = (+ tmp%20#0 2u)
        let tmp%22#0: uint64 = (txn NumAppArgs)
        let tmp%23#0: uint64 = (+ tmp%22#0 3u)
        let tmp%24#0: uint64 = (txn NumAppArgs)
        let tmp%25#0: uint64 = (+ tmp%24#0 4u)
        let tmp%26#0: bytes = (itob tmp%25#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%21#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%23#0)
        let aggregate%head%9#0: bytes = (concat aggregate%val_as_bytes%4#0 aggregate%val_as_bytes%5#0)
        let aggregate%length%2#0: uint64 = 8u
        let aggregate%length_uint16%2#0: bytes = 0x0008
        let aggregate%encoded_value%2#0: bytes = (concat 0x0008 tmp%26#0)
        let aggregate%offset_as_uint16%3#0: bytes = 0x0016
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 0x0016)
        let aggregate%data_length%3#0: uint64 = (len aggregate%encoded_value%2#0)
        let aggregate%current_tail_offset%3#0: uint64 = (+ 22u aggregate%data_length%3#0)
        let aggregate%length%3#0: uint64 = 5u
        let aggregate%length_uint16%3#0: bytes = 0x0005
        let aggregate%encoded_value%3#0: bytes = 0x000548656c6c6f
        let aggregate%as_bytes%9#0: bytes[8] = (itob aggregate%current_tail_offset%3#0)
        let aggregate%offset_as_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%9#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 aggregate%offset_as_uint16%4#0)
        let aggregate%data_length%4#0: uint64 = 7u
        let aggregate%current_tail_offset%4#0: uint64 = (+ aggregate%current_tail_offset%3#0 7u)
        let aggregate%as_bytes%10#0: bytes[8] = (itob aggregate%current_tail_offset%4#0)
        let aggregate%offset_as_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%head%12#0: bytes = (concat aggregate%head%11#0 aggregate%offset_as_uint16%5#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%head%12#0 aggregate%encoded_value%2#0)
        let aggregate%concat%4#0: bytes = (concat aggregate%concat%3#0 0x000548656c6c6f)
        let dynamic_struct#1: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = (concat aggregate%concat%4#0 aggregate%head%2#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void")
        ((itxn_field ApplicationArgs) dynamic_struct#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#1: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = ((extract 4 0) awst_tmp%1#0)
        let extract_uint16%3#0: uint64 = (extract_uint16 res#1 16u) // on error: invalid tuple encoding
        let eq%4#0: bool = (== extract_uint16%3#0 22u)
        (assert eq%4#0) // invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))
        let aggregate%extract_uint16%6#0: uint64 = (extract_uint16 res#1 18u)
        let aggregate%substring3%3#0: bytes = (substring3 res#1 extract_uint16%3#0 aggregate%extract_uint16%6#0)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 aggregate%substring3%3#0 0u) // on error: invalid array length header
        let add%7#0: uint64 = (+ aggregate%array_length%3#0 24u)
        let eq%5#0: bool = (== aggregate%extract_uint16%6#0 add%7#0)
        (assert eq%5#0) // invalid tail pointer at index 3 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))
        let aggregate%extract_uint16%8#0: uint64 = (extract_uint16 res#1 20u)
        let aggregate%substring3%4#0: bytes = (substring3 res#1 aggregate%extract_uint16%6#0 aggregate%extract_uint16%8#0)
        let aggregate%array_length%4#0: uint64 = (extract_uint16 aggregate%substring3%4#0 0u) // on error: invalid array length header
        let add%8#0: uint64 = (+ aggregate%array_length%4#0 2u)
        let add%9#0: uint64 = (+ add%7#0 add%8#0)
        let eq%6#0: bool = (== aggregate%extract_uint16%8#0 add%9#0)
        (assert eq%6#0) // invalid tail pointer at index 4 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))
        let aggregate%len%1#0: uint64 = (len res#1)
        let aggregate%substring3%5#0: bytes = (substring3 res#1 aggregate%extract_uint16%8#0 aggregate%len%1#0)
        let aggregate%array_length%5#0: uint64 = (extract_uint16 aggregate%substring3%5#0 0u) // on error: invalid array length header
        let mul%5#0: uint64 = (* aggregate%array_length%5#0 16u)
        let add%10#0: uint64 = (+ mul%5#0 2u)
        let add%11#0: uint64 = (+ add%9#0 add%10#0)
        let eq%7#0: bool = (== aggregate%len%1#0 add%11#0)
        (assert eq%7#0) // invalid number of bytes for test_cases.mutable_native_types.abi_call.DynamicStruct
        let tmp%32#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%33#0: bool = (== tmp%32#0 0x151f7c75)
        (assert tmp%33#0) // application log value is not the result of an ABI return
        let tmp%34#0: bool = (== res#1 dynamic_struct#1)
        (assert tmp%34#0) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_fixed_array[routing]() -> void:
    block@0: // L188
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ClearStateProgramPages) C4EBQw==)
        ((itxn_field ApprovalProgramPages) CyAEAAEQAiYGBBUffHUMZml4ZWRfc3RydWN0DW5lc3RlZF9zdHJ1Y3QOZHluYW1pY19zdHJ1Y3QJZml4ZWRfYXJyCm5hdGl2ZV9hcnIxG0EAdIAEJDeNPDYaAI4BAFwxGRREMRhEggsEEbGblQTSi5ZKBOoYZV8Euzv9twRG7BSgBJtNCSYETw3rUARZZkq2BBJdE3YEgY5KYgSbvhAyNhoAjgsAFgAjAC0AOwBFAJQAngCtALgAzQDYADEZgQUSMRgQRCNDMRkUMRgUEEQjQzYaAUkVJBJEKUxnI0MiKWVEKExQsCNDNhoBSRWBGBJEKkxnI0MiKmVEKExQsCNDNhoBSSRZSYEWEkRLAYESWUsCTwJLAlIiWYEYCEoSREsCgRRZSwNPA0sCUiJZJQhPAghKEkRLAhVLA08DSwJSIlkkCyUITwIIEkQrTGcjQyIrZUQoTFCwI0M2GgFJFYEwEkQnBExnI0MiJwRlRChMULAjQzYaAUkiWSQLJQhLARUSRCcFTGcjQyInBWVEKExQsCNDIillRLAiKmVEsCIrZUSwIicEZUSwIicFZUSwI0M=)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 1u)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#0 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%head%0#0: bytes = aggregate%val_as_bytes%0#0
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%3#0)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let aggregate%head%2#0: bytes = fixed_struct#0
        let aggregate%head%3#0: bytes = (concat fixed_struct#0 fixed_struct#0)
        let fixed_arr#0: Encoded((uint64,uint64)[3]) = (concat aggregate%head%3#0 fixed_struct#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_arg((uint64,uint64)[3])void")
        ((itxn_field ApplicationArgs) fixed_arr#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_ret()(uint64,uint64)[3]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: Encoded((uint64,uint64)[3]) = ((extract 4 0) awst_tmp%0#0)
        let len%0#0: uint64 = (len res#0)
        let eq%0#0: bool = (== len%0#0 48u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<test_cases.mutable_native_types.abi_call.FixedStruct, 3>
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // application log value is not the result of an ABI return
        let tmp%8#0: bool = (== res#0 fixed_arr#0)
        (assert tmp%8#0) // should be the same
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let tmp%12#0: uint64 = (+ tmp%11#0 3u)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%10#0)
        let aggregate%head%5#0: bytes = aggregate%val_as_bytes%2#0
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%12#0)
        let fixed_struct#1: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%2#0 aggregate%val_as_bytes%3#0)
        let aggregate%head%7#0: bytes = fixed_struct#1
        let aggregate%head%8#0: bytes = (concat fixed_struct#1 fixed_struct#1)
        let fixed_arr#1: Encoded((uint64,uint64)[3]) = (concat aggregate%head%8#0 fixed_struct#1)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_arg((uint64,uint64)[3])void")
        ((itxn_field ApplicationArgs) fixed_arr#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_ret()(uint64,uint64)[3]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#1: Encoded((uint64,uint64)[3]) = ((extract 4 0) awst_tmp%1#0)
        let len%1#0: uint64 = (len res#1)
        let eq%1#0: bool = (== len%1#0 48u)
        (assert eq%1#0) // invalid number of bytes for arc4.static_array<test_cases.mutable_native_types.abi_call.FixedStruct, 3>
        let tmp%15#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%16#0: bool = (== tmp%15#0 0x151f7c75)
        (assert tmp%16#0) // application log value is not the result of an ABI return
        let tmp%17#0: bool = (== res#1 fixed_arr#1)
        (assert tmp%17#0) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_native_array[routing]() -> void:
    block@0: // L214
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ClearStateProgramPages) C4EBQw==)
        ((itxn_field ApprovalProgramPages) CyAEAAEQAiYGBBUffHUMZml4ZWRfc3RydWN0DW5lc3RlZF9zdHJ1Y3QOZHluYW1pY19zdHJ1Y3QJZml4ZWRfYXJyCm5hdGl2ZV9hcnIxG0EAdIAEJDeNPDYaAI4BAFwxGRREMRhEggsEEbGblQTSi5ZKBOoYZV8Euzv9twRG7BSgBJtNCSYETw3rUARZZkq2BBJdE3YEgY5KYgSbvhAyNhoAjgsAFgAjAC0AOwBFAJQAngCtALgAzQDYADEZgQUSMRgQRCNDMRkUMRgUEEQjQzYaAUkVJBJEKUxnI0MiKWVEKExQsCNDNhoBSRWBGBJEKkxnI0MiKmVEKExQsCNDNhoBSSRZSYEWEkRLAYESWUsCTwJLAlIiWYEYCEoSREsCgRRZSwNPA0sCUiJZJQhPAghKEkRLAhVLA08DSwJSIlkkCyUITwIIEkQrTGcjQyIrZUQoTFCwI0M2GgFJFYEwEkQnBExnI0MiJwRlRChMULAjQzYaAUkiWSQLJQhLARUSRCcFTGcjQyInBWVEKExQsCNDIillRLAiKmVEsCIrZUSwIicEZUSwIicFZUSwI0M=)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (+ tmp%0#0 1u)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#0 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%3#0)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#0: bytes = 0x0003
        let aggregate%head%2#0: bytes = (concat 0x0003 fixed_struct#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 fixed_struct#0)
        let native_arr#0: Encoded(len+(uint64,uint64)[]) = (concat aggregate%head%3#0 fixed_struct#0)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_arg((uint64,uint64)[])void")
        ((itxn_field ApplicationArgs) native_arr#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_ret()(uint64,uint64)[]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let res#0: Encoded(len+(uint64,uint64)[]) = ((extract 4 0) awst_tmp%0#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 res#0 0u) // on error: invalid array length header
        let mul%0#0: uint64 = (* aggregate%array_length%0#0 16u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len res#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<test_cases.mutable_native_types.abi_call.FixedStruct>
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // application log value is not the result of an ABI return
        let tmp%8#0: bool = (== res#0 native_arr#0)
        (assert tmp%8#0) // should be the same
        let tmp%9#0: uint64 = (txn NumAppArgs)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let tmp%12#0: uint64 = (+ tmp%11#0 3u)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%10#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%12#0)
        let fixed_struct#1: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%2#0 aggregate%val_as_bytes%3#0)
        let aggregate%len_u16%1#0: bytes = 0x0003
        let aggregate%head%7#0: bytes = (concat 0x0003 fixed_struct#1)
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 fixed_struct#1)
        let native_arr#1: Encoded(len+(uint64,uint64)[]) = (concat aggregate%head%8#0 fixed_struct#1)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_arg((uint64,uint64)[])void")
        ((itxn_field ApplicationArgs) native_arr#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_ret()(uint64,uint64)[]")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let res#1: Encoded(len+(uint64,uint64)[]) = ((extract 4 0) awst_tmp%1#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 res#1 0u) // on error: invalid array length header
        let mul%1#0: uint64 = (* aggregate%array_length%1#0 16u)
        let add%1#0: uint64 = (+ mul%1#0 2u)
        let len%1#0: uint64 = (len res#1)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<test_cases.mutable_native_types.abi_call.FixedStruct>
        let tmp%15#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%16#0: bool = (== tmp%15#0 0x151f7c75)
        (assert tmp%16#0) // application log value is not the result of an ABI return
        let tmp%17#0: bool = (== res#1 native_arr#1)
        (assert tmp%17#0) // should be the same
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.TestAbiCall.test_log[routing]() -> void:
    block@0: // L242
        itxn_begin
        ((itxn_field GlobalNumByteSlice) 5u)
        ((itxn_field ClearStateProgramPages) C4EBQw==)
        ((itxn_field ApprovalProgramPages) CyAEAAEQAiYGBBUffHUMZml4ZWRfc3RydWN0DW5lc3RlZF9zdHJ1Y3QOZHluYW1pY19zdHJ1Y3QJZml4ZWRfYXJyCm5hdGl2ZV9hcnIxG0EAdIAEJDeNPDYaAI4BAFwxGRREMRhEggsEEbGblQTSi5ZKBOoYZV8Euzv9twRG7BSgBJtNCSYETw3rUARZZkq2BBJdE3YEgY5KYgSbvhAyNhoAjgsAFgAjAC0AOwBFAJQAngCtALgAzQDYADEZgQUSMRgQRCNDMRkUMRgUEEQjQzYaAUkVJBJEKUxnI0MiKWVEKExQsCNDNhoBSRWBGBJEKkxnI0MiKmVEKExQsCNDNhoBSSRZSYEWEkRLAYESWUsCTwJLAlIiWYEYCEoSREsCgRRZSwNPA0sCUiJZJQhPAghKEkRLAhVLA08DSwJSIlkkCyUITwIIEkQrTGcjQyIrZUQoTFCwI0M2GgFJFYEwEkQnBExnI0MiJwRlRChMULAjQzYaAUkiWSQLJQhLARUSRCcFTGcjQyInBWVEKExQsCNDIillRLAiKmVEsCIrZUSwIicEZUSwIicFZUSwI0M=)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let create_txn.CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
        let fixed_struct#0: Encoded(uint64,uint64) = (bzero 16u)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_struct_arg((uint64,uint64))void")
        ((itxn_field ApplicationArgs) fixed_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let nested_struct#0: Encoded((uint64,uint64),uint64) = (bzero 24u)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "nested_struct_arg(((uint64,uint64),uint64))void")
        ((itxn_field ApplicationArgs) nested_struct#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let native_arr#0: Encoded(len+(uint64,uint64)[]) = 0x0000
        let aggregate%head%1#0: bytes = 0x00000000000000000000000000000000
        let aggregate%length%0#0: uint64 = 0u
        let aggregate%length_uint16%0#0: bytes = 0x0000
        let aggregate%encoded_value%0#0: bytes = 0x0000
        let aggregate%as_bytes%2#0: bytes[8] = (itob 22u)
        let aggregate%offset_as_uint16%0#0: bytes = 0x0016
        let aggregate%head%2#0: bytes = 0x000000000000000000000000000000000016
        let aggregate%data_length%0#0: uint64 = 2u
        let aggregate%current_tail_offset%0#0: uint64 = 24u
        let aggregate%length%1#0: uint64 = 0u
        let aggregate%length_uint16%1#0: bytes = 0x0000
        let aggregate%encoded_value%1#0: bytes = 0x0000
        let aggregate%as_bytes%4#0: bytes[8] = (itob 24u)
        let aggregate%offset_as_uint16%1#0: bytes = 0x0018
        let aggregate%head%3#0: bytes = 0x0000000000000000000000000000000000160018
        let aggregate%data_length%1#0: uint64 = 2u
        let aggregate%current_tail_offset%1#0: uint64 = 26u
        let aggregate%as_bytes%5#0: bytes[8] = (itob 26u)
        let aggregate%offset_as_uint16%2#0: bytes = 0x001a
        let aggregate%head%4#0: bytes = 0x0000000000000000000000000000000000160018001a
        let aggregate%concat%0#0: bytes = 0x0000000000000000000000000000000000160018001a0000
        let aggregate%concat%1#0: bytes = 0x0000000000000000000000000000000000160018001a00000000
        let dynamic_struct#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = 0x0000000000000000000000000000000000160018001a000000000000
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void")
        ((itxn_field ApplicationArgs) 0x0000000000000000000000000000000000160018001a000000000000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let fixed_arr#0: Encoded((uint64,uint64)[3]) = (bzero 48u)
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "fixed_arr_arg((uint64,uint64)[3])void")
        ((itxn_field ApplicationArgs) fixed_arr#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "native_arr_arg((uint64,uint64)[])void")
        ((itxn_field ApplicationArgs) 0x0000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "log_it()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.NumLogs#0: uint64 = (itxn NumLogs)
        let tmp%4#0: bool = (== txn.NumLogs#0 5u)
        (assert tmp%4#0) // expected 5 logs
        let tmp%5#0: bytes = (itxna Logs 0)
        let tmp%7#0: bool = (== tmp%5#0 fixed_struct#0)
        (assert tmp%7#0) // expected fixed struct
        let tmp%8#0: bytes = (itxna Logs 1)
        let tmp%10#0: bool = (== tmp%8#0 nested_struct#0)
        (assert tmp%10#0) // expected nested struct
        let tmp%14#0: bytes = (itxna Logs 2)
        let tmp%15#0: uint64 = (len tmp%14#0)
        let tmp%16#0: bool = (== tmp%15#0 28u)
        (assert tmp%16#0) // expected dynamic struct
        let tmp%17#0: bytes = (itxna Logs 3)
        let tmp%19#0: bool = (== tmp%17#0 fixed_arr#0)
        (assert tmp%19#0) // expected fixed array
        let tmp%20#0: bytes = (itxna Logs 4)
        let tmp%21#0: bytes = (bzero 2u)
        let tmp%22#0: bool = (== tmp%20#0 tmp%21#0)
        (assert tmp%22#0) // expected fixed array
        itxn_begin
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApplicationID) create_txn.CreatedApplicationID#0)
        ((itxn_field ApplicationArgs) method "delete()void")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u