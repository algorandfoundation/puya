{
    "hints": {
        "fixed_initialize()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "add_payment((address,uint64,uint64))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "pay": {
                    "name": "Payment",
                    "elements": [
                        [
                            "receiver",
                            "address"
                        ],
                        [
                            "asset",
                            "uint64"
                        ],
                        [
                            "amt",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "increment_payment(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_storage(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "local_struct()(address,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Payment",
                    "elements": [
                        [
                            "receiver",
                            "address"
                        ],
                        [
                            "asset",
                            "uint64"
                        ],
                        [
                            "amt",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "delete_storage(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "struct_arg(uint64,(uint64,uint64))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "a": {
                    "name": "FixedStruct",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "struct_return()(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "FixedStruct",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "tup_return()(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "NamedTup",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "calculate_sum()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_arr((uint64,uint64)[])(uint64,uint64)[]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 5,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 1,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "arr": {
                    "type": "bytes",
                    "key": "arr"
                },
                "dyn": {
                    "type": "bytes",
                    "key": "dyn"
                },
                "nested": {
                    "type": "bytes",
                    "key": "nested"
                },
                "nested_proxy": {
                    "type": "bytes",
                    "key": "p",
                    "descr": "some documentation"
                },
                "num_payments": {
                    "type": "uint64",
                    "key": "num_payments"
                },
                "payments": {
                    "type": "bytes",
                    "key": "payments"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "nested_local": {
                    "type": "bytes",
                    "key": "l"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "Contract",
        "methods": [
            {
                "name": "fixed_initialize",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "add_payment",
                "args": [
                    {
                        "type": "(address,uint64,uint64)",
                        "name": "pay"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "increment_payment",
                "args": [
                    {
                        "type": "uint64",
                        "name": "index"
                    },
                    {
                        "type": "uint64",
                        "name": "amt"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "create_storage",
                "args": [
                    {
                        "type": "uint64",
                        "name": "box_key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "local_struct",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(address,uint64,uint64)"
                }
            },
            {
                "name": "delete_storage",
                "args": [
                    {
                        "type": "uint64",
                        "name": "box_key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "struct_arg",
                "args": [
                    {
                        "type": "uint64",
                        "name": "box_key"
                    },
                    {
                        "type": "(uint64,uint64)",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "struct_return",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)"
                }
            },
            {
                "name": "tup_return",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)"
                }
            },
            {
                "name": "calculate_sum",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "test_arr",
                "args": [
                    {
                        "type": "(uint64,uint64)[]",
                        "name": "arr"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)[]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}