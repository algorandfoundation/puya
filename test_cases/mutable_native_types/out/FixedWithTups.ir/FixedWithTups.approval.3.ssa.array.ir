main test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@9
    block@4: // abi_routing_L22
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create_box()void" => block@5, method "num_tups()uint64" => block@6, method "add_tup((uint64,uint64))void" => block@7, method "get_tup(uint64)(uint64,uint64)" => block@8, * => block@11}
    block@5: // create_box_route_L26
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.create_box()
        let test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@6: // num_tups_route_L30
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let to_encode%0#0: uint64 = test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.num_tups()
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%11#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%11#0)
        let test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // add_tup_route_L34
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 1)
        let item0%1#0: uint64 = (extract_uint64 reinterpret_bytes[16]%0#0 0u)
        let item1%1#0: uint64 = (extract_uint64 reinterpret_bytes[16]%0#0 8u)
        test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.add_tup(item0%1#0, item1%1#0)
        let test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@8: // get_tup_route_L40
        let tmp%16#0: uint64 = (txn OnCompletion)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // OnCompletion is not NoOp
        let tmp%18#0: uint64 = (txn ApplicationID)
        (assert tmp%18#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%20#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        let (elements_to_encode%0#0: uint64, elements_to_encode%1#0: uint64) = test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.get_tup(tmp%20#0)
        let val_as_bytes%1#0: bytes[8] = (itob elements_to_encode%0#0)
        let val_as_bytes%2#0: bytes[8] = (itob elements_to_encode%1#0)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%1#0 val_as_bytes%2#0)
        let tmp%21#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%2#0)
        (log tmp%21#0)
        let test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__puya_arc4_router__%0#3: bool = 1u
        goto block@12
    block@9: // bare_routing_L22
        let tmp%22#0: uint64 = (txn OnCompletion)
        goto tmp%22#0 ? block@11 : block@10
    block@10: // __algopy_default_create_L1
        let tmp%23#0: uint64 = (txn ApplicationID)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // can only call when creating
        let test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__puya_arc4_router__%0#4: bool = 1u
        goto block@12
    block@11: // after_if_else_L22
        let test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__puya_arc4_router__%0#5: bool = 0u
        goto block@12
    block@12: // after_inlined_test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__puya_arc4_router___L1
        let tmp%0#1: bool = Ï†(test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__puya_arc4_router__%0#0 <- block@5, test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__puya_arc4_router__%0#1 <- block@6, test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__puya_arc4_router__%0#2 <- block@7, test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__puya_arc4_router__%0#3 <- block@8, test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__puya_arc4_router__%0#4 <- block@10, test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.__puya_arc4_router__%0#5 <- block@11)
        return tmp%0#1

subroutine test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.create_box() -> void:
    block@0: // L26
        (box_create "tup_bag" 136u)
        return 

subroutine test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.num_tups() -> uint64:
    block@0: // L30
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        return tmp%0#0

subroutine test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.add_tup(tup.a: uint64, tup.b: uint64) -> void:
    block@0: // L34
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let tmp%1#0: bool = (< tmp%0#0 8u)
        (assert tmp%1#0) // too many tups
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let tmp%2#0: bytes = ((extract 8 128) maybe_value%1#0) // on error: Index access is out of bounds
        let val_as_bytes%0#0: bytes[8] = (itob tup.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob tup.b#0)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%2#0) // check self.tup_bag exists
        let tmp%3#0: uint64 = (extract_uint64 maybe_value%2#0 0u)
        let index_is_in_bounds%0#0: bool = (< tmp%3#0 8u)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let write_offset%0#0: uint64 = (* tmp%3#0 16u)
        let updated_target%0#0: bytes = (replace3 tmp%2#0 write_offset%0#0 encoded_tuple_buffer%2#0)
        let updated_data%0#0: bytes = ((replace2 8) maybe_value%1#0 updated_target%0#0)
        (box_put "tup_bag" updated_data%0#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%3#0) // check self.tup_bag exists
        let tmp%4#0: uint64 = (extract_uint64 maybe_value%3#0 0u)
        let assigned_value%1#0: uint64 = (+ tmp%4#0 1u)
        let val_as_bytes%2#0: bytes[8] = (itob assigned_value%1#0)
        let updated_data%1#0: bytes = ((replace2 0) maybe_value%3#0 val_as_bytes%2#0)
        (box_put "tup_bag" updated_data%1#0)
        return 

subroutine test_cases.mutable_native_types.fixed_with_tups.FixedWithTups.get_tup(index: uint64) -> <uint64, uint64>:
    block@0: // L40
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let tmp%1#0: bool = (< index#0 tmp%0#0)
        (assert tmp%1#0) // index out of bounds
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let tmp%2#0: bytes = ((extract 8 128) maybe_value%1#0) // on error: Index access is out of bounds
        let item_offset%0#0: uint64 = (* index#0 16u)
        let encoded%1#0: bytes = (extract3 tmp%2#0 item_offset%0#0 16u) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (extract_uint64 encoded%1#0 0u)
        let item1%1#0: uint64 = (extract_uint64 encoded%1#0 8u)
        return item0%1#0 item1%1#0