{
    "hints": {
        "delete()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "fixed_struct_arg((uint64,uint64))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "arg": {
                    "name": "FixedStruct",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "fixed_struct_ret()(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "FixedStruct",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "nested_struct_arg(((uint64,uint64),uint64))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "arg": {
                    "name": "NestedStruct",
                    "elements": [
                        [
                            "fixed",
                            "(uint64,uint64)"
                        ],
                        [
                            "c",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "nested_struct_ret()((uint64,uint64),uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "NestedStruct",
                    "elements": [
                        [
                            "fixed",
                            "(uint64,uint64)"
                        ],
                        [
                            "c",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "arg": {
                    "name": "DynamicStruct",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint64"
                        ],
                        [
                            "c",
                            "byte[]"
                        ],
                        [
                            "d",
                            "string"
                        ],
                        [
                            "e",
                            "(uint64,uint64)[]"
                        ]
                    ]
                }
            }
        },
        "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "DynamicStruct",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint64"
                        ],
                        [
                            "c",
                            "byte[]"
                        ],
                        [
                            "d",
                            "string"
                        ],
                        [
                            "e",
                            "(uint64,uint64)[]"
                        ]
                    ]
                }
            }
        },
        "fixed_arr_arg((uint64,uint64)[3])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fixed_arr_ret()(uint64,uint64)[3]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "native_arr_arg((uint64,uint64)[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "native_arr_ret()(uint64,uint64)[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "log_it()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 5,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "dynamic_struct": {
                    "type": "bytes",
                    "key": "dynamic_struct"
                },
                "fixed_arr": {
                    "type": "bytes",
                    "key": "fixed_arr"
                },
                "fixed_struct": {
                    "type": "bytes",
                    "key": "fixed_struct"
                },
                "native_arr": {
                    "type": "bytes",
                    "key": "native_arr"
                },
                "nested_struct": {
                    "type": "bytes",
                    "key": "nested_struct"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "CallMe",
        "methods": [
            {
                "name": "delete",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "fixed_struct_arg",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "arg"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "fixed_struct_ret",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)"
                }
            },
            {
                "name": "nested_struct_arg",
                "args": [
                    {
                        "type": "((uint64,uint64),uint64)",
                        "name": "arg"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "nested_struct_ret",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "((uint64,uint64),uint64)"
                }
            },
            {
                "name": "dynamic_struct_arg",
                "args": [
                    {
                        "type": "(uint64,uint64,byte[],string,(uint64,uint64)[])",
                        "name": "arg"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "dynamic_struct_ret",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,byte[],string,(uint64,uint64)[])"
                }
            },
            {
                "name": "fixed_arr_arg",
                "args": [
                    {
                        "type": "(uint64,uint64)[3]",
                        "name": "arg"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "fixed_arr_ret",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)[3]"
                }
            },
            {
                "name": "native_arr_arg",
                "args": [
                    {
                        "type": "(uint64,uint64)[]",
                        "name": "arg"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "native_arr_ret",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)[]"
                }
            },
            {
                "name": "log_it",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}