{
  "version": 3,
  "sources": [
    "../abi_call.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAQK;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEG;AAAA;AAAA;AAFH;AAAA;AAMU;AAAA;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEG;AAAA;AAAA;AAFH;AAAA;AAMU;AAAA;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAMG;AAFH;;;AAEG;AAFH;AAAA;AAMU;AAAA;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEG;;AAAA;AAAA;AAFH;AAAA;AAMU;AAAA;;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEG;;AAAA;AAAA;AAFH;AAAA;AAMU;AAAA;;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAMO;AAAA;AAAA;AAAA;AAAJ;AACI;AAAA;AAAA;AAAA;AAAJ;AACI;AAAA;AAAA;AAAA;AAAJ;AACI;AAAA;;AAAA;AAAA;AAAJ;AACI;AAAA;;AAAA;AAAA;AAAJ;AANH;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 16"
    },
    "6": {
      "op": "bytecblock 0x151f7c75 \"fixed_struct\" \"nested_struct\" \"dynamic_struct\" \"fixed_arr\" \"native_arr\""
    },
    "76": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "78": {
      "op": "bz main___algopy_default_create@22",
      "stack_out": []
    },
    "81": {
      "op": "pushbytes 0x24378d3c // method \"delete()void\"",
      "defined_out": [
        "Method(delete()void)"
      ],
      "stack_out": [
        "Method(delete()void)"
      ]
    },
    "87": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(delete()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(delete()void)",
        "tmp%2#0"
      ]
    },
    "90": {
      "op": "match main_delete_route@5",
      "stack_out": []
    },
    "94": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "96": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "97": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "98": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "100": {
      "op": "assert",
      "stack_out": []
    },
    "101": {
      "op": "pushbytess 0x11b19b95 0xd28b964a 0xea18655f 0xbb3bfdb7 0x46ec14a0 0x9b4d0926 0x4f0deb50 0x59664ab6 0x125d1376 0x818e4a62 0x9bbe1032 // method \"fixed_struct_arg((uint64,uint64))void\", method \"fixed_struct_ret()(uint64,uint64)\", method \"nested_struct_arg(((uint64,uint64),uint64))void\", method \"nested_struct_ret()((uint64,uint64),uint64)\", method \"dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void\", method \"dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])\", method \"fixed_arr_arg((uint64,uint64)[3])void\", method \"fixed_arr_ret()(uint64,uint64)[3]\", method \"native_arr_arg((uint64,uint64)[])void\", method \"native_arr_ret()(uint64,uint64)[]\", method \"log_it()void\"",
      "defined_out": [
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(log_it()void)",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))"
      ],
      "stack_out": [
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(log_it()void)"
      ]
    },
    "158": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(log_it()void)",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%12#0"
      ],
      "stack_out": [
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(log_it()void)",
        "tmp%12#0"
      ]
    },
    "161": {
      "op": "match fixed_struct_arg fixed_struct_ret nested_struct_arg nested_struct_ret dynamic_struct_arg dynamic_struct_ret fixed_arr_arg fixed_arr_ret native_arr_arg native_arr_ret log_it",
      "stack_out": []
    },
    "185": {
      "op": "err"
    },
    "186": {
      "block": "main_delete_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "188": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "DeleteApplication"
      ]
    },
    "190": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "191": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "193": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "194": {
      "error": "OnCompletion must be DeleteApplication && can only call when not creating",
      "op": "return // on error: OnCompletion must be DeleteApplication && can only call when not creating",
      "defined_out": [],
      "stack_out": []
    },
    "195": {
      "block": "main___algopy_default_create@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "197": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "198": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "200": {
      "op": "!",
      "defined_out": [
        "tmp%14#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%16#0"
      ]
    },
    "201": {
      "op": "&&",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "202": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "203": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg[routing]",
      "params": {},
      "block": "fixed_struct_arg",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arg#0"
      ],
      "stack_out": [
        "arg#0"
      ]
    },
    "206": {
      "op": "dup",
      "defined_out": [
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)"
      ]
    },
    "207": {
      "op": "len",
      "defined_out": [
        "arg#0",
        "len%0#0"
      ],
      "stack_out": [
        "arg#0",
        "len%0#0"
      ]
    },
    "208": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "arg#0",
        "len%0#0"
      ],
      "stack_out": [
        "arg#0",
        "len%0#0",
        "16"
      ]
    },
    "209": {
      "op": "==",
      "defined_out": [
        "arg#0",
        "eq%0#0"
      ],
      "stack_out": [
        "arg#0",
        "eq%0#0"
      ]
    },
    "210": {
      "error": "invalid number of bytes for (uint64,uint64)",
      "op": "assert // invalid number of bytes for (uint64,uint64)",
      "stack_out": [
        "arg#0"
      ]
    },
    "211": {
      "op": "bytec_1 // \"fixed_struct\"",
      "defined_out": [
        "\"fixed_struct\"",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "\"fixed_struct\""
      ]
    },
    "212": {
      "op": "swap",
      "stack_out": [
        "\"fixed_struct\"",
        "arg#0"
      ]
    },
    "213": {
      "op": "app_global_put",
      "stack_out": []
    },
    "214": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "215": {
      "op": "return",
      "stack_out": []
    },
    "216": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret[routing]",
      "params": {},
      "block": "fixed_struct_ret",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "217": {
      "op": "bytec_1 // \"fixed_struct\"",
      "defined_out": [
        "\"fixed_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_struct\""
      ]
    },
    "218": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "219": {
      "error": "check self.fixed_struct exists",
      "op": "assert // check self.fixed_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "220": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x151f7c75"
      ]
    },
    "221": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ]
    },
    "222": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "223": {
      "op": "log",
      "stack_out": []
    },
    "224": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "225": {
      "op": "return",
      "stack_out": []
    },
    "226": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg[routing]",
      "params": {},
      "block": "nested_struct_arg",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arg#0"
      ],
      "stack_out": [
        "arg#0"
      ]
    },
    "229": {
      "op": "dup",
      "defined_out": [
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)"
      ]
    },
    "230": {
      "op": "len",
      "defined_out": [
        "arg#0",
        "len%0#0"
      ],
      "stack_out": [
        "arg#0",
        "len%0#0"
      ]
    },
    "231": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "arg#0",
        "len%0#0"
      ],
      "stack_out": [
        "arg#0",
        "len%0#0",
        "24"
      ]
    },
    "233": {
      "op": "==",
      "defined_out": [
        "arg#0",
        "eq%0#0"
      ],
      "stack_out": [
        "arg#0",
        "eq%0#0"
      ]
    },
    "234": {
      "error": "invalid number of bytes for ((uint64,uint64),uint64)",
      "op": "assert // invalid number of bytes for ((uint64,uint64),uint64)",
      "stack_out": [
        "arg#0"
      ]
    },
    "235": {
      "op": "bytec_2 // \"nested_struct\"",
      "defined_out": [
        "\"nested_struct\"",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "\"nested_struct\""
      ]
    },
    "236": {
      "op": "swap",
      "stack_out": [
        "\"nested_struct\"",
        "arg#0"
      ]
    },
    "237": {
      "op": "app_global_put",
      "stack_out": []
    },
    "238": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "239": {
      "op": "return",
      "stack_out": []
    },
    "240": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret[routing]",
      "params": {},
      "block": "nested_struct_ret",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "241": {
      "op": "bytec_2 // \"nested_struct\"",
      "defined_out": [
        "\"nested_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested_struct\""
      ]
    },
    "242": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "243": {
      "error": "check self.nested_struct exists",
      "op": "assert // check self.nested_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "244": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x151f7c75"
      ]
    },
    "245": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ]
    },
    "246": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "247": {
      "op": "log",
      "stack_out": []
    },
    "248": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "249": {
      "op": "return",
      "stack_out": []
    },
    "250": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg[routing]",
      "params": {},
      "block": "dynamic_struct_arg",
      "stack_in": [],
      "op": "bytec_3 // \"dynamic_struct\"",
      "defined_out": [
        "\"dynamic_struct\""
      ],
      "stack_out": [
        "\"dynamic_struct\""
      ]
    },
    "251": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"dynamic_struct\"",
        "arg#0"
      ],
      "stack_out": [
        "\"dynamic_struct\"",
        "arg#0"
      ]
    },
    "254": {
      "op": "app_global_put",
      "stack_out": []
    },
    "255": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "256": {
      "op": "return",
      "stack_out": []
    },
    "257": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret[routing]",
      "params": {},
      "block": "dynamic_struct_ret",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "258": {
      "op": "bytec_3 // \"dynamic_struct\"",
      "defined_out": [
        "\"dynamic_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"dynamic_struct\""
      ]
    },
    "259": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "260": {
      "error": "check self.dynamic_struct exists",
      "op": "assert // check self.dynamic_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "261": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x151f7c75"
      ]
    },
    "262": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ]
    },
    "263": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "264": {
      "op": "log",
      "stack_out": []
    },
    "265": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "266": {
      "op": "return",
      "stack_out": []
    },
    "267": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg[routing]",
      "params": {},
      "block": "fixed_arr_arg",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arg#0"
      ],
      "stack_out": [
        "arg#0"
      ]
    },
    "270": {
      "op": "dup",
      "defined_out": [
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)"
      ]
    },
    "271": {
      "op": "len",
      "defined_out": [
        "arg#0",
        "len%0#0"
      ],
      "stack_out": [
        "arg#0",
        "len%0#0"
      ]
    },
    "272": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "arg#0",
        "len%0#0"
      ],
      "stack_out": [
        "arg#0",
        "len%0#0",
        "48"
      ]
    },
    "274": {
      "op": "==",
      "defined_out": [
        "arg#0",
        "eq%0#0"
      ],
      "stack_out": [
        "arg#0",
        "eq%0#0"
      ]
    },
    "275": {
      "error": "invalid number of bytes for (uint64,uint64)[3]",
      "op": "assert // invalid number of bytes for (uint64,uint64)[3]",
      "stack_out": [
        "arg#0"
      ]
    },
    "276": {
      "op": "bytec 4 // \"fixed_arr\"",
      "defined_out": [
        "\"fixed_arr\"",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "\"fixed_arr\""
      ]
    },
    "278": {
      "op": "swap",
      "stack_out": [
        "\"fixed_arr\"",
        "arg#0"
      ]
    },
    "279": {
      "op": "app_global_put",
      "stack_out": []
    },
    "280": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "281": {
      "op": "return",
      "stack_out": []
    },
    "282": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret[routing]",
      "params": {},
      "block": "fixed_arr_ret",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "283": {
      "op": "bytec 4 // \"fixed_arr\"",
      "defined_out": [
        "\"fixed_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_arr\""
      ]
    },
    "285": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "286": {
      "error": "check self.fixed_arr exists",
      "op": "assert // check self.fixed_arr exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "287": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x151f7c75"
      ]
    },
    "288": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ]
    },
    "289": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "290": {
      "op": "log",
      "stack_out": []
    },
    "291": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "292": {
      "op": "return",
      "stack_out": []
    },
    "293": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg[routing]",
      "params": {},
      "block": "native_arr_arg",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arg#0"
      ],
      "stack_out": [
        "arg#0"
      ]
    },
    "296": {
      "op": "dup",
      "defined_out": [
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)"
      ]
    },
    "297": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)",
        "0"
      ]
    },
    "298": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%array_length%0#0"
      ]
    },
    "299": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "aggregate%array_length%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%array_length%0#0",
        "16"
      ]
    },
    "300": {
      "op": "*",
      "defined_out": [
        "arg#0",
        "mul%0#0"
      ],
      "stack_out": [
        "arg#0",
        "mul%0#0"
      ]
    },
    "301": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "arg#0",
        "mul%0#0"
      ],
      "stack_out": [
        "arg#0",
        "mul%0#0",
        "2"
      ]
    },
    "303": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "add%0#0"
      ]
    },
    "304": {
      "op": "dig 1",
      "stack_out": [
        "arg#0",
        "add%0#0",
        "arg#0 (copy)"
      ]
    },
    "306": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "arg#0",
        "len%0#0"
      ],
      "stack_out": [
        "arg#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "307": {
      "op": "==",
      "defined_out": [
        "arg#0",
        "eq%0#0"
      ],
      "stack_out": [
        "arg#0",
        "eq%0#0"
      ]
    },
    "308": {
      "error": "invalid number of bytes for (len+(uint64,uint64)[])",
      "op": "assert // invalid number of bytes for (len+(uint64,uint64)[])",
      "stack_out": [
        "arg#0"
      ]
    },
    "309": {
      "op": "bytec 5 // \"native_arr\"",
      "defined_out": [
        "\"native_arr\"",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "\"native_arr\""
      ]
    },
    "311": {
      "op": "swap",
      "stack_out": [
        "\"native_arr\"",
        "arg#0"
      ]
    },
    "312": {
      "op": "app_global_put",
      "stack_out": []
    },
    "313": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "314": {
      "op": "return",
      "stack_out": []
    },
    "315": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret[routing]",
      "params": {},
      "block": "native_arr_ret",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "316": {
      "op": "bytec 5 // \"native_arr\"",
      "defined_out": [
        "\"native_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"native_arr\""
      ]
    },
    "318": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "319": {
      "error": "check self.native_arr exists",
      "op": "assert // check self.native_arr exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "320": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x151f7c75"
      ]
    },
    "321": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ]
    },
    "322": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "323": {
      "op": "log",
      "stack_out": []
    },
    "324": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "325": {
      "op": "return",
      "stack_out": []
    },
    "326": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.log_it[routing]",
      "params": {},
      "block": "log_it",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "327": {
      "op": "bytec_1 // \"fixed_struct\"",
      "defined_out": [
        "\"fixed_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_struct\""
      ]
    },
    "328": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "329": {
      "error": "check self.fixed_struct exists",
      "op": "assert // check self.fixed_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "330": {
      "op": "log",
      "stack_out": []
    },
    "331": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "332": {
      "op": "bytec_2 // \"nested_struct\"",
      "defined_out": [
        "\"nested_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested_struct\""
      ]
    },
    "333": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "334": {
      "error": "check self.nested_struct exists",
      "op": "assert // check self.nested_struct exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "335": {
      "op": "log",
      "stack_out": []
    },
    "336": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "337": {
      "op": "bytec_3 // \"dynamic_struct\"",
      "defined_out": [
        "\"dynamic_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"dynamic_struct\""
      ]
    },
    "338": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "339": {
      "error": "check self.dynamic_struct exists",
      "op": "assert // check self.dynamic_struct exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "340": {
      "op": "log",
      "stack_out": []
    },
    "341": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "342": {
      "op": "bytec 4 // \"fixed_arr\"",
      "defined_out": [
        "\"fixed_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_arr\""
      ]
    },
    "344": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "345": {
      "error": "check self.fixed_arr exists",
      "op": "assert // check self.fixed_arr exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "346": {
      "op": "log",
      "stack_out": []
    },
    "347": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "348": {
      "op": "bytec 5 // \"native_arr\"",
      "defined_out": [
        "\"native_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"native_arr\""
      ]
    },
    "350": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "351": {
      "error": "check self.native_arr exists",
      "op": "assert // check self.native_arr exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "352": {
      "op": "log",
      "stack_out": []
    },
    "353": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "354": {
      "op": "return",
      "stack_out": []
    }
  }
}