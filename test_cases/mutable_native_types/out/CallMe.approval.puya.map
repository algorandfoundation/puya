{
  "version": 3,
  "sources": [
    "../abi_call.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAQK;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEG;AAAA;AAAA;AAFH;AAAA;AAMU;AAAA;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEG;AAAA;AAAA;AAFH;AAAA;AAMU;AAAA;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEG;AAAA;AAAA;AAFH;AAAA;AAMU;AAAA;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEG;;AAAA;AAAA;AAFH;AAAA;AAMU;AAAA;;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEG;;AAAA;AAAA;AAFH;AAAA;AAMU;AAAA;;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAMO;AAAA;AAAA;AAAA;AAAJ;AACI;AAAA;AAAA;AAAA;AAAJ;AACI;AAAA;AAAA;AAAA;AAAJ;AACI;AAAA;;AAAA;AAAA;AAAJ;AACI;AAAA;;AAAA;AAAA;AAAJ;AANH;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 16 2"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 \"fixed_struct\" \"nested_struct\" \"dynamic_struct\" \"fixed_arr\" \"native_arr\""
    },
    "77": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "79": {
      "op": "bz main___algopy_default_create@22",
      "stack_out": []
    },
    "82": {
      "op": "pushbytes 0x24378d3c // method \"delete()void\"",
      "defined_out": [
        "Method(delete()void)"
      ],
      "stack_out": [
        "Method(delete()void)"
      ]
    },
    "88": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(delete()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(delete()void)",
        "tmp%2#0"
      ]
    },
    "91": {
      "op": "match main_delete_route@5",
      "stack_out": []
    },
    "95": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "97": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "98": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "99": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "101": {
      "op": "assert",
      "stack_out": []
    },
    "102": {
      "op": "pushbytess 0x11b19b95 0xd28b964a 0xea18655f 0xbb3bfdb7 0x46ec14a0 0x9b4d0926 0x4f0deb50 0x59664ab6 0x125d1376 0x818e4a62 0x9bbe1032 // method \"fixed_struct_arg((uint64,uint64))void\", method \"fixed_struct_ret()(uint64,uint64)\", method \"nested_struct_arg(((uint64,uint64),uint64))void\", method \"nested_struct_ret()((uint64,uint64),uint64)\", method \"dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void\", method \"dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])\", method \"fixed_arr_arg((uint64,uint64)[3])void\", method \"fixed_arr_ret()(uint64,uint64)[3]\", method \"native_arr_arg((uint64,uint64)[])void\", method \"native_arr_ret()(uint64,uint64)[]\", method \"log_it()void\"",
      "defined_out": [
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(log_it()void)",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))"
      ],
      "stack_out": [
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(log_it()void)"
      ]
    },
    "159": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(log_it()void)",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "tmp%12#0"
      ],
      "stack_out": [
        "Method(fixed_struct_arg((uint64,uint64))void)",
        "Method(fixed_struct_ret()(uint64,uint64))",
        "Method(nested_struct_arg(((uint64,uint64),uint64))void)",
        "Method(nested_struct_ret()((uint64,uint64),uint64))",
        "Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)",
        "Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))",
        "Method(fixed_arr_arg((uint64,uint64)[3])void)",
        "Method(fixed_arr_ret()(uint64,uint64)[3])",
        "Method(native_arr_arg((uint64,uint64)[])void)",
        "Method(native_arr_ret()(uint64,uint64)[])",
        "Method(log_it()void)",
        "tmp%12#0"
      ]
    },
    "162": {
      "op": "match fixed_struct_arg fixed_struct_ret nested_struct_arg nested_struct_ret dynamic_struct_arg dynamic_struct_ret fixed_arr_arg fixed_arr_ret native_arr_arg native_arr_ret log_it",
      "stack_out": []
    },
    "186": {
      "op": "err"
    },
    "187": {
      "block": "main_delete_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "189": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "DeleteApplication"
      ]
    },
    "191": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "192": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "194": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "195": {
      "error": "OnCompletion must be DeleteApplication && can only call when not creating",
      "op": "assert // OnCompletion must be DeleteApplication && can only call when not creating",
      "stack_out": []
    },
    "196": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "197": {
      "op": "return",
      "stack_out": []
    },
    "198": {
      "block": "main___algopy_default_create@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "200": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "201": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "203": {
      "op": "!",
      "defined_out": [
        "tmp%14#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%16#0"
      ]
    },
    "204": {
      "op": "&&",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "205": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "206": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "207": {
      "op": "return",
      "stack_out": []
    },
    "208": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg[routing]",
      "params": {},
      "block": "fixed_struct_arg",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arg#0"
      ],
      "stack_out": [
        "arg#0"
      ]
    },
    "211": {
      "op": "dup",
      "defined_out": [
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)"
      ]
    },
    "212": {
      "op": "len",
      "defined_out": [
        "arg#0",
        "len%0#0"
      ],
      "stack_out": [
        "arg#0",
        "len%0#0"
      ]
    },
    "213": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "arg#0",
        "len%0#0"
      ],
      "stack_out": [
        "arg#0",
        "len%0#0",
        "16"
      ]
    },
    "214": {
      "op": "==",
      "defined_out": [
        "arg#0",
        "eq%0#0"
      ],
      "stack_out": [
        "arg#0",
        "eq%0#0"
      ]
    },
    "215": {
      "error": "invalid number of bytes for test_cases.mutable_native_types.abi_call.FixedStruct",
      "op": "assert // invalid number of bytes for test_cases.mutable_native_types.abi_call.FixedStruct",
      "stack_out": [
        "arg#0"
      ]
    },
    "216": {
      "op": "bytec_1 // \"fixed_struct\"",
      "defined_out": [
        "\"fixed_struct\"",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "\"fixed_struct\""
      ]
    },
    "217": {
      "op": "swap",
      "stack_out": [
        "\"fixed_struct\"",
        "arg#0"
      ]
    },
    "218": {
      "op": "app_global_put",
      "stack_out": []
    },
    "219": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "220": {
      "op": "return",
      "stack_out": []
    },
    "221": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret[routing]",
      "params": {},
      "block": "fixed_struct_ret",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "222": {
      "op": "bytec_1 // \"fixed_struct\"",
      "defined_out": [
        "\"fixed_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_struct\""
      ]
    },
    "223": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "224": {
      "error": "check self.fixed_struct exists",
      "op": "assert // check self.fixed_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "225": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x151f7c75"
      ]
    },
    "226": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ]
    },
    "227": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "228": {
      "op": "log",
      "stack_out": []
    },
    "229": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "230": {
      "op": "return",
      "stack_out": []
    },
    "231": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg[routing]",
      "params": {},
      "block": "nested_struct_arg",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arg#0"
      ],
      "stack_out": [
        "arg#0"
      ]
    },
    "234": {
      "op": "dup",
      "defined_out": [
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)"
      ]
    },
    "235": {
      "op": "len",
      "defined_out": [
        "arg#0",
        "len%0#0"
      ],
      "stack_out": [
        "arg#0",
        "len%0#0"
      ]
    },
    "236": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "arg#0",
        "len%0#0"
      ],
      "stack_out": [
        "arg#0",
        "len%0#0",
        "24"
      ]
    },
    "238": {
      "op": "==",
      "defined_out": [
        "arg#0",
        "eq%0#0"
      ],
      "stack_out": [
        "arg#0",
        "eq%0#0"
      ]
    },
    "239": {
      "error": "invalid number of bytes for test_cases.mutable_native_types.abi_call.NestedStruct",
      "op": "assert // invalid number of bytes for test_cases.mutable_native_types.abi_call.NestedStruct",
      "stack_out": [
        "arg#0"
      ]
    },
    "240": {
      "op": "bytec_2 // \"nested_struct\"",
      "defined_out": [
        "\"nested_struct\"",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "\"nested_struct\""
      ]
    },
    "241": {
      "op": "swap",
      "stack_out": [
        "\"nested_struct\"",
        "arg#0"
      ]
    },
    "242": {
      "op": "app_global_put",
      "stack_out": []
    },
    "243": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "244": {
      "op": "return",
      "stack_out": []
    },
    "245": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret[routing]",
      "params": {},
      "block": "nested_struct_ret",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "246": {
      "op": "bytec_2 // \"nested_struct\"",
      "defined_out": [
        "\"nested_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested_struct\""
      ]
    },
    "247": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "248": {
      "error": "check self.nested_struct exists",
      "op": "assert // check self.nested_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "249": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x151f7c75"
      ]
    },
    "250": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ]
    },
    "251": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "252": {
      "op": "log",
      "stack_out": []
    },
    "253": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "254": {
      "op": "return",
      "stack_out": []
    },
    "255": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg[routing]",
      "params": {},
      "block": "dynamic_struct_arg",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arg#0"
      ],
      "stack_out": [
        "arg#0"
      ]
    },
    "258": {
      "op": "dup",
      "defined_out": [
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)"
      ]
    },
    "259": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)",
        "16"
      ]
    },
    "260": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "arg#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0"
      ]
    },
    "261": {
      "op": "dup",
      "defined_out": [
        "arg#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ]
    },
    "262": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "arg#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "22"
      ]
    },
    "264": {
      "op": "==",
      "defined_out": [
        "arg#0",
        "eq%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "eq%0#0"
      ]
    },
    "265": {
      "error": "invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))",
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0"
      ]
    },
    "266": {
      "op": "dig 1",
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "arg#0 (copy)"
      ]
    },
    "268": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "arg#0",
        "arg#0 (copy)",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "arg#0 (copy)",
        "18"
      ]
    },
    "270": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "arg#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "271": {
      "op": "dig 2",
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "arg#0 (copy)"
      ]
    },
    "273": {
      "op": "uncover 2",
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "arg#0 (copy)",
        "extract_uint16%0#0"
      ]
    },
    "275": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "arg#0",
        "arg#0 (copy)",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "arg#0 (copy)",
        "extract_uint16%0#0",
        "aggregate%extract_uint16%1#0 (copy)"
      ]
    },
    "277": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0"
      ]
    },
    "278": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "0"
      ]
    },
    "279": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%extract_uint16%1#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%array_length%0#0"
      ]
    },
    "280": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "aggregate%array_length%0#0",
        "aggregate%extract_uint16%1#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%array_length%0#0",
        "24"
      ]
    },
    "282": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0"
      ]
    },
    "283": {
      "op": "dup2",
      "defined_out": [
        "add%1#0",
        "add%1#0 (copy)",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "add%1#0 (copy)"
      ]
    },
    "284": {
      "op": "==",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "arg#0",
        "eq%1#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "eq%1#0"
      ]
    },
    "285": {
      "error": "invalid tail pointer at index 3 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))",
      "op": "assert // invalid tail pointer at index 3 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))",
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0"
      ]
    },
    "286": {
      "op": "dig 2",
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "arg#0 (copy)"
      ]
    },
    "288": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "20",
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "arg#0 (copy)",
        "20"
      ]
    },
    "290": {
      "op": "extract_uint16",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%3#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "291": {
      "op": "dig 3",
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "aggregate%extract_uint16%3#0",
        "arg#0 (copy)"
      ]
    },
    "293": {
      "op": "uncover 3",
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%extract_uint16%3#0",
        "arg#0 (copy)",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "295": {
      "op": "dig 2",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%3#0 (copy)",
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%extract_uint16%3#0",
        "arg#0 (copy)",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%3#0 (copy)"
      ]
    },
    "297": {
      "op": "substring3",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%1#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%1#0"
      ]
    },
    "298": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%1#0",
        "0"
      ]
    },
    "299": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%1#0",
        "aggregate%array_length%1#0",
        "aggregate%extract_uint16%3#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%array_length%1#0"
      ]
    },
    "300": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "add%1#0",
        "aggregate%array_length%1#0",
        "aggregate%extract_uint16%3#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "301": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "add%2#0",
        "aggregate%extract_uint16%3#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%extract_uint16%3#0",
        "add%2#0"
      ]
    },
    "302": {
      "op": "uncover 2",
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%3#0",
        "add%2#0",
        "add%1#0"
      ]
    },
    "304": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "aggregate%extract_uint16%3#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%3#0",
        "add%3#0"
      ]
    },
    "305": {
      "op": "dup2",
      "defined_out": [
        "add%3#0",
        "add%3#0 (copy)",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%3#0 (copy)",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%3#0",
        "add%3#0",
        "aggregate%extract_uint16%3#0 (copy)",
        "add%3#0 (copy)"
      ]
    },
    "306": {
      "op": "==",
      "defined_out": [
        "add%3#0",
        "aggregate%extract_uint16%3#0",
        "arg#0",
        "eq%2#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%3#0",
        "add%3#0",
        "eq%2#0"
      ]
    },
    "307": {
      "error": "invalid tail pointer at index 4 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))",
      "op": "assert // invalid tail pointer at index 4 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))",
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%3#0",
        "add%3#0"
      ]
    },
    "308": {
      "op": "dig 2",
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%3#0",
        "add%3#0",
        "arg#0 (copy)"
      ]
    },
    "310": {
      "op": "len",
      "defined_out": [
        "add%3#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%len%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%3#0",
        "add%3#0",
        "aggregate%len%0#0"
      ]
    },
    "311": {
      "op": "dig 3",
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%3#0",
        "add%3#0",
        "aggregate%len%0#0",
        "arg#0 (copy)"
      ]
    },
    "313": {
      "op": "uncover 3",
      "stack_out": [
        "arg#0",
        "add%3#0",
        "aggregate%len%0#0",
        "arg#0 (copy)",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "315": {
      "op": "dig 2",
      "defined_out": [
        "add%3#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%len%0#0",
        "aggregate%len%0#0 (copy)",
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "add%3#0",
        "aggregate%len%0#0",
        "arg#0 (copy)",
        "aggregate%extract_uint16%3#0",
        "aggregate%len%0#0 (copy)"
      ]
    },
    "317": {
      "op": "substring3",
      "defined_out": [
        "add%3#0",
        "aggregate%len%0#0",
        "aggregate%substring3%2#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "add%3#0",
        "aggregate%len%0#0",
        "aggregate%substring3%2#0"
      ]
    },
    "318": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arg#0",
        "add%3#0",
        "aggregate%len%0#0",
        "aggregate%substring3%2#0",
        "0"
      ]
    },
    "319": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%3#0",
        "aggregate%array_length%2#0",
        "aggregate%len%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "add%3#0",
        "aggregate%len%0#0",
        "aggregate%array_length%2#0"
      ]
    },
    "320": {
      "op": "intc_2 // 16",
      "stack_out": [
        "arg#0",
        "add%3#0",
        "aggregate%len%0#0",
        "aggregate%array_length%2#0",
        "16"
      ]
    },
    "321": {
      "op": "*",
      "defined_out": [
        "add%3#0",
        "aggregate%len%0#0",
        "arg#0",
        "mul%2#0"
      ],
      "stack_out": [
        "arg#0",
        "add%3#0",
        "aggregate%len%0#0",
        "mul%2#0"
      ]
    },
    "322": {
      "op": "intc_3 // 2",
      "stack_out": [
        "arg#0",
        "add%3#0",
        "aggregate%len%0#0",
        "mul%2#0",
        "2"
      ]
    },
    "323": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "add%4#0",
        "aggregate%len%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "add%3#0",
        "aggregate%len%0#0",
        "add%4#0"
      ]
    },
    "324": {
      "op": "uncover 2",
      "stack_out": [
        "arg#0",
        "aggregate%len%0#0",
        "add%4#0",
        "add%3#0"
      ]
    },
    "326": {
      "op": "+",
      "defined_out": [
        "add%5#0",
        "aggregate%len%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%len%0#0",
        "add%5#0"
      ]
    },
    "327": {
      "op": "==",
      "defined_out": [
        "arg#0",
        "eq%3#0"
      ],
      "stack_out": [
        "arg#0",
        "eq%3#0"
      ]
    },
    "328": {
      "error": "invalid number of bytes for test_cases.mutable_native_types.abi_call.DynamicStruct",
      "op": "assert // invalid number of bytes for test_cases.mutable_native_types.abi_call.DynamicStruct",
      "stack_out": [
        "arg#0"
      ]
    },
    "329": {
      "op": "bytec_3 // \"dynamic_struct\"",
      "defined_out": [
        "\"dynamic_struct\"",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "\"dynamic_struct\""
      ]
    },
    "330": {
      "op": "swap",
      "stack_out": [
        "\"dynamic_struct\"",
        "arg#0"
      ]
    },
    "331": {
      "op": "app_global_put",
      "stack_out": []
    },
    "332": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "333": {
      "op": "return",
      "stack_out": []
    },
    "334": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret[routing]",
      "params": {},
      "block": "dynamic_struct_ret",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "335": {
      "op": "bytec_3 // \"dynamic_struct\"",
      "defined_out": [
        "\"dynamic_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"dynamic_struct\""
      ]
    },
    "336": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "337": {
      "error": "check self.dynamic_struct exists",
      "op": "assert // check self.dynamic_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "338": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x151f7c75"
      ]
    },
    "339": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ]
    },
    "340": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "341": {
      "op": "log",
      "stack_out": []
    },
    "342": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "343": {
      "op": "return",
      "stack_out": []
    },
    "344": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg[routing]",
      "params": {},
      "block": "fixed_arr_arg",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arg#0"
      ],
      "stack_out": [
        "arg#0"
      ]
    },
    "347": {
      "op": "dup",
      "defined_out": [
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)"
      ]
    },
    "348": {
      "op": "len",
      "defined_out": [
        "arg#0",
        "len%0#0"
      ],
      "stack_out": [
        "arg#0",
        "len%0#0"
      ]
    },
    "349": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "arg#0",
        "len%0#0"
      ],
      "stack_out": [
        "arg#0",
        "len%0#0",
        "48"
      ]
    },
    "351": {
      "op": "==",
      "defined_out": [
        "arg#0",
        "eq%0#0"
      ],
      "stack_out": [
        "arg#0",
        "eq%0#0"
      ]
    },
    "352": {
      "error": "invalid number of bytes for arc4.static_array<test_cases.mutable_native_types.abi_call.FixedStruct, 3>",
      "op": "assert // invalid number of bytes for arc4.static_array<test_cases.mutable_native_types.abi_call.FixedStruct, 3>",
      "stack_out": [
        "arg#0"
      ]
    },
    "353": {
      "op": "bytec 4 // \"fixed_arr\"",
      "defined_out": [
        "\"fixed_arr\"",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "\"fixed_arr\""
      ]
    },
    "355": {
      "op": "swap",
      "stack_out": [
        "\"fixed_arr\"",
        "arg#0"
      ]
    },
    "356": {
      "op": "app_global_put",
      "stack_out": []
    },
    "357": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "358": {
      "op": "return",
      "stack_out": []
    },
    "359": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret[routing]",
      "params": {},
      "block": "fixed_arr_ret",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "360": {
      "op": "bytec 4 // \"fixed_arr\"",
      "defined_out": [
        "\"fixed_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_arr\""
      ]
    },
    "362": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "363": {
      "error": "check self.fixed_arr exists",
      "op": "assert // check self.fixed_arr exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "364": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x151f7c75"
      ]
    },
    "365": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ]
    },
    "366": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "367": {
      "op": "log",
      "stack_out": []
    },
    "368": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "369": {
      "op": "return",
      "stack_out": []
    },
    "370": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg[routing]",
      "params": {},
      "block": "native_arr_arg",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arg#0"
      ],
      "stack_out": [
        "arg#0"
      ]
    },
    "373": {
      "op": "dup",
      "defined_out": [
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)"
      ]
    },
    "374": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)",
        "0"
      ]
    },
    "375": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%array_length%0#0"
      ]
    },
    "376": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "aggregate%array_length%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%array_length%0#0",
        "16"
      ]
    },
    "377": {
      "op": "*",
      "defined_out": [
        "arg#0",
        "mul%0#0"
      ],
      "stack_out": [
        "arg#0",
        "mul%0#0"
      ]
    },
    "378": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "arg#0",
        "mul%0#0"
      ],
      "stack_out": [
        "arg#0",
        "mul%0#0",
        "2"
      ]
    },
    "379": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "add%0#0"
      ]
    },
    "380": {
      "op": "dig 1",
      "stack_out": [
        "arg#0",
        "add%0#0",
        "arg#0 (copy)"
      ]
    },
    "382": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "arg#0",
        "len%0#0"
      ],
      "stack_out": [
        "arg#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "383": {
      "op": "==",
      "defined_out": [
        "arg#0",
        "eq%0#0"
      ],
      "stack_out": [
        "arg#0",
        "eq%0#0"
      ]
    },
    "384": {
      "error": "invalid number of bytes for arc4.dynamic_array<test_cases.mutable_native_types.abi_call.FixedStruct>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<test_cases.mutable_native_types.abi_call.FixedStruct>",
      "stack_out": [
        "arg#0"
      ]
    },
    "385": {
      "op": "bytec 5 // \"native_arr\"",
      "defined_out": [
        "\"native_arr\"",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "\"native_arr\""
      ]
    },
    "387": {
      "op": "swap",
      "stack_out": [
        "\"native_arr\"",
        "arg#0"
      ]
    },
    "388": {
      "op": "app_global_put",
      "stack_out": []
    },
    "389": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "390": {
      "op": "return",
      "stack_out": []
    },
    "391": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret[routing]",
      "params": {},
      "block": "native_arr_ret",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "392": {
      "op": "bytec 5 // \"native_arr\"",
      "defined_out": [
        "\"native_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"native_arr\""
      ]
    },
    "394": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "395": {
      "error": "check self.native_arr exists",
      "op": "assert // check self.native_arr exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "396": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x151f7c75"
      ]
    },
    "397": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ]
    },
    "398": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "399": {
      "op": "log",
      "stack_out": []
    },
    "400": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "401": {
      "op": "return",
      "stack_out": []
    },
    "402": {
      "subroutine": "test_cases.mutable_native_types.abi_call.CallMe.log_it[routing]",
      "params": {},
      "block": "log_it",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "403": {
      "op": "bytec_1 // \"fixed_struct\"",
      "defined_out": [
        "\"fixed_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_struct\""
      ]
    },
    "404": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "405": {
      "error": "check self.fixed_struct exists",
      "op": "assert // check self.fixed_struct exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "406": {
      "op": "log",
      "stack_out": []
    },
    "407": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "408": {
      "op": "bytec_2 // \"nested_struct\"",
      "defined_out": [
        "\"nested_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested_struct\""
      ]
    },
    "409": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "410": {
      "error": "check self.nested_struct exists",
      "op": "assert // check self.nested_struct exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "411": {
      "op": "log",
      "stack_out": []
    },
    "412": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "413": {
      "op": "bytec_3 // \"dynamic_struct\"",
      "defined_out": [
        "\"dynamic_struct\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"dynamic_struct\""
      ]
    },
    "414": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "415": {
      "error": "check self.dynamic_struct exists",
      "op": "assert // check self.dynamic_struct exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "416": {
      "op": "log",
      "stack_out": []
    },
    "417": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "418": {
      "op": "bytec 4 // \"fixed_arr\"",
      "defined_out": [
        "\"fixed_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixed_arr\""
      ]
    },
    "420": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "421": {
      "error": "check self.fixed_arr exists",
      "op": "assert // check self.fixed_arr exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "422": {
      "op": "log",
      "stack_out": []
    },
    "423": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "424": {
      "op": "bytec 5 // \"native_arr\"",
      "defined_out": [
        "\"native_arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"native_arr\""
      ]
    },
    "426": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "427": {
      "error": "check self.native_arr exists",
      "op": "assert // check self.native_arr exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "428": {
      "op": "log",
      "stack_out": []
    },
    "429": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "430": {
      "op": "return",
      "stack_out": []
    }
  }
}