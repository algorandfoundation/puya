main test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#2: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#2)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@4, block@17, block@18, block@18, block@18, block@18, block@18, block@18, block@18, block@18, block@18, block@18][tmp%4#0] else goto block@18
    block@4: // switch_case_0_L34
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "create_box()void" => block@5, method "num_tups()uint64" => block@6, method "add_tup((uint64,uint64))void" => block@7, method "get_tup(uint64)(uint64,uint64)" => block@8, method "sum()uint64" => block@9, method "add_many_tups((uint64,uint64)[])void" => block@10, method "add_fixed_tups((uint64,uint64)[3])void" => block@11, method "set_a(uint64)void" => block@12, method "set_b(uint64)void" => block@13, method "get_3_tups(uint64)(uint64,uint64)[3]" => block@14, method "get_all_tups()(uint64,uint64)[]" => block@15, * => block@16}
    block@5: // create_box_route_L38
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.create_box[routing]()
        goto block@16
    block@6: // num_tups_route_L45
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.num_tups[routing]()
        goto block@16
    block@7: // add_tup_route_L49
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup[routing]()
        goto block@16
    block@8: // get_tup_route_L56
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_tup[routing]()
        goto block@16
    block@9: // sum_route_L61
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum[routing]()
        goto block@16
    block@10: // add_many_tups_route_L70
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups[routing]()
        goto block@16
    block@11: // add_fixed_tups_route_L75
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups[routing]()
        goto block@16
    block@12: // set_a_route_L80
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a[routing]()
        goto block@16
    block@13: // set_b_route_L86
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b[routing]()
        goto block@16
    block@14: // get_3_tups_route_L92
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_3_tups[routing]()
        goto block@16
    block@15: // get_all_tups_route_L105
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups[routing]()
        goto block@16
    block@16: // switch_case_next_L34
        fail // this contract does not implement the given ABI method for call NoOp
    block@17: // switch_case_1_L34
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@18: // switch_case_default_L34
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.create_box[routing]() -> void:
    block@0: // L38
        let tmp%0#0: bool = (box_create "tup_bag" 4273u)
        (assert tmp%0#0) // box already exists
        let tmp%1#0: account = (txn Sender)
        (box_replace "tup_bag" 136u tmp%1#0)
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        (box_replace "tup_bag" 168u aggregate%val_as_bytes%0#0)
        let box%box_extract%0#0: Encoded(bool1[8]) = (box_extract "tup_bag" 4272u 1u)
        let aggregate%updated_target%0#0: Encoded(bool1[8]) = (setbit box%box_extract%0#0 0u 1u)
        (box_replace "tup_bag" 4272u aggregate%updated_target%0#0)
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.num_tups[routing]() -> void:
    block@0: // L45
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let tmp%2#0: bytes = (concat 0x151f7c75 box%box_extract%0#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup[routing]() -> void:
    block@0: // L49
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let add_tup%0#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(reinterpret_Encoded(uint64,uint64)%0#0)
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_tup[routing]() -> void:
    block@0: // L56
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%0#1: bool = (< index#0 values%0#0)
        (assert tmp%0#1) // index out of bounds
        let box%box_extract%2#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%0#0: uint64 = (* index#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let tmp%2#0: bytes = (concat 0x151f7c75 aggregate%encoded_element%0#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum[routing]() -> void:
    block@0: // L61
        let total#0: uint64 = 0u
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L64
        let continue_looping%0#0: bool = (< i#0 values%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L65
        let box%box_extract%3#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%0#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 box%box_extract%3#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let values%1#0: uint64 = (extract_uint64 aggregate%encoded_element%0#0 0u)
        let total#0: uint64 = (+ total#0 values%1#0)
        let values%2#0: uint64 = (extract_uint64 aggregate%encoded_element%0#0 8u)
        let total#0: uint64 = (+ total#0 values%2#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@2
    block@5: // after_for_L64
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob total#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups[routing]() -> void:
    block@0: // L70
        let tups#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tups#0 0u)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L72
        let continue_looping%0#0: bool = (< i#0 aggregate%array_length%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L73
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) tups#0)
        let aggregate%bytes_offset%0#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let add_tup%0#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(aggregate%encoded_element%0#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@2
    block@5: // after_for_L72
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups[routing]() -> void:
    block@0: // L75
        let tups#0: Encoded((uint64,uint64)[3]) = (txna ApplicationArgs 1)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L77
        let continue_looping%0#0: bool = (< i#0 3u)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L78
        let aggregate%bytes_offset%0#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 tups#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let add_tup%0#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(aggregate%encoded_element%0#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@2
    block@5: // after_for_L77
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a[routing]() -> void:
    block@0: // L80
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner()
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L83
        let continue_looping%0#0: bool = (< i#0 values%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L84
        let box%index_ok%0#0: bool = (< i#0 8u)
        (assert box%index_ok%0#0) // index out of bounds
        let box%element_offset%0#0: uint64 = (* i#0 16u)
        let box%offset%2#0: uint64 = (+ 8u box%element_offset%0#0)
        (box_replace "tup_bag" box%offset%2#0 reinterpret_Encoded(uint64)%0#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@2
    block@5: // after_for_L83
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b[routing]() -> void:
    block@0: // L86
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner()
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L89
        let continue_looping%0#0: bool = (< i#0 values%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L90
        let box%index_ok%0#0: bool = (< i#0 8u)
        (assert box%index_ok%0#0) // index out of bounds
        let box%element_offset%0#0: uint64 = (* i#0 16u)
        let box%offset%3#0: uint64 = (+ box%element_offset%0#0 16u)
        (box_replace "tup_bag" box%offset%3#0 reinterpret_Encoded(uint64)%0#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@2
    block@5: // after_for_L89
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_3_tups[routing]() -> void:
    block@0: // L92
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let start#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%0#1: uint64 = (+ start#0 3u)
        let tmp%1#1: bool = (>= values%0#0 tmp%0#1)
        (assert tmp%1#1) // not enough items
        let box%box_extract%2#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%0#0: uint64 = (* start#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let tmp%2#1: uint64 = (+ start#0 1u)
        let aggregate%bytes_offset%1#0: uint64 = (* tmp%2#1 16u)
        let aggregate%encoded_element%1#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%1#0 16u) // on error: index access is out of bounds
        let tmp%3#0: uint64 = (+ start#0 2u)
        let aggregate%bytes_offset%2#0: uint64 = (* tmp%3#0 16u)
        let aggregate%encoded_element%2#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%2#0 16u) // on error: index access is out of bounds
        let aggregate%head%1#0: bytes = (concat aggregate%encoded_element%0#0 aggregate%encoded_element%1#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%encoded_element%2#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 aggregate%head%2#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups[routing]() -> void:
    block@0: // L105
        let result#0: Encoded(len+(uint64,uint64)[]) = 0x0000
        let box%box_extract%1#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%1#0)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L110
        let continue_looping%0#0: bool = (< i#0 values%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L111
        let box%box_extract%2#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%0#0: uint64 = (* i#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let concat%0#0: Encoded(len+(uint64,uint64)[]) = (concat result#0 aggregate%encoded_element%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 result#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let result#0: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@2
    block@5: // after_for_L110
        let tmp%1#0: bytes = (concat 0x151f7c75 result#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(tup: Encoded(uint64,uint64)) -> Encoded(uint64,uint64):
    block@0: // L49
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner()
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%0#0: bool = (< values%0#0 8u)
        (assert tmp%0#0) // too many tups
        let box%element_offset%0#0: uint64 = (* values%0#0 16u)
        let box%offset%3#0: uint64 = (+ 8u box%element_offset%0#0)
        (box_replace "tup_bag" box%offset%3#0 tup#0)
        let box%box_extract%2#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%2#0: uint64 = (btoi box%box_extract%2#0)
        let tmp%1#0: uint64 = (+ values%2#0 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        (box_replace "tup_bag" 0u aggregate%val_as_bytes%0#0)
        return tup#0

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner() -> void:
    block@0: // L114
        let box%box_extract%0#0: Encoded(bool1[8]) = (box_extract "tup_bag" 4272u 1u)
        let aggregate%get_bit%0#0: bool = (getbit box%box_extract%0#0 0u)
        (assert aggregate%get_bit%0#0) // app not bootstrapped
        let box%box_extract%1#0: Encoded(uint8[32]) = (box_extract "tup_bag" 136u 32u)
        let tmp%0#0: account = (txn Sender)
        let tmp%1#0: bool = (== box%box_extract%1#0 tmp%0#0)
        (assert tmp%1#0) // sender not authorized
        let box%box_extract%2#0: Encoded(uint64) = (box_extract "tup_bag" 168u 8u)
        let values%2#0: uint64 = (btoi box%box_extract%2#0)
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let tmp%3#0: bool = (== values%2#0 tmp%2#0)
        (assert tmp%3#0) // this error should be impossible
        return 