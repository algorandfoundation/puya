main test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@16
    block@4: // abi_routing_L31
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create_box()void" => block@5, method "num_tups()uint64" => block@6, method "add_tup((uint64,uint64))void" => block@7, method "get_tup(uint64)(uint64,uint64)" => block@8, method "sum()uint64" => block@9, method "add_many_tups((uint64,uint64)[])void" => block@10, method "add_fixed_tups((uint64,uint64)[3])void" => block@11, method "set_a(uint64)void" => block@12, method "set_b(uint64)void" => block@13, method "get_3_tups(uint64)(uint64,uint64)[3]" => block@14, method "get_all_tups()(uint64,uint64)[]" => block@15, * => block@18}
    block@5: // create_box_route_L35
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.create_box()
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0: bool = 1u
        goto block@19
    block@6: // num_tups_route_L41
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let tmp%11#0: uint64 = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.num_tups()
        let val_as_bytes%0#0: bytes[8] = (itob tmp%11#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%12#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#1: bool = 1u
        goto block@19
    block@7: // add_tup_route_L45
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64))%0#0: Encoded((uint64,uint64)) = (txna ApplicationArgs 1)
        let add_tup%0#0: Encoded((uint64,uint64)) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(reinterpret_Encoded((uint64,uint64))%0#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#2: bool = 1u
        goto block@19
    block@8: // get_tup_route_L52
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%21#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%22#0: Encoded((uint64,uint64)) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_tup(tmp%21#0)
        let tmp%23#0: bytes = (concat 0x151f7c75 tmp%22#0)
        (log tmp%23#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#3: bool = 1u
        goto block@19
    block@9: // sum_route_L57
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        (assert tmp%26#0) // can only call when not creating
        let tmp%28#0: uint64 = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum()
        let val_as_bytes%1#0: bytes[8] = (itob tmp%28#0)
        let tmp%29#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
        (log tmp%29#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#4: bool = 1u
        goto block@19
    block@10: // add_many_tups_route_L66
        let tmp%30#0: uint64 = (txn OnCompletion)
        let tmp%31#0: bool = (! tmp%30#0)
        (assert tmp%31#0) // OnCompletion is not NoOp
        let tmp%32#0: uint64 = (txn ApplicationID)
        (assert tmp%32#0) // can only call when not creating
        let reinterpret_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups(reinterpret_Encoded(len+(uint64,uint64)[])%0#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#5: bool = 1u
        goto block@19
    block@11: // add_fixed_tups_route_L71
        let tmp%34#0: uint64 = (txn OnCompletion)
        let tmp%35#0: bool = (! tmp%34#0)
        (assert tmp%35#0) // OnCompletion is not NoOp
        let tmp%36#0: uint64 = (txn ApplicationID)
        (assert tmp%36#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64)[3])%0#0: Encoded((uint64,uint64)[3]) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups(reinterpret_Encoded((uint64,uint64)[3])%0#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#6: bool = 1u
        goto block@19
    block@12: // set_a_route_L76
        let tmp%38#0: uint64 = (txn OnCompletion)
        let tmp%39#0: bool = (! tmp%38#0)
        (assert tmp%39#0) // OnCompletion is not NoOp
        let tmp%40#0: uint64 = (txn ApplicationID)
        (assert tmp%40#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%42#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a(tmp%42#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#7: bool = 1u
        goto block@19
    block@13: // set_b_route_L82
        let tmp%43#0: uint64 = (txn OnCompletion)
        let tmp%44#0: bool = (! tmp%43#0)
        (assert tmp%44#0) // OnCompletion is not NoOp
        let tmp%45#0: uint64 = (txn ApplicationID)
        (assert tmp%45#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%47#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b(tmp%47#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#8: bool = 1u
        goto block@19
    block@14: // get_3_tups_route_L88
        let tmp%48#0: uint64 = (txn OnCompletion)
        let tmp%49#0: bool = (! tmp%48#0)
        (assert tmp%49#0) // OnCompletion is not NoOp
        let tmp%50#0: uint64 = (txn ApplicationID)
        (assert tmp%50#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%52#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        let tmp%53#0: Encoded((uint64,uint64)[3]) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_3_tups(tmp%52#0)
        let tmp%54#0: bytes = (concat 0x151f7c75 tmp%53#0)
        (log tmp%54#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#9: bool = 1u
        goto block@19
    block@15: // get_all_tups_route_L101
        let tmp%55#0: uint64 = (txn OnCompletion)
        let tmp%56#0: bool = (! tmp%55#0)
        (assert tmp%56#0) // OnCompletion is not NoOp
        let tmp%57#0: uint64 = (txn ApplicationID)
        (assert tmp%57#0) // can only call when not creating
        let tmp%59#0: Encoded(len+(uint64,uint64)[]) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups()
        let tmp%60#0: bytes = (concat 0x151f7c75 tmp%59#0)
        (log tmp%60#0)
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#10: bool = 1u
        goto block@19
    block@16: // bare_routing_L31
        let tmp%61#0: uint64 = (txn OnCompletion)
        goto tmp%61#0 ? block@18 : block@17
    block@17: // __algopy_default_create_L1
        let tmp%62#0: uint64 = (txn ApplicationID)
        let tmp%63#0: bool = (! tmp%62#0)
        (assert tmp%63#0) // can only call when creating
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#11: bool = 1u
        goto block@19
    block@18: // after_if_else_L31
        let test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#12: bool = 0u
        goto block@19
    block@19: // after_inlined_test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router___L1
        let tmp%0#1: bool = Ï†(test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#0 <- block@5, test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#1 <- block@6, test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#2 <- block@7, test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#3 <- block@8, test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#4 <- block@9, test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#5 <- block@10, test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#6 <- block@11, test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#7 <- block@12, test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#8 <- block@13, test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#9 <- block@14, test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#10 <- block@15, test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#11 <- block@17, test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__%0#12 <- block@18)
        return tmp%0#1

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.create_box() -> void:
    block@0: // L35
        let tmp%0#0: bool = (box_create "tup_bag" 176u)
        (assert tmp%0#0) // box already exists
        let tmp%1#0: bytes[32] = (txn Sender)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let updated_data%0#0: bytes = ((replace2 136) maybe_value%0#0 tmp%1#0)
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let updated_data%1#0: bytes = ((replace2 168) updated_data%0#0 val_as_bytes%0#0)
        (box_put "tup_bag" updated_data%1#0)
        return 

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.num_tups() -> uint64:
    block@0: // L41
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        return tmp%0#0

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(tup: Encoded((uint64,uint64))) -> Encoded((uint64,uint64)):
    block@0: // L45
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner()
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let tmp%1#0: bool = (< tmp%0#0 8u)
        (assert tmp%1#0) // too many tups
        let extract%1#0: bytes = ((extract 8 128) maybe_value%0#0)
        let write_offset%0#0: uint64 = (* tmp%0#0 16u)
        let updated_array%0#0: bytes = (replace3 extract%1#0 write_offset%0#0 tup#0)
        let updated_data%0#0: bytes = ((replace2 8) maybe_value%0#0 updated_array%0#0)
        let tmp%3#0: uint64 = (extract_uint64 updated_data%0#0 0u)
        let tmp%4#0: uint64 = (+ tmp%3#0 1u)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%4#0)
        let updated_data%1#0: bytes = ((replace2 0) updated_data%0#0 val_as_bytes%0#0)
        (box_put "tup_bag" updated_data%1#0)
        return tup#0

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_tup(index: uint64) -> Encoded((uint64,uint64)):
    block@0: // L52
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let tmp%1#0: bool = (< index#0 tmp%0#0)
        (assert tmp%1#0) // index out of bounds
        let extract%1#0: bytes = ((extract 8 128) maybe_value%0#0)
        let bytes_offset%0#0: uint64 = (* index#0 16u)
        let encoded_element%0#0: bytes = (extract3 extract%1#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        return encoded_element%0#0

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum() -> uint64:
    block@0: // L57
        let total#0: uint64 = 0u
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L60
        let i#1: uint64 = Ï†(i#0 <- block@0, i#2 <- block@2)
        let total#1: uint64 = Ï†(total#0 <- block@0, total#3 <- block@2)
        let continue_looping%0#0: bool = (< i#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L61
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let extract%1#0: bytes = ((extract 8 128) maybe_value%1#0)
        let bytes_offset%0#0: uint64 = (* i#1 16u)
        let tup#0: Encoded((uint64,uint64)) = (extract3 extract%1#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let tmp%1#0: uint64 = (extract_uint64 tup#0 0u)
        let total#2: uint64 = (+ total#1 tmp%1#0)
        let tmp%3#0: uint64 = (extract_uint64 tup#0 8u)
        let total#3: uint64 = (+ total#2 tmp%3#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L60
        return total#1

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups(tups: Encoded(len+(uint64,uint64)[])) -> void:
    block@0: // L66
        let array%array_length%0#1: uint64 = (extract_uint16 tups#0 0u)
        let length%0#0: uint64 = array%array_length%0#1
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L68
        let i#1: uint64 = Ï†(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L69
        let array_trimmed%0#0: bytes = ((extract 2 0) tups#0)
        let bytes_offset%0#0: uint64 = (* i#1 16u)
        let encoded_element%0#0: bytes = (extract3 array_trimmed%0#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let add_tup%0#0: Encoded((uint64,uint64)) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(encoded_element%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L68
        return 

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups(tups: Encoded((uint64,uint64)[3])) -> void:
    block@0: // L71
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L73
        let i#1: uint64 = Ï†(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L74
        let bytes_offset%0#0: uint64 = (* i#1 16u)
        let encoded_element%0#0: bytes = (extract3 tups#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let add_tup%0#0: Encoded((uint64,uint64)) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(encoded_element%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L73
        return 

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a(a: uint64) -> void:
    block@0: // L76
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner()
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L79
        let i#1: uint64 = Ï†(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L80
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let extract%1#0: bytes = ((extract 8 128) maybe_value%1#0)
        let bytes_offset%0#0: uint64 = (* i#1 16u)
        let encoded_element%0#0: bytes = (extract3 extract%1#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let val_as_bytes%0#0: bytes[8] = (itob a#0)
        let updated_data%0#0: bytes = ((replace2 0) encoded_element%0#0 val_as_bytes%0#0)
        let updated_array%0#0: bytes = (replace3 extract%1#0 bytes_offset%0#0 updated_data%0#0)
        let updated_data%1#0: bytes = ((replace2 8) maybe_value%1#0 updated_array%0#0)
        (box_put "tup_bag" updated_data%1#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L79
        return 

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b(b: uint64) -> void:
    block@0: // L82
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner()
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L85
        let i#1: uint64 = Ï†(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L86
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let extract%1#0: bytes = ((extract 8 128) maybe_value%1#0)
        let bytes_offset%0#0: uint64 = (* i#1 16u)
        let encoded_element%0#0: bytes = (extract3 extract%1#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let val_as_bytes%0#0: bytes[8] = (itob b#0)
        let updated_data%0#0: bytes = ((replace2 8) encoded_element%0#0 val_as_bytes%0#0)
        let updated_array%0#0: bytes = (replace3 extract%1#0 bytes_offset%0#0 updated_data%0#0)
        let updated_data%1#0: bytes = ((replace2 8) maybe_value%1#0 updated_array%0#0)
        (box_put "tup_bag" updated_data%1#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L85
        return 

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_3_tups(start: uint64) -> Encoded((uint64,uint64)[3]):
    block@0: // L88
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let tmp%1#0: uint64 = (+ start#0 3u)
        let tmp%2#0: bool = (>= tmp%0#0 tmp%1#0)
        (assert tmp%2#0) // not enough items
        let items#0: Encoded((uint64,uint64)[8]) = ((extract 8 128) maybe_value%0#0)
        let bytes_offset%0#0: uint64 = (* start#0 16u)
        let encoded_element%0#0: bytes = (extract3 items#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let tmp%3#0: uint64 = (+ start#0 1u)
        let bytes_offset%1#0: uint64 = (* tmp%3#0 16u)
        let encoded_element%1#0: bytes = (extract3 items#0 bytes_offset%1#0 16u) // on error: index access is out of bounds
        let tmp%4#0: uint64 = (+ start#0 2u)
        let bytes_offset%2#0: uint64 = (* tmp%4#0 16u)
        let encoded_element%2#0: bytes = (extract3 items#0 bytes_offset%2#0 16u) // on error: index access is out of bounds
        let encoded%1#0: Encoded(((uint64,uint64),(uint64,uint64))) = (concat encoded_element%0#0 encoded_element%1#0)
        let encoded%2#0: Encoded(((uint64,uint64),(uint64,uint64),(uint64,uint64))) = (concat encoded%1#0 encoded_element%2#0)
        return encoded%2#0

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups() -> Encoded(len+(uint64,uint64)[]):
    block@0: // L101
        let result#0: Encoded(len+(uint64,uint64)[]) = 0x0000
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let items#0: Encoded((uint64,uint64)[8]) = ((extract 8 128) maybe_value%0#0)
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L106
        let i#1: uint64 = Ï†(i#0 <- block@0, i#2 <- block@2)
        let result#1: Encoded(len+(uint64,uint64)[]) = Ï†(result#0 <- block@0, result#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L107
        let bytes_offset%0#0: uint64 = (* i#1 16u)
        let encoded_element%0#0: bytes = (extract3 items#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let concat%0#0: Encoded(len+(uint64,uint64)[]) = (concat result#1 encoded_element%0#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 16u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let result#2: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L106
        return result#1

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner() -> void:
    block@0: // L110
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let extract%0#0: bytes = ((extract 136 32) maybe_value%0#0)
        let tmp%0#0: bytes[32] = (txn Sender)
        let tmp%1#0: bool = (== extract%0#0 tmp%0#0)
        (assert tmp%1#0) // sender not authorized
        let tmp%2#0: uint64 = (extract_uint64 maybe_value%0#0 168u)
        let tmp%3#0: uint64 = (global CurrentApplicationID)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        (assert tmp%4#0) // this error should be impossible
        return 