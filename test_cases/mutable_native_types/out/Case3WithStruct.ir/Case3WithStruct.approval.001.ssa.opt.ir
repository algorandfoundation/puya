main test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: bool = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__()
        return tmp%0#1

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let tmp%1#1: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#1)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%11#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L273
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L331
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__puya_arc4_router__() -> bool:
    block@0: // L34
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%0#0 ? block@1 : block@18
    block@1: // abi_routing_L34
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%4#0 ? block@2 : block@17
    block@2: // call_NoOp_L34
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "create_box()void" => block@3, method "num_tups()uint64" => block@4, method "add_tup((uint64,uint64))void" => block@5, method "get_tup(uint64)(uint64,uint64)" => block@6, method "sum()uint64" => block@7, method "add_many_tups((uint64,uint64)[])void" => block@8, method "add_fixed_tups((uint64,uint64)[3])void" => block@9, method "set_a(uint64)void" => block@10, method "set_b(uint64)void" => block@11, method "get_3_tups(uint64)(uint64,uint64)[3]" => block@12, method "get_all_tups()(uint64,uint64)[]" => block@13, * => block@17}
    block@3: // create_box_route_L38
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.create_box[routing]()
        goto block@17
    block@4: // num_tups_route_L45
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.num_tups[routing]()
        goto block@17
    block@5: // add_tup_route_L49
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup[routing]()
        goto block@17
    block@6: // get_tup_route_L56
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_tup[routing]()
        goto block@17
    block@7: // sum_route_L61
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum[routing]()
        goto block@17
    block@8: // add_many_tups_route_L70
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups[routing]()
        goto block@17
    block@9: // add_fixed_tups_route_L75
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups[routing]()
        goto block@17
    block@10: // set_a_route_L80
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a[routing]()
        goto block@17
    block@11: // set_b_route_L86
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b[routing]()
        goto block@17
    block@12: // get_3_tups_route_L92
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_3_tups[routing]()
        goto block@17
    block@13: // get_all_tups_route_L105
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups[routing]()
        goto block@17
    block@17: // after_if_else_L34
        fail
    block@18: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.create_box[routing]() -> void:
    block@0: // L38
        let tmp%0#0: bool = (box_create "tup_bag" 4273u)
        (assert tmp%0#0) // box already exists
        let tmp%1#0: account = (txn Sender)
        let storage_value%0#0: bytes = box_read("tup_bag")
        let encoded_value%0#0: Encoded(uint8[32]) = bytes_encode<uint8[32]>(tmp%1#0)
        let updated_tuple%0#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = replace_value(storage_value%0#0, 2, encoded_value%0#0)
        let box%offset%0#0: uint64 = (+ 0u 136u)
        (box_replace "tup_bag" box%offset%0#0 encoded_value%0#0)
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let storage_value%1#0: bytes = box_read("tup_bag")
        let encoded_value%1#0: Encoded(uint64) = bytes_encode<uint64>(tmp%2#0)
        let updated_tuple%1#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = replace_value(storage_value%1#0, 3, encoded_value%1#0)
        let box%offset%1#0: uint64 = (+ 0u 168u)
        (box_replace "tup_bag" box%offset%1#0 encoded_value%1#0)
        let storage_value%2#0: bytes = box_read("tup_bag")
        let encoded_value%2#0: Encoded(bool1) = bytes_encode<bool1>(1u)
        let updated_tuple%2#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = replace_value(storage_value%2#0, 5, encoded_value%2#0)
        let box%element_byte_offset%0#0: uint64 = (/ 34176u 8u)
        let box%byte_containing_bit_offset%0#0: uint64 = (+ 0u box%element_byte_offset%0#0)
        let box%element_bit_offset%0#0: uint64 = (% 34176u 8u)
        let box%box_extract%0#0: Encoded(bool1[8]) = (box_extract "tup_bag" box%byte_containing_bit_offset%0#0 1u)
        let box%tmp%0#0: Encoded(bool1[8]) = replace_value(box%box_extract%0#0, box%element_bit_offset%0#0, encoded_value%2#0)
        (box_replace "tup_bag" box%byte_containing_bit_offset%0#0 box%tmp%0#0)
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.num_tups[routing]() -> void:
    block@0: // L45
        let storage_value%0#0: bytes = box_read("tup_bag")
        let box%offset%0#0: uint64 = (+ 0u 0u)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" box%offset%0#0 8u)
        let tuple_item%0#0: Encoded(uint64) = box%box_extract%0#0
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%1#0: Encoded(uint64) = tuple_item%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup[routing]() -> void:
    block@0: // L49
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let add_tup%0#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(reinterpret_Encoded(uint64,uint64)%0#0)
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_tup[routing]() -> void:
    block@0: // L56
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let storage_value%0#0: bytes = box_read("tup_bag")
        let box%offset%0#0: uint64 = (+ 0u 0u)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" box%offset%0#0 8u)
        let tuple_item%0#0: Encoded(uint64) = box%box_extract%0#0
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%0#1: bool = (< index#0 values%0#0)
        (assert tmp%0#1) // index out of bounds
        let storage_value%1#0: bytes = box_read("tup_bag")
        let box%offset%1#0: uint64 = (+ 0u 8u)
        let box%box_extract%1#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" box%offset%1#0 128u)
        let tuple_item%1#0: Encoded((uint64,uint64)[8]) = box%box_extract%1#0
        let box%offset%2#0: uint64 = (+ 0u 8u)
        let box%box_extract%2#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" box%offset%2#0 128u)
        let array_item%0#0: Encoded(uint64,uint64) = extract_value(box%box_extract%2#0, index#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 array_item%0#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum[routing]() -> void:
    block@0: // L61
        let total#0: uint64 = 0u
        let storage_value%0#0: bytes = box_read("tup_bag")
        let box%offset%0#0: uint64 = (+ 0u 0u)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" box%offset%0#0 8u)
        let tuple_item%0#0: Encoded(uint64) = box%box_extract%0#0
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L64
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let total#1: uint64 = φ(total#0 <- block@0, total#3 <- block@3)
        let continue_looping%0#0: bool = (< i#1 values%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L65
        let storage_value%1#0: bytes = box_read("tup_bag")
        let box%offset%1#0: uint64 = (+ 0u 8u)
        let box%box_extract%1#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" box%offset%1#0 128u)
        let tuple_item%1#0: Encoded((uint64,uint64)[8]) = box%box_extract%1#0
        let box%offset%2#0: uint64 = (+ 0u 8u)
        let box%box_extract%2#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" box%offset%2#0 128u)
        let tup#0: Encoded(uint64,uint64) = extract_value(box%box_extract%2#0, i#1)
        let box%offset%3#0: uint64 = (+ 0u 8u)
        let box%box_extract%3#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" box%offset%3#0 128u)
        let tuple_item%2#0: Encoded(uint64) = extract_value(box%box_extract%3#0, i#1, 0)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let total#2: uint64 = (+ total#1 values%1#0)
        let box%offset%4#0: uint64 = (+ 0u 8u)
        let box%box_extract%4#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" box%offset%4#0 128u)
        let tuple_item%3#0: Encoded(uint64) = extract_value(box%box_extract%4#0, i#1, 1)
        let values%2#0: uint64 = decode_bytes<uint64>(tuple_item%3#0)
        let total#3: uint64 = (+ total#2 values%2#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@2
    block@5: // after_for_L64
        let tmp%1#0: Encoded(uint64) = bytes_encode<uint64>(total#1)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups[routing]() -> void:
    block@0: // L70
        let tups#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = array_len(tups#0)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L72
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 tmp%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L73
        let array_item%0#0: Encoded(uint64,uint64) = extract_value(tups#0, i#1)
        let add_tup%0#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(array_item%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@2
    block@5: // after_for_L72
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups[routing]() -> void:
    block@0: // L75
        let tups#0: Encoded((uint64,uint64)[3]) = (txna ApplicationArgs 1)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L77
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 3u)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L78
        let array_item%0#0: Encoded(uint64,uint64) = extract_value(tups#0, i#1)
        let add_tup%0#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(array_item%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@2
    block@5: // after_for_L77
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a[routing]() -> void:
    block@0: // L80
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let a#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner()
        let storage_value%0#0: bytes = box_read("tup_bag")
        let box%offset%0#0: uint64 = (+ 0u 0u)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" box%offset%0#0 8u)
        let tuple_item%0#0: Encoded(uint64) = box%box_extract%0#0
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L83
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 values%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L84
        let storage_value%1#0: bytes = box_read("tup_bag")
        let encoded_value%0#0: Encoded(uint64) = reinterpret_Encoded(uint64)%0#0
        let updated_tuple%0#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = replace_value(storage_value%1#0, 1, i#1, 0, encoded_value%0#0)
        let box%offset%1#0: uint64 = (+ 0u 8u)
        let box%index_ok%0#0: bool = (< i#1 8u)
        (assert box%index_ok%0#0) // index out of bounds
        let box%element_offset%0#0: uint64 = (* i#1 16u)
        let box%offset%2#0: uint64 = (+ box%offset%1#0 box%element_offset%0#0)
        let box%offset%3#0: uint64 = (+ box%offset%2#0 0u)
        (box_replace "tup_bag" box%offset%3#0 encoded_value%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@2
    block@5: // after_for_L83
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b[routing]() -> void:
    block@0: // L86
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let b#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner()
        let storage_value%0#0: bytes = box_read("tup_bag")
        let box%offset%0#0: uint64 = (+ 0u 0u)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" box%offset%0#0 8u)
        let tuple_item%0#0: Encoded(uint64) = box%box_extract%0#0
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L89
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 values%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L90
        let storage_value%1#0: bytes = box_read("tup_bag")
        let encoded_value%0#0: Encoded(uint64) = reinterpret_Encoded(uint64)%0#0
        let updated_tuple%0#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = replace_value(storage_value%1#0, 1, i#1, 1, encoded_value%0#0)
        let box%offset%1#0: uint64 = (+ 0u 8u)
        let box%index_ok%0#0: bool = (< i#1 8u)
        (assert box%index_ok%0#0) // index out of bounds
        let box%element_offset%0#0: uint64 = (* i#1 16u)
        let box%offset%2#0: uint64 = (+ box%offset%1#0 box%element_offset%0#0)
        let box%offset%3#0: uint64 = (+ box%offset%2#0 8u)
        (box_replace "tup_bag" box%offset%3#0 encoded_value%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@2
    block@5: // after_for_L89
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_3_tups[routing]() -> void:
    block@0: // L92
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let start#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let storage_value%0#0: bytes = box_read("tup_bag")
        let box%offset%0#0: uint64 = (+ 0u 0u)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" box%offset%0#0 8u)
        let tuple_item%0#0: Encoded(uint64) = box%box_extract%0#0
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%0#1: uint64 = (+ start#0 3u)
        let tmp%1#1: bool = (>= values%0#0 tmp%0#1)
        (assert tmp%1#1) // not enough items
        let storage_value%1#0: bytes = box_read("tup_bag")
        let box%offset%1#0: uint64 = (+ 0u 8u)
        let box%box_extract%1#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" box%offset%1#0 128u)
        let items#0: Encoded((uint64,uint64)[8]) = box%box_extract%1#0
        let box%offset%2#0: uint64 = (+ 0u 8u)
        let box%box_extract%2#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" box%offset%2#0 128u)
        let array_item%0#0: Encoded(uint64,uint64) = extract_value(box%box_extract%2#0, start#0)
        let tmp%2#1: uint64 = (+ start#0 1u)
        let box%offset%3#0: uint64 = (+ 0u 8u)
        let box%box_extract%3#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" box%offset%3#0 128u)
        let array_item%1#0: Encoded(uint64,uint64) = extract_value(box%box_extract%3#0, tmp%2#1)
        let tmp%3#0: uint64 = (+ start#0 2u)
        let box%offset%4#0: uint64 = (+ 0u 8u)
        let box%box_extract%4#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" box%offset%4#0 128u)
        let array_item%2#0: Encoded(uint64,uint64) = extract_value(box%box_extract%4#0, tmp%3#0)
        let encoded_array%0#0: Encoded((uint64,uint64)[3]) = bytes_encode<(uint64,uint64)[3]>(array_item%0#0, array_item%1#0, array_item%2#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 encoded_array%0#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups[routing]() -> void:
    block@0: // L105
        let result#0: Encoded(len+(uint64,uint64)[]) = bytes_encode<(len+(uint64,uint64)[])>()
        let storage_value%0#0: bytes = box_read("tup_bag")
        let box%offset%0#0: uint64 = (+ 0u 8u)
        let box%box_extract%0#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" box%offset%0#0 128u)
        let items#0: Encoded((uint64,uint64)[8]) = box%box_extract%0#0
        let storage_value%1#0: bytes = box_read("tup_bag")
        let box%offset%1#0: uint64 = (+ 0u 0u)
        let box%box_extract%1#0: Encoded(uint64) = (box_extract "tup_bag" box%offset%1#0 8u)
        let tuple_item%1#0: Encoded(uint64) = box%box_extract%1#0
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L110
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let result#1: Encoded(len+(uint64,uint64)[]) = φ(result#0 <- block@0, result#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 values%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L111
        let box%offset%2#0: uint64 = (+ 0u 8u)
        let box%box_extract%2#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" box%offset%2#0 128u)
        let array_item%0#0: Encoded(uint64,uint64) = extract_value(box%box_extract%2#0, i#1)
        let tmp%0#1: Encoded((uint64,uint64)[]) = bytes_encode<(uint64,uint64)[]>(array_item%0#0)
        let concat%0#0: Encoded(len+(uint64,uint64)[]) = (concat result#1 tmp%0#1) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 result#1 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let result#2: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@2
    block@5: // after_for_L110
        let tmp%1#0: bytes = (concat 0x151f7c75 result#1)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(tup: Encoded(uint64,uint64)) -> Encoded(uint64,uint64):
    block@0: // L49
        test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner()
        let storage_value%0#0: bytes = box_read("tup_bag")
        let box%offset%0#0: uint64 = (+ 0u 0u)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" box%offset%0#0 8u)
        let tuple_item%0#0: Encoded(uint64) = box%box_extract%0#0
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%0#0: bool = (< values%0#0 8u)
        (assert tmp%0#0) // too many tups
        let storage_value%1#0: bytes = box_read("tup_bag")
        let storage_value%2#0: bytes = box_read("tup_bag")
        let box%offset%1#0: uint64 = (+ 0u 0u)
        let box%box_extract%1#0: Encoded(uint64) = (box_extract "tup_bag" box%offset%1#0 8u)
        let tuple_item%1#0: Encoded(uint64) = box%box_extract%1#0
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let updated_tuple%0#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = replace_value(storage_value%1#0, 1, values%1#0, tup#0)
        let box%offset%2#0: uint64 = (+ 0u 8u)
        let box%index_ok%0#0: bool = (< values%1#0 8u)
        (assert box%index_ok%0#0) // index out of bounds
        let box%element_offset%0#0: uint64 = (* values%1#0 16u)
        let box%offset%3#0: uint64 = (+ box%offset%2#0 box%element_offset%0#0)
        (box_replace "tup_bag" box%offset%3#0 tup#0)
        let storage_value%3#0: bytes = box_read("tup_bag")
        let box%offset%4#0: uint64 = (+ 0u 0u)
        let box%box_extract%2#0: Encoded(uint64) = (box_extract "tup_bag" box%offset%4#0 8u)
        let tuple_item%2#0: Encoded(uint64) = box%box_extract%2#0
        let values%2#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let tmp%1#0: uint64 = (+ values%2#0 1u)
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(tmp%1#0)
        let updated_tuple%1#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = replace_value(storage_value%3#0, 0, encoded_value%0#0)
        let box%offset%5#0: uint64 = (+ 0u 0u)
        (box_replace "tup_bag" box%offset%5#0 encoded_value%0#0)
        return tup#0

subroutine test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner() -> void:
    block@0: // L114
        let storage_value%0#0: bytes = box_read("tup_bag")
        let box%element_byte_offset%0#0: uint64 = (/ 34176u 8u)
        let box%byte_containing_bit_offset%0#0: uint64 = (+ 0u box%element_byte_offset%0#0)
        let box%element_bit_offset%0#0: uint64 = (% 34176u 8u)
        let box%box_extract%0#0: Encoded(bool1[8]) = (box_extract "tup_bag" box%byte_containing_bit_offset%0#0 1u)
        let tuple_item%0#0: bool = extract_value(box%box_extract%0#0, box%element_bit_offset%0#0)
        let values%0#0: bool = decode_bytes<bool>(tuple_item%0#0)
        (assert values%0#0) // app not bootstrapped
        let storage_value%1#0: bytes = box_read("tup_bag")
        let box%offset%0#0: uint64 = (+ 0u 136u)
        let box%box_extract%1#0: Encoded(uint8[32]) = (box_extract "tup_bag" box%offset%0#0 32u)
        let tuple_item%1#0: Encoded(uint8[32]) = box%box_extract%1#0
        let values%1#0: account = decode_bytes<account>(tuple_item%1#0)
        let tmp%0#0: account = (txn Sender)
        let tmp%1#0: bool = (== values%1#0 tmp%0#0)
        (assert tmp%1#0) // sender not authorized
        let storage_value%2#0: bytes = box_read("tup_bag")
        let box%offset%1#0: uint64 = (+ 0u 168u)
        let box%box_extract%2#0: Encoded(uint64) = (box_extract "tup_bag" box%offset%1#0 8u)
        let tuple_item%2#0: Encoded(uint64) = box%box_extract%2#0
        let values%2#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let tmp%3#0: bool = (== values%2#0 tmp%2#0)
        (assert tmp%3#0) // this error should be impossible
        return 