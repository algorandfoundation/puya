// Op                                                                                                                          Stack (out)
// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__algopy_entrypoint_with_init() -> uint64:
subroutine main:
    main_block@0:
        // mutable_native_types/case2_with_immutable_struct.py:24
        // class Case2WithImmStruct(arc4.ARC4Contract):
        txn NumAppArgs                                                                                                         tmp%0#2
        bz main_bare_routing@15 ; b main_abi_routing@4

    main_abi_routing@4:
        // mutable_native_types/case2_with_immutable_struct.py:24
        // class Case2WithImmStruct(arc4.ARC4Contract):
        txna ApplicationArgs 0                                                                                                 tmp%2#0
        method create_box()void                                                                                                tmp%2#0,Method(create_box()void)
        method num_tups()uint64                                                                                                tmp%2#0,Method(create_box()void),Method(num_tups()uint64)
        method add_tup((uint64,uint64))void                                                                                    tmp%2#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void)
        method get_tup(uint64)(uint64,uint64)                                                                                  tmp%2#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64))
        method sum()uint64                                                                                                     tmp%2#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64)
        method add_many_tups((uint64,uint64)[])void                                                                            tmp%2#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void)
        method add_fixed_tups((uint64,uint64)[3])void                                                                          tmp%2#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void),Method(add_fixed_tups((uint64,uint64)[3])void)
        method set_a(uint64)void                                                                                               tmp%2#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void),Method(add_fixed_tups((uint64,uint64)[3])void),Method(set_a(uint64)void)
        method set_b(uint64)void                                                                                               tmp%2#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void),Method(add_fixed_tups((uint64,uint64)[3])void),Method(set_a(uint64)void),Method(set_b(uint64)void)
        method get_3_tups(uint64)(uint64,uint64)[3]                                                                            tmp%2#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void),Method(add_fixed_tups((uint64,uint64)[3])void),Method(set_a(uint64)void),Method(set_b(uint64)void),Method(get_3_tups(uint64)(uint64,uint64)[3])
        l-load tmp%2#0 10                                                                                                      Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void),Method(add_fixed_tups((uint64,uint64)[3])void),Method(set_a(uint64)void),Method(set_b(uint64)void),Method(get_3_tups(uint64)(uint64,uint64)[3]),tmp%2#0
        match main_create_box_route@5 main_num_tups_route@6 main_add_tup_route@7 main_get_tup_route@8 main_sum_route@9 main_add_many_tups_route@10 main_add_fixed_tups_route@11 main_set_a_route@12 main_set_b_route@13 main_get_3_tups_route@14 ; b main_after_if_else@17 

    main_create_box_route@5:
        // mutable_native_types/case2_with_immutable_struct.py:28
        // @arc4.abimethod()
        txn OnCompletion                                                                                                       tmp%3#0
        !                                                                                                                      tmp%4#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                                      tmp%5#0
        assert // can only call when not creating
        callsub create_box
        int 1                                                                                                                  test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@18 

    main_num_tups_route@6:
        // mutable_native_types/case2_with_immutable_struct.py:32
        // @arc4.abimethod()
        txn OnCompletion                                                                                                       tmp%7#0
        !                                                                                                                      tmp%8#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                                      tmp%9#0
        assert // can only call when not creating
        callsub num_tups                                                                                                       to_encode%0#0
        itob                                                                                                                   val_as_bytes%0#0
        byte 0x151f7c75                                                                                                        val_as_bytes%0#0,0x151f7c75
        l-load val_as_bytes%0#0 1                                                                                              0x151f7c75,val_as_bytes%0#0
        concat                                                                                                                 tmp%11#0
        log
        int 1                                                                                                                  test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@18 

    main_add_tup_route@7:
        // mutable_native_types/case2_with_immutable_struct.py:36
        // @arc4.abimethod()
        txn OnCompletion                                                                                                       tmp%12#0
        !                                                                                                                      tmp%13#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                                      tmp%14#0
        assert // can only call when not creating
        // mutable_native_types/case2_with_immutable_struct.py:24
        // class Case2WithImmStruct(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                                                 reinterpret_bytes[16]%0#0
        // mutable_native_types/case2_with_immutable_struct.py:36
        // @arc4.abimethod()
        callsub add_tup
        int 1                                                                                                                  test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@18 

    main_get_tup_route@8:
        // mutable_native_types/case2_with_immutable_struct.py:42
        // @arc4.abimethod()
        txn OnCompletion                                                                                                       tmp%16#0
        !                                                                                                                      tmp%17#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                                      tmp%18#0
        assert // can only call when not creating
        // mutable_native_types/case2_with_immutable_struct.py:24
        // class Case2WithImmStruct(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                                                 reinterpret_bytes[8]%0#0
        btoi                                                                                                                   tmp%20#0
        // mutable_native_types/case2_with_immutable_struct.py:42
        // @arc4.abimethod()
        callsub get_tup                                                                                                        tmp%21#0
        byte 0x151f7c75                                                                                                        tmp%21#0,0x151f7c75
        l-load tmp%21#0 1                                                                                                      0x151f7c75,tmp%21#0
        concat                                                                                                                 tmp%22#0
        log
        int 1                                                                                                                  test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@18 

    main_sum_route@9:
        // mutable_native_types/case2_with_immutable_struct.py:47
        // @arc4.abimethod()
        txn OnCompletion                                                                                                       tmp%23#0
        !                                                                                                                      tmp%24#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                                      tmp%25#0
        assert // can only call when not creating
        callsub sum                                                                                                            to_encode%1#0
        itob                                                                                                                   val_as_bytes%1#0
        byte 0x151f7c75                                                                                                        val_as_bytes%1#0,0x151f7c75
        l-load val_as_bytes%1#0 1                                                                                              0x151f7c75,val_as_bytes%1#0
        concat                                                                                                                 tmp%27#0
        log
        int 1                                                                                                                  test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@18 

    main_add_many_tups_route@10:
        // mutable_native_types/case2_with_immutable_struct.py:56
        // @arc4.abimethod()
        txn OnCompletion                                                                                                       tmp%28#0
        !                                                                                                                      tmp%29#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                                      tmp%30#0
        assert // can only call when not creating
        // mutable_native_types/case2_with_immutable_struct.py:24
        // class Case2WithImmStruct(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                                                 tmp%32#0
        // mutable_native_types/case2_with_immutable_struct.py:56
        // @arc4.abimethod()
        callsub add_many_tups
        int 1                                                                                                                  test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@18 

    main_add_fixed_tups_route@11:
        // mutable_native_types/case2_with_immutable_struct.py:61
        // @arc4.abimethod()
        txn OnCompletion                                                                                                       tmp%33#0
        !                                                                                                                      tmp%34#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                                      tmp%35#0
        assert // can only call when not creating
        // mutable_native_types/case2_with_immutable_struct.py:24
        // class Case2WithImmStruct(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                                                 reinterpret_bytes[48]%0#0
        // mutable_native_types/case2_with_immutable_struct.py:61
        // @arc4.abimethod()
        callsub add_fixed_tups
        int 1                                                                                                                  test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@18 

    main_set_a_route@12:
        // mutable_native_types/case2_with_immutable_struct.py:66
        // @arc4.abimethod()
        txn OnCompletion                                                                                                       tmp%37#0
        !                                                                                                                      tmp%38#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                                      tmp%39#0
        assert // can only call when not creating
        // mutable_native_types/case2_with_immutable_struct.py:24
        // class Case2WithImmStruct(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                                                 reinterpret_bytes[8]%1#0
        btoi                                                                                                                   tmp%41#0
        // mutable_native_types/case2_with_immutable_struct.py:66
        // @arc4.abimethod()
        callsub set_a
        int 1                                                                                                                  test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@18 

    main_set_b_route@13:
        // mutable_native_types/case2_with_immutable_struct.py:72
        // @arc4.abimethod()
        txn OnCompletion                                                                                                       tmp%42#0
        !                                                                                                                      tmp%43#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                                      tmp%44#0
        assert // can only call when not creating
        // mutable_native_types/case2_with_immutable_struct.py:24
        // class Case2WithImmStruct(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                                                 reinterpret_bytes[8]%2#0
        btoi                                                                                                                   tmp%46#0
        // mutable_native_types/case2_with_immutable_struct.py:72
        // @arc4.abimethod()
        callsub set_b
        int 1                                                                                                                  test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@18 

    main_get_3_tups_route@14:
        // mutable_native_types/case2_with_immutable_struct.py:78
        // @arc4.abimethod()
        txn OnCompletion                                                                                                       tmp%47#0
        !                                                                                                                      tmp%48#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                                      tmp%49#0
        assert // can only call when not creating
        // mutable_native_types/case2_with_immutable_struct.py:24
        // class Case2WithImmStruct(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                                                 reinterpret_bytes[8]%3#0
        btoi                                                                                                                   tmp%51#0
        // mutable_native_types/case2_with_immutable_struct.py:78
        // @arc4.abimethod()
        callsub get_3_tups                                                                                                     tmp%52#0
        byte 0x151f7c75                                                                                                        tmp%52#0,0x151f7c75
        l-load tmp%52#0 1                                                                                                      0x151f7c75,tmp%52#0
        concat                                                                                                                 tmp%53#0
        log
        int 1                                                                                                                  test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@18 

    main_bare_routing@15:
        // mutable_native_types/case2_with_immutable_struct.py:24
        // class Case2WithImmStruct(arc4.ARC4Contract):
        txn OnCompletion                                                                                                       tmp%54#0
        bz main___algopy_default_create@16 ; b main_after_if_else@17

    main___algopy_default_create@16:
        txn ApplicationID                                                                                                      tmp%55#0
        !                                                                                                                      tmp%56#0
        assert // can only call when creating
        int 1                                                                                                                  test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@18 

    main_after_if_else@17:
        // mutable_native_types/case2_with_immutable_struct.py:24
        // class Case2WithImmStruct(arc4.ARC4Contract):
        int 0                                                                                                                  test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@18 

    main_after_inlined_test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.__puya_arc4_router__@18:
        v-load tmp%0#1                                                                                                         tmp%0#1
        return


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.create_box() -> void:
subroutine create_box:
    create_box_block@0:
        // mutable_native_types/case2_with_immutable_struct.py:30
        // assert self.tup_bag.create(), "box already existed"
        byte "tup_bag"                                                                                                         "tup_bag"
        int 136                                                                                                                "tup_bag",136
        box_create                                                                                                             tmp%0#0
        assert // box already existed
        retsub


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.num_tups() -> uint64:
subroutine num_tups:
    num_tups_block@0:
        // mutable_native_types/case2_with_immutable_struct.py:34
        // return self.tup_bag.value.count
        byte "tup_bag"                                                                                                         "tup_bag"
        box_get                                                                                                                maybe_value%0#0,maybe_exists%0#0
        assert // check self.tup_bag exists                                                                                    maybe_value%0#0
        l-load maybe_value%0#0 0                                                                                               maybe_value%0#0
        int 0                                                                                                                  maybe_value%0#0,0
        extract_uint64                                                                                                         tmp%0#0
        retsub                                                                                                                 tmp%0#0


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_tup(tup: bytes) -> void:
subroutine add_tup:
    add_tup_block@0:                                                                                                           (𝕡) tup#0 |
        // mutable_native_types/case2_with_immutable_struct.py:38
        // assert self.tup_bag.value.count < self.tup_bag.value.items.length, "too many tups"
        byte "tup_bag"                                                                                                         (𝕡) tup#0 | "tup_bag"
        box_get                                                                                                                (𝕡) tup#0 | maybe_value%0#0,maybe_exists%0#0
        assert // check self.tup_bag exists                                                                                    (𝕡) tup#0 | maybe_value%0#0
        l-load maybe_value%0#0 0                                                                                               (𝕡) tup#0 | maybe_value%0#0
        int 0                                                                                                                  (𝕡) tup#0 | maybe_value%0#0,0
        extract_uint64                                                                                                         (𝕡) tup#0 | tmp%0#0
        int 8                                                                                                                  (𝕡) tup#0 | tmp%0#0,8
        <                                                                                                                      (𝕡) tup#0 | tmp%1#0
        assert // too many tups                                                                                                (𝕡) tup#0 |
        // mutable_native_types/case2_with_immutable_struct.py:39
        // self.tup_bag.value.items[self.tup_bag.value.count] = tup
        byte "tup_bag"                                                                                                         (𝕡) tup#0 | "tup_bag"
        box_get                                                                                                                (𝕡) tup#0 | maybe_value%1#0,maybe_exists%1#0
        assert // check self.tup_bag exists                                                                                    (𝕡) tup#0 | maybe_value%1#0
        l-load-copy maybe_value%1#0 0                                                                                          (𝕡) tup#0 | maybe_value%1#0,maybe_value%1#0 (copy)
        extract 8 128 // on error: Index access is out of bounds                                                               (𝕡) tup#0 | maybe_value%1#0,tmp%2#0
        byte "tup_bag"                                                                                                         (𝕡) tup#0 | maybe_value%1#0,tmp%2#0,"tup_bag"
        box_get                                                                                                                (𝕡) tup#0 | maybe_value%1#0,tmp%2#0,maybe_value%2#0,maybe_exists%2#0
        assert // check self.tup_bag exists                                                                                    (𝕡) tup#0 | maybe_value%1#0,tmp%2#0,maybe_value%2#0
        l-load maybe_value%2#0 0                                                                                               (𝕡) tup#0 | maybe_value%1#0,tmp%2#0,maybe_value%2#0
        int 0                                                                                                                  (𝕡) tup#0 | maybe_value%1#0,tmp%2#0,maybe_value%2#0,0
        extract_uint64                                                                                                         (𝕡) tup#0 | maybe_value%1#0,tmp%2#0,tmp%3#0
        l-load-copy tmp%3#0 0                                                                                                  (𝕡) tup#0 | maybe_value%1#0,tmp%2#0,tmp%3#0,tmp%3#0 (copy)
        int 8                                                                                                                  (𝕡) tup#0 | maybe_value%1#0,tmp%2#0,tmp%3#0,tmp%3#0 (copy),8
        <                                                                                                                      (𝕡) tup#0 | maybe_value%1#0,tmp%2#0,tmp%3#0,index_is_in_bounds%0#0
        assert // Index access is out of bounds                                                                                (𝕡) tup#0 | maybe_value%1#0,tmp%2#0,tmp%3#0
        l-load tmp%3#0 0                                                                                                       (𝕡) tup#0 | maybe_value%1#0,tmp%2#0,tmp%3#0
        int 16                                                                                                                 (𝕡) tup#0 | maybe_value%1#0,tmp%2#0,tmp%3#0,16
        *                                                                                                                      (𝕡) tup#0 | maybe_value%1#0,tmp%2#0,write_offset%0#0
        l-load tmp%2#0 1                                                                                                       (𝕡) tup#0 | maybe_value%1#0,write_offset%0#0,tmp%2#0
        l-load write_offset%0#0 1                                                                                              (𝕡) tup#0 | maybe_value%1#0,tmp%2#0,write_offset%0#0
        p-load tup#0                                                                                                           (𝕡) tup#0 | maybe_value%1#0,tmp%2#0,write_offset%0#0,tup#0 (copy)
        replace3                                                                                                               (𝕡) tup#0 | maybe_value%1#0,updated_target%0#0
        l-load maybe_value%1#0 1                                                                                               (𝕡) tup#0 | updated_target%0#0,maybe_value%1#0
        l-load updated_target%0#0 1                                                                                            (𝕡) tup#0 | maybe_value%1#0,updated_target%0#0
        replace2 8                                                                                                             (𝕡) tup#0 | updated_data%0#0
        byte "tup_bag"                                                                                                         (𝕡) tup#0 | updated_data%0#0,"tup_bag"
        l-load updated_data%0#0 1                                                                                              (𝕡) tup#0 | "tup_bag",updated_data%0#0
        box_put                                                                                                                (𝕡) tup#0 |
        // mutable_native_types/case2_with_immutable_struct.py:40
        // self.tup_bag.value.count += 1
        byte "tup_bag"                                                                                                         (𝕡) tup#0 | "tup_bag"
        box_get                                                                                                                (𝕡) tup#0 | maybe_value%3#0,maybe_exists%3#0
        assert // check self.tup_bag exists                                                                                    (𝕡) tup#0 | maybe_value%3#0
        l-load-copy maybe_value%3#0 0                                                                                          (𝕡) tup#0 | maybe_value%3#0,maybe_value%3#0 (copy)
        int 0                                                                                                                  (𝕡) tup#0 | maybe_value%3#0,maybe_value%3#0 (copy),0
        extract_uint64                                                                                                         (𝕡) tup#0 | maybe_value%3#0,tmp%4#0
        int 1                                                                                                                  (𝕡) tup#0 | maybe_value%3#0,tmp%4#0,1
        +                                                                                                                      (𝕡) tup#0 | maybe_value%3#0,assigned_value%1#0
        itob                                                                                                                   (𝕡) tup#0 | maybe_value%3#0,val_as_bytes%0#0
        l-load maybe_value%3#0 1                                                                                               (𝕡) tup#0 | val_as_bytes%0#0,maybe_value%3#0
        l-load val_as_bytes%0#0 1                                                                                              (𝕡) tup#0 | maybe_value%3#0,val_as_bytes%0#0
        replace2 0                                                                                                             (𝕡) tup#0 | updated_data%1#0
        byte "tup_bag"                                                                                                         (𝕡) tup#0 | updated_data%1#0,"tup_bag"
        l-load updated_data%1#0 1                                                                                              (𝕡) tup#0 | "tup_bag",updated_data%1#0
        box_put                                                                                                                (𝕡) tup#0 |
        retsub


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_tup(index: uint64) -> bytes:
subroutine get_tup:
    get_tup_block@0:                                                                                                           (𝕡) index#0 |
        // mutable_native_types/case2_with_immutable_struct.py:44
        // assert index < self.tup_bag.value.count, "index out of bounds"
        byte "tup_bag"                                                                                                         (𝕡) index#0 | "tup_bag"
        box_get                                                                                                                (𝕡) index#0 | maybe_value%0#0,maybe_exists%0#0
        assert // check self.tup_bag exists                                                                                    (𝕡) index#0 | maybe_value%0#0
        l-load maybe_value%0#0 0                                                                                               (𝕡) index#0 | maybe_value%0#0
        int 0                                                                                                                  (𝕡) index#0 | maybe_value%0#0,0
        extract_uint64                                                                                                         (𝕡) index#0 | tmp%0#0
        p-load index#0                                                                                                         (𝕡) index#0 | tmp%0#0,index#0 (copy)
        l-load tmp%0#0 1                                                                                                       (𝕡) index#0 | index#0 (copy),tmp%0#0
        <                                                                                                                      (𝕡) index#0 | tmp%1#0
        assert // index out of bounds                                                                                          (𝕡) index#0 |
        // mutable_native_types/case2_with_immutable_struct.py:45
        // return self.tup_bag.value.items[index]
        byte "tup_bag"                                                                                                         (𝕡) index#0 | "tup_bag"
        box_get                                                                                                                (𝕡) index#0 | maybe_value%1#0,maybe_exists%1#0
        assert // check self.tup_bag exists                                                                                    (𝕡) index#0 | maybe_value%1#0
        l-load maybe_value%1#0 0                                                                                               (𝕡) index#0 | maybe_value%1#0
        extract 8 128 // on error: Index access is out of bounds                                                               (𝕡) index#0 | tmp%2#0
        p-load index#0                                                                                                         (𝕡) index#0 | tmp%2#0,index#0 (copy)
        int 16                                                                                                                 (𝕡) index#0 | tmp%2#0,index#0 (copy),16
        *                                                                                                                      (𝕡) index#0 | tmp%2#0,item_offset%0#0
        l-load tmp%2#0 1                                                                                                       (𝕡) index#0 | item_offset%0#0,tmp%2#0
        l-load item_offset%0#0 1                                                                                               (𝕡) index#0 | tmp%2#0,item_offset%0#0
        int 16                                                                                                                 (𝕡) index#0 | tmp%2#0,item_offset%0#0,16
        extract3 // on error: Index access is out of bounds                                                                    (𝕡) index#0 | tmp%3#0
        retsub                                                                                                                 tmp%3#0


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.sum() -> uint64:
subroutine sum:
    sum_block@0:
        // mutable_native_types/case2_with_immutable_struct.py:49
        // total = UInt64()
        int 0                                                                                                                  0
        v-store total#0
        // mutable_native_types/case2_with_immutable_struct.py:50
        // for i in urange(self.tup_bag.value.count):
        byte "tup_bag"                                                                                                         "tup_bag"
        box_get                                                                                                                maybe_value%0#0,maybe_exists%0#0
        assert // check self.tup_bag exists                                                                                    maybe_value%0#0
        l-load maybe_value%0#0 0                                                                                               maybe_value%0#0
        int 0                                                                                                                  maybe_value%0#0,0
        extract_uint64                                                                                                         tmp%0#0
        v-store tmp%0#0
        int 0                                                                                                                  0
        v-store i#0
        b sum_for_header@1

    sum_for_header@1:
        // mutable_native_types/case2_with_immutable_struct.py:50
        // for i in urange(self.tup_bag.value.count):
        v-load i#0                                                                                                             i#0
        v-load tmp%0#0                                                                                                         i#0,tmp%0#0
        <                                                                                                                      continue_looping%0#0
        bz sum_after_for@4 ; b sum_for_body@2

    sum_for_body@2:
        // mutable_native_types/case2_with_immutable_struct.py:51
        // tup = self.tup_bag.value.items[i]
        byte "tup_bag"                                                                                                         "tup_bag"
        box_get                                                                                                                maybe_value%1#0,maybe_exists%1#0
        assert // check self.tup_bag exists                                                                                    maybe_value%1#0
        l-load maybe_value%1#0 0                                                                                               maybe_value%1#0
        extract 8 128 // on error: Index access is out of bounds                                                               tmp%1#0
        v-load i#0                                                                                                             tmp%1#0,i#0
        l-store-copy i#0 1                                                                                                     i#0,tmp%1#0,i#0 (copy)
        int 16                                                                                                                 i#0,tmp%1#0,i#0 (copy),16
        *                                                                                                                      i#0,tmp%1#0,item_offset%0#0
        l-load tmp%1#0 1                                                                                                       i#0,item_offset%0#0,tmp%1#0
        l-load item_offset%0#0 1                                                                                               i#0,tmp%1#0,item_offset%0#0
        int 16                                                                                                                 i#0,tmp%1#0,item_offset%0#0,16
        extract3 // on error: Index access is out of bounds                                                                    i#0,tup#0
        // mutable_native_types/case2_with_immutable_struct.py:52
        // total += tup.a
        l-load-copy tup#0 0                                                                                                    i#0,tup#0,tup#0 (copy)
        int 0                                                                                                                  i#0,tup#0,tup#0 (copy),0
        extract_uint64                                                                                                         i#0,tup#0,tmp%2#0
        v-load total#0                                                                                                         i#0,tup#0,tmp%2#0,total#0
        l-load tmp%2#0 1                                                                                                       i#0,tup#0,total#0,tmp%2#0
        +                                                                                                                      i#0,tup#0,total#0
        // mutable_native_types/case2_with_immutable_struct.py:53
        // total += tup.b
        l-load tup#0 1                                                                                                         i#0,total#0,tup#0
        int 8                                                                                                                  i#0,total#0,tup#0,8
        extract_uint64                                                                                                         i#0,total#0,tmp%3#0
        l-load total#0 1                                                                                                       i#0,tmp%3#0,total#0
        l-load tmp%3#0 1                                                                                                       i#0,total#0,tmp%3#0
        +                                                                                                                      i#0,total#0
        v-store total#0                                                                                                        i#0
        // mutable_native_types/case2_with_immutable_struct.py:50
        // for i in urange(self.tup_bag.value.count):
        l-load i#0 0                                                                                                           i#0
        int 1                                                                                                                  i#0,1
        +                                                                                                                      i#0
        v-store i#0
        b sum_for_header@1

    sum_after_for@4:
        // mutable_native_types/case2_with_immutable_struct.py:54
        // return total
        v-load total#0                                                                                                         total#0
        retsub                                                                                                                 total#0


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_many_tups(tups: bytes) -> void:
subroutine add_many_tups:
    add_many_tups_block@0:                                                                                                     (𝕡) tups#0 |
        // mutable_native_types/case2_with_immutable_struct.py:58
        // for tup in tups:
        p-load tups#0                                                                                                          (𝕡) tups#0 | tups#0 (copy)
        int 0                                                                                                                  (𝕡) tups#0 | tups#0 (copy),0
        extract_uint16                                                                                                         (𝕡) tups#0 | array_length%0#0
        v-store array_length%0#0                                                                                               (𝕡) tups#0 |
        int 0                                                                                                                  (𝕡) tups#0 | 0
        v-store item_index_internal%0#0                                                                                        (𝕡) tups#0 |
        b add_many_tups_for_header@1                                                                                           (𝕡) tups#0 |

    add_many_tups_for_header@1:                                                                                                (𝕡) tups#0 |
        // mutable_native_types/case2_with_immutable_struct.py:58
        // for tup in tups:
        v-load item_index_internal%0#0                                                                                         (𝕡) tups#0 | item_index_internal%0#0
        v-load array_length%0#0                                                                                                (𝕡) tups#0 | item_index_internal%0#0,array_length%0#0
        <                                                                                                                      (𝕡) tups#0 | continue_looping%0#0
        bz add_many_tups_after_for@4 ; b add_many_tups_for_body@2                                                              (𝕡) tups#0 |

    add_many_tups_for_body@2:                                                                                                  (𝕡) tups#0 |
        // mutable_native_types/case2_with_immutable_struct.py:58
        // for tup in tups:
        p-load tups#0                                                                                                          (𝕡) tups#0 | tups#0 (copy)
        extract 2 0                                                                                                            (𝕡) tups#0 | array_head_and_tail%0#0
        v-load item_index_internal%0#0                                                                                         (𝕡) tups#0 | array_head_and_tail%0#0,item_index_internal%0#0
        l-store-copy item_index_internal%0#0 1                                                                                 (𝕡) tups#0 | item_index_internal%0#0,array_head_and_tail%0#0,item_index_internal%0#0 (copy)
        int 16                                                                                                                 (𝕡) tups#0 | item_index_internal%0#0,array_head_and_tail%0#0,item_index_internal%0#0 (copy),16
        *                                                                                                                      (𝕡) tups#0 | item_index_internal%0#0,array_head_and_tail%0#0,item_offset%0#0
        l-load array_head_and_tail%0#0 1                                                                                       (𝕡) tups#0 | item_index_internal%0#0,item_offset%0#0,array_head_and_tail%0#0
        l-load item_offset%0#0 1                                                                                               (𝕡) tups#0 | item_index_internal%0#0,array_head_and_tail%0#0,item_offset%0#0
        int 16                                                                                                                 (𝕡) tups#0 | item_index_internal%0#0,array_head_and_tail%0#0,item_offset%0#0,16
        extract3 // on error: Index access is out of bounds                                                                    (𝕡) tups#0 | item_index_internal%0#0,tup#0
        // mutable_native_types/case2_with_immutable_struct.py:59
        // self.add_tup(tup)
        callsub add_tup                                                                                                        (𝕡) tups#0 | item_index_internal%0#0
        l-load item_index_internal%0#0 0                                                                                       (𝕡) tups#0 | item_index_internal%0#0
        int 1                                                                                                                  (𝕡) tups#0 | item_index_internal%0#0,1
        +                                                                                                                      (𝕡) tups#0 | item_index_internal%0#0
        v-store item_index_internal%0#0                                                                                        (𝕡) tups#0 |
        b add_many_tups_for_header@1                                                                                           (𝕡) tups#0 |

    add_many_tups_after_for@4:                                                                                                 (𝕡) tups#0 |
        retsub


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.add_fixed_tups(tups: bytes) -> void:
subroutine add_fixed_tups:
    add_fixed_tups_block@0:                                                                                                    (𝕡) tups#0 |
        int 0                                                                                                                  (𝕡) tups#0 | 0
        v-store item_index_internal%0#0                                                                                        (𝕡) tups#0 |
        b add_fixed_tups_for_header@1                                                                                          (𝕡) tups#0 |

    add_fixed_tups_for_header@1:                                                                                               (𝕡) tups#0 |
        // mutable_native_types/case2_with_immutable_struct.py:63
        // for tup in tups:
        v-load item_index_internal%0#0                                                                                         (𝕡) tups#0 | item_index_internal%0#0
        int 3                                                                                                                  (𝕡) tups#0 | item_index_internal%0#0,3
        <                                                                                                                      (𝕡) tups#0 | continue_looping%0#0
        bz add_fixed_tups_after_for@4 ; b add_fixed_tups_for_body@2                                                            (𝕡) tups#0 |

    add_fixed_tups_for_body@2:                                                                                                 (𝕡) tups#0 |
        // mutable_native_types/case2_with_immutable_struct.py:63
        // for tup in tups:
        v-load item_index_internal%0#0                                                                                         (𝕡) tups#0 | item_index_internal%0#0
        l-store-copy item_index_internal%0#0 0                                                                                 (𝕡) tups#0 | item_index_internal%0#0,item_index_internal%0#0 (copy)
        int 16                                                                                                                 (𝕡) tups#0 | item_index_internal%0#0,item_index_internal%0#0 (copy),16
        *                                                                                                                      (𝕡) tups#0 | item_index_internal%0#0,item_offset%0#0
        p-load tups#0                                                                                                          (𝕡) tups#0 | item_index_internal%0#0,item_offset%0#0,tups#0 (copy)
        l-load item_offset%0#0 1                                                                                               (𝕡) tups#0 | item_index_internal%0#0,tups#0 (copy),item_offset%0#0
        int 16                                                                                                                 (𝕡) tups#0 | item_index_internal%0#0,tups#0 (copy),item_offset%0#0,16
        extract3 // on error: Index access is out of bounds                                                                    (𝕡) tups#0 | item_index_internal%0#0,tup#0
        // mutable_native_types/case2_with_immutable_struct.py:64
        // self.add_tup(tup)
        callsub add_tup                                                                                                        (𝕡) tups#0 | item_index_internal%0#0
        l-load item_index_internal%0#0 0                                                                                       (𝕡) tups#0 | item_index_internal%0#0
        int 1                                                                                                                  (𝕡) tups#0 | item_index_internal%0#0,1
        +                                                                                                                      (𝕡) tups#0 | item_index_internal%0#0
        v-store item_index_internal%0#0                                                                                        (𝕡) tups#0 |
        b add_fixed_tups_for_header@1                                                                                          (𝕡) tups#0 |

    add_fixed_tups_after_for@4:                                                                                                (𝕡) tups#0 |
        retsub


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_a(a: uint64) -> void:
subroutine set_a:
    set_a_block@0:                                                                                                             (𝕡) a#0 |
        // mutable_native_types/case2_with_immutable_struct.py:68
        // for i in urange(self.tup_bag.value.count):
        byte "tup_bag"                                                                                                         (𝕡) a#0 | "tup_bag"
        box_get                                                                                                                (𝕡) a#0 | maybe_value%0#0,maybe_exists%0#0
        assert // check self.tup_bag exists                                                                                    (𝕡) a#0 | maybe_value%0#0
        l-load maybe_value%0#0 0                                                                                               (𝕡) a#0 | maybe_value%0#0
        int 0                                                                                                                  (𝕡) a#0 | maybe_value%0#0,0
        extract_uint64                                                                                                         (𝕡) a#0 | tmp%0#0
        v-store tmp%0#0                                                                                                        (𝕡) a#0 |
        int 0                                                                                                                  (𝕡) a#0 | 0
        v-store i#0                                                                                                            (𝕡) a#0 |
        b set_a_for_header@1                                                                                                   (𝕡) a#0 |

    set_a_for_header@1:                                                                                                        (𝕡) a#0 |
        // mutable_native_types/case2_with_immutable_struct.py:68
        // for i in urange(self.tup_bag.value.count):
        v-load i#0                                                                                                             (𝕡) a#0 | i#0
        v-load tmp%0#0                                                                                                         (𝕡) a#0 | i#0,tmp%0#0
        <                                                                                                                      (𝕡) a#0 | continue_looping%0#0
        bz set_a_after_for@4 ; b set_a_for_body@2                                                                              (𝕡) a#0 |

    set_a_for_body@2:                                                                                                          (𝕡) a#0 |
        // mutable_native_types/case2_with_immutable_struct.py:69
        // tup = self.tup_bag.value.items[i]
        byte "tup_bag"                                                                                                         (𝕡) a#0 | "tup_bag"
        box_get                                                                                                                (𝕡) a#0 | maybe_value%1#0,maybe_exists%1#0
        assert // check self.tup_bag exists                                                                                    (𝕡) a#0 | maybe_value%1#0
        l-load maybe_value%1#0 0                                                                                               (𝕡) a#0 | maybe_value%1#0
        extract 8 128 // on error: Index access is out of bounds                                                               (𝕡) a#0 | tmp%1#0
        v-load i#0                                                                                                             (𝕡) a#0 | tmp%1#0,i#0
        l-store-copy i#0 1                                                                                                     (𝕡) a#0 | i#0,tmp%1#0,i#0 (copy)
        int 16                                                                                                                 (𝕡) a#0 | i#0,tmp%1#0,i#0 (copy),16
        *                                                                                                                      (𝕡) a#0 | i#0,tmp%1#0,item_offset%0#0
        l-load tmp%1#0 1                                                                                                       (𝕡) a#0 | i#0,item_offset%0#0,tmp%1#0
        l-load-copy item_offset%0#0 1                                                                                          (𝕡) a#0 | i#0,item_offset%0#0,tmp%1#0,item_offset%0#0 (copy)
        int 16                                                                                                                 (𝕡) a#0 | i#0,item_offset%0#0,tmp%1#0,item_offset%0#0 (copy),16
        extract3 // on error: Index access is out of bounds                                                                    (𝕡) a#0 | i#0,item_offset%0#0,tup#0
        // mutable_native_types/case2_with_immutable_struct.py:70
        // self.tup_bag.value.items[i] = tup._replace(a=a)
        int 8                                                                                                                  (𝕡) a#0 | i#0,item_offset%0#0,tup#0,8
        extract_uint64                                                                                                         (𝕡) a#0 | i#0,item_offset%0#0,tmp%2#0
        p-load a#0                                                                                                             (𝕡) a#0 | i#0,item_offset%0#0,tmp%2#0,a#0 (copy)
        itob                                                                                                                   (𝕡) a#0 | i#0,item_offset%0#0,tmp%2#0,val_as_bytes%0#0
        l-load tmp%2#0 1                                                                                                       (𝕡) a#0 | i#0,item_offset%0#0,val_as_bytes%0#0,tmp%2#0
        itob                                                                                                                   (𝕡) a#0 | i#0,item_offset%0#0,val_as_bytes%0#0,val_as_bytes%1#0
        l-load val_as_bytes%0#0 1                                                                                              (𝕡) a#0 | i#0,item_offset%0#0,val_as_bytes%1#0,val_as_bytes%0#0
        l-load val_as_bytes%1#0 1                                                                                              (𝕡) a#0 | i#0,item_offset%0#0,val_as_bytes%0#0,val_as_bytes%1#0
        concat                                                                                                                 (𝕡) a#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0
        byte "tup_bag"                                                                                                         (𝕡) a#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,"tup_bag"
        box_get                                                                                                                (𝕡) a#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,maybe_value%2#0,maybe_exists%2#0
        assert // check self.tup_bag exists                                                                                    (𝕡) a#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,maybe_value%2#0
        l-load-copy maybe_value%2#0 0                                                                                          (𝕡) a#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,maybe_value%2#0,maybe_value%2#0 (copy)
        extract 8 128 // on error: Index access is out of bounds                                                               (𝕡) a#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,maybe_value%2#0,tmp%3#0
        l-load-copy i#0 4                                                                                                      (𝕡) a#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,maybe_value%2#0,tmp%3#0,i#0 (copy)
        int 8                                                                                                                  (𝕡) a#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,maybe_value%2#0,tmp%3#0,i#0 (copy),8
        <                                                                                                                      (𝕡) a#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,maybe_value%2#0,tmp%3#0,index_is_in_bounds%0#0
        assert // Index access is out of bounds                                                                                (𝕡) a#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,maybe_value%2#0,tmp%3#0
        l-load tmp%3#0 0                                                                                                       (𝕡) a#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,maybe_value%2#0,tmp%3#0
        l-load item_offset%0#0 3                                                                                               (𝕡) a#0 | i#0,encoded_tuple_buffer%2#0,maybe_value%2#0,tmp%3#0,item_offset%0#0
        l-load encoded_tuple_buffer%2#0 3                                                                                      (𝕡) a#0 | i#0,maybe_value%2#0,tmp%3#0,item_offset%0#0,encoded_tuple_buffer%2#0
        replace3                                                                                                               (𝕡) a#0 | i#0,maybe_value%2#0,updated_target%0#0
        l-load maybe_value%2#0 1                                                                                               (𝕡) a#0 | i#0,updated_target%0#0,maybe_value%2#0
        l-load updated_target%0#0 1                                                                                            (𝕡) a#0 | i#0,maybe_value%2#0,updated_target%0#0
        replace2 8                                                                                                             (𝕡) a#0 | i#0,updated_data%0#0
        byte "tup_bag"                                                                                                         (𝕡) a#0 | i#0,updated_data%0#0,"tup_bag"
        l-load updated_data%0#0 1                                                                                              (𝕡) a#0 | i#0,"tup_bag",updated_data%0#0
        box_put                                                                                                                (𝕡) a#0 | i#0
        // mutable_native_types/case2_with_immutable_struct.py:68
        // for i in urange(self.tup_bag.value.count):
        l-load i#0 0                                                                                                           (𝕡) a#0 | i#0
        int 1                                                                                                                  (𝕡) a#0 | i#0,1
        +                                                                                                                      (𝕡) a#0 | i#0
        v-store i#0                                                                                                            (𝕡) a#0 |
        b set_a_for_header@1                                                                                                   (𝕡) a#0 |

    set_a_after_for@4:                                                                                                         (𝕡) a#0 |
        retsub


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.set_b(b: uint64) -> void:
subroutine set_b:
    set_b_block@0:                                                                                                             (𝕡) b#0 |
        // mutable_native_types/case2_with_immutable_struct.py:74
        // for i in urange(self.tup_bag.value.count):
        byte "tup_bag"                                                                                                         (𝕡) b#0 | "tup_bag"
        box_get                                                                                                                (𝕡) b#0 | maybe_value%0#0,maybe_exists%0#0
        assert // check self.tup_bag exists                                                                                    (𝕡) b#0 | maybe_value%0#0
        l-load maybe_value%0#0 0                                                                                               (𝕡) b#0 | maybe_value%0#0
        int 0                                                                                                                  (𝕡) b#0 | maybe_value%0#0,0
        extract_uint64                                                                                                         (𝕡) b#0 | tmp%0#0
        v-store tmp%0#0                                                                                                        (𝕡) b#0 |
        int 0                                                                                                                  (𝕡) b#0 | 0
        v-store i#0                                                                                                            (𝕡) b#0 |
        b set_b_for_header@1                                                                                                   (𝕡) b#0 |

    set_b_for_header@1:                                                                                                        (𝕡) b#0 |
        // mutable_native_types/case2_with_immutable_struct.py:74
        // for i in urange(self.tup_bag.value.count):
        v-load i#0                                                                                                             (𝕡) b#0 | i#0
        v-load tmp%0#0                                                                                                         (𝕡) b#0 | i#0,tmp%0#0
        <                                                                                                                      (𝕡) b#0 | continue_looping%0#0
        bz set_b_after_for@4 ; b set_b_for_body@2                                                                              (𝕡) b#0 |

    set_b_for_body@2:                                                                                                          (𝕡) b#0 |
        // mutable_native_types/case2_with_immutable_struct.py:75
        // tup = self.tup_bag.value.items[i]
        byte "tup_bag"                                                                                                         (𝕡) b#0 | "tup_bag"
        box_get                                                                                                                (𝕡) b#0 | maybe_value%1#0,maybe_exists%1#0
        assert // check self.tup_bag exists                                                                                    (𝕡) b#0 | maybe_value%1#0
        l-load maybe_value%1#0 0                                                                                               (𝕡) b#0 | maybe_value%1#0
        extract 8 128 // on error: Index access is out of bounds                                                               (𝕡) b#0 | tmp%1#0
        v-load i#0                                                                                                             (𝕡) b#0 | tmp%1#0,i#0
        l-store-copy i#0 1                                                                                                     (𝕡) b#0 | i#0,tmp%1#0,i#0 (copy)
        int 16                                                                                                                 (𝕡) b#0 | i#0,tmp%1#0,i#0 (copy),16
        *                                                                                                                      (𝕡) b#0 | i#0,tmp%1#0,item_offset%0#0
        l-load tmp%1#0 1                                                                                                       (𝕡) b#0 | i#0,item_offset%0#0,tmp%1#0
        l-load-copy item_offset%0#0 1                                                                                          (𝕡) b#0 | i#0,item_offset%0#0,tmp%1#0,item_offset%0#0 (copy)
        int 16                                                                                                                 (𝕡) b#0 | i#0,item_offset%0#0,tmp%1#0,item_offset%0#0 (copy),16
        extract3 // on error: Index access is out of bounds                                                                    (𝕡) b#0 | i#0,item_offset%0#0,tup#0
        // mutable_native_types/case2_with_immutable_struct.py:76
        // self.tup_bag.value.items[i] = tup._replace(b=b)
        int 0                                                                                                                  (𝕡) b#0 | i#0,item_offset%0#0,tup#0,0
        extract_uint64                                                                                                         (𝕡) b#0 | i#0,item_offset%0#0,tmp%2#0
        itob                                                                                                                   (𝕡) b#0 | i#0,item_offset%0#0,val_as_bytes%0#0
        p-load b#0                                                                                                             (𝕡) b#0 | i#0,item_offset%0#0,val_as_bytes%0#0,b#0 (copy)
        itob                                                                                                                   (𝕡) b#0 | i#0,item_offset%0#0,val_as_bytes%0#0,val_as_bytes%1#0
        l-load val_as_bytes%0#0 1                                                                                              (𝕡) b#0 | i#0,item_offset%0#0,val_as_bytes%1#0,val_as_bytes%0#0
        l-load val_as_bytes%1#0 1                                                                                              (𝕡) b#0 | i#0,item_offset%0#0,val_as_bytes%0#0,val_as_bytes%1#0
        concat                                                                                                                 (𝕡) b#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0
        byte "tup_bag"                                                                                                         (𝕡) b#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,"tup_bag"
        box_get                                                                                                                (𝕡) b#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,maybe_value%2#0,maybe_exists%2#0
        assert // check self.tup_bag exists                                                                                    (𝕡) b#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,maybe_value%2#0
        l-load-copy maybe_value%2#0 0                                                                                          (𝕡) b#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,maybe_value%2#0,maybe_value%2#0 (copy)
        extract 8 128 // on error: Index access is out of bounds                                                               (𝕡) b#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,maybe_value%2#0,tmp%3#0
        l-load-copy i#0 4                                                                                                      (𝕡) b#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,maybe_value%2#0,tmp%3#0,i#0 (copy)
        int 8                                                                                                                  (𝕡) b#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,maybe_value%2#0,tmp%3#0,i#0 (copy),8
        <                                                                                                                      (𝕡) b#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,maybe_value%2#0,tmp%3#0,index_is_in_bounds%0#0
        assert // Index access is out of bounds                                                                                (𝕡) b#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,maybe_value%2#0,tmp%3#0
        l-load tmp%3#0 0                                                                                                       (𝕡) b#0 | i#0,item_offset%0#0,encoded_tuple_buffer%2#0,maybe_value%2#0,tmp%3#0
        l-load item_offset%0#0 3                                                                                               (𝕡) b#0 | i#0,encoded_tuple_buffer%2#0,maybe_value%2#0,tmp%3#0,item_offset%0#0
        l-load encoded_tuple_buffer%2#0 3                                                                                      (𝕡) b#0 | i#0,maybe_value%2#0,tmp%3#0,item_offset%0#0,encoded_tuple_buffer%2#0
        replace3                                                                                                               (𝕡) b#0 | i#0,maybe_value%2#0,updated_target%0#0
        l-load maybe_value%2#0 1                                                                                               (𝕡) b#0 | i#0,updated_target%0#0,maybe_value%2#0
        l-load updated_target%0#0 1                                                                                            (𝕡) b#0 | i#0,maybe_value%2#0,updated_target%0#0
        replace2 8                                                                                                             (𝕡) b#0 | i#0,updated_data%0#0
        byte "tup_bag"                                                                                                         (𝕡) b#0 | i#0,updated_data%0#0,"tup_bag"
        l-load updated_data%0#0 1                                                                                              (𝕡) b#0 | i#0,"tup_bag",updated_data%0#0
        box_put                                                                                                                (𝕡) b#0 | i#0
        // mutable_native_types/case2_with_immutable_struct.py:74
        // for i in urange(self.tup_bag.value.count):
        l-load i#0 0                                                                                                           (𝕡) b#0 | i#0
        int 1                                                                                                                  (𝕡) b#0 | i#0,1
        +                                                                                                                      (𝕡) b#0 | i#0
        v-store i#0                                                                                                            (𝕡) b#0 |
        b set_b_for_header@1                                                                                                   (𝕡) b#0 |

    set_b_after_for@4:                                                                                                         (𝕡) b#0 |
        retsub


// test_cases.mutable_native_types.case2_with_immutable_struct.Case2WithImmStruct.get_3_tups(start: uint64) -> bytes:
subroutine get_3_tups:
    get_3_tups_block@0:                                                                                                        (𝕡) start#0 |
        // mutable_native_types/case2_with_immutable_struct.py:80
        // assert self.tup_bag.value.count >= start + 3, "not enough items"
        byte "tup_bag"                                                                                                         (𝕡) start#0 | "tup_bag"
        box_get                                                                                                                (𝕡) start#0 | maybe_value%0#0,maybe_exists%0#0
        assert // check self.tup_bag exists                                                                                    (𝕡) start#0 | maybe_value%0#0
        l-load maybe_value%0#0 0                                                                                               (𝕡) start#0 | maybe_value%0#0
        int 0                                                                                                                  (𝕡) start#0 | maybe_value%0#0,0
        extract_uint64                                                                                                         (𝕡) start#0 | tmp%0#0
        p-load start#0                                                                                                         (𝕡) start#0 | tmp%0#0,start#0 (copy)
        int 3                                                                                                                  (𝕡) start#0 | tmp%0#0,start#0 (copy),3
        +                                                                                                                      (𝕡) start#0 | tmp%0#0,tmp%1#0
        l-load tmp%0#0 1                                                                                                       (𝕡) start#0 | tmp%1#0,tmp%0#0
        l-load tmp%1#0 1                                                                                                       (𝕡) start#0 | tmp%0#0,tmp%1#0
        >=                                                                                                                     (𝕡) start#0 | tmp%2#0
        assert // not enough items                                                                                             (𝕡) start#0 |
        // mutable_native_types/case2_with_immutable_struct.py:81
        // items = self.tup_bag.value.items.copy()
        byte "tup_bag"                                                                                                         (𝕡) start#0 | "tup_bag"
        box_get                                                                                                                (𝕡) start#0 | maybe_value%1#0,maybe_exists%1#0
        assert // check self.tup_bag exists                                                                                    (𝕡) start#0 | maybe_value%1#0
        l-load maybe_value%1#0 0                                                                                               (𝕡) start#0 | maybe_value%1#0
        extract 8 128 // on error: Index access is out of bounds                                                               (𝕡) start#0 | items#0
        // mutable_native_types/case2_with_immutable_struct.py:85
        // items[start],
        p-load start#0                                                                                                         (𝕡) start#0 | items#0,start#0 (copy)
        int 16                                                                                                                 (𝕡) start#0 | items#0,start#0 (copy),16
        *                                                                                                                      (𝕡) start#0 | items#0,item_offset%0#0
        l-load-copy items#0 1                                                                                                  (𝕡) start#0 | items#0,item_offset%0#0,items#0 (copy)
        l-load item_offset%0#0 1                                                                                               (𝕡) start#0 | items#0,items#0 (copy),item_offset%0#0
        int 16                                                                                                                 (𝕡) start#0 | items#0,items#0 (copy),item_offset%0#0,16
        extract3 // on error: Index access is out of bounds                                                                    (𝕡) start#0 | items#0,tmp%4#0
        // mutable_native_types/case2_with_immutable_struct.py:86
        // items[start + 1],
        p-load start#0                                                                                                         (𝕡) start#0 | items#0,tmp%4#0,start#0 (copy)
        int 1                                                                                                                  (𝕡) start#0 | items#0,tmp%4#0,start#0 (copy),1
        +                                                                                                                      (𝕡) start#0 | items#0,tmp%4#0,tmp%5#0
        int 16                                                                                                                 (𝕡) start#0 | items#0,tmp%4#0,tmp%5#0,16
        *                                                                                                                      (𝕡) start#0 | items#0,tmp%4#0,item_offset%1#0
        l-load-copy items#0 2                                                                                                  (𝕡) start#0 | items#0,tmp%4#0,item_offset%1#0,items#0 (copy)
        l-load item_offset%1#0 1                                                                                               (𝕡) start#0 | items#0,tmp%4#0,items#0 (copy),item_offset%1#0
        int 16                                                                                                                 (𝕡) start#0 | items#0,tmp%4#0,items#0 (copy),item_offset%1#0,16
        extract3 // on error: Index access is out of bounds                                                                    (𝕡) start#0 | items#0,tmp%4#0,tmp%6#0
        // mutable_native_types/case2_with_immutable_struct.py:87
        // items[start + 2],
        p-load start#0                                                                                                         (𝕡) start#0 | items#0,tmp%4#0,tmp%6#0,start#0 (copy)
        int 2                                                                                                                  (𝕡) start#0 | items#0,tmp%4#0,tmp%6#0,start#0 (copy),2
        +                                                                                                                      (𝕡) start#0 | items#0,tmp%4#0,tmp%6#0,tmp%7#0
        int 16                                                                                                                 (𝕡) start#0 | items#0,tmp%4#0,tmp%6#0,tmp%7#0,16
        *                                                                                                                      (𝕡) start#0 | items#0,tmp%4#0,tmp%6#0,item_offset%2#0
        l-load items#0 3                                                                                                       (𝕡) start#0 | tmp%4#0,tmp%6#0,item_offset%2#0,items#0
        l-load item_offset%2#0 1                                                                                               (𝕡) start#0 | tmp%4#0,tmp%6#0,items#0,item_offset%2#0
        int 16                                                                                                                 (𝕡) start#0 | tmp%4#0,tmp%6#0,items#0,item_offset%2#0,16
        extract3 // on error: Index access is out of bounds                                                                    (𝕡) start#0 | tmp%4#0,tmp%6#0,tmp%8#0
        // mutable_native_types/case2_with_immutable_struct.py:83-89
        // return FixedArray[NamedTup, typing.Literal[3]](
        //     (
        //         items[start],
        //         items[start + 1],
        //         items[start + 2],
        //     )
        // )
        l-load tmp%4#0 2                                                                                                       (𝕡) start#0 | tmp%6#0,tmp%8#0,tmp%4#0
        l-load tmp%6#0 2                                                                                                       (𝕡) start#0 | tmp%8#0,tmp%4#0,tmp%6#0
        concat                                                                                                                 (𝕡) start#0 | tmp%8#0,result%1#0
        l-load tmp%8#0 1                                                                                                       (𝕡) start#0 | result%1#0,tmp%8#0
        concat                                                                                                                 (𝕡) start#0 | result%2#0
        retsub                                                                                                                 result%2#0


