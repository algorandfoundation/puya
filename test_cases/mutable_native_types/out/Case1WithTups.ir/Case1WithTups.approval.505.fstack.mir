// Op                                                                                         Stack (out)
// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__algopy_entrypoint_with_init() -> uint64:
subroutine main:
    block@0:
        // mutable_native_types/case1_with_tups.py:41
        // class Case1WithTups(arc4.ARC4Contract):
        txn NumAppArgs                                                                        tmp%0#2
        bz __algopy_default_create@18 ; b abi_routing@4

    abi_routing@4:
        // mutable_native_types/case1_with_tups.py:41
        // class Case1WithTups(arc4.ARC4Contract):
        txn OnCompletion                                                                      tmp%2#0
        !                                                                                     tmp%3#0
        assert // OnCompletion must be NoOp
        txn ApplicationID                                                                     tmp%4#0
        assert
        txna ApplicationArgs 0                                                                tmp%6#0
        method create_box()void                                                               tmp%6#0,Method(create_box()void)
        method num_tups()uint64                                                               tmp%6#0,Method(create_box()void),Method(num_tups()uint64)
        method add_tup((uint64,uint64))void                                                   tmp%6#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void)
        method get_tup(uint64)(uint64,uint64)                                                 tmp%6#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64))
        method sum()uint64                                                                    tmp%6#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64)
        method add_many_tups((uint64,uint64)[])void                                           tmp%6#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void)
        method add_fixed_tups((uint64,uint64)[3])void                                         tmp%6#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void),Method(add_fixed_tups((uint64,uint64)[3])void)
        method set_a(uint64)void                                                              tmp%6#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void),Method(add_fixed_tups((uint64,uint64)[3])void),Method(set_a(uint64)void)
        method set_b(uint64)void                                                              tmp%6#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void),Method(add_fixed_tups((uint64,uint64)[3])void),Method(set_a(uint64)void),Method(set_b(uint64)void)
        method get_3_tups(uint64)(uint64,uint64)[3]                                           tmp%6#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void),Method(add_fixed_tups((uint64,uint64)[3])void),Method(set_a(uint64)void),Method(set_b(uint64)void),Method(get_3_tups(uint64)(uint64,uint64)[3])
        method get_all_tups()(uint64,uint64)[]                                                tmp%6#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void),Method(add_fixed_tups((uint64,uint64)[3])void),Method(set_a(uint64)void),Method(set_b(uint64)void),Method(get_3_tups(uint64)(uint64,uint64)[3]),Method(get_all_tups()(uint64,uint64)[])
        l-load tmp%6#0 11                                                                     Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void),Method(add_fixed_tups((uint64,uint64)[3])void),Method(set_a(uint64)void),Method(set_b(uint64)void),Method(get_3_tups(uint64)(uint64,uint64)[3]),Method(get_all_tups()(uint64,uint64)[]),tmp%6#0
        match create_box_route@6 num_tups_route@7 add_tup_route@8 get_tup_route@9 sum_route@10 add_many_tups_route@11 add_fixed_tups_route@12 set_a_route@13 set_b_route@14 get_3_tups_route@15 get_all_tups_route@16 ; b after_if_else@17 

    create_box_route@6:
        // mutable_native_types/case1_with_tups.py:45
        // @arc4.abimethod()
        callsub create_box
        b after_if_else@17

    num_tups_route@7:
        // mutable_native_types/case1_with_tups.py:52
        // @arc4.abimethod()
        callsub num_tups
        b after_if_else@17

    add_tup_route@8:
        // mutable_native_types/case1_with_tups.py:56
        // @arc4.abimethod()
        callsub add_tup
        b after_if_else@17

    get_tup_route@9:
        // mutable_native_types/case1_with_tups.py:63
        // @arc4.abimethod()
        callsub get_tup
        b after_if_else@17

    sum_route@10:
        // mutable_native_types/case1_with_tups.py:68
        // @arc4.abimethod()
        callsub sum
        b after_if_else@17

    add_many_tups_route@11:
        // mutable_native_types/case1_with_tups.py:77
        // @arc4.abimethod()
        callsub add_many_tups
        b after_if_else@17

    add_fixed_tups_route@12:
        // mutable_native_types/case1_with_tups.py:82
        // @arc4.abimethod()
        callsub add_fixed_tups
        b after_if_else@17

    set_a_route@13:
        // mutable_native_types/case1_with_tups.py:87
        // @arc4.abimethod()
        callsub set_a
        b after_if_else@17

    set_b_route@14:
        // mutable_native_types/case1_with_tups.py:94
        // @arc4.abimethod()
        callsub set_b
        b after_if_else@17

    get_3_tups_route@15:
        // mutable_native_types/case1_with_tups.py:101
        // @arc4.abimethod()
        callsub get_3_tups
        b after_if_else@17

    get_all_tups_route@16:
        // mutable_native_types/case1_with_tups.py:114
        // @arc4.abimethod()
        callsub get_all_tups
        b after_if_else@17

    after_if_else@17:
        // mutable_native_types/case1_with_tups.py:41
        // class Case1WithTups(arc4.ARC4Contract):
        err

    __algopy_default_create@18:
        txn OnCompletion                                                                      tmp%7#0
        !                                                                                     tmp%8#0
        txn ApplicationID                                                                     tmp%8#0,tmp%9#0
        !                                                                                     tmp%8#0,tmp%10#0
        l-load tmp%8#0 1                                                                      tmp%10#0,tmp%8#0
        l-load tmp%10#0 1                                                                     tmp%8#0,tmp%10#0
        &&                                                                                    tmp%11#0
        assert // OnCompletion must be NoOp && can only call when creating
        int 1                                                                                 1
        return


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.create_box[routing]() -> void:
subroutine create_box:
    create_box_block@0:
        // mutable_native_types/case1_with_tups.py:47
        // assert self.tup_bag.create(), "box already exists"
        byte "tup_bag"                                                                        "tup_bag"
        int 4273                                                                              "tup_bag",4273
        box_create                                                                            tmp%0#0
        assert // box already exists
        // mutable_native_types/case1_with_tups.py:48
        // self.tup_bag.value.owner = Txn.sender
        txn Sender                                                                            tmp%1#0
        byte "tup_bag"                                                                        tmp%1#0,"tup_bag"
        int 136                                                                               tmp%1#0,"tup_bag",136
        l-load tmp%1#0 2                                                                      "tup_bag",136,tmp%1#0
        box_replace
        // mutable_native_types/case1_with_tups.py:49
        // self.tup_bag.value.app = Global.current_application_id
        global CurrentApplicationID                                                           tmp%2#0
        itob                                                                                  aggregate%val_as_bytes%0#0
        byte "tup_bag"                                                                        aggregate%val_as_bytes%0#0,"tup_bag"
        int 168                                                                               aggregate%val_as_bytes%0#0,"tup_bag",168
        l-load aggregate%val_as_bytes%0#0 2                                                   "tup_bag",168,aggregate%val_as_bytes%0#0
        box_replace
        // mutable_native_types/case1_with_tups.py:50
        // self.tup_bag.value.bootstrapped = True
        byte "tup_bag"                                                                        "tup_bag"
        int 4272                                                                              "tup_bag",4272
        int 1                                                                                 "tup_bag",4272,1
        box_extract                                                                           box%box_extract%0#0
        int 0                                                                                 box%box_extract%0#0,0
        int 1                                                                                 box%box_extract%0#0,0,1
        setbit                                                                                aggregate%updated_target%0#0
        byte "tup_bag"                                                                        aggregate%updated_target%0#0,"tup_bag"
        int 4272                                                                              aggregate%updated_target%0#0,"tup_bag",4272
        l-load aggregate%updated_target%0#0 2                                                 "tup_bag",4272,aggregate%updated_target%0#0
        box_replace
        // mutable_native_types/case1_with_tups.py:45
        // @arc4.abimethod()
        int 1                                                                                 1
        return


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.num_tups[routing]() -> void:
subroutine num_tups:
    num_tups_block@0:
        // mutable_native_types/case1_with_tups.py:54
        // return self.tup_bag.value.count
        byte "tup_bag"                                                                        "tup_bag"
        int 0                                                                                 "tup_bag",0
        int 8                                                                                 "tup_bag",0,8
        box_extract                                                                           box%box_extract%0#0
        // mutable_native_types/case1_with_tups.py:52
        // @arc4.abimethod()
        byte 0x151f7c75                                                                       box%box_extract%0#0,0x151f7c75
        l-load box%box_extract%0#0 1                                                          0x151f7c75,box%box_extract%0#0
        concat                                                                                tmp%2#0
        log
        int 1                                                                                 1
        return


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup[routing]() -> void:
subroutine add_tup:
    add_tup_block@0:
        // mutable_native_types/case1_with_tups.py:56
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                reinterpret_Encoded(uint64,uint64)%0#0
        l-load-copy reinterpret_Encoded(uint64,uint64)%0#0 0                                  reinterpret_Encoded(uint64,uint64)%0#0,reinterpret_Encoded(uint64,uint64)%0#0 (copy)
        int 0                                                                                 reinterpret_Encoded(uint64,uint64)%0#0,reinterpret_Encoded(uint64,uint64)%0#0 (copy),0
        extract_uint64                                                                        reinterpret_Encoded(uint64,uint64)%0#0,aggregate%item0%0#0
        l-load reinterpret_Encoded(uint64,uint64)%0#0 1                                       aggregate%item0%0#0,reinterpret_Encoded(uint64,uint64)%0#0
        int 8                                                                                 aggregate%item0%0#0,reinterpret_Encoded(uint64,uint64)%0#0,8
        extract_uint64                                                                        aggregate%item0%0#0,aggregate%item1%0#0
        l-load aggregate%item0%0#0 1                                                          aggregate%item1%0#0,aggregate%item0%0#0
        l-load aggregate%item1%0#0 1                                                          aggregate%item0%0#0,aggregate%item1%0#0
        callsub test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup
        int 1                                                                                 1
        return


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_tup[routing]() -> void:
subroutine get_tup:
    get_tup_block@0:
        // mutable_native_types/case1_with_tups.py:63
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                reinterpret_Encoded(uint64)%0#0
        btoi                                                                                  index#0
        // mutable_native_types/case1_with_tups.py:65
        // assert index < self.tup_bag.value.count, "index out of bounds"
        byte "tup_bag"                                                                        index#0,"tup_bag"
        int 0                                                                                 index#0,"tup_bag",0
        int 8                                                                                 index#0,"tup_bag",0,8
        box_extract                                                                           index#0,box%box_extract%0#0
        btoi                                                                                  index#0,values%0#0
        l-load-copy index#0 1                                                                 index#0,values%0#0,index#0 (copy)
        l-load values%0#0 1                                                                   index#0,index#0 (copy),values%0#0
        <                                                                                     index#0,tmp%0#1
        assert // index out of bounds                                                         index#0
        // mutable_native_types/case1_with_tups.py:66
        // return self.tup_bag.value.items[index]
        byte "tup_bag"                                                                        index#0,"tup_bag"
        int 8                                                                                 index#0,"tup_bag",8
        int 128                                                                               index#0,"tup_bag",8,128
        box_extract                                                                           index#0,box%box_extract%2#0
        l-load index#0 1                                                                      box%box_extract%2#0,index#0
        int 16                                                                                box%box_extract%2#0,index#0,16
        *                                                                                     box%box_extract%2#0,aggregate%bytes_offset%0#0
        l-load box%box_extract%2#0 1                                                          aggregate%bytes_offset%0#0,box%box_extract%2#0
        l-load aggregate%bytes_offset%0#0 1                                                   box%box_extract%2#0,aggregate%bytes_offset%0#0
        int 16                                                                                box%box_extract%2#0,aggregate%bytes_offset%0#0,16
        extract3 // on error: index access is out of bounds                                   aggregate%encoded_element%0#0
        // mutable_native_types/case1_with_tups.py:63
        // @arc4.abimethod()
        byte 0x151f7c75                                                                       aggregate%encoded_element%0#0,0x151f7c75
        l-load aggregate%encoded_element%0#0 1                                                0x151f7c75,aggregate%encoded_element%0#0
        concat                                                                                tmp%4#0
        log
        int 1                                                                                 1
        return


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.sum[routing]() -> void:
subroutine sum:
    sum_block@0:
        // mutable_native_types/case1_with_tups.py:70
        // total = UInt64()
        int 0                                                                                 0
        f-store total#0                                                                       (𝕗) total#0 |
        // mutable_native_types/case1_with_tups.py:71
        // for i in urange(self.tup_bag.value.count):
        byte "tup_bag"                                                                        (𝕗) total#0 | "tup_bag"
        int 0                                                                                 (𝕗) total#0 | "tup_bag",0
        int 8                                                                                 (𝕗) total#0 | "tup_bag",0,8
        box_extract                                                                           (𝕗) total#0 | box%box_extract%0#0
        btoi                                                                                  (𝕗) total#0 | values%0#0
        f-store values%0#0                                                                    (𝕗) total#0,values%0#0 |
        int 0                                                                                 (𝕗) total#0,values%0#0 | 0
        f-store i#0                                                                           (𝕗) total#0,values%0#0,i#0 |
        b sum_for_header@2                                                                    (𝕗) total#0,values%0#0,i#0 |

    sum_for_header@2:                                                                         (𝕗) total#0,values%0#0,i#0 |
        // mutable_native_types/case1_with_tups.py:71
        // for i in urange(self.tup_bag.value.count):
        f-load i#0                                                                            (𝕗) total#0,values%0#0,i#0 | i#0
        f-load values%0#0                                                                     (𝕗) total#0,values%0#0,i#0 | i#0,values%0#0
        <                                                                                     (𝕗) total#0,values%0#0,i#0 | continue_looping%0#0
        bz sum_after_for@5 ; b sum_for_body@3                                                 (𝕗) total#0,values%0#0,i#0 |

    sum_for_body@3:                                                                           (𝕗) total#0,values%0#0,i#0 |
        // mutable_native_types/case1_with_tups.py:72
        // tup = self.tup_bag.value.items[i]
        byte "tup_bag"                                                                        (𝕗) total#0,values%0#0,i#0 | "tup_bag"
        int 8                                                                                 (𝕗) total#0,values%0#0,i#0 | "tup_bag",8
        int 128                                                                               (𝕗) total#0,values%0#0,i#0 | "tup_bag",8,128
        box_extract                                                                           (𝕗) total#0,values%0#0,i#0 | box%box_extract%2#0
        f-load i#0                                                                            (𝕗) total#0,values%0#0,i#0 | box%box_extract%2#0,i#0
        l-store-copy i#0 1                                                                    (𝕗) total#0,values%0#0,i#0 | i#0,box%box_extract%2#0,i#0 (copy)
        int 16                                                                                (𝕗) total#0,values%0#0,i#0 | i#0,box%box_extract%2#0,i#0 (copy),16
        *                                                                                     (𝕗) total#0,values%0#0,i#0 | i#0,box%box_extract%2#0,aggregate%bytes_offset%0#0
        l-load box%box_extract%2#0 1                                                          (𝕗) total#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,box%box_extract%2#0
        l-load aggregate%bytes_offset%0#0 1                                                   (𝕗) total#0,values%0#0,i#0 | i#0,box%box_extract%2#0,aggregate%bytes_offset%0#0
        int 16                                                                                (𝕗) total#0,values%0#0,i#0 | i#0,box%box_extract%2#0,aggregate%bytes_offset%0#0,16
        extract3 // on error: index access is out of bounds                                   (𝕗) total#0,values%0#0,i#0 | i#0,aggregate%encoded_element%0#0
        l-load-copy aggregate%encoded_element%0#0 0                                           (𝕗) total#0,values%0#0,i#0 | i#0,aggregate%encoded_element%0#0,aggregate%encoded_element%0#0 (copy)
        int 0                                                                                 (𝕗) total#0,values%0#0,i#0 | i#0,aggregate%encoded_element%0#0,aggregate%encoded_element%0#0 (copy),0
        extract_uint64                                                                        (𝕗) total#0,values%0#0,i#0 | i#0,aggregate%encoded_element%0#0,tup.a#0
        l-load aggregate%encoded_element%0#0 1                                                (𝕗) total#0,values%0#0,i#0 | i#0,tup.a#0,aggregate%encoded_element%0#0
        int 8                                                                                 (𝕗) total#0,values%0#0,i#0 | i#0,tup.a#0,aggregate%encoded_element%0#0,8
        extract_uint64                                                                        (𝕗) total#0,values%0#0,i#0 | i#0,tup.a#0,tup.b#0
        // mutable_native_types/case1_with_tups.py:73
        // total += tup.a
        f-load total#0                                                                        (𝕗) total#0,values%0#0,i#0 | i#0,tup.a#0,tup.b#0,total#0
        l-load tup.a#0 2                                                                      (𝕗) total#0,values%0#0,i#0 | i#0,tup.b#0,total#0,tup.a#0
        +                                                                                     (𝕗) total#0,values%0#0,i#0 | i#0,tup.b#0,total#0
        // mutable_native_types/case1_with_tups.py:74
        // total += tup.b
        l-load tup.b#0 1                                                                      (𝕗) total#0,values%0#0,i#0 | i#0,total#0,tup.b#0
        +                                                                                     (𝕗) total#0,values%0#0,i#0 | i#0,total#0
        f-store total#0                                                                       (𝕗) total#0,values%0#0,i#0 | i#0
        // mutable_native_types/case1_with_tups.py:71
        // for i in urange(self.tup_bag.value.count):
        l-load i#0 0                                                                          (𝕗) total#0,values%0#0,i#0 | i#0
        int 1                                                                                 (𝕗) total#0,values%0#0,i#0 | i#0,1
        +                                                                                     (𝕗) total#0,values%0#0,i#0 | i#0
        f-store i#0                                                                           (𝕗) total#0,values%0#0,i#0 |
        b sum_for_header@2                                                                    (𝕗) total#0,values%0#0,i#0 |

    sum_after_for@5:                                                                          (𝕗) total#0,values%0#0,i#0 |
        // mutable_native_types/case1_with_tups.py:68
        // @arc4.abimethod()
        f-load total#0                                                                        (𝕗) total#0,values%0#0,i#0 | total#0
        itob                                                                                  (𝕗) total#0,values%0#0,i#0 | aggregate%val_as_bytes%0#0
        byte 0x151f7c75                                                                       (𝕗) total#0,values%0#0,i#0 | aggregate%val_as_bytes%0#0,0x151f7c75
        l-load aggregate%val_as_bytes%0#0 1                                                   (𝕗) total#0,values%0#0,i#0 | 0x151f7c75,aggregate%val_as_bytes%0#0
        concat                                                                                (𝕗) total#0,values%0#0,i#0 | tmp%2#0
        log                                                                                   (𝕗) total#0,values%0#0,i#0 |
        int 1                                                                                 (𝕗) total#0,values%0#0,i#0 | 1
        return                                                                                (𝕗) total#0,values%0#0,i#0 |


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_many_tups[routing]() -> void:
subroutine add_many_tups:
    add_many_tups_block@0:
        // mutable_native_types/case1_with_tups.py:77
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                tups#0
        l-store-copy tups#0 0                                                                 tups#0,tups#0 (copy)
        f-store tups#0                                                                        (𝕗) tups#0 | tups#0
        // mutable_native_types/case1_with_tups.py:79
        // for tup in tups:
        l-load tups#0 0                                                                       (𝕗) tups#0 | tups#0
        int 0                                                                                 (𝕗) tups#0 | tups#0,0
        extract_uint16                                                                        (𝕗) tups#0 | aggregate%array_length%0#0
        f-store aggregate%array_length%0#0                                                    (𝕗) tups#0,aggregate%array_length%0#0 |
        int 0                                                                                 (𝕗) tups#0,aggregate%array_length%0#0 | 0
        f-store item_index_internal%0#0                                                       (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 |
        b add_many_tups_for_header@2                                                          (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 |

    add_many_tups_for_header@2:                                                               (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 |
        // mutable_native_types/case1_with_tups.py:79
        // for tup in tups:
        f-load item_index_internal%0#0                                                        (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0
        f-load aggregate%array_length%0#0                                                     (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0,aggregate%array_length%0#0
        <                                                                                     (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | continue_looping%0#0
        bz add_many_tups_after_for@5 ; b add_many_tups_for_body@3                             (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 |

    add_many_tups_for_body@3:                                                                 (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 |
        // mutable_native_types/case1_with_tups.py:79
        // for tup in tups:
        f-load tups#0                                                                         (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | tups#0
        extract 2 0                                                                           (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | aggregate%array_trimmed%0#0
        f-load item_index_internal%0#0                                                        (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | aggregate%array_trimmed%0#0,item_index_internal%0#0
        l-store-copy item_index_internal%0#0 1                                                (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0,aggregate%array_trimmed%0#0,item_index_internal%0#0 (copy)
        int 16                                                                                (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0,aggregate%array_trimmed%0#0,item_index_internal%0#0 (copy),16
        *                                                                                     (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0,aggregate%array_trimmed%0#0,aggregate%bytes_offset%0#0
        l-load aggregate%array_trimmed%0#0 1                                                  (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0,aggregate%bytes_offset%0#0,aggregate%array_trimmed%0#0
        l-load aggregate%bytes_offset%0#0 1                                                   (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0,aggregate%array_trimmed%0#0,aggregate%bytes_offset%0#0
        int 16                                                                                (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0,aggregate%array_trimmed%0#0,aggregate%bytes_offset%0#0,16
        extract3 // on error: index access is out of bounds                                   (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0,aggregate%encoded_element%0#0
        l-load-copy aggregate%encoded_element%0#0 0                                           (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0,aggregate%encoded_element%0#0,aggregate%encoded_element%0#0 (copy)
        int 0                                                                                 (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0,aggregate%encoded_element%0#0,aggregate%encoded_element%0#0 (copy),0
        extract_uint64                                                                        (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0,aggregate%encoded_element%0#0,tup.a#0
        l-load aggregate%encoded_element%0#0 1                                                (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0,tup.a#0,aggregate%encoded_element%0#0
        int 8                                                                                 (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0,tup.a#0,aggregate%encoded_element%0#0,8
        extract_uint64                                                                        (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0,tup.a#0,tup.b#0
        // mutable_native_types/case1_with_tups.py:80
        // self.add_tup(tup)
        l-load tup.a#0 1                                                                      (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0,tup.b#0,tup.a#0
        l-load tup.b#0 1                                                                      (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0,tup.a#0,tup.b#0
        callsub test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup         (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0
        l-load item_index_internal%0#0 0                                                      (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0
        int 1                                                                                 (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0,1
        +                                                                                     (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | item_index_internal%0#0
        f-store item_index_internal%0#0                                                       (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 |
        b add_many_tups_for_header@2                                                          (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 |

    add_many_tups_after_for@5:                                                                (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 |
        // mutable_native_types/case1_with_tups.py:77
        // @arc4.abimethod()
        int 1                                                                                 (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 | 1
        return                                                                                (𝕗) tups#0,aggregate%array_length%0#0,item_index_internal%0#0 |


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_fixed_tups[routing]() -> void:
subroutine add_fixed_tups:
    add_fixed_tups_block@0:
        // mutable_native_types/case1_with_tups.py:82
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                tups#0
        f-store tups#0                                                                        (𝕗) tups#0 |
        int 0                                                                                 (𝕗) tups#0 | 0
        f-store item_index_internal%0#0                                                       (𝕗) tups#0,item_index_internal%0#0 |
        b add_fixed_tups_for_header@2                                                         (𝕗) tups#0,item_index_internal%0#0 |

    add_fixed_tups_for_header@2:                                                              (𝕗) tups#0,item_index_internal%0#0 |
        // mutable_native_types/case1_with_tups.py:84
        // for tup in tups:
        f-load item_index_internal%0#0                                                        (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0
        int 3                                                                                 (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0,3
        <                                                                                     (𝕗) tups#0,item_index_internal%0#0 | continue_looping%0#0
        bz add_fixed_tups_after_for@5 ; b add_fixed_tups_for_body@3                           (𝕗) tups#0,item_index_internal%0#0 |

    add_fixed_tups_for_body@3:                                                                (𝕗) tups#0,item_index_internal%0#0 |
        // mutable_native_types/case1_with_tups.py:84
        // for tup in tups:
        f-load item_index_internal%0#0                                                        (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0
        l-store-copy item_index_internal%0#0 0                                                (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0,item_index_internal%0#0 (copy)
        int 16                                                                                (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0,item_index_internal%0#0 (copy),16
        *                                                                                     (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0,aggregate%bytes_offset%0#0
        f-load tups#0                                                                         (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0,aggregate%bytes_offset%0#0,tups#0
        l-load aggregate%bytes_offset%0#0 1                                                   (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0,tups#0,aggregate%bytes_offset%0#0
        int 16                                                                                (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0,tups#0,aggregate%bytes_offset%0#0,16
        extract3 // on error: index access is out of bounds                                   (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0,aggregate%encoded_element%0#0
        l-load-copy aggregate%encoded_element%0#0 0                                           (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0,aggregate%encoded_element%0#0,aggregate%encoded_element%0#0 (copy)
        int 0                                                                                 (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0,aggregate%encoded_element%0#0,aggregate%encoded_element%0#0 (copy),0
        extract_uint64                                                                        (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0,aggregate%encoded_element%0#0,tup.a#0
        l-load aggregate%encoded_element%0#0 1                                                (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0,tup.a#0,aggregate%encoded_element%0#0
        int 8                                                                                 (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0,tup.a#0,aggregate%encoded_element%0#0,8
        extract_uint64                                                                        (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0,tup.a#0,tup.b#0
        // mutable_native_types/case1_with_tups.py:85
        // self.add_tup(tup)
        l-load tup.a#0 1                                                                      (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0,tup.b#0,tup.a#0
        l-load tup.b#0 1                                                                      (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0,tup.a#0,tup.b#0
        callsub test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup         (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0
        l-load item_index_internal%0#0 0                                                      (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0
        int 1                                                                                 (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0,1
        +                                                                                     (𝕗) tups#0,item_index_internal%0#0 | item_index_internal%0#0
        f-store item_index_internal%0#0                                                       (𝕗) tups#0,item_index_internal%0#0 |
        b add_fixed_tups_for_header@2                                                         (𝕗) tups#0,item_index_internal%0#0 |

    add_fixed_tups_after_for@5:                                                               (𝕗) tups#0,item_index_internal%0#0 |
        // mutable_native_types/case1_with_tups.py:82
        // @arc4.abimethod()
        int 1                                                                                 (𝕗) tups#0,item_index_internal%0#0 | 1
        return                                                                                (𝕗) tups#0,item_index_internal%0#0 |


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_a[routing]() -> void:
subroutine set_a:
    set_a_block@0:
        // mutable_native_types/case1_with_tups.py:87
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                reinterpret_Encoded(uint64)%0#0
        btoi                                                                                  a#0
        f-store a#0                                                                           (𝕗) a#0 |
        // mutable_native_types/case1_with_tups.py:89
        // self._check_owner()
        callsub _check_owner                                                                  (𝕗) a#0 |
        // mutable_native_types/case1_with_tups.py:90
        // for i in urange(self.tup_bag.value.count):
        byte "tup_bag"                                                                        (𝕗) a#0 | "tup_bag"
        int 0                                                                                 (𝕗) a#0 | "tup_bag",0
        int 8                                                                                 (𝕗) a#0 | "tup_bag",0,8
        box_extract                                                                           (𝕗) a#0 | box%box_extract%0#0
        btoi                                                                                  (𝕗) a#0 | values%0#0
        f-store values%0#0                                                                    (𝕗) a#0,values%0#0 |
        int 0                                                                                 (𝕗) a#0,values%0#0 | 0
        f-store i#0                                                                           (𝕗) a#0,values%0#0,i#0 |
        b set_a_for_header@2                                                                  (𝕗) a#0,values%0#0,i#0 |

    set_a_for_header@2:                                                                       (𝕗) a#0,values%0#0,i#0 |
        // mutable_native_types/case1_with_tups.py:90
        // for i in urange(self.tup_bag.value.count):
        f-load i#0                                                                            (𝕗) a#0,values%0#0,i#0 | i#0
        f-load values%0#0                                                                     (𝕗) a#0,values%0#0,i#0 | i#0,values%0#0
        <                                                                                     (𝕗) a#0,values%0#0,i#0 | continue_looping%0#0
        bz set_a_after_for@5 ; b set_a_for_body@3                                             (𝕗) a#0,values%0#0,i#0 |

    set_a_for_body@3:                                                                         (𝕗) a#0,values%0#0,i#0 |
        // mutable_native_types/case1_with_tups.py:91
        // tup = self.tup_bag.value.items[i]
        byte "tup_bag"                                                                        (𝕗) a#0,values%0#0,i#0 | "tup_bag"
        int 8                                                                                 (𝕗) a#0,values%0#0,i#0 | "tup_bag",8
        int 128                                                                               (𝕗) a#0,values%0#0,i#0 | "tup_bag",8,128
        box_extract                                                                           (𝕗) a#0,values%0#0,i#0 | box%box_extract%2#0
        f-load i#0                                                                            (𝕗) a#0,values%0#0,i#0 | box%box_extract%2#0,i#0
        l-store-copy i#0 1                                                                    (𝕗) a#0,values%0#0,i#0 | i#0,box%box_extract%2#0,i#0 (copy)
        int 16                                                                                (𝕗) a#0,values%0#0,i#0 | i#0,box%box_extract%2#0,i#0 (copy),16
        *                                                                                     (𝕗) a#0,values%0#0,i#0 | i#0,box%box_extract%2#0,aggregate%bytes_offset%0#0
        l-load box%box_extract%2#0 1                                                          (𝕗) a#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,box%box_extract%2#0
        l-load-copy aggregate%bytes_offset%0#0 1                                              (𝕗) a#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,box%box_extract%2#0,aggregate%bytes_offset%0#0 (copy)
        int 16                                                                                (𝕗) a#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,box%box_extract%2#0,aggregate%bytes_offset%0#0 (copy),16
        extract3 // on error: index access is out of bounds                                   (𝕗) a#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%encoded_element%0#0
        extract 8 8                                                                           (𝕗) a#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%extract%1#0
        // mutable_native_types/case1_with_tups.py:92
        // self.tup_bag.value.items[i] = tup._replace(a=a)
        f-load a#0                                                                            (𝕗) a#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%extract%1#0,a#0
        itob                                                                                  (𝕗) a#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%extract%1#0,aggregate%val_as_bytes%0#0
        l-load aggregate%extract%1#0 1                                                        (𝕗) a#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%val_as_bytes%0#0,aggregate%extract%1#0
        concat                                                                                (𝕗) a#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%head%1#0
        l-load-copy i#0 2                                                                     (𝕗) a#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%head%1#0,i#0 (copy)
        int 8                                                                                 (𝕗) a#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%head%1#0,i#0 (copy),8
        <                                                                                     (𝕗) a#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%head%1#0,box%index_ok%0#0
        assert // index out of bounds                                                         (𝕗) a#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%head%1#0
        int 8                                                                                 (𝕗) a#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%head%1#0,8
        l-load aggregate%bytes_offset%0#0 2                                                   (𝕗) a#0,values%0#0,i#0 | i#0,aggregate%head%1#0,8,aggregate%bytes_offset%0#0
        +                                                                                     (𝕗) a#0,values%0#0,i#0 | i#0,aggregate%head%1#0,box%offset%4#0
        byte "tup_bag"                                                                        (𝕗) a#0,values%0#0,i#0 | i#0,aggregate%head%1#0,box%offset%4#0,"tup_bag"
        l-load box%offset%4#0 1                                                               (𝕗) a#0,values%0#0,i#0 | i#0,aggregate%head%1#0,"tup_bag",box%offset%4#0
        l-load aggregate%head%1#0 2                                                           (𝕗) a#0,values%0#0,i#0 | i#0,"tup_bag",box%offset%4#0,aggregate%head%1#0
        box_replace                                                                           (𝕗) a#0,values%0#0,i#0 | i#0
        // mutable_native_types/case1_with_tups.py:90
        // for i in urange(self.tup_bag.value.count):
        l-load i#0 0                                                                          (𝕗) a#0,values%0#0,i#0 | i#0
        int 1                                                                                 (𝕗) a#0,values%0#0,i#0 | i#0,1
        +                                                                                     (𝕗) a#0,values%0#0,i#0 | i#0
        f-store i#0                                                                           (𝕗) a#0,values%0#0,i#0 |
        b set_a_for_header@2                                                                  (𝕗) a#0,values%0#0,i#0 |

    set_a_after_for@5:                                                                        (𝕗) a#0,values%0#0,i#0 |
        // mutable_native_types/case1_with_tups.py:87
        // @arc4.abimethod()
        int 1                                                                                 (𝕗) a#0,values%0#0,i#0 | 1
        return                                                                                (𝕗) a#0,values%0#0,i#0 |


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_b[routing]() -> void:
subroutine set_b:
    set_b_block@0:
        // mutable_native_types/case1_with_tups.py:94
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                reinterpret_Encoded(uint64)%0#0
        btoi                                                                                  b#0
        f-store b#0                                                                           (𝕗) b#0 |
        // mutable_native_types/case1_with_tups.py:96
        // self._check_owner()
        callsub _check_owner                                                                  (𝕗) b#0 |
        // mutable_native_types/case1_with_tups.py:97
        // for i in urange(self.tup_bag.value.count):
        byte "tup_bag"                                                                        (𝕗) b#0 | "tup_bag"
        int 0                                                                                 (𝕗) b#0 | "tup_bag",0
        int 8                                                                                 (𝕗) b#0 | "tup_bag",0,8
        box_extract                                                                           (𝕗) b#0 | box%box_extract%0#0
        btoi                                                                                  (𝕗) b#0 | values%0#0
        f-store values%0#0                                                                    (𝕗) b#0,values%0#0 |
        int 0                                                                                 (𝕗) b#0,values%0#0 | 0
        f-store i#0                                                                           (𝕗) b#0,values%0#0,i#0 |
        b set_b_for_header@2                                                                  (𝕗) b#0,values%0#0,i#0 |

    set_b_for_header@2:                                                                       (𝕗) b#0,values%0#0,i#0 |
        // mutable_native_types/case1_with_tups.py:97
        // for i in urange(self.tup_bag.value.count):
        f-load i#0                                                                            (𝕗) b#0,values%0#0,i#0 | i#0
        f-load values%0#0                                                                     (𝕗) b#0,values%0#0,i#0 | i#0,values%0#0
        <                                                                                     (𝕗) b#0,values%0#0,i#0 | continue_looping%0#0
        bz set_b_after_for@5 ; b set_b_for_body@3                                             (𝕗) b#0,values%0#0,i#0 |

    set_b_for_body@3:                                                                         (𝕗) b#0,values%0#0,i#0 |
        // mutable_native_types/case1_with_tups.py:98
        // tup = self.tup_bag.value.items[i]
        byte "tup_bag"                                                                        (𝕗) b#0,values%0#0,i#0 | "tup_bag"
        int 8                                                                                 (𝕗) b#0,values%0#0,i#0 | "tup_bag",8
        int 128                                                                               (𝕗) b#0,values%0#0,i#0 | "tup_bag",8,128
        box_extract                                                                           (𝕗) b#0,values%0#0,i#0 | box%box_extract%2#0
        f-load i#0                                                                            (𝕗) b#0,values%0#0,i#0 | box%box_extract%2#0,i#0
        l-store-copy i#0 1                                                                    (𝕗) b#0,values%0#0,i#0 | i#0,box%box_extract%2#0,i#0 (copy)
        int 16                                                                                (𝕗) b#0,values%0#0,i#0 | i#0,box%box_extract%2#0,i#0 (copy),16
        *                                                                                     (𝕗) b#0,values%0#0,i#0 | i#0,box%box_extract%2#0,aggregate%bytes_offset%0#0
        l-load box%box_extract%2#0 1                                                          (𝕗) b#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,box%box_extract%2#0
        l-load-copy aggregate%bytes_offset%0#0 1                                              (𝕗) b#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,box%box_extract%2#0,aggregate%bytes_offset%0#0 (copy)
        int 16                                                                                (𝕗) b#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,box%box_extract%2#0,aggregate%bytes_offset%0#0 (copy),16
        extract3 // on error: index access is out of bounds                                   (𝕗) b#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%encoded_element%0#0
        extract 0 8                                                                           (𝕗) b#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%extract%0#0
        // mutable_native_types/case1_with_tups.py:99
        // self.tup_bag.value.items[i] = tup._replace(b=b)
        f-load b#0                                                                            (𝕗) b#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%extract%0#0,b#0
        itob                                                                                  (𝕗) b#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%extract%0#0,aggregate%val_as_bytes%1#0
        l-load aggregate%extract%0#0 1                                                        (𝕗) b#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%val_as_bytes%1#0,aggregate%extract%0#0
        l-load aggregate%val_as_bytes%1#0 1                                                   (𝕗) b#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%extract%0#0,aggregate%val_as_bytes%1#0
        concat                                                                                (𝕗) b#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%head%1#0
        l-load-copy i#0 2                                                                     (𝕗) b#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%head%1#0,i#0 (copy)
        int 8                                                                                 (𝕗) b#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%head%1#0,i#0 (copy),8
        <                                                                                     (𝕗) b#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%head%1#0,box%index_ok%0#0
        assert // index out of bounds                                                         (𝕗) b#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%head%1#0
        int 8                                                                                 (𝕗) b#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,aggregate%head%1#0,8
        l-load aggregate%bytes_offset%0#0 2                                                   (𝕗) b#0,values%0#0,i#0 | i#0,aggregate%head%1#0,8,aggregate%bytes_offset%0#0
        +                                                                                     (𝕗) b#0,values%0#0,i#0 | i#0,aggregate%head%1#0,box%offset%4#0
        byte "tup_bag"                                                                        (𝕗) b#0,values%0#0,i#0 | i#0,aggregate%head%1#0,box%offset%4#0,"tup_bag"
        l-load box%offset%4#0 1                                                               (𝕗) b#0,values%0#0,i#0 | i#0,aggregate%head%1#0,"tup_bag",box%offset%4#0
        l-load aggregate%head%1#0 2                                                           (𝕗) b#0,values%0#0,i#0 | i#0,"tup_bag",box%offset%4#0,aggregate%head%1#0
        box_replace                                                                           (𝕗) b#0,values%0#0,i#0 | i#0
        // mutable_native_types/case1_with_tups.py:97
        // for i in urange(self.tup_bag.value.count):
        l-load i#0 0                                                                          (𝕗) b#0,values%0#0,i#0 | i#0
        int 1                                                                                 (𝕗) b#0,values%0#0,i#0 | i#0,1
        +                                                                                     (𝕗) b#0,values%0#0,i#0 | i#0
        f-store i#0                                                                           (𝕗) b#0,values%0#0,i#0 |
        b set_b_for_header@2                                                                  (𝕗) b#0,values%0#0,i#0 |

    set_b_after_for@5:                                                                        (𝕗) b#0,values%0#0,i#0 |
        // mutable_native_types/case1_with_tups.py:94
        // @arc4.abimethod()
        int 1                                                                                 (𝕗) b#0,values%0#0,i#0 | 1
        return                                                                                (𝕗) b#0,values%0#0,i#0 |


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_3_tups[routing]() -> void:
subroutine get_3_tups:
    get_3_tups_block@0:
        // mutable_native_types/case1_with_tups.py:101
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                reinterpret_Encoded(uint64)%0#0
        btoi                                                                                  start#0
        // mutable_native_types/case1_with_tups.py:103
        // assert self.tup_bag.value.count >= start + 3, "not enough items"
        byte "tup_bag"                                                                        start#0,"tup_bag"
        int 0                                                                                 start#0,"tup_bag",0
        int 8                                                                                 start#0,"tup_bag",0,8
        box_extract                                                                           start#0,box%box_extract%0#0
        btoi                                                                                  start#0,values%0#0
        l-load-copy start#0 1                                                                 start#0,values%0#0,start#0 (copy)
        int 3                                                                                 start#0,values%0#0,start#0 (copy),3
        +                                                                                     start#0,values%0#0,tmp%0#1
        l-load values%0#0 1                                                                   start#0,tmp%0#1,values%0#0
        l-load tmp%0#1 1                                                                      start#0,values%0#0,tmp%0#1
        >=                                                                                    start#0,tmp%1#1
        assert // not enough items                                                            start#0
        // mutable_native_types/case1_with_tups.py:104
        // items = self.tup_bag.value.items.copy()
        byte "tup_bag"                                                                        start#0,"tup_bag"
        int 8                                                                                 start#0,"tup_bag",8
        int 128                                                                               start#0,"tup_bag",8,128
        box_extract                                                                           start#0,box%box_extract%2#0
        l-load-copy start#0 1                                                                 start#0,box%box_extract%2#0,start#0 (copy)
        int 16                                                                                start#0,box%box_extract%2#0,start#0 (copy),16
        *                                                                                     start#0,box%box_extract%2#0,aggregate%bytes_offset%0#0
        l-load-copy box%box_extract%2#0 1                                                     start#0,box%box_extract%2#0,aggregate%bytes_offset%0#0,box%box_extract%2#0 (copy)
        l-load aggregate%bytes_offset%0#0 1                                                   start#0,box%box_extract%2#0,box%box_extract%2#0 (copy),aggregate%bytes_offset%0#0
        int 16                                                                                start#0,box%box_extract%2#0,box%box_extract%2#0 (copy),aggregate%bytes_offset%0#0,16
        extract3 // on error: index access is out of bounds                                   start#0,box%box_extract%2#0,aggregate%encoded_element%0#0
        // mutable_native_types/case1_with_tups.py:108
        // items[start],
        l-load-copy aggregate%encoded_element%0#0 0                                           start#0,box%box_extract%2#0,aggregate%encoded_element%0#0,aggregate%encoded_element%0#0 (copy)
        extract 0 8                                                                           start#0,box%box_extract%2#0,aggregate%encoded_element%0#0,aggregate%extract%0#0
        l-load aggregate%encoded_element%0#0 1                                                start#0,box%box_extract%2#0,aggregate%extract%0#0,aggregate%encoded_element%0#0
        extract 8 8                                                                           start#0,box%box_extract%2#0,aggregate%extract%0#0,aggregate%extract%1#0
        // mutable_native_types/case1_with_tups.py:109
        // items[start + 1],
        l-load-copy start#0 3                                                                 start#0,box%box_extract%2#0,aggregate%extract%0#0,aggregate%extract%1#0,start#0 (copy)
        int 1                                                                                 start#0,box%box_extract%2#0,aggregate%extract%0#0,aggregate%extract%1#0,start#0 (copy),1
        +                                                                                     start#0,box%box_extract%2#0,aggregate%extract%0#0,aggregate%extract%1#0,tmp%2#1
        // mutable_native_types/case1_with_tups.py:104
        // items = self.tup_bag.value.items.copy()
        int 16                                                                                start#0,box%box_extract%2#0,aggregate%extract%0#0,aggregate%extract%1#0,tmp%2#1,16
        *                                                                                     start#0,box%box_extract%2#0,aggregate%extract%0#0,aggregate%extract%1#0,aggregate%bytes_offset%1#0
        l-load-copy box%box_extract%2#0 3                                                     start#0,box%box_extract%2#0,aggregate%extract%0#0,aggregate%extract%1#0,aggregate%bytes_offset%1#0,box%box_extract%2#0 (copy)
        l-load aggregate%bytes_offset%1#0 1                                                   start#0,box%box_extract%2#0,aggregate%extract%0#0,aggregate%extract%1#0,box%box_extract%2#0 (copy),aggregate%bytes_offset%1#0
        int 16                                                                                start#0,box%box_extract%2#0,aggregate%extract%0#0,aggregate%extract%1#0,box%box_extract%2#0 (copy),aggregate%bytes_offset%1#0,16
        extract3 // on error: index access is out of bounds                                   start#0,box%box_extract%2#0,aggregate%extract%0#0,aggregate%extract%1#0,aggregate%encoded_element%1#0
        // mutable_native_types/case1_with_tups.py:109
        // items[start + 1],
        l-load-copy aggregate%encoded_element%1#0 0                                           start#0,box%box_extract%2#0,aggregate%extract%0#0,aggregate%extract%1#0,aggregate%encoded_element%1#0,aggregate%encoded_element%1#0 (copy)
        extract 0 8                                                                           start#0,box%box_extract%2#0,aggregate%extract%0#0,aggregate%extract%1#0,aggregate%encoded_element%1#0,aggregate%extract%2#0
        l-load aggregate%encoded_element%1#0 1                                                start#0,box%box_extract%2#0,aggregate%extract%0#0,aggregate%extract%1#0,aggregate%extract%2#0,aggregate%encoded_element%1#0
        extract 8 8                                                                           start#0,box%box_extract%2#0,aggregate%extract%0#0,aggregate%extract%1#0,aggregate%extract%2#0,aggregate%extract%3#0
        // mutable_native_types/case1_with_tups.py:110
        // items[start + 2],
        l-load start#0 5                                                                      box%box_extract%2#0,aggregate%extract%0#0,aggregate%extract%1#0,aggregate%extract%2#0,aggregate%extract%3#0,start#0
        int 2                                                                                 box%box_extract%2#0,aggregate%extract%0#0,aggregate%extract%1#0,aggregate%extract%2#0,aggregate%extract%3#0,start#0,2
        +                                                                                     box%box_extract%2#0,aggregate%extract%0#0,aggregate%extract%1#0,aggregate%extract%2#0,aggregate%extract%3#0,tmp%3#0
        // mutable_native_types/case1_with_tups.py:104
        // items = self.tup_bag.value.items.copy()
        int 16                                                                                box%box_extract%2#0,aggregate%extract%0#0,aggregate%extract%1#0,aggregate%extract%2#0,aggregate%extract%3#0,tmp%3#0,16
        *                                                                                     box%box_extract%2#0,aggregate%extract%0#0,aggregate%extract%1#0,aggregate%extract%2#0,aggregate%extract%3#0,aggregate%bytes_offset%2#0
        l-load box%box_extract%2#0 5                                                          aggregate%extract%0#0,aggregate%extract%1#0,aggregate%extract%2#0,aggregate%extract%3#0,aggregate%bytes_offset%2#0,box%box_extract%2#0
        l-load aggregate%bytes_offset%2#0 1                                                   aggregate%extract%0#0,aggregate%extract%1#0,aggregate%extract%2#0,aggregate%extract%3#0,box%box_extract%2#0,aggregate%bytes_offset%2#0
        int 16                                                                                aggregate%extract%0#0,aggregate%extract%1#0,aggregate%extract%2#0,aggregate%extract%3#0,box%box_extract%2#0,aggregate%bytes_offset%2#0,16
        extract3 // on error: index access is out of bounds                                   aggregate%extract%0#0,aggregate%extract%1#0,aggregate%extract%2#0,aggregate%extract%3#0,aggregate%encoded_element%2#0
        // mutable_native_types/case1_with_tups.py:110
        // items[start + 2],
        l-load-copy aggregate%encoded_element%2#0 0                                           aggregate%extract%0#0,aggregate%extract%1#0,aggregate%extract%2#0,aggregate%extract%3#0,aggregate%encoded_element%2#0,aggregate%encoded_element%2#0 (copy)
        extract 0 8                                                                           aggregate%extract%0#0,aggregate%extract%1#0,aggregate%extract%2#0,aggregate%extract%3#0,aggregate%encoded_element%2#0,aggregate%extract%4#0
        l-load aggregate%encoded_element%2#0 1                                                aggregate%extract%0#0,aggregate%extract%1#0,aggregate%extract%2#0,aggregate%extract%3#0,aggregate%extract%4#0,aggregate%encoded_element%2#0
        extract 8 8                                                                           aggregate%extract%0#0,aggregate%extract%1#0,aggregate%extract%2#0,aggregate%extract%3#0,aggregate%extract%4#0,aggregate%extract%5#0
        // mutable_native_types/case1_with_tups.py:106-112
        // return FixedArray[NamedTup, typing.Literal[3]](
        //     (
        //         items[start],
        //         items[start + 1],
        //         items[start + 2],
        //     )
        // )
        l-load aggregate%extract%0#0 5                                                        aggregate%extract%1#0,aggregate%extract%2#0,aggregate%extract%3#0,aggregate%extract%4#0,aggregate%extract%5#0,aggregate%extract%0#0
        l-load aggregate%extract%1#0 5                                                        aggregate%extract%2#0,aggregate%extract%3#0,aggregate%extract%4#0,aggregate%extract%5#0,aggregate%extract%0#0,aggregate%extract%1#0
        concat                                                                                aggregate%extract%2#0,aggregate%extract%3#0,aggregate%extract%4#0,aggregate%extract%5#0,aggregate%head%1#0
        l-load aggregate%extract%2#0 4                                                        aggregate%extract%3#0,aggregate%extract%4#0,aggregate%extract%5#0,aggregate%head%1#0,aggregate%extract%2#0
        l-load aggregate%extract%3#0 4                                                        aggregate%extract%4#0,aggregate%extract%5#0,aggregate%head%1#0,aggregate%extract%2#0,aggregate%extract%3#0
        concat                                                                                aggregate%extract%4#0,aggregate%extract%5#0,aggregate%head%1#0,aggregate%head%4#0
        l-load aggregate%head%1#0 1                                                           aggregate%extract%4#0,aggregate%extract%5#0,aggregate%head%4#0,aggregate%head%1#0
        l-load aggregate%head%4#0 1                                                           aggregate%extract%4#0,aggregate%extract%5#0,aggregate%head%1#0,aggregate%head%4#0
        concat                                                                                aggregate%extract%4#0,aggregate%extract%5#0,aggregate%head%5#0
        l-load aggregate%extract%4#0 2                                                        aggregate%extract%5#0,aggregate%head%5#0,aggregate%extract%4#0
        l-load aggregate%extract%5#0 2                                                        aggregate%head%5#0,aggregate%extract%4#0,aggregate%extract%5#0
        concat                                                                                aggregate%head%5#0,aggregate%head%7#0
        l-load aggregate%head%5#0 1                                                           aggregate%head%7#0,aggregate%head%5#0
        l-load aggregate%head%7#0 1                                                           aggregate%head%5#0,aggregate%head%7#0
        concat                                                                                aggregate%head%8#0
        // mutable_native_types/case1_with_tups.py:101
        // @arc4.abimethod()
        byte 0x151f7c75                                                                       aggregate%head%8#0,0x151f7c75
        l-load aggregate%head%8#0 1                                                           0x151f7c75,aggregate%head%8#0
        concat                                                                                tmp%2#0
        log
        int 1                                                                                 1
        return


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_all_tups[routing]() -> void:
subroutine get_all_tups:
    get_all_tups_block@0:
        // mutable_native_types/case1_with_tups.py:116
        // result = NativeArray[NamedTup]()
        byte 0x0000                                                                           0x0000
        f-store result#0                                                                      (𝕗) result#0 |
        // mutable_native_types/case1_with_tups.py:119
        // for i in urange(self.tup_bag.value.count):
        byte "tup_bag"                                                                        (𝕗) result#0 | "tup_bag"
        int 0                                                                                 (𝕗) result#0 | "tup_bag",0
        int 8                                                                                 (𝕗) result#0 | "tup_bag",0,8
        box_extract                                                                           (𝕗) result#0 | box%box_extract%1#0
        btoi                                                                                  (𝕗) result#0 | values%0#0
        f-store values%0#0                                                                    (𝕗) result#0,values%0#0 |
        int 0                                                                                 (𝕗) result#0,values%0#0 | 0
        f-store i#0                                                                           (𝕗) result#0,values%0#0,i#0 |
        b get_all_tups_for_header@2                                                           (𝕗) result#0,values%0#0,i#0 |

    get_all_tups_for_header@2:                                                                (𝕗) result#0,values%0#0,i#0 |
        // mutable_native_types/case1_with_tups.py:119
        // for i in urange(self.tup_bag.value.count):
        f-load i#0                                                                            (𝕗) result#0,values%0#0,i#0 | i#0
        f-load values%0#0                                                                     (𝕗) result#0,values%0#0,i#0 | i#0,values%0#0
        <                                                                                     (𝕗) result#0,values%0#0,i#0 | continue_looping%0#0
        bz get_all_tups_after_for@5 ; b get_all_tups_for_body@3                               (𝕗) result#0,values%0#0,i#0 |

    get_all_tups_for_body@3:                                                                  (𝕗) result#0,values%0#0,i#0 |
        // mutable_native_types/case1_with_tups.py:117
        // items = self.tup_bag.value.items.copy()
        byte "tup_bag"                                                                        (𝕗) result#0,values%0#0,i#0 | "tup_bag"
        int 8                                                                                 (𝕗) result#0,values%0#0,i#0 | "tup_bag",8
        int 128                                                                               (𝕗) result#0,values%0#0,i#0 | "tup_bag",8,128
        box_extract                                                                           (𝕗) result#0,values%0#0,i#0 | box%box_extract%2#0
        f-load i#0                                                                            (𝕗) result#0,values%0#0,i#0 | box%box_extract%2#0,i#0
        l-store-copy i#0 1                                                                    (𝕗) result#0,values%0#0,i#0 | i#0,box%box_extract%2#0,i#0 (copy)
        int 16                                                                                (𝕗) result#0,values%0#0,i#0 | i#0,box%box_extract%2#0,i#0 (copy),16
        *                                                                                     (𝕗) result#0,values%0#0,i#0 | i#0,box%box_extract%2#0,aggregate%bytes_offset%0#0
        l-load box%box_extract%2#0 1                                                          (𝕗) result#0,values%0#0,i#0 | i#0,aggregate%bytes_offset%0#0,box%box_extract%2#0
        l-load aggregate%bytes_offset%0#0 1                                                   (𝕗) result#0,values%0#0,i#0 | i#0,box%box_extract%2#0,aggregate%bytes_offset%0#0
        int 16                                                                                (𝕗) result#0,values%0#0,i#0 | i#0,box%box_extract%2#0,aggregate%bytes_offset%0#0,16
        extract3 // on error: index access is out of bounds                                   (𝕗) result#0,values%0#0,i#0 | i#0,aggregate%encoded_element%0#0
        // mutable_native_types/case1_with_tups.py:120
        // result.append(items[i])
        l-load-copy aggregate%encoded_element%0#0 0                                           (𝕗) result#0,values%0#0,i#0 | i#0,aggregate%encoded_element%0#0,aggregate%encoded_element%0#0 (copy)
        extract 0 8                                                                           (𝕗) result#0,values%0#0,i#0 | i#0,aggregate%encoded_element%0#0,aggregate%extract%0#0
        l-load aggregate%encoded_element%0#0 1                                                (𝕗) result#0,values%0#0,i#0 | i#0,aggregate%extract%0#0,aggregate%encoded_element%0#0
        extract 8 8                                                                           (𝕗) result#0,values%0#0,i#0 | i#0,aggregate%extract%0#0,aggregate%extract%1#0
        l-load aggregate%extract%0#0 1                                                        (𝕗) result#0,values%0#0,i#0 | i#0,aggregate%extract%1#0,aggregate%extract%0#0
        l-load aggregate%extract%1#0 1                                                        (𝕗) result#0,values%0#0,i#0 | i#0,aggregate%extract%0#0,aggregate%extract%1#0
        concat                                                                                (𝕗) result#0,values%0#0,i#0 | i#0,aggregate%head%1#0
        f-load result#0                                                                       (𝕗) result#0,values%0#0,i#0 | i#0,aggregate%head%1#0,result#0
        l-store-copy result#0 1                                                               (𝕗) result#0,values%0#0,i#0 | i#0,result#0,aggregate%head%1#0,result#0 (copy)
        l-load aggregate%head%1#0 1                                                           (𝕗) result#0,values%0#0,i#0 | i#0,result#0,result#0 (copy),aggregate%head%1#0
        concat // on error: max array length exceeded                                         (𝕗) result#0,values%0#0,i#0 | i#0,result#0,concat%0#0
        l-load result#0 1                                                                     (𝕗) result#0,values%0#0,i#0 | i#0,concat%0#0,result#0
        int 0                                                                                 (𝕗) result#0,values%0#0,i#0 | i#0,concat%0#0,result#0,0
        extract_uint16                                                                        (𝕗) result#0,values%0#0,i#0 | i#0,concat%0#0,extract_uint16%0#0
        int 1                                                                                 (𝕗) result#0,values%0#0,i#0 | i#0,concat%0#0,extract_uint16%0#0,1
        +                                                                                     (𝕗) result#0,values%0#0,i#0 | i#0,concat%0#0,add%0#0
        itob                                                                                  (𝕗) result#0,values%0#0,i#0 | i#0,concat%0#0,as_bytes%0#0
        extract 6 2                                                                           (𝕗) result#0,values%0#0,i#0 | i#0,concat%0#0,as_u16_bytes%0#0
        l-load concat%0#0 1                                                                   (𝕗) result#0,values%0#0,i#0 | i#0,as_u16_bytes%0#0,concat%0#0
        l-load as_u16_bytes%0#0 1                                                             (𝕗) result#0,values%0#0,i#0 | i#0,concat%0#0,as_u16_bytes%0#0
        replace2 0                                                                            (𝕗) result#0,values%0#0,i#0 | i#0,result#0
        f-store result#0                                                                      (𝕗) result#0,values%0#0,i#0 | i#0
        // mutable_native_types/case1_with_tups.py:119
        // for i in urange(self.tup_bag.value.count):
        l-load i#0 0                                                                          (𝕗) result#0,values%0#0,i#0 | i#0
        int 1                                                                                 (𝕗) result#0,values%0#0,i#0 | i#0,1
        +                                                                                     (𝕗) result#0,values%0#0,i#0 | i#0
        f-store i#0                                                                           (𝕗) result#0,values%0#0,i#0 |
        b get_all_tups_for_header@2                                                           (𝕗) result#0,values%0#0,i#0 |

    get_all_tups_after_for@5:                                                                 (𝕗) result#0,values%0#0,i#0 |
        // mutable_native_types/case1_with_tups.py:114
        // @arc4.abimethod()
        byte 0x151f7c75                                                                       (𝕗) result#0,values%0#0,i#0 | 0x151f7c75
        f-load result#0                                                                       (𝕗) result#0,values%0#0,i#0 | 0x151f7c75,result#0
        concat                                                                                (𝕗) result#0,values%0#0,i#0 | tmp%1#0
        log                                                                                   (𝕗) result#0,values%0#0,i#0 |
        int 1                                                                                 (𝕗) result#0,values%0#0,i#0 | 1
        return                                                                                (𝕗) result#0,values%0#0,i#0 |


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tup.a: uint64, tup.b: uint64) -> void:
subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup:
    test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup_block@0:            (𝕡) tup.a#0,tup.b#0 |
        // mutable_native_types/case1_with_tups.py:58
        // self._check_owner()
        callsub _check_owner                                                                  (𝕡) tup.a#0,tup.b#0 |
        // mutable_native_types/case1_with_tups.py:59
        // assert self.tup_bag.value.count < self.tup_bag.value.items.length, "too many tups"
        byte "tup_bag"                                                                        (𝕡) tup.a#0,tup.b#0 | "tup_bag"
        int 0                                                                                 (𝕡) tup.a#0,tup.b#0 | "tup_bag",0
        int 8                                                                                 (𝕡) tup.a#0,tup.b#0 | "tup_bag",0,8
        box_extract                                                                           (𝕡) tup.a#0,tup.b#0 | box%box_extract%0#0
        btoi                                                                                  (𝕡) tup.a#0,tup.b#0 | values%0#0
        l-load-copy values%0#0 0                                                              (𝕡) tup.a#0,tup.b#0 | values%0#0,values%0#0 (copy)
        int 8                                                                                 (𝕡) tup.a#0,tup.b#0 | values%0#0,values%0#0 (copy),8
        <                                                                                     (𝕡) tup.a#0,tup.b#0 | values%0#0,tmp%0#0
        assert // too many tups                                                               (𝕡) tup.a#0,tup.b#0 | values%0#0
        // mutable_native_types/case1_with_tups.py:60
        // self.tup_bag.value.items[self.tup_bag.value.count] = tup
        p-load tup.a#0                                                                        (𝕡) tup.a#0,tup.b#0 | values%0#0,tup.a#0 (copy)
        itob                                                                                  (𝕡) tup.a#0,tup.b#0 | values%0#0,aggregate%val_as_bytes%0#0
        p-load tup.b#0                                                                        (𝕡) tup.a#0,tup.b#0 | values%0#0,aggregate%val_as_bytes%0#0,tup.b#0 (copy)
        itob                                                                                  (𝕡) tup.a#0,tup.b#0 | values%0#0,aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        l-load aggregate%val_as_bytes%0#0 1                                                   (𝕡) tup.a#0,tup.b#0 | values%0#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%0#0
        l-load aggregate%val_as_bytes%1#0 1                                                   (𝕡) tup.a#0,tup.b#0 | values%0#0,aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        concat                                                                                (𝕡) tup.a#0,tup.b#0 | values%0#0,aggregate%head%1#0
        l-load values%0#0 1                                                                   (𝕡) tup.a#0,tup.b#0 | aggregate%head%1#0,values%0#0
        int 16                                                                                (𝕡) tup.a#0,tup.b#0 | aggregate%head%1#0,values%0#0,16
        *                                                                                     (𝕡) tup.a#0,tup.b#0 | aggregate%head%1#0,box%element_offset%0#0
        int 8                                                                                 (𝕡) tup.a#0,tup.b#0 | aggregate%head%1#0,box%element_offset%0#0,8
        l-load box%element_offset%0#0 1                                                       (𝕡) tup.a#0,tup.b#0 | aggregate%head%1#0,8,box%element_offset%0#0
        +                                                                                     (𝕡) tup.a#0,tup.b#0 | aggregate%head%1#0,box%offset%3#0
        byte "tup_bag"                                                                        (𝕡) tup.a#0,tup.b#0 | aggregate%head%1#0,box%offset%3#0,"tup_bag"
        l-load box%offset%3#0 1                                                               (𝕡) tup.a#0,tup.b#0 | aggregate%head%1#0,"tup_bag",box%offset%3#0
        l-load aggregate%head%1#0 2                                                           (𝕡) tup.a#0,tup.b#0 | "tup_bag",box%offset%3#0,aggregate%head%1#0
        box_replace                                                                           (𝕡) tup.a#0,tup.b#0 |
        // mutable_native_types/case1_with_tups.py:61
        // self.tup_bag.value.count += 1
        byte "tup_bag"                                                                        (𝕡) tup.a#0,tup.b#0 | "tup_bag"
        int 0                                                                                 (𝕡) tup.a#0,tup.b#0 | "tup_bag",0
        int 8                                                                                 (𝕡) tup.a#0,tup.b#0 | "tup_bag",0,8
        box_extract                                                                           (𝕡) tup.a#0,tup.b#0 | box%box_extract%2#0
        btoi                                                                                  (𝕡) tup.a#0,tup.b#0 | values%2#0
        int 1                                                                                 (𝕡) tup.a#0,tup.b#0 | values%2#0,1
        +                                                                                     (𝕡) tup.a#0,tup.b#0 | tmp%1#0
        itob                                                                                  (𝕡) tup.a#0,tup.b#0 | aggregate%val_as_bytes%2#0
        byte "tup_bag"                                                                        (𝕡) tup.a#0,tup.b#0 | aggregate%val_as_bytes%2#0,"tup_bag"
        int 0                                                                                 (𝕡) tup.a#0,tup.b#0 | aggregate%val_as_bytes%2#0,"tup_bag",0
        l-load aggregate%val_as_bytes%2#0 2                                                   (𝕡) tup.a#0,tup.b#0 | "tup_bag",0,aggregate%val_as_bytes%2#0
        box_replace                                                                           (𝕡) tup.a#0,tup.b#0 |
        retsub


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups._check_owner() -> void:
subroutine _check_owner:
    _check_owner_block@0:
        // mutable_native_types/case1_with_tups.py:125
        // assert self.tup_bag.value.bootstrapped, "app not bootstrapped"
        byte "tup_bag"                                                                        "tup_bag"
        int 4272                                                                              "tup_bag",4272
        int 1                                                                                 "tup_bag",4272,1
        box_extract                                                                           box%box_extract%0#0
        int 0                                                                                 box%box_extract%0#0,0
        getbit                                                                                aggregate%get_bit%0#0
        assert // app not bootstrapped
        // mutable_native_types/case1_with_tups.py:126
        // assert self.tup_bag.value.owner == Txn.sender, "sender not authorized"
        byte "tup_bag"                                                                        "tup_bag"
        int 136                                                                               "tup_bag",136
        int 32                                                                                "tup_bag",136,32
        box_extract                                                                           box%box_extract%1#0
        txn Sender                                                                            box%box_extract%1#0,tmp%0#0
        l-load box%box_extract%1#0 1                                                          tmp%0#0,box%box_extract%1#0
        l-load tmp%0#0 1                                                                      box%box_extract%1#0,tmp%0#0
        ==                                                                                    tmp%1#0
        assert // sender not authorized
        // mutable_native_types/case1_with_tups.py:128
        // self.tup_bag.value.app == Global.current_application_id
        byte "tup_bag"                                                                        "tup_bag"
        int 168                                                                               "tup_bag",168
        int 8                                                                                 "tup_bag",168,8
        box_extract                                                                           box%box_extract%2#0
        btoi                                                                                  values%2#0
        global CurrentApplicationID                                                           values%2#0,tmp%2#0
        l-load values%2#0 1                                                                   tmp%2#0,values%2#0
        l-load tmp%2#0 1                                                                      values%2#0,tmp%2#0
        ==                                                                                    tmp%3#0
        // mutable_native_types/case1_with_tups.py:127-129
        // assert (
        //     self.tup_bag.value.app == Global.current_application_id
        // ), "this error should be impossible"
        assert // this error should be impossible
        retsub


