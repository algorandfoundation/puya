main test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@18
    block@4: // abi_routing_L41
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%6#0: bool = (txn ApplicationID)
        (assert tmp%6#0)
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "create_box()void" => block@6, method "num_tups()uint64" => block@7, method "add_tup((uint64,uint64))void" => block@8, method "get_tup(uint64)(uint64,uint64)" => block@9, method "sum()uint64" => block@10, method "add_many_tups((uint64,uint64)[])void" => block@11, method "add_fixed_tups((uint64,uint64)[3])void" => block@12, method "set_a(uint64)void" => block@13, method "set_b(uint64)void" => block@14, method "get_3_tups(uint64)(uint64,uint64)[3]" => block@15, method "get_all_tups()(uint64,uint64)[]" => block@16, * => block@20}
    block@6: // create_box_route_L45
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.create_box[routing]()
        goto block@20
    block@7: // num_tups_route_L52
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.num_tups[routing]()
        goto block@20
    block@8: // add_tup_route_L56
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup[routing]()
        goto block@20
    block@9: // get_tup_route_L63
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_tup[routing]()
        goto block@20
    block@10: // sum_route_L68
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.sum[routing]()
        goto block@20
    block@11: // add_many_tups_route_L77
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_many_tups[routing]()
        goto block@20
    block@12: // add_fixed_tups_route_L82
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_fixed_tups[routing]()
        goto block@20
    block@13: // set_a_route_L87
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_a[routing]()
        goto block@20
    block@14: // set_b_route_L94
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_b[routing]()
        goto block@20
    block@15: // get_3_tups_route_L101
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_3_tups[routing]()
        goto block@20
    block@16: // get_all_tups_route_L114
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_all_tups[routing]()
        goto block@20
    block@18: // bare_routing_L41
        let tmp%9#0: uint64 = (txn OnCompletion)
        let not%tmp%9#0: bool = (! tmp%9#0)
        (assert not%tmp%9#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        exit 1u
    block@20: // after_if_else_L41
        fail

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.create_box[routing]() -> void:
    block@0: // L45
        let tmp%0#0: bool = (box_create "tup_bag" 4273u)
        (assert tmp%0#0) // box already exists
        let tmp%1#0: account = (txn Sender)
        (box_replace "tup_bag" 136u tmp%1#0)
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        (box_replace "tup_bag" 168u aggregate%val_as_bytes%0#0)
        let box%box_extract%0#0: Encoded(bool1[8]) = (box_extract "tup_bag" 4272u 1u)
        let aggregate%updated_target%0#0: Encoded(bool1[8]) = (setbit box%box_extract%0#0 0u 1u)
        (box_replace "tup_bag" 4272u aggregate%updated_target%0#0)
        exit 1u

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.num_tups[routing]() -> void:
    block@0: // L52
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let tmp%2#0: bytes = (concat 0x151f7c75 box%box_extract%0#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup[routing]() -> void:
    block@0: // L56
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let aggregate%item0%0#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%0#0 0u)
        let aggregate%item1%0#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%0#0 8u)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(aggregate%item0%0#0, aggregate%item1%0#0)
        exit 1u

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_tup[routing]() -> void:
    block@0: // L63
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%0#1: bool = (< index#0 values%0#0)
        (assert tmp%0#1) // index out of bounds
        let box%box_extract%2#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%0#0: uint64 = (* index#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let tmp%4#0: bytes = (concat 0x151f7c75 aggregate%encoded_element%0#0)
        (log tmp%4#0)
        exit 1u

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.sum[routing]() -> void:
    block@0: // L68
        let total#0: uint64 = 0u
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L71
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let total#1: uint64 = φ(total#0 <- block@0, total#3 <- block@3)
        let continue_looping%0#0: bool = (< i#1 values%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L72
        let box%box_extract%2#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%0#0: uint64 = (* i#1 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let tup.a#0: uint64 = (extract_uint64 aggregate%encoded_element%0#0 0u)
        let tup.b#0: uint64 = (extract_uint64 aggregate%encoded_element%0#0 8u)
        let total#2: uint64 = (+ total#1 tup.a#0)
        let total#3: uint64 = (+ total#2 tup.b#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@2
    block@5: // after_for_L71
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob total#1)
        let tmp%2#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_many_tups[routing]() -> void:
    block@0: // L77
        let tups#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tups#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L79
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 aggregate%array_length%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L80
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) tups#0)
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#1 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let tup.a#0: uint64 = (extract_uint64 aggregate%encoded_element%0#0 0u)
        let tup.b#0: uint64 = (extract_uint64 aggregate%encoded_element%0#0 8u)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tup.a#0, tup.b#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@2
    block@5: // after_for_L79
        exit 1u

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_fixed_tups[routing]() -> void:
    block@0: // L82
        let tups#0: Encoded((uint64,uint64)[3]) = (txna ApplicationArgs 1)
        let item_index_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L84
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 3u)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L85
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#1 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 tups#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let tup.a#0: uint64 = (extract_uint64 aggregate%encoded_element%0#0 0u)
        let tup.b#0: uint64 = (extract_uint64 aggregate%encoded_element%0#0 8u)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tup.a#0, tup.b#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@2
    block@5: // after_for_L84
        exit 1u

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_a[routing]() -> void:
    block@0: // L87
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let a#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups._check_owner()
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L90
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 values%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L91
        let box%box_extract%2#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%0#0: uint64 = (* i#1 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let aggregate%extract%1#0: bytes = ((extract 8 8) aggregate%encoded_element%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob a#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%extract%1#0)
        let box%index_ok%0#0: bool = (< i#1 8u)
        (assert box%index_ok%0#0) // index out of bounds
        let box%offset%4#0: uint64 = (+ 8u aggregate%bytes_offset%0#0)
        (box_replace "tup_bag" box%offset%4#0 aggregate%head%1#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@2
    block@5: // after_for_L90
        exit 1u

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_b[routing]() -> void:
    block@0: // L94
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let b#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups._check_owner()
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L97
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 values%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L98
        let box%box_extract%2#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%0#0: uint64 = (* i#1 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let aggregate%extract%0#0: bytes = ((extract 0 8) aggregate%encoded_element%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob b#0)
        let aggregate%head%1#0: bytes = (concat aggregate%extract%0#0 aggregate%val_as_bytes%1#0)
        let box%index_ok%0#0: bool = (< i#1 8u)
        (assert box%index_ok%0#0) // index out of bounds
        let box%offset%4#0: uint64 = (+ 8u aggregate%bytes_offset%0#0)
        (box_replace "tup_bag" box%offset%4#0 aggregate%head%1#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@2
    block@5: // after_for_L97
        exit 1u

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_3_tups[routing]() -> void:
    block@0: // L101
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let start#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%0#1: uint64 = (+ start#0 3u)
        let tmp%1#1: bool = (>= values%0#0 tmp%0#1)
        (assert tmp%1#1) // not enough items
        let box%box_extract%2#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%0#0: uint64 = (* start#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let aggregate%extract%0#0: bytes = ((extract 0 8) aggregate%encoded_element%0#0)
        let aggregate%extract%1#0: bytes = ((extract 8 8) aggregate%encoded_element%0#0)
        let tmp%2#1: uint64 = (+ start#0 1u)
        let aggregate%bytes_offset%1#0: uint64 = (* tmp%2#1 16u)
        let aggregate%encoded_element%1#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%1#0 16u) // on error: index access is out of bounds
        let aggregate%extract%2#0: bytes = ((extract 0 8) aggregate%encoded_element%1#0)
        let aggregate%extract%3#0: bytes = ((extract 8 8) aggregate%encoded_element%1#0)
        let tmp%3#0: uint64 = (+ start#0 2u)
        let aggregate%bytes_offset%2#0: uint64 = (* tmp%3#0 16u)
        let aggregate%encoded_element%2#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%2#0 16u) // on error: index access is out of bounds
        let aggregate%extract%4#0: bytes = ((extract 0 8) aggregate%encoded_element%2#0)
        let aggregate%extract%5#0: bytes = ((extract 8 8) aggregate%encoded_element%2#0)
        let aggregate%head%1#0: bytes = (concat aggregate%extract%0#0 aggregate%extract%1#0)
        let aggregate%head%4#0: bytes = (concat aggregate%extract%2#0 aggregate%extract%3#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%1#0 aggregate%head%4#0)
        let aggregate%head%7#0: bytes = (concat aggregate%extract%4#0 aggregate%extract%5#0)
        let aggregate%head%8#0: bytes = (concat aggregate%head%5#0 aggregate%head%7#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 aggregate%head%8#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_all_tups[routing]() -> void:
    block@0: // L114
        let result#0: Encoded(len+(uint64,uint64)[]) = 0x0000
        let box%box_extract%1#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%1#0)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L119
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let result#1: Encoded(len+(uint64,uint64)[]) = φ(result#0 <- block@0, result#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 values%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L120
        let box%box_extract%2#0: Encoded((uint64,uint64)[8]) = (box_extract "tup_bag" 8u 128u)
        let aggregate%bytes_offset%0#0: uint64 = (* i#1 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 box%box_extract%2#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let aggregate%extract%0#0: bytes = ((extract 0 8) aggregate%encoded_element%0#0)
        let aggregate%extract%1#0: bytes = ((extract 8 8) aggregate%encoded_element%0#0)
        let aggregate%head%1#0: bytes = (concat aggregate%extract%0#0 aggregate%extract%1#0)
        let concat%0#0: Encoded(len+(uint64,uint64)[]) = (concat result#1 aggregate%head%1#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 result#1 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let result#2: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@2
    block@5: // after_for_L119
        let tmp%1#0: bytes = (concat 0x151f7c75 result#1)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tup.a: uint64, tup.b: uint64) -> void:
    block@0: // L56
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups._check_owner()
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%0#0: bool = (< values%0#0 8u)
        (assert tmp%0#0) // too many tups
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tup.a#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tup.b#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let box%element_offset%0#0: uint64 = (* values%0#0 16u)
        let box%offset%3#0: uint64 = (+ 8u box%element_offset%0#0)
        (box_replace "tup_bag" box%offset%3#0 aggregate%head%1#0)
        let box%box_extract%2#0: Encoded(uint64) = (box_extract "tup_bag" 0u 8u)
        let values%2#0: uint64 = (btoi box%box_extract%2#0)
        let tmp%1#0: uint64 = (+ values%2#0 1u)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%1#0)
        (box_replace "tup_bag" 0u aggregate%val_as_bytes%2#0)
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups._check_owner() -> void:
    block@0: // L123
        let box%box_extract%0#0: Encoded(bool1[8]) = (box_extract "tup_bag" 4272u 1u)
        let aggregate%get_bit%0#0: bool = (getbit box%box_extract%0#0 0u)
        (assert aggregate%get_bit%0#0) // app not bootstrapped
        let box%box_extract%1#0: Encoded(uint8[32]) = (box_extract "tup_bag" 136u 32u)
        let tmp%0#0: account = (txn Sender)
        let tmp%1#0: bool = (== box%box_extract%1#0 tmp%0#0)
        (assert tmp%1#0) // sender not authorized
        let box%box_extract%2#0: Encoded(uint64) = (box_extract "tup_bag" 168u 8u)
        let values%2#0: uint64 = (btoi box%box_extract%2#0)
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let tmp%3#0: bool = (== values%2#0 tmp%2#0)
        (assert tmp%3#0) // this error should be impossible
        return 