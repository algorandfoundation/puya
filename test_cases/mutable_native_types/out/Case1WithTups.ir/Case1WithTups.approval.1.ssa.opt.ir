main test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: bool = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__()
        return tmp%0#1

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__() -> bool:
    block@0: // L31
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%0#0 ? block@1 : block@15
    block@1: // abi_routing_L31
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create_box()void" => block@2, method "num_tups()uint64" => block@3, method "add_tup((uint64,uint64))void" => block@4, method "get_tup(uint64)(uint64,uint64)" => block@5, method "sum()uint64" => block@6, method "add_many_tups((uint64,uint64)[])void" => block@7, method "add_fixed_tups((uint64,uint64)[3])void" => block@8, method "set_a(uint64)void" => block@9, method "set_b(uint64)void" => block@10, method "get_3_tups(uint64)(uint64,uint64)[3]" => block@11, method "get_all_tups()(uint64,uint64)[]" => block@12, * => block@19}
    block@2: // create_box_route_L35
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%5#0) // can only call when not creating
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.create_box()
        return 1u
    block@3: // num_tups_route_L41
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%9#0) // can only call when not creating
        let tmp%11#0: uint64 = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.num_tups()
        let val_as_bytes%0#0: bytes[8] = (itob tmp%11#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%12#0)
        return 1u
    block@4: // add_tup_route_L45
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64))%0#0: Encoded((uint64,uint64)) = (txna ApplicationArgs 1)
        let extract%0#0: bytes = ((extract 0 8) reinterpret_Encoded((uint64,uint64))%0#0)
        let tmp%17#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%0#0 0u)
        let extract%1#0: bytes = ((extract 8 8) reinterpret_Encoded((uint64,uint64))%0#0)
        let tmp%18#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%0#0 8u)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tmp%17#0, tmp%18#0)
        return 1u
    block@5: // get_tup_route_L52
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (!= tmp%21#0 0u)
        (assert tmp%21#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%23#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let (tmp%24#0: uint64, tmp%25#0: uint64) = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_tup(tmp%23#0)
        let val_as_bytes%1#0: bytes[8] = (itob tmp%24#0)
        let encoded%0#0: Encoded((uint64)) = val_as_bytes%1#0
        let val_as_bytes%2#0: bytes[8] = (itob tmp%25#0)
        let encoded%1#0: Encoded((uint64,uint64)) = (concat val_as_bytes%1#0 val_as_bytes%2#0)
        let encoded%2#0: Encoded((uint64,uint64)) = encoded%1#0
        let tmp%26#0: bytes = (concat 0x151f7c75 encoded%1#0)
        (log tmp%26#0)
        return 1u
    block@6: // sum_route_L57
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        let tmp%30#0: bool = (!= tmp%29#0 0u)
        (assert tmp%29#0) // can only call when not creating
        let tmp%31#0: uint64 = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.sum()
        let val_as_bytes%3#0: bytes[8] = (itob tmp%31#0)
        let tmp%32#0: bytes = (concat 0x151f7c75 val_as_bytes%3#0)
        (log tmp%32#0)
        return 1u
    block@7: // add_many_tups_route_L66
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        let tmp%36#0: bool = (!= tmp%35#0 0u)
        (assert tmp%35#0) // can only call when not creating
        let reinterpret_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_many_tups(reinterpret_Encoded(len+(uint64,uint64)[])%0#0)
        return 1u
    block@8: // add_fixed_tups_route_L71
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (! tmp%37#0)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        let tmp%40#0: bool = (!= tmp%39#0 0u)
        (assert tmp%39#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64)[3])%0#0: Encoded((uint64,uint64)[3]) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_fixed_tups(reinterpret_Encoded((uint64,uint64)[3])%0#0)
        return 1u
    block@9: // set_a_route_L76
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (! tmp%41#0)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        let tmp%44#0: bool = (!= tmp%43#0 0u)
        (assert tmp%43#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%45#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_a(tmp%45#0)
        return 1u
    block@10: // set_b_route_L83
        let tmp%46#0: uint64 = (txn OnCompletion)
        let tmp%47#0: bool = (! tmp%46#0)
        (assert tmp%47#0) // OnCompletion is not NoOp
        let tmp%48#0: uint64 = (txn ApplicationID)
        let tmp%49#0: bool = (!= tmp%48#0 0u)
        (assert tmp%48#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%50#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_b(tmp%50#0)
        return 1u
    block@11: // get_3_tups_route_L90
        let tmp%51#0: uint64 = (txn OnCompletion)
        let tmp%52#0: bool = (! tmp%51#0)
        (assert tmp%52#0) // OnCompletion is not NoOp
        let tmp%53#0: uint64 = (txn ApplicationID)
        let tmp%54#0: bool = (!= tmp%53#0 0u)
        (assert tmp%53#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%55#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        let tmp%56#0: Encoded((uint64,uint64)[3]) = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_3_tups(tmp%55#0)
        let tmp%57#0: bytes = (concat 0x151f7c75 tmp%56#0)
        (log tmp%57#0)
        return 1u
    block@12: // get_all_tups_route_L103
        let tmp%58#0: uint64 = (txn OnCompletion)
        let tmp%59#0: bool = (! tmp%58#0)
        (assert tmp%59#0) // OnCompletion is not NoOp
        let tmp%60#0: uint64 = (txn ApplicationID)
        let tmp%61#0: bool = (!= tmp%60#0 0u)
        (assert tmp%60#0) // can only call when not creating
        let tmp%62#0: Encoded(len+(uint64,uint64)[]) = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_all_tups()
        let tmp%63#0: bytes = (concat 0x151f7c75 tmp%62#0)
        (log tmp%63#0)
        return 1u
    block@15: // bare_routing_L31
        let tmp%64#0: uint64 = (txn OnCompletion)
        goto tmp%64#0 ? block@19 : block@16
    block@16: // __algopy_default_create_L1
        let tmp%65#0: uint64 = (txn ApplicationID)
        let tmp%66#0: bool = (! tmp%65#0)
        (assert tmp%66#0) // can only call when creating
        return 1u
    block@19: // after_if_else_L31
        return 0u

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.create_box() -> void:
    block@0: // L35
        let tmp%0#0: bool = (box_create "tup_bag" 176u)
        (assert tmp%0#0) // box already exists
        let tmp%1#0: bytes[32] = (txn Sender)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let length%0#0: uint64 = 32u
        let lengths_equal%0#0: bool = 1u
        let updated_data%0#0: bytes = ((replace2 136) maybe_value%0#0 tmp%1#0)
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (updated_data%0#0, 1u)
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let updated_data%1#0: bytes = ((replace2 168) maybe_value%1#0 val_as_bytes%0#0)
        (box_put "tup_bag" updated_data%1#0)
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.num_tups() -> uint64:
    block@0: // L41
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let extract%0#0: bytes = ((extract 0 8) maybe_value%0#0)
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        return tmp%0#0

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tup.a: uint64, tup.b: uint64) -> void:
    block@0: // L45
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups._check_owner()
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let extract%0#0: bytes = ((extract 0 8) maybe_value%0#0)
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let tmp%1#0: bool = (< tmp%0#0 8u)
        (assert tmp%1#0) // too many tups
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (maybe_value%0#0, maybe_exists%0#0)
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let extract%1#0: bytes = ((extract 8 128) maybe_value%1#0)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (maybe_value%0#0, maybe_exists%0#0)
        (assert maybe_exists%2#0) // check self.tup_bag exists
        let extract%2#0: bytes = ((extract 0 8) maybe_value%2#0)
        let tmp%2#0: uint64 = (extract_uint64 maybe_value%2#0 0u)
        let tmp%3#0: Encoded((uint64,uint64)) = encode<(uint64,uint64)>(tup.a#0, tup.b#0)
        let write_offset%0#0: uint64 = (* tmp%2#0 16u)
        let updated_array%0#0: bytes = (replace3 extract%1#0 write_offset%0#0 tmp%3#0)
        let updated_data%0#0: bytes = ((replace2 8) maybe_value%1#0 updated_array%0#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (updated_data%0#0, 1u)
        (assert maybe_exists%3#0) // check self.tup_bag exists
        let extract%3#0: bytes = ((extract 0 8) maybe_value%3#0)
        let tmp%4#0: uint64 = (extract_uint64 maybe_value%3#0 0u)
        let tmp%5#0: uint64 = (+ tmp%4#0 1u)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%5#0)
        let updated_data%1#0: bytes = ((replace2 0) maybe_value%3#0 val_as_bytes%0#0)
        (box_put "tup_bag" updated_data%1#0)
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_tup(index: uint64) -> <uint64, uint64>:
    block@0: // L52
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let extract%0#0: bytes = ((extract 0 8) maybe_value%0#0)
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let tmp%1#0: bool = (< index#0 tmp%0#0)
        (assert tmp%1#0) // index out of bounds
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (maybe_value%0#0, maybe_exists%0#0)
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let extract%1#0: bytes = ((extract 8 128) maybe_value%1#0)
        let bytes_offset%0#0: uint64 = (* index#0 16u)
        let encoded_element%0#0: bytes = (extract3 extract%1#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let extract%2#0: bytes = ((extract 0 8) encoded_element%0#0)
        let tmp%2#0: uint64 = (extract_uint64 encoded_element%0#0 0u)
        let extract%3#0: bytes = ((extract 8 8) encoded_element%0#0)
        let tmp%3#0: uint64 = (extract_uint64 encoded_element%0#0 8u)
        return tmp%2#0 tmp%3#0

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.sum() -> uint64:
    block@0: // L57
        let total#0: uint64 = 0u
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let extract%0#0: bytes = ((extract 0 8) maybe_value%0#0)
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L60
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let total#1: uint64 = φ(total#0 <- block@0, total#3 <- block@2)
        let continue_looping%0#0: bool = (< i#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L61
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let extract%1#0: bytes = ((extract 8 128) maybe_value%1#0)
        let bytes_offset%0#0: uint64 = (* i#1 16u)
        let encoded_element%0#0: bytes = (extract3 extract%1#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let extract%2#0: bytes = ((extract 0 8) encoded_element%0#0)
        let tup.a#0: uint64 = (extract_uint64 encoded_element%0#0 0u)
        let extract%3#0: bytes = ((extract 8 8) encoded_element%0#0)
        let tup.b#0: uint64 = (extract_uint64 encoded_element%0#0 8u)
        let total#2: uint64 = (+ total#1 tup.a#0)
        let total#3: uint64 = (+ total#2 tup.b#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L60
        return total#1

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_many_tups(tups: Encoded(len+(uint64,uint64)[])) -> void:
    block@0: // L66
        let length%0#0: uint64 = tups#0.length
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L68
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L69
        let array_trimmed%0#0: bytes = ((extract 2 0) tups#0)
        let bytes_offset%0#0: uint64 = (* item_index_internal%0#1 16u)
        let encoded_element%0#0: bytes = (extract3 array_trimmed%0#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let extract%0#0: bytes = ((extract 0 8) encoded_element%0#0)
        let tup.a#0: uint64 = (extract_uint64 encoded_element%0#0 0u)
        let extract%1#0: bytes = ((extract 8 8) encoded_element%0#0)
        let tup.b#0: uint64 = (extract_uint64 encoded_element%0#0 8u)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tup.a#0, tup.b#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L68
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_fixed_tups(tups: Encoded((uint64,uint64)[3])) -> void:
    block@0: // L71
        let length%0#0: uint64 = tups#0.length
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L73
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L74
        let bytes_offset%0#0: uint64 = (* item_index_internal%0#1 16u)
        let encoded_element%0#0: bytes = (extract3 tups#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let extract%0#0: bytes = ((extract 0 8) encoded_element%0#0)
        let tup.a#0: uint64 = (extract_uint64 encoded_element%0#0 0u)
        let extract%1#0: bytes = ((extract 8 8) encoded_element%0#0)
        let tup.b#0: uint64 = (extract_uint64 encoded_element%0#0 8u)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tup.a#0, tup.b#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L73
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_a(a: uint64) -> void:
    block@0: // L76
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups._check_owner()
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let extract%0#0: bytes = ((extract 0 8) maybe_value%0#0)
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L79
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L80
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let extract%1#0: bytes = ((extract 8 128) maybe_value%1#0)
        let bytes_offset%0#0: uint64 = (* i#1 16u)
        let encoded_element%0#0: bytes = (extract3 extract%1#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let extract%3#0: bytes = ((extract 8 8) encoded_element%0#0)
        let tup.b#0: uint64 = (extract_uint64 encoded_element%0#0 8u)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (maybe_value%1#0, maybe_exists%1#0)
        (assert maybe_exists%2#0) // check self.tup_bag exists
        let extract%4#0: bytes = ((extract 8 128) maybe_value%2#0)
        let tmp%3#0: Encoded((uint64,uint64)) = encode<(uint64,uint64)>(a#0, tup.b#0)
        let updated_array%0#0: bytes = (replace3 extract%4#0 bytes_offset%0#0 tmp%3#0)
        let updated_data%0#0: bytes = ((replace2 8) maybe_value%2#0 updated_array%0#0)
        (box_put "tup_bag" updated_data%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L79
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_b(b: uint64) -> void:
    block@0: // L83
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups._check_owner()
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let extract%0#0: bytes = ((extract 0 8) maybe_value%0#0)
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L86
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L87
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let extract%1#0: bytes = ((extract 8 128) maybe_value%1#0)
        let bytes_offset%0#0: uint64 = (* i#1 16u)
        let encoded_element%0#0: bytes = (extract3 extract%1#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let extract%2#0: bytes = ((extract 0 8) encoded_element%0#0)
        let tup.a#0: uint64 = (extract_uint64 encoded_element%0#0 0u)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (maybe_value%1#0, maybe_exists%1#0)
        (assert maybe_exists%2#0) // check self.tup_bag exists
        let extract%4#0: bytes = ((extract 8 128) maybe_value%2#0)
        let tmp%3#0: Encoded((uint64,uint64)) = encode<(uint64,uint64)>(tup.a#0, b#0)
        let updated_array%0#0: bytes = (replace3 extract%4#0 bytes_offset%0#0 tmp%3#0)
        let updated_data%0#0: bytes = ((replace2 8) maybe_value%2#0 updated_array%0#0)
        (box_put "tup_bag" updated_data%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L86
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_3_tups(start: uint64) -> Encoded((uint64,uint64)[3]):
    block@0: // L90
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let extract%0#0: bytes = ((extract 0 8) maybe_value%0#0)
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let tmp%1#0: uint64 = (+ start#0 3u)
        let tmp%2#0: bool = (>= tmp%0#0 tmp%1#0)
        (assert tmp%2#0) // not enough items
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (maybe_value%0#0, maybe_exists%0#0)
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let items#0: Encoded((uint64,uint64)[8]) = ((extract 8 128) maybe_value%1#0)
        let bytes_offset%0#0: uint64 = (* start#0 16u)
        let encoded_element%0#0: bytes = (extract3 items#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let extract%2#0: bytes = ((extract 0 8) encoded_element%0#0)
        let tmp%3#0: uint64 = (extract_uint64 encoded_element%0#0 0u)
        let extract%3#0: bytes = ((extract 8 8) encoded_element%0#0)
        let tmp%4#0: uint64 = (extract_uint64 encoded_element%0#0 8u)
        let tmp%5#0: uint64 = (+ start#0 1u)
        let bytes_offset%1#0: uint64 = (* tmp%5#0 16u)
        let encoded_element%1#0: bytes = (extract3 items#0 bytes_offset%1#0 16u) // on error: index access is out of bounds
        let extract%4#0: bytes = ((extract 0 8) encoded_element%1#0)
        let tmp%6#0: uint64 = (extract_uint64 encoded_element%1#0 0u)
        let extract%5#0: bytes = ((extract 8 8) encoded_element%1#0)
        let tmp%7#0: uint64 = (extract_uint64 encoded_element%1#0 8u)
        let tmp%8#0: uint64 = (+ start#0 2u)
        let bytes_offset%2#0: uint64 = (* tmp%8#0 16u)
        let encoded_element%2#0: bytes = (extract3 items#0 bytes_offset%2#0 16u) // on error: index access is out of bounds
        let extract%6#0: bytes = ((extract 0 8) encoded_element%2#0)
        let tmp%9#0: uint64 = (extract_uint64 encoded_element%2#0 0u)
        let extract%7#0: bytes = ((extract 8 8) encoded_element%2#0)
        let tmp%10#0: uint64 = (extract_uint64 encoded_element%2#0 8u)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%3#0)
        let encoded%0#0: Encoded((uint64)) = val_as_bytes%0#0
        let val_as_bytes%1#0: bytes[8] = (itob tmp%4#0)
        let encoded%1#0: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let encoded%2#0: Encoded((uint64,uint64)) = encoded%1#0
        let encoded%3#0: Encoded(((uint64,uint64))) = encoded%1#0
        let val_as_bytes%2#0: bytes[8] = (itob tmp%6#0)
        let encoded%4#0: Encoded((uint64)) = val_as_bytes%2#0
        let val_as_bytes%3#0: bytes[8] = (itob tmp%7#0)
        let encoded%5#0: Encoded((uint64,uint64)) = (concat val_as_bytes%2#0 val_as_bytes%3#0)
        let encoded%6#0: Encoded((uint64,uint64)) = encoded%5#0
        let encoded%7#0: Encoded(((uint64,uint64),(uint64,uint64))) = (concat encoded%1#0 encoded%5#0)
        let val_as_bytes%4#0: bytes[8] = (itob tmp%9#0)
        let encoded%8#0: Encoded((uint64)) = val_as_bytes%4#0
        let val_as_bytes%5#0: bytes[8] = (itob tmp%10#0)
        let encoded%9#0: Encoded((uint64,uint64)) = (concat val_as_bytes%4#0 val_as_bytes%5#0)
        let encoded%10#0: Encoded((uint64,uint64)) = encoded%9#0
        let encoded%11#0: Encoded(((uint64,uint64),(uint64,uint64),(uint64,uint64))) = (concat encoded%7#0 encoded%9#0)
        let encoded%12#0: Encoded((uint64,uint64)[3]) = encoded%11#0
        return encoded%11#0

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_all_tups() -> Encoded(len+(uint64,uint64)[]):
    block@0: // L103
        let as_bytes%0#0: bytes[8] = (itob 0u)
        let len_u16%0#0: bytes = 0x0000
        let encoded%0#0: bytes = 0x0000
        let result#0: Encoded(len+(uint64,uint64)[]) = 0x0000
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let items#0: Encoded((uint64,uint64)[8]) = ((extract 8 128) maybe_value%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (maybe_value%0#0, maybe_exists%0#0)
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let extract%1#0: bytes = ((extract 0 8) maybe_value%1#0)
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%1#0 0u)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L108
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let result#1: Encoded(len+(uint64,uint64)[]) = φ(result#0 <- block@0, result#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L109
        let bytes_offset%0#0: uint64 = (* i#1 16u)
        let encoded_element%0#0: bytes = (extract3 items#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let extract%2#0: bytes = ((extract 0 8) encoded_element%0#0)
        let tmp%1#0: uint64 = (extract_uint64 encoded_element%0#0 0u)
        let extract%3#0: bytes = ((extract 8 8) encoded_element%0#0)
        let tmp%2#0: uint64 = (extract_uint64 encoded_element%0#0 8u)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let encoded%2#0: Encoded((uint64)) = val_as_bytes%0#0
        let val_as_bytes%1#0: bytes[8] = (itob tmp%2#0)
        let encoded%3#0: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let encoded%4#0: Encoded((uint64,uint64)) = encoded%3#0
        let encoded%5#0: Encoded(((uint64,uint64))) = encoded%3#0
        let encoded%6#0: Encoded((uint64,uint64)[]) = encoded%3#0
        let concat%0#0: Encoded(len+(uint64,uint64)[]) = (concat result#1 encoded%3#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 16u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let result#2: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L108
        return result#1

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups._check_owner() -> void:
    block@0: // L112
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let extract%0#0: bytes = ((extract 136 32) maybe_value%0#0)
        let tmp%0#0: bytes[32] = (txn Sender)
        let tmp%1#0: bool = (== extract%0#0 tmp%0#0)
        (assert tmp%1#0) // sender not authorized
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (maybe_value%0#0, maybe_exists%0#0)
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let extract%1#0: bytes = ((extract 168 8) maybe_value%1#0)
        let tmp%2#0: uint64 = (extract_uint64 maybe_value%1#0 168u)
        let tmp%3#0: uint64 = (global CurrentApplicationID)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        (assert tmp%4#0) // this error should be impossible
        return 