main test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L224
        let tmp%0#0: bytes = ((substring 0 2) array#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) array#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_byte_length_head(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L247
        let tmp%0#0: bytes = ((substring 0 2) source#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) source#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_dynamic_element(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L259
        let tmp%0#0: uint64 = (* index#0 2u)
        let tmp%1#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let original_offset#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (+ index#0 1u)
        let tmp%3#0: uint64 = (* tmp%2#0 2u)
        let tmp%4#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#0)
        let next_item_offset#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (len array_head_and_tail#0)
        let end_of_tail#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let tmp%7#0: uint64 = (- tmp%6#0 1u)
        let is_before_end#0: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let end_offset#0: uint64 = tmp%8#0
        let tmp%9#0: uint64 = (- end_offset#0 original_offset#0)
        let original_item_length#0: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (len new_item#0)
        let new_item_length#0: uint64 = tmp%10#0
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let tmp%14#0: bytes = (concat tmp%12#0 tmp%13#0)
        let new_head_and_tail#0: bytes = tmp%14#0
        let tmp%15#0: uint64 = (* array_length#0 2u)
        let tmp%16#0: uint64 = (+ index#0 1u)
        let tmp%17#0: uint64 = (* tmp%16#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%17#0
        goto block@1
    block@1: // for_header_L276
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L277
        let tmp%18#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#0: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#1: uint64 = tmp%19#0
        let tmp%20#0: uint64 = (- tail_offset#1 original_item_length#0)
        let tail_offset#2: uint64 = tmp%20#0
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tmp%22#0: bytes = ((extract 6 2) tmp%21#0)
        let tail_offset_bytes#0: bytes = tmp%22#0
        let tmp%23#0: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let new_head_and_tail#2: bytes = tmp%23#0
        goto block@3
    block@3: // for_footer_L276
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L276
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L285
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let offset_for_index#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let old_item_length#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let tmp%5#0: uint64 = (+ tmp%4#0 2u)
        let old_item_end#0: uint64 = tmp%5#0
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        return tmp%11#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L313
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tmp%3#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tail_offset#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* length#0 2u)
        let tmp%5#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%5#0
        goto block@1
    block@1: // for_header_L334
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%4#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L335
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let tail_offset_bytes#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let array_head_and_tail#2: bytes = tmp%8#0
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (+ tail_offset#1 tmp%10#0)
        let tail_offset#2: uint64 = tmp%11#0
        let tmp%12#0: uint64 = (+ head_offset#1 2u)
        let head_offset#2: uint64 = tmp%12#0
        goto block@3
    block@3: // for_footer_L334
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L334
        return array_head_and_tail#1

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__() -> bool:
    block@0: // L41
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@15
    block@1: // abi_routing_L41
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create_box()void" => block@2, method "num_tups()uint64" => block@3, method "add_tup((uint64,uint64))void" => block@4, method "get_tup(uint64)(uint64,uint64)" => block@5, method "sum()uint64" => block@6, method "add_many_tups((uint64,uint64)[])void" => block@7, method "add_fixed_tups((uint64,uint64)[3])void" => block@8, method "set_a(uint64)void" => block@9, method "set_b(uint64)void" => block@10, method "get_3_tups(uint64)(uint64,uint64)[3]" => block@11, method "get_all_tups()(uint64,uint64)[]" => block@12, * => block@13}
    block@2: // create_box_route_L45
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.create_box()
        return 1u
    block@3: // num_tups_route_L52
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let tmp%11#0: uint64 = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.num_tups()
        let tmp%12#0: Encoded(uint64) = bytes_encode<uint64>(tmp%11#0)
        let tmp%13#0: bytes = (concat 0x151f7c75 tmp%12#0)
        (log tmp%13#0)
        return 1u
    block@4: // add_tup_route_L56
        let tmp%14#0: uint64 = (txn OnCompletion)
        let tmp%15#0: bool = (== tmp%14#0 NoOp)
        (assert tmp%15#0) // OnCompletion is not NoOp
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (!= tmp%16#0 0u)
        (assert tmp%17#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let (tmp%18#0: uint64, tmp%19#0: uint64) = decode_bytes<(uint64,uint64,)>(reinterpret_Encoded(uint64,uint64)%0#0)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tmp%18#0, tmp%19#0)
        return 1u
    block@5: // get_tup_route_L63
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (== tmp%20#0 NoOp)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        let tmp%23#0: bool = (!= tmp%22#0 0u)
        (assert tmp%23#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%24#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let (tmp%25#0: uint64, tmp%26#0: uint64) = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_tup(tmp%24#0)
        let tmp%27#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%25#0, tmp%26#0)
        let tmp%28#0: bytes = (concat 0x151f7c75 tmp%27#0)
        (log tmp%28#0)
        return 1u
    block@6: // sum_route_L68
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (== tmp%29#0 NoOp)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        let tmp%32#0: bool = (!= tmp%31#0 0u)
        (assert tmp%32#0) // can only call when not creating
        let tmp%33#0: uint64 = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.sum()
        let tmp%34#0: Encoded(uint64) = bytes_encode<uint64>(tmp%33#0)
        let tmp%35#0: bytes = (concat 0x151f7c75 tmp%34#0)
        (log tmp%35#0)
        return 1u
    block@7: // add_many_tups_route_L77
        let tmp%36#0: uint64 = (txn OnCompletion)
        let tmp%37#0: bool = (== tmp%36#0 NoOp)
        (assert tmp%37#0) // OnCompletion is not NoOp
        let tmp%38#0: uint64 = (txn ApplicationID)
        let tmp%39#0: bool = (!= tmp%38#0 0u)
        (assert tmp%39#0) // can only call when not creating
        let reinterpret_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_many_tups(reinterpret_Encoded(len+(uint64,uint64)[])%0#0)
        return 1u
    block@8: // add_fixed_tups_route_L82
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (== tmp%40#0 NoOp)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        let tmp%43#0: bool = (!= tmp%42#0 0u)
        (assert tmp%43#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64)[3])%0#0: Encoded((uint64,uint64)[3]) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_fixed_tups(reinterpret_Encoded((uint64,uint64)[3])%0#0)
        return 1u
    block@9: // set_a_route_L87
        let tmp%44#0: uint64 = (txn OnCompletion)
        let tmp%45#0: bool = (== tmp%44#0 NoOp)
        (assert tmp%45#0) // OnCompletion is not NoOp
        let tmp%46#0: uint64 = (txn ApplicationID)
        let tmp%47#0: bool = (!= tmp%46#0 0u)
        (assert tmp%47#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%48#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_a(tmp%48#0)
        return 1u
    block@10: // set_b_route_L94
        let tmp%49#0: uint64 = (txn OnCompletion)
        let tmp%50#0: bool = (== tmp%49#0 NoOp)
        (assert tmp%50#0) // OnCompletion is not NoOp
        let tmp%51#0: uint64 = (txn ApplicationID)
        let tmp%52#0: bool = (!= tmp%51#0 0u)
        (assert tmp%52#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%53#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%2#0)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_b(tmp%53#0)
        return 1u
    block@11: // get_3_tups_route_L101
        let tmp%54#0: uint64 = (txn OnCompletion)
        let tmp%55#0: bool = (== tmp%54#0 NoOp)
        (assert tmp%55#0) // OnCompletion is not NoOp
        let tmp%56#0: uint64 = (txn ApplicationID)
        let tmp%57#0: bool = (!= tmp%56#0 0u)
        (assert tmp%57#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%58#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%3#0)
        let tmp%59#0: Encoded((uint64,uint64)[3]) = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_3_tups(tmp%58#0)
        let tmp%60#0: bytes = (concat 0x151f7c75 tmp%59#0)
        (log tmp%60#0)
        return 1u
    block@12: // get_all_tups_route_L114
        let tmp%61#0: uint64 = (txn OnCompletion)
        let tmp%62#0: bool = (== tmp%61#0 NoOp)
        (assert tmp%62#0) // OnCompletion is not NoOp
        let tmp%63#0: uint64 = (txn ApplicationID)
        let tmp%64#0: bool = (!= tmp%63#0 0u)
        (assert tmp%64#0) // can only call when not creating
        let tmp%65#0: Encoded(len+(uint64,uint64)[]) = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_all_tups()
        let tmp%66#0: bytes = (concat 0x151f7c75 tmp%65#0)
        (log tmp%66#0)
        return 1u
    block@13: // switch_case_default_L41
        goto block@14
    block@14: // switch_case_next_L41
        goto block@19
    block@15: // bare_routing_L41
        let tmp%67#0: uint64 = (txn OnCompletion)
        switch tmp%67#0 {0u => block@16, * => block@17}
    block@16: // __algopy_default_create_L1
        let tmp%68#0: uint64 = (txn ApplicationID)
        let tmp%69#0: bool = (== tmp%68#0 0u)
        (assert tmp%69#0) // can only call when creating
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__algopy_default_create()
        return 1u
    block@17: // switch_case_default_L41
        goto block@18
    block@18: // switch_case_next_L41
        goto block@19
    block@19: // after_if_else_L41
        return 0u

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__init__() -> void:
    block@0: // L42
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.create_box() -> void:
    block@0: // L45
        let tmp%0#0: bool = (box_create "tup_bag" 4273u)
        (assert tmp%0#0) // box already exists
        let tmp%1#0: account = (txn Sender)
        let storage_value%0#0: bytes = box_read("tup_bag")
        let encoded_value%0#0: Encoded(uint8[32]) = bytes_encode<uint8[32]>(tmp%1#0)
        let updated_tuple%0#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = replace_value(storage_value%0#0, 2, encoded_value%0#0)
        box_write("tup_bag", updated_tuple%0#0)
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let storage_value%1#0: bytes = box_read("tup_bag")
        let encoded_value%1#0: Encoded(uint64) = bytes_encode<uint64>(tmp%2#0)
        let updated_tuple%1#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = replace_value(storage_value%1#0, 3, encoded_value%1#0)
        box_write("tup_bag", updated_tuple%1#0)
        let storage_value%2#0: bytes = box_read("tup_bag")
        let encoded_value%2#0: Encoded(bool1) = bytes_encode<bool1>(1u)
        let updated_tuple%2#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = replace_value(storage_value%2#0, 5, encoded_value%2#0)
        box_write("tup_bag", updated_tuple%2#0)
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.num_tups() -> uint64:
    block@0: // L52
        let storage_value%0#0: bytes = box_read("tup_bag")
        let tuple_item%0#0: Encoded(uint64) = extract_value(storage_value%0#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        return values%0#0

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tup.a: uint64, tup.b: uint64) -> void:
    block@0: // L56
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups._check_owner()
        let storage_value%0#0: bytes = box_read("tup_bag")
        let tuple_item%0#0: Encoded(uint64) = extract_value(storage_value%0#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%0#0: bool = (< values%0#0 8u)
        (assert tmp%0#0) // too many tups
        let storage_value%1#0: bytes = box_read("tup_bag")
        let storage_value%2#0: bytes = box_read("tup_bag")
        let tuple_item%1#0: Encoded(uint64) = extract_value(storage_value%2#0, 0)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let encoded_value%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tup.a#0, tup.b#0)
        let updated_tuple%0#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = replace_value(storage_value%1#0, 1, values%1#0, encoded_value%0#0)
        box_write("tup_bag", updated_tuple%0#0)
        let storage_value%3#0: bytes = box_read("tup_bag")
        let tuple_item%2#0: Encoded(uint64) = extract_value(storage_value%3#0, 0)
        let values%2#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let tmp%1#0: uint64 = (+ values%2#0 1u)
        let encoded_value%1#0: Encoded(uint64) = bytes_encode<uint64>(tmp%1#0)
        let updated_tuple%1#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = replace_value(storage_value%3#0, 0, encoded_value%1#0)
        box_write("tup_bag", updated_tuple%1#0)
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_tup(index: uint64) -> <uint64, uint64>:
    block@0: // L63
        let storage_value%0#0: bytes = box_read("tup_bag")
        let tuple_item%0#0: Encoded(uint64) = extract_value(storage_value%0#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%0#0: bool = (< index#0 values%0#0)
        (assert tmp%0#0) // index out of bounds
        let storage_value%1#0: bytes = box_read("tup_bag")
        let tuple_item%1#0: Encoded((uint64,uint64)[8]) = extract_value(storage_value%1#0, 1)
        let array_item%0#0: Encoded(uint64,uint64) = extract_value(tuple_item%1#0, index#0)
        let (values%1#0: uint64, values%2#0: uint64) = decode_bytes<(uint64,uint64,)>(array_item%0#0)
        return values%1#0 values%2#0

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.sum() -> uint64:
    block@0: // L68
        let total#0: uint64 = 0u
        let storage_value%0#0: bytes = box_read("tup_bag")
        let tuple_item%0#0: Encoded(uint64) = extract_value(storage_value%0#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L71
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let total#1: uint64 = φ(total#0 <- block@0, total#3 <- block@3)
        let continue_looping%0#0: bool = (< i#1 values%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L72
        let storage_value%1#0: bytes = box_read("tup_bag")
        let tuple_item%1#0: Encoded((uint64,uint64)[8]) = extract_value(storage_value%1#0, 1)
        let array_item%0#0: Encoded(uint64,uint64) = extract_value(tuple_item%1#0, i#1)
        let (values%1#0: uint64, values%2#0: uint64) = decode_bytes<(uint64,uint64,)>(array_item%0#0)
        let (tup.a#0: uint64, tup.b#0: uint64) = (values%1#0, values%2#0)
        let tmp%0#0: uint64 = (+ total#1 tup.a#0)
        let total#2: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (+ total#2 tup.b#0)
        let total#3: uint64 = tmp%1#0
        goto block@3
    block@3: // for_footer_L71
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L71
        return total#1

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_many_tups(tups: Encoded(len+(uint64,uint64)[])) -> void:
    block@0: // L77
        let array_length%0#0: uint64 = array_len(tups#0)
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = array_length%0#0
        goto block@1
    block@1: // for_header_L79
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L80
        let array_item%0#0: Encoded(uint64,uint64) = extract_value(tups#0, item_index_internal%0#1)
        let (values%0#0: uint64, values%1#0: uint64) = decode_bytes<(uint64,uint64,)>(array_item%0#0)
        let (tup.a#0: uint64, tup.b#0: uint64) = (values%0#0, values%1#0)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tup.a#0, tup.b#0)
        goto block@3
    block@3: // for_footer_L79
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L79
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_fixed_tups(tups: Encoded((uint64,uint64)[3])) -> void:
    block@0: // L82
        let array_length%0#0: uint64 = array_len(tups#0)
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = array_length%0#0
        goto block@1
    block@1: // for_header_L84
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L85
        let array_item%0#0: Encoded(uint64,uint64) = extract_value(tups#0, item_index_internal%0#1)
        let (values%0#0: uint64, values%1#0: uint64) = decode_bytes<(uint64,uint64,)>(array_item%0#0)
        let (tup.a#0: uint64, tup.b#0: uint64) = (values%0#0, values%1#0)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tup.a#0, tup.b#0)
        goto block@3
    block@3: // for_footer_L84
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L84
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_a(a: uint64) -> void:
    block@0: // L87
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups._check_owner()
        let storage_value%0#0: bytes = box_read("tup_bag")
        let tuple_item%0#0: Encoded(uint64) = extract_value(storage_value%0#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L90
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 values%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L91
        let storage_value%1#0: bytes = box_read("tup_bag")
        let tuple_item%1#0: Encoded((uint64,uint64)[8]) = extract_value(storage_value%1#0, 1)
        let array_item%0#0: Encoded(uint64,uint64) = extract_value(tuple_item%1#0, i#1)
        let (values%1#0: uint64, values%2#0: uint64) = decode_bytes<(uint64,uint64,)>(array_item%0#0)
        let (tup.a#0: uint64, tup.b#0: uint64) = (values%1#0, values%2#0)
        let storage_value%2#0: bytes = box_read("tup_bag")
        let encoded_value%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(a#0, tup.b#0)
        let updated_tuple%0#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = replace_value(storage_value%2#0, 1, i#1, encoded_value%0#0)
        box_write("tup_bag", updated_tuple%0#0)
        goto block@3
    block@3: // for_footer_L90
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L90
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_b(b: uint64) -> void:
    block@0: // L94
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups._check_owner()
        let storage_value%0#0: bytes = box_read("tup_bag")
        let tuple_item%0#0: Encoded(uint64) = extract_value(storage_value%0#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L97
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 values%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L98
        let storage_value%1#0: bytes = box_read("tup_bag")
        let tuple_item%1#0: Encoded((uint64,uint64)[8]) = extract_value(storage_value%1#0, 1)
        let array_item%0#0: Encoded(uint64,uint64) = extract_value(tuple_item%1#0, i#1)
        let (values%1#0: uint64, values%2#0: uint64) = decode_bytes<(uint64,uint64,)>(array_item%0#0)
        let (tup.a#0: uint64, tup.b#0: uint64) = (values%1#0, values%2#0)
        let storage_value%2#0: bytes = box_read("tup_bag")
        let encoded_value%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tup.a#0, b#0)
        let updated_tuple%0#0: Encoded(uint64,(uint64,uint64)[8],uint8[32],uint64,uint8[4096],bool1) = replace_value(storage_value%2#0, 1, i#1, encoded_value%0#0)
        box_write("tup_bag", updated_tuple%0#0)
        goto block@3
    block@3: // for_footer_L97
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L97
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_3_tups(start: uint64) -> Encoded((uint64,uint64)[3]):
    block@0: // L101
        let storage_value%0#0: bytes = box_read("tup_bag")
        let tuple_item%0#0: Encoded(uint64) = extract_value(storage_value%0#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%0#0: uint64 = (+ start#0 3u)
        let tmp%1#0: bool = (>= values%0#0 tmp%0#0)
        (assert tmp%1#0) // not enough items
        let storage_value%1#0: bytes = box_read("tup_bag")
        let tuple_item%1#0: Encoded((uint64,uint64)[8]) = extract_value(storage_value%1#0, 1)
        let items#0: Encoded((uint64,uint64)[8]) = tuple_item%1#0
        let array_item%0#0: Encoded(uint64,uint64) = extract_value(items#0, start#0)
        let (values%1#0: uint64, values%2#0: uint64) = decode_bytes<(uint64,uint64,)>(array_item%0#0)
        let tmp%2#0: uint64 = (+ start#0 1u)
        let array_item%1#0: Encoded(uint64,uint64) = extract_value(items#0, tmp%2#0)
        let (values%3#0: uint64, values%4#0: uint64) = decode_bytes<(uint64,uint64,)>(array_item%1#0)
        let tmp%3#0: uint64 = (+ start#0 2u)
        let array_item%2#0: Encoded(uint64,uint64) = extract_value(items#0, tmp%3#0)
        let (values%5#0: uint64, values%6#0: uint64) = decode_bytes<(uint64,uint64,)>(array_item%2#0)
        let encoded_array%0#0: Encoded((uint64,uint64)[3]) = bytes_encode<(uint64,uint64)[3]>(values%1#0, values%2#0, values%3#0, values%4#0, values%5#0, values%6#0)
        return encoded_array%0#0

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_all_tups() -> Encoded(len+(uint64,uint64)[]):
    block@0: // L114
        let encoded_array%0#0: Encoded(len+(uint64,uint64)[]) = bytes_encode<(len+(uint64,uint64)[])>()
        let result#0: Encoded(len+(uint64,uint64)[]) = encoded_array%0#0
        let storage_value%0#0: bytes = box_read("tup_bag")
        let tuple_item%0#0: Encoded((uint64,uint64)[8]) = extract_value(storage_value%0#0, 1)
        let items#0: Encoded((uint64,uint64)[8]) = tuple_item%0#0
        let storage_value%1#0: bytes = box_read("tup_bag")
        let tuple_item%1#0: Encoded(uint64) = extract_value(storage_value%1#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L119
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let result#1: Encoded(len+(uint64,uint64)[]) = φ(result#0 <- block@0, result#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 values%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L120
        let array_item%0#0: Encoded(uint64,uint64) = extract_value(items#0, i#1)
        let (values%1#0: uint64, values%2#0: uint64) = decode_bytes<(uint64,uint64,)>(array_item%0#0)
        let tmp%0#0: Encoded((uint64,uint64)[]) = bytes_encode<(uint64,uint64)[]>(values%1#0, values%2#0)
        let tmp%1#0: Encoded(len+(uint64,uint64)[]) = array_concat(result#1, tmp%0#0, 1u)
        let result#2: Encoded(len+(uint64,uint64)[]) = tmp%1#0
        goto block@3
    block@3: // for_footer_L119
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L119
        return result#1

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups._check_owner() -> void:
    block@0: // L123
        let storage_value%0#0: bytes = box_read("tup_bag")
        let tuple_item%0#0: bool = extract_value(storage_value%0#0, 5)
        let values%0#0: bool = decode_bytes<bool>(tuple_item%0#0)
        (assert values%0#0) // app not bootstrapped
        let storage_value%1#0: bytes = box_read("tup_bag")
        let tuple_item%1#0: Encoded(uint8[32]) = extract_value(storage_value%1#0, 2)
        let values%1#0: account = decode_bytes<account>(tuple_item%1#0)
        let tmp%0#0: account = (txn Sender)
        let tmp%1#0: bool = (== values%1#0 tmp%0#0)
        (assert tmp%1#0) // sender not authorized
        let storage_value%2#0: bytes = box_read("tup_bag")
        let tuple_item%2#0: Encoded(uint64) = extract_value(storage_value%2#0, 3)
        let values%2#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let tmp%2#0: uint64 = (global CurrentApplicationID)
        let tmp%3#0: bool = (== values%2#0 tmp%2#0)
        (assert tmp%3#0) // this error should be impossible
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__algopy_default_create() -> void:
    block@0: // L1
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        let tmp%0#0: bool = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__()
        return tmp%0#0