// Op                                                                                                         Stack (out)
// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__algopy_entrypoint_with_init() -> uint64:
subroutine main:
    main_block@0:
        // mutable_native_types/case1_with_tups.py:31
        // class Case1WithTups(arc4.ARC4Contract):
        txn NumAppArgs                                                                                        tmp%0#2
        l-load tmp%0#2 0                                                                                      tmp%0#2
        bz main_bare_routing@16 ; b main_abi_routing@4

    main_abi_routing@4:
        // mutable_native_types/case1_with_tups.py:31
        // class Case1WithTups(arc4.ARC4Contract):
        txna ApplicationArgs 0                                                                                tmp%2#0
        method create_box()void                                                                               tmp%2#0,Method(create_box()void)
        method num_tups()uint64                                                                               tmp%2#0,Method(create_box()void),Method(num_tups()uint64)
        method add_tup((uint64,uint64))void                                                                   tmp%2#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void)
        method get_tup(uint64)(uint64,uint64)                                                                 tmp%2#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64))
        method sum()uint64                                                                                    tmp%2#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64)
        method add_many_tups((uint64,uint64)[])void                                                           tmp%2#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void)
        method add_fixed_tups((uint64,uint64)[3])void                                                         tmp%2#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void),Method(add_fixed_tups((uint64,uint64)[3])void)
        method set_a(uint64)void                                                                              tmp%2#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void),Method(add_fixed_tups((uint64,uint64)[3])void),Method(set_a(uint64)void)
        method set_b(uint64)void                                                                              tmp%2#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void),Method(add_fixed_tups((uint64,uint64)[3])void),Method(set_a(uint64)void),Method(set_b(uint64)void)
        method get_3_tups(uint64)(uint64,uint64)[3]                                                           tmp%2#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void),Method(add_fixed_tups((uint64,uint64)[3])void),Method(set_a(uint64)void),Method(set_b(uint64)void),Method(get_3_tups(uint64)(uint64,uint64)[3])
        method get_all_tups()(uint64,uint64)[]                                                                tmp%2#0,Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void),Method(add_fixed_tups((uint64,uint64)[3])void),Method(set_a(uint64)void),Method(set_b(uint64)void),Method(get_3_tups(uint64)(uint64,uint64)[3]),Method(get_all_tups()(uint64,uint64)[])
        l-load tmp%2#0 11                                                                                     Method(create_box()void),Method(num_tups()uint64),Method(add_tup((uint64,uint64))void),Method(get_tup(uint64)(uint64,uint64)),Method(sum()uint64),Method(add_many_tups((uint64,uint64)[])void),Method(add_fixed_tups((uint64,uint64)[3])void),Method(set_a(uint64)void),Method(set_b(uint64)void),Method(get_3_tups(uint64)(uint64,uint64)[3]),Method(get_all_tups()(uint64,uint64)[]),tmp%2#0
        match main_create_box_route@5 main_num_tups_route@6 main_add_tup_route@7 main_get_tup_route@8 main_sum_route@9 main_add_many_tups_route@10 main_add_fixed_tups_route@11 main_set_a_route@12 main_set_b_route@13 main_get_3_tups_route@14 main_get_all_tups_route@15 ; b main_after_if_else@18 

    main_create_box_route@5:
        // mutable_native_types/case1_with_tups.py:35
        // @arc4.abimethod()
        txn OnCompletion                                                                                      tmp%3#0
        l-load tmp%3#0 0                                                                                      tmp%3#0
        !                                                                                                     tmp%4#0
        l-load tmp%4#0 0                                                                                      tmp%4#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                     tmp%5#0
        l-load tmp%5#0 0                                                                                      tmp%5#0
        assert // can only call when not creating
        callsub create_box
        int 1                                                                                                 1
        l-store test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        l-load test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__@19 

    main_num_tups_route@6:
        // mutable_native_types/case1_with_tups.py:41
        // @arc4.abimethod()
        txn OnCompletion                                                                                      tmp%7#0
        l-load tmp%7#0 0                                                                                      tmp%7#0
        !                                                                                                     tmp%8#0
        l-load tmp%8#0 0                                                                                      tmp%8#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                     tmp%9#0
        l-load tmp%9#0 0                                                                                      tmp%9#0
        assert // can only call when not creating
        callsub num_tups                                                                                      to_encode%0#0
        l-load to_encode%0#0 0                                                                                to_encode%0#0
        itob                                                                                                  val_as_bytes%0#0
        byte 0x151f7c75                                                                                       val_as_bytes%0#0,0x151f7c75
        l-load val_as_bytes%0#0 1                                                                             0x151f7c75,val_as_bytes%0#0
        concat                                                                                                tmp%11#0
        l-load tmp%11#0 0                                                                                     tmp%11#0
        log
        int 1                                                                                                 1
        l-store test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        l-load test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__@19 

    main_add_tup_route@7:
        // mutable_native_types/case1_with_tups.py:45
        // @arc4.abimethod()
        txn OnCompletion                                                                                      tmp%12#0
        l-load tmp%12#0 0                                                                                     tmp%12#0
        !                                                                                                     tmp%13#0
        l-load tmp%13#0 0                                                                                     tmp%13#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                     tmp%14#0
        l-load tmp%14#0 0                                                                                     tmp%14#0
        assert // can only call when not creating
        // mutable_native_types/case1_with_tups.py:31
        // class Case1WithTups(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                                reinterpret_bytes[16]%0#0
        l-load-copy reinterpret_bytes[16]%0#0 0                                                               reinterpret_bytes[16]%0#0,reinterpret_bytes[16]%0#0 (copy)
        int 0                                                                                                 reinterpret_bytes[16]%0#0,reinterpret_bytes[16]%0#0 (copy),0
        extract_uint64                                                                                        reinterpret_bytes[16]%0#0,item0%1#0
        l-load reinterpret_bytes[16]%0#0 1                                                                    item0%1#0,reinterpret_bytes[16]%0#0
        int 8                                                                                                 item0%1#0,reinterpret_bytes[16]%0#0,8
        extract_uint64                                                                                        item0%1#0,item1%1#0
        // mutable_native_types/case1_with_tups.py:45
        // @arc4.abimethod()
        l-load item0%1#0 1                                                                                    item1%1#0,item0%1#0
        l-load item1%1#0 1                                                                                    item0%1#0,item1%1#0
        callsub add_tup
        int 1                                                                                                 1
        l-store test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        l-load test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__@19 

    main_get_tup_route@8:
        // mutable_native_types/case1_with_tups.py:52
        // @arc4.abimethod()
        txn OnCompletion                                                                                      tmp%16#0
        l-load tmp%16#0 0                                                                                     tmp%16#0
        !                                                                                                     tmp%17#0
        l-load tmp%17#0 0                                                                                     tmp%17#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                     tmp%18#0
        l-load tmp%18#0 0                                                                                     tmp%18#0
        assert // can only call when not creating
        // mutable_native_types/case1_with_tups.py:31
        // class Case1WithTups(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                                reinterpret_bytes[8]%0#0
        l-load reinterpret_bytes[8]%0#0 0                                                                     reinterpret_bytes[8]%0#0
        btoi                                                                                                  tmp%20#0
        // mutable_native_types/case1_with_tups.py:52
        // @arc4.abimethod()
        l-load tmp%20#0 0                                                                                     tmp%20#0
        callsub get_tup                                                                                       elements_to_encode%0#0,elements_to_encode%1#0
        l-load elements_to_encode%0#0 1                                                                       elements_to_encode%1#0,elements_to_encode%0#0
        itob                                                                                                  elements_to_encode%1#0,val_as_bytes%1#0
        l-load elements_to_encode%1#0 1                                                                       val_as_bytes%1#0,elements_to_encode%1#0
        itob                                                                                                  val_as_bytes%1#0,val_as_bytes%2#0
        l-load val_as_bytes%1#0 1                                                                             val_as_bytes%2#0,val_as_bytes%1#0
        l-load val_as_bytes%2#0 1                                                                             val_as_bytes%1#0,val_as_bytes%2#0
        concat                                                                                                encoded_tuple_buffer%2#0
        byte 0x151f7c75                                                                                       encoded_tuple_buffer%2#0,0x151f7c75
        l-load encoded_tuple_buffer%2#0 1                                                                     0x151f7c75,encoded_tuple_buffer%2#0
        concat                                                                                                tmp%21#0
        l-load tmp%21#0 0                                                                                     tmp%21#0
        log
        int 1                                                                                                 1
        l-store test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        l-load test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__@19 

    main_sum_route@9:
        // mutable_native_types/case1_with_tups.py:57
        // @arc4.abimethod()
        txn OnCompletion                                                                                      tmp%22#0
        l-load tmp%22#0 0                                                                                     tmp%22#0
        !                                                                                                     tmp%23#0
        l-load tmp%23#0 0                                                                                     tmp%23#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                     tmp%24#0
        l-load tmp%24#0 0                                                                                     tmp%24#0
        assert // can only call when not creating
        callsub sum                                                                                           to_encode%1#0
        l-load to_encode%1#0 0                                                                                to_encode%1#0
        itob                                                                                                  val_as_bytes%3#0
        byte 0x151f7c75                                                                                       val_as_bytes%3#0,0x151f7c75
        l-load val_as_bytes%3#0 1                                                                             0x151f7c75,val_as_bytes%3#0
        concat                                                                                                tmp%26#0
        l-load tmp%26#0 0                                                                                     tmp%26#0
        log
        int 1                                                                                                 1
        l-store test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        l-load test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__@19 

    main_add_many_tups_route@10:
        // mutable_native_types/case1_with_tups.py:66
        // @arc4.abimethod()
        txn OnCompletion                                                                                      tmp%27#0
        l-load tmp%27#0 0                                                                                     tmp%27#0
        !                                                                                                     tmp%28#0
        l-load tmp%28#0 0                                                                                     tmp%28#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                     tmp%29#0
        l-load tmp%29#0 0                                                                                     tmp%29#0
        assert // can only call when not creating
        // mutable_native_types/case1_with_tups.py:31
        // class Case1WithTups(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                                tmp%31#0
        // mutable_native_types/case1_with_tups.py:66
        // @arc4.abimethod()
        l-load tmp%31#0 0                                                                                     tmp%31#0
        callsub add_many_tups
        int 1                                                                                                 1
        l-store test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        l-load test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__@19 

    main_add_fixed_tups_route@11:
        // mutable_native_types/case1_with_tups.py:71
        // @arc4.abimethod()
        txn OnCompletion                                                                                      tmp%32#0
        l-load tmp%32#0 0                                                                                     tmp%32#0
        !                                                                                                     tmp%33#0
        l-load tmp%33#0 0                                                                                     tmp%33#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                     tmp%34#0
        l-load tmp%34#0 0                                                                                     tmp%34#0
        assert // can only call when not creating
        // mutable_native_types/case1_with_tups.py:31
        // class Case1WithTups(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                                reinterpret_bytes[48]%0#0
        // mutable_native_types/case1_with_tups.py:71
        // @arc4.abimethod()
        l-load reinterpret_bytes[48]%0#0 0                                                                    reinterpret_bytes[48]%0#0
        callsub add_fixed_tups
        int 1                                                                                                 1
        l-store test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        l-load test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__@19 

    main_set_a_route@12:
        // mutable_native_types/case1_with_tups.py:76
        // @arc4.abimethod()
        txn OnCompletion                                                                                      tmp%36#0
        l-load tmp%36#0 0                                                                                     tmp%36#0
        !                                                                                                     tmp%37#0
        l-load tmp%37#0 0                                                                                     tmp%37#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                     tmp%38#0
        l-load tmp%38#0 0                                                                                     tmp%38#0
        assert // can only call when not creating
        // mutable_native_types/case1_with_tups.py:31
        // class Case1WithTups(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                                reinterpret_bytes[8]%1#0
        l-load reinterpret_bytes[8]%1#0 0                                                                     reinterpret_bytes[8]%1#0
        btoi                                                                                                  tmp%40#0
        // mutable_native_types/case1_with_tups.py:76
        // @arc4.abimethod()
        l-load tmp%40#0 0                                                                                     tmp%40#0
        callsub set_a
        int 1                                                                                                 1
        l-store test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        l-load test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__@19 

    main_set_b_route@13:
        // mutable_native_types/case1_with_tups.py:83
        // @arc4.abimethod()
        txn OnCompletion                                                                                      tmp%41#0
        l-load tmp%41#0 0                                                                                     tmp%41#0
        !                                                                                                     tmp%42#0
        l-load tmp%42#0 0                                                                                     tmp%42#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                     tmp%43#0
        l-load tmp%43#0 0                                                                                     tmp%43#0
        assert // can only call when not creating
        // mutable_native_types/case1_with_tups.py:31
        // class Case1WithTups(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                                reinterpret_bytes[8]%2#0
        l-load reinterpret_bytes[8]%2#0 0                                                                     reinterpret_bytes[8]%2#0
        btoi                                                                                                  tmp%45#0
        // mutable_native_types/case1_with_tups.py:83
        // @arc4.abimethod()
        l-load tmp%45#0 0                                                                                     tmp%45#0
        callsub set_b
        int 1                                                                                                 1
        l-store test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        l-load test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__@19 

    main_get_3_tups_route@14:
        // mutable_native_types/case1_with_tups.py:90
        // @arc4.abimethod()
        txn OnCompletion                                                                                      tmp%46#0
        l-load tmp%46#0 0                                                                                     tmp%46#0
        !                                                                                                     tmp%47#0
        l-load tmp%47#0 0                                                                                     tmp%47#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                     tmp%48#0
        l-load tmp%48#0 0                                                                                     tmp%48#0
        assert // can only call when not creating
        // mutable_native_types/case1_with_tups.py:31
        // class Case1WithTups(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                                reinterpret_bytes[8]%3#0
        l-load reinterpret_bytes[8]%3#0 0                                                                     reinterpret_bytes[8]%3#0
        btoi                                                                                                  tmp%50#0
        // mutable_native_types/case1_with_tups.py:90
        // @arc4.abimethod()
        l-load tmp%50#0 0                                                                                     tmp%50#0
        callsub get_3_tups                                                                                    tmp%51#0
        byte 0x151f7c75                                                                                       tmp%51#0,0x151f7c75
        l-load tmp%51#0 1                                                                                     0x151f7c75,tmp%51#0
        concat                                                                                                tmp%52#0
        l-load tmp%52#0 0                                                                                     tmp%52#0
        log
        int 1                                                                                                 1
        l-store test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        l-load test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__@19 

    main_get_all_tups_route@15:
        // mutable_native_types/case1_with_tups.py:103
        // @arc4.abimethod()
        txn OnCompletion                                                                                      tmp%53#0
        l-load tmp%53#0 0                                                                                     tmp%53#0
        !                                                                                                     tmp%54#0
        l-load tmp%54#0 0                                                                                     tmp%54#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                     tmp%55#0
        l-load tmp%55#0 0                                                                                     tmp%55#0
        assert // can only call when not creating
        callsub get_all_tups                                                                                  tmp%57#0
        byte 0x151f7c75                                                                                       tmp%57#0,0x151f7c75
        l-load tmp%57#0 1                                                                                     0x151f7c75,tmp%57#0
        concat                                                                                                tmp%58#0
        l-load tmp%58#0 0                                                                                     tmp%58#0
        log
        int 1                                                                                                 1
        l-store test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        l-load test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__@19 

    main_bare_routing@16:
        // mutable_native_types/case1_with_tups.py:31
        // class Case1WithTups(arc4.ARC4Contract):
        txn OnCompletion                                                                                      tmp%59#0
        l-load tmp%59#0 0                                                                                     tmp%59#0
        bz main___algopy_default_create@17 ; b main_after_if_else@18

    main___algopy_default_create@17:
        txn ApplicationID                                                                                     tmp%60#0
        l-load tmp%60#0 0                                                                                     tmp%60#0
        !                                                                                                     tmp%61#0
        l-load tmp%61#0 0                                                                                     tmp%61#0
        assert // can only call when creating
        int 1                                                                                                 1
        l-store test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        l-load test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__@19 

    main_after_if_else@18:
        // mutable_native_types/case1_with_tups.py:31
        // class Case1WithTups(arc4.ARC4Contract):
        int 0                                                                                                 0
        l-store test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        l-load test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0 0 test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        v-store tmp%0#1
        b main_after_inlined_test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__@19 

    main_after_inlined_test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__@19:
        v-load tmp%0#1                                                                                        tmp%0#1
        return


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.create_box() -> void:
subroutine create_box:
    create_box_block@0:
        // mutable_native_types/case1_with_tups.py:37
        // assert self.tup_bag.create(), "box already exists"
        byte "tup_bag"                                                                                        "tup_bag"
        int 176                                                                                               "tup_bag",176
        box_create                                                                                            tmp%0#0
        l-load tmp%0#0 0                                                                                      tmp%0#0
        assert // box already exists
        // mutable_native_types/case1_with_tups.py:38
        // self.tup_bag.value.owner = Txn.sender
        byte "tup_bag"                                                                                        "tup_bag"
        box_get                                                                                               maybe_value%0#0,maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                                             maybe_value%0#0,maybe_exists%0#0
        assert // check self.tup_bag exists                                                                   maybe_value%0#0
        txn Sender                                                                                            maybe_value%0#0,assigned_value%0#0
        l-load maybe_value%0#0 1                                                                              assigned_value%0#0,maybe_value%0#0
        l-load assigned_value%0#0 1                                                                           maybe_value%0#0,assigned_value%0#0
        replace2 136                                                                                          updated_data%0#0
        // mutable_native_types/case1_with_tups.py:39
        // self.tup_bag.value.app = Global.current_application_id
        global CurrentApplicationID                                                                           updated_data%0#0,assigned_value%1#0
        l-load assigned_value%1#0 0                                                                           updated_data%0#0,assigned_value%1#0
        itob                                                                                                  updated_data%0#0,val_as_bytes%0#0
        l-load updated_data%0#0 1                                                                             val_as_bytes%0#0,updated_data%0#0
        l-load val_as_bytes%0#0 1                                                                             updated_data%0#0,val_as_bytes%0#0
        replace2 168                                                                                          updated_data%1#0
        byte "tup_bag"                                                                                        updated_data%1#0,"tup_bag"
        l-load updated_data%1#0 1                                                                             "tup_bag",updated_data%1#0
        box_put
        retsub


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.num_tups() -> uint64:
subroutine num_tups:
    num_tups_block@0:
        // mutable_native_types/case1_with_tups.py:43
        // return self.tup_bag.value.count
        byte "tup_bag"                                                                                        "tup_bag"
        box_get                                                                                               maybe_value%0#0,maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                                             maybe_value%0#0,maybe_exists%0#0
        assert // check self.tup_bag exists                                                                   maybe_value%0#0
        l-load maybe_value%0#0 0                                                                              maybe_value%0#0
        int 0                                                                                                 maybe_value%0#0,0
        extract_uint64                                                                                        tmp%0#0
        l-load tmp%0#0 0                                                                                      tmp%0#0
        retsub                                                                                                tmp%0#0


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tup.a: uint64, tup.b: uint64) -> void:
subroutine add_tup:
    add_tup_block@0:                                                                                          (𝕡) tup.a#0,tup.b#0 |
        // mutable_native_types/case1_with_tups.py:47
        // self._check_owner()
        callsub _check_owner                                                                                  (𝕡) tup.a#0,tup.b#0 |
        // mutable_native_types/case1_with_tups.py:48
        // assert self.tup_bag.value.count < self.tup_bag.value.items.length, "too many tups"
        byte "tup_bag"                                                                                        (𝕡) tup.a#0,tup.b#0 | "tup_bag"
        box_get                                                                                               (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                                             (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,maybe_exists%0#0
        assert // check self.tup_bag exists                                                                   (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0
        l-load-copy maybe_value%0#0 0                                                                         (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,maybe_value%0#0 (copy)
        int 0                                                                                                 (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,maybe_value%0#0 (copy),0
        extract_uint64                                                                                        (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,tmp%0#0
        l-load-copy tmp%0#0 0                                                                                 (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,tmp%0#0,tmp%0#0 (copy)
        int 8                                                                                                 (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,tmp%0#0,tmp%0#0 (copy),8
        <                                                                                                     (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,tmp%0#0,tmp%1#0
        l-load tmp%1#0 0                                                                                      (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,tmp%0#0,tmp%1#0
        assert // too many tups                                                                               (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,tmp%0#0
        // mutable_native_types/case1_with_tups.py:49
        // self.tup_bag.value.items[self.tup_bag.value.count] = tup
        l-load-copy maybe_value%0#0 1                                                                         (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,tmp%0#0,maybe_value%0#0 (copy)
        extract 8 128 // on error: Index access is out of bounds                                              (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,tmp%0#0,tmp%2#0
        // mutable_native_types/case1_with_tups.py:46
        // def add_tup(self, tup: NamedTup) -> None:
        p-load tup.a#0                                                                                        (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,tmp%0#0,tmp%2#0,tup.a#0 (copy)
        itob                                                                                                  (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,tmp%0#0,tmp%2#0,val_as_bytes%0#0
        p-load tup.b#0                                                                                        (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,tmp%0#0,tmp%2#0,val_as_bytes%0#0,tup.b#0 (copy)
        itob                                                                                                  (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,tmp%0#0,tmp%2#0,val_as_bytes%0#0,val_as_bytes%1#0
        // mutable_native_types/case1_with_tups.py:49
        // self.tup_bag.value.items[self.tup_bag.value.count] = tup
        l-load val_as_bytes%0#0 1                                                                             (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,tmp%0#0,tmp%2#0,val_as_bytes%1#0,val_as_bytes%0#0
        l-load val_as_bytes%1#0 1                                                                             (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,tmp%0#0,tmp%2#0,val_as_bytes%0#0,val_as_bytes%1#0
        concat                                                                                                (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,tmp%0#0,tmp%2#0,encoded_tuple_buffer%2#0
        l-load tmp%0#0 2                                                                                      (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,tmp%2#0,encoded_tuple_buffer%2#0,tmp%0#0
        int 16                                                                                                (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,tmp%2#0,encoded_tuple_buffer%2#0,tmp%0#0,16
        *                                                                                                     (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,tmp%2#0,encoded_tuple_buffer%2#0,write_offset%0#0
        l-load tmp%2#0 2                                                                                      (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,encoded_tuple_buffer%2#0,write_offset%0#0,tmp%2#0
        l-load write_offset%0#0 1                                                                             (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,encoded_tuple_buffer%2#0,tmp%2#0,write_offset%0#0
        l-load encoded_tuple_buffer%2#0 2                                                                     (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,tmp%2#0,write_offset%0#0,encoded_tuple_buffer%2#0
        replace3                                                                                              (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,updated_target%0#0
        l-load maybe_value%0#0 1                                                                              (𝕡) tup.a#0,tup.b#0 | updated_target%0#0,maybe_value%0#0
        l-load updated_target%0#0 1                                                                           (𝕡) tup.a#0,tup.b#0 | maybe_value%0#0,updated_target%0#0
        replace2 8                                                                                            (𝕡) tup.a#0,tup.b#0 | updated_data%0#0
        // mutable_native_types/case1_with_tups.py:50
        // self.tup_bag.value.count += 1
        l-load-copy updated_data%0#0 0                                                                        (𝕡) tup.a#0,tup.b#0 | updated_data%0#0,updated_data%0#0 (copy)
        int 0                                                                                                 (𝕡) tup.a#0,tup.b#0 | updated_data%0#0,updated_data%0#0 (copy),0
        extract_uint64                                                                                        (𝕡) tup.a#0,tup.b#0 | updated_data%0#0,tmp%4#0
        l-load tmp%4#0 0                                                                                      (𝕡) tup.a#0,tup.b#0 | updated_data%0#0,tmp%4#0
        int 1                                                                                                 (𝕡) tup.a#0,tup.b#0 | updated_data%0#0,tmp%4#0,1
        +                                                                                                     (𝕡) tup.a#0,tup.b#0 | updated_data%0#0,assigned_value%1#0
        l-load assigned_value%1#0 0                                                                           (𝕡) tup.a#0,tup.b#0 | updated_data%0#0,assigned_value%1#0
        itob                                                                                                  (𝕡) tup.a#0,tup.b#0 | updated_data%0#0,val_as_bytes%2#0
        l-load updated_data%0#0 1                                                                             (𝕡) tup.a#0,tup.b#0 | val_as_bytes%2#0,updated_data%0#0
        l-load val_as_bytes%2#0 1                                                                             (𝕡) tup.a#0,tup.b#0 | updated_data%0#0,val_as_bytes%2#0
        replace2 0                                                                                            (𝕡) tup.a#0,tup.b#0 | updated_data%1#0
        byte "tup_bag"                                                                                        (𝕡) tup.a#0,tup.b#0 | updated_data%1#0,"tup_bag"
        l-load updated_data%1#0 1                                                                             (𝕡) tup.a#0,tup.b#0 | "tup_bag",updated_data%1#0
        box_put                                                                                               (𝕡) tup.a#0,tup.b#0 |
        retsub


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_tup(index: uint64) -> uint64, uint64:
subroutine get_tup:
    get_tup_block@0:                                                                                          (𝕡) index#0 |
        // mutable_native_types/case1_with_tups.py:54
        // assert index < self.tup_bag.value.count, "index out of bounds"
        byte "tup_bag"                                                                                        (𝕡) index#0 | "tup_bag"
        box_get                                                                                               (𝕡) index#0 | maybe_value%0#0,maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                                             (𝕡) index#0 | maybe_value%0#0,maybe_exists%0#0
        assert // check self.tup_bag exists                                                                   (𝕡) index#0 | maybe_value%0#0
        l-load-copy maybe_value%0#0 0                                                                         (𝕡) index#0 | maybe_value%0#0,maybe_value%0#0 (copy)
        int 0                                                                                                 (𝕡) index#0 | maybe_value%0#0,maybe_value%0#0 (copy),0
        extract_uint64                                                                                        (𝕡) index#0 | maybe_value%0#0,tmp%0#0
        p-load index#0                                                                                        (𝕡) index#0 | maybe_value%0#0,tmp%0#0,index#0 (copy)
        l-load tmp%0#0 1                                                                                      (𝕡) index#0 | maybe_value%0#0,index#0 (copy),tmp%0#0
        <                                                                                                     (𝕡) index#0 | maybe_value%0#0,tmp%1#0
        l-load tmp%1#0 0                                                                                      (𝕡) index#0 | maybe_value%0#0,tmp%1#0
        assert // index out of bounds                                                                         (𝕡) index#0 | maybe_value%0#0
        // mutable_native_types/case1_with_tups.py:55
        // return self.tup_bag.value.items[index]
        l-load maybe_value%0#0 0                                                                              (𝕡) index#0 | maybe_value%0#0
        extract 8 128 // on error: Index access is out of bounds                                              (𝕡) index#0 | tmp%2#0
        p-load index#0                                                                                        (𝕡) index#0 | tmp%2#0,index#0 (copy)
        int 16                                                                                                (𝕡) index#0 | tmp%2#0,index#0 (copy),16
        *                                                                                                     (𝕡) index#0 | tmp%2#0,item_offset%0#0
        l-load tmp%2#0 1                                                                                      (𝕡) index#0 | item_offset%0#0,tmp%2#0
        l-load item_offset%0#0 1                                                                              (𝕡) index#0 | tmp%2#0,item_offset%0#0
        int 16                                                                                                (𝕡) index#0 | tmp%2#0,item_offset%0#0,16
        extract3 // on error: Index access is out of bounds                                                   (𝕡) index#0 | encoded%1#0
        l-load-copy encoded%1#0 0                                                                             (𝕡) index#0 | encoded%1#0,encoded%1#0 (copy)
        int 0                                                                                                 (𝕡) index#0 | encoded%1#0,encoded%1#0 (copy),0
        extract_uint64                                                                                        (𝕡) index#0 | encoded%1#0,item0%1#0
        l-load encoded%1#0 1                                                                                  (𝕡) index#0 | item0%1#0,encoded%1#0
        int 8                                                                                                 (𝕡) index#0 | item0%1#0,encoded%1#0,8
        extract_uint64                                                                                        (𝕡) index#0 | item0%1#0,item1%1#0
        l-load item0%1#0 1                                                                                    (𝕡) index#0 | item1%1#0,item0%1#0
        l-load item1%1#0 1                                                                                    (𝕡) index#0 | item0%1#0,item1%1#0
        retsub                                                                                                item0%1#0,item1%1#0


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.sum() -> uint64:
subroutine sum:
    sum_block@0:
        // mutable_native_types/case1_with_tups.py:59
        // total = UInt64()
        int 0                                                                                                 0
        v-store total#0
        // mutable_native_types/case1_with_tups.py:60
        // for i in urange(self.tup_bag.value.count):
        byte "tup_bag"                                                                                        "tup_bag"
        box_get                                                                                               maybe_value%0#0,maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                                             maybe_value%0#0,maybe_exists%0#0
        assert // check self.tup_bag exists                                                                   maybe_value%0#0
        l-load maybe_value%0#0 0                                                                              maybe_value%0#0
        int 0                                                                                                 maybe_value%0#0,0
        extract_uint64                                                                                        tmp%0#0
        v-store tmp%0#0
        int 0                                                                                                 0
        v-store i#0
        b sum_for_header@1

    sum_for_header@1:
        // mutable_native_types/case1_with_tups.py:60
        // for i in urange(self.tup_bag.value.count):
        v-load i#0                                                                                            i#0
        v-load tmp%0#0                                                                                        i#0,tmp%0#0
        <                                                                                                     continue_looping%0#0
        l-load continue_looping%0#0 0                                                                         continue_looping%0#0
        bz sum_after_for@4 ; b sum_for_body@2

    sum_for_body@2:
        // mutable_native_types/case1_with_tups.py:61
        // tup = self.tup_bag.value.items[i]
        byte "tup_bag"                                                                                        "tup_bag"
        box_get                                                                                               maybe_value%1#0,maybe_exists%1#0
        l-load maybe_exists%1#0 0                                                                             maybe_value%1#0,maybe_exists%1#0
        assert // check self.tup_bag exists                                                                   maybe_value%1#0
        l-load maybe_value%1#0 0                                                                              maybe_value%1#0
        extract 8 128 // on error: Index access is out of bounds                                              tmp%1#0
        v-load i#0                                                                                            tmp%1#0,i#0
        l-store-copy i#0 1                                                                                    i#0,tmp%1#0,i#0 (copy)
        int 16                                                                                                i#0,tmp%1#0,i#0 (copy),16
        *                                                                                                     i#0,tmp%1#0,item_offset%0#0
        l-load tmp%1#0 1                                                                                      i#0,item_offset%0#0,tmp%1#0
        l-load item_offset%0#0 1                                                                              i#0,tmp%1#0,item_offset%0#0
        int 16                                                                                                i#0,tmp%1#0,item_offset%0#0,16
        extract3 // on error: Index access is out of bounds                                                   i#0,encoded%1#0
        l-load-copy encoded%1#0 0                                                                             i#0,encoded%1#0,encoded%1#0 (copy)
        int 0                                                                                                 i#0,encoded%1#0,encoded%1#0 (copy),0
        extract_uint64                                                                                        i#0,encoded%1#0,tup.a#0
        l-load encoded%1#0 1                                                                                  i#0,tup.a#0,encoded%1#0
        int 8                                                                                                 i#0,tup.a#0,encoded%1#0,8
        extract_uint64                                                                                        i#0,tup.a#0,tup.b#0
        // mutable_native_types/case1_with_tups.py:62
        // total += tup.a
        v-load total#0                                                                                        i#0,tup.a#0,tup.b#0,total#0
        l-load tup.a#0 2                                                                                      i#0,tup.b#0,total#0,tup.a#0
        +                                                                                                     i#0,tup.b#0,total#0
        // mutable_native_types/case1_with_tups.py:63
        // total += tup.b
        l-load total#0 0                                                                                      i#0,tup.b#0,total#0
        l-load tup.b#0 1                                                                                      i#0,total#0,tup.b#0
        +                                                                                                     i#0,total#0
        v-store total#0                                                                                       i#0
        // mutable_native_types/case1_with_tups.py:60
        // for i in urange(self.tup_bag.value.count):
        l-load i#0 0                                                                                          i#0
        int 1                                                                                                 i#0,1
        +                                                                                                     i#0
        v-store i#0
        b sum_for_header@1

    sum_after_for@4:
        // mutable_native_types/case1_with_tups.py:64
        // return total
        v-load total#0                                                                                        total#0
        retsub                                                                                                total#0


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_many_tups(tups: bytes) -> void:
subroutine add_many_tups:
    add_many_tups_block@0:                                                                                    (𝕡) tups#0 |
        // mutable_native_types/case1_with_tups.py:68
        // for tup in tups:
        p-load tups#0                                                                                         (𝕡) tups#0 | tups#0 (copy)
        int 0                                                                                                 (𝕡) tups#0 | tups#0 (copy),0
        extract_uint16                                                                                        (𝕡) tups#0 | array_length%0#0
        v-store array_length%0#0                                                                              (𝕡) tups#0 |
        int 0                                                                                                 (𝕡) tups#0 | 0
        v-store item_index_internal%0#0                                                                       (𝕡) tups#0 |
        b add_many_tups_for_header@1                                                                          (𝕡) tups#0 |

    add_many_tups_for_header@1:                                                                               (𝕡) tups#0 |
        // mutable_native_types/case1_with_tups.py:68
        // for tup in tups:
        v-load item_index_internal%0#0                                                                        (𝕡) tups#0 | item_index_internal%0#0
        v-load array_length%0#0                                                                               (𝕡) tups#0 | item_index_internal%0#0,array_length%0#0
        <                                                                                                     (𝕡) tups#0 | continue_looping%0#0
        l-load continue_looping%0#0 0                                                                         (𝕡) tups#0 | continue_looping%0#0
        bz add_many_tups_after_for@4 ; b add_many_tups_for_body@2                                             (𝕡) tups#0 |

    add_many_tups_for_body@2:                                                                                 (𝕡) tups#0 |
        // mutable_native_types/case1_with_tups.py:68
        // for tup in tups:
        p-load tups#0                                                                                         (𝕡) tups#0 | tups#0 (copy)
        extract 2 0                                                                                           (𝕡) tups#0 | array_head_and_tail%0#0
        v-load item_index_internal%0#0                                                                        (𝕡) tups#0 | array_head_and_tail%0#0,item_index_internal%0#0
        l-store-copy item_index_internal%0#0 1                                                                (𝕡) tups#0 | item_index_internal%0#0,array_head_and_tail%0#0,item_index_internal%0#0 (copy)
        int 16                                                                                                (𝕡) tups#0 | item_index_internal%0#0,array_head_and_tail%0#0,item_index_internal%0#0 (copy),16
        *                                                                                                     (𝕡) tups#0 | item_index_internal%0#0,array_head_and_tail%0#0,item_offset%0#0
        l-load array_head_and_tail%0#0 1                                                                      (𝕡) tups#0 | item_index_internal%0#0,item_offset%0#0,array_head_and_tail%0#0
        l-load item_offset%0#0 1                                                                              (𝕡) tups#0 | item_index_internal%0#0,array_head_and_tail%0#0,item_offset%0#0
        int 16                                                                                                (𝕡) tups#0 | item_index_internal%0#0,array_head_and_tail%0#0,item_offset%0#0,16
        extract3 // on error: Index access is out of bounds                                                   (𝕡) tups#0 | item_index_internal%0#0,encoded%0#0
        l-load-copy encoded%0#0 0                                                                             (𝕡) tups#0 | item_index_internal%0#0,encoded%0#0,encoded%0#0 (copy)
        int 0                                                                                                 (𝕡) tups#0 | item_index_internal%0#0,encoded%0#0,encoded%0#0 (copy),0
        extract_uint64                                                                                        (𝕡) tups#0 | item_index_internal%0#0,encoded%0#0,tup.a#0
        l-load encoded%0#0 1                                                                                  (𝕡) tups#0 | item_index_internal%0#0,tup.a#0,encoded%0#0
        int 8                                                                                                 (𝕡) tups#0 | item_index_internal%0#0,tup.a#0,encoded%0#0,8
        extract_uint64                                                                                        (𝕡) tups#0 | item_index_internal%0#0,tup.a#0,tup.b#0
        // mutable_native_types/case1_with_tups.py:69
        // self.add_tup(tup)
        l-load tup.a#0 1                                                                                      (𝕡) tups#0 | item_index_internal%0#0,tup.b#0,tup.a#0
        l-load tup.b#0 1                                                                                      (𝕡) tups#0 | item_index_internal%0#0,tup.a#0,tup.b#0
        callsub add_tup                                                                                       (𝕡) tups#0 | item_index_internal%0#0
        l-load item_index_internal%0#0 0                                                                      (𝕡) tups#0 | item_index_internal%0#0
        int 1                                                                                                 (𝕡) tups#0 | item_index_internal%0#0,1
        +                                                                                                     (𝕡) tups#0 | item_index_internal%0#0
        v-store item_index_internal%0#0                                                                       (𝕡) tups#0 |
        b add_many_tups_for_header@1                                                                          (𝕡) tups#0 |

    add_many_tups_after_for@4:                                                                                (𝕡) tups#0 |
        retsub


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_fixed_tups(tups: bytes) -> void:
subroutine add_fixed_tups:
    add_fixed_tups_block@0:                                                                                   (𝕡) tups#0 |
        int 0                                                                                                 (𝕡) tups#0 | 0
        v-store item_index_internal%0#0                                                                       (𝕡) tups#0 |
        b add_fixed_tups_for_header@1                                                                         (𝕡) tups#0 |

    add_fixed_tups_for_header@1:                                                                              (𝕡) tups#0 |
        // mutable_native_types/case1_with_tups.py:73
        // for tup in tups:
        v-load item_index_internal%0#0                                                                        (𝕡) tups#0 | item_index_internal%0#0
        int 3                                                                                                 (𝕡) tups#0 | item_index_internal%0#0,3
        <                                                                                                     (𝕡) tups#0 | continue_looping%0#0
        l-load continue_looping%0#0 0                                                                         (𝕡) tups#0 | continue_looping%0#0
        bz add_fixed_tups_after_for@4 ; b add_fixed_tups_for_body@2                                           (𝕡) tups#0 |

    add_fixed_tups_for_body@2:                                                                                (𝕡) tups#0 |
        // mutable_native_types/case1_with_tups.py:73
        // for tup in tups:
        v-load item_index_internal%0#0                                                                        (𝕡) tups#0 | item_index_internal%0#0
        l-store-copy item_index_internal%0#0 0                                                                (𝕡) tups#0 | item_index_internal%0#0,item_index_internal%0#0 (copy)
        int 16                                                                                                (𝕡) tups#0 | item_index_internal%0#0,item_index_internal%0#0 (copy),16
        *                                                                                                     (𝕡) tups#0 | item_index_internal%0#0,item_offset%0#0
        p-load tups#0                                                                                         (𝕡) tups#0 | item_index_internal%0#0,item_offset%0#0,tups#0 (copy)
        l-load item_offset%0#0 1                                                                              (𝕡) tups#0 | item_index_internal%0#0,tups#0 (copy),item_offset%0#0
        int 16                                                                                                (𝕡) tups#0 | item_index_internal%0#0,tups#0 (copy),item_offset%0#0,16
        extract3 // on error: Index access is out of bounds                                                   (𝕡) tups#0 | item_index_internal%0#0,encoded%0#0
        l-load-copy encoded%0#0 0                                                                             (𝕡) tups#0 | item_index_internal%0#0,encoded%0#0,encoded%0#0 (copy)
        int 0                                                                                                 (𝕡) tups#0 | item_index_internal%0#0,encoded%0#0,encoded%0#0 (copy),0
        extract_uint64                                                                                        (𝕡) tups#0 | item_index_internal%0#0,encoded%0#0,tup.a#0
        l-load encoded%0#0 1                                                                                  (𝕡) tups#0 | item_index_internal%0#0,tup.a#0,encoded%0#0
        int 8                                                                                                 (𝕡) tups#0 | item_index_internal%0#0,tup.a#0,encoded%0#0,8
        extract_uint64                                                                                        (𝕡) tups#0 | item_index_internal%0#0,tup.a#0,tup.b#0
        // mutable_native_types/case1_with_tups.py:74
        // self.add_tup(tup)
        l-load tup.a#0 1                                                                                      (𝕡) tups#0 | item_index_internal%0#0,tup.b#0,tup.a#0
        l-load tup.b#0 1                                                                                      (𝕡) tups#0 | item_index_internal%0#0,tup.a#0,tup.b#0
        callsub add_tup                                                                                       (𝕡) tups#0 | item_index_internal%0#0
        l-load item_index_internal%0#0 0                                                                      (𝕡) tups#0 | item_index_internal%0#0
        int 1                                                                                                 (𝕡) tups#0 | item_index_internal%0#0,1
        +                                                                                                     (𝕡) tups#0 | item_index_internal%0#0
        v-store item_index_internal%0#0                                                                       (𝕡) tups#0 |
        b add_fixed_tups_for_header@1                                                                         (𝕡) tups#0 |

    add_fixed_tups_after_for@4:                                                                               (𝕡) tups#0 |
        retsub


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_a(a: uint64) -> void:
subroutine set_a:
    set_a_block@0:                                                                                            (𝕡) a#0 |
        // mutable_native_types/case1_with_tups.py:78
        // self._check_owner()
        callsub _check_owner                                                                                  (𝕡) a#0 |
        // mutable_native_types/case1_with_tups.py:79
        // for i in urange(self.tup_bag.value.count):
        byte "tup_bag"                                                                                        (𝕡) a#0 | "tup_bag"
        box_get                                                                                               (𝕡) a#0 | maybe_value%0#0,maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                                             (𝕡) a#0 | maybe_value%0#0,maybe_exists%0#0
        assert // check self.tup_bag exists                                                                   (𝕡) a#0 | maybe_value%0#0
        l-load maybe_value%0#0 0                                                                              (𝕡) a#0 | maybe_value%0#0
        int 0                                                                                                 (𝕡) a#0 | maybe_value%0#0,0
        extract_uint64                                                                                        (𝕡) a#0 | tmp%0#0
        v-store tmp%0#0                                                                                       (𝕡) a#0 |
        int 0                                                                                                 (𝕡) a#0 | 0
        v-store i#0                                                                                           (𝕡) a#0 |
        b set_a_for_header@1                                                                                  (𝕡) a#0 |

    set_a_for_header@1:                                                                                       (𝕡) a#0 |
        // mutable_native_types/case1_with_tups.py:79
        // for i in urange(self.tup_bag.value.count):
        v-load i#0                                                                                            (𝕡) a#0 | i#0
        v-load tmp%0#0                                                                                        (𝕡) a#0 | i#0,tmp%0#0
        <                                                                                                     (𝕡) a#0 | continue_looping%0#0
        l-load continue_looping%0#0 0                                                                         (𝕡) a#0 | continue_looping%0#0
        bz set_a_after_for@4 ; b set_a_for_body@2                                                             (𝕡) a#0 |

    set_a_for_body@2:                                                                                         (𝕡) a#0 |
        // mutable_native_types/case1_with_tups.py:80
        // tup = self.tup_bag.value.items[i]
        byte "tup_bag"                                                                                        (𝕡) a#0 | "tup_bag"
        box_get                                                                                               (𝕡) a#0 | maybe_value%1#0,maybe_exists%1#0
        l-load maybe_exists%1#0 0                                                                             (𝕡) a#0 | maybe_value%1#0,maybe_exists%1#0
        assert // check self.tup_bag exists                                                                   (𝕡) a#0 | maybe_value%1#0
        l-load-copy maybe_value%1#0 0                                                                         (𝕡) a#0 | maybe_value%1#0,maybe_value%1#0 (copy)
        extract 8 128 // on error: Index access is out of bounds                                              (𝕡) a#0 | maybe_value%1#0,tmp%1#0
        v-load i#0                                                                                            (𝕡) a#0 | maybe_value%1#0,tmp%1#0,i#0
        l-store-copy i#0 1                                                                                    (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,i#0 (copy)
        int 16                                                                                                (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,i#0 (copy),16
        *                                                                                                     (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0
        l-load-copy tmp%1#0 1                                                                                 (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,tmp%1#0 (copy)
        l-load-copy item_offset%0#0 1                                                                         (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,tmp%1#0 (copy),item_offset%0#0 (copy)
        int 16                                                                                                (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,tmp%1#0 (copy),item_offset%0#0 (copy),16
        extract3 // on error: Index access is out of bounds                                                   (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded%1#0
        l-load encoded%1#0 0                                                                                  (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded%1#0
        int 8                                                                                                 (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded%1#0,8
        extract_uint64                                                                                        (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,tup.b#0
        // mutable_native_types/case1_with_tups.py:81
        // self.tup_bag.value.items[i] = tup._replace(a=a)
        p-load a#0                                                                                            (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,tup.b#0,a#0 (copy)
        itob                                                                                                  (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,tup.b#0,val_as_bytes%0#0
        // mutable_native_types/case1_with_tups.py:80
        // tup = self.tup_bag.value.items[i]
        l-load tup.b#0 1                                                                                      (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,val_as_bytes%0#0,tup.b#0
        itob                                                                                                  (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,val_as_bytes%0#0,val_as_bytes%1#0
        // mutable_native_types/case1_with_tups.py:81
        // self.tup_bag.value.items[i] = tup._replace(a=a)
        l-load val_as_bytes%0#0 1                                                                             (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,val_as_bytes%1#0,val_as_bytes%0#0
        l-load val_as_bytes%1#0 1                                                                             (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,val_as_bytes%0#0,val_as_bytes%1#0
        concat                                                                                                (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded_tuple_buffer%2#0
        l-load-copy i#0 3                                                                                     (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded_tuple_buffer%2#0,i#0 (copy)
        int 8                                                                                                 (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded_tuple_buffer%2#0,i#0 (copy),8
        <                                                                                                     (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded_tuple_buffer%2#0,index_is_in_bounds%0#0
        l-load index_is_in_bounds%0#0 0                                                                       (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded_tuple_buffer%2#0,index_is_in_bounds%0#0
        assert // Index access is out of bounds                                                               (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded_tuple_buffer%2#0
        l-load tmp%1#0 2                                                                                      (𝕡) a#0 | maybe_value%1#0,i#0,item_offset%0#0,encoded_tuple_buffer%2#0,tmp%1#0
        l-load item_offset%0#0 2                                                                              (𝕡) a#0 | maybe_value%1#0,i#0,encoded_tuple_buffer%2#0,tmp%1#0,item_offset%0#0
        l-load encoded_tuple_buffer%2#0 2                                                                     (𝕡) a#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded_tuple_buffer%2#0
        replace3                                                                                              (𝕡) a#0 | maybe_value%1#0,i#0,updated_target%0#0
        l-load maybe_value%1#0 2                                                                              (𝕡) a#0 | i#0,updated_target%0#0,maybe_value%1#0
        l-load updated_target%0#0 1                                                                           (𝕡) a#0 | i#0,maybe_value%1#0,updated_target%0#0
        replace2 8                                                                                            (𝕡) a#0 | i#0,updated_data%0#0
        byte "tup_bag"                                                                                        (𝕡) a#0 | i#0,updated_data%0#0,"tup_bag"
        l-load updated_data%0#0 1                                                                             (𝕡) a#0 | i#0,"tup_bag",updated_data%0#0
        box_put                                                                                               (𝕡) a#0 | i#0
        // mutable_native_types/case1_with_tups.py:79
        // for i in urange(self.tup_bag.value.count):
        l-load i#0 0                                                                                          (𝕡) a#0 | i#0
        int 1                                                                                                 (𝕡) a#0 | i#0,1
        +                                                                                                     (𝕡) a#0 | i#0
        v-store i#0                                                                                           (𝕡) a#0 |
        b set_a_for_header@1                                                                                  (𝕡) a#0 |

    set_a_after_for@4:                                                                                        (𝕡) a#0 |
        retsub


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_b(b: uint64) -> void:
subroutine set_b:
    set_b_block@0:                                                                                            (𝕡) b#0 |
        // mutable_native_types/case1_with_tups.py:85
        // self._check_owner()
        callsub _check_owner                                                                                  (𝕡) b#0 |
        // mutable_native_types/case1_with_tups.py:86
        // for i in urange(self.tup_bag.value.count):
        byte "tup_bag"                                                                                        (𝕡) b#0 | "tup_bag"
        box_get                                                                                               (𝕡) b#0 | maybe_value%0#0,maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                                             (𝕡) b#0 | maybe_value%0#0,maybe_exists%0#0
        assert // check self.tup_bag exists                                                                   (𝕡) b#0 | maybe_value%0#0
        l-load maybe_value%0#0 0                                                                              (𝕡) b#0 | maybe_value%0#0
        int 0                                                                                                 (𝕡) b#0 | maybe_value%0#0,0
        extract_uint64                                                                                        (𝕡) b#0 | tmp%0#0
        v-store tmp%0#0                                                                                       (𝕡) b#0 |
        int 0                                                                                                 (𝕡) b#0 | 0
        v-store i#0                                                                                           (𝕡) b#0 |
        b set_b_for_header@1                                                                                  (𝕡) b#0 |

    set_b_for_header@1:                                                                                       (𝕡) b#0 |
        // mutable_native_types/case1_with_tups.py:86
        // for i in urange(self.tup_bag.value.count):
        v-load i#0                                                                                            (𝕡) b#0 | i#0
        v-load tmp%0#0                                                                                        (𝕡) b#0 | i#0,tmp%0#0
        <                                                                                                     (𝕡) b#0 | continue_looping%0#0
        l-load continue_looping%0#0 0                                                                         (𝕡) b#0 | continue_looping%0#0
        bz set_b_after_for@4 ; b set_b_for_body@2                                                             (𝕡) b#0 |

    set_b_for_body@2:                                                                                         (𝕡) b#0 |
        // mutable_native_types/case1_with_tups.py:87
        // tup = self.tup_bag.value.items[i]
        byte "tup_bag"                                                                                        (𝕡) b#0 | "tup_bag"
        box_get                                                                                               (𝕡) b#0 | maybe_value%1#0,maybe_exists%1#0
        l-load maybe_exists%1#0 0                                                                             (𝕡) b#0 | maybe_value%1#0,maybe_exists%1#0
        assert // check self.tup_bag exists                                                                   (𝕡) b#0 | maybe_value%1#0
        l-load-copy maybe_value%1#0 0                                                                         (𝕡) b#0 | maybe_value%1#0,maybe_value%1#0 (copy)
        extract 8 128 // on error: Index access is out of bounds                                              (𝕡) b#0 | maybe_value%1#0,tmp%1#0
        v-load i#0                                                                                            (𝕡) b#0 | maybe_value%1#0,tmp%1#0,i#0
        l-store-copy i#0 1                                                                                    (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,i#0 (copy)
        int 16                                                                                                (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,i#0 (copy),16
        *                                                                                                     (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0
        l-load-copy tmp%1#0 1                                                                                 (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,tmp%1#0 (copy)
        l-load-copy item_offset%0#0 1                                                                         (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,tmp%1#0 (copy),item_offset%0#0 (copy)
        int 16                                                                                                (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,tmp%1#0 (copy),item_offset%0#0 (copy),16
        extract3 // on error: Index access is out of bounds                                                   (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded%1#0
        l-load encoded%1#0 0                                                                                  (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded%1#0
        int 0                                                                                                 (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded%1#0,0
        extract_uint64                                                                                        (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,tup.a#0
        l-load tup.a#0 0                                                                                      (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,tup.a#0
        itob                                                                                                  (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,val_as_bytes%0#0
        // mutable_native_types/case1_with_tups.py:88
        // self.tup_bag.value.items[i] = tup._replace(b=b)
        p-load b#0                                                                                            (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,val_as_bytes%0#0,b#0 (copy)
        itob                                                                                                  (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,val_as_bytes%0#0,val_as_bytes%1#0
        l-load val_as_bytes%0#0 1                                                                             (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,val_as_bytes%1#0,val_as_bytes%0#0
        l-load val_as_bytes%1#0 1                                                                             (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,val_as_bytes%0#0,val_as_bytes%1#0
        concat                                                                                                (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded_tuple_buffer%2#0
        l-load-copy i#0 3                                                                                     (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded_tuple_buffer%2#0,i#0 (copy)
        int 8                                                                                                 (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded_tuple_buffer%2#0,i#0 (copy),8
        <                                                                                                     (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded_tuple_buffer%2#0,index_is_in_bounds%0#0
        l-load index_is_in_bounds%0#0 0                                                                       (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded_tuple_buffer%2#0,index_is_in_bounds%0#0
        assert // Index access is out of bounds                                                               (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded_tuple_buffer%2#0
        l-load tmp%1#0 2                                                                                      (𝕡) b#0 | maybe_value%1#0,i#0,item_offset%0#0,encoded_tuple_buffer%2#0,tmp%1#0
        l-load item_offset%0#0 2                                                                              (𝕡) b#0 | maybe_value%1#0,i#0,encoded_tuple_buffer%2#0,tmp%1#0,item_offset%0#0
        l-load encoded_tuple_buffer%2#0 2                                                                     (𝕡) b#0 | maybe_value%1#0,i#0,tmp%1#0,item_offset%0#0,encoded_tuple_buffer%2#0
        replace3                                                                                              (𝕡) b#0 | maybe_value%1#0,i#0,updated_target%0#0
        l-load maybe_value%1#0 2                                                                              (𝕡) b#0 | i#0,updated_target%0#0,maybe_value%1#0
        l-load updated_target%0#0 1                                                                           (𝕡) b#0 | i#0,maybe_value%1#0,updated_target%0#0
        replace2 8                                                                                            (𝕡) b#0 | i#0,updated_data%0#0
        byte "tup_bag"                                                                                        (𝕡) b#0 | i#0,updated_data%0#0,"tup_bag"
        l-load updated_data%0#0 1                                                                             (𝕡) b#0 | i#0,"tup_bag",updated_data%0#0
        box_put                                                                                               (𝕡) b#0 | i#0
        // mutable_native_types/case1_with_tups.py:86
        // for i in urange(self.tup_bag.value.count):
        l-load i#0 0                                                                                          (𝕡) b#0 | i#0
        int 1                                                                                                 (𝕡) b#0 | i#0,1
        +                                                                                                     (𝕡) b#0 | i#0
        v-store i#0                                                                                           (𝕡) b#0 |
        b set_b_for_header@1                                                                                  (𝕡) b#0 |

    set_b_after_for@4:                                                                                        (𝕡) b#0 |
        retsub


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_3_tups(start: uint64) -> bytes:
subroutine get_3_tups:
    get_3_tups_block@0:                                                                                       (𝕡) start#0 |
        // mutable_native_types/case1_with_tups.py:92
        // assert self.tup_bag.value.count >= start + 3, "not enough items"
        byte "tup_bag"                                                                                        (𝕡) start#0 | "tup_bag"
        box_get                                                                                               (𝕡) start#0 | maybe_value%0#0,maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                                             (𝕡) start#0 | maybe_value%0#0,maybe_exists%0#0
        assert // check self.tup_bag exists                                                                   (𝕡) start#0 | maybe_value%0#0
        l-load-copy maybe_value%0#0 0                                                                         (𝕡) start#0 | maybe_value%0#0,maybe_value%0#0 (copy)
        int 0                                                                                                 (𝕡) start#0 | maybe_value%0#0,maybe_value%0#0 (copy),0
        extract_uint64                                                                                        (𝕡) start#0 | maybe_value%0#0,tmp%0#0
        p-load start#0                                                                                        (𝕡) start#0 | maybe_value%0#0,tmp%0#0,start#0 (copy)
        int 3                                                                                                 (𝕡) start#0 | maybe_value%0#0,tmp%0#0,start#0 (copy),3
        +                                                                                                     (𝕡) start#0 | maybe_value%0#0,tmp%0#0,tmp%1#0
        l-load tmp%0#0 1                                                                                      (𝕡) start#0 | maybe_value%0#0,tmp%1#0,tmp%0#0
        l-load tmp%1#0 1                                                                                      (𝕡) start#0 | maybe_value%0#0,tmp%0#0,tmp%1#0
        >=                                                                                                    (𝕡) start#0 | maybe_value%0#0,tmp%2#0
        l-load tmp%2#0 0                                                                                      (𝕡) start#0 | maybe_value%0#0,tmp%2#0
        assert // not enough items                                                                            (𝕡) start#0 | maybe_value%0#0
        // mutable_native_types/case1_with_tups.py:93
        // items = self.tup_bag.value.items.copy()
        l-load maybe_value%0#0 0                                                                              (𝕡) start#0 | maybe_value%0#0
        extract 8 128 // on error: Index access is out of bounds                                              (𝕡) start#0 | items#0
        // mutable_native_types/case1_with_tups.py:97
        // items[start],
        p-load start#0                                                                                        (𝕡) start#0 | items#0,start#0 (copy)
        int 16                                                                                                (𝕡) start#0 | items#0,start#0 (copy),16
        *                                                                                                     (𝕡) start#0 | items#0,item_offset%0#0
        l-load-copy items#0 1                                                                                 (𝕡) start#0 | items#0,item_offset%0#0,items#0 (copy)
        l-load item_offset%0#0 1                                                                              (𝕡) start#0 | items#0,items#0 (copy),item_offset%0#0
        int 16                                                                                                (𝕡) start#0 | items#0,items#0 (copy),item_offset%0#0,16
        extract3 // on error: Index access is out of bounds                                                   (𝕡) start#0 | items#0,encoded%1#0
        l-load-copy encoded%1#0 0                                                                             (𝕡) start#0 | items#0,encoded%1#0,encoded%1#0 (copy)
        int 0                                                                                                 (𝕡) start#0 | items#0,encoded%1#0,encoded%1#0 (copy),0
        extract_uint64                                                                                        (𝕡) start#0 | items#0,encoded%1#0,item0%1#0
        l-load encoded%1#0 1                                                                                  (𝕡) start#0 | items#0,item0%1#0,encoded%1#0
        int 8                                                                                                 (𝕡) start#0 | items#0,item0%1#0,encoded%1#0,8
        extract_uint64                                                                                        (𝕡) start#0 | items#0,item0%1#0,item1%1#0
        // mutable_native_types/case1_with_tups.py:98
        // items[start + 1],
        p-load start#0                                                                                        (𝕡) start#0 | items#0,item0%1#0,item1%1#0,start#0 (copy)
        int 1                                                                                                 (𝕡) start#0 | items#0,item0%1#0,item1%1#0,start#0 (copy),1
        +                                                                                                     (𝕡) start#0 | items#0,item0%1#0,item1%1#0,tmp%4#0
        l-load tmp%4#0 0                                                                                      (𝕡) start#0 | items#0,item0%1#0,item1%1#0,tmp%4#0
        int 16                                                                                                (𝕡) start#0 | items#0,item0%1#0,item1%1#0,tmp%4#0,16
        *                                                                                                     (𝕡) start#0 | items#0,item0%1#0,item1%1#0,item_offset%1#0
        l-load-copy items#0 3                                                                                 (𝕡) start#0 | items#0,item0%1#0,item1%1#0,item_offset%1#0,items#0 (copy)
        l-load item_offset%1#0 1                                                                              (𝕡) start#0 | items#0,item0%1#0,item1%1#0,items#0 (copy),item_offset%1#0
        int 16                                                                                                (𝕡) start#0 | items#0,item0%1#0,item1%1#0,items#0 (copy),item_offset%1#0,16
        extract3 // on error: Index access is out of bounds                                                   (𝕡) start#0 | items#0,item0%1#0,item1%1#0,encoded%2#0
        l-load-copy encoded%2#0 0                                                                             (𝕡) start#0 | items#0,item0%1#0,item1%1#0,encoded%2#0,encoded%2#0 (copy)
        int 0                                                                                                 (𝕡) start#0 | items#0,item0%1#0,item1%1#0,encoded%2#0,encoded%2#0 (copy),0
        extract_uint64                                                                                        (𝕡) start#0 | items#0,item0%1#0,item1%1#0,encoded%2#0,item0%3#0
        l-load encoded%2#0 1                                                                                  (𝕡) start#0 | items#0,item0%1#0,item1%1#0,item0%3#0,encoded%2#0
        int 8                                                                                                 (𝕡) start#0 | items#0,item0%1#0,item1%1#0,item0%3#0,encoded%2#0,8
        extract_uint64                                                                                        (𝕡) start#0 | items#0,item0%1#0,item1%1#0,item0%3#0,item1%3#0
        // mutable_native_types/case1_with_tups.py:99
        // items[start + 2],
        p-load start#0                                                                                        (𝕡) start#0 | items#0,item0%1#0,item1%1#0,item0%3#0,item1%3#0,start#0 (copy)
        int 2                                                                                                 (𝕡) start#0 | items#0,item0%1#0,item1%1#0,item0%3#0,item1%3#0,start#0 (copy),2
        +                                                                                                     (𝕡) start#0 | items#0,item0%1#0,item1%1#0,item0%3#0,item1%3#0,tmp%5#0
        l-load tmp%5#0 0                                                                                      (𝕡) start#0 | items#0,item0%1#0,item1%1#0,item0%3#0,item1%3#0,tmp%5#0
        int 16                                                                                                (𝕡) start#0 | items#0,item0%1#0,item1%1#0,item0%3#0,item1%3#0,tmp%5#0,16
        *                                                                                                     (𝕡) start#0 | items#0,item0%1#0,item1%1#0,item0%3#0,item1%3#0,item_offset%2#0
        l-load items#0 5                                                                                      (𝕡) start#0 | item0%1#0,item1%1#0,item0%3#0,item1%3#0,item_offset%2#0,items#0
        l-load item_offset%2#0 1                                                                              (𝕡) start#0 | item0%1#0,item1%1#0,item0%3#0,item1%3#0,items#0,item_offset%2#0
        int 16                                                                                                (𝕡) start#0 | item0%1#0,item1%1#0,item0%3#0,item1%3#0,items#0,item_offset%2#0,16
        extract3 // on error: Index access is out of bounds                                                   (𝕡) start#0 | item0%1#0,item1%1#0,item0%3#0,item1%3#0,encoded%3#0
        l-load-copy encoded%3#0 0                                                                             (𝕡) start#0 | item0%1#0,item1%1#0,item0%3#0,item1%3#0,encoded%3#0,encoded%3#0 (copy)
        int 0                                                                                                 (𝕡) start#0 | item0%1#0,item1%1#0,item0%3#0,item1%3#0,encoded%3#0,encoded%3#0 (copy),0
        extract_uint64                                                                                        (𝕡) start#0 | item0%1#0,item1%1#0,item0%3#0,item1%3#0,encoded%3#0,item0%5#0
        l-load encoded%3#0 1                                                                                  (𝕡) start#0 | item0%1#0,item1%1#0,item0%3#0,item1%3#0,item0%5#0,encoded%3#0
        int 8                                                                                                 (𝕡) start#0 | item0%1#0,item1%1#0,item0%3#0,item1%3#0,item0%5#0,encoded%3#0,8
        extract_uint64                                                                                        (𝕡) start#0 | item0%1#0,item1%1#0,item0%3#0,item1%3#0,item0%5#0,item1%5#0
        // mutable_native_types/case1_with_tups.py:97
        // items[start],
        l-load item0%1#0 5                                                                                    (𝕡) start#0 | item1%1#0,item0%3#0,item1%3#0,item0%5#0,item1%5#0,item0%1#0
        itob                                                                                                  (𝕡) start#0 | item1%1#0,item0%3#0,item1%3#0,item0%5#0,item1%5#0,val_as_bytes%0#0
        l-load item1%1#0 5                                                                                    (𝕡) start#0 | item0%3#0,item1%3#0,item0%5#0,item1%5#0,val_as_bytes%0#0,item1%1#0
        itob                                                                                                  (𝕡) start#0 | item0%3#0,item1%3#0,item0%5#0,item1%5#0,val_as_bytes%0#0,val_as_bytes%1#0
        l-load val_as_bytes%0#0 1                                                                             (𝕡) start#0 | item0%3#0,item1%3#0,item0%5#0,item1%5#0,val_as_bytes%1#0,val_as_bytes%0#0
        l-load val_as_bytes%1#0 1                                                                             (𝕡) start#0 | item0%3#0,item1%3#0,item0%5#0,item1%5#0,val_as_bytes%0#0,val_as_bytes%1#0
        concat                                                                                                (𝕡) start#0 | item0%3#0,item1%3#0,item0%5#0,item1%5#0,encoded_tuple_buffer%2#0
        // mutable_native_types/case1_with_tups.py:98
        // items[start + 1],
        l-load item0%3#0 4                                                                                    (𝕡) start#0 | item1%3#0,item0%5#0,item1%5#0,encoded_tuple_buffer%2#0,item0%3#0
        itob                                                                                                  (𝕡) start#0 | item1%3#0,item0%5#0,item1%5#0,encoded_tuple_buffer%2#0,val_as_bytes%2#0
        l-load item1%3#0 4                                                                                    (𝕡) start#0 | item0%5#0,item1%5#0,encoded_tuple_buffer%2#0,val_as_bytes%2#0,item1%3#0
        itob                                                                                                  (𝕡) start#0 | item0%5#0,item1%5#0,encoded_tuple_buffer%2#0,val_as_bytes%2#0,val_as_bytes%3#0
        l-load val_as_bytes%2#0 1                                                                             (𝕡) start#0 | item0%5#0,item1%5#0,encoded_tuple_buffer%2#0,val_as_bytes%3#0,val_as_bytes%2#0
        l-load val_as_bytes%3#0 1                                                                             (𝕡) start#0 | item0%5#0,item1%5#0,encoded_tuple_buffer%2#0,val_as_bytes%2#0,val_as_bytes%3#0
        concat                                                                                                (𝕡) start#0 | item0%5#0,item1%5#0,encoded_tuple_buffer%2#0,encoded_tuple_buffer%5#0
        // mutable_native_types/case1_with_tups.py:99
        // items[start + 2],
        l-load item0%5#0 3                                                                                    (𝕡) start#0 | item1%5#0,encoded_tuple_buffer%2#0,encoded_tuple_buffer%5#0,item0%5#0
        itob                                                                                                  (𝕡) start#0 | item1%5#0,encoded_tuple_buffer%2#0,encoded_tuple_buffer%5#0,val_as_bytes%4#0
        l-load item1%5#0 3                                                                                    (𝕡) start#0 | encoded_tuple_buffer%2#0,encoded_tuple_buffer%5#0,val_as_bytes%4#0,item1%5#0
        itob                                                                                                  (𝕡) start#0 | encoded_tuple_buffer%2#0,encoded_tuple_buffer%5#0,val_as_bytes%4#0,val_as_bytes%5#0
        l-load val_as_bytes%4#0 1                                                                             (𝕡) start#0 | encoded_tuple_buffer%2#0,encoded_tuple_buffer%5#0,val_as_bytes%5#0,val_as_bytes%4#0
        l-load val_as_bytes%5#0 1                                                                             (𝕡) start#0 | encoded_tuple_buffer%2#0,encoded_tuple_buffer%5#0,val_as_bytes%4#0,val_as_bytes%5#0
        concat                                                                                                (𝕡) start#0 | encoded_tuple_buffer%2#0,encoded_tuple_buffer%5#0,encoded_tuple_buffer%8#0
        // mutable_native_types/case1_with_tups.py:95-101
        // return FixedArray[NamedTup, typing.Literal[3]](
        //     (
        //         items[start],
        //         items[start + 1],
        //         items[start + 2],
        //     )
        // )
        l-load encoded_tuple_buffer%2#0 2                                                                     (𝕡) start#0 | encoded_tuple_buffer%5#0,encoded_tuple_buffer%8#0,encoded_tuple_buffer%2#0
        l-load encoded_tuple_buffer%5#0 2                                                                     (𝕡) start#0 | encoded_tuple_buffer%8#0,encoded_tuple_buffer%2#0,encoded_tuple_buffer%5#0
        concat                                                                                                (𝕡) start#0 | encoded_tuple_buffer%8#0,result%1#0
        l-load result%1#0 0                                                                                   (𝕡) start#0 | encoded_tuple_buffer%8#0,result%1#0
        l-load encoded_tuple_buffer%8#0 1                                                                     (𝕡) start#0 | result%1#0,encoded_tuple_buffer%8#0
        concat                                                                                                (𝕡) start#0 | result%2#0
        l-load result%2#0 0                                                                                   (𝕡) start#0 | result%2#0
        retsub                                                                                                result%2#0


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_all_tups() -> bytes:
subroutine get_all_tups:
    get_all_tups_block@0:
        // mutable_native_types/case1_with_tups.py:105
        // result = NativeArray[NamedTup]()
        byte 0x0000                                                                                           0x0000
        v-store result#0
        // mutable_native_types/case1_with_tups.py:106
        // items = self.tup_bag.value.items.copy()
        byte "tup_bag"                                                                                        "tup_bag"
        box_get                                                                                               maybe_value%0#0,maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                                             maybe_value%0#0,maybe_exists%0#0
        assert // check self.tup_bag exists                                                                   maybe_value%0#0
        l-load-copy maybe_value%0#0 0                                                                         maybe_value%0#0,maybe_value%0#0 (copy)
        extract 8 128 // on error: Index access is out of bounds                                              maybe_value%0#0,items#0
        v-store items#0                                                                                       maybe_value%0#0
        // mutable_native_types/case1_with_tups.py:108
        // for i in urange(self.tup_bag.value.count):
        l-load maybe_value%0#0 0                                                                              maybe_value%0#0
        int 0                                                                                                 maybe_value%0#0,0
        extract_uint64                                                                                        tmp%1#0
        v-store tmp%1#0
        int 0                                                                                                 0
        v-store i#0
        b get_all_tups_for_header@1

    get_all_tups_for_header@1:
        // mutable_native_types/case1_with_tups.py:108
        // for i in urange(self.tup_bag.value.count):
        v-load i#0                                                                                            i#0
        v-load tmp%1#0                                                                                        i#0,tmp%1#0
        <                                                                                                     continue_looping%0#0
        l-load continue_looping%0#0 0                                                                         continue_looping%0#0
        bz get_all_tups_after_for@4 ; b get_all_tups_for_body@2

    get_all_tups_for_body@2:
        // mutable_native_types/case1_with_tups.py:109
        // result.append(items[i])
        v-load result#0                                                                                       result#0
        extract 2 0                                                                                           expr_value_trimmed%0#0
        v-load i#0                                                                                            expr_value_trimmed%0#0,i#0
        l-store-copy i#0 1                                                                                    i#0,expr_value_trimmed%0#0,i#0 (copy)
        int 16                                                                                                i#0,expr_value_trimmed%0#0,i#0 (copy),16
        *                                                                                                     i#0,expr_value_trimmed%0#0,item_offset%0#0
        v-load items#0                                                                                        i#0,expr_value_trimmed%0#0,item_offset%0#0,items#0
        l-load item_offset%0#0 1                                                                              i#0,expr_value_trimmed%0#0,items#0,item_offset%0#0
        int 16                                                                                                i#0,expr_value_trimmed%0#0,items#0,item_offset%0#0,16
        extract3 // on error: Index access is out of bounds                                                   i#0,expr_value_trimmed%0#0,encoded%1#0
        l-load-copy encoded%1#0 0                                                                             i#0,expr_value_trimmed%0#0,encoded%1#0,encoded%1#0 (copy)
        int 0                                                                                                 i#0,expr_value_trimmed%0#0,encoded%1#0,encoded%1#0 (copy),0
        extract_uint64                                                                                        i#0,expr_value_trimmed%0#0,encoded%1#0,item0%1#0
        l-load encoded%1#0 1                                                                                  i#0,expr_value_trimmed%0#0,item0%1#0,encoded%1#0
        int 8                                                                                                 i#0,expr_value_trimmed%0#0,item0%1#0,encoded%1#0,8
        extract_uint64                                                                                        i#0,expr_value_trimmed%0#0,item0%1#0,item1%1#0
        l-load item0%1#0 1                                                                                    i#0,expr_value_trimmed%0#0,item1%1#0,item0%1#0
        itob                                                                                                  i#0,expr_value_trimmed%0#0,item1%1#0,array%sub_item%0#1
        l-load item1%1#0 1                                                                                    i#0,expr_value_trimmed%0#0,array%sub_item%0#1,item1%1#0
        itob                                                                                                  i#0,expr_value_trimmed%0#0,array%sub_item%0#1,array%sub_item%1#1
        l-load array%sub_item%0#1 1                                                                           i#0,expr_value_trimmed%0#0,array%sub_item%1#1,array%sub_item%0#1
        l-load array%sub_item%1#1 1                                                                           i#0,expr_value_trimmed%0#0,array%sub_item%0#1,array%sub_item%1#1
        concat                                                                                                i#0,expr_value_trimmed%0#0,array%encoded%1#1
        l-load expr_value_trimmed%0#0 1                                                                       i#0,array%encoded%1#1,expr_value_trimmed%0#0
        l-load array%encoded%1#1 1                                                                            i#0,expr_value_trimmed%0#0,array%encoded%1#1
        concat                                                                                                i#0,concatenated%0#0
        l-load-copy concatenated%0#0 0                                                                        i#0,concatenated%0#0,concatenated%0#0 (copy)
        len                                                                                                   i#0,concatenated%0#0,byte_len%0#0
        l-load byte_len%0#0 0                                                                                 i#0,concatenated%0#0,byte_len%0#0
        int 16                                                                                                i#0,concatenated%0#0,byte_len%0#0,16
        /                                                                                                     i#0,concatenated%0#0,len_%0#0
        l-load len_%0#0 0                                                                                     i#0,concatenated%0#0,len_%0#0
        itob                                                                                                  i#0,concatenated%0#0,as_bytes%0#0
        l-load as_bytes%0#0 0                                                                                 i#0,concatenated%0#0,as_bytes%0#0
        extract 6 2                                                                                           i#0,concatenated%0#0,len_16_bit%0#0
        l-load len_16_bit%0#0 0                                                                               i#0,concatenated%0#0,len_16_bit%0#0
        l-load concatenated%0#0 1                                                                             i#0,len_16_bit%0#0,concatenated%0#0
        concat                                                                                                i#0,result#0
        v-store result#0                                                                                      i#0
        // mutable_native_types/case1_with_tups.py:108
        // for i in urange(self.tup_bag.value.count):
        l-load i#0 0                                                                                          i#0
        int 1                                                                                                 i#0,1
        +                                                                                                     i#0
        v-store i#0
        b get_all_tups_for_header@1

    get_all_tups_after_for@4:
        // mutable_native_types/case1_with_tups.py:110
        // return result
        v-load result#0                                                                                       result#0
        retsub                                                                                                result#0


// test_cases.mutable_native_types.case1_with_tups.Case1WithTups._check_owner() -> void:
subroutine _check_owner:
    _check_owner_block@0:
        // mutable_native_types/case1_with_tups.py:114
        // assert self.tup_bag.value.owner == Txn.sender, "sender not authorized"
        byte "tup_bag"                                                                                        "tup_bag"
        box_get                                                                                               maybe_value%0#0,maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                                             maybe_value%0#0,maybe_exists%0#0
        assert // check self.tup_bag exists                                                                   maybe_value%0#0
        l-load-copy maybe_value%0#0 0                                                                         maybe_value%0#0,maybe_value%0#0 (copy)
        extract 136 32 // on error: Index access is out of bounds                                             maybe_value%0#0,encoded%0#0
        txn Sender                                                                                            maybe_value%0#0,encoded%0#0,tmp%0#0
        l-load encoded%0#0 1                                                                                  maybe_value%0#0,tmp%0#0,encoded%0#0
        l-load tmp%0#0 1                                                                                      maybe_value%0#0,encoded%0#0,tmp%0#0
        ==                                                                                                    maybe_value%0#0,tmp%1#0
        l-load tmp%1#0 0                                                                                      maybe_value%0#0,tmp%1#0
        assert // sender not authorized                                                                       maybe_value%0#0
        // mutable_native_types/case1_with_tups.py:116
        // self.tup_bag.value.app == Global.current_application_id
        l-load maybe_value%0#0 0                                                                              maybe_value%0#0
        int 168                                                                                               maybe_value%0#0,168
        extract_uint64                                                                                        tmp%2#0
        global CurrentApplicationID                                                                           tmp%2#0,tmp%3#0
        l-load tmp%2#0 1                                                                                      tmp%3#0,tmp%2#0
        l-load tmp%3#0 1                                                                                      tmp%2#0,tmp%3#0
        ==                                                                                                    tmp%4#0
        // mutable_native_types/case1_with_tups.py:115-117
        // assert (
        //     self.tup_bag.value.app == Global.current_application_id
        // ), "this error should be impossible"
        l-load tmp%4#0 0                                                                                      tmp%4#0
        assert // this error should be impossible
        retsub


