main test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@15
    block@4: // abi_routing_L24
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create_box()void" => block@5, method "num_tups()uint64" => block@6, method "add_tup((uint64,uint64))void" => block@7, method "get_tup(uint64)(uint64,uint64)" => block@8, method "sum()uint64" => block@9, method "add_many_tups((uint64,uint64)[])void" => block@10, method "add_fixed_tups((uint64,uint64)[3])void" => block@11, method "set_a(uint64)void" => block@12, method "set_b(uint64)void" => block@13, method "get_3_tups(uint64)(uint64,uint64)[3]" => block@14, * => block@17}
    block@5: // create_box_route_L28
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.create_box()
        let test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        goto block@18
    block@6: // num_tups_route_L32
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let to_encode%0#0: uint64 = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.num_tups()
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%11#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%11#0)
        let test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        goto block@18
    block@7: // add_tup_route_L36
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 1)
        let item0%1#0: uint64 = (extract_uint64 reinterpret_bytes[16]%0#0 0u)
        let item1%1#0: uint64 = (extract_uint64 reinterpret_bytes[16]%0#0 8u)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(item0%1#0, item1%1#0)
        let test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        goto block@18
    block@8: // get_tup_route_L42
        let tmp%16#0: uint64 = (txn OnCompletion)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // OnCompletion is not NoOp
        let tmp%18#0: uint64 = (txn ApplicationID)
        (assert tmp%18#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%20#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        let (elements_to_encode%0#0: uint64, elements_to_encode%1#0: uint64) = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_tup(tmp%20#0)
        let val_as_bytes%1#0: bytes[8] = (itob elements_to_encode%0#0)
        let val_as_bytes%2#0: bytes[8] = (itob elements_to_encode%1#0)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%1#0 val_as_bytes%2#0)
        let tmp%21#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%2#0)
        (log tmp%21#0)
        let test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        goto block@18
    block@9: // sum_route_L47
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        (assert tmp%24#0) // can only call when not creating
        let to_encode%1#0: uint64 = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.sum()
        let val_as_bytes%3#0: bytes[8] = (itob to_encode%1#0)
        let tmp%26#0: bytes = (concat 0x151f7c75 val_as_bytes%3#0)
        (log tmp%26#0)
        let test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        goto block@18
    block@10: // add_many_tups_route_L56
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        (assert tmp%29#0) // can only call when not creating
        let tmp%31#0: bytes = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_many_tups(tmp%31#0)
        let test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        goto block@18
    block@11: // add_fixed_tups_route_L61
        let tmp%32#0: uint64 = (txn OnCompletion)
        let tmp%33#0: bool = (! tmp%32#0)
        (assert tmp%33#0) // OnCompletion is not NoOp
        let tmp%34#0: uint64 = (txn ApplicationID)
        (assert tmp%34#0) // can only call when not creating
        let reinterpret_bytes[48]%0#0: bytes[48] = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_fixed_tups(reinterpret_bytes[48]%0#0)
        let test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        goto block@18
    block@12: // set_a_route_L66
        let tmp%36#0: uint64 = (txn OnCompletion)
        let tmp%37#0: bool = (! tmp%36#0)
        (assert tmp%37#0) // OnCompletion is not NoOp
        let tmp%38#0: uint64 = (txn ApplicationID)
        (assert tmp%38#0) // can only call when not creating
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%40#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_a(tmp%40#0)
        let test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        goto block@18
    block@13: // set_b_route_L72
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (! tmp%41#0)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        (assert tmp%43#0) // can only call when not creating
        let reinterpret_bytes[8]%2#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%45#0: uint64 = (btoi reinterpret_bytes[8]%2#0)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_b(tmp%45#0)
        let test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        goto block@18
    block@14: // get_3_tups_route_L78
        let tmp%46#0: uint64 = (txn OnCompletion)
        let tmp%47#0: bool = (! tmp%46#0)
        (assert tmp%47#0) // OnCompletion is not NoOp
        let tmp%48#0: uint64 = (txn ApplicationID)
        (assert tmp%48#0) // can only call when not creating
        let reinterpret_bytes[8]%3#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%50#0: uint64 = (btoi reinterpret_bytes[8]%3#0)
        let tmp%51#0: bytes[48] = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_3_tups(tmp%50#0)
        let tmp%52#0: bytes = (concat 0x151f7c75 tmp%51#0)
        (log tmp%52#0)
        let test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        goto block@18
    block@15: // bare_routing_L24
        let tmp%53#0: uint64 = (txn OnCompletion)
        goto tmp%53#0 ? block@17 : block@16
    block@16: // __algopy_default_create_L1
        let tmp%54#0: uint64 = (txn ApplicationID)
        let tmp%55#0: bool = (! tmp%54#0)
        (assert tmp%55#0) // can only call when creating
        let test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        goto block@18
    block@17: // after_if_else_L24
        let test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#1: bool = test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router__%0#0
        goto block@18
    block@18: // after_inlined_test_cases.mutable_native_types.case1_with_tups.Case1WithTups.__puya_arc4_router___L1
        return tmp%0#1

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.create_box() -> void:
    block@0: // L28
        let tmp%0#0: bool = (box_create "tup_bag" 136u)
        (assert tmp%0#0) // box already existed
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.num_tups() -> uint64:
    block@0: // L32
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        return tmp%0#0

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tup.a: uint64, tup.b: uint64) -> void:
    block@0: // L36
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let tmp%1#0: bool = (< tmp%0#0 8u)
        (assert tmp%1#0) // too many tups
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let tmp%2#0: bytes = ((extract 8 128) maybe_value%1#0) // on error: Index access is out of bounds
        let val_as_bytes%0#0: bytes[8] = (itob tup.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob tup.b#0)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%2#0) // check self.tup_bag exists
        let tmp%3#0: uint64 = (extract_uint64 maybe_value%2#0 0u)
        let index_is_in_bounds%0#0: bool = (< tmp%3#0 8u)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let write_offset%0#0: uint64 = (* tmp%3#0 16u)
        let updated_target%0#0: bytes = (replace3 tmp%2#0 write_offset%0#0 encoded_tuple_buffer%2#0)
        let updated_data%0#0: bytes = ((replace2 8) maybe_value%1#0 updated_target%0#0)
        (box_put "tup_bag" updated_data%0#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%3#0) // check self.tup_bag exists
        let tmp%4#0: uint64 = (extract_uint64 maybe_value%3#0 0u)
        let assigned_value%1#0: uint64 = (+ tmp%4#0 1u)
        let val_as_bytes%2#0: bytes[8] = (itob assigned_value%1#0)
        let updated_data%1#0: bytes = ((replace2 0) maybe_value%3#0 val_as_bytes%2#0)
        (box_put "tup_bag" updated_data%1#0)
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_tup(index: uint64) -> <uint64, uint64>:
    block@0: // L42
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let tmp%1#0: bool = (< index#0 tmp%0#0)
        (assert tmp%1#0) // index out of bounds
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let tmp%2#0: bytes = ((extract 8 128) maybe_value%1#0) // on error: Index access is out of bounds
        let item_offset%0#0: uint64 = (* index#0 16u)
        let encoded%1#0: bytes = (extract3 tmp%2#0 item_offset%0#0 16u) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (extract_uint64 encoded%1#0 0u)
        let item1%1#0: uint64 = (extract_uint64 encoded%1#0 8u)
        return item0%1#0 item1%1#0

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.sum() -> uint64:
    block@0: // L47
        let total#0: uint64 = 0u
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L50
        let continue_looping%0#0: bool = (< i#0 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L51
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let tmp%1#0: bytes = ((extract 8 128) maybe_value%1#0) // on error: Index access is out of bounds
        let item_offset%0#0: uint64 = (* i#0 16u)
        let encoded%1#0: bytes = (extract3 tmp%1#0 item_offset%0#0 16u) // on error: Index access is out of bounds
        let tup.a#0: uint64 = (extract_uint64 encoded%1#0 0u)
        let tup.b#0: uint64 = (extract_uint64 encoded%1#0 8u)
        let total#0: uint64 = (+ total#0 tup.a#0)
        let total#0: uint64 = (+ total#0 tup.b#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L50
        return total#0

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_many_tups(tups: bytes) -> void:
    block@0: // L56
        let array_length%0#0: uint64 = (extract_uint16 tups#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L58
        let continue_looping%0#0: bool = (< item_index_internal%0#0 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L59
        let array_head_and_tail%0#0: bytes = ((extract 2 0) tups#0)
        let item_offset%0#0: uint64 = (* item_index_internal%0#0 16u)
        let encoded%0#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 16u) // on error: Index access is out of bounds
        let tup.a#0: uint64 = (extract_uint64 encoded%0#0 0u)
        let tup.b#0: uint64 = (extract_uint64 encoded%0#0 8u)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tup.a#0, tup.b#0)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L58
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_fixed_tups(tups: bytes[48]) -> void:
    block@0: // L61
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L63
        let continue_looping%0#0: bool = (< item_index_internal%0#0 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L64
        let item_offset%0#0: uint64 = (* item_index_internal%0#0 16u)
        let encoded%0#0: bytes = (extract3 tups#0 item_offset%0#0 16u) // on error: Index access is out of bounds
        let tup.a#0: uint64 = (extract_uint64 encoded%0#0 0u)
        let tup.b#0: uint64 = (extract_uint64 encoded%0#0 8u)
        test_cases.mutable_native_types.case1_with_tups.Case1WithTups.add_tup(tup.a#0, tup.b#0)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L63
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_a(a: uint64) -> void:
    block@0: // L66
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L68
        let continue_looping%0#0: bool = (< i#0 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L69
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let tmp%1#0: bytes = ((extract 8 128) maybe_value%1#0) // on error: Index access is out of bounds
        let item_offset%0#0: uint64 = (* i#0 16u)
        let encoded%1#0: bytes = (extract3 tmp%1#0 item_offset%0#0 16u) // on error: Index access is out of bounds
        let tup.b#0: uint64 = (extract_uint64 encoded%1#0 8u)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%2#0) // check self.tup_bag exists
        let tmp%2#0: bytes = ((extract 8 128) maybe_value%2#0) // on error: Index access is out of bounds
        let val_as_bytes%0#0: bytes[8] = (itob a#0)
        let val_as_bytes%1#0: bytes[8] = (itob tup.b#0)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let index_is_in_bounds%0#0: bool = (< i#0 8u)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let updated_target%0#0: bytes = (replace3 tmp%2#0 item_offset%0#0 encoded_tuple_buffer%2#0)
        let updated_data%0#0: bytes = ((replace2 8) maybe_value%2#0 updated_target%0#0)
        (box_put "tup_bag" updated_data%0#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L68
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.set_b(b: uint64) -> void:
    block@0: // L72
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L74
        let continue_looping%0#0: bool = (< i#0 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L75
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let tmp%1#0: bytes = ((extract 8 128) maybe_value%1#0) // on error: Index access is out of bounds
        let item_offset%0#0: uint64 = (* i#0 16u)
        let encoded%1#0: bytes = (extract3 tmp%1#0 item_offset%0#0 16u) // on error: Index access is out of bounds
        let tup.a#0: uint64 = (extract_uint64 encoded%1#0 0u)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%2#0) // check self.tup_bag exists
        let tmp%2#0: bytes = ((extract 8 128) maybe_value%2#0) // on error: Index access is out of bounds
        let val_as_bytes%0#0: bytes[8] = (itob tup.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob b#0)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let index_is_in_bounds%0#0: bool = (< i#0 8u)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let updated_target%0#0: bytes = (replace3 tmp%2#0 item_offset%0#0 encoded_tuple_buffer%2#0)
        let updated_data%0#0: bytes = ((replace2 8) maybe_value%2#0 updated_target%0#0)
        (box_put "tup_bag" updated_data%0#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L74
        return 

subroutine test_cases.mutable_native_types.case1_with_tups.Case1WithTups.get_3_tups(start: uint64) -> bytes[48]:
    block@0: // L78
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%0#0) // check self.tup_bag exists
        let tmp%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let tmp%1#0: uint64 = (+ start#0 3u)
        let tmp%2#0: bool = (>= tmp%0#0 tmp%1#0)
        (assert tmp%2#0) // not enough items
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "tup_bag")
        (assert maybe_exists%1#0) // check self.tup_bag exists
        let items#0: bytes[128] = ((extract 8 128) maybe_value%1#0) // on error: Index access is out of bounds
        let item_offset%0#0: uint64 = (* start#0 16u)
        let encoded%1#0: bytes = (extract3 items#0 item_offset%0#0 16u) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (extract_uint64 encoded%1#0 0u)
        let item1%1#0: uint64 = (extract_uint64 encoded%1#0 8u)
        let tmp%4#0: uint64 = (+ start#0 1u)
        let item_offset%1#0: uint64 = (* tmp%4#0 16u)
        let encoded%2#0: bytes = (extract3 items#0 item_offset%1#0 16u) // on error: Index access is out of bounds
        let item0%3#0: uint64 = (extract_uint64 encoded%2#0 0u)
        let item1%3#0: uint64 = (extract_uint64 encoded%2#0 8u)
        let tmp%5#0: uint64 = (+ start#0 2u)
        let item_offset%2#0: uint64 = (* tmp%5#0 16u)
        let encoded%3#0: bytes = (extract3 items#0 item_offset%2#0 16u) // on error: Index access is out of bounds
        let item0%5#0: uint64 = (extract_uint64 encoded%3#0 0u)
        let item1%5#0: uint64 = (extract_uint64 encoded%3#0 8u)
        let val_as_bytes%0#0: bytes[8] = (itob item0%1#0)
        let val_as_bytes%1#0: bytes[8] = (itob item1%1#0)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let val_as_bytes%2#0: bytes[8] = (itob item0%3#0)
        let val_as_bytes%3#0: bytes[8] = (itob item1%3#0)
        let encoded_tuple_buffer%5#0: bytes = (concat val_as_bytes%2#0 val_as_bytes%3#0)
        let val_as_bytes%4#0: bytes[8] = (itob item0%5#0)
        let val_as_bytes%5#0: bytes[8] = (itob item1%5#0)
        let encoded_tuple_buffer%8#0: bytes = (concat val_as_bytes%4#0 val_as_bytes%5#0)
        let result%1#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_tuple_buffer%5#0)
        let result%2#0: bytes = (concat result%1#0 encoded_tuple_buffer%8#0)
        return result%2#0