{
  "version": 3,
  "sources": [
    "../case3_with_mutable_struct.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AAMe;AAAA;;;AAAA;AAAP;AACA;AAAA;;;AAA2B;;AAA3B;AACyB;;AAAzB;AAAA;AAAA;;;AAAA;;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAkC;AAAlC;AAAA;AAAA;;AAAA;;AAAA;AALH;AAAA;AASU;AAAA;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAOA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEkB;AAAA;AAAA;AAAA;AAAA;AAAR;;AAAA;AAAP;AACO;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAOW;AACQ;AAAA;AAAA;AAAA;AAAA;AAAP;AAAjB;AAAA;;AAAA;AAAA;;;AACkB;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACG;AADH;AACG;AAAT;;AAAA;AACS;AAAA;AAAA;AAAT;AAAA;;AAHK;AAAA;;;;;;AAHZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEY;AAAjB;AAAA;;AAAA;AAAA;;;AACyB;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAb;;;AAAA;AADK;AAAA;;;;;;AAFZ;AAAA;AAKA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEY;AAAjB;AAAwB;;AAAxB;AAAA;;;AACyB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAb;;;AAAA;AADK;AAAA;;;;;;AAFZ;AAAA;AAKA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEG;;;AACgB;AAAA;AAAA;AAAA;AAAA;AAAP;AAAjB;AAAA;;AAAA;AAAA;;;AACY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AADK;AAAA;;;;;;AAHZ;AAAA;AAMA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEG;;;AACgB;AAAA;AAAA;AAAA;AAAA;AAAP;AAAjB;AAAA;;AAAA;AAAA;;;AACY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AADK;AAAA;;;;;;AAHZ;AAAA;AAMA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEU;AAAA;AAAA;AAAA;AAAA;AAA4B;;AAAQ;;AAAR;AAA5B;AAAP;AACQ;AAIA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACM;;AAAQ;AAAR;AAAN;AAAA;AAAA;;AAAA;AAAA;AAAA;AACM;;AAAQ;;AAAR;AAAN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAJD;;AAAA;AAAA;AAAA;AALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAeY;;;;AAGO;AAAA;AAAA;AAAA;AAAA;AAAP;AAAjB;AAAA;;AAAA;AAAA;;;AAFgB;AAGU;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAd;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AADK;AAAA;;;;;;AALZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAxDA;;;AAEG;;;AACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2B;AAA3B;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAA4B;AAA5B;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;AA8DO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAP;AACO;AAAA;;;;;AAAA;AAA4B;;AAA5B;AAAP;AAEI;AAAA;;;AAAA;AAAA;AAAA;AAA0B;;AAA1B;AADJ;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 8 1 0 16 128 4272"
    },
    "11": {
      "op": "bytecblock \"tup_bag\" 0x151f7c75"
    },
    "26": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "28": {
      "op": "bz main___algopy_default_create@20",
      "stack_out": []
    },
    "31": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "33": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "34": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "35": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "37": {
      "op": "assert",
      "stack_out": []
    },
    "38": {
      "op": "pushbytess 0xa67ea2ab 0x028840ea 0xf75cee9d 0x880b5534 0x53030b41 0x7d39df51 0x7a1e7b43 0x3447847f 0x2ba64852 0xabc9be78 0x73457a19 // method \"create_box()void\", method \"num_tups()uint64\", method \"add_tup((uint64,uint64))void\", method \"get_tup(uint64)(uint64,uint64)\", method \"sum()uint64\", method \"add_many_tups((uint64,uint64)[])void\", method \"add_fixed_tups((uint64,uint64)[3])void\", method \"set_a(uint64)void\", method \"set_b(uint64)void\", method \"get_3_tups(uint64)(uint64,uint64)[3]\", method \"get_all_tups()(uint64,uint64)[]\"",
      "defined_out": [
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(get_3_tups(uint64)(uint64,uint64)[3])",
        "Method(get_all_tups()(uint64,uint64)[])",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(num_tups()uint64)",
        "Method(set_a(uint64)void)",
        "Method(set_b(uint64)void)",
        "Method(sum()uint64)"
      ],
      "stack_out": [
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(sum()uint64)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(set_a(uint64)void)",
        "Method(set_b(uint64)void)",
        "Method(get_3_tups(uint64)(uint64,uint64)[3])",
        "Method(get_all_tups()(uint64,uint64)[])"
      ]
    },
    "95": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(create_box()void)",
        "Method(get_3_tups(uint64)(uint64,uint64)[3])",
        "Method(get_all_tups()(uint64,uint64)[])",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(num_tups()uint64)",
        "Method(set_a(uint64)void)",
        "Method(set_b(uint64)void)",
        "Method(sum()uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(create_box()void)",
        "Method(num_tups()uint64)",
        "Method(add_tup((uint64,uint64))void)",
        "Method(get_tup(uint64)(uint64,uint64))",
        "Method(sum()uint64)",
        "Method(add_many_tups((uint64,uint64)[])void)",
        "Method(add_fixed_tups((uint64,uint64)[3])void)",
        "Method(set_a(uint64)void)",
        "Method(set_b(uint64)void)",
        "Method(get_3_tups(uint64)(uint64,uint64)[3])",
        "Method(get_all_tups()(uint64,uint64)[])",
        "tmp%6#0"
      ]
    },
    "98": {
      "op": "match create_box num_tups add_tup get_tup sum add_many_tups add_fixed_tups set_a set_b get_3_tups get_all_tups",
      "stack_out": []
    },
    "122": {
      "op": "err"
    },
    "123": {
      "block": "main___algopy_default_create@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "125": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "126": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "128": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "129": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "130": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "131": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.create_box[routing]",
      "params": {},
      "block": "create_box",
      "stack_in": [],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "132": {
      "op": "pushint 4273 // 4273",
      "defined_out": [
        "\"tup_bag\"",
        "4273"
      ],
      "stack_out": [
        "\"tup_bag\"",
        "4273"
      ]
    },
    "135": {
      "op": "box_create",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "136": {
      "error": "box already exists",
      "op": "assert // box already exists",
      "stack_out": []
    },
    "137": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "138": {
      "op": "pushint 136 // 136",
      "defined_out": [
        "\"tup_bag\"",
        "136"
      ],
      "stack_out": [
        "\"tup_bag\"",
        "136"
      ]
    },
    "141": {
      "op": "txn Sender",
      "defined_out": [
        "\"tup_bag\"",
        "136",
        "tmp%1#0"
      ],
      "stack_out": [
        "\"tup_bag\"",
        "136",
        "tmp%1#0"
      ]
    },
    "143": {
      "op": "box_replace",
      "stack_out": []
    },
    "144": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "146": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "147": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"tup_bag\""
      ]
    },
    "148": {
      "op": "pushint 168 // 168",
      "defined_out": [
        "\"tup_bag\"",
        "168",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"tup_bag\"",
        "168"
      ]
    },
    "151": {
      "op": "uncover 2",
      "stack_out": [
        "\"tup_bag\"",
        "168",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "153": {
      "op": "box_replace",
      "stack_out": []
    },
    "154": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "155": {
      "op": "intc 5 // 4272",
      "defined_out": [
        "\"tup_bag\"",
        "4272"
      ],
      "stack_out": [
        "\"tup_bag\"",
        "4272"
      ]
    },
    "157": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"tup_bag\"",
        "1",
        "4272"
      ],
      "stack_out": [
        "\"tup_bag\"",
        "4272",
        "1"
      ]
    },
    "158": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%box_extract%0#0"
      ]
    },
    "159": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%box_extract%0#0",
        "0"
      ]
    },
    "160": {
      "op": "intc_1 // 1",
      "stack_out": [
        "box%box_extract%0#0",
        "0",
        "1"
      ]
    },
    "161": {
      "op": "setbit",
      "defined_out": [
        "aggregate%updated_target%0#0"
      ],
      "stack_out": [
        "aggregate%updated_target%0#0"
      ]
    },
    "162": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "aggregate%updated_target%0#0",
        "\"tup_bag\""
      ]
    },
    "163": {
      "op": "intc 5 // 4272",
      "stack_out": [
        "aggregate%updated_target%0#0",
        "\"tup_bag\"",
        "4272"
      ]
    },
    "165": {
      "op": "uncover 2",
      "stack_out": [
        "\"tup_bag\"",
        "4272",
        "aggregate%updated_target%0#0"
      ]
    },
    "167": {
      "op": "box_replace",
      "stack_out": []
    },
    "168": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "169": {
      "op": "return",
      "stack_out": []
    },
    "170": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.num_tups[routing]",
      "params": {},
      "block": "num_tups",
      "stack_in": [],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "171": {
      "op": "intc_2 // 0",
      "defined_out": [
        "\"tup_bag\"",
        "0"
      ],
      "stack_out": [
        "\"tup_bag\"",
        "0"
      ]
    },
    "172": {
      "op": "intc_0 // 8",
      "defined_out": [
        "\"tup_bag\"",
        "0",
        "8"
      ],
      "stack_out": [
        "\"tup_bag\"",
        "0",
        "8"
      ]
    },
    "173": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%box_extract%0#0"
      ]
    },
    "174": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%box_extract%0#0",
        "0x151f7c75"
      ]
    },
    "175": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "box%box_extract%0#0"
      ]
    },
    "176": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "177": {
      "op": "log",
      "stack_out": []
    },
    "178": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "179": {
      "op": "return",
      "stack_out": []
    },
    "180": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup[routing]",
      "params": {},
      "block": "add_tup",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "183": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "184": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "185": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "16"
      ]
    },
    "186": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "187": {
      "error": "invalid number of bytes for (uint64,uint64)",
      "op": "assert // invalid number of bytes for (uint64,uint64)",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "188": {
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup",
      "op": "callsub test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup",
      "defined_out": [
        "add_tup%0#0"
      ],
      "stack_out": [
        "add_tup%0#0"
      ]
    },
    "191": {
      "op": "pop",
      "stack_out": []
    },
    "192": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "193": {
      "op": "return",
      "stack_out": []
    },
    "194": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_tup[routing]",
      "params": {},
      "block": "get_tup",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "197": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "198": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "199": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "200": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "201": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "202": {
      "op": "btoi",
      "defined_out": [
        "index#0"
      ],
      "stack_out": [
        "index#0"
      ]
    },
    "203": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\"",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "\"tup_bag\""
      ]
    },
    "204": {
      "op": "intc_2 // 0",
      "defined_out": [
        "\"tup_bag\"",
        "0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "\"tup_bag\"",
        "0"
      ]
    },
    "205": {
      "op": "intc_0 // 8",
      "stack_out": [
        "index#0",
        "\"tup_bag\"",
        "0",
        "8"
      ]
    },
    "206": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%box_extract%0#0"
      ]
    },
    "207": {
      "op": "btoi",
      "defined_out": [
        "index#0",
        "values%0#0"
      ],
      "stack_out": [
        "index#0",
        "values%0#0"
      ]
    },
    "208": {
      "op": "dig 1",
      "defined_out": [
        "index#0",
        "index#0 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "index#0",
        "values%0#0",
        "index#0 (copy)"
      ]
    },
    "210": {
      "op": ">",
      "defined_out": [
        "index#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "index#0",
        "tmp%0#1"
      ]
    },
    "211": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "index#0"
      ]
    },
    "212": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "index#0",
        "\"tup_bag\""
      ]
    },
    "213": {
      "op": "intc_0 // 8",
      "stack_out": [
        "index#0",
        "\"tup_bag\"",
        "8"
      ]
    },
    "214": {
      "op": "intc 4 // 128",
      "defined_out": [
        "\"tup_bag\"",
        "128",
        "8",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "\"tup_bag\"",
        "8",
        "128"
      ]
    },
    "216": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%2#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%box_extract%2#0"
      ]
    },
    "217": {
      "op": "swap",
      "stack_out": [
        "box%box_extract%2#0",
        "index#0"
      ]
    },
    "218": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "box%box_extract%2#0",
        "index#0"
      ],
      "stack_out": [
        "box%box_extract%2#0",
        "index#0",
        "16"
      ]
    },
    "219": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "box%box_extract%2#0"
      ],
      "stack_out": [
        "box%box_extract%2#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "220": {
      "op": "intc_3 // 16",
      "stack_out": [
        "box%box_extract%2#0",
        "aggregate%bytes_offset%0#0",
        "16"
      ]
    },
    "221": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0"
      ]
    },
    "222": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_element%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "0x151f7c75"
      ]
    },
    "223": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_element%0#0"
      ]
    },
    "224": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "225": {
      "op": "log",
      "stack_out": []
    },
    "226": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "227": {
      "op": "return",
      "stack_out": []
    },
    "228": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum[routing]",
      "params": {},
      "block": "sum",
      "stack_in": [],
      "op": "intc_2 // 0"
    },
    "229": {
      "op": "bytec_0 // \"tup_bag\""
    },
    "230": {
      "op": "intc_2 // 0"
    },
    "231": {
      "op": "intc_0 // 8",
      "defined_out": [
        "\"tup_bag\"",
        "0",
        "8",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "\"tup_bag\"",
        "0",
        "8"
      ]
    },
    "232": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%box_extract%0#0"
      ]
    },
    "233": {
      "op": "btoi",
      "defined_out": [
        "total#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0"
      ]
    },
    "234": {
      "op": "intc_2 // 0",
      "defined_out": [
        "i#0",
        "total#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0"
      ]
    },
    "235": {
      "block": "sum_for_header@2",
      "stack_in": [
        "total#0",
        "values%0#0",
        "i#0"
      ],
      "op": "dup",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "i#0"
      ]
    },
    "236": {
      "op": "dig 2",
      "defined_out": [
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "i#0",
        "values%0#0"
      ]
    },
    "238": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "239": {
      "op": "bz sum_after_for@5",
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0"
      ]
    },
    "242": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\"",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "\"tup_bag\""
      ]
    },
    "243": {
      "op": "intc_0 // 8",
      "defined_out": [
        "\"tup_bag\"",
        "8",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "\"tup_bag\"",
        "8"
      ]
    },
    "244": {
      "op": "intc 4 // 128",
      "defined_out": [
        "\"tup_bag\"",
        "128",
        "8",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "\"tup_bag\"",
        "8",
        "128"
      ]
    },
    "246": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%3#0",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "box%box_extract%3#0"
      ]
    },
    "247": {
      "op": "dig 1",
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "box%box_extract%3#0",
        "i#0"
      ]
    },
    "249": {
      "op": "dup",
      "defined_out": [
        "box%box_extract%3#0",
        "i#0",
        "i#0 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "box%box_extract%3#0",
        "i#0 (copy)",
        "i#0 (copy)"
      ]
    },
    "250": {
      "op": "cover 2",
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "i#0",
        "box%box_extract%3#0",
        "i#0 (copy)"
      ]
    },
    "252": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "box%box_extract%3#0",
        "i#0",
        "i#0 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "i#0",
        "box%box_extract%3#0",
        "i#0 (copy)",
        "16"
      ]
    },
    "253": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "box%box_extract%3#0",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "i#0",
        "box%box_extract%3#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "254": {
      "op": "intc_3 // 16",
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "i#0",
        "box%box_extract%3#0",
        "aggregate%bytes_offset%0#0",
        "16"
      ]
    },
    "255": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "i#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "256": {
      "op": "dup",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "i#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)"
      ]
    },
    "257": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "i#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "0"
      ]
    },
    "258": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "i#0",
        "aggregate%encoded_element%0#0",
        "values%1#0"
      ]
    },
    "259": {
      "op": "dig 5",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "total#0",
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "i#0",
        "aggregate%encoded_element%0#0",
        "values%1#0",
        "total#0"
      ]
    },
    "261": {
      "op": "+",
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "i#0",
        "aggregate%encoded_element%0#0",
        "total#0"
      ]
    },
    "262": {
      "op": "swap",
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "i#0",
        "total#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "263": {
      "op": "intc_0 // 8",
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "i#0",
        "total#0",
        "aggregate%encoded_element%0#0",
        "8"
      ]
    },
    "264": {
      "op": "extract_uint64",
      "defined_out": [
        "i#0",
        "total#0",
        "values%0#0",
        "values%2#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "i#0",
        "total#0",
        "values%2#0"
      ]
    },
    "265": {
      "op": "+",
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "i#0",
        "total#0"
      ]
    },
    "266": {
      "op": "bury 4",
      "defined_out": [
        "i#0",
        "total#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "i#0"
      ]
    },
    "268": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0",
        "total#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "269": {
      "op": "+",
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "i#0"
      ]
    },
    "270": {
      "op": "bury 1",
      "defined_out": [
        "i#0",
        "total#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0"
      ]
    },
    "272": {
      "op": "b sum_for_header@2"
    },
    "275": {
      "block": "sum_after_for@5",
      "stack_in": [
        "total#0",
        "values%0#0",
        "i#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "total#0"
      ]
    },
    "277": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "278": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "279": {
      "op": "swap",
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "280": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "tmp%2#0"
      ]
    },
    "281": {
      "op": "log",
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0"
      ]
    },
    "282": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0",
        "1"
      ]
    },
    "283": {
      "op": "return",
      "stack_out": [
        "total#0",
        "values%0#0",
        "i#0"
      ]
    },
    "284": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups[routing]",
      "params": {},
      "block": "add_many_tups",
      "stack_in": [],
      "op": "txna ApplicationArgs 1"
    },
    "287": {
      "op": "dupn 2",
      "defined_out": [
        "tups#0",
        "tups#0 (copy)"
      ],
      "stack_out": [
        "tups#0",
        "tups#0",
        "tups#0 (copy)"
      ]
    },
    "289": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tups#0",
        "tups#0",
        "tups#0 (copy)",
        "0"
      ]
    },
    "290": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "tups#0",
        "aggregate%array_length%0#0"
      ]
    },
    "291": {
      "op": "dup",
      "stack_out": [
        "tups#0",
        "tups#0",
        "aggregate%array_length%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "292": {
      "op": "cover 2",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "tups#0",
        "aggregate%array_length%0#0"
      ]
    },
    "294": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "aggregate%array_length%0#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "tups#0",
        "aggregate%array_length%0#0",
        "16"
      ]
    },
    "295": {
      "op": "*",
      "defined_out": [
        "aggregate%array_length%0#0",
        "mul%0#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "tups#0",
        "mul%0#0"
      ]
    },
    "296": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "mul%0#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "tups#0",
        "mul%0#0",
        "2"
      ]
    },
    "298": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "aggregate%array_length%0#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "tups#0",
        "add%0#0"
      ]
    },
    "299": {
      "op": "swap",
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "add%0#0",
        "tups#0"
      ]
    },
    "300": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "aggregate%array_length%0#0",
        "len%0#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "301": {
      "op": "==",
      "defined_out": [
        "aggregate%array_length%0#0",
        "eq%0#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "eq%0#0"
      ]
    },
    "302": {
      "error": "invalid number of bytes for (len+(uint64,uint64)[])",
      "op": "assert // invalid number of bytes for (len+(uint64,uint64)[])",
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0"
      ]
    },
    "303": {
      "op": "intc_2 // 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "i#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0"
      ]
    },
    "304": {
      "block": "add_many_tups_for_header@2",
      "stack_in": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0"
      ],
      "op": "dup",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0",
        "i#0"
      ]
    },
    "305": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%array_length%0#0",
        "i#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0",
        "i#0",
        "aggregate%array_length%0#0"
      ]
    },
    "307": {
      "op": "<",
      "defined_out": [
        "aggregate%array_length%0#0",
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "308": {
      "op": "bz add_many_tups_after_for@5",
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0"
      ]
    },
    "311": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%array_length%0#0",
        "i#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0",
        "tups#0"
      ]
    },
    "313": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "i#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "316": {
      "op": "dig 1",
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0",
        "aggregate%array_trimmed%0#0",
        "i#0"
      ]
    },
    "318": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "i#0",
        "i#0 (copy)",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0",
        "aggregate%array_trimmed%0#0",
        "i#0 (copy)",
        "i#0 (copy)"
      ]
    },
    "319": {
      "op": "cover 2",
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0",
        "i#0",
        "aggregate%array_trimmed%0#0",
        "i#0 (copy)"
      ]
    },
    "321": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "i#0",
        "i#0 (copy)",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0",
        "i#0",
        "aggregate%array_trimmed%0#0",
        "i#0 (copy)",
        "16"
      ]
    },
    "322": {
      "op": "*",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "i#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0",
        "i#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "323": {
      "op": "intc_3 // 16",
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0",
        "i#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "16"
      ]
    },
    "324": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%encoded_element%0#0",
        "i#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0",
        "i#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "325": {
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup",
      "op": "callsub test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup",
      "defined_out": [
        "add_tup%0#0",
        "aggregate%array_length%0#0",
        "i#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0",
        "i#0",
        "add_tup%0#0"
      ]
    },
    "328": {
      "op": "pop",
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0",
        "i#0"
      ]
    },
    "329": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%array_length%0#0",
        "i#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "330": {
      "op": "+",
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0",
        "i#0"
      ]
    },
    "331": {
      "op": "bury 1",
      "defined_out": [
        "aggregate%array_length%0#0",
        "i#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0"
      ]
    },
    "333": {
      "op": "b add_many_tups_for_header@2"
    },
    "336": {
      "block": "add_many_tups_after_for@5",
      "stack_in": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0",
        "1"
      ]
    },
    "337": {
      "op": "return",
      "stack_out": [
        "tups#0",
        "aggregate%array_length%0#0",
        "i#0"
      ]
    },
    "338": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups[routing]",
      "params": {},
      "block": "add_fixed_tups",
      "stack_in": [],
      "op": "txna ApplicationArgs 1"
    },
    "341": {
      "op": "dup",
      "defined_out": [
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "tups#0"
      ]
    },
    "342": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "len%0#0"
      ]
    },
    "343": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "len%0#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "len%0#0",
        "48"
      ]
    },
    "345": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "eq%0#0"
      ]
    },
    "346": {
      "error": "invalid number of bytes for (uint64,uint64)[3]",
      "op": "assert // invalid number of bytes for (uint64,uint64)[3]",
      "stack_out": [
        "tups#0"
      ]
    },
    "347": {
      "op": "intc_2 // 0",
      "defined_out": [
        "i#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "i#0"
      ]
    },
    "348": {
      "block": "add_fixed_tups_for_header@2",
      "stack_in": [
        "tups#0",
        "i#0"
      ],
      "op": "dup",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tups#0",
        "i#0",
        "i#0"
      ]
    },
    "349": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "i#0"
      ],
      "stack_out": [
        "tups#0",
        "i#0",
        "i#0",
        "3"
      ]
    },
    "351": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "tups#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "352": {
      "op": "bz add_fixed_tups_after_for@5",
      "stack_out": [
        "tups#0",
        "i#0"
      ]
    },
    "355": {
      "op": "dupn 2",
      "defined_out": [
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "tups#0",
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "357": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "tups#0",
        "i#0",
        "i#0",
        "i#0 (copy)",
        "16"
      ]
    },
    "358": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "tups#0",
        "i#0",
        "i#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "359": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "i#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "i#0",
        "i#0",
        "aggregate%bytes_offset%0#0",
        "tups#0"
      ]
    },
    "361": {
      "op": "swap",
      "stack_out": [
        "tups#0",
        "i#0",
        "i#0",
        "tups#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "362": {
      "op": "intc_3 // 16",
      "stack_out": [
        "tups#0",
        "i#0",
        "i#0",
        "tups#0",
        "aggregate%bytes_offset%0#0",
        "16"
      ]
    },
    "363": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "i#0",
        "i#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "364": {
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup",
      "op": "callsub test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup",
      "defined_out": [
        "add_tup%0#0",
        "i#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "i#0",
        "i#0",
        "add_tup%0#0"
      ]
    },
    "367": {
      "op": "pop",
      "stack_out": [
        "tups#0",
        "i#0",
        "i#0"
      ]
    },
    "368": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "369": {
      "op": "+",
      "stack_out": [
        "tups#0",
        "i#0",
        "i#0"
      ]
    },
    "370": {
      "op": "bury 1",
      "defined_out": [
        "i#0",
        "tups#0"
      ],
      "stack_out": [
        "tups#0",
        "i#0"
      ]
    },
    "372": {
      "op": "b add_fixed_tups_for_header@2"
    },
    "375": {
      "block": "add_fixed_tups_after_for@5",
      "stack_in": [
        "tups#0",
        "i#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "tups#0",
        "i#0",
        "1"
      ]
    },
    "376": {
      "op": "return",
      "stack_out": [
        "tups#0",
        "i#0"
      ]
    },
    "377": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a[routing]",
      "params": {},
      "block": "set_a",
      "stack_in": [],
      "op": "txna ApplicationArgs 1"
    },
    "380": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "381": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "382": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "383": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "384": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "385": {
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner",
      "op": "callsub _check_owner"
    },
    "388": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"tup_bag\""
      ]
    },
    "389": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "\"tup_bag\"",
        "0"
      ]
    },
    "390": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%0#0",
        "\"tup_bag\"",
        "0",
        "8"
      ]
    },
    "391": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box%box_extract%0#0"
      ]
    },
    "392": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0"
      ]
    },
    "393": {
      "op": "intc_2 // 0",
      "defined_out": [
        "i#0",
        "tmp%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0"
      ]
    },
    "394": {
      "block": "set_a_for_header@2",
      "stack_in": [
        "tmp%0#0",
        "values%0#0",
        "i#0"
      ],
      "op": "dup",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0"
      ]
    },
    "395": {
      "op": "dig 2",
      "defined_out": [
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "values%0#0"
      ]
    },
    "397": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "398": {
      "op": "bz set_a_after_for@5",
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0"
      ]
    },
    "401": {
      "op": "dupn 2",
      "defined_out": [
        "i#0",
        "i#0 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "403": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "i#0",
        "i#0 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "i#0 (copy)",
        "8"
      ]
    },
    "404": {
      "op": "<",
      "defined_out": [
        "box%index_ok%0#0",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "box%index_ok%0#0"
      ]
    },
    "405": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0"
      ]
    },
    "406": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "407": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "i#0",
        "i#0 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "i#0 (copy)",
        "16"
      ]
    },
    "408": {
      "op": "*",
      "defined_out": [
        "box%element_offset%0#0",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "box%element_offset%0#0"
      ]
    },
    "409": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "box%element_offset%0#0",
        "8"
      ]
    },
    "410": {
      "op": "+",
      "defined_out": [
        "box%offset%2#0",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "box%offset%2#0"
      ]
    },
    "411": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\"",
        "box%offset%2#0",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "box%offset%2#0",
        "\"tup_bag\""
      ]
    },
    "412": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "\"tup_bag\"",
        "box%offset%2#0"
      ]
    },
    "413": {
      "op": "dig 5",
      "defined_out": [
        "\"tup_bag\"",
        "box%offset%2#0",
        "i#0",
        "tmp%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "\"tup_bag\"",
        "box%offset%2#0",
        "tmp%0#0"
      ]
    },
    "415": {
      "op": "box_replace",
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0"
      ]
    },
    "416": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0",
        "tmp%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "417": {
      "op": "+",
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0"
      ]
    },
    "418": {
      "op": "bury 1",
      "defined_out": [
        "i#0",
        "tmp%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0"
      ]
    },
    "420": {
      "op": "b set_a_for_header@2"
    },
    "423": {
      "block": "set_a_after_for@5",
      "stack_in": [
        "tmp%0#0",
        "values%0#0",
        "i#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "1"
      ]
    },
    "424": {
      "op": "return",
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0"
      ]
    },
    "425": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b[routing]",
      "params": {},
      "block": "set_b",
      "stack_in": [],
      "op": "txna ApplicationArgs 1"
    },
    "428": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "429": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "430": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "431": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "432": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "433": {
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner",
      "op": "callsub _check_owner"
    },
    "436": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"tup_bag\""
      ]
    },
    "437": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "\"tup_bag\"",
        "0"
      ]
    },
    "438": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%0#0",
        "\"tup_bag\"",
        "0",
        "8"
      ]
    },
    "439": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box%box_extract%0#0"
      ]
    },
    "440": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0"
      ]
    },
    "441": {
      "op": "intc_2 // 0",
      "defined_out": [
        "i#0",
        "tmp%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0"
      ]
    },
    "442": {
      "block": "set_b_for_header@2",
      "stack_in": [
        "tmp%0#0",
        "values%0#0",
        "i#0"
      ],
      "op": "dup",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0"
      ]
    },
    "443": {
      "op": "dig 2",
      "defined_out": [
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "values%0#0"
      ]
    },
    "445": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "446": {
      "op": "bz set_b_after_for@5",
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0"
      ]
    },
    "449": {
      "op": "dupn 2",
      "defined_out": [
        "i#0",
        "i#0 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "451": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "i#0",
        "i#0 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "i#0 (copy)",
        "8"
      ]
    },
    "452": {
      "op": "<",
      "defined_out": [
        "box%index_ok%0#0",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "box%index_ok%0#0"
      ]
    },
    "453": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0"
      ]
    },
    "454": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "455": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "i#0",
        "i#0 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "i#0 (copy)",
        "16"
      ]
    },
    "456": {
      "op": "*",
      "defined_out": [
        "box%element_offset%0#0",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "box%element_offset%0#0"
      ]
    },
    "457": {
      "op": "intc_3 // 16",
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "box%element_offset%0#0",
        "16"
      ]
    },
    "458": {
      "op": "+",
      "defined_out": [
        "box%offset%3#0",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "box%offset%3#0"
      ]
    },
    "459": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\"",
        "box%offset%3#0",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "box%offset%3#0",
        "\"tup_bag\""
      ]
    },
    "460": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "\"tup_bag\"",
        "box%offset%3#0"
      ]
    },
    "461": {
      "op": "dig 5",
      "defined_out": [
        "\"tup_bag\"",
        "box%offset%3#0",
        "i#0",
        "tmp%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "\"tup_bag\"",
        "box%offset%3#0",
        "tmp%0#0"
      ]
    },
    "463": {
      "op": "box_replace",
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0"
      ]
    },
    "464": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0",
        "tmp%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "465": {
      "op": "+",
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "i#0"
      ]
    },
    "466": {
      "op": "bury 1",
      "defined_out": [
        "i#0",
        "tmp%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0"
      ]
    },
    "468": {
      "op": "b set_b_for_header@2"
    },
    "471": {
      "block": "set_b_after_for@5",
      "stack_in": [
        "tmp%0#0",
        "values%0#0",
        "i#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0",
        "1"
      ]
    },
    "472": {
      "op": "return",
      "stack_out": [
        "tmp%0#0",
        "values%0#0",
        "i#0"
      ]
    },
    "473": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_3_tups[routing]",
      "params": {},
      "block": "get_3_tups",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "476": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "477": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "478": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "479": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "480": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "481": {
      "op": "btoi",
      "defined_out": [
        "start#0"
      ],
      "stack_out": [
        "start#0"
      ]
    },
    "482": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\"",
        "start#0"
      ],
      "stack_out": [
        "start#0",
        "\"tup_bag\""
      ]
    },
    "483": {
      "op": "intc_2 // 0",
      "defined_out": [
        "\"tup_bag\"",
        "0",
        "start#0"
      ],
      "stack_out": [
        "start#0",
        "\"tup_bag\"",
        "0"
      ]
    },
    "484": {
      "op": "intc_0 // 8",
      "stack_out": [
        "start#0",
        "\"tup_bag\"",
        "0",
        "8"
      ]
    },
    "485": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "start#0"
      ],
      "stack_out": [
        "start#0",
        "box%box_extract%0#0"
      ]
    },
    "486": {
      "op": "btoi",
      "defined_out": [
        "start#0",
        "values%0#0"
      ],
      "stack_out": [
        "start#0",
        "values%0#0"
      ]
    },
    "487": {
      "op": "dig 1",
      "defined_out": [
        "start#0",
        "start#0 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "start#0",
        "values%0#0",
        "start#0 (copy)"
      ]
    },
    "489": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "start#0",
        "start#0 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "start#0",
        "values%0#0",
        "start#0 (copy)",
        "3"
      ]
    },
    "491": {
      "op": "+",
      "defined_out": [
        "start#0",
        "tmp%0#1",
        "values%0#0"
      ],
      "stack_out": [
        "start#0",
        "values%0#0",
        "tmp%0#1"
      ]
    },
    "492": {
      "op": ">=",
      "defined_out": [
        "start#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "start#0",
        "tmp%1#1"
      ]
    },
    "493": {
      "error": "not enough items",
      "op": "assert // not enough items",
      "stack_out": [
        "start#0"
      ]
    },
    "494": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "start#0",
        "\"tup_bag\""
      ]
    },
    "495": {
      "op": "intc_0 // 8",
      "stack_out": [
        "start#0",
        "\"tup_bag\"",
        "8"
      ]
    },
    "496": {
      "op": "intc 4 // 128",
      "defined_out": [
        "\"tup_bag\"",
        "128",
        "8",
        "start#0"
      ],
      "stack_out": [
        "start#0",
        "\"tup_bag\"",
        "8",
        "128"
      ]
    },
    "498": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%2#0",
        "start#0"
      ],
      "stack_out": [
        "start#0",
        "box%box_extract%2#0"
      ]
    },
    "499": {
      "op": "dig 1",
      "stack_out": [
        "start#0",
        "box%box_extract%2#0",
        "start#0 (copy)"
      ]
    },
    "501": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "box%box_extract%2#0",
        "start#0",
        "start#0 (copy)"
      ],
      "stack_out": [
        "start#0",
        "box%box_extract%2#0",
        "start#0 (copy)",
        "16"
      ]
    },
    "502": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "box%box_extract%2#0",
        "start#0"
      ],
      "stack_out": [
        "start#0",
        "box%box_extract%2#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "503": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "box%box_extract%2#0",
        "box%box_extract%2#0 (copy)",
        "start#0"
      ],
      "stack_out": [
        "start#0",
        "box%box_extract%2#0",
        "aggregate%bytes_offset%0#0",
        "box%box_extract%2#0 (copy)"
      ]
    },
    "505": {
      "op": "swap",
      "stack_out": [
        "start#0",
        "box%box_extract%2#0",
        "box%box_extract%2#0 (copy)",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "506": {
      "op": "intc_3 // 16",
      "stack_out": [
        "start#0",
        "box%box_extract%2#0",
        "box%box_extract%2#0 (copy)",
        "aggregate%bytes_offset%0#0",
        "16"
      ]
    },
    "507": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "box%box_extract%2#0",
        "start#0"
      ],
      "stack_out": [
        "start#0",
        "box%box_extract%2#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "508": {
      "op": "dig 2",
      "stack_out": [
        "start#0",
        "box%box_extract%2#0",
        "aggregate%encoded_element%0#0",
        "start#0 (copy)"
      ]
    },
    "510": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%encoded_element%0#0",
        "box%box_extract%2#0",
        "start#0",
        "start#0 (copy)"
      ],
      "stack_out": [
        "start#0",
        "box%box_extract%2#0",
        "aggregate%encoded_element%0#0",
        "start#0 (copy)",
        "1"
      ]
    },
    "511": {
      "op": "+",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "box%box_extract%2#0",
        "start#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "start#0",
        "box%box_extract%2#0",
        "aggregate%encoded_element%0#0",
        "tmp%2#1"
      ]
    },
    "512": {
      "op": "intc_3 // 16",
      "stack_out": [
        "start#0",
        "box%box_extract%2#0",
        "aggregate%encoded_element%0#0",
        "tmp%2#1",
        "16"
      ]
    },
    "513": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%1#0",
        "aggregate%encoded_element%0#0",
        "box%box_extract%2#0",
        "start#0"
      ],
      "stack_out": [
        "start#0",
        "box%box_extract%2#0",
        "aggregate%encoded_element%0#0",
        "aggregate%bytes_offset%1#0"
      ]
    },
    "514": {
      "op": "dig 2",
      "stack_out": [
        "start#0",
        "box%box_extract%2#0",
        "aggregate%encoded_element%0#0",
        "aggregate%bytes_offset%1#0",
        "box%box_extract%2#0 (copy)"
      ]
    },
    "516": {
      "op": "swap",
      "stack_out": [
        "start#0",
        "box%box_extract%2#0",
        "aggregate%encoded_element%0#0",
        "box%box_extract%2#0 (copy)",
        "aggregate%bytes_offset%1#0"
      ]
    },
    "517": {
      "op": "intc_3 // 16",
      "stack_out": [
        "start#0",
        "box%box_extract%2#0",
        "aggregate%encoded_element%0#0",
        "box%box_extract%2#0 (copy)",
        "aggregate%bytes_offset%1#0",
        "16"
      ]
    },
    "518": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0",
        "box%box_extract%2#0",
        "start#0"
      ],
      "stack_out": [
        "start#0",
        "box%box_extract%2#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0"
      ]
    },
    "519": {
      "op": "uncover 3",
      "stack_out": [
        "box%box_extract%2#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0",
        "start#0"
      ]
    },
    "521": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0",
        "box%box_extract%2#0",
        "start#0"
      ],
      "stack_out": [
        "box%box_extract%2#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0",
        "start#0",
        "2"
      ]
    },
    "523": {
      "op": "+",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0",
        "box%box_extract%2#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "box%box_extract%2#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0",
        "tmp%3#1"
      ]
    },
    "524": {
      "op": "intc_3 // 16",
      "stack_out": [
        "box%box_extract%2#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0",
        "tmp%3#1",
        "16"
      ]
    },
    "525": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%2#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0",
        "box%box_extract%2#0"
      ],
      "stack_out": [
        "box%box_extract%2#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0",
        "aggregate%bytes_offset%2#0"
      ]
    },
    "526": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0",
        "aggregate%bytes_offset%2#0",
        "box%box_extract%2#0"
      ]
    },
    "528": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0",
        "box%box_extract%2#0",
        "aggregate%bytes_offset%2#0"
      ]
    },
    "529": {
      "op": "intc_3 // 16",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0",
        "box%box_extract%2#0",
        "aggregate%bytes_offset%2#0",
        "16"
      ]
    },
    "530": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0",
        "aggregate%encoded_element%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0",
        "aggregate%encoded_element%2#0"
      ]
    },
    "531": {
      "op": "cover 2",
      "stack_out": [
        "aggregate%encoded_element%2#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0"
      ]
    },
    "533": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_element%2#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%2#0",
        "aggregate%head%1#0"
      ]
    },
    "534": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_element%2#0"
      ]
    },
    "535": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0"
      ]
    },
    "536": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "0x151f7c75"
      ]
    },
    "537": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%head%2#0"
      ]
    },
    "538": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "539": {
      "op": "log",
      "stack_out": []
    },
    "540": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "541": {
      "op": "return",
      "stack_out": []
    },
    "542": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups[routing]",
      "params": {},
      "block": "get_all_tups",
      "stack_in": [],
      "op": "pushbytes 0x0000"
    },
    "546": {
      "op": "bytec_0 // \"tup_bag\""
    },
    "547": {
      "op": "intc_2 // 0"
    },
    "548": {
      "op": "intc_0 // 8",
      "defined_out": [
        "\"tup_bag\"",
        "0",
        "8",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "\"tup_bag\"",
        "0",
        "8"
      ]
    },
    "549": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%1#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "box%box_extract%1#0"
      ]
    },
    "550": {
      "op": "btoi",
      "defined_out": [
        "result#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0"
      ]
    },
    "551": {
      "op": "intc_2 // 0",
      "defined_out": [
        "i#0",
        "result#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0"
      ]
    },
    "552": {
      "block": "get_all_tups_for_header@2",
      "stack_in": [
        "result#0",
        "values%0#0",
        "i#0"
      ],
      "op": "dup",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0"
      ]
    },
    "553": {
      "op": "dig 2",
      "defined_out": [
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0",
        "values%0#0"
      ]
    },
    "555": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "556": {
      "op": "bz get_all_tups_after_for@5",
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0"
      ]
    },
    "559": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\"",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "\"tup_bag\""
      ]
    },
    "560": {
      "op": "intc_0 // 8",
      "defined_out": [
        "\"tup_bag\"",
        "8",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "\"tup_bag\"",
        "8"
      ]
    },
    "561": {
      "op": "intc 4 // 128",
      "defined_out": [
        "\"tup_bag\"",
        "128",
        "8",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "\"tup_bag\"",
        "8",
        "128"
      ]
    },
    "563": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%2#0",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "box%box_extract%2#0"
      ]
    },
    "564": {
      "op": "dig 1",
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "box%box_extract%2#0",
        "i#0"
      ]
    },
    "566": {
      "op": "dup",
      "defined_out": [
        "box%box_extract%2#0",
        "i#0",
        "i#0 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "box%box_extract%2#0",
        "i#0 (copy)",
        "i#0 (copy)"
      ]
    },
    "567": {
      "op": "cover 2",
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0",
        "box%box_extract%2#0",
        "i#0 (copy)"
      ]
    },
    "569": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "box%box_extract%2#0",
        "i#0",
        "i#0 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0",
        "box%box_extract%2#0",
        "i#0 (copy)",
        "16"
      ]
    },
    "570": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "box%box_extract%2#0",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0",
        "box%box_extract%2#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "571": {
      "op": "intc_3 // 16",
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0",
        "box%box_extract%2#0",
        "aggregate%bytes_offset%0#0",
        "16"
      ]
    },
    "572": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "573": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "result#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0",
        "aggregate%encoded_element%0#0",
        "result#0"
      ]
    },
    "575": {
      "op": "dup"
    },
    "576": {
      "op": "uncover 2",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "result#0",
        "result#0 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0",
        "result#0",
        "result#0 (copy)",
        "aggregate%encoded_element%0#0"
      ]
    },
    "578": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "i#0",
        "result#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0",
        "result#0",
        "concat%0#0"
      ]
    },
    "579": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0",
        "concat%0#0",
        "result#0"
      ]
    },
    "580": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "concat%0#0",
        "i#0",
        "result#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0",
        "concat%0#0",
        "result#0",
        "0"
      ]
    },
    "581": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "i#0",
        "result#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "582": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "extract_uint16%0#0",
        "i#0",
        "result#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "583": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0",
        "i#0",
        "result#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "584": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0",
        "i#0",
        "result#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "585": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "i#0",
        "result#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "588": {
      "op": "replace2 0",
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0",
        "result#0"
      ]
    },
    "590": {
      "op": "bury 4",
      "defined_out": [
        "i#0",
        "result#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0"
      ]
    },
    "592": {
      "op": "intc_1 // 1",
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "593": {
      "op": "+",
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "i#0"
      ]
    },
    "594": {
      "op": "bury 1",
      "defined_out": [
        "i#0",
        "result#0",
        "values%0#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0"
      ]
    },
    "596": {
      "op": "b get_all_tups_for_header@2"
    },
    "599": {
      "block": "get_all_tups_after_for@5",
      "stack_in": [
        "result#0",
        "values%0#0",
        "i#0"
      ],
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "0x151f7c75"
      ]
    },
    "600": {
      "op": "dig 3",
      "defined_out": [
        "0x151f7c75",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "0x151f7c75",
        "result#0"
      ]
    },
    "602": {
      "op": "concat",
      "defined_out": [
        "result#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "603": {
      "op": "log",
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0"
      ]
    },
    "604": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0",
        "1"
      ]
    },
    "605": {
      "op": "return",
      "stack_out": [
        "result#0",
        "values%0#0",
        "i#0"
      ]
    },
    "606": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup",
      "params": {
        "tup#0": "bytes"
      },
      "block": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "609": {
      "callsub": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner",
      "op": "callsub _check_owner"
    },
    "612": {
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "613": {
      "op": "intc_2 // 0",
      "defined_out": [
        "\"tup_bag\"",
        "0"
      ],
      "stack_out": [
        "\"tup_bag\"",
        "0"
      ]
    },
    "614": {
      "op": "intc_0 // 8",
      "defined_out": [
        "\"tup_bag\"",
        "0",
        "8"
      ],
      "stack_out": [
        "\"tup_bag\"",
        "0",
        "8"
      ]
    },
    "615": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%box_extract%0#0"
      ]
    },
    "616": {
      "op": "btoi",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "617": {
      "op": "dup",
      "defined_out": [
        "values%0#0",
        "values%0#0 (copy)"
      ],
      "stack_out": [
        "values%0#0",
        "values%0#0 (copy)"
      ]
    },
    "618": {
      "op": "intc_0 // 8",
      "stack_out": [
        "values%0#0",
        "values%0#0 (copy)",
        "8"
      ]
    },
    "619": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "tmp%0#0"
      ]
    },
    "620": {
      "error": "too many tups",
      "op": "assert // too many tups",
      "stack_out": [
        "values%0#0"
      ]
    },
    "621": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "16"
      ]
    },
    "622": {
      "op": "*",
      "defined_out": [
        "box%element_offset%0#0"
      ],
      "stack_out": [
        "box%element_offset%0#0"
      ]
    },
    "623": {
      "op": "intc_0 // 8",
      "stack_out": [
        "box%element_offset%0#0",
        "8"
      ]
    },
    "624": {
      "op": "+",
      "defined_out": [
        "box%offset%3#0"
      ],
      "stack_out": [
        "box%offset%3#0"
      ]
    },
    "625": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "box%offset%3#0",
        "\"tup_bag\""
      ]
    },
    "626": {
      "op": "swap",
      "stack_out": [
        "\"tup_bag\"",
        "box%offset%3#0"
      ]
    },
    "627": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"tup_bag\"",
        "box%offset%3#0",
        "tup#0 (copy)"
      ],
      "stack_out": [
        "\"tup_bag\"",
        "box%offset%3#0",
        "tup#0 (copy)"
      ]
    },
    "629": {
      "op": "box_replace",
      "stack_out": []
    },
    "630": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "631": {
      "op": "intc_2 // 0",
      "stack_out": [
        "\"tup_bag\"",
        "0"
      ]
    },
    "632": {
      "op": "intc_0 // 8",
      "stack_out": [
        "\"tup_bag\"",
        "0",
        "8"
      ]
    },
    "633": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%2#0"
      ],
      "stack_out": [
        "box%box_extract%2#0"
      ]
    },
    "634": {
      "op": "btoi",
      "defined_out": [
        "values%2#0"
      ],
      "stack_out": [
        "values%2#0"
      ]
    },
    "635": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "values%2#0"
      ],
      "stack_out": [
        "values%2#0",
        "1"
      ]
    },
    "636": {
      "op": "+",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "637": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "638": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"tup_bag\""
      ]
    },
    "639": {
      "op": "intc_2 // 0",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"tup_bag\"",
        "0"
      ]
    },
    "640": {
      "op": "uncover 2",
      "stack_out": [
        "\"tup_bag\"",
        "0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "642": {
      "op": "box_replace",
      "stack_out": []
    },
    "643": {
      "op": "frame_dig -1",
      "stack_out": [
        "tup#0 (copy)"
      ]
    },
    "645": {
      "retsub": true,
      "op": "retsub"
    },
    "646": {
      "subroutine": "test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner",
      "params": {},
      "block": "_check_owner",
      "stack_in": [],
      "op": "bytec_0 // \"tup_bag\"",
      "defined_out": [
        "\"tup_bag\""
      ],
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "647": {
      "op": "intc 5 // 4272",
      "defined_out": [
        "\"tup_bag\"",
        "4272"
      ],
      "stack_out": [
        "\"tup_bag\"",
        "4272"
      ]
    },
    "649": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"tup_bag\"",
        "1",
        "4272"
      ],
      "stack_out": [
        "\"tup_bag\"",
        "4272",
        "1"
      ]
    },
    "650": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%box_extract%0#0"
      ]
    },
    "651": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%box_extract%0#0",
        "0"
      ]
    },
    "652": {
      "op": "getbit",
      "defined_out": [
        "aggregate%get_bit%0#0"
      ],
      "stack_out": [
        "aggregate%get_bit%0#0"
      ]
    },
    "653": {
      "error": "app not bootstrapped",
      "op": "assert // app not bootstrapped",
      "stack_out": []
    },
    "654": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "655": {
      "op": "pushints 136 32 // 136, 32",
      "defined_out": [
        "\"tup_bag\"",
        "136",
        "32"
      ],
      "stack_out": [
        "\"tup_bag\"",
        "136",
        "32"
      ]
    },
    "660": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%1#0"
      ],
      "stack_out": [
        "box%box_extract%1#0"
      ]
    },
    "661": {
      "op": "txn Sender",
      "defined_out": [
        "box%box_extract%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box%box_extract%1#0",
        "tmp%0#0"
      ]
    },
    "663": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "664": {
      "error": "sender not authorized",
      "op": "assert // sender not authorized",
      "stack_out": []
    },
    "665": {
      "op": "bytec_0 // \"tup_bag\"",
      "stack_out": [
        "\"tup_bag\""
      ]
    },
    "666": {
      "op": "pushint 168 // 168",
      "defined_out": [
        "\"tup_bag\"",
        "168"
      ],
      "stack_out": [
        "\"tup_bag\"",
        "168"
      ]
    },
    "669": {
      "op": "intc_0 // 8",
      "defined_out": [
        "\"tup_bag\"",
        "168",
        "8"
      ],
      "stack_out": [
        "\"tup_bag\"",
        "168",
        "8"
      ]
    },
    "670": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%2#0"
      ],
      "stack_out": [
        "box%box_extract%2#0"
      ]
    },
    "671": {
      "op": "btoi",
      "defined_out": [
        "values%2#0"
      ],
      "stack_out": [
        "values%2#0"
      ]
    },
    "672": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "tmp%2#0",
        "values%2#0"
      ],
      "stack_out": [
        "values%2#0",
        "tmp%2#0"
      ]
    },
    "674": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "675": {
      "error": "this error should be impossible",
      "op": "assert // this error should be impossible",
      "stack_out": []
    },
    "676": {
      "retsub": true,
      "op": "retsub"
    }
  }
}