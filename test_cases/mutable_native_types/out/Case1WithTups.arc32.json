{
    "hints": {
        "create_box()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "num_tups()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "add_tup((uint64,uint64))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "tup": {
                    "name": "NamedTup",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "get_tup(uint64)(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "NamedTup",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "sum()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "add_many_tups((uint64,uint64)[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "add_fixed_tups((uint64,uint64)[3])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_a(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_b(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_3_tups(uint64)(uint64,uint64)[3]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Case1WithTups",
        "methods": [
            {
                "name": "create_box",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "num_tups",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "add_tup",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "tup"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_tup",
                "args": [
                    {
                        "type": "uint64",
                        "name": "index"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)"
                }
            },
            {
                "name": "sum",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "add_many_tups",
                "args": [
                    {
                        "type": "(uint64,uint64)[]",
                        "name": "tups"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "add_fixed_tups",
                "args": [
                    {
                        "type": "(uint64,uint64)[3]",
                        "name": "tups"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_a",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_b",
                "args": [
                    {
                        "type": "uint64",
                        "name": "b"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_3_tups",
                "args": [
                    {
                        "type": "uint64",
                        "name": "start"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)[3]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}