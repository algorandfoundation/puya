main test_cases.mutable_native_types.abi_call.CallMe.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: bool = test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__()
        return tmp%0#1

subroutine test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__() -> bool:
    block@0: // L41
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%0#0 ? block@1 : block@25
    block@1: // abi_routing_L41
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "delete()void" => block@2, * => block@3}
    block@2: // delete_route_L49
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 DeleteApplication)
        (assert tmp%4#0) // OnCompletion is not DeleteApplication
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%5#0) // can only call when not creating
        test_cases.mutable_native_types.abi_call.CallMe.delete[routing]()
        fail
    block@3: // route_NoOp_L41
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: bytes = (txna ApplicationArgs 0)
        let tmp%10#0: bool = (txn ApplicationID)
        goto tmp%10#0 ? block@5 : block@19
    block@5: // call_NoOp_L41
        let tmp%11#0: bytes = (txna ApplicationArgs 0)
        switch tmp%11#0 {method "fixed_struct_arg((uint64,uint64))void" => block@6, method "fixed_struct_ret()(uint64,uint64)" => block@7, method "nested_struct_arg(((uint64,uint64),uint64))void" => block@8, method "nested_struct_ret()((uint64,uint64),uint64)" => block@9, method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void" => block@10, method "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])" => block@11, method "fixed_arr_arg((uint64,uint64)[3])void" => block@12, method "fixed_arr_ret()(uint64,uint64)[3]" => block@13, method "native_arr_arg((uint64,uint64)[])void" => block@14, method "native_arr_ret()(uint64,uint64)[]" => block@15, method "log_it()void" => block@16, * => block@17}
    block@6: // fixed_struct_arg_route_L53
        test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg[routing]()
        fail
    block@7: // fixed_struct_ret_route_L57
        test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret[routing]()
        fail
    block@8: // nested_struct_arg_route_L61
        test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg[routing]()
        fail
    block@9: // nested_struct_ret_route_L65
        test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret[routing]()
        fail
    block@10: // dynamic_struct_arg_route_L69
        test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg[routing]()
        fail
    block@11: // dynamic_struct_ret_route_L73
        test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret[routing]()
        fail
    block@12: // fixed_arr_arg_route_L77
        test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg[routing]()
        fail
    block@13: // fixed_arr_ret_route_L81
        test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret[routing]()
        fail
    block@14: // native_arr_arg_route_L85
        test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg[routing]()
        fail
    block@15: // native_arr_ret_route_L89
        test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret[routing]()
        fail
    block@16: // log_it_route_L93
        test_cases.mutable_native_types.abi_call.CallMe.log_it[routing]()
        fail
    block@17: // switch_case_default_L41
        fail
    block@19: // create_NoOp_L41
        let tmp%12#0: bytes = (txna ApplicationArgs 0)
        fail
    block@25: // bare_routing_L41
        let tmp%13#0: uint64 = (txn OnCompletion)
        let not%tmp%13#0: bool = (! tmp%13#0)
        (assert not%tmp%13#0)
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (! tmp%14#0)
        (assert tmp%15#0) // can only call when creating
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.delete[routing]() -> void:
    block@0: // L49
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg[routing]() -> void:
    block@0: // L53
        let arg#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        (app_global_put "fixed_struct" arg#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret[routing]() -> void:
    block@0: // L57
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "fixed_struct")
        (assert maybe_exists%0#0) // check self.fixed_struct exists
        let tmp%1#0: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg[routing]() -> void:
    block@0: // L61
        let arg#0: Encoded((uint64,uint64),uint64) = (txna ApplicationArgs 1)
        (app_global_put "nested_struct" arg#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret[routing]() -> void:
    block@0: // L65
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested_struct")
        (assert maybe_exists%0#0) // check self.nested_struct exists
        let tmp%1#0: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg[routing]() -> void:
    block@0: // L69
        let arg#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = (txna ApplicationArgs 1)
        (app_global_put "dynamic_struct" arg#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret[routing]() -> void:
    block@0: // L73
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "dynamic_struct")
        (assert maybe_exists%0#0) // check self.dynamic_struct exists
        let tmp%1#0: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg[routing]() -> void:
    block@0: // L77
        let arg#0: Encoded((uint64,uint64)[3]) = (txna ApplicationArgs 1)
        (app_global_put "fixed_arr" arg#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret[routing]() -> void:
    block@0: // L81
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "fixed_arr")
        (assert maybe_exists%0#0) // check self.fixed_arr exists
        let tmp%1#0: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg[routing]() -> void:
    block@0: // L85
        let arg#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        (app_global_put "native_arr" arg#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret[routing]() -> void:
    block@0: // L89
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "native_arr")
        (assert maybe_exists%0#0) // check self.native_arr exists
        let tmp%1#0: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.log_it[routing]() -> void:
    block@0: // L93
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "fixed_struct")
        (assert maybe_exists%0#0) // check self.fixed_struct exists
        (log maybe_value%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "nested_struct")
        (assert maybe_exists%1#0) // check self.nested_struct exists
        (log maybe_value%1#0)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "dynamic_struct")
        (assert maybe_exists%2#0) // check self.dynamic_struct exists
        (log maybe_value%2#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_global_get_ex 0u "fixed_arr")
        (assert maybe_exists%3#0) // check self.fixed_arr exists
        (log maybe_value%3#0)
        let (maybe_value%4#0: bytes, maybe_exists%4#0: bool) = (app_global_get_ex 0u "native_arr")
        (assert maybe_exists%4#0) // check self.native_arr exists
        (log maybe_value%4#0)
        exit 1u