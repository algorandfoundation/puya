// Op                                                                                           Stack (out)
// test_cases.mutable_native_types.abi_call.CallMe.__algopy_entrypoint_with_init() -> uint64:
subroutine main:
    main_block@0:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        txn NumAppArgs                                                                          tmp%0#2
        bz main_bare_routing@17 ; b main_abi_routing@4

    main_abi_routing@4:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        txna ApplicationArgs 0                                                                  tmp%2#0
        method delete()void                                                                     tmp%2#0,Method(delete()void)
        method fixed_struct_arg((uint64,uint64))void                                            tmp%2#0,Method(delete()void),Method(fixed_struct_arg((uint64,uint64))void)
        method fixed_struct_ret()(uint64,uint64)                                                tmp%2#0,Method(delete()void),Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64))
        method nested_struct_arg(((uint64,uint64),uint64))void                                  tmp%2#0,Method(delete()void),Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void)
        method nested_struct_ret()((uint64,uint64),uint64)                                      tmp%2#0,Method(delete()void),Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64))
        method dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void          tmp%2#0,Method(delete()void),Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)
        method dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])              tmp%2#0,Method(delete()void),Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))
        method fixed_arr_arg((uint64,uint64)[3])void                                            tmp%2#0,Method(delete()void),Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])),Method(fixed_arr_arg((uint64,uint64)[3])void)
        method fixed_arr_ret()(uint64,uint64)[3]                                                tmp%2#0,Method(delete()void),Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])),Method(fixed_arr_arg((uint64,uint64)[3])void),Method(fixed_arr_ret()(uint64,uint64)[3])
        method native_arr_arg((uint64,uint64)[])void                                            tmp%2#0,Method(delete()void),Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])),Method(fixed_arr_arg((uint64,uint64)[3])void),Method(fixed_arr_ret()(uint64,uint64)[3]),Method(native_arr_arg((uint64,uint64)[])void)
        method native_arr_ret()(uint64,uint64)[]                                                tmp%2#0,Method(delete()void),Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])),Method(fixed_arr_arg((uint64,uint64)[3])void),Method(fixed_arr_ret()(uint64,uint64)[3]),Method(native_arr_arg((uint64,uint64)[])void),Method(native_arr_ret()(uint64,uint64)[])
        method log_it()void                                                                     tmp%2#0,Method(delete()void),Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])),Method(fixed_arr_arg((uint64,uint64)[3])void),Method(fixed_arr_ret()(uint64,uint64)[3]),Method(native_arr_arg((uint64,uint64)[])void),Method(native_arr_ret()(uint64,uint64)[]),Method(log_it()void)
        l-load tmp%2#0 12                                                                       Method(delete()void),Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])),Method(fixed_arr_arg((uint64,uint64)[3])void),Method(fixed_arr_ret()(uint64,uint64)[3]),Method(native_arr_arg((uint64,uint64)[])void),Method(native_arr_ret()(uint64,uint64)[]),Method(log_it()void),tmp%2#0
        match main_delete_route@5 main_fixed_struct_arg_route@6 main_fixed_struct_ret_route@7 main_nested_struct_arg_route@8 main_nested_struct_ret_route@9 main_dynamic_struct_arg_route@10 main_dynamic_struct_ret_route@11 main_fixed_arr_arg_route@12 main_fixed_arr_ret_route@13 main_native_arr_arg_route@14 main_native_arr_ret_route@15 main_log_it_route@16 ; b main_after_if_else@19 

    main_delete_route@5:
        // mutable_native_types/abi_call.py:49
        // @arc4.abimethod(allow_actions=["DeleteApplication"])
        txn OnCompletion                                                                        tmp%3#0
        int DeleteApplication                                                                   tmp%3#0,DeleteApplication
        ==                                                                                      tmp%4#0
        assert // OnCompletion is not DeleteApplication
        txn ApplicationID                                                                       tmp%5#0
        assert // can only call when not creating
        int 1                                                                                   tmp%0#1
        x-store tmp%0#1                                                                         (ùïè) tmp%0#1 |
        b main_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@20 (ùïè) tmp%0#1 | 

    main_fixed_struct_arg_route@6:
        // mutable_native_types/abi_call.py:53
        // @arc4.abimethod()
        txn OnCompletion                                                                        tmp%7#0
        !                                                                                       tmp%8#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                       tmp%9#0
        assert // can only call when not creating
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                  arg#0
        // mutable_native_types/abi_call.py:55
        // self.fixed_struct.value = arg
        byte "fixed_struct"                                                                     arg#0,"fixed_struct"
        l-load arg#0 1                                                                          "fixed_struct",arg#0
        app_global_put
        // mutable_native_types/abi_call.py:53
        // @arc4.abimethod()
        int 1                                                                                   tmp%0#1
        x-store tmp%0#1                                                                         (ùïè) tmp%0#1 |
        b main_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@20 (ùïè) tmp%0#1 | 

    main_fixed_struct_ret_route@7:
        // mutable_native_types/abi_call.py:57
        // @arc4.abimethod()
        txn OnCompletion                                                                        tmp%11#0
        !                                                                                       tmp%12#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                       tmp%13#0
        assert // can only call when not creating
        callsub fixed_struct_ret                                                                tmp%15#0
        byte 0x151f7c75                                                                         tmp%15#0,0x151f7c75
        l-load tmp%15#0 1                                                                       0x151f7c75,tmp%15#0
        concat                                                                                  tmp%16#0
        log
        int 1                                                                                   tmp%0#1
        x-store tmp%0#1                                                                         (ùïè) tmp%0#1 |
        b main_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@20 (ùïè) tmp%0#1 | 

    main_nested_struct_arg_route@8:
        // mutable_native_types/abi_call.py:61
        // @arc4.abimethod()
        txn OnCompletion                                                                        tmp%17#0
        !                                                                                       tmp%18#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                       tmp%19#0
        assert // can only call when not creating
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                  arg#0
        // mutable_native_types/abi_call.py:63
        // self.nested_struct.value = arg
        byte "nested_struct"                                                                    arg#0,"nested_struct"
        l-load arg#0 1                                                                          "nested_struct",arg#0
        app_global_put
        // mutable_native_types/abi_call.py:61
        // @arc4.abimethod()
        int 1                                                                                   tmp%0#1
        x-store tmp%0#1                                                                         (ùïè) tmp%0#1 |
        b main_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@20 (ùïè) tmp%0#1 | 

    main_nested_struct_ret_route@9:
        // mutable_native_types/abi_call.py:65
        // @arc4.abimethod()
        txn OnCompletion                                                                        tmp%21#0
        !                                                                                       tmp%22#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                       tmp%23#0
        assert // can only call when not creating
        callsub nested_struct_ret                                                               tmp%25#0
        byte 0x151f7c75                                                                         tmp%25#0,0x151f7c75
        l-load tmp%25#0 1                                                                       0x151f7c75,tmp%25#0
        concat                                                                                  tmp%26#0
        log
        int 1                                                                                   tmp%0#1
        x-store tmp%0#1                                                                         (ùïè) tmp%0#1 |
        b main_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@20 (ùïè) tmp%0#1 | 

    main_dynamic_struct_arg_route@10:
        // mutable_native_types/abi_call.py:69
        // @arc4.abimethod()
        txn OnCompletion                                                                        tmp%27#0
        !                                                                                       tmp%28#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                       tmp%29#0
        assert // can only call when not creating
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                  arg#0
        // mutable_native_types/abi_call.py:71
        // self.dynamic_struct.value = arg.copy()
        byte "dynamic_struct"                                                                   arg#0,"dynamic_struct"
        l-load arg#0 1                                                                          "dynamic_struct",arg#0
        app_global_put
        // mutable_native_types/abi_call.py:69
        // @arc4.abimethod()
        int 1                                                                                   tmp%0#1
        x-store tmp%0#1                                                                         (ùïè) tmp%0#1 |
        b main_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@20 (ùïè) tmp%0#1 | 

    main_dynamic_struct_ret_route@11:
        // mutable_native_types/abi_call.py:73
        // @arc4.abimethod()
        txn OnCompletion                                                                        tmp%31#0
        !                                                                                       tmp%32#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                       tmp%33#0
        assert // can only call when not creating
        callsub dynamic_struct_ret                                                              tmp%35#0
        byte 0x151f7c75                                                                         tmp%35#0,0x151f7c75
        l-load tmp%35#0 1                                                                       0x151f7c75,tmp%35#0
        concat                                                                                  tmp%36#0
        log
        int 1                                                                                   tmp%0#1
        x-store tmp%0#1                                                                         (ùïè) tmp%0#1 |
        b main_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@20 (ùïè) tmp%0#1 | 

    main_fixed_arr_arg_route@12:
        // mutable_native_types/abi_call.py:77
        // @arc4.abimethod()
        txn OnCompletion                                                                        tmp%37#0
        !                                                                                       tmp%38#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                       tmp%39#0
        assert // can only call when not creating
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                  arg#0
        // mutable_native_types/abi_call.py:79
        // self.fixed_arr.value = arg.copy()
        byte "fixed_arr"                                                                        arg#0,"fixed_arr"
        l-load arg#0 1                                                                          "fixed_arr",arg#0
        app_global_put
        // mutable_native_types/abi_call.py:77
        // @arc4.abimethod()
        int 1                                                                                   tmp%0#1
        x-store tmp%0#1                                                                         (ùïè) tmp%0#1 |
        b main_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@20 (ùïè) tmp%0#1 | 

    main_fixed_arr_ret_route@13:
        // mutable_native_types/abi_call.py:81
        // @arc4.abimethod()
        txn OnCompletion                                                                        tmp%41#0
        !                                                                                       tmp%42#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                       tmp%43#0
        assert // can only call when not creating
        callsub fixed_arr_ret                                                                   tmp%45#0
        byte 0x151f7c75                                                                         tmp%45#0,0x151f7c75
        l-load tmp%45#0 1                                                                       0x151f7c75,tmp%45#0
        concat                                                                                  tmp%46#0
        log
        int 1                                                                                   tmp%0#1
        x-store tmp%0#1                                                                         (ùïè) tmp%0#1 |
        b main_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@20 (ùïè) tmp%0#1 | 

    main_native_arr_arg_route@14:
        // mutable_native_types/abi_call.py:85
        // @arc4.abimethod()
        txn OnCompletion                                                                        tmp%47#0
        !                                                                                       tmp%48#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                       tmp%49#0
        assert // can only call when not creating
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                  arg#0
        // mutable_native_types/abi_call.py:87
        // self.native_arr.value = arg.copy()
        byte "native_arr"                                                                       arg#0,"native_arr"
        l-load arg#0 1                                                                          "native_arr",arg#0
        app_global_put
        // mutable_native_types/abi_call.py:85
        // @arc4.abimethod()
        int 1                                                                                   tmp%0#1
        x-store tmp%0#1                                                                         (ùïè) tmp%0#1 |
        b main_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@20 (ùïè) tmp%0#1 | 

    main_native_arr_ret_route@15:
        // mutable_native_types/abi_call.py:89
        // @arc4.abimethod()
        txn OnCompletion                                                                        tmp%51#0
        !                                                                                       tmp%52#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                       tmp%53#0
        assert // can only call when not creating
        callsub native_arr_ret                                                                  tmp%55#0
        byte 0x151f7c75                                                                         tmp%55#0,0x151f7c75
        l-load tmp%55#0 1                                                                       0x151f7c75,tmp%55#0
        concat                                                                                  tmp%56#0
        log
        int 1                                                                                   tmp%0#1
        x-store tmp%0#1                                                                         (ùïè) tmp%0#1 |
        b main_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@20 (ùïè) tmp%0#1 | 

    main_log_it_route@16:
        // mutable_native_types/abi_call.py:93
        // @arc4.abimethod()
        txn OnCompletion                                                                        tmp%57#0
        !                                                                                       tmp%58#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                       tmp%59#0
        assert // can only call when not creating
        callsub log_it
        int 1                                                                                   tmp%0#1
        x-store tmp%0#1                                                                         (ùïè) tmp%0#1 |
        b main_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@20 (ùïè) tmp%0#1 | 

    main_bare_routing@17:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        txn OnCompletion                                                                        tmp%61#0
        bz main___algopy_default_create@18 ; b main_after_if_else@19

    main___algopy_default_create@18:
        txn ApplicationID                                                                       tmp%62#0
        !                                                                                       tmp%63#0
        assert // can only call when creating
        int 1                                                                                   tmp%0#1
        x-store tmp%0#1                                                                         (ùïè) tmp%0#1 |
        b main_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@20 (ùïè) tmp%0#1 | 

    main_after_if_else@19:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        int 0                                                                                   tmp%0#1
        x-store tmp%0#1                                                                         (ùïè) tmp%0#1 |
        b main_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@20 (ùïè) tmp%0#1 | 

    main_after_inlined_test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__@20: (ùïè) tmp%0#1 |
        x-load tmp%0#1                                                                          tmp%0#1
        return


// test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret() -> bytes:
subroutine fixed_struct_ret:
    fixed_struct_ret_block@0:
        // mutable_native_types/abi_call.py:59
        // return self.fixed_struct.value
        int 0                                                                                   0
        byte "fixed_struct"                                                                     0,"fixed_struct"
        app_global_get_ex                                                                       maybe_value%0#0,maybe_exists%0#0
        assert // check self.fixed_struct exists                                                maybe_value%0#0
        l-load maybe_value%0#0 0                                                                maybe_value%0#0
        retsub                                                                                  maybe_value%0#0


// test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret() -> bytes:
subroutine nested_struct_ret:
    nested_struct_ret_block@0:
        // mutable_native_types/abi_call.py:67
        // return self.nested_struct.value
        int 0                                                                                   0
        byte "nested_struct"                                                                    0,"nested_struct"
        app_global_get_ex                                                                       maybe_value%0#0,maybe_exists%0#0
        assert // check self.nested_struct exists                                               maybe_value%0#0
        l-load maybe_value%0#0 0                                                                maybe_value%0#0
        retsub                                                                                  maybe_value%0#0


// test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret() -> bytes:
subroutine dynamic_struct_ret:
    dynamic_struct_ret_block@0:
        // mutable_native_types/abi_call.py:75
        // return self.dynamic_struct.value
        int 0                                                                                   0
        byte "dynamic_struct"                                                                   0,"dynamic_struct"
        app_global_get_ex                                                                       maybe_value%0#0,maybe_exists%0#0
        assert // check self.dynamic_struct exists                                              maybe_value%0#0
        l-load maybe_value%0#0 0                                                                maybe_value%0#0
        retsub                                                                                  maybe_value%0#0


// test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret() -> bytes:
subroutine fixed_arr_ret:
    fixed_arr_ret_block@0:
        // mutable_native_types/abi_call.py:83
        // return self.fixed_arr.value
        int 0                                                                                   0
        byte "fixed_arr"                                                                        0,"fixed_arr"
        app_global_get_ex                                                                       maybe_value%0#0,maybe_exists%0#0
        assert // check self.fixed_arr exists                                                   maybe_value%0#0
        l-load maybe_value%0#0 0                                                                maybe_value%0#0
        retsub                                                                                  maybe_value%0#0


// test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret() -> bytes:
subroutine native_arr_ret:
    native_arr_ret_block@0:
        // mutable_native_types/abi_call.py:91
        // return self.native_arr.value
        int 0                                                                                   0
        byte "native_arr"                                                                       0,"native_arr"
        app_global_get_ex                                                                       maybe_value%0#0,maybe_exists%0#0
        assert // check self.native_arr exists                                                  maybe_value%0#0
        l-load maybe_value%0#0 0                                                                maybe_value%0#0
        retsub                                                                                  maybe_value%0#0


// test_cases.mutable_native_types.abi_call.CallMe.log_it() -> void:
subroutine log_it:
    log_it_block@0:
        // mutable_native_types/abi_call.py:95
        // log(self.fixed_struct.value)
        int 0                                                                                   0
        byte "fixed_struct"                                                                     0,"fixed_struct"
        app_global_get_ex                                                                       maybe_value%0#0,maybe_exists%0#0
        assert // check self.fixed_struct exists                                                maybe_value%0#0
        l-load maybe_value%0#0 0                                                                maybe_value%0#0
        log
        // mutable_native_types/abi_call.py:96
        // log(self.nested_struct.value)
        int 0                                                                                   0
        byte "nested_struct"                                                                    0,"nested_struct"
        app_global_get_ex                                                                       maybe_value%1#0,maybe_exists%1#0
        assert // check self.nested_struct exists                                               maybe_value%1#0
        l-load maybe_value%1#0 0                                                                maybe_value%1#0
        log
        // mutable_native_types/abi_call.py:97
        // log(self.dynamic_struct.value)
        int 0                                                                                   0
        byte "dynamic_struct"                                                                   0,"dynamic_struct"
        app_global_get_ex                                                                       maybe_value%2#0,maybe_exists%2#0
        assert // check self.dynamic_struct exists                                              maybe_value%2#0
        l-load maybe_value%2#0 0                                                                maybe_value%2#0
        log
        // mutable_native_types/abi_call.py:98
        // log(self.fixed_arr.value)
        int 0                                                                                   0
        byte "fixed_arr"                                                                        0,"fixed_arr"
        app_global_get_ex                                                                       maybe_value%3#0,maybe_exists%3#0
        assert // check self.fixed_arr exists                                                   maybe_value%3#0
        l-load maybe_value%3#0 0                                                                maybe_value%3#0
        log
        // mutable_native_types/abi_call.py:99
        // log(self.native_arr.value)
        int 0                                                                                   0
        byte "native_arr"                                                                       0,"native_arr"
        app_global_get_ex                                                                       maybe_value%4#0,maybe_exists%4#0
        assert // check self.native_arr exists                                                  maybe_value%4#0
        l-load maybe_value%4#0 0                                                                maybe_value%4#0
        log
        retsub


