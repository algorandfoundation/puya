main test_cases.mutable_native_types.abi_call.CallMe.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.mutable_native_types.abi_call.CallMe.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__() -> bool:
    block@0: // L41
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@1, 1u => block@15, 2u => block@18, 3u => block@19, 4u => block@20, 5u => block@21, 6u => block@22, 7u => block@23, 8u => block@24, 9u => block@25, 10u => block@26, 11u => block@30, * => block@31}
    block@1: // switch_case_0_L41
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "fixed_struct_arg((uint64,uint64))void" => block@2, method "fixed_struct_ret()(uint64,uint64)" => block@3, method "nested_struct_arg(((uint64,uint64),uint64))void" => block@4, method "nested_struct_ret()((uint64,uint64),uint64)" => block@5, method "dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void" => block@6, method "dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])" => block@7, method "fixed_arr_arg((uint64,uint64)[3])void" => block@8, method "fixed_arr_ret()(uint64,uint64)[3]" => block@9, method "native_arr_arg((uint64,uint64)[])void" => block@10, method "native_arr_ret()(uint64,uint64)[]" => block@11, method "log_it()void" => block@12, * => block@13}
    block@2: // fixed_struct_arg_route_L53
        test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg[routing]()
        goto block@14
    block@3: // fixed_struct_ret_route_L57
        test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret[routing]()
        goto block@14
    block@4: // nested_struct_arg_route_L61
        test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg[routing]()
        goto block@14
    block@5: // nested_struct_ret_route_L65
        test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret[routing]()
        goto block@14
    block@6: // dynamic_struct_arg_route_L69
        test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg[routing]()
        goto block@14
    block@7: // dynamic_struct_ret_route_L73
        test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret[routing]()
        goto block@14
    block@8: // fixed_arr_arg_route_L77
        test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg[routing]()
        goto block@14
    block@9: // fixed_arr_ret_route_L81
        test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret[routing]()
        goto block@14
    block@10: // native_arr_arg_route_L85
        test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg[routing]()
        goto block@14
    block@11: // native_arr_ret_route_L89
        test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret[routing]()
        goto block@14
    block@12: // log_it_route_L93
        test_cases.mutable_native_types.abi_call.CallMe.log_it[routing]()
        goto block@14
    block@13: // switch_case_default_L41
        goto block@14
    block@14: // switch_case_next_L41
        fail // this contract does not implement the given ABI method for call NoOp
    block@15: // switch_case_1_L41
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@16 : block@17
    block@16: // __algopy_default_create_L1
        test_cases.mutable_native_types.abi_call.CallMe.__algopy_default_create()
        exit 1u
    block@17: // else_body_L41
        fail // this contract does not implement the given ABI method for create NoOp
    block@18: // switch_case_2_L41
        goto block@31
    block@19: // switch_case_3_L41
        goto block@31
    block@20: // switch_case_4_L41
        goto block@31
    block@21: // switch_case_5_L41
        goto block@31
    block@22: // switch_case_6_L41
        goto block@31
    block@23: // switch_case_7_L41
        goto block@31
    block@24: // switch_case_8_L41
        goto block@31
    block@25: // switch_case_9_L41
        goto block@31
    block@26: // switch_case_10_L41
        let tmp%8#0: bytes = (txna ApplicationArgs 0)
        switch tmp%8#0 {method "delete()void" => block@27, * => block@28}
    block@27: // delete_route_L49
        test_cases.mutable_native_types.abi_call.CallMe.delete[routing]()
        goto block@29
    block@28: // switch_case_default_L41
        goto block@29
    block@29: // switch_case_next_L41
        fail // this contract does not implement the given ABI method for call DeleteApplication
    block@30: // switch_case_11_L41
        goto block@31
    block@31: // switch_case_default_L41
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.mutable_native_types.abi_call.CallMe.delete[routing]() -> void:
    block@0: // L49
        test_cases.mutable_native_types.abi_call.CallMe.delete()
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg[routing]() -> void:
    block@0: // L53
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg(reinterpret_Encoded(uint64,uint64)%0#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret[routing]() -> void:
    block@0: // L57
        let tmp%0#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg[routing]() -> void:
    block@0: // L61
        let reinterpret_Encoded((uint64,uint64),uint64)%0#0: Encoded((uint64,uint64),uint64) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg(reinterpret_Encoded((uint64,uint64),uint64)%0#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret[routing]() -> void:
    block@0: // L65
        let tmp%0#0: Encoded((uint64,uint64),uint64) = test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg[routing]() -> void:
    block@0: // L69
        let reinterpret_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%0#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg(reinterpret_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))%0#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret[routing]() -> void:
    block@0: // L73
        let tmp%0#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])) = test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg[routing]() -> void:
    block@0: // L77
        let reinterpret_Encoded((uint64,uint64)[3])%0#0: Encoded((uint64,uint64)[3]) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg(reinterpret_Encoded((uint64,uint64)[3])%0#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret[routing]() -> void:
    block@0: // L81
        let tmp%0#0: Encoded((uint64,uint64)[3]) = test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg[routing]() -> void:
    block@0: // L85
        let reinterpret_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg(reinterpret_Encoded(len+(uint64,uint64)[])%0#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret[routing]() -> void:
    block@0: // L89
        let tmp%0#0: Encoded(len+(uint64,uint64)[]) = test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.log_it[routing]() -> void:
    block@0: // L93
        test_cases.mutable_native_types.abi_call.CallMe.log_it()
        exit 1u

subroutine test_cases.mutable_native_types.abi_call.CallMe.__init__() -> void:
    block@0: // L42
        return 

subroutine test_cases.mutable_native_types.abi_call.CallMe.delete() -> void:
    block@0: // L49
        return 

subroutine test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg(arg: Encoded(uint64,uint64)) -> void:
    block@0: // L53
        (app_global_put "fixed_struct" arg#0)
        return 

subroutine test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret() -> Encoded(uint64,uint64):
    block@0: // L57
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "fixed_struct")
        (assert maybe_exists%0#0) // check self.fixed_struct exists
        return maybe_value%0#0

subroutine test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg(arg: Encoded((uint64,uint64),uint64)) -> void:
    block@0: // L61
        (app_global_put "nested_struct" arg#0)
        return 

subroutine test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret() -> Encoded((uint64,uint64),uint64):
    block@0: // L65
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested_struct")
        (assert maybe_exists%0#0) // check self.nested_struct exists
        return maybe_value%0#0

subroutine test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg(arg: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))) -> void:
    block@0: // L69
        (app_global_put "dynamic_struct" arg#0)
        return 

subroutine test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret() -> Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[])):
    block@0: // L73
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "dynamic_struct")
        (assert maybe_exists%0#0) // check self.dynamic_struct exists
        return maybe_value%0#0

subroutine test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg(arg: Encoded((uint64,uint64)[3])) -> void:
    block@0: // L77
        (app_global_put "fixed_arr" arg#0)
        return 

subroutine test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret() -> Encoded((uint64,uint64)[3]):
    block@0: // L81
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "fixed_arr")
        (assert maybe_exists%0#0) // check self.fixed_arr exists
        return maybe_value%0#0

subroutine test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg(arg: Encoded(len+(uint64,uint64)[])) -> void:
    block@0: // L85
        (app_global_put "native_arr" arg#0)
        return 

subroutine test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret() -> Encoded(len+(uint64,uint64)[]):
    block@0: // L89
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "native_arr")
        (assert maybe_exists%0#0) // check self.native_arr exists
        return maybe_value%0#0

subroutine test_cases.mutable_native_types.abi_call.CallMe.log_it() -> void:
    block@0: // L93
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "fixed_struct")
        (assert maybe_exists%0#0) // check self.fixed_struct exists
        (log maybe_value%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "nested_struct")
        (assert maybe_exists%1#0) // check self.nested_struct exists
        (log maybe_value%1#0)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "dynamic_struct")
        (assert maybe_exists%2#0) // check self.dynamic_struct exists
        (log maybe_value%2#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_global_get_ex 0u "fixed_arr")
        (assert maybe_exists%3#0) // check self.fixed_arr exists
        (log maybe_value%3#0)
        let (maybe_value%4#0: bytes, maybe_exists%4#0: bool) = (app_global_get_ex 0u "native_arr")
        (assert maybe_exists%4#0) // check self.native_arr exists
        (log maybe_value%4#0)
        return 

subroutine test_cases.mutable_native_types.abi_call.CallMe.__algopy_default_create() -> void:
    block@0: // L1
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        let tmp%0#0: bool = test_cases.mutable_native_types.abi_call.CallMe.__puya_arc4_router__()
        return tmp%0#0