// Op                                                                                  Stack (out)
// test_cases.mutable_native_types.abi_call.CallMe.__algopy_entrypoint_with_init() -> uint64:
subroutine main:
    main_block@0:
        // mutable_native_types/abi_call.py:49
        // @arc4.abimethod(allow_actions=["DeleteApplication"])
        int 1                                                                          1
        f-store lifted%return#0                                                        (𝕗) lifted%return#0 |
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        txn NumAppArgs                                                                 (𝕗) lifted%return#0 | tmp%0#2
        bz main_bare_routing@20 ; b main_abi_routing@4                                 (𝕗) lifted%return#0 |

    main_abi_routing@4:                                                                (𝕗) lifted%return#0 |
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        txna ApplicationArgs 0                                                         (𝕗) lifted%return#0 | tmp%2#0
        method delete()void                                                            (𝕗) lifted%return#0 | tmp%2#0,Method(delete()void)
        l-load tmp%2#0 1                                                               (𝕗) lifted%return#0 | Method(delete()void),tmp%2#0
        match main_delete_route@5 ; b main_route_NoOp@6                                (𝕗) lifted%return#0 |

    main_delete_route@5:                                                               (𝕗) lifted%return#0 |
        // mutable_native_types/abi_call.py:49
        // @arc4.abimethod(allow_actions=["DeleteApplication"])
        txn OnCompletion                                                               (𝕗) lifted%return#0 | tmp%3#0
        int DeleteApplication                                                          (𝕗) lifted%return#0 | tmp%3#0,DeleteApplication
        ==                                                                             (𝕗) lifted%return#0 | tmp%4#0
        assert // OnCompletion is not DeleteApplication                                (𝕗) lifted%return#0 |
        txn ApplicationID                                                              (𝕗) lifted%return#0 | tmp%5#0
        assert // can only call when not creating                                      (𝕗) lifted%return#0 |
        f-load lifted%return#0                                                         (𝕗) lifted%return#0 | lifted%return#0
        return                                                                         (𝕗) lifted%return#0 |

    main_route_NoOp@6:                                                                 (𝕗) lifted%return#0 |
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        txn OnCompletion                                                               (𝕗) lifted%return#0 | tmp%7#0
        !                                                                              (𝕗) lifted%return#0 | tmp%8#0
        assert // OnCompletion is not NoOp                                             (𝕗) lifted%return#0 |
        txn ApplicationID                                                              (𝕗) lifted%return#0 | tmp%10#0
        assert                                                                         (𝕗) lifted%return#0 |
        txna ApplicationArgs 0                                                         (𝕗) lifted%return#0 | tmp%11#0
        method fixed_struct_arg((uint64,uint64))void                                   (𝕗) lifted%return#0 | tmp%11#0,Method(fixed_struct_arg((uint64,uint64))void)
        method fixed_struct_ret()(uint64,uint64)                                       (𝕗) lifted%return#0 | tmp%11#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64))
        method nested_struct_arg(((uint64,uint64),uint64))void                         (𝕗) lifted%return#0 | tmp%11#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void)
        method nested_struct_ret()((uint64,uint64),uint64)                             (𝕗) lifted%return#0 | tmp%11#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64))
        method dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void (𝕗) lifted%return#0 | tmp%11#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)
        method dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])     (𝕗) lifted%return#0 | tmp%11#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))
        method fixed_arr_arg((uint64,uint64)[3])void                                   (𝕗) lifted%return#0 | tmp%11#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])),Method(fixed_arr_arg((uint64,uint64)[3])void)
        method fixed_arr_ret()(uint64,uint64)[3]                                       (𝕗) lifted%return#0 | tmp%11#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])),Method(fixed_arr_arg((uint64,uint64)[3])void),Method(fixed_arr_ret()(uint64,uint64)[3])
        method native_arr_arg((uint64,uint64)[])void                                   (𝕗) lifted%return#0 | tmp%11#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])),Method(fixed_arr_arg((uint64,uint64)[3])void),Method(fixed_arr_ret()(uint64,uint64)[3]),Method(native_arr_arg((uint64,uint64)[])void)
        method native_arr_ret()(uint64,uint64)[]                                       (𝕗) lifted%return#0 | tmp%11#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])),Method(fixed_arr_arg((uint64,uint64)[3])void),Method(fixed_arr_ret()(uint64,uint64)[3]),Method(native_arr_arg((uint64,uint64)[])void),Method(native_arr_ret()(uint64,uint64)[])
        method log_it()void                                                            (𝕗) lifted%return#0 | tmp%11#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])),Method(fixed_arr_arg((uint64,uint64)[3])void),Method(fixed_arr_ret()(uint64,uint64)[3]),Method(native_arr_arg((uint64,uint64)[])void),Method(native_arr_ret()(uint64,uint64)[]),Method(log_it()void)
        l-load tmp%11#0 11                                                             (𝕗) lifted%return#0 | Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])),Method(fixed_arr_arg((uint64,uint64)[3])void),Method(fixed_arr_ret()(uint64,uint64)[3]),Method(native_arr_arg((uint64,uint64)[])void),Method(native_arr_ret()(uint64,uint64)[]),Method(log_it()void),tmp%11#0
        match main_fixed_struct_arg_route@8 main_fixed_struct_ret_route@9 main_nested_struct_arg_route@10 main_nested_struct_ret_route@11 main_dynamic_struct_arg_route@12 main_dynamic_struct_ret_route@13 main_fixed_arr_arg_route@14 main_fixed_arr_ret_route@15 main_native_arr_arg_route@16 main_native_arr_ret_route@17 main_log_it_route@18 ; b main_after_if_else@22 (𝕗) lifted%return#0 | 

    main_fixed_struct_arg_route@8:                                                     (𝕗) lifted%return#0 |
        // mutable_native_types/abi_call.py:53
        // @arc4.abimethod()
        callsub fixed_struct_arg                                                       (𝕗) lifted%return#0 |
        b main_after_if_else@22                                                        (𝕗) lifted%return#0 |

    main_fixed_struct_ret_route@9:                                                     (𝕗) lifted%return#0 |
        // mutable_native_types/abi_call.py:57
        // @arc4.abimethod()
        callsub fixed_struct_ret                                                       (𝕗) lifted%return#0 |
        b main_after_if_else@22                                                        (𝕗) lifted%return#0 |

    main_nested_struct_arg_route@10:                                                   (𝕗) lifted%return#0 |
        // mutable_native_types/abi_call.py:61
        // @arc4.abimethod()
        callsub nested_struct_arg                                                      (𝕗) lifted%return#0 |
        b main_after_if_else@22                                                        (𝕗) lifted%return#0 |

    main_nested_struct_ret_route@11:                                                   (𝕗) lifted%return#0 |
        // mutable_native_types/abi_call.py:65
        // @arc4.abimethod()
        callsub nested_struct_ret                                                      (𝕗) lifted%return#0 |
        b main_after_if_else@22                                                        (𝕗) lifted%return#0 |

    main_dynamic_struct_arg_route@12:                                                  (𝕗) lifted%return#0 |
        // mutable_native_types/abi_call.py:69
        // @arc4.abimethod()
        callsub dynamic_struct_arg                                                     (𝕗) lifted%return#0 |
        b main_after_if_else@22                                                        (𝕗) lifted%return#0 |

    main_dynamic_struct_ret_route@13:                                                  (𝕗) lifted%return#0 |
        // mutable_native_types/abi_call.py:73
        // @arc4.abimethod()
        callsub dynamic_struct_ret                                                     (𝕗) lifted%return#0 |
        b main_after_if_else@22                                                        (𝕗) lifted%return#0 |

    main_fixed_arr_arg_route@14:                                                       (𝕗) lifted%return#0 |
        // mutable_native_types/abi_call.py:77
        // @arc4.abimethod()
        callsub fixed_arr_arg                                                          (𝕗) lifted%return#0 |
        b main_after_if_else@22                                                        (𝕗) lifted%return#0 |

    main_fixed_arr_ret_route@15:                                                       (𝕗) lifted%return#0 |
        // mutable_native_types/abi_call.py:81
        // @arc4.abimethod()
        callsub fixed_arr_ret                                                          (𝕗) lifted%return#0 |
        b main_after_if_else@22                                                        (𝕗) lifted%return#0 |

    main_native_arr_arg_route@16:                                                      (𝕗) lifted%return#0 |
        // mutable_native_types/abi_call.py:85
        // @arc4.abimethod()
        callsub native_arr_arg                                                         (𝕗) lifted%return#0 |
        b main_after_if_else@22                                                        (𝕗) lifted%return#0 |

    main_native_arr_ret_route@17:                                                      (𝕗) lifted%return#0 |
        // mutable_native_types/abi_call.py:89
        // @arc4.abimethod()
        callsub native_arr_ret                                                         (𝕗) lifted%return#0 |
        b main_after_if_else@22                                                        (𝕗) lifted%return#0 |

    main_log_it_route@18:                                                              (𝕗) lifted%return#0 |
        // mutable_native_types/abi_call.py:93
        // @arc4.abimethod()
        callsub log_it                                                                 (𝕗) lifted%return#0 |
        b main_after_if_else@22                                                        (𝕗) lifted%return#0 |

    main_bare_routing@20:                                                              (𝕗) lifted%return#0 |
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        txn OnCompletion                                                               (𝕗) lifted%return#0 | tmp%13#0
        !                                                                              (𝕗) lifted%return#0 | not%tmp%13#0
        assert                                                                         (𝕗) lifted%return#0 |
        txn ApplicationID                                                              (𝕗) lifted%return#0 | tmp%14#0
        !                                                                              (𝕗) lifted%return#0 | tmp%15#0
        assert // can only call when creating                                          (𝕗) lifted%return#0 |
        f-load lifted%return#0                                                         (𝕗) lifted%return#0 | lifted%return#0
        return                                                                         (𝕗) lifted%return#0 |

    main_after_if_else@22:                                                             (𝕗) lifted%return#0 |
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        err                                                                            (𝕗) lifted%return#0 |


// test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg[routing]() -> void:
subroutine fixed_struct_arg:
    fixed_struct_arg_block@0:
        // mutable_native_types/abi_call.py:53
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                         arg#0
        // mutable_native_types/abi_call.py:55
        // self.fixed_struct.value = arg
        byte "fixed_struct"                                                            arg#0,"fixed_struct"
        l-load arg#0 1                                                                 "fixed_struct",arg#0
        app_global_put
        // mutable_native_types/abi_call.py:53
        // @arc4.abimethod()
        int 1                                                                          1
        return


// test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret[routing]() -> void:
subroutine fixed_struct_ret:
    fixed_struct_ret_block@0:
        // mutable_native_types/abi_call.py:59
        // return self.fixed_struct.value
        int 0                                                                          0
        byte "fixed_struct"                                                            0,"fixed_struct"
        app_global_get_ex                                                              maybe_value%0#0,maybe_exists%0#0
        assert // check self.fixed_struct exists                                       maybe_value%0#0
        // mutable_native_types/abi_call.py:57
        // @arc4.abimethod()
        byte 0x151f7c75                                                                maybe_value%0#0,0x151f7c75
        l-load maybe_value%0#0 1                                                       0x151f7c75,maybe_value%0#0
        concat                                                                         tmp%1#0
        log
        int 1                                                                          1
        return


// test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg[routing]() -> void:
subroutine nested_struct_arg:
    nested_struct_arg_block@0:
        // mutable_native_types/abi_call.py:61
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                         arg#0
        // mutable_native_types/abi_call.py:63
        // self.nested_struct.value = arg
        byte "nested_struct"                                                           arg#0,"nested_struct"
        l-load arg#0 1                                                                 "nested_struct",arg#0
        app_global_put
        // mutable_native_types/abi_call.py:61
        // @arc4.abimethod()
        int 1                                                                          1
        return


// test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret[routing]() -> void:
subroutine nested_struct_ret:
    nested_struct_ret_block@0:
        // mutable_native_types/abi_call.py:67
        // return self.nested_struct.value
        int 0                                                                          0
        byte "nested_struct"                                                           0,"nested_struct"
        app_global_get_ex                                                              maybe_value%0#0,maybe_exists%0#0
        assert // check self.nested_struct exists                                      maybe_value%0#0
        // mutable_native_types/abi_call.py:65
        // @arc4.abimethod()
        byte 0x151f7c75                                                                maybe_value%0#0,0x151f7c75
        l-load maybe_value%0#0 1                                                       0x151f7c75,maybe_value%0#0
        concat                                                                         tmp%1#0
        log
        int 1                                                                          1
        return


// test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg[routing]() -> void:
subroutine dynamic_struct_arg:
    dynamic_struct_arg_block@0:
        // mutable_native_types/abi_call.py:69
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                         arg#0
        // mutable_native_types/abi_call.py:71
        // self.dynamic_struct.value = arg.copy()
        byte "dynamic_struct"                                                          arg#0,"dynamic_struct"
        l-load arg#0 1                                                                 "dynamic_struct",arg#0
        app_global_put
        // mutable_native_types/abi_call.py:69
        // @arc4.abimethod()
        int 1                                                                          1
        return


// test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret[routing]() -> void:
subroutine dynamic_struct_ret:
    dynamic_struct_ret_block@0:
        // mutable_native_types/abi_call.py:75
        // return self.dynamic_struct.value
        int 0                                                                          0
        byte "dynamic_struct"                                                          0,"dynamic_struct"
        app_global_get_ex                                                              maybe_value%0#0,maybe_exists%0#0
        assert // check self.dynamic_struct exists                                     maybe_value%0#0
        // mutable_native_types/abi_call.py:73
        // @arc4.abimethod()
        byte 0x151f7c75                                                                maybe_value%0#0,0x151f7c75
        l-load maybe_value%0#0 1                                                       0x151f7c75,maybe_value%0#0
        concat                                                                         tmp%1#0
        log
        int 1                                                                          1
        return


// test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg[routing]() -> void:
subroutine fixed_arr_arg:
    fixed_arr_arg_block@0:
        // mutable_native_types/abi_call.py:77
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                         arg#0
        // mutable_native_types/abi_call.py:79
        // self.fixed_arr.value = arg.copy()
        byte "fixed_arr"                                                               arg#0,"fixed_arr"
        l-load arg#0 1                                                                 "fixed_arr",arg#0
        app_global_put
        // mutable_native_types/abi_call.py:77
        // @arc4.abimethod()
        int 1                                                                          1
        return


// test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret[routing]() -> void:
subroutine fixed_arr_ret:
    fixed_arr_ret_block@0:
        // mutable_native_types/abi_call.py:83
        // return self.fixed_arr.value
        int 0                                                                          0
        byte "fixed_arr"                                                               0,"fixed_arr"
        app_global_get_ex                                                              maybe_value%0#0,maybe_exists%0#0
        assert // check self.fixed_arr exists                                          maybe_value%0#0
        // mutable_native_types/abi_call.py:81
        // @arc4.abimethod()
        byte 0x151f7c75                                                                maybe_value%0#0,0x151f7c75
        l-load maybe_value%0#0 1                                                       0x151f7c75,maybe_value%0#0
        concat                                                                         tmp%1#0
        log
        int 1                                                                          1
        return


// test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg[routing]() -> void:
subroutine native_arr_arg:
    native_arr_arg_block@0:
        // mutable_native_types/abi_call.py:85
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                         arg#0
        // mutable_native_types/abi_call.py:87
        // self.native_arr.value = arg.copy()
        byte "native_arr"                                                              arg#0,"native_arr"
        l-load arg#0 1                                                                 "native_arr",arg#0
        app_global_put
        // mutable_native_types/abi_call.py:85
        // @arc4.abimethod()
        int 1                                                                          1
        return


// test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret[routing]() -> void:
subroutine native_arr_ret:
    native_arr_ret_block@0:
        // mutable_native_types/abi_call.py:91
        // return self.native_arr.value
        int 0                                                                          0
        byte "native_arr"                                                              0,"native_arr"
        app_global_get_ex                                                              maybe_value%0#0,maybe_exists%0#0
        assert // check self.native_arr exists                                         maybe_value%0#0
        // mutable_native_types/abi_call.py:89
        // @arc4.abimethod()
        byte 0x151f7c75                                                                maybe_value%0#0,0x151f7c75
        l-load maybe_value%0#0 1                                                       0x151f7c75,maybe_value%0#0
        concat                                                                         tmp%1#0
        log
        int 1                                                                          1
        return


// test_cases.mutable_native_types.abi_call.CallMe.log_it[routing]() -> void:
subroutine log_it:
    log_it_block@0:
        // mutable_native_types/abi_call.py:95
        // log(self.fixed_struct.value)
        int 0                                                                          0
        byte "fixed_struct"                                                            0,"fixed_struct"
        app_global_get_ex                                                              maybe_value%0#0,maybe_exists%0#0
        assert // check self.fixed_struct exists                                       maybe_value%0#0
        l-load maybe_value%0#0 0                                                       maybe_value%0#0
        log
        // mutable_native_types/abi_call.py:96
        // log(self.nested_struct.value)
        int 0                                                                          0
        byte "nested_struct"                                                           0,"nested_struct"
        app_global_get_ex                                                              maybe_value%1#0,maybe_exists%1#0
        assert // check self.nested_struct exists                                      maybe_value%1#0
        l-load maybe_value%1#0 0                                                       maybe_value%1#0
        log
        // mutable_native_types/abi_call.py:97
        // log(self.dynamic_struct.value)
        int 0                                                                          0
        byte "dynamic_struct"                                                          0,"dynamic_struct"
        app_global_get_ex                                                              maybe_value%2#0,maybe_exists%2#0
        assert // check self.dynamic_struct exists                                     maybe_value%2#0
        l-load maybe_value%2#0 0                                                       maybe_value%2#0
        log
        // mutable_native_types/abi_call.py:98
        // log(self.fixed_arr.value)
        int 0                                                                          0
        byte "fixed_arr"                                                               0,"fixed_arr"
        app_global_get_ex                                                              maybe_value%3#0,maybe_exists%3#0
        assert // check self.fixed_arr exists                                          maybe_value%3#0
        l-load maybe_value%3#0 0                                                       maybe_value%3#0
        log
        // mutable_native_types/abi_call.py:99
        // log(self.native_arr.value)
        int 0                                                                          0
        byte "native_arr"                                                              0,"native_arr"
        app_global_get_ex                                                              maybe_value%4#0,maybe_exists%4#0
        assert // check self.native_arr exists                                         maybe_value%4#0
        l-load maybe_value%4#0 0                                                       maybe_value%4#0
        log
        // mutable_native_types/abi_call.py:93
        // @arc4.abimethod()
        int 1                                                                          1
        return


