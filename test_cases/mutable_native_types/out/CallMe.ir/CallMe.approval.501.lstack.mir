// Op                                                                                   Stack (out)
// test_cases.mutable_native_types.abi_call.CallMe.__algopy_entrypoint_with_init() -> uint64:
subroutine main:
    block@0:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        txn ApplicationID                                                               tmp%0#2
        l-load tmp%0#2 0                                                                tmp%0#2
        !                                                                               tmp%1#0
        txn OnCompletion                                                                tmp%1#0,tmp%2#0
        l-load tmp%2#0 0                                                                tmp%1#0,tmp%2#0
        int 1                                                                           tmp%1#0,tmp%2#0,1
        shl                                                                             tmp%1#0,tmp%3#0
        l-load tmp%1#0 1                                                                tmp%3#0,tmp%1#0
        l-load tmp%3#0 1                                                                tmp%1#0,tmp%3#0
        +                                                                               tmp%4#0
        l-load tmp%4#0 0                                                                tmp%4#0
        switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED call_DeleteApplication *NOT_IMPLEMENTED ; b *NOT_IMPLEMENTED 

    call_NoOp:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        txna ApplicationArgs 0                                                          tmp%5#0
        method fixed_struct_arg((uint64,uint64))void                                    tmp%5#0,Method(fixed_struct_arg((uint64,uint64))void)
        method fixed_struct_ret()(uint64,uint64)                                        tmp%5#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64))
        method nested_struct_arg(((uint64,uint64),uint64))void                          tmp%5#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void)
        method nested_struct_ret()((uint64,uint64),uint64)                              tmp%5#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64))
        method dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void  tmp%5#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void)
        method dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])      tmp%5#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[]))
        method fixed_arr_arg((uint64,uint64)[3])void                                    tmp%5#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])),Method(fixed_arr_arg((uint64,uint64)[3])void)
        method fixed_arr_ret()(uint64,uint64)[3]                                        tmp%5#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])),Method(fixed_arr_arg((uint64,uint64)[3])void),Method(fixed_arr_ret()(uint64,uint64)[3])
        method native_arr_arg((uint64,uint64)[])void                                    tmp%5#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])),Method(fixed_arr_arg((uint64,uint64)[3])void),Method(fixed_arr_ret()(uint64,uint64)[3]),Method(native_arr_arg((uint64,uint64)[])void)
        method native_arr_ret()(uint64,uint64)[]                                        tmp%5#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])),Method(fixed_arr_arg((uint64,uint64)[3])void),Method(fixed_arr_ret()(uint64,uint64)[3]),Method(native_arr_arg((uint64,uint64)[])void),Method(native_arr_ret()(uint64,uint64)[])
        method log_it()void                                                             tmp%5#0,Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])),Method(fixed_arr_arg((uint64,uint64)[3])void),Method(fixed_arr_ret()(uint64,uint64)[3]),Method(native_arr_arg((uint64,uint64)[])void),Method(native_arr_ret()(uint64,uint64)[]),Method(log_it()void)
        l-load tmp%5#0 11                                                               Method(fixed_struct_arg((uint64,uint64))void),Method(fixed_struct_ret()(uint64,uint64)),Method(nested_struct_arg(((uint64,uint64),uint64))void),Method(nested_struct_ret()((uint64,uint64),uint64)),Method(dynamic_struct_arg((uint64,uint64,byte[],string,(uint64,uint64)[]))void),Method(dynamic_struct_ret()(uint64,uint64,byte[],string,(uint64,uint64)[])),Method(fixed_arr_arg((uint64,uint64)[3])void),Method(fixed_arr_ret()(uint64,uint64)[3]),Method(native_arr_arg((uint64,uint64)[])void),Method(native_arr_ret()(uint64,uint64)[]),Method(log_it()void),tmp%5#0
        match fixed_struct_arg_route@5 fixed_struct_ret_route@6 nested_struct_arg_route@7 nested_struct_ret_route@8 dynamic_struct_arg_route@9 dynamic_struct_ret_route@10 fixed_arr_arg_route@11 fixed_arr_ret_route@12 native_arr_arg_route@13 native_arr_ret_route@14 log_it_route@15 ; b switch_case_next@16 

    fixed_struct_arg_route@5:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        callsub fixed_struct_arg
        b switch_case_next@16

    fixed_struct_ret_route@6:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        callsub fixed_struct_ret
        b switch_case_next@16

    nested_struct_arg_route@7:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        callsub nested_struct_arg
        b switch_case_next@16

    nested_struct_ret_route@8:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        callsub nested_struct_ret
        b switch_case_next@16

    dynamic_struct_arg_route@9:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        callsub dynamic_struct_arg
        b switch_case_next@16

    dynamic_struct_ret_route@10:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        callsub dynamic_struct_ret
        b switch_case_next@16

    fixed_arr_arg_route@11:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        callsub fixed_arr_arg
        b switch_case_next@16

    fixed_arr_ret_route@12:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        callsub fixed_arr_ret
        b switch_case_next@16

    native_arr_arg_route@13:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        callsub native_arr_arg
        b switch_case_next@16

    native_arr_ret_route@14:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        callsub native_arr_ret
        b switch_case_next@16

    log_it_route@15:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        callsub log_it
        b switch_case_next@16

    switch_case_next@16:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        err // this contract does not implement the given ABI method for call NoOp

    create_NoOp:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        txn NumAppArgs                                                                  tmp%6#0
        l-load tmp%6#0 0                                                                tmp%6#0
        !                                                                               tmp%7#0
        l-load tmp%7#0 0                                                                tmp%7#0
        assert // this contract does not implement the given ABI method for create NoOp
        int 1                                                                           1
        return

    call_DeleteApplication:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        txna ApplicationArgs 0                                                          tmp%8#0
        method delete()void                                                             tmp%8#0,Method(delete()void)
        l-load tmp%8#0 1                                                                Method(delete()void),tmp%8#0
        match delete_route@19 ; b switch_case_next@20

    delete_route@19:
        // mutable_native_types/abi_call.py:49
        // @arc4.abimethod(allow_actions=["DeleteApplication"])
        int 1                                                                           1
        return

    switch_case_next@20:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        err // this contract does not implement the given ABI method for call DeleteApplication 

    *NOT_IMPLEMENTED:
        // mutable_native_types/abi_call.py:41
        // class CallMe(arc4.ARC4Contract):
        err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID? 


// test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_arg[routing]() -> void:
subroutine fixed_struct_arg:
    fixed_struct_arg_block@0:
        // mutable_native_types/abi_call.py:53
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                          arg#0
        // mutable_native_types/abi_call.py:55
        // self.fixed_struct.value = arg
        byte "fixed_struct"                                                             arg#0,"fixed_struct"
        l-load arg#0 1                                                                  "fixed_struct",arg#0
        app_global_put
        // mutable_native_types/abi_call.py:53
        // @arc4.abimethod()
        int 1                                                                           1
        return


// test_cases.mutable_native_types.abi_call.CallMe.fixed_struct_ret[routing]() -> void:
subroutine fixed_struct_ret:
    fixed_struct_ret_block@0:
        // mutable_native_types/abi_call.py:59
        // return self.fixed_struct.value
        int 0                                                                           0
        byte "fixed_struct"                                                             0,"fixed_struct"
        app_global_get_ex                                                               maybe_value%0#0,maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                       maybe_value%0#0,maybe_exists%0#0
        assert // check self.fixed_struct exists                                        maybe_value%0#0
        // mutable_native_types/abi_call.py:57
        // @arc4.abimethod()
        byte 0x151f7c75                                                                 maybe_value%0#0,0x151f7c75
        l-load maybe_value%0#0 1                                                        0x151f7c75,maybe_value%0#0
        concat                                                                          tmp%1#0
        l-load tmp%1#0 0                                                                tmp%1#0
        log
        int 1                                                                           1
        return


// test_cases.mutable_native_types.abi_call.CallMe.nested_struct_arg[routing]() -> void:
subroutine nested_struct_arg:
    nested_struct_arg_block@0:
        // mutable_native_types/abi_call.py:61
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                          arg#0
        // mutable_native_types/abi_call.py:63
        // self.nested_struct.value = arg
        byte "nested_struct"                                                            arg#0,"nested_struct"
        l-load arg#0 1                                                                  "nested_struct",arg#0
        app_global_put
        // mutable_native_types/abi_call.py:61
        // @arc4.abimethod()
        int 1                                                                           1
        return


// test_cases.mutable_native_types.abi_call.CallMe.nested_struct_ret[routing]() -> void:
subroutine nested_struct_ret:
    nested_struct_ret_block@0:
        // mutable_native_types/abi_call.py:67
        // return self.nested_struct.value
        int 0                                                                           0
        byte "nested_struct"                                                            0,"nested_struct"
        app_global_get_ex                                                               maybe_value%0#0,maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                       maybe_value%0#0,maybe_exists%0#0
        assert // check self.nested_struct exists                                       maybe_value%0#0
        // mutable_native_types/abi_call.py:65
        // @arc4.abimethod()
        byte 0x151f7c75                                                                 maybe_value%0#0,0x151f7c75
        l-load maybe_value%0#0 1                                                        0x151f7c75,maybe_value%0#0
        concat                                                                          tmp%1#0
        l-load tmp%1#0 0                                                                tmp%1#0
        log
        int 1                                                                           1
        return


// test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_arg[routing]() -> void:
subroutine dynamic_struct_arg:
    dynamic_struct_arg_block@0:
        // mutable_native_types/abi_call.py:69
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                          arg#0
        // mutable_native_types/abi_call.py:71
        // self.dynamic_struct.value = arg.copy()
        byte "dynamic_struct"                                                           arg#0,"dynamic_struct"
        l-load arg#0 1                                                                  "dynamic_struct",arg#0
        app_global_put
        // mutable_native_types/abi_call.py:69
        // @arc4.abimethod()
        int 1                                                                           1
        return


// test_cases.mutable_native_types.abi_call.CallMe.dynamic_struct_ret[routing]() -> void:
subroutine dynamic_struct_ret:
    dynamic_struct_ret_block@0:
        // mutable_native_types/abi_call.py:75
        // return self.dynamic_struct.value
        int 0                                                                           0
        byte "dynamic_struct"                                                           0,"dynamic_struct"
        app_global_get_ex                                                               maybe_value%0#0,maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                       maybe_value%0#0,maybe_exists%0#0
        assert // check self.dynamic_struct exists                                      maybe_value%0#0
        // mutable_native_types/abi_call.py:73
        // @arc4.abimethod()
        byte 0x151f7c75                                                                 maybe_value%0#0,0x151f7c75
        l-load maybe_value%0#0 1                                                        0x151f7c75,maybe_value%0#0
        concat                                                                          tmp%1#0
        l-load tmp%1#0 0                                                                tmp%1#0
        log
        int 1                                                                           1
        return


// test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_arg[routing]() -> void:
subroutine fixed_arr_arg:
    fixed_arr_arg_block@0:
        // mutable_native_types/abi_call.py:77
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                          arg#0
        // mutable_native_types/abi_call.py:79
        // self.fixed_arr.value = arg.copy()
        byte "fixed_arr"                                                                arg#0,"fixed_arr"
        l-load arg#0 1                                                                  "fixed_arr",arg#0
        app_global_put
        // mutable_native_types/abi_call.py:77
        // @arc4.abimethod()
        int 1                                                                           1
        return


// test_cases.mutable_native_types.abi_call.CallMe.fixed_arr_ret[routing]() -> void:
subroutine fixed_arr_ret:
    fixed_arr_ret_block@0:
        // mutable_native_types/abi_call.py:83
        // return self.fixed_arr.value
        int 0                                                                           0
        byte "fixed_arr"                                                                0,"fixed_arr"
        app_global_get_ex                                                               maybe_value%0#0,maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                       maybe_value%0#0,maybe_exists%0#0
        assert // check self.fixed_arr exists                                           maybe_value%0#0
        // mutable_native_types/abi_call.py:81
        // @arc4.abimethod()
        byte 0x151f7c75                                                                 maybe_value%0#0,0x151f7c75
        l-load maybe_value%0#0 1                                                        0x151f7c75,maybe_value%0#0
        concat                                                                          tmp%1#0
        l-load tmp%1#0 0                                                                tmp%1#0
        log
        int 1                                                                           1
        return


// test_cases.mutable_native_types.abi_call.CallMe.native_arr_arg[routing]() -> void:
subroutine native_arr_arg:
    native_arr_arg_block@0:
        // mutable_native_types/abi_call.py:85
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                          arg#0
        // mutable_native_types/abi_call.py:87
        // self.native_arr.value = arg.copy()
        byte "native_arr"                                                               arg#0,"native_arr"
        l-load arg#0 1                                                                  "native_arr",arg#0
        app_global_put
        // mutable_native_types/abi_call.py:85
        // @arc4.abimethod()
        int 1                                                                           1
        return


// test_cases.mutable_native_types.abi_call.CallMe.native_arr_ret[routing]() -> void:
subroutine native_arr_ret:
    native_arr_ret_block@0:
        // mutable_native_types/abi_call.py:91
        // return self.native_arr.value
        int 0                                                                           0
        byte "native_arr"                                                               0,"native_arr"
        app_global_get_ex                                                               maybe_value%0#0,maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                       maybe_value%0#0,maybe_exists%0#0
        assert // check self.native_arr exists                                          maybe_value%0#0
        // mutable_native_types/abi_call.py:89
        // @arc4.abimethod()
        byte 0x151f7c75                                                                 maybe_value%0#0,0x151f7c75
        l-load maybe_value%0#0 1                                                        0x151f7c75,maybe_value%0#0
        concat                                                                          tmp%1#0
        l-load tmp%1#0 0                                                                tmp%1#0
        log
        int 1                                                                           1
        return


// test_cases.mutable_native_types.abi_call.CallMe.log_it[routing]() -> void:
subroutine log_it:
    log_it_block@0:
        // mutable_native_types/abi_call.py:95
        // log(self.fixed_struct.value)
        int 0                                                                           0
        byte "fixed_struct"                                                             0,"fixed_struct"
        app_global_get_ex                                                               maybe_value%0#0,maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                       maybe_value%0#0,maybe_exists%0#0
        assert // check self.fixed_struct exists                                        maybe_value%0#0
        l-load maybe_value%0#0 0                                                        maybe_value%0#0
        log
        // mutable_native_types/abi_call.py:96
        // log(self.nested_struct.value)
        int 0                                                                           0
        byte "nested_struct"                                                            0,"nested_struct"
        app_global_get_ex                                                               maybe_value%1#0,maybe_exists%1#0
        l-load maybe_exists%1#0 0                                                       maybe_value%1#0,maybe_exists%1#0
        assert // check self.nested_struct exists                                       maybe_value%1#0
        l-load maybe_value%1#0 0                                                        maybe_value%1#0
        log
        // mutable_native_types/abi_call.py:97
        // log(self.dynamic_struct.value)
        int 0                                                                           0
        byte "dynamic_struct"                                                           0,"dynamic_struct"
        app_global_get_ex                                                               maybe_value%2#0,maybe_exists%2#0
        l-load maybe_exists%2#0 0                                                       maybe_value%2#0,maybe_exists%2#0
        assert // check self.dynamic_struct exists                                      maybe_value%2#0
        l-load maybe_value%2#0 0                                                        maybe_value%2#0
        log
        // mutable_native_types/abi_call.py:98
        // log(self.fixed_arr.value)
        int 0                                                                           0
        byte "fixed_arr"                                                                0,"fixed_arr"
        app_global_get_ex                                                               maybe_value%3#0,maybe_exists%3#0
        l-load maybe_exists%3#0 0                                                       maybe_value%3#0,maybe_exists%3#0
        assert // check self.fixed_arr exists                                           maybe_value%3#0
        l-load maybe_value%3#0 0                                                        maybe_value%3#0
        log
        // mutable_native_types/abi_call.py:99
        // log(self.native_arr.value)
        int 0                                                                           0
        byte "native_arr"                                                               0,"native_arr"
        app_global_get_ex                                                               maybe_value%4#0,maybe_exists%4#0
        l-load maybe_exists%4#0 0                                                       maybe_value%4#0,maybe_exists%4#0
        assert // check self.native_arr exists                                          maybe_value%4#0
        l-load maybe_value%4#0 0                                                        maybe_value%4#0
        log
        // mutable_native_types/abi_call.py:93
        // @arc4.abimethod()
        int 1                                                                           1
        return


