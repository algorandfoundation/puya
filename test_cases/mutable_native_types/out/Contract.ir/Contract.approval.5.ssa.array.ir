main test_cases.mutable_native_types.contract.Contract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (txn NumAppArgs)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%0#2)
        let val_as_bytes%1#0: bytes[8] = (itob tmp%1#1)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#0 1u)
        let tmp%4#0: uint64 = (txn NumAppArgs)
        let tmp%5#0: uint64 = (+ tmp%4#0 1u)
        let val_as_bytes%2#0: bytes[8] = (itob tmp%3#0)
        let val_as_bytes%3#0: bytes[8] = (itob tmp%5#0)
        let encoded_tuple_buffer%5#0: bytes = (concat val_as_bytes%2#0 val_as_bytes%3#0)
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: uint64 = (+ tmp%6#0 1u)
        let tmp%8#0: uint64 = (txn NumAppArgs)
        let tmp%9#0: uint64 = (+ tmp%8#0 1u)
        let val_as_bytes%4#0: bytes[8] = (itob tmp%7#0)
        let val_as_bytes%5#0: bytes[8] = (itob tmp%9#0)
        let encoded_tuple_buffer%8#0: bytes = (concat val_as_bytes%4#0 val_as_bytes%5#0)
        let encoded_tuple_buffer%11#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_tuple_buffer%5#0)
        let encoded_tuple_buffer%12#0: bytes = (concat encoded_tuple_buffer%11#0 encoded_tuple_buffer%8#0)
        (app_global_put "nested" encoded_tuple_buffer%12#0)
        let tmp%10#0: uint64 = (txn NumAppArgs)
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let val_as_bytes%6#0: bytes[8] = (itob tmp%10#0)
        let val_as_bytes%7#0: bytes[8] = (itob tmp%11#0)
        let encoded_tuple_buffer%15#0: bytes = (concat val_as_bytes%6#0 val_as_bytes%7#0)
        let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%15#0 0x0016)
        let encoded_tuple_buffer%17#0: bytes = (concat encoded_tuple_buffer%16#0 0x0018)
        let encoded_tuple_buffer%18#0: bytes = (concat encoded_tuple_buffer%17#0 0x001a)
        let encoded_tuple_buffer%19#0: bytes = (concat encoded_tuple_buffer%18#0 0x0000)
        let encoded_tuple_buffer%20#0: bytes = (concat encoded_tuple_buffer%19#0 0x0000)
        let encoded_tuple_buffer%21#0: bytes = (concat encoded_tuple_buffer%20#0 0x0000)
        (app_global_put "dyn" encoded_tuple_buffer%21#0)
        (app_global_put "num_payments" 0u)
        let materialized_values%0#0: bytes[384] = (bzero 384u)
        (app_global_put "payments" materialized_values%0#0)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#3: uint64 = (txn NumAppArgs)
        goto tmp%0#3 ? block@4 : block@14
    block@4: // abi_routing_L65
        let tmp%2#1: bytes = (txna ApplicationArgs 0)
        switch tmp%2#1 {method "fixed_initialize()void" => block@5, method "add_payment((address,uint64,uint64))void" => block@6, method "increment_payment(uint64,uint64)void" => block@7, method "create_storage(uint64)void" => block@8, method "delete_storage(uint64)void" => block@9, method "struct_arg(uint64,(uint64,uint64))void" => block@10, method "struct_return()(uint64,uint64)" => block@11, method "tup_return()(uint64,uint64)" => block@12, method "calculate_sum()uint64" => block@13, * => block@16}
    block@5: // fixed_initialize_route_L89
        let tmp%3#1: uint64 = (txn OnCompletion)
        let tmp%4#1: bool = (! tmp%3#1)
        (assert tmp%4#1) // OnCompletion is not NoOp
        let tmp%5#1: uint64 = (txn ApplicationID)
        (assert tmp%5#1) // can only call when not creating
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        goto block@17
    block@6: // add_payment_route_L104
        let tmp%7#1: uint64 = (txn OnCompletion)
        let tmp%8#1: bool = (! tmp%7#1)
        (assert tmp%8#1) // OnCompletion is not NoOp
        let tmp%9#1: uint64 = (txn ApplicationID)
        (assert tmp%9#1) // can only call when not creating
        let reinterpret_bytes[48]%0#0: bytes[48] = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.contract.Contract.add_payment(reinterpret_bytes[48]%0#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#1: bool = 1u
        goto block@17
    block@7: // increment_payment_route_L110
        let tmp%11#1: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#1)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%15#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%16#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        test_cases.mutable_native_types.contract.Contract.increment_payment(tmp%15#0, tmp%16#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#2: bool = 1u
        goto block@17
    block@8: // create_storage_route_L115
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let reinterpret_bytes[8]%2#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%21#0: uint64 = (btoi reinterpret_bytes[8]%2#0)
        test_cases.mutable_native_types.contract.Contract.create_storage(tmp%21#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#3: bool = 1u
        goto block@17
    block@9: // delete_storage_route_L122
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        (assert tmp%24#0) // can only call when not creating
        let reinterpret_bytes[8]%3#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%26#0: uint64 = (btoi reinterpret_bytes[8]%3#0)
        test_cases.mutable_native_types.contract.Contract.delete_storage(tmp%26#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#4: bool = 1u
        goto block@17
    block@10: // struct_arg_route_L131
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        (assert tmp%29#0) // can only call when not creating
        let reinterpret_bytes[8]%4#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%31#0: uint64 = (btoi reinterpret_bytes[8]%4#0)
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 2)
        test_cases.mutable_native_types.contract.Contract.struct_arg(tmp%31#0, reinterpret_bytes[16]%0#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#5: bool = 1u
        goto block@17
    block@11: // struct_return_route_L141
        let tmp%32#0: uint64 = (txn OnCompletion)
        let tmp%33#0: bool = (! tmp%32#0)
        (assert tmp%33#0) // OnCompletion is not NoOp
        let tmp%34#0: uint64 = (txn ApplicationID)
        (assert tmp%34#0) // can only call when not creating
        let tmp%36#0: bytes[16] = test_cases.mutable_native_types.contract.Contract.struct_return()
        let tmp%37#0: bytes = (concat 0x151f7c75 tmp%36#0)
        (log tmp%37#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#6: bool = 1u
        goto block@17
    block@12: // tup_return_route_L145
        let tmp%38#0: uint64 = (txn OnCompletion)
        let tmp%39#0: bool = (! tmp%38#0)
        (assert tmp%39#0) // OnCompletion is not NoOp
        let tmp%40#0: uint64 = (txn ApplicationID)
        (assert tmp%40#0) // can only call when not creating
        let (elements_to_encode%0#0: uint64, elements_to_encode%1#0: uint64) = test_cases.mutable_native_types.contract.Contract.tup_return()
        let val_as_bytes%0#1: bytes[8] = (itob elements_to_encode%0#0)
        let val_as_bytes%1#1: bytes[8] = (itob elements_to_encode%1#0)
        let encoded_tuple_buffer%2#1: bytes = (concat val_as_bytes%0#1 val_as_bytes%1#1)
        let tmp%42#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%2#1)
        (log tmp%42#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#7: bool = 1u
        goto block@17
    block@13: // calculate_sum_route_L149
        let tmp%43#0: uint64 = (txn OnCompletion)
        let tmp%44#0: bool = (! tmp%43#0)
        (assert tmp%44#0) // OnCompletion is not NoOp
        let tmp%45#0: uint64 = (txn ApplicationID)
        (assert tmp%45#0) // can only call when not creating
        let to_encode%0#0: uint64 = test_cases.mutable_native_types.contract.Contract.calculate_sum()
        let val_as_bytes%2#1: bytes[8] = (itob to_encode%0#0)
        let tmp%47#0: bytes = (concat 0x151f7c75 val_as_bytes%2#1)
        (log tmp%47#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#8: bool = 1u
        goto block@17
    block@14: // bare_routing_L65
        let tmp%48#0: uint64 = (txn OnCompletion)
        goto tmp%48#0 ? block@16 : block@15
    block@15: // __algopy_default_create_L1
        let tmp%49#0: uint64 = (txn ApplicationID)
        let tmp%50#0: bool = (! tmp%49#0)
        (assert tmp%50#0) // can only call when creating
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#9: bool = 1u
        goto block@17
    block@16: // after_if_else_L65
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#10: bool = 0u
        goto block@17
    block@17: // after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router___L1
        let tmp%0#1: bool = φ(test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0 <- block@5, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#1 <- block@6, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#2 <- block@7, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#3 <- block@8, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#4 <- block@9, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#5 <- block@10, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#6 <- block@11, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#7 <- block@12, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#8 <- block@13, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#9 <- block@15, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#10 <- block@16)
        return tmp%0#1

subroutine test_cases.mutable_native_types.contract.Contract.add_payment(pay: bytes[48]) -> void:
    block@0: // L104
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%0#0) // check self.num_payments exists
        let tmp%0#0: bool = (< maybe_value%0#0 8u)
        (assert tmp%0#0) // too many payments
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "payments")
        (assert maybe_exists%1#0) // check self.payments exists
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%2#0) // check self.num_payments exists
        let index_is_in_bounds%0#0: bool = (< maybe_value%2#0 8u)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let write_offset%0#0: uint64 = (* maybe_value%2#0 48u)
        let updated_target%0#0: bytes = (replace3 maybe_value%1#0 write_offset%0#0 pay#0)
        (app_global_put "payments" updated_target%0#0)
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%3#0) // check self.num_payments exists
        let materialized_values%0#0: uint64 = (+ maybe_value%3#0 1u)
        (app_global_put "num_payments" materialized_values%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.increment_payment(index: uint64, amt: uint64) -> void:
    block@0: // L110
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%0#0) // check self.num_payments exists
        let tmp%0#0: bool = (< index#0 maybe_value%0#0)
        (assert tmp%0#0) // invalid payment index
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "payments")
        (assert maybe_exists%1#0) // check self.payments exists
        let item_offset%0#0: uint64 = (* index#0 48u)
        let tmp%1#0: bytes = (extract3 maybe_value%1#0 item_offset%0#0 48u) // on error: Index access is out of bounds
        let tmp%2#0: uint64 = (extract_uint64 tmp%1#0 40u)
        let assigned_value%0#0: uint64 = (+ tmp%2#0 amt#0)
        let val_as_bytes%0#0: bytes[8] = (itob assigned_value%0#0)
        let updated_data%0#0: bytes = ((replace2 40) tmp%1#0 val_as_bytes%0#0)
        let index_is_in_bounds%0#0: bool = (< index#0 8u)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let updated_target%0#0: bytes = (replace3 maybe_value%1#0 item_offset%0#0 updated_data%0#0)
        (app_global_put "payments" updated_target%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.create_storage(box_key: uint64) -> void:
    block@0: // L115
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        (app_global_put 0x70 maybe_value%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%1#0) // check self.nested exists
        let tmp%0#0: bytes[32] = (txn Sender)
        (app_local_put tmp%0#0 0x6c maybe_value%1#0)
        let tmp%1#0: bool = (box_create "box" 2064u)
        (assert tmp%1#0) // expected box to not exist
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%2#0) // check self.nested exists
        let tmp%2#0: bytes = ((extract 0 16) maybe_value%2#0) // on error: Index access is out of bounds
        let encoded_value%0#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%3#0) // check self.box_map entry exists
        let updated_data%0#0: bytes = ((replace2 0) maybe_value%3#0 tmp%2#0)
        (box_put box_prefixed_key%0#0 updated_data%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.delete_storage(box_key: uint64) -> void:
    block@0: // L122
        (app_global_del 0x70)
        let tmp%0#0: bytes[32] = (txn Sender)
        (app_local_del tmp%0#0 0x6c)
        (box_del "box")
        let encoded_value%0#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#0)
        (box_del box_prefixed_key%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.struct_arg(box_key: uint64, a: bytes[16]) -> void:
    block@0: // L131
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let updated_data%0#0: bytes = ((replace2 0) maybe_value%0#0 a#0)
        (app_global_put "nested" updated_data%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u 0x70)
        (assert maybe_exists%1#0) // check self.nested_proxy exists
        let updated_data%1#0: bytes = ((replace2 0) maybe_value%1#0 a#0)
        (app_global_put 0x70 updated_data%1#0)
        let tmp%0#0: bytes[32] = (txn Sender)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_local_get_ex tmp%0#0 0u 0x6c)
        (assert maybe_exists%2#0) // check self.nested_local exists for account
        let updated_data%2#0: bytes = ((replace2 0) maybe_value%2#0 a#0)
        (app_local_put tmp%0#0 0x6c updated_data%2#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (box_get "box")
        (assert maybe_exists%3#0) // check self.box exists
        let updated_data%3#0: bytes = ((replace2 0) maybe_value%3#0 a#0)
        (box_put "box" updated_data%3#0)
        let encoded_value%0#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#0)
        let (maybe_value%4#0: bytes, maybe_exists%4#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%4#0) // check self.box_map entry exists
        let updated_data%4#0: bytes = ((replace2 0) maybe_value%4#0 a#0)
        (box_put box_prefixed_key%0#0 updated_data%4#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.struct_return() -> bytes[16]:
    block@0: // L141
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let tmp%0#0: bytes = ((extract 0 16) maybe_value%0#0) // on error: Index access is out of bounds
        return tmp%0#0

subroutine test_cases.mutable_native_types.contract.Contract.tup_return() -> <uint64, uint64>:
    block@0: // L145
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let encoded%0#0: bytes = ((extract 32 16) maybe_value%0#0) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (extract_uint64 encoded%0#0 0u)
        let item1%1#0: uint64 = (extract_uint64 encoded%0#0 8u)
        return item0%1#0 item1%1#0

subroutine test_cases.mutable_native_types.contract.Contract.calculate_sum() -> uint64:
    block@0: // L149
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let fixed_a#0: bytes[16] = ((extract 0 16) maybe_value%0#0) // on error: Index access is out of bounds
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%1#0) // check self.nested exists
        let fixed_b#0: bytes[16] = ((extract 16 16) maybe_value%1#0) // on error: Index access is out of bounds
        let tmp%0#1: uint64 = (extract_uint64 fixed_a#0 0u)
        let tmp%1#1: uint64 = (extract_uint64 fixed_a#0 8u)
        let tmp%2#1: uint64 = (+ tmp%0#1 tmp%1#1)
        let tmp%0#2: uint64 = (extract_uint64 fixed_b#0 0u)
        let tmp%1#2: uint64 = (extract_uint64 fixed_b#0 8u)
        let tmp%2#2: uint64 = (+ tmp%0#2 tmp%1#2)
        let result#0: uint64 = (+ tmp%2#1 tmp%2#2)
        let tmp%2#0: bool = (< result#0 100u)
        goto tmp%2#0 ? block@1 : block@2
    block@1: // if_body_L155
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%2#0) // check self.nested exists
        let encoded%0#0: bytes = ((extract 32 16) maybe_value%2#0) // on error: Index access is out of bounds
        let c#0: uint64 = (extract_uint64 encoded%0#0 0u)
        let d#0: uint64 = (extract_uint64 encoded%0#0 8u)
        let result#1: uint64 = (+ result#0 c#0)
        let result#2: uint64 = (+ result#1 d#0)
        goto block@2
    block@2: // after_if_else_L154
        let result#3: uint64 = φ(result#0 <- block@0, result#2 <- block@1)
        return result#3