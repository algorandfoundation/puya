// Op                                                                                   Stack (out)
// test_cases.mutable_native_types.contract.Contract.__algopy_entrypoint_with_init() -> uint64:
subroutine main:
    block@0:
        txn ApplicationID                                                               tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                  tmp%0#0
        bz call___init__@1 ; b after_if_else@2

    call___init__@1:
        // mutable_native_types/contract.py:75
        // FixedStruct(a=Txn.num_app_args, b=Txn.num_app_args),
        txn NumAppArgs                                                                  tmp%0#2
        v-store tmp%0#2
        txn NumAppArgs                                                                  tmp%1#1
        v-store tmp%1#1
        v-load tmp%0#2                                                                  tmp%0#2
        itob                                                                            aggregate%val_as_bytes%0#0
        v-store aggregate%val_as_bytes%0#0
        v-load tmp%1#1                                                                  tmp%1#1
        itob                                                                            aggregate%val_as_bytes%1#0
        v-store aggregate%val_as_bytes%1#0
        v-load aggregate%val_as_bytes%0#0                                               aggregate%val_as_bytes%0#0
        v-load aggregate%val_as_bytes%1#0                                               aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        concat                                                                          aggregate%head%1#0
        v-store aggregate%head%1#0
        // mutable_native_types/contract.py:76
        // FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
        txn NumAppArgs                                                                  tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                                  tmp%3#0
        int 1                                                                           tmp%3#0,1
        +                                                                               tmp%4#0
        v-store tmp%4#0
        txn NumAppArgs                                                                  tmp%5#0
        v-store tmp%5#0
        v-load tmp%5#0                                                                  tmp%5#0
        int 1                                                                           tmp%5#0,1
        +                                                                               tmp%6#0
        v-store tmp%6#0
        v-load tmp%4#0                                                                  tmp%4#0
        itob                                                                            aggregate%val_as_bytes%2#0
        v-store aggregate%val_as_bytes%2#0
        v-load tmp%6#0                                                                  tmp%6#0
        itob                                                                            aggregate%val_as_bytes%3#0
        v-store aggregate%val_as_bytes%3#0
        v-load aggregate%val_as_bytes%2#0                                               aggregate%val_as_bytes%2#0
        v-load aggregate%val_as_bytes%3#0                                               aggregate%val_as_bytes%2#0,aggregate%val_as_bytes%3#0
        concat                                                                          aggregate%head%3#0
        v-store aggregate%head%3#0
        // mutable_native_types/contract.py:77
        // NamedTup(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
        txn NumAppArgs                                                                  tmp%8#0
        v-store tmp%8#0
        v-load tmp%8#0                                                                  tmp%8#0
        int 1                                                                           tmp%8#0,1
        +                                                                               tmp%9#0
        v-store tmp%9#0
        txn NumAppArgs                                                                  tmp%10#0
        v-store tmp%10#0
        v-load tmp%10#0                                                                 tmp%10#0
        int 1                                                                           tmp%10#0,1
        +                                                                               tmp%11#0
        v-store tmp%11#0
        // mutable_native_types/contract.py:74-78
        // self.nested = NestedStruct(
        //     FixedStruct(a=Txn.num_app_args, b=Txn.num_app_args),
        //     FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
        //     NamedTup(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
        // )
        v-load aggregate%head%1#0                                                       aggregate%head%1#0
        v-load aggregate%head%3#0                                                       aggregate%head%1#0,aggregate%head%3#0
        concat                                                                          aggregate%head%5#0
        v-store aggregate%head%5#0
        v-load tmp%9#0                                                                  tmp%9#0
        itob                                                                            aggregate%val_as_bytes%4#0
        v-store aggregate%val_as_bytes%4#0
        v-load tmp%11#0                                                                 tmp%11#0
        itob                                                                            aggregate%val_as_bytes%5#0
        v-store aggregate%val_as_bytes%5#0
        v-load aggregate%val_as_bytes%4#0                                               aggregate%val_as_bytes%4#0
        v-load aggregate%val_as_bytes%5#0                                               aggregate%val_as_bytes%4#0,aggregate%val_as_bytes%5#0
        concat                                                                          aggregate%head%7#0
        v-store aggregate%head%7#0
        v-load aggregate%head%5#0                                                       aggregate%head%5#0
        v-load aggregate%head%7#0                                                       aggregate%head%5#0,aggregate%head%7#0
        concat                                                                          aggregate%head%8#0
        v-store aggregate%head%8#0
        // mutable_native_types/contract.py:74
        // self.nested = NestedStruct(
        byte "nested"                                                                   "nested"
        // mutable_native_types/contract.py:74-78
        // self.nested = NestedStruct(
        //     FixedStruct(a=Txn.num_app_args, b=Txn.num_app_args),
        //     FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
        //     NamedTup(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
        // )
        v-load aggregate%head%8#0                                                       "nested",aggregate%head%8#0
        app_global_put
        // mutable_native_types/contract.py:85
        // a=Txn.num_app_args,
        txn NumAppArgs                                                                  tmp%13#0
        v-store tmp%13#0
        // mutable_native_types/contract.py:86
        // b=Txn.num_app_args,
        txn NumAppArgs                                                                  tmp%14#0
        v-store tmp%14#0
        // mutable_native_types/contract.py:84-90
        // self.dyn = DynamicStruct(
        //     a=Txn.num_app_args,
        //     b=Txn.num_app_args,
        //     c=Bytes(),
        //     d=String(),
        //     e=Array[arc4.Byte](),
        // )
        v-load tmp%13#0                                                                 tmp%13#0
        itob                                                                            aggregate%val_as_bytes%6#0
        v-store aggregate%val_as_bytes%6#0
        v-load tmp%14#0                                                                 tmp%14#0
        itob                                                                            aggregate%val_as_bytes%7#0
        v-store aggregate%val_as_bytes%7#0
        v-load aggregate%val_as_bytes%6#0                                               aggregate%val_as_bytes%6#0
        v-load aggregate%val_as_bytes%7#0                                               aggregate%val_as_bytes%6#0,aggregate%val_as_bytes%7#0
        concat                                                                          aggregate%head%10#0
        v-store aggregate%head%10#0
        v-load aggregate%head%10#0                                                      aggregate%head%10#0
        byte 0x00160018001a000000000000                                                 aggregate%head%10#0,0x00160018001a000000000000
        concat                                                                          aggregate%concat%2#0
        v-store aggregate%concat%2#0
        // mutable_native_types/contract.py:84
        // self.dyn = DynamicStruct(
        byte "dyn"                                                                      "dyn"
        // mutable_native_types/contract.py:84-90
        // self.dyn = DynamicStruct(
        //     a=Txn.num_app_args,
        //     b=Txn.num_app_args,
        //     c=Bytes(),
        //     d=String(),
        //     e=Array[arc4.Byte](),
        // )
        v-load aggregate%concat%2#0                                                     "dyn",aggregate%concat%2#0
        app_global_put
        // mutable_native_types/contract.py:92
        // self.num_payments = UInt64(0)
        byte "num_payments"                                                             "num_payments"
        int 0                                                                           "num_payments",0
        app_global_put
        // mutable_native_types/contract.py:93
        // self.payments = zero_bytes(FixedArray[Payment, typing.Literal[2]])
        int 96                                                                          96
        bzero                                                                           tmp%16#0
        v-store tmp%16#0
        byte "payments"                                                                 "payments"
        v-load tmp%16#0                                                                 "payments",tmp%16#0
        app_global_put
        b after_if_else@2

    after_if_else@2:
        // mutable_native_types/contract.py:71
        // class Contract(arc4.ARC4Contract):
        txn ApplicationID                                                               tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                  tmp%0#0
        !                                                                               tmp%1#2
        v-store tmp%1#2
        txn OnCompletion                                                                tmp%2#1
        v-store tmp%2#1
        v-load tmp%2#1                                                                  tmp%2#1
        int 1                                                                           tmp%2#1,1
        shl                                                                             tmp%3#0
        v-store tmp%3#0
        v-load tmp%1#2                                                                  tmp%1#2
        v-load tmp%3#0                                                                  tmp%1#2,tmp%3#0
        +                                                                               tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                                  tmp%4#0
        switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED ; b *NOT_IMPLEMENTED 

    call_NoOp:
        // mutable_native_types/contract.py:71
        // class Contract(arc4.ARC4Contract):
        txna ApplicationArgs 0                                                          tmp%5#1
        v-store tmp%5#1
        method test_imm_fixed_array()void                                               Method(test_imm_fixed_array()void)
        method fixed_initialize()void                                                   Method(test_imm_fixed_array()void),Method(fixed_initialize()void)
        method add_payment((address,uint64,uint64))void                                 Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void)
        method increment_payment(uint64,uint64)void                                     Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void)
        method create_storage(uint64)void                                               Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void)
        method local_struct()(address,uint64,uint64)                                    Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64))
        method delete_storage(uint64)void                                               Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void)
        method struct_arg(uint64,(uint64,uint64))void                                   Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void),Method(struct_arg(uint64,(uint64,uint64))void)
        method struct_return()(uint64,uint64)                                           Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void),Method(struct_arg(uint64,(uint64,uint64))void),Method(struct_return()(uint64,uint64))
        method tup_return()(uint64,uint64)                                              Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void),Method(struct_arg(uint64,(uint64,uint64))void),Method(struct_return()(uint64,uint64)),Method(tup_return()(uint64,uint64))
        method calculate_sum()uint64                                                    Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void),Method(struct_arg(uint64,(uint64,uint64))void),Method(struct_return()(uint64,uint64)),Method(tup_return()(uint64,uint64)),Method(calculate_sum()uint64)
        method test_arr((uint64,uint64)[])(uint64,uint64)[]                             Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void),Method(struct_arg(uint64,(uint64,uint64))void),Method(struct_return()(uint64,uint64)),Method(tup_return()(uint64,uint64)),Method(calculate_sum()uint64),Method(test_arr((uint64,uint64)[])(uint64,uint64)[])
        v-load tmp%5#1                                                                  Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void),Method(struct_arg(uint64,(uint64,uint64))void),Method(struct_return()(uint64,uint64)),Method(tup_return()(uint64,uint64)),Method(calculate_sum()uint64),Method(test_arr((uint64,uint64)[])(uint64,uint64)[]),tmp%5#1
        match test_imm_fixed_array_route@5 fixed_initialize_route@6 add_payment_route@7 increment_payment_route@8 create_storage_route@9 local_struct_route@10 delete_storage_route@11 struct_arg_route@12 struct_return_route@13 tup_return_route@14 calculate_sum_route@15 test_arr_route@16 ; b switch_case_next@17 

    test_imm_fixed_array_route@5:
        // mutable_native_types/contract.py:95
        // @arc4.abimethod()
        int 1                                                                           1
        return

    fixed_initialize_route@6:
        // mutable_native_types/contract.py:101
        // @arc4.abimethod()
        int 1                                                                           1
        return

    add_payment_route@7:
        // mutable_native_types/contract.py:71
        // class Contract(arc4.ARC4Contract):
        callsub add_payment
        b switch_case_next@17

    increment_payment_route@8:
        // mutable_native_types/contract.py:71
        // class Contract(arc4.ARC4Contract):
        callsub increment_payment
        b switch_case_next@17

    create_storage_route@9:
        // mutable_native_types/contract.py:71
        // class Contract(arc4.ARC4Contract):
        callsub create_storage
        b switch_case_next@17

    local_struct_route@10:
        // mutable_native_types/contract.py:71
        // class Contract(arc4.ARC4Contract):
        callsub local_struct
        b switch_case_next@17

    delete_storage_route@11:
        // mutable_native_types/contract.py:71
        // class Contract(arc4.ARC4Contract):
        callsub delete_storage
        b switch_case_next@17

    struct_arg_route@12:
        // mutable_native_types/contract.py:71
        // class Contract(arc4.ARC4Contract):
        callsub struct_arg
        b switch_case_next@17

    struct_return_route@13:
        // mutable_native_types/contract.py:71
        // class Contract(arc4.ARC4Contract):
        callsub struct_return
        b switch_case_next@17

    tup_return_route@14:
        // mutable_native_types/contract.py:71
        // class Contract(arc4.ARC4Contract):
        callsub tup_return
        b switch_case_next@17

    calculate_sum_route@15:
        // mutable_native_types/contract.py:71
        // class Contract(arc4.ARC4Contract):
        callsub calculate_sum
        b switch_case_next@17

    test_arr_route@16:
        // mutable_native_types/contract.py:71
        // class Contract(arc4.ARC4Contract):
        callsub test_arr
        b switch_case_next@17

    switch_case_next@17:
        // mutable_native_types/contract.py:71
        // class Contract(arc4.ARC4Contract):
        err // this contract does not implement the given ABI method for call NoOp

    create_NoOp:
        // mutable_native_types/contract.py:71
        // class Contract(arc4.ARC4Contract):
        txn NumAppArgs                                                                  tmp%6#0
        v-store tmp%6#0
        v-load tmp%6#0                                                                  tmp%6#0
        !                                                                               tmp%7#1
        v-store tmp%7#1
        v-load tmp%7#1                                                                  tmp%7#1
        assert // this contract does not implement the given ABI method for create NoOp
        int 1                                                                           1
        return

    *NOT_IMPLEMENTED:
        // mutable_native_types/contract.py:71
        // class Contract(arc4.ARC4Contract):
        err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID? 


// test_cases.mutable_native_types.contract.sum_frozen_arr(arr: bytes) -> uint64:
subroutine sum_frozen_arr:
    sum_frozen_arr_block@0:                                                             (𝕡) arr#0 |
        // mutable_native_types/contract.py:264
        // total = UInt64(0)
        int 0                                                                           (𝕡) arr#0 | 0
        v-store total#0                                                                 (𝕡) arr#0 |
        // mutable_native_types/contract.py:265
        // for element in arr:
        p-load arr#0                                                                    (𝕡) arr#0 | arr#0 (copy)
        int 0                                                                           (𝕡) arr#0 | arr#0 (copy),0
        extract_uint16                                                                  (𝕡) arr#0 | aggregate%array_length%0#0
        v-store aggregate%array_length%0#0                                              (𝕡) arr#0 |
        int 0                                                                           (𝕡) arr#0 | 0
        v-store item_index_internal%0#0                                                 (𝕡) arr#0 |
        b sum_frozen_arr_for_header@1                                                   (𝕡) arr#0 |

    sum_frozen_arr_for_header@1:                                                        (𝕡) arr#0 |
        // mutable_native_types/contract.py:265
        // for element in arr:
        v-load item_index_internal%0#0                                                  (𝕡) arr#0 | item_index_internal%0#0
        v-load aggregate%array_length%0#0                                               (𝕡) arr#0 | item_index_internal%0#0,aggregate%array_length%0#0
        <                                                                               (𝕡) arr#0 | continue_looping%0#0
        v-store continue_looping%0#0                                                    (𝕡) arr#0 |
        v-load continue_looping%0#0                                                     (𝕡) arr#0 | continue_looping%0#0
        bz sum_frozen_arr_after_for@4 ; b sum_frozen_arr_for_body@2                     (𝕡) arr#0 |

    sum_frozen_arr_for_body@2:                                                          (𝕡) arr#0 |
        // mutable_native_types/contract.py:265-266
        // for element in arr:
        //     total += element.a
        p-load arr#0                                                                    (𝕡) arr#0 | arr#0 (copy)
        extract 2 0                                                                     (𝕡) arr#0 | aggregate%array_trimmed%0#0
        v-store aggregate%array_trimmed%0#0                                             (𝕡) arr#0 |
        v-load item_index_internal%0#0                                                  (𝕡) arr#0 | item_index_internal%0#0
        int 16                                                                          (𝕡) arr#0 | item_index_internal%0#0,16
        *                                                                               (𝕡) arr#0 | aggregate%bytes_offset%0#0
        v-store aggregate%bytes_offset%0#0                                              (𝕡) arr#0 |
        v-load aggregate%array_trimmed%0#0                                              (𝕡) arr#0 | aggregate%array_trimmed%0#0
        v-load aggregate%bytes_offset%0#0                                               (𝕡) arr#0 | aggregate%array_trimmed%0#0,aggregate%bytes_offset%0#0
        int 16                                                                          (𝕡) arr#0 | aggregate%array_trimmed%0#0,aggregate%bytes_offset%0#0,16
        extract3 // on error: index access is out of bounds                             (𝕡) arr#0 | aggregate%encoded_element%0#0
        v-store aggregate%encoded_element%0#0                                           (𝕡) arr#0 |
        // mutable_native_types/contract.py:266
        // total += element.a
        v-load aggregate%encoded_element%0#0                                            (𝕡) arr#0 | aggregate%encoded_element%0#0
        // mutable_native_types/contract.py:265-266
        // for element in arr:
        //     total += element.a
        int 0                                                                           (𝕡) arr#0 | aggregate%encoded_element%0#0,0
        // mutable_native_types/contract.py:266
        // total += element.a
        extract_uint64                                                                  (𝕡) arr#0 | values%0#0
        v-store values%0#0                                                              (𝕡) arr#0 |
        v-load total#0                                                                  (𝕡) arr#0 | total#0
        v-load values%0#0                                                               (𝕡) arr#0 | total#0,values%0#0
        +                                                                               (𝕡) arr#0 | total#0
        v-store total#0                                                                 (𝕡) arr#0 |
        // mutable_native_types/contract.py:267
        // total += element.b
        v-load aggregate%encoded_element%0#0                                            (𝕡) arr#0 | aggregate%encoded_element%0#0
        int 8                                                                           (𝕡) arr#0 | aggregate%encoded_element%0#0,8
        extract_uint64                                                                  (𝕡) arr#0 | values%1#0
        v-store values%1#0                                                              (𝕡) arr#0 |
        v-load total#0                                                                  (𝕡) arr#0 | total#0
        v-load values%1#0                                                               (𝕡) arr#0 | total#0,values%1#0
        +                                                                               (𝕡) arr#0 | total#0
        v-store total#0                                                                 (𝕡) arr#0 |
        v-load item_index_internal%0#0                                                  (𝕡) arr#0 | item_index_internal%0#0
        int 1                                                                           (𝕡) arr#0 | item_index_internal%0#0,1
        +                                                                               (𝕡) arr#0 | item_index_internal%0#0
        v-store item_index_internal%0#0                                                 (𝕡) arr#0 |
        b sum_frozen_arr_for_header@1                                                   (𝕡) arr#0 |

    sum_frozen_arr_after_for@4:                                                         (𝕡) arr#0 |
        // mutable_native_types/contract.py:268
        // return total
        v-load total#0                                                                  (𝕡) arr#0 | total#0
        retsub                                                                          total#0


// test_cases.mutable_native_types.contract.do_something(pay: bytes) -> bytes:
subroutine do_something:
    do_something_block@0:                                                               (𝕡) pay#0 |
        p-load pay#0                                                                    (𝕡) pay#0 | pay#0 (copy)
        retsub                                                                          pay#0 (copy)


// test_cases.mutable_native_types.contract.Contract.add_payment[routing]() -> void:
subroutine add_payment:
    add_payment_block@0:
        // mutable_native_types/contract.py:131
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                          pay#0
        v-store pay#0
        // mutable_native_types/contract.py:133
        // assert self.num_payments < self.payments.length, "too many payments"
        int 0                                                                           0
        byte "num_payments"                                                             0,"num_payments"
        app_global_get_ex                                                               maybe_value%0#0,maybe_exists%0#0
        v-store maybe_exists%0#0                                                        maybe_value%0#0
        v-store maybe_value%0#0
        v-load maybe_exists%0#0                                                         maybe_exists%0#0
        assert // check self.num_payments exists
        v-load maybe_value%0#0                                                          maybe_value%0#0
        int 2                                                                           maybe_value%0#0,2
        <                                                                               tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                  tmp%0#0
        assert // too many payments
        // mutable_native_types/contract.py:134
        // self.payments[self.num_payments] = pay.copy()
        int 0                                                                           0
        byte "payments"                                                                 0,"payments"
        app_global_get_ex                                                               maybe_value%1#0,maybe_exists%1#0
        v-store maybe_exists%1#0                                                        maybe_value%1#0
        v-store maybe_value%1#0
        v-load maybe_exists%1#0                                                         maybe_exists%1#0
        assert // check self.payments exists
        v-load maybe_value%0#0                                                          maybe_value%0#0
        int 48                                                                          maybe_value%0#0,48
        *                                                                               aggregate%write_offset%0#0
        v-store aggregate%write_offset%0#0
        v-load maybe_value%1#0                                                          maybe_value%1#0
        v-load aggregate%write_offset%0#0                                               maybe_value%1#0,aggregate%write_offset%0#0
        v-load pay#0                                                                    maybe_value%1#0,aggregate%write_offset%0#0,pay#0
        replace3 // on error: index access is out of bounds                             aggregate%updated_array%0#0
        v-store aggregate%updated_array%0#0
        byte "payments"                                                                 "payments"
        v-load aggregate%updated_array%0#0                                              "payments",aggregate%updated_array%0#0
        app_global_put
        // mutable_native_types/contract.py:135
        // self.num_payments += 1
        int 0                                                                           0
        byte "num_payments"                                                             0,"num_payments"
        app_global_get_ex                                                               maybe_value%3#0,maybe_exists%3#0
        v-store maybe_exists%3#0                                                        maybe_value%3#0
        v-store maybe_value%3#0
        v-load maybe_exists%3#0                                                         maybe_exists%3#0
        assert // check self.num_payments exists
        v-load maybe_value%3#0                                                          maybe_value%3#0
        int 1                                                                           maybe_value%3#0,1
        +                                                                               tmp%1#0
        v-store tmp%1#0
        byte "num_payments"                                                             "num_payments"
        v-load tmp%1#0                                                                  "num_payments",tmp%1#0
        app_global_put
        // mutable_native_types/contract.py:131
        // @arc4.abimethod()
        int 1                                                                           1
        return


// test_cases.mutable_native_types.contract.Contract.increment_payment[routing]() -> void:
subroutine increment_payment:
    increment_payment_block@0:
        // mutable_native_types/contract.py:137
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                          reinterpret_Encoded(uint64)%0#0
        v-store reinterpret_Encoded(uint64)%0#0
        v-load reinterpret_Encoded(uint64)%0#0                                          reinterpret_Encoded(uint64)%0#0
        btoi                                                                            index#0
        v-store index#0
        txna ApplicationArgs 2                                                          reinterpret_Encoded(uint64)%1#0
        v-store reinterpret_Encoded(uint64)%1#0
        v-load reinterpret_Encoded(uint64)%1#0                                          reinterpret_Encoded(uint64)%1#0
        btoi                                                                            amt#0
        v-store amt#0
        // mutable_native_types/contract.py:139
        // assert index < self.num_payments, "invalid payment index"
        int 0                                                                           0
        byte "num_payments"                                                             0,"num_payments"
        app_global_get_ex                                                               maybe_value%0#0,maybe_exists%0#0
        v-store maybe_exists%0#0                                                        maybe_value%0#0
        v-store maybe_value%0#0
        v-load maybe_exists%0#0                                                         maybe_exists%0#0
        assert // check self.num_payments exists
        v-load index#0                                                                  index#0
        v-load maybe_value%0#0                                                          index#0,maybe_value%0#0
        <                                                                               tmp%0#1
        v-store tmp%0#1
        v-load tmp%0#1                                                                  tmp%0#1
        assert // invalid payment index
        // mutable_native_types/contract.py:140
        // self.payments[index].amt += amt
        int 0                                                                           0
        byte "payments"                                                                 0,"payments"
        app_global_get_ex                                                               maybe_value%1#0,maybe_exists%1#0
        v-store maybe_exists%1#0                                                        maybe_value%1#0
        v-store maybe_value%1#0
        v-load maybe_exists%1#0                                                         maybe_exists%1#0
        assert // check self.payments exists
        v-load index#0                                                                  index#0
        int 48                                                                          index#0,48
        *                                                                               aggregate%bytes_offset%0#0
        v-store aggregate%bytes_offset%0#0
        v-load maybe_value%1#0                                                          maybe_value%1#0
        v-load aggregate%bytes_offset%0#0                                               maybe_value%1#0,aggregate%bytes_offset%0#0
        int 48                                                                          maybe_value%1#0,aggregate%bytes_offset%0#0,48
        extract3 // on error: index access is out of bounds                             aggregate%encoded_element%0#0
        v-store aggregate%encoded_element%0#0
        v-load aggregate%encoded_element%0#0                                            aggregate%encoded_element%0#0
        int 40                                                                          aggregate%encoded_element%0#0,40
        extract_uint64                                                                  values%0#0
        v-store values%0#0
        v-load values%0#0                                                               values%0#0
        v-load amt#0                                                                    values%0#0,amt#0
        +                                                                               tmp%1#1
        v-store tmp%1#1
        v-load tmp%1#1                                                                  tmp%1#1
        itob                                                                            aggregate%val_as_bytes%0#0
        v-store aggregate%val_as_bytes%0#0
        v-load aggregate%encoded_element%0#0                                            aggregate%encoded_element%0#0
        v-load aggregate%val_as_bytes%0#0                                               aggregate%encoded_element%0#0,aggregate%val_as_bytes%0#0
        replace2 40                                                                     aggregate%updated_data%0#0
        v-store aggregate%updated_data%0#0
        v-load maybe_value%1#0                                                          maybe_value%1#0
        v-load aggregate%bytes_offset%0#0                                               maybe_value%1#0,aggregate%bytes_offset%0#0
        v-load aggregate%updated_data%0#0                                               maybe_value%1#0,aggregate%bytes_offset%0#0,aggregate%updated_data%0#0
        replace3 // on error: index access is out of bounds                             aggregate%updated_array%0#0
        v-store aggregate%updated_array%0#0
        byte "payments"                                                                 "payments"
        v-load aggregate%updated_array%0#0                                              "payments",aggregate%updated_array%0#0
        app_global_put
        // mutable_native_types/contract.py:137
        // @arc4.abimethod()
        int 1                                                                           1
        return


// test_cases.mutable_native_types.contract.Contract.create_storage[routing]() -> void:
subroutine create_storage:
    create_storage_block@0:
        // mutable_native_types/contract.py:142
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                          reinterpret_Encoded(uint64)%0#0
        v-store reinterpret_Encoded(uint64)%0#0
        v-load reinterpret_Encoded(uint64)%0#0                                          reinterpret_Encoded(uint64)%0#0
        btoi                                                                            box_key#0
        v-store box_key#0
        // mutable_native_types/contract.py:144
        // self.nested_proxy.value = self.nested.copy()
        int 0                                                                           0
        byte "nested"                                                                   0,"nested"
        app_global_get_ex                                                               maybe_value%0#0,maybe_exists%0#0
        v-store maybe_exists%0#0                                                        maybe_value%0#0
        v-store maybe_value%0#0
        v-load maybe_exists%0#0                                                         maybe_exists%0#0
        assert // check self.nested exists
        byte 0x70                                                                       0x70
        v-load maybe_value%0#0                                                          0x70,maybe_value%0#0
        app_global_put
        // mutable_native_types/contract.py:145
        // self.nested_local[Txn.sender] = self.nested.copy()
        int 0                                                                           0
        byte "nested"                                                                   0,"nested"
        app_global_get_ex                                                               maybe_value%1#0,maybe_exists%1#0
        v-store maybe_exists%1#0                                                        maybe_value%1#0
        v-store maybe_value%1#0
        v-load maybe_exists%1#0                                                         maybe_exists%1#0
        assert // check self.nested exists
        txn Sender                                                                      tmp%0#1
        v-store tmp%0#1
        v-load tmp%0#1                                                                  tmp%0#1
        byte 0x6c                                                                       tmp%0#1,0x6c
        v-load maybe_value%1#0                                                          tmp%0#1,0x6c,maybe_value%1#0
        app_local_put
        // mutable_native_types/contract.py:146
        // assert self.box.create(), "expected box to not exist"
        byte "box"                                                                      "box"
        int 2064                                                                        "box",2064
        box_create                                                                      tmp%1#0
        v-store tmp%1#0
        v-load tmp%1#0                                                                  tmp%1#0
        assert // expected box to not exist
        // mutable_native_types/contract.py:147
        // self.box_map[box_key].fixed_a = self.nested.fixed_a.copy()
        v-load maybe_value%1#0                                                          maybe_value%1#0
        extract 0 16                                                                    aggregate%extract%0#0
        v-store aggregate%extract%0#0
        v-load box_key#0                                                                box_key#0
        itob                                                                            encoded_value%0#0
        v-store encoded_value%0#0
        byte "box_map"                                                                  "box_map"
        v-load encoded_value%0#0                                                        "box_map",encoded_value%0#0
        concat                                                                          box_prefixed_key%0#0
        v-store box_prefixed_key%0#0
        v-load box_prefixed_key%0#0                                                     box_prefixed_key%0#0
        int 0                                                                           box_prefixed_key%0#0,0
        v-load aggregate%extract%0#0                                                    box_prefixed_key%0#0,0,aggregate%extract%0#0
        box_replace
        // mutable_native_types/contract.py:142
        // @arc4.abimethod()
        int 1                                                                           1
        return


// test_cases.mutable_native_types.contract.Contract.local_struct[routing]() -> void:
subroutine local_struct:
    local_struct_block@0:
        // mutable_native_types/contract.py:151
        // a = Payment(Txn.sender, Asset(1234), UInt64(567))
        txn Sender                                                                      tmp%0#1
        v-store tmp%0#1
        int 1234                                                                        1234
        itob                                                                            aggregate%val_as_bytes%0#0
        v-store aggregate%val_as_bytes%0#0
        v-load tmp%0#1                                                                  tmp%0#1
        v-load aggregate%val_as_bytes%0#0                                               tmp%0#1,aggregate%val_as_bytes%0#0
        concat                                                                          aggregate%head%1#0
        v-store aggregate%head%1#0
        int 567                                                                         567
        itob                                                                            aggregate%val_as_bytes%1#0
        v-store aggregate%val_as_bytes%1#0
        v-load aggregate%head%1#0                                                       aggregate%head%1#0
        v-load aggregate%val_as_bytes%1#0                                               aggregate%head%1#0,aggregate%val_as_bytes%1#0
        concat                                                                          a#0
        v-store a#0
        // mutable_native_types/contract.py:154
        // (foo, bar, baz) = (a.receiver, a.asset, a.amt)
        v-load a#0                                                                      a#0
        extract 0 32                                                                    foo#0
        v-store foo#0
        v-load a#0                                                                      a#0
        int 32                                                                          a#0,32
        extract_uint64                                                                  bar#0
        v-store bar#0
        v-load a#0                                                                      a#0
        int 40                                                                          a#0,40
        extract_uint64                                                                  baz#0
        v-store baz#0
        // mutable_native_types/contract.py:155
        // assert foo, "use foo"
        global ZeroAddress                                                              tmp%2#0
        v-store tmp%2#0
        v-load foo#0                                                                    foo#0
        v-load tmp%2#0                                                                  foo#0,tmp%2#0
        !=                                                                              tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                                  tmp%3#0
        assert // use foo
        // mutable_native_types/contract.py:156
        // assert bar, "use bar"
        v-load bar#0                                                                    bar#0
        assert // use bar
        // mutable_native_types/contract.py:157
        // assert baz, "use baz"
        v-load baz#0                                                                    baz#0
        assert // use baz
        // mutable_native_types/contract.py:158
        // do_something(a)
        v-load a#0                                                                      a#0
        callsub do_something                                                            a#0
        v-store a#0
        // mutable_native_types/contract.py:149
        // @arc4.abimethod()
        byte 0x151f7c75                                                                 0x151f7c75
        v-load a#0                                                                      0x151f7c75,a#0
        concat                                                                          tmp%1#0
        v-store tmp%1#0
        v-load tmp%1#0                                                                  tmp%1#0
        log
        int 1                                                                           1
        return


// test_cases.mutable_native_types.contract.Contract.delete_storage[routing]() -> void:
subroutine delete_storage:
    delete_storage_block@0:
        // mutable_native_types/contract.py:161
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                          reinterpret_Encoded(uint64)%0#0
        v-store reinterpret_Encoded(uint64)%0#0
        v-load reinterpret_Encoded(uint64)%0#0                                          reinterpret_Encoded(uint64)%0#0
        btoi                                                                            box_key#0
        v-store box_key#0
        // mutable_native_types/contract.py:163
        // del self.nested_proxy.value
        byte 0x70                                                                       0x70
        app_global_del
        // mutable_native_types/contract.py:164
        // del self.nested_local[Txn.sender]
        txn Sender                                                                      tmp%0#1
        v-store tmp%0#1
        v-load tmp%0#1                                                                  tmp%0#1
        byte 0x6c                                                                       tmp%0#1,0x6c
        app_local_del
        // mutable_native_types/contract.py:165
        // del self.box.value
        byte "box"                                                                      "box"
        box_del                                                                         {box_del}
        pop 1
        // mutable_native_types/contract.py:166
        // del self.box_map[box_key]
        v-load box_key#0                                                                box_key#0
        itob                                                                            encoded_value%0#0
        v-store encoded_value%0#0
        byte "box_map"                                                                  "box_map"
        v-load encoded_value%0#0                                                        "box_map",encoded_value%0#0
        concat                                                                          box_prefixed_key%0#0
        v-store box_prefixed_key%0#0
        v-load box_prefixed_key%0#0                                                     box_prefixed_key%0#0
        box_del                                                                         {box_del}
        pop 1
        // mutable_native_types/contract.py:161
        // @arc4.abimethod()
        int 1                                                                           1
        return


// test_cases.mutable_native_types.contract.Contract.struct_arg[routing]() -> void:
subroutine struct_arg:
    struct_arg_block@0:
        // mutable_native_types/contract.py:168
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                          reinterpret_Encoded(uint64)%0#0
        v-store reinterpret_Encoded(uint64)%0#0
        v-load reinterpret_Encoded(uint64)%0#0                                          reinterpret_Encoded(uint64)%0#0
        btoi                                                                            box_key#0
        v-store box_key#0
        txna ApplicationArgs 2                                                          a#0
        v-store a#0
        // mutable_native_types/contract.py:170
        // self.nested.fixed_a = a
        int 0                                                                           0
        byte "nested"                                                                   0,"nested"
        app_global_get_ex                                                               maybe_value%0#0,maybe_exists%0#0
        v-store maybe_exists%0#0                                                        maybe_value%0#0
        v-store maybe_value%0#0
        v-load maybe_exists%0#0                                                         maybe_exists%0#0
        assert // check self.nested exists
        v-load maybe_value%0#0                                                          maybe_value%0#0
        v-load a#0                                                                      maybe_value%0#0,a#0
        replace2 0                                                                      aggregate%updated_data%0#0
        v-store aggregate%updated_data%0#0
        byte "nested"                                                                   "nested"
        v-load aggregate%updated_data%0#0                                               "nested",aggregate%updated_data%0#0
        app_global_put
        // mutable_native_types/contract.py:171
        // self.nested_proxy.value.fixed_a = a
        int 0                                                                           0
        byte 0x70                                                                       0,0x70
        app_global_get_ex                                                               maybe_value%1#0,maybe_exists%1#0
        v-store maybe_exists%1#0                                                        maybe_value%1#0
        v-store maybe_value%1#0
        v-load maybe_exists%1#0                                                         maybe_exists%1#0
        assert // check self.nested_proxy exists
        v-load maybe_value%1#0                                                          maybe_value%1#0
        v-load a#0                                                                      maybe_value%1#0,a#0
        replace2 0                                                                      aggregate%updated_data%1#0
        v-store aggregate%updated_data%1#0
        byte 0x70                                                                       0x70
        v-load aggregate%updated_data%1#0                                               0x70,aggregate%updated_data%1#0
        app_global_put
        // mutable_native_types/contract.py:172
        // self.nested_local[Txn.sender].fixed_a = a
        txn Sender                                                                      tmp%0#1
        v-store tmp%0#1
        v-load tmp%0#1                                                                  tmp%0#1
        int 0                                                                           tmp%0#1,0
        byte 0x6c                                                                       tmp%0#1,0,0x6c
        app_local_get_ex                                                                maybe_value%2#0,maybe_exists%2#0
        v-store maybe_exists%2#0                                                        maybe_value%2#0
        v-store maybe_value%2#0
        v-load maybe_exists%2#0                                                         maybe_exists%2#0
        assert // check self.nested_local exists for account
        v-load maybe_value%2#0                                                          maybe_value%2#0
        v-load a#0                                                                      maybe_value%2#0,a#0
        replace2 0                                                                      aggregate%updated_data%2#0
        v-store aggregate%updated_data%2#0
        v-load tmp%0#1                                                                  tmp%0#1
        byte 0x6c                                                                       tmp%0#1,0x6c
        v-load aggregate%updated_data%2#0                                               tmp%0#1,0x6c,aggregate%updated_data%2#0
        app_local_put
        // mutable_native_types/contract.py:173
        // self.box.value.fixed_a = a
        byte "box"                                                                      "box"
        int 0                                                                           "box",0
        v-load a#0                                                                      "box",0,a#0
        box_replace
        // mutable_native_types/contract.py:174
        // self.box_map[box_key].fixed_a = a
        v-load box_key#0                                                                box_key#0
        itob                                                                            encoded_value%0#0
        v-store encoded_value%0#0
        byte "box_map"                                                                  "box_map"
        v-load encoded_value%0#0                                                        "box_map",encoded_value%0#0
        concat                                                                          box_prefixed_key%0#0
        v-store box_prefixed_key%0#0
        v-load box_prefixed_key%0#0                                                     box_prefixed_key%0#0
        int 0                                                                           box_prefixed_key%0#0,0
        v-load a#0                                                                      box_prefixed_key%0#0,0,a#0
        box_replace
        // mutable_native_types/contract.py:168
        // @arc4.abimethod()
        int 1                                                                           1
        return


// test_cases.mutable_native_types.contract.Contract.struct_return[routing]() -> void:
subroutine struct_return:
    struct_return_block@0:
        // mutable_native_types/contract.py:180
        // return self.nested.fixed_a
        int 0                                                                           0
        byte "nested"                                                                   0,"nested"
        app_global_get_ex                                                               maybe_value%0#0,maybe_exists%0#0
        v-store maybe_exists%0#0                                                        maybe_value%0#0
        v-store maybe_value%0#0
        v-load maybe_exists%0#0                                                         maybe_exists%0#0
        assert // check self.nested exists
        v-load maybe_value%0#0                                                          maybe_value%0#0
        extract 0 16                                                                    aggregate%extract%0#0
        v-store aggregate%extract%0#0
        // mutable_native_types/contract.py:178
        // @arc4.abimethod()
        byte 0x151f7c75                                                                 0x151f7c75
        v-load aggregate%extract%0#0                                                    0x151f7c75,aggregate%extract%0#0
        concat                                                                          tmp%1#0
        v-store tmp%1#0
        v-load tmp%1#0                                                                  tmp%1#0
        log
        int 1                                                                           1
        return


// test_cases.mutable_native_types.contract.Contract.tup_return[routing]() -> void:
subroutine tup_return:
    tup_return_block@0:
        // mutable_native_types/contract.py:184
        // return self.nested.tup
        int 0                                                                           0
        byte "nested"                                                                   0,"nested"
        app_global_get_ex                                                               maybe_value%0#0,maybe_exists%0#0
        v-store maybe_exists%0#0                                                        maybe_value%0#0
        v-store maybe_value%0#0
        v-load maybe_exists%0#0                                                         maybe_exists%0#0
        assert // check self.nested exists
        v-load maybe_value%0#0                                                          maybe_value%0#0
        extract 32 16                                                                   aggregate%extract%0#0
        v-store aggregate%extract%0#0
        // mutable_native_types/contract.py:182
        // @arc4.abimethod()
        byte 0x151f7c75                                                                 0x151f7c75
        v-load aggregate%extract%0#0                                                    0x151f7c75,aggregate%extract%0#0
        concat                                                                          tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                                  tmp%3#0
        log
        int 1                                                                           1
        return


// test_cases.mutable_native_types.contract.Contract.calculate_sum[routing]() -> void:
subroutine calculate_sum:
    calculate_sum_block@0:
        // mutable_native_types/contract.py:188
        // fixed_a = self.nested.fixed_a
        int 0                                                                           0
        byte "nested"                                                                   0,"nested"
        app_global_get_ex                                                               maybe_value%0#0,maybe_exists%0#0
        v-store maybe_exists%0#0                                                        maybe_value%0#0
        v-store maybe_value%0#0
        v-load maybe_exists%0#0                                                         maybe_exists%0#0
        assert // check self.nested exists
        v-load maybe_value%0#0                                                          maybe_value%0#0
        extract 0 16                                                                    fixed_a#0
        v-store fixed_a#0
        // mutable_native_types/contract.py:189
        // fixed_b = self.nested.fixed_b
        v-load maybe_value%0#0                                                          maybe_value%0#0
        extract 16 16                                                                   fixed_b#0
        v-store fixed_b#0
        // mutable_native_types/contract.py:273
        // return val.a + val.b
        v-load fixed_a#0                                                                fixed_a#0
        int 0                                                                           fixed_a#0,0
        extract_uint64                                                                  values%0#0
        v-store values%0#0
        v-load fixed_a#0                                                                fixed_a#0
        int 8                                                                           fixed_a#0,8
        extract_uint64                                                                  values%1#0
        v-store values%1#0
        v-load values%0#0                                                               values%0#0
        v-load values%1#0                                                               values%0#0,values%1#0
        +                                                                               tmp%0#2
        v-store tmp%0#2
        v-load fixed_b#0                                                                fixed_b#0
        int 0                                                                           fixed_b#0,0
        extract_uint64                                                                  values%0#0
        v-store values%0#0
        v-load fixed_b#0                                                                fixed_b#0
        int 8                                                                           fixed_b#0,8
        extract_uint64                                                                  values%1#0
        v-store values%1#0
        v-load values%0#0                                                               values%0#0
        v-load values%1#0                                                               values%0#0,values%1#0
        +                                                                               tmp%0#3
        v-store tmp%0#3
        // mutable_native_types/contract.py:190
        // result = add(fixed_a) + add(fixed_b)
        v-load tmp%0#2                                                                  tmp%0#2
        v-load tmp%0#3                                                                  tmp%0#2,tmp%0#3
        +                                                                               result#0
        v-store result#0
        // mutable_native_types/contract.py:191
        // if result < 100:
        v-load result#0                                                                 result#0
        int 100                                                                         result#0,100
        <                                                                               tmp%3#0
        v-store tmp%3#0
        v-load result#0                                                                 result#0
        v-store result#6
        v-load tmp%3#0                                                                  tmp%3#0
        bz calculate_sum_after_if_else@3 ; b calculate_sum_if_body@2

    calculate_sum_if_body@2:
        // mutable_native_types/contract.py:192
        // c, d = self.nested.tup
        int 0                                                                           0
        byte "nested"                                                                   0,"nested"
        app_global_get_ex                                                               maybe_value%2#0,maybe_exists%2#0
        v-store maybe_exists%2#0                                                        maybe_value%2#0
        v-store maybe_value%2#0
        v-load maybe_exists%2#0                                                         maybe_exists%2#0
        assert // check self.nested exists
        v-load maybe_value%2#0                                                          maybe_value%2#0
        extract 32 16                                                                   aggregate%extract%2#0
        v-store aggregate%extract%2#0
        v-load aggregate%extract%2#0                                                    aggregate%extract%2#0
        int 0                                                                           aggregate%extract%2#0,0
        extract_uint64                                                                  c#0
        v-store c#0
        v-load aggregate%extract%2#0                                                    aggregate%extract%2#0
        int 8                                                                           aggregate%extract%2#0,8
        extract_uint64                                                                  d#0
        v-store d#0
        // mutable_native_types/contract.py:193
        // result += c
        v-load result#0                                                                 result#0
        v-load c#0                                                                      result#0,c#0
        +                                                                               result#0
        v-store result#0
        // mutable_native_types/contract.py:194
        // result += d
        v-load result#0                                                                 result#0
        v-load d#0                                                                      result#0,d#0
        +                                                                               result#0
        v-store result#0
        v-load result#0                                                                 result#0
        v-store result#6
        b calculate_sum_after_if_else@3

    calculate_sum_after_if_else@3:
        v-load result#6                                                                 result#6
        v-store result#0
        // mutable_native_types/contract.py:186
        // @arc4.abimethod()
        v-load result#0                                                                 result#0
        itob                                                                            aggregate%val_as_bytes%0#0
        v-store aggregate%val_as_bytes%0#0
        byte 0x151f7c75                                                                 0x151f7c75
        v-load aggregate%val_as_bytes%0#0                                               0x151f7c75,aggregate%val_as_bytes%0#0
        concat                                                                          tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                                  tmp%2#0
        log
        int 1                                                                           1
        return


// test_cases.mutable_native_types.contract.Contract.test_arr[routing]() -> void:
subroutine test_arr:
    test_arr_block@0:
        // mutable_native_types/contract.py:197
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                          arr#0
        v-store arr#0
        // mutable_native_types/contract.py:199
        // assert arr.length == 0, "expected empty array"
        v-load arr#0                                                                    arr#0
        int 0                                                                           arr#0,0
        extract_uint16                                                                  aggregate%array_length%0#0
        v-store aggregate%array_length%0#0
        v-load aggregate%array_length%0#0                                               aggregate%array_length%0#0
        !                                                                               tmp%1#1
        v-store tmp%1#1
        v-load tmp%1#1                                                                  tmp%1#1
        assert // expected empty array
        // mutable_native_types/contract.py:208
        // arr4.extend(arr)
        v-load arr#0                                                                    arr#0
        extract 2 0                                                                     extract_to_end%0#0
        v-store extract_to_end%0#0
        v-load extract_to_end%0#0                                                       extract_to_end%0#0
        v-store slot%0
        // mutable_native_types/contract.py:209
        // assert arr.length == arr4.length, "expected arrays to be the same length"
        v-load extract_to_end%0#0                                                       extract_to_end%0#0
        len                                                                             aggregate%bytes_len%0#0
        v-store aggregate%bytes_len%0#0
        v-load aggregate%bytes_len%0#0                                                  aggregate%bytes_len%0#0
        int 16                                                                          aggregate%bytes_len%0#0,16
        /                                                                               aggregate%array_len%0#0
        v-store aggregate%array_len%0#0
        v-load aggregate%array_length%0#0                                               aggregate%array_length%0#0
        v-load aggregate%array_len%0#0                                                  aggregate%array_length%0#0,aggregate%array_len%0#0
        ==                                                                              tmp%6#0
        v-store tmp%6#0
        v-load tmp%6#0                                                                  tmp%6#0
        assert // expected arrays to be the same length
        // mutable_native_types/contract.py:211
        // arr5 = Array(arr4)
        v-load aggregate%array_len%0#0                                                  aggregate%array_len%0#0
        itob                                                                            as_bytes%0#0
        v-store as_bytes%0#0
        v-load as_bytes%0#0                                                             as_bytes%0#0
        extract 6 2                                                                     as_u16_bytes%0#0
        v-store as_u16_bytes%0#0
        v-load as_u16_bytes%0#0                                                         as_u16_bytes%0#0
        v-load extract_to_end%0#0                                                       as_u16_bytes%0#0,extract_to_end%0#0
        concat                                                                          arr5#0
        v-store arr5#0
        // mutable_native_types/contract.py:212
        // assert arr == arr5, "expected arrays to be the same"
        v-load arr#0                                                                    arr#0
        v-load arr5#0                                                                   arr#0,arr5#0
        ==                                                                              tmp%8#0
        v-store tmp%8#0
        v-load tmp%8#0                                                                  tmp%8#0
        assert // expected arrays to be the same
        // mutable_native_types/contract.py:218
        // fixed_struct = FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 2)
        txn NumAppArgs                                                                  tmp%12#0
        v-store tmp%12#0
        v-load tmp%12#0                                                                 tmp%12#0
        int 1                                                                           tmp%12#0,1
        +                                                                               tmp%13#0
        v-store tmp%13#0
        txn NumAppArgs                                                                  tmp%14#0
        v-store tmp%14#0
        v-load tmp%14#0                                                                 tmp%14#0
        int 2                                                                           tmp%14#0,2
        +                                                                               tmp%15#0
        v-store tmp%15#0
        v-load tmp%13#0                                                                 tmp%13#0
        itob                                                                            aggregate%val_as_bytes%0#0
        v-store aggregate%val_as_bytes%0#0
        v-load tmp%15#0                                                                 tmp%15#0
        itob                                                                            aggregate%val_as_bytes%1#0
        v-store aggregate%val_as_bytes%1#0
        v-load aggregate%val_as_bytes%0#0                                               aggregate%val_as_bytes%0#0
        v-load aggregate%val_as_bytes%1#0                                               aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        concat                                                                          fixed_struct#0
        v-store fixed_struct#0
        // mutable_native_types/contract.py:219
        // arr2.append(fixed_struct)
        v-load arr#0                                                                    arr#0
        v-load fixed_struct#0                                                           arr#0,fixed_struct#0
        concat // on error: max array length exceeded                                   concat%1#0
        v-store concat%1#0
        v-load aggregate%array_length%0#0                                               aggregate%array_length%0#0
        int 1                                                                           aggregate%array_length%0#0,1
        +                                                                               add%0#0
        v-store add%0#0
        v-load add%0#0                                                                  add%0#0
        itob                                                                            as_bytes%1#0
        v-store as_bytes%1#0
        v-load as_bytes%1#0                                                             as_bytes%1#0
        extract 6 2                                                                     as_u16_bytes%1#0
        v-store as_u16_bytes%1#0
        v-load concat%1#0                                                               concat%1#0
        v-load as_u16_bytes%1#0                                                         concat%1#0,as_u16_bytes%1#0
        replace2 0                                                                      arr2#1
        v-store arr2#1
        // mutable_native_types/contract.py:220
        // assert arr2.length == 1, "expected array to have 1 item"
        v-load arr2#1                                                                   arr2#1
        int 0                                                                           arr2#1,0
        extract_uint16                                                                  aggregate%array_length%2#0
        v-store aggregate%array_length%2#0
        v-load aggregate%array_length%2#0                                               aggregate%array_length%2#0
        int 1                                                                           aggregate%array_length%2#0,1
        ==                                                                              tmp%19#0
        v-store tmp%19#0
        v-load tmp%19#0                                                                 tmp%19#0
        assert // expected array to have 1 item
        // mutable_native_types/contract.py:221
        // assert sum_frozen_arr(arr2.freeze()) == 7, "expected sum to be 7"
        v-load arr2#1                                                                   arr2#1
        callsub sum_frozen_arr                                                          tmp%21#0
        v-store tmp%21#0
        v-load tmp%21#0                                                                 tmp%21#0
        int 7                                                                           tmp%21#0,7
        ==                                                                              tmp%22#0
        v-store tmp%22#0
        v-load tmp%22#0                                                                 tmp%22#0
        assert // expected sum to be 7
        // mutable_native_types/contract.py:222
        // assert arr != arr2, "expected arrays to be different"
        v-load arr#0                                                                    arr#0
        v-load arr2#1                                                                   arr#0,arr2#1
        !=                                                                              tmp%23#0
        v-store tmp%23#0
        v-load tmp%23#0                                                                 tmp%23#0
        assert // expected arrays to be different
        // mutable_native_types/contract.py:224
        // arr7 = Array[FixedStruct]((arr2[0],))
        v-load arr2#1                                                                   arr2#1
        extract 2 0                                                                     aggregate%array_trimmed%0#0
        v-store aggregate%array_trimmed%0#0
        v-load arr2#1                                                                   arr2#1
        extract 2 16                                                                    aggregate%encoded_element%0#0
        v-store aggregate%encoded_element%0#0
        byte 0x0001                                                                     0x0001
        v-load aggregate%encoded_element%0#0                                            0x0001,aggregate%encoded_element%0#0
        concat                                                                          arr7#0
        v-store arr7#0
        // mutable_native_types/contract.py:225
        // assert arr2 == arr7, "expected arrays to be the same"
        v-load arr2#1                                                                   arr2#1
        v-load arr7#0                                                                   arr2#1,arr7#0
        ==                                                                              tmp%24#0
        v-store tmp%24#0
        v-load tmp%24#0                                                                 tmp%24#0
        assert // expected arrays to be the same
        // mutable_native_types/contract.py:227
        // arr8 = Array[FixedStruct]()
        byte 0x0000                                                                     0x0000
        v-store arr8#0
        byte 0x0000                                                                     0x0000
        // mutable_native_types/contract.py:228
        // arr8 += arr2
        v-load aggregate%array_trimmed%0#0                                              0x0000,aggregate%array_trimmed%0#0
        concat // on error: max array length exceeded                                   concat%2#0
        v-store concat%2#0
        v-load concat%2#0                                                               concat%2#0
        extract 2 0                                                                     extract_to_end%2#0
        v-store extract_to_end%2#0
        v-load extract_to_end%2#0                                                       extract_to_end%2#0
        len                                                                             len%0#0
        v-store len%0#0
        v-load len%0#0                                                                  len%0#0
        int 16                                                                          len%0#0,16
        /                                                                               div_floor%0#0
        v-store div_floor%0#0
        v-load div_floor%0#0                                                            div_floor%0#0
        itob                                                                            as_bytes%2#0
        v-store as_bytes%2#0
        v-load as_bytes%2#0                                                             as_bytes%2#0
        extract 6 2                                                                     as_u16_bytes%2#0
        v-store as_u16_bytes%2#0
        v-load concat%2#0                                                               concat%2#0
        v-load as_u16_bytes%2#0                                                         concat%2#0,as_u16_bytes%2#0
        replace2 0                                                                      arr8#1
        v-store arr8#1
        // mutable_native_types/contract.py:229
        // assert arr2 == arr8, "expected arrays to be the same"
        v-load arr2#1                                                                   arr2#1
        v-load arr8#1                                                                   arr2#1,arr8#1
        ==                                                                              tmp%25#0
        v-store tmp%25#0
        v-load tmp%25#0                                                                 tmp%25#0
        assert // expected arrays to be the same
        // mutable_native_types/contract.py:236
        // for _i in urange(3):
        int 0                                                                           0
        v-store _i#0
        v-load arr8#0                                                                   arr8#0
        v-store arr2#1
        b test_arr_for_header@4

    test_arr_for_header@4:
        // mutable_native_types/contract.py:236
        // for _i in urange(3):
        v-load _i#0                                                                     _i#0
        int 3                                                                           _i#0,3
        <                                                                               continue_looping%0#0
        v-store continue_looping%0#0
        v-load continue_looping%0#0                                                     continue_looping%0#0
        bz test_arr_after_for@7 ; b test_arr_for_body@5

    test_arr_for_body@5:
        // mutable_native_types/contract.py:237
        // arr2.append(fixed_struct)
        v-load arr2#1                                                                   arr2#1
        v-load fixed_struct#0                                                           arr2#1,fixed_struct#0
        concat // on error: max array length exceeded                                   concat%3#0
        v-store concat%3#0
        v-load arr2#1                                                                   arr2#1
        int 0                                                                           arr2#1,0
        extract_uint16                                                                  extract_uint16%1#0
        v-store extract_uint16%1#0
        v-load extract_uint16%1#0                                                       extract_uint16%1#0
        int 1                                                                           extract_uint16%1#0,1
        +                                                                               add%1#0
        v-store add%1#0
        v-load add%1#0                                                                  add%1#0
        itob                                                                            as_bytes%3#0
        v-store as_bytes%3#0
        v-load as_bytes%3#0                                                             as_bytes%3#0
        extract 6 2                                                                     as_u16_bytes%3#0
        v-store as_u16_bytes%3#0
        v-load concat%3#0                                                               concat%3#0
        v-load as_u16_bytes%3#0                                                         concat%3#0,as_u16_bytes%3#0
        replace2 0                                                                      arr2#1
        v-store arr2#1
        // mutable_native_types/contract.py:236
        // for _i in urange(3):
        v-load _i#0                                                                     _i#0
        int 1                                                                           _i#0,1
        +                                                                               _i#0
        v-store _i#0
        b test_arr_for_header@4

    test_arr_after_for@7:
        // mutable_native_types/contract.py:239
        // assert arr2.length == 3, "expected 3 elements"
        v-load arr2#1                                                                   arr2#1
        int 0                                                                           arr2#1,0
        extract_uint16                                                                  array_length#0
        v-store array_length#0
        v-load array_length#0                                                           array_length#0
        int 3                                                                           array_length#0,3
        ==                                                                              tmp%32#0
        v-store tmp%32#0
        v-load tmp%32#0                                                                 tmp%32#0
        assert // expected 3 elements
        // mutable_native_types/contract.py:242
        // assert sum_frozen_arr(frozen1) == 21, "expected sum to be 21"
        v-load arr2#1                                                                   arr2#1
        callsub sum_frozen_arr                                                          tmp%34#0
        v-store tmp%34#0
        v-load tmp%34#0                                                                 tmp%34#0
        int 21                                                                          tmp%34#0,21
        ==                                                                              tmp%35#0
        v-store tmp%35#0
        v-load tmp%35#0                                                                 tmp%35#0
        assert // expected sum to be 21
        v-load array_length#0                                                           array_length#0
        int 1                                                                           array_length#0,1
        -                                                                               length_minus_1#0
        v-store length_minus_1#0
        v-load length_minus_1#0                                                         length_minus_1#0
        itob                                                                            tmp%2#1
        v-store tmp%2#1
        v-load tmp%2#1                                                                  tmp%2#1
        extract 6 0                                                                     tmp%3#1
        v-store tmp%3#1
        v-load arr2#1                                                                   arr2#1
        v-load tmp%3#1                                                                  arr2#1,tmp%3#1
        replace2 0                                                                      result#0
        v-store result#0
        v-load result#0                                                                 result#0
        len                                                                             tmp%5#1
        v-store tmp%5#1
        v-load tmp%5#1                                                                  tmp%5#1
        // mutable_native_types/contract.py:244
        // arr2.pop()
        int 16                                                                          tmp%5#1,16
        -                                                                               item_location#0
        v-store item_location#0
        v-load result#0                                                                 result#0
        int 0                                                                           result#0,0
        v-load item_location#0                                                          result#0,0,item_location#0
        substring3                                                                      result#0
        v-store result#0
        // mutable_native_types/contract.py:246
        // assert sum_frozen_arr(frozen1) == 21, "expected sum to be 21"
        v-load arr2#1                                                                   arr2#1
        callsub sum_frozen_arr                                                          tmp%39#0
        v-store tmp%39#0
        v-load tmp%39#0                                                                 tmp%39#0
        int 21                                                                          tmp%39#0,21
        ==                                                                              tmp%40#0
        v-store tmp%40#0
        v-load tmp%40#0                                                                 tmp%40#0
        assert // expected sum to be 21
        // mutable_native_types/contract.py:247
        // assert sum_frozen_arr(frozen2) == 14, "expected sum to be 14"
        v-load result#0                                                                 result#0
        callsub sum_frozen_arr                                                          tmp%41#0
        v-store tmp%41#0
        v-load tmp%41#0                                                                 tmp%41#0
        int 14                                                                          tmp%41#0,14
        ==                                                                              tmp%42#0
        v-store tmp%42#0
        v-load tmp%42#0                                                                 tmp%42#0
        assert // expected sum to be 14
        // mutable_native_types/contract.py:248
        // frozen2 += frozen2
        v-load result#0                                                                 result#0
        extract 2 0                                                                     extract_to_end%3#0
        v-store extract_to_end%3#0
        v-load result#0                                                                 result#0
        v-load extract_to_end%3#0                                                       result#0,extract_to_end%3#0
        concat // on error: max array length exceeded                                   concat%4#0
        v-store concat%4#0
        v-load concat%4#0                                                               concat%4#0
        extract 2 0                                                                     extract_to_end%4#0
        v-store extract_to_end%4#0
        v-load extract_to_end%4#0                                                       extract_to_end%4#0
        len                                                                             len%1#0
        v-store len%1#0
        v-load len%1#0                                                                  len%1#0
        int 16                                                                          len%1#0,16
        /                                                                               div_floor%1#0
        v-store div_floor%1#0
        v-load div_floor%1#0                                                            div_floor%1#0
        itob                                                                            as_bytes%4#0
        v-store as_bytes%4#0
        v-load as_bytes%4#0                                                             as_bytes%4#0
        extract 6 2                                                                     as_u16_bytes%4#0
        v-store as_u16_bytes%4#0
        v-load concat%4#0                                                               concat%4#0
        v-load as_u16_bytes%4#0                                                         concat%4#0,as_u16_bytes%4#0
        replace2 0                                                                      frozen2#1
        v-store frozen2#1
        // mutable_native_types/contract.py:249
        // assert sum_frozen_arr(frozen2) == 28, "and the sum shall be 41"
        v-load frozen2#1                                                                frozen2#1
        callsub sum_frozen_arr                                                          tmp%43#0
        v-store tmp%43#0
        v-load tmp%43#0                                                                 tmp%43#0
        int 28                                                                          tmp%43#0,28
        ==                                                                              tmp%44#0
        v-store tmp%44#0
        v-load tmp%44#0                                                                 tmp%44#0
        assert // and the sum shall be 41
        // mutable_native_types/contract.py:251
        // self.arr = arr2.copy()
        byte "arr"                                                                      "arr"
        v-load result#0                                                                 "arr",result#0
        app_global_put
        // mutable_native_types/contract.py:256
        // arr11.append(fixed_struct)
        v-load fixed_struct#0                                                           fixed_struct#0
        v-store slot%1
        // mutable_native_types/contract.py:257
        // assert arr11
        v-load fixed_struct#0                                                           fixed_struct#0
        len                                                                             aggregate%bytes_len%3#0
        v-store aggregate%bytes_len%3#0
        v-load aggregate%bytes_len%3#0                                                  aggregate%bytes_len%3#0
        int 16                                                                          aggregate%bytes_len%3#0,16
        /                                                                               aggregate%array_len%3#0
        v-store aggregate%array_len%3#0
        v-load aggregate%array_len%3#0                                                  aggregate%array_len%3#0
        assert
        // mutable_native_types/contract.py:197
        // @arc4.abimethod()
        byte 0x151f7c75                                                                 0x151f7c75
        v-load result#0                                                                 0x151f7c75,result#0
        concat                                                                          tmp%1#0
        v-store tmp%1#0
        v-load tmp%1#0                                                                  tmp%1#0
        log
        int 1                                                                           1
        return


