main test_cases.mutable_native_types.contract.Contract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (txn NumAppArgs)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#2)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%1#1)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let tmp%3#0: uint64 = (txn NumAppArgs)
        let tmp%4#0: uint64 = (+ tmp%3#0 1u)
        let tmp%5#0: uint64 = (txn NumAppArgs)
        let tmp%6#0: uint64 = (+ tmp%5#0 1u)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%4#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%6#0)
        let aggregate%head%3#0: bytes = (concat aggregate%val_as_bytes%2#0 aggregate%val_as_bytes%3#0)
        let tmp%8#0: uint64 = (txn NumAppArgs)
        let tmp%9#0: uint64 = (+ tmp%8#0 1u)
        let tmp%10#0: uint64 = (txn NumAppArgs)
        let tmp%11#0: uint64 = (+ tmp%10#0 1u)
        let aggregate%head%5#0: bytes = (concat aggregate%head%1#0 aggregate%head%3#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%9#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%11#0)
        let aggregate%head%7#0: bytes = (concat aggregate%val_as_bytes%4#0 aggregate%val_as_bytes%5#0)
        let aggregate%head%8#0: bytes = (concat aggregate%head%5#0 aggregate%head%7#0)
        (app_global_put "nested" aggregate%head%8#0)
        let tmp%13#0: uint64 = (txn NumAppArgs)
        let tmp%14#0: uint64 = (txn NumAppArgs)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob tmp%13#0)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob tmp%14#0)
        let aggregate%head%10#0: bytes = (concat aggregate%val_as_bytes%6#0 aggregate%val_as_bytes%7#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%10#0 0x00160018001a000000000000)
        (app_global_put "dyn" aggregate%concat%2#0)
        (app_global_put "num_payments" 0u)
        let tmp%16#0: Encoded((uint8[32],uint64,uint64)[2]) = (bzero 96u)
        (app_global_put "payments" tmp%16#0)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#3: uint64 = (txn NumAppArgs)
        goto tmp%0#3 ? block@4 : block@17
    block@4: // abi_routing_L71
        let tmp%2#1: bytes = (txna ApplicationArgs 0)
        switch tmp%2#1 {method "test_imm_fixed_array()void" => block@5, method "fixed_initialize()void" => block@6, method "add_payment((address,uint64,uint64))void" => block@7, method "increment_payment(uint64,uint64)void" => block@8, method "create_storage(uint64)void" => block@9, method "local_struct()(address,uint64,uint64)" => block@10, method "delete_storage(uint64)void" => block@11, method "struct_arg(uint64,(uint64,uint64))void" => block@12, method "struct_return()(uint64,uint64)" => block@13, method "tup_return()(uint64,uint64)" => block@14, method "calculate_sum()uint64" => block@15, method "test_arr((uint64,uint64)[])(uint64,uint64)[]" => block@16, * => block@19}
    block@5: // test_imm_fixed_array_route_L95
        let tmp%3#1: uint64 = (txn OnCompletion)
        let tmp%4#1: bool = (! tmp%3#1)
        (assert tmp%4#1) // OnCompletion is not NoOp
        let tmp%5#1: uint64 = (txn ApplicationID)
        (assert tmp%5#1) // can only call when not creating
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        goto block@20
    block@6: // fixed_initialize_route_L101
        let tmp%7#1: uint64 = (txn OnCompletion)
        let tmp%8#1: bool = (! tmp%7#1)
        (assert tmp%8#1) // OnCompletion is not NoOp
        let tmp%9#1: uint64 = (txn ApplicationID)
        (assert tmp%9#1) // can only call when not creating
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#1: bool = 1u
        goto block@20
    block@7: // add_payment_route_L131
        let tmp%11#1: uint64 = (txn OnCompletion)
        let tmp%12#1: bool = (! tmp%11#1)
        (assert tmp%12#1) // OnCompletion is not NoOp
        let tmp%13#1: uint64 = (txn ApplicationID)
        (assert tmp%13#1) // can only call when not creating
        let reinterpret_Encoded(uint8[32],uint64,uint64)%0#0: Encoded(uint8[32],uint64,uint64) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.contract.Contract.add_payment(reinterpret_Encoded(uint8[32],uint64,uint64)%0#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#2: bool = 1u
        goto block@20
    block@8: // increment_payment_route_L137
        let tmp%15#1: uint64 = (txn OnCompletion)
        let tmp%16#1: bool = (! tmp%15#1)
        (assert tmp%16#1) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%19#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%20#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        test_cases.mutable_native_types.contract.Contract.increment_payment(tmp%19#0, tmp%20#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#3: bool = 1u
        goto block@20
    block@9: // create_storage_route_L142
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (! tmp%21#0)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        (assert tmp%23#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%25#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        test_cases.mutable_native_types.contract.Contract.create_storage(tmp%25#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#4: bool = 1u
        goto block@20
    block@10: // local_struct_route_L149
        let tmp%26#0: uint64 = (txn OnCompletion)
        let tmp%27#0: bool = (! tmp%26#0)
        (assert tmp%27#0) // OnCompletion is not NoOp
        let tmp%28#0: uint64 = (txn ApplicationID)
        (assert tmp%28#0) // can only call when not creating
        let tmp%30#0: Encoded(uint8[32],uint64,uint64) = test_cases.mutable_native_types.contract.Contract.local_struct()
        let tmp%31#0: bytes = (concat 0x151f7c75 tmp%30#0)
        (log tmp%31#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#5: bool = 1u
        goto block@20
    block@11: // delete_storage_route_L161
        let tmp%32#0: uint64 = (txn OnCompletion)
        let tmp%33#0: bool = (! tmp%32#0)
        (assert tmp%33#0) // OnCompletion is not NoOp
        let tmp%34#0: uint64 = (txn ApplicationID)
        (assert tmp%34#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%36#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        test_cases.mutable_native_types.contract.Contract.delete_storage(tmp%36#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#6: bool = 1u
        goto block@20
    block@12: // struct_arg_route_L168
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (! tmp%37#0)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        (assert tmp%39#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%41#0: uint64 = (btoi reinterpret_Encoded(uint64)%4#0)
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 2)
        test_cases.mutable_native_types.contract.Contract.struct_arg(tmp%41#0, reinterpret_Encoded(uint64,uint64)%0#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#7: bool = 1u
        goto block@20
    block@13: // struct_return_route_L178
        let tmp%42#0: uint64 = (txn OnCompletion)
        let tmp%43#0: bool = (! tmp%42#0)
        (assert tmp%43#0) // OnCompletion is not NoOp
        let tmp%44#0: uint64 = (txn ApplicationID)
        (assert tmp%44#0) // can only call when not creating
        let tmp%46#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.contract.Contract.struct_return()
        let tmp%47#0: bytes = (concat 0x151f7c75 tmp%46#0)
        (log tmp%47#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#8: bool = 1u
        goto block@20
    block@14: // tup_return_route_L182
        let tmp%48#0: uint64 = (txn OnCompletion)
        let tmp%49#0: bool = (! tmp%48#0)
        (assert tmp%49#0) // OnCompletion is not NoOp
        let tmp%50#0: uint64 = (txn ApplicationID)
        (assert tmp%50#0) // can only call when not creating
        let (tmp%52#0: uint64, tmp%53#0: uint64) = test_cases.mutable_native_types.contract.Contract.tup_return()
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob tmp%52#0)
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob tmp%53#0)
        let aggregate%head%15#0: bytes = (concat aggregate%val_as_bytes%8#0 aggregate%val_as_bytes%9#0)
        let tmp%55#0: bytes = (concat 0x151f7c75 aggregate%head%15#0)
        (log tmp%55#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#9: bool = 1u
        goto block@20
    block@15: // calculate_sum_route_L186
        let tmp%56#0: uint64 = (txn OnCompletion)
        let tmp%57#0: bool = (! tmp%56#0)
        (assert tmp%57#0) // OnCompletion is not NoOp
        let tmp%58#0: uint64 = (txn ApplicationID)
        (assert tmp%58#0) // can only call when not creating
        let tmp%60#0: uint64 = test_cases.mutable_native_types.contract.Contract.calculate_sum()
        let aggregate%val_as_bytes%10#0: bytes[8] = (itob tmp%60#0)
        let tmp%62#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%10#0)
        (log tmp%62#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#10: bool = 1u
        goto block@20
    block@16: // test_arr_route_L197
        let tmp%63#0: uint64 = (txn OnCompletion)
        let tmp%64#0: bool = (! tmp%63#0)
        (assert tmp%64#0) // OnCompletion is not NoOp
        let tmp%65#0: uint64 = (txn ApplicationID)
        (assert tmp%65#0) // can only call when not creating
        let reinterpret_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        let tmp%67#0: Encoded(len+(uint64,uint64)[]) = test_cases.mutable_native_types.contract.Contract.test_arr(reinterpret_Encoded(len+(uint64,uint64)[])%0#0)
        let tmp%68#0: bytes = (concat 0x151f7c75 tmp%67#0)
        (log tmp%68#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#11: bool = 1u
        goto block@20
    block@17: // bare_routing_L71
        let tmp%69#0: uint64 = (txn OnCompletion)
        goto tmp%69#0 ? block@19 : block@18
    block@18: // __algopy_default_create_L1
        let tmp%70#0: uint64 = (txn ApplicationID)
        let tmp%71#0: bool = (! tmp%70#0)
        (assert tmp%71#0) // can only call when creating
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#12: bool = 1u
        goto block@20
    block@19: // after_if_else_L71
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#13: bool = 0u
        goto block@20
    block@20: // after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router___L1
        let tmp%0#1: bool = φ(test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0 <- block@5, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#1 <- block@6, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#2 <- block@7, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#3 <- block@8, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#4 <- block@9, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#5 <- block@10, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#6 <- block@11, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#7 <- block@12, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#8 <- block@13, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#9 <- block@14, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#10 <- block@15, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#11 <- block@16, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#12 <- block@18, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#13 <- block@19)
        return tmp%0#1

subroutine test_cases.mutable_native_types.contract.sum_frozen_arr(arr: Encoded(len+(uint64,uint64)[])) -> uint64:
    block@0: // L260
        let total#0: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L263
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let total#1: uint64 = φ(total#0 <- block@0, total#3 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L264
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) arr#0)
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#1 16u)
        let element#0: Encoded(uint64,uint64) = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let values%1#0: uint64 = (extract_uint64 element#0 0u)
        let total#2: uint64 = (+ total#1 values%1#0)
        let values%2#0: uint64 = (extract_uint64 element#0 8u)
        let total#3: uint64 = (+ total#2 values%2#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L263
        return total#1

subroutine test_cases.mutable_native_types.contract.do_something(pay: Encoded(uint8[32],uint64,uint64)) -> Encoded(uint8[32],uint64,uint64):
    block@0: // L274
        return pay#0

subroutine test_cases.mutable_native_types.contract.Contract.add_payment(pay: Encoded(uint8[32],uint64,uint64)) -> void:
    block@0: // L131
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%0#0) // check self.num_payments exists
        let tmp%0#0: bool = (< maybe_value%0#0 2u)
        (assert tmp%0#0) // too many payments
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "payments")
        (assert maybe_exists%1#0) // check self.payments exists
        let aggregate%write_offset%0#0: uint64 = (* maybe_value%0#0 48u)
        let aggregate%updated_array%0#0: bytes = (replace3 maybe_value%1#0 aggregate%write_offset%0#0 pay#0)
        (app_global_put "payments" aggregate%updated_array%0#0)
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%3#0) // check self.num_payments exists
        let tmp%1#0: uint64 = (+ maybe_value%3#0 1u)
        (app_global_put "num_payments" tmp%1#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.increment_payment(index: uint64, amt: uint64) -> void:
    block@0: // L137
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%0#0) // check self.num_payments exists
        let tmp%0#0: bool = (< index#0 maybe_value%0#0)
        (assert tmp%0#0) // invalid payment index
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "payments")
        (assert maybe_exists%1#0) // check self.payments exists
        let aggregate%bytes_offset%0#0: uint64 = (* index#0 48u)
        let aggregate%encoded_element%0#0: bytes = (extract3 maybe_value%1#0 aggregate%bytes_offset%0#0 48u) // on error: index access is out of bounds
        let values%1#0: uint64 = (extract_uint64 aggregate%encoded_element%0#0 40u)
        let tmp%1#0: uint64 = (+ values%1#0 amt#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%updated_data%0#0: bytes = ((replace2 40) aggregate%encoded_element%0#0 aggregate%val_as_bytes%0#0)
        let aggregate%updated_array%0#0: bytes = (replace3 maybe_value%1#0 aggregate%bytes_offset%0#0 aggregate%updated_data%0#0)
        (app_global_put "payments" aggregate%updated_array%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.create_storage(box_key: uint64) -> void:
    block@0: // L142
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        (app_global_put 0x70 maybe_value%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%1#0) // check self.nested exists
        let tmp%0#0: account = (txn Sender)
        (app_local_put tmp%0#0 0x6c maybe_value%1#0)
        let tmp%1#0: bool = (box_create "box" 2064u)
        (assert tmp%1#0) // expected box to not exist
        let aggregate%extract%0#0: bytes = ((extract 0 16) maybe_value%1#0)
        let encoded_value%0#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#0)
        (box_replace box_prefixed_key%0#0 0u aggregate%extract%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.local_struct() -> Encoded(uint8[32],uint64,uint64):
    block@0: // L149
        let tmp%0#0: account = (txn Sender)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1234u)
        let aggregate%head%1#0: bytes = (concat tmp%0#0 aggregate%val_as_bytes%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 567u)
        let a#0: Encoded(uint8[32],uint64,uint64) = (concat aggregate%head%1#0 aggregate%val_as_bytes%1#0)
        let foo#0: account = ((extract 0 32) a#0)
        let bar#0: uint64 = (extract_uint64 a#0 32u)
        let baz#0: uint64 = (extract_uint64 a#0 40u)
        let tmp%2#0: account = (global ZeroAddress)
        let tmp%3#0: bool = (!= foo#0 tmp%2#0)
        (assert tmp%3#0) // use foo
        (assert bar#0) // use bar
        (assert baz#0) // use baz
        let a#1: Encoded(uint8[32],uint64,uint64) = test_cases.mutable_native_types.contract.do_something(a#0)
        return a#1

subroutine test_cases.mutable_native_types.contract.Contract.delete_storage(box_key: uint64) -> void:
    block@0: // L161
        (app_global_del 0x70)
        let tmp%0#0: account = (txn Sender)
        (app_local_del tmp%0#0 0x6c)
        (box_del "box")
        let encoded_value%0#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#0)
        (box_del box_prefixed_key%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.struct_arg(box_key: uint64, a: Encoded(uint64,uint64)) -> void:
    block@0: // L168
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let aggregate%updated_data%0#0: bytes = ((replace2 0) maybe_value%0#0 a#0)
        (app_global_put "nested" aggregate%updated_data%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u 0x70)
        (assert maybe_exists%1#0) // check self.nested_proxy exists
        let aggregate%updated_data%1#0: bytes = ((replace2 0) maybe_value%1#0 a#0)
        (app_global_put 0x70 aggregate%updated_data%1#0)
        let tmp%0#0: account = (txn Sender)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_local_get_ex tmp%0#0 0u 0x6c)
        (assert maybe_exists%2#0) // check self.nested_local exists for account
        let aggregate%updated_data%2#0: bytes = ((replace2 0) maybe_value%2#0 a#0)
        (app_local_put tmp%0#0 0x6c aggregate%updated_data%2#0)
        (box_replace "box" 0u a#0)
        let encoded_value%4#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%4#0)
        (box_replace box_prefixed_key%0#0 0u a#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.struct_return() -> Encoded(uint64,uint64):
    block@0: // L178
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let aggregate%extract%0#0: bytes = ((extract 0 16) maybe_value%0#0)
        return aggregate%extract%0#0

subroutine test_cases.mutable_native_types.contract.Contract.tup_return() -> <uint64, uint64>:
    block@0: // L182
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let aggregate%extract%0#0: bytes = ((extract 32 16) maybe_value%0#0)
        let aggregate%item0%0#0: uint64 = (extract_uint64 aggregate%extract%0#0 0u)
        let aggregate%item1%0#0: uint64 = (extract_uint64 aggregate%extract%0#0 8u)
        return aggregate%item0%0#0 aggregate%item1%0#0

subroutine test_cases.mutable_native_types.contract.Contract.calculate_sum() -> uint64:
    block@0: // L186
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let fixed_a#0: Encoded(uint64,uint64) = ((extract 0 16) maybe_value%0#0)
        let fixed_b#0: Encoded(uint64,uint64) = ((extract 16 16) maybe_value%0#0)
        let values%0#0: uint64 = (extract_uint64 fixed_a#0 0u)
        let values%1#0: uint64 = (extract_uint64 fixed_a#0 8u)
        let tmp%0#1: uint64 = (+ values%0#0 values%1#0)
        let values%0#1: uint64 = (extract_uint64 fixed_b#0 0u)
        let values%1#1: uint64 = (extract_uint64 fixed_b#0 8u)
        let tmp%0#2: uint64 = (+ values%0#1 values%1#1)
        let result#0: uint64 = (+ tmp%0#1 tmp%0#2)
        let tmp%3#0: bool = (< result#0 100u)
        goto tmp%3#0 ? block@1 : block@2
    block@1: // if_body_L192
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%2#0) // check self.nested exists
        let aggregate%extract%2#0: bytes = ((extract 32 16) maybe_value%2#0)
        let c#0: uint64 = (extract_uint64 aggregate%extract%2#0 0u)
        let d#0: uint64 = (extract_uint64 aggregate%extract%2#0 8u)
        let result#1: uint64 = (+ result#0 c#0)
        let result#2: uint64 = (+ result#1 d#0)
        goto block@2
    block@2: // after_if_else_L191
        let result#3: uint64 = φ(result#0 <- block@0, result#2 <- block@1)
        return result#3

subroutine test_cases.mutable_native_types.contract.Contract.test_arr(arr: Encoded(len+(uint64,uint64)[])) -> Encoded(len+(uint64,uint64)[]):
    block@0: // L197
        let array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%0#0: bool = (! array_length%0#0)
        (assert tmp%0#0) // expected empty array
        let extract_to_end%0#0: bytes = ((extract 2 0) arr#0)
        store(local.0, extract_to_end%0#0)
        let bytes_len%0#0: uint64 = (len extract_to_end%0#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 16u)
        let tmp%3#0: bool = (== array_length%0#0 array_len%0#0)
        (assert tmp%3#0) // expected arrays to be the same length
        let as_bytes%0#0: bytes[8] = (itob array_len%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr5#0: Encoded(len+(uint64,uint64)[]) = (concat as_u16_bytes%0#0 extract_to_end%0#0)
        let tmp%4#0: bool = (== arr#0 arr5#0)
        (assert tmp%4#0) // expected arrays to be the same
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: uint64 = (+ tmp%6#0 1u)
        let tmp%8#0: uint64 = (txn NumAppArgs)
        let tmp%9#0: uint64 = (+ tmp%8#0 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%7#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%9#0)
        let fixed_struct#0: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let concat%1#0: Encoded(len+(uint64,uint64)[]) = (concat arr#0 fixed_struct#0) // on error: max array length exceeded
        let add%0#0: uint64 = (+ array_length%0#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr2#1: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let array_length%5#0: uint64 = (extract_uint16 arr2#1 0u)
        let tmp%12#0: bool = (== array_length%5#0 1u)
        (assert tmp%12#0) // expected array to have 1 item
        let tmp%13#0: uint64 = test_cases.mutable_native_types.contract.sum_frozen_arr(arr2#1)
        let tmp%14#0: bool = (== tmp%13#0 7u)
        (assert tmp%14#0) // expected sum to be 7
        let tmp%15#0: bool = (!= arr#0 arr2#1)
        (assert tmp%15#0) // expected arrays to be different
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) arr2#1)
        let aggregate%encoded_element%0#0: bytes = ((extract 2 16) arr2#1)
        let arr7#0: Encoded(len+(uint64,uint64)[]) = (concat 0x0001 aggregate%encoded_element%0#0)
        let tmp%16#0: bool = (== arr2#1 arr7#0)
        (assert tmp%16#0) // expected arrays to be the same
        let arr8#0: Encoded(len+(uint64,uint64)[]) = 0x0000
        let concat%2#0: Encoded(len+(uint64,uint64)[]) = (concat 0x0000 aggregate%array_trimmed%0#0) // on error: max array length exceeded
        let extract_to_end%2#0: bytes = ((extract 2 0) concat%2#0)
        let len%0#0: uint64 = (len extract_to_end%2#0)
        let div_floor%0#0: uint64 = (/ len%0#0 16u)
        let as_bytes%2#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let arr8#1: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%2#0 as_u16_bytes%2#0)
        let tmp%17#0: bool = (== arr2#1 arr8#1)
        (assert tmp%17#0) // expected arrays to be the same
        let _i#0: uint64 = 0u
        goto block@3
    block@3: // for_header_L236
        let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@4)
        let arr2#3: Encoded(len+(uint64,uint64)[]) = φ(arr8#0 <- block@0, arr2#4 <- block@4)
        let continue_looping%0#0: bool = (< _i#1 3u)
        goto continue_looping%0#0 ? block@4 : block@6
    block@4: // for_body_L237
        let concat%3#0: Encoded(len+(uint64,uint64)[]) = (concat arr2#3 fixed_struct#0) // on error: max array length exceeded
        let extract_uint16%1#0: uint64 = (extract_uint16 arr2#3 0u)
        let add%1#0: uint64 = (+ extract_uint16%1#0 1u)
        let as_bytes%3#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let arr2#4: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%3#0 as_u16_bytes%3#0)
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@3
    block@6: // after_for_L236
        let array_length#0: uint64 = (extract_uint16 arr2#3 0u)
        let tmp%21#0: bool = (== array_length#0 3u)
        (assert tmp%21#0) // expected 3 elements
        let tmp%22#0: uint64 = test_cases.mutable_native_types.contract.sum_frozen_arr(arr2#3)
        let tmp%23#0: bool = (== tmp%22#0 21u)
        (assert tmp%23#0) // expected sum to be 21
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#1: bytes = (itob length_minus_1#0)
        let tmp%3#1: bytes = ((extract 6 0) tmp%2#1)
        let result#0: bytes = ((replace2 0) arr2#3 tmp%3#1)
        let tmp%5#1: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%5#1 16u)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        let tmp%27#0: uint64 = test_cases.mutable_native_types.contract.sum_frozen_arr(arr2#3)
        let tmp%28#0: bool = (== tmp%27#0 21u)
        (assert tmp%28#0) // expected sum to be 21
        let tmp%29#0: uint64 = test_cases.mutable_native_types.contract.sum_frozen_arr(result#1)
        let tmp%30#0: bool = (== tmp%29#0 14u)
        (assert tmp%30#0) // expected sum to be 14
        (app_global_put "arr" result#1)
        store(local.1, fixed_struct#0)
        let bytes_len%3#0: uint64 = (len fixed_struct#0)
        let array_len%3#0: uint64 = (/ bytes_len%3#0 16u)
        (assert array_len%3#0)
        return result#1