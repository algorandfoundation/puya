main test_cases.mutable_native_types.contract.Contract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.mutable_native_types.contract.Contract.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.mutable_native_types.contract.add(val: bytes[16]) -> uint64:
    block@0: // L166
        let encoded%0#0: bytes = (extract3 val#0 0u 8u) // on error: Index access is out of bounds
        let tmp%0#0: uint64 = (btoi encoded%0#0)
        let encoded%1#0: bytes = (extract3 val#0 8u 8u) // on error: Index access is out of bounds
        let tmp%1#0: uint64 = (btoi encoded%1#0)
        let tmp%2#0: uint64 = (+ tmp%0#0 tmp%1#0)
        return tmp%2#0

subroutine test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__() -> bool:
    block@0: // L65
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@13
    block@1: // abi_routing_L65
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "fixed_initialize()void" => block@2, method "add_payment((address,uint64,uint64))void" => block@3, method "increment_payment(uint64,uint64)void" => block@4, method "create_storage(uint64)void" => block@5, method "delete_storage(uint64)void" => block@6, method "struct_arg(uint64,(uint64,uint64))void" => block@7, method "struct_return()(uint64,uint64)" => block@8, method "tup_return()(uint64,uint64)" => block@9, method "calculate_sum()uint64" => block@10, * => block@11}
    block@2: // fixed_initialize_route_L89
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.mutable_native_types.contract.Contract.fixed_initialize()
        return 1u
    block@3: // add_payment_route_L109
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_bytes[48]%0#0: bytes[48] = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.contract.Contract.add_payment(reinterpret_bytes[48]%0#0)
        return 1u
    block@4: // increment_payment_route_L115
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%15#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%16#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        test_cases.mutable_native_types.contract.Contract.increment_payment(tmp%15#0, tmp%16#0)
        return 1u
    block@5: // create_storage_route_L120
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (== tmp%17#0 NoOp)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // can only call when not creating
        let reinterpret_bytes[8]%2#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%21#0: uint64 = (btoi reinterpret_bytes[8]%2#0)
        test_cases.mutable_native_types.contract.Contract.create_storage(tmp%21#0)
        return 1u
    block@6: // delete_storage_route_L127
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (== tmp%22#0 NoOp)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        let tmp%25#0: bool = (!= tmp%24#0 0u)
        (assert tmp%25#0) // can only call when not creating
        let reinterpret_bytes[8]%3#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%26#0: uint64 = (btoi reinterpret_bytes[8]%3#0)
        test_cases.mutable_native_types.contract.Contract.delete_storage(tmp%26#0)
        return 1u
    block@7: // struct_arg_route_L136
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (== tmp%27#0 NoOp)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        let tmp%30#0: bool = (!= tmp%29#0 0u)
        (assert tmp%30#0) // can only call when not creating
        let reinterpret_bytes[8]%4#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%31#0: uint64 = (btoi reinterpret_bytes[8]%4#0)
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 2)
        test_cases.mutable_native_types.contract.Contract.struct_arg(tmp%31#0, reinterpret_bytes[16]%0#0)
        return 1u
    block@8: // struct_return_route_L146
        let tmp%32#0: uint64 = (txn OnCompletion)
        let tmp%33#0: bool = (== tmp%32#0 NoOp)
        (assert tmp%33#0) // OnCompletion is not NoOp
        let tmp%34#0: uint64 = (txn ApplicationID)
        let tmp%35#0: bool = (!= tmp%34#0 0u)
        (assert tmp%35#0) // can only call when not creating
        let tmp%36#0: bytes[16] = test_cases.mutable_native_types.contract.Contract.struct_return()
        let tmp%37#0: bytes = (concat 0x151f7c75 tmp%36#0)
        (log tmp%37#0)
        return 1u
    block@9: // tup_return_route_L150
        let tmp%38#0: uint64 = (txn OnCompletion)
        let tmp%39#0: bool = (== tmp%38#0 NoOp)
        (assert tmp%39#0) // OnCompletion is not NoOp
        let tmp%40#0: uint64 = (txn ApplicationID)
        let tmp%41#0: bool = (!= tmp%40#0 0u)
        (assert tmp%41#0) // can only call when not creating
        let (elements_to_encode%0#0: uint64, elements_to_encode%1#0: uint64) = test_cases.mutable_native_types.contract.Contract.tup_return()
        let val_as_bytes%0#0: bytes[8] = (itob elements_to_encode%0#0)
        let val_as_bytes%1#0: bytes[8] = (itob elements_to_encode%1#0)
        let current_tail_offset%0#0: uint64 = 16u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        let tmp%42#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%2#0)
        (log tmp%42#0)
        return 1u
    block@10: // calculate_sum_route_L154
        let tmp%43#0: uint64 = (txn OnCompletion)
        let tmp%44#0: bool = (== tmp%43#0 NoOp)
        (assert tmp%44#0) // OnCompletion is not NoOp
        let tmp%45#0: uint64 = (txn ApplicationID)
        let tmp%46#0: bool = (!= tmp%45#0 0u)
        (assert tmp%46#0) // can only call when not creating
        let to_encode%0#0: uint64 = test_cases.mutable_native_types.contract.Contract.calculate_sum()
        let val_as_bytes%2#0: bytes[8] = (itob to_encode%0#0)
        let tmp%47#0: bytes = (concat 0x151f7c75 val_as_bytes%2#0)
        (log tmp%47#0)
        return 1u
    block@11: // switch_case_default_L65
        goto block@12
    block@12: // switch_case_next_L65
        goto block@17
    block@13: // bare_routing_L65
        let tmp%48#0: uint64 = (txn OnCompletion)
        switch tmp%48#0 {0u => block@14, * => block@15}
    block@14: // __algopy_default_create_L1
        let tmp%49#0: uint64 = (txn ApplicationID)
        let tmp%50#0: bool = (== tmp%49#0 0u)
        (assert tmp%50#0) // can only call when creating
        test_cases.mutable_native_types.contract.Contract.__algopy_default_create()
        return 1u
    block@15: // switch_case_default_L65
        goto block@16
    block@16: // switch_case_next_L65
        goto block@17
    block@17: // after_if_else_L65
        return 0u

subroutine test_cases.mutable_native_types.contract.Contract.__init__() -> void:
    block@0: // L66
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let val_as_bytes%1#0: bytes[8] = (itob tmp%1#0)
        let current_tail_offset%0#0: uint64 = 16u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (+ tmp%2#0 1u)
        let tmp%4#0: uint64 = (txn NumAppArgs)
        let tmp%5#0: uint64 = (+ tmp%4#0 1u)
        let val_as_bytes%2#0: bytes[8] = (itob tmp%3#0)
        let val_as_bytes%3#0: bytes[8] = (itob tmp%5#0)
        let current_tail_offset%1#0: uint64 = 16u
        let encoded_tuple_buffer%3#0: bytes[0] = 0x
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 val_as_bytes%2#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 val_as_bytes%3#0)
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: uint64 = (+ tmp%6#0 1u)
        let tmp%8#0: uint64 = (txn NumAppArgs)
        let tmp%9#0: uint64 = (+ tmp%8#0 1u)
        let val_as_bytes%4#0: bytes[8] = (itob tmp%7#0)
        let val_as_bytes%5#0: bytes[8] = (itob tmp%9#0)
        let current_tail_offset%2#0: uint64 = 16u
        let encoded_tuple_buffer%6#0: bytes[0] = 0x
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 val_as_bytes%4#0)
        let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 val_as_bytes%5#0)
        let current_tail_offset%3#0: uint64 = 48u
        let encoded_tuple_buffer%9#0: bytes[0] = 0x
        let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 encoded_tuple_buffer%2#0)
        let encoded_tuple_buffer%11#0: bytes = (concat encoded_tuple_buffer%10#0 encoded_tuple_buffer%5#0)
        let encoded_tuple_buffer%12#0: bytes = (concat encoded_tuple_buffer%11#0 encoded_tuple_buffer%8#0)
        (app_global_put "nested" encoded_tuple_buffer%12#0)
        let tmp%10#0: uint64 = (txn NumAppArgs)
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let val_as_bytes%6#0: bytes[8] = (itob tmp%10#0)
        let val_as_bytes%7#0: bytes[8] = (itob tmp%11#0)
        let length%0#0: uint64 = (len 0x)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x)
        let length%1#0: uint64 = (len "")
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 "")
        let current_tail_offset%4#0: uint64 = 22u
        let encoded_tuple_buffer%13#0: bytes[0] = 0x
        let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 val_as_bytes%6#0)
        let encoded_tuple_buffer%15#0: bytes = (concat encoded_tuple_buffer%14#0 val_as_bytes%7#0)
        let as_bytes%2#0: bytes[8] = (itob current_tail_offset%4#0)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%15#0 offset_as_uint16%0#0)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%5#0: uint64 = (+ current_tail_offset%4#0 data_length%0#0)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%5#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_tuple_buffer%17#0: bytes = (concat encoded_tuple_buffer%16#0 offset_as_uint16%1#0)
        let data_length%1#0: uint64 = (len encoded_value%1#0)
        let current_tail_offset%6#0: uint64 = (+ current_tail_offset%5#0 data_length%1#0)
        let as_bytes%4#0: bytes[8] = (itob current_tail_offset%6#0)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_tuple_buffer%18#0: bytes = (concat encoded_tuple_buffer%17#0 offset_as_uint16%2#0)
        let data_length%2#0: uint64 = (len array_data%0#0)
        let current_tail_offset%7#0: uint64 = (+ current_tail_offset%6#0 data_length%2#0)
        let encoded_tuple_buffer%19#0: bytes = (concat encoded_tuple_buffer%18#0 encoded_value%0#0)
        let encoded_tuple_buffer%20#0: bytes = (concat encoded_tuple_buffer%19#0 encoded_value%1#0)
        let encoded_tuple_buffer%21#0: bytes = (concat encoded_tuple_buffer%20#0 array_data%0#0)
        (app_global_put "dyn" encoded_tuple_buffer%21#0)
        (app_global_put "num_payments" 0u)
        let materialized_values%0#0: bytes[384] = (bzero 384u)
        (app_global_put "payments" materialized_values%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.fixed_initialize() -> void:
    block@0: // L89
        let arr_3#0: bytes[24] = (bzero 24u)
        let assigned_value%0#0: uint64 = 0u
        let val_as_bytes%0#0: bytes[8] = (itob assigned_value%0#0)
        let encoded%0#0: bytes[8] = val_as_bytes%0#0
        let updated_target%0#0: bytes = (replace3 arr_3#0 0u encoded%0#0)
        let arr_3#1: bytes[24] = updated_target%0#0
        let assigned_value%1#0: uint64 = 1u
        let val_as_bytes%1#0: bytes[8] = (itob assigned_value%1#0)
        let encoded%1#0: bytes[8] = val_as_bytes%1#0
        let updated_target%1#0: bytes = (replace3 arr_3#1 8u encoded%1#0)
        let arr_3#2: bytes[24] = updated_target%1#0
        let assigned_value%2#0: uint64 = 2u
        let val_as_bytes%2#0: bytes[8] = (itob assigned_value%2#0)
        let encoded%2#0: bytes[8] = val_as_bytes%2#0
        let updated_target%2#0: bytes = (replace3 arr_3#2 16u encoded%2#0)
        let arr_3#3: bytes[24] = updated_target%2#0
        let val_as_bytes%3#0: bytes[8] = (itob 0u)
        let val_as_bytes%4#0: bytes[8] = (itob 1u)
        let val_as_bytes%5#0: bytes[8] = (itob 2u)
        let result%0#0: bytes = (concat 0x val_as_bytes%3#0)
        let result%1#0: bytes = (concat result%0#0 val_as_bytes%4#0)
        let result%2#0: bytes = (concat result%1#0 val_as_bytes%5#0)
        let array_data%0#0: bytes = (concat 0x result%2#0)
        let arr_3_from_tuple#0: bytes[24] = array_data%0#0
        let tmp%0#0: bool = (== arr_3#3 arr_3_from_tuple#0)
        (assert tmp%0#0) // should be the same
        let copy%0#0: uint64 = 1u
        let copy%1#0: uint64 = 1u
        let copy%2#0: uint64 = 1u
        let val_as_bytes%6#0: bytes[8] = (itob copy%0#0)
        let val_as_bytes%7#0: bytes[8] = (itob copy%1#0)
        let val_as_bytes%8#0: bytes[8] = (itob copy%2#0)
        let result%3#0: bytes = (concat 0x val_as_bytes%6#0)
        let result%4#0: bytes = (concat result%3#0 val_as_bytes%7#0)
        let result%5#0: bytes = (concat result%4#0 val_as_bytes%8#0)
        let array_data%1#0: bytes = (concat 0x result%5#0)
        let arr_3_from_full#0: bytes[24] = array_data%1#0
        let array_head_and_tail%0#0: bytes[24] = arr_3_from_full#0
        let item_offset%0#0: uint64 = (* 0u 8u)
        let encoded%3#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 8u) // on error: Index access is out of bounds
        let tmp%1#0: uint64 = (btoi encoded%3#0)
        let tmp%2#0: bool = (== tmp%1#0 1u)
        (assert tmp%2#0)
        let array_head_and_tail%1#0: bytes[24] = arr_3_from_full#0
        let item_offset%1#0: uint64 = (* 1u 8u)
        let encoded%4#0: bytes = (extract3 array_head_and_tail%1#0 item_offset%1#0 8u) // on error: Index access is out of bounds
        let tmp%3#0: uint64 = (btoi encoded%4#0)
        let tmp%4#0: bool = (== tmp%3#0 1u)
        (assert tmp%4#0)
        let array_head_and_tail%2#0: bytes[24] = arr_3_from_full#0
        let item_offset%2#0: uint64 = (* 2u 8u)
        let encoded%5#0: bytes = (extract3 array_head_and_tail%2#0 item_offset%2#0 8u) // on error: Index access is out of bounds
        let tmp%5#0: uint64 = (btoi encoded%5#0)
        let tmp%6#0: bool = (== tmp%5#0 1u)
        (assert tmp%6#0)
        let copy%3#0: bytes[24] = arr_3#3
        let copy%4#0: bytes[24] = copy%3#0
        let arr_3_from_fixed#0: bytes[24] = copy%4#0
        let tmp%7#0: bool = (== arr_3#3 arr_3_from_fixed#0)
        (assert tmp%7#0) // should be the same
        return 

subroutine test_cases.mutable_native_types.contract.Contract.add_payment(pay: bytes[48]) -> void:
    block@0: // L109
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%0#0) // check self.num_payments exists
        let tmp%0#0: bool = (< maybe_value%0#0 8u)
        (assert tmp%0#0) // too many payments
        let copy%0#0: bytes[48] = pay#0
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "payments")
        (assert maybe_exists%1#0) // check self.payments exists
        let assigned_value%0#0: bytes[48] = copy%0#0
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%2#0) // check self.num_payments exists
        let array_length%0#0: uint64 = 8u
        let index_is_in_bounds%0#0: bool = (< maybe_value%2#0 array_length%0#0)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let write_offset%0#0: uint64 = (* maybe_value%2#0 48u)
        let updated_target%0#0: bytes = (replace3 maybe_value%1#0 write_offset%0#0 assigned_value%0#0)
        (app_global_put "payments" updated_target%0#0)
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%3#0) // check self.num_payments exists
        let materialized_values%0#0: uint64 = (+ maybe_value%3#0 1u)
        (app_global_put "num_payments" materialized_values%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.increment_payment(index: uint64, amt: uint64) -> void:
    block@0: // L115
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%0#0) // check self.num_payments exists
        let tmp%0#0: bool = (< index#0 maybe_value%0#0)
        (assert tmp%0#0) // invalid payment index
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "payments")
        (assert maybe_exists%1#0) // check self.payments exists
        let array_head_and_tail%0#0: bytes = maybe_value%1#0
        let item_offset%0#0: uint64 = (* index#0 48u)
        let tmp%1#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 48u) // on error: Index access is out of bounds
        let encoded%0#0: bytes = (extract3 tmp%1#0 40u 8u) // on error: Index access is out of bounds
        let tmp%2#0: uint64 = (btoi encoded%0#0)
        let assigned_value%0#0: uint64 = (+ tmp%2#0 amt#0)
        let val_as_bytes%0#0: bytes[8] = (itob assigned_value%0#0)
        let encoded%1#0: bytes[8] = val_as_bytes%0#0
        let updated_data%0#0: bytes = (replace3 tmp%1#0 40u encoded%1#0)
        let assigned_value%1#0: bytes = updated_data%0#0
        let array_length%0#0: uint64 = 8u
        let index_is_in_bounds%0#0: bool = (< index#0 array_length%0#0)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let write_offset%0#0: uint64 = (* index#0 48u)
        let updated_target%0#0: bytes = (replace3 maybe_value%1#0 write_offset%0#0 assigned_value%1#0)
        (app_global_put "payments" updated_target%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.create_storage(box_key: uint64) -> void:
    block@0: // L120
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let copy%0#0: bytes = maybe_value%0#0
        (app_global_put 0x70 copy%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%1#0) // check self.nested exists
        let copy%1#0: bytes = maybe_value%1#0
        let tmp%0#0: bytes[32] = (txn Sender)
        (app_local_put tmp%0#0 0x6c copy%1#0)
        let tmp%1#0: bool = (box_create "box" 2064u)
        (assert tmp%1#0) // expected box to not exist
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%2#0) // check self.nested exists
        let tmp%2#0: bytes = (extract3 maybe_value%2#0 0u 16u) // on error: Index access is out of bounds
        let copy%2#0: bytes = tmp%2#0
        let encoded_value%0#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%3#0) // check self.box_map entry exists
        let assigned_value%0#0: bytes = copy%2#0
        let updated_data%0#0: bytes = (replace3 maybe_value%3#0 0u assigned_value%0#0)
        (box_put box_prefixed_key%0#0 updated_data%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.delete_storage(box_key: uint64) -> void:
    block@0: // L127
        (app_global_del 0x70)
        let tmp%0#0: bytes[32] = (txn Sender)
        (app_local_del tmp%0#0 0x6c)
        (box_del "box")
        let encoded_value%0#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#0)
        (box_del box_prefixed_key%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.struct_arg(box_key: uint64, a: bytes[16]) -> void:
    block@0: // L136
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let assigned_value%0#0: bytes[16] = a#0
        let updated_data%0#0: bytes = (replace3 maybe_value%0#0 0u assigned_value%0#0)
        (app_global_put "nested" updated_data%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u 0x70)
        (assert maybe_exists%1#0) // check self.nested_proxy exists
        let assigned_value%1#0: bytes[16] = a#0
        let updated_data%1#0: bytes = (replace3 maybe_value%1#0 0u assigned_value%1#0)
        (app_global_put 0x70 updated_data%1#0)
        let tmp%0#0: bytes[32] = (txn Sender)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_local_get_ex tmp%0#0 0u 0x6c)
        (assert maybe_exists%2#0) // check self.nested_local exists for account
        let assigned_value%2#0: bytes[16] = a#0
        let updated_data%2#0: bytes = (replace3 maybe_value%2#0 0u assigned_value%2#0)
        (app_local_put tmp%0#0 0x6c updated_data%2#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (box_get "box")
        (assert maybe_exists%3#0) // check self.box exists
        let assigned_value%3#0: bytes[16] = a#0
        let updated_data%3#0: bytes = (replace3 maybe_value%3#0 0u assigned_value%3#0)
        (box_put "box" updated_data%3#0)
        let encoded_value%0#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#0)
        let (maybe_value%4#0: bytes, maybe_exists%4#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%4#0) // check self.box_map entry exists
        let assigned_value%4#0: bytes[16] = a#0
        let updated_data%4#0: bytes = (replace3 maybe_value%4#0 0u assigned_value%4#0)
        (box_put box_prefixed_key%0#0 updated_data%4#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.struct_return() -> bytes[16]:
    block@0: // L146
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let tmp%0#0: bytes = (extract3 maybe_value%0#0 0u 16u) // on error: Index access is out of bounds
        return tmp%0#0

subroutine test_cases.mutable_native_types.contract.Contract.tup_return() -> <uint64, uint64>:
    block@0: // L150
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let encoded%0#0: bytes = (extract3 maybe_value%0#0 32u 16u) // on error: Index access is out of bounds
        let item0%0#0: bytes = (extract3 encoded%0#0 0u 8u) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (btoi item0%0#0)
        let item1%0#0: bytes = (extract3 encoded%0#0 8u 8u) // on error: Index access is out of bounds
        let item1%1#0: uint64 = (btoi item1%0#0)
        return item0%1#0 item1%1#0

subroutine test_cases.mutable_native_types.contract.Contract.calculate_sum() -> uint64:
    block@0: // L154
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let fixed_a#0: bytes[16] = (extract3 maybe_value%0#0 0u 16u) // on error: Index access is out of bounds
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%1#0) // check self.nested exists
        let fixed_b#0: bytes[16] = (extract3 maybe_value%1#0 16u 16u) // on error: Index access is out of bounds
        let tmp%0#0: uint64 = test_cases.mutable_native_types.contract.add(fixed_a#0)
        let tmp%1#0: uint64 = test_cases.mutable_native_types.contract.add(fixed_b#0)
        let result#0: uint64 = (+ tmp%0#0 tmp%1#0)
        let tmp%2#0: bool = (< result#0 100u)
        goto tmp%2#0 ? block@1 : block@2
    block@1: // if_body_L160
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%2#0) // check self.nested exists
        let encoded%0#0: bytes = (extract3 maybe_value%2#0 32u 16u) // on error: Index access is out of bounds
        let item0%0#0: bytes = (extract3 encoded%0#0 0u 8u) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (btoi item0%0#0)
        let item1%0#0: bytes = (extract3 encoded%0#0 8u 8u) // on error: Index access is out of bounds
        let item1%1#0: uint64 = (btoi item1%0#0)
        let c#0: uint64 = item0%1#0
        let d#0: uint64 = item1%1#0
        let result#1: uint64 = (+ result#0 c#0)
        let result#2: uint64 = (+ result#1 d#0)
        goto block@2
    block@2: // after_if_else_L159
        let result#3: uint64 = φ(result#0 <- block@0, result#2 <- block@1)
        return result#3

subroutine test_cases.mutable_native_types.contract.Contract.__algopy_default_create() -> void:
    block@0: // L1
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__()
        return tmp%0#0