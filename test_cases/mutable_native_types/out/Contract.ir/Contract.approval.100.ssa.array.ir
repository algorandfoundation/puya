main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        let tmp%1#2: uint64 = (txn NumAppArgs)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#2)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%1#2)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%2#1: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let tmp%3#1: uint64 = (txn NumAppArgs)
        let tmp%4#1: uint64 = (+ tmp%3#1 1u)
        let tmp%5#1: uint64 = (txn NumAppArgs)
        let tmp%6#1: uint64 = (+ tmp%5#1 1u)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%4#1)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%6#1)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = aggregate%head%3#0
        let tmp%7#1: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#0
        let tmp%8#1: uint64 = (txn NumAppArgs)
        let tmp%9#1: uint64 = (+ tmp%8#1 1u)
        let tmp%10#1: uint64 = (txn NumAppArgs)
        let tmp%11#1: uint64 = (+ tmp%10#1 1u)
        let aggregate%head%4#0: bytes = (concat 0x tmp%2#1)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 tmp%7#1)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%9#1)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%6#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%11#1)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded(uint64,uint64)%2#0: Encoded(uint64,uint64) = aggregate%head%7#0
        let aggregate%head%8#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(uint64,uint64)%2#0)
        let aggregate%as_Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64))%0#0: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = aggregate%head%8#0
        let tmp%12#0: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = aggregate%as_Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64))%0#0
        (app_global_put "nested" tmp%12#0)
        let tmp%13#0: uint64 = (txn NumAppArgs)
        let tmp%14#0: uint64 = (txn NumAppArgs)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%len_u16%0#0
        let encoded_array%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob tmp%13#0)
        let aggregate%as_Encoded(uint64)%6#0: Encoded(uint64) = aggregate%val_as_bytes%6#0
        let aggregate%head%9#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%6#0)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob tmp%14#0)
        let aggregate%as_Encoded(uint64)%7#0: Encoded(uint64) = aggregate%val_as_bytes%7#0
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 aggregate%as_Encoded(uint64)%7#0)
        let aggregate%length%0#0: uint64 = (len 0x)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 0x)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%2#0: bytes[8] = (itob 22u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%1#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 22u aggregate%data_length%0#0)
        let aggregate%length%1#0: uint64 = (len "")
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%12#0: bytes = (concat aggregate%head%11#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 aggregate%data_length%1#0)
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%current_tail_offset%1#0)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len encoded_array%0#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ aggregate%current_tail_offset%1#0 aggregate%data_length%2#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%13#0 aggregate%as_Encoded(len+uint8[])%1#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%concat%1#0 encoded_array%0#0)
        let aggregate%as_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+uint8[]))%0#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+uint8[])) = aggregate%concat%2#0
        let tmp%15#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+uint8[])) = aggregate%as_Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+uint8[]))%0#0
        (app_global_put "dyn" tmp%15#0)
        (app_global_put "num_payments" 0u)
        let tmp%16#0: Encoded((uint8[32],uint64,uint64)[2]) = (bzero 96u)
        (app_global_put "payments" tmp%16#0)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@4 : block@22
    block@4: // abi_routing_L71
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test_imm_fixed_array()void" => block@6, method "fixed_initialize()void" => block@7, method "add_payment((address,uint64,uint64))void" => block@8, method "increment_payment(uint64,uint64)void" => block@9, method "create_storage(uint64)void" => block@10, method "local_struct()(address,uint64,uint64)" => block@11, method "delete_storage(uint64)void" => block@12, method "struct_arg(uint64,(uint64,uint64))void" => block@13, method "struct_return()(uint64,uint64)" => block@14, method "tup_return()(uint64,uint64)" => block@15, method "calculate_sum()uint64" => block@16, method "test_arr((uint64,uint64)[])(uint64,uint64)[]" => block@17, method "test_match_struct((uint64,uint64))bool" => block@18, * => block@21}
    block@6: // test_imm_fixed_array_route_L95
        exit 1u
    block@7: // fixed_initialize_route_L101
        test_cases.mutable_native_types.contract.Contract.fixed_initialize[routing]()
        goto block@21
    block@8: // add_payment_route_L131
        test_cases.mutable_native_types.contract.Contract.add_payment[routing]()
        goto block@21
    block@9: // increment_payment_route_L137
        test_cases.mutable_native_types.contract.Contract.increment_payment[routing]()
        goto block@21
    block@10: // create_storage_route_L142
        test_cases.mutable_native_types.contract.Contract.create_storage[routing]()
        goto block@21
    block@11: // local_struct_route_L149
        test_cases.mutable_native_types.contract.Contract.local_struct[routing]()
        goto block@21
    block@12: // delete_storage_route_L161
        test_cases.mutable_native_types.contract.Contract.delete_storage[routing]()
        goto block@21
    block@13: // struct_arg_route_L168
        test_cases.mutable_native_types.contract.Contract.struct_arg[routing]()
        goto block@21
    block@14: // struct_return_route_L178
        test_cases.mutable_native_types.contract.Contract.struct_return[routing]()
        goto block@21
    block@15: // tup_return_route_L182
        test_cases.mutable_native_types.contract.Contract.tup_return[routing]()
        goto block@21
    block@16: // calculate_sum_route_L186
        test_cases.mutable_native_types.contract.Contract.calculate_sum[routing]()
        goto block@21
    block@17: // test_arr_route_L197
        test_cases.mutable_native_types.contract.Contract.test_arr[routing]()
        goto block@21
    block@18: // test_match_struct_route_L261
        test_cases.mutable_native_types.contract.Contract.test_match_struct[routing]()
        goto block@21
    block@21: // after_if_else_L71
        fail
    block@22: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L227
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#2: uint64 = (* array_length#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#2 tmp%2#0 index#0)
        goto block@2
    block@2: // for_header_L342
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#2)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L343
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@4: // after_for_L342
        let tmp%4#0: bytes = (concat size_b#0 array_head_and_tail#2)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L251
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L282
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L283
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L282
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L264
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L282
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L283
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L282
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L291
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L342
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L343
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L342
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L320
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L342
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L343
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L342
        return array_head_and_tail#1

subroutine test_cases.mutable_native_types.contract.sum_frozen_arr(arr: Encoded(len+(uint64,uint64)[])) -> uint64:
    block@0: // L270
        let total#0: uint64 = 0u
        let aggregate%array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let array_length%0#0: uint64 = aggregate%array_length%0#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L273
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let total#1: uint64 = φ(total#0 <- block@0, total#3 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let aggregate%total_length%0#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 arr#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#1 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let aggregate%extract%0#0: bytes = (extract3 aggregate%encoded_element%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let total#2: uint64 = (+ total#1 values%0#0)
        let aggregate%total_length%1#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%1#0: bytes = (substring3 arr#0 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* item_index_internal%0#1 16u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 16u) // on error: index access is out of bounds
        let aggregate%extract%1#0: bytes = (extract3 aggregate%encoded_element%1#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let total#3: uint64 = (+ total#2 values%1#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L273
        return total#1

subroutine test_cases.mutable_native_types.contract.add(val: Encoded(uint64,uint64)) -> uint64:
    block@0: // L279
        let aggregate%extract%0#0: bytes = (extract3 val#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract%1#0: bytes = (extract3 val#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%0#0: uint64 = (+ values%0#0 values%1#0)
        return tmp%0#0

subroutine test_cases.mutable_native_types.contract.do_something(pay: Encoded(uint8[32],uint64,uint64)) -> Encoded(uint8[32],uint64,uint64):
    block@0: // L284
        return pay#0

subroutine test_cases.mutable_native_types.contract.Contract.fixed_initialize[routing]() -> void:
    block@0: // L101
        let arr_3#0: Encoded(uint64[3]) = (bzero 24u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 arr_3#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let aggregate%write_offset%0#0: uint64 = (* 0u 8u)
        let aggregate%updated_array%0#0: bytes = (replace3 arr_3#0 aggregate%write_offset%0#0 encoded_value%0#0) // on error: index access is out of bounds
        let arr_3#1: Encoded(uint64[3]) = aggregate%updated_array%0#0
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let encoded_value%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#0
        let aggregate%bytes_offset%1#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%1#0: bytes = (extract3 arr_3#1 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let aggregate%write_offset%1#0: uint64 = (* 1u 8u)
        let aggregate%updated_array%1#0: bytes = (replace3 arr_3#1 aggregate%write_offset%1#0 encoded_value%1#0) // on error: index access is out of bounds
        let arr_3#2: Encoded(uint64[3]) = aggregate%updated_array%1#0
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let encoded_value%2#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%2#0
        let aggregate%bytes_offset%2#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%2#0: bytes = (extract3 arr_3#2 aggregate%bytes_offset%2#0 8u) // on error: index access is out of bounds
        let aggregate%write_offset%2#0: uint64 = (* 2u 8u)
        let aggregate%updated_array%2#0: bytes = (replace3 arr_3#2 aggregate%write_offset%2#0 encoded_value%2#0) // on error: index access is out of bounds
        let arr_3#3: Encoded(uint64[3]) = aggregate%updated_array%2#0
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%3#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded(uint64[3])%0#0: Encoded(uint64[3]) = aggregate%head%2#0
        let arr_3_from_tuple#0: Encoded(uint64[3]) = aggregate%as_Encoded(uint64[3])%0#0
        let tmp%1#0: bool = (== arr_3#3 arr_3_from_tuple#0)
        (assert tmp%1#0) // should be the same
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%6#0: Encoded(uint64) = aggregate%val_as_bytes%6#0
        let aggregate%head%3#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%6#0)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%7#0: Encoded(uint64) = aggregate%val_as_bytes%7#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint64)%7#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%8#0: Encoded(uint64) = aggregate%val_as_bytes%8#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint64)%8#0)
        let aggregate%as_Encoded(uint64[3])%1#0: Encoded(uint64[3]) = aggregate%head%5#0
        let arr_3_from_full#0: Encoded(uint64[3]) = aggregate%as_Encoded(uint64[3])%1#0
        let aggregate%bytes_offset%3#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%3#0: bytes = (extract3 arr_3_from_full#0 aggregate%bytes_offset%3#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%3#0
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%2#0: bool = (== values%0#0 1u)
        (assert tmp%2#0)
        let aggregate%bytes_offset%4#0: uint64 = (* 1u 8u)
        let aggregate%encoded_element%4#0: bytes = (extract3 arr_3_from_full#0 aggregate%bytes_offset%4#0 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%4#0
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%3#0: bool = (== values%1#0 1u)
        (assert tmp%3#0)
        let aggregate%bytes_offset%5#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%5#0: bytes = (extract3 arr_3_from_full#0 aggregate%bytes_offset%5#0 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%5#0
        let values%2#0: uint64 = (btoi array_item%2#0)
        let tmp%4#0: bool = (== values%2#0 1u)
        (assert tmp%4#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%9#0: Encoded(uint64) = aggregate%val_as_bytes%9#0
        let aggregate%head%6#0: bytes = (concat aggregate%len_u16%0#0 aggregate%as_Encoded(uint64)%9#0)
        let aggregate%val_as_bytes%10#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%10#0: Encoded(uint64) = aggregate%val_as_bytes%10#0
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(uint64)%10#0)
        let aggregate%val_as_bytes%11#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%11#0: Encoded(uint64) = aggregate%val_as_bytes%11#0
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 aggregate%as_Encoded(uint64)%11#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%8#0
        let dynamic_arr#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 dynamic_arr#0 0u)
        let tmp%6#0: uint64 = aggregate%array_length%0#0
        let eq%0#0: bool = (== tmp%6#0 3u)
        (assert eq%0#0) // invalid input length
        let converted_array%0#0: bytes = ((extract 2 0) dynamic_arr#0)
        let tmp%7#0: bool = (== arr_3#3 converted_array%0#0)
        (assert tmp%7#0)
        let aggregate%val_as_bytes%12#0: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%12#0: Encoded(uint64) = aggregate%val_as_bytes%12#0
        let aggregate%head%9#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%12#0)
        let aggregate%val_as_bytes%13#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%13#0: Encoded(uint64) = aggregate%val_as_bytes%13#0
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 aggregate%as_Encoded(uint64)%13#0)
        let aggregate%val_as_bytes%14#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%14#0: Encoded(uint64) = aggregate%val_as_bytes%14#0
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 aggregate%as_Encoded(uint64)%14#0)
        let aggregate%as_Encoded(uint64,uint64,uint64)%0#0: Encoded(uint64,uint64,uint64) = aggregate%head%11#0
        let awst_tmp%0#0: Encoded(uint64,uint64,uint64) = aggregate%as_Encoded(uint64,uint64,uint64)%0#0
        let aggregate%extract%0#0: bytes = (extract3 awst_tmp%0#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%3#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract%1#0: bytes = (extract3 awst_tmp%0#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%4#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%extract%2#0: bytes = (extract3 awst_tmp%0#0 16u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#0
        let values%5#0: uint64 = (btoi tuple_item%2#0)
        let aggregate%val_as_bytes%15#0: bytes[8] = (itob values%3#0)
        let aggregate%as_Encoded(uint64)%15#0: Encoded(uint64) = aggregate%val_as_bytes%15#0
        let aggregate%head%12#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%15#0)
        let aggregate%val_as_bytes%16#0: bytes[8] = (itob values%4#0)
        let aggregate%as_Encoded(uint64)%16#0: Encoded(uint64) = aggregate%val_as_bytes%16#0
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 aggregate%as_Encoded(uint64)%16#0)
        let aggregate%val_as_bytes%17#0: bytes[8] = (itob values%5#0)
        let aggregate%as_Encoded(uint64)%17#0: Encoded(uint64) = aggregate%val_as_bytes%17#0
        let aggregate%head%14#0: bytes = (concat aggregate%head%13#0 aggregate%as_Encoded(uint64)%17#0)
        let aggregate%as_Encoded(uint64[3])%2#0: Encoded(uint64[3]) = aggregate%head%14#0
        let encoded_array%3#0: Encoded(uint64[3]) = aggregate%as_Encoded(uint64[3])%2#0
        let tmp%8#0: bool = (== arr_3#3 encoded_array%3#0)
        (assert tmp%8#0)
        let aggregate%head%15#0: bytes = (concat 0x 0x0000000000000000)
        let aggregate%head%16#0: bytes = (concat aggregate%head%15#0 0x0000000000000001)
        let aggregate%head%17#0: bytes = (concat aggregate%head%16#0 0x0000000000000002)
        let aggregate%as_Encoded(uint64[3])%3#0: Encoded(uint64[3]) = aggregate%head%17#0
        let static_array#0: Encoded(uint64[3]) = aggregate%as_Encoded(uint64[3])%3#0
        let tmp%10#0: bool = (== static_array#0 arr_3#3)
        (assert tmp%10#0)
        exit 1u

subroutine test_cases.mutable_native_types.contract.Contract.add_payment[routing]() -> void:
    block@0: // L131
        let pay#0: Encoded(uint8[32],uint64,uint64) = (txna ApplicationArgs 1)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%0#0) // check self.num_payments exists
        let tmp%0#0: bool = (< maybe_value%0#0 2u)
        (assert tmp%0#0) // too many payments
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "payments")
        (assert maybe_exists%1#0) // check self.payments exists
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%2#0) // check self.num_payments exists
        let aggregate%bytes_offset%0#0: uint64 = (* maybe_value%2#0 48u)
        let aggregate%encoded_element%0#0: bytes = (extract3 maybe_value%1#0 aggregate%bytes_offset%0#0 48u) // on error: index access is out of bounds
        let aggregate%write_offset%0#0: uint64 = (* maybe_value%2#0 48u)
        let aggregate%updated_array%0#0: bytes = (replace3 maybe_value%1#0 aggregate%write_offset%0#0 pay#0) // on error: index access is out of bounds
        let updated_array%0#0: Encoded((uint8[32],uint64,uint64)[2]) = aggregate%updated_array%0#0
        (app_global_put "payments" updated_array%0#0)
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%3#0) // check self.num_payments exists
        let tmp%1#0: uint64 = (+ maybe_value%3#0 1u)
        (app_global_put "num_payments" tmp%1#0)
        exit 1u

subroutine test_cases.mutable_native_types.contract.Contract.increment_payment[routing]() -> void:
    block@0: // L137
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let amt#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%0#0) // check self.num_payments exists
        let tmp%0#1: bool = (< index#0 maybe_value%0#0)
        (assert tmp%0#1) // invalid payment index
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "payments")
        (assert maybe_exists%1#0) // check self.payments exists
        let aggregate%bytes_offset%0#0: uint64 = (* index#0 48u)
        let aggregate%encoded_element%0#0: bytes = (extract3 maybe_value%1#0 aggregate%bytes_offset%0#0 48u) // on error: index access is out of bounds
        let aggregate%extract%0#0: bytes = (extract3 aggregate%encoded_element%0#0 40u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%1#1: uint64 = (+ values%0#0 amt#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#1)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%bytes_offset%1#0: uint64 = (* index#0 48u)
        let aggregate%encoded_element%1#0: bytes = (extract3 maybe_value%1#0 aggregate%bytes_offset%1#0 48u) // on error: index access is out of bounds
        let aggregate%extract%1#0: bytes = (extract3 aggregate%encoded_element%1#0 40u 8u)
        let aggregate%updated_data%0#0: bytes = (replace3 aggregate%encoded_element%1#0 40u encoded_value%0#0)
        let aggregate%write_offset%0#0: uint64 = (* index#0 48u)
        let aggregate%updated_array%0#0: bytes = (replace3 maybe_value%1#0 aggregate%write_offset%0#0 aggregate%updated_data%0#0) // on error: index access is out of bounds
        let updated_array%0#0: Encoded((uint8[32],uint64,uint64)[2]) = aggregate%updated_array%0#0
        (app_global_put "payments" updated_array%0#0)
        exit 1u

subroutine test_cases.mutable_native_types.contract.Contract.create_storage[routing]() -> void:
    block@0: // L142
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let box_key#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        (app_global_put 0x70 maybe_value%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%1#0) // check self.nested exists
        let tmp%0#1: account = (txn Sender)
        (app_local_put tmp%0#1 0x6c maybe_value%1#0)
        let tmp%1#0: bool = (box_create "box" 2064u)
        (assert tmp%1#0) // expected box to not exist
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%2#0) // check self.nested exists
        let aggregate%extract%0#0: bytes = (extract3 maybe_value%2#0 0u 16u)
        let tuple_item%0#0: Encoded(uint64,uint64) = aggregate%extract%0#0
        let encoded_value%0#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#0)
        (box_replace box_prefixed_key%0#0 0u tuple_item%0#0)
        exit 1u

subroutine test_cases.mutable_native_types.contract.Contract.local_struct[routing]() -> void:
    block@0: // L149
        let tmp%0#1: account = (txn Sender)
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%0#1
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint8[32])%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1234u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 567u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint8[32],uint64,uint64)%0#0: Encoded(uint8[32],uint64,uint64) = aggregate%head%2#0
        let a#0: Encoded(uint8[32],uint64,uint64) = aggregate%as_Encoded(uint8[32],uint64,uint64)%0#0
        let aggregate%extract%0#0: bytes = (extract3 a#0 0u 32u)
        let tuple_item%0#0: Encoded(uint8[32]) = aggregate%extract%0#0
        let foo#0: account = tuple_item%0#0
        let aggregate%extract%1#0: bytes = (extract3 a#0 32u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let bar#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%extract%2#0: bytes = (extract3 a#0 40u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#0
        let baz#0: uint64 = (btoi tuple_item%2#0)
        let tmp%2#0: account = (global ZeroAddress)
        let tmp%3#0: bool = (!= foo#0 tmp%2#0)
        (assert tmp%3#0) // use foo
        (assert bar#0) // use bar
        (assert baz#0) // use baz
        let a#1: Encoded(uint8[32],uint64,uint64) = test_cases.mutable_native_types.contract.do_something(a#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 a#1)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.mutable_native_types.contract.Contract.delete_storage[routing]() -> void:
    block@0: // L161
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let box_key#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        (app_global_del 0x70)
        let tmp%0#1: account = (txn Sender)
        (app_local_del tmp%0#1 0x6c)
        (box_del "box")
        let encoded_value%0#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#0)
        (box_del box_prefixed_key%0#0)
        exit 1u

subroutine test_cases.mutable_native_types.contract.Contract.struct_arg[routing]() -> void:
    block@0: // L168
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let box_key#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let a#0: Encoded(uint64,uint64) = (txna ApplicationArgs 2)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let aggregate%extract%0#0: bytes = (extract3 maybe_value%0#0 0u 16u)
        let aggregate%updated_data%0#0: bytes = (replace3 maybe_value%0#0 0u a#0)
        let updated_tuple%0#0: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = aggregate%updated_data%0#0
        (app_global_put "nested" updated_tuple%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u 0x70)
        (assert maybe_exists%1#0) // check self.nested_proxy exists
        let aggregate%extract%1#0: bytes = (extract3 maybe_value%1#0 0u 16u)
        let aggregate%updated_data%1#0: bytes = (replace3 maybe_value%1#0 0u a#0)
        let updated_tuple%1#0: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = aggregate%updated_data%1#0
        (app_global_put 0x70 updated_tuple%1#0)
        let tmp%0#1: account = (txn Sender)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_local_get_ex tmp%0#1 0u 0x6c)
        (assert maybe_exists%2#0) // check self.nested_local exists for account
        let aggregate%extract%2#0: bytes = (extract3 maybe_value%2#0 0u 16u)
        let aggregate%updated_data%2#0: bytes = (replace3 maybe_value%2#0 0u a#0)
        let updated_tuple%2#0: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = aggregate%updated_data%2#0
        (app_local_put tmp%0#1 0x6c updated_tuple%2#0)
        (box_replace "box" 0u a#0)
        let encoded_value%0#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#0)
        (box_replace box_prefixed_key%0#0 0u a#0)
        exit 1u

subroutine test_cases.mutable_native_types.contract.Contract.struct_return[routing]() -> void:
    block@0: // L178
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let aggregate%extract%0#0: bytes = (extract3 maybe_value%0#0 0u 16u)
        let tuple_item%0#0: Encoded(uint64,uint64) = aggregate%extract%0#0
        let tmp%1#0: bytes = (concat 0x151f7c75 tuple_item%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.mutable_native_types.contract.Contract.tup_return[routing]() -> void:
    block@0: // L182
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let aggregate%extract%0#0: bytes = (extract3 maybe_value%0#0 32u 16u)
        let tuple_item%0#0: Encoded(uint64,uint64) = aggregate%extract%0#0
        let tmp%3#0: bytes = (concat 0x151f7c75 tuple_item%0#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.mutable_native_types.contract.Contract.calculate_sum[routing]() -> void:
    block@0: // L186
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let aggregate%extract%0#0: bytes = (extract3 maybe_value%0#0 0u 16u)
        let fixed_a#0: Encoded(uint64,uint64) = aggregate%extract%0#0
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%1#0) // check self.nested exists
        let aggregate%extract%1#0: bytes = (extract3 maybe_value%1#0 16u 16u)
        let fixed_b#0: Encoded(uint64,uint64) = aggregate%extract%1#0
        let tmp%0#1: uint64 = test_cases.mutable_native_types.contract.add(fixed_a#0)
        let tmp%1#1: uint64 = test_cases.mutable_native_types.contract.add(fixed_b#0)
        let result#0: uint64 = (+ tmp%0#1 tmp%1#1)
        let tmp%3#0: bool = (< result#0 100u)
        goto tmp%3#0 ? block@2 : block@3
    block@2: // if_body_L192
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%2#0) // check self.nested exists
        let aggregate%extract%2#0: bytes = (extract3 maybe_value%2#0 32u 16u)
        let tuple_item%2#0: Encoded(uint64,uint64) = aggregate%extract%2#0
        let aggregate%extract%3#0: bytes = (extract3 tuple_item%2#0 0u 8u)
        let aggregate%item0%0#0: uint64 = (btoi aggregate%extract%3#0)
        let aggregate%extract%4#0: bytes = (extract3 tuple_item%2#0 8u 8u)
        let aggregate%item1%0#0: uint64 = (btoi aggregate%extract%4#0)
        let (c#0: uint64, d#0: uint64) = (aggregate%item0%0#0, aggregate%item1%0#0)
        let result#1: uint64 = (+ result#0 c#0)
        let result#2: uint64 = (+ result#1 d#0)
        goto block@3
    block@3: // after_if_else_L191
        let result#3: uint64 = φ(result#0 <- block@0, result#2 <- block@2)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob result#3)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.mutable_native_types.contract.Contract.test_arr[routing]() -> void:
    block@0: // L197
        let arr#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%0#1: uint64 = aggregate%array_length%0#0
        let tmp%1#1: bool = (! tmp%0#1)
        (assert tmp%1#1) // expected empty array
        let aggregate%as_Encoded((uint64,uint64)[])%0#0: Encoded((uint64,uint64)[]) = 0x
        let encoded_array%0#0: Encoded((uint64,uint64)[]) = aggregate%as_Encoded((uint64,uint64)[])%0#0
        let arr4#0: Encoded((uint64,uint64)[])* = new()
        store(arr4#0, encoded_array%0#0)
        let slot_contents%0#0: Encoded((uint64,uint64)[]) = load(arr4#0)
        let extract_to_end%0#0: bytes = ((extract 2 0) arr#0)
        let concat%0#0: Encoded((uint64,uint64)[]) = (concat slot_contents%0#0 extract_to_end%0#0) // on error: max array length exceeded
        store(arr4#0, concat%0#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%4#0: uint64 = aggregate%array_length%1#0
        let aggregate%slot_contents%0#0: Encoded((uint64,uint64)[]) = load(arr4#0)
        let aggregate%bytes_len%0#0: uint64 = (len aggregate%slot_contents%0#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 16u)
        let tmp%5#0: uint64 = aggregate%array_len%0#0
        let tmp%6#0: bool = (== tmp%4#0 tmp%5#0)
        (assert tmp%6#0) // expected arrays to be the same length
        let slot_contents%1#0: Encoded((uint64,uint64)[]) = load(arr4#0)
        let aggregate%bytes_len%1#0: uint64 = (len slot_contents%1#0)
        let aggregate%array_len%1#0: uint64 = (/ aggregate%bytes_len%1#0 16u)
        let tmp%7#0: uint64 = aggregate%array_len%1#0
        let as_bytes%0#0: bytes[8] = (itob tmp%7#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr5#0: Encoded(len+(uint64,uint64)[]) = (concat as_u16_bytes%0#0 slot_contents%1#0)
        let tmp%8#0: bool = (== arr#0 arr5#0)
        (assert tmp%8#0) // expected arrays to be the same
        let tmp%12#0: uint64 = (txn NumAppArgs)
        let tmp%13#0: uint64 = (+ tmp%12#0 1u)
        let tmp%14#0: uint64 = (txn NumAppArgs)
        let tmp%15#0: uint64 = (+ tmp%14#0 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%13#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%15#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let fixed_struct#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let aggregate%head%2#0: bytes = (concat 0x fixed_struct#0)
        let aggregate%as_Encoded((uint64,uint64)[])%1#0: Encoded((uint64,uint64)[]) = aggregate%head%2#0
        let tmp%17#0: Encoded((uint64,uint64)[]) = aggregate%as_Encoded((uint64,uint64)[])%1#0
        let concat%1#0: Encoded(len+(uint64,uint64)[]) = (concat arr#0 tmp%17#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr2#1: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 arr2#1 0u)
        let tmp%18#0: uint64 = aggregate%array_length%2#0
        let tmp%19#0: bool = (== tmp%18#0 1u)
        (assert tmp%19#0) // expected array to have 1 item
        let tmp%21#0: uint64 = test_cases.mutable_native_types.contract.sum_frozen_arr(arr2#1)
        let tmp%22#0: bool = (== tmp%21#0 7u)
        (assert tmp%22#0) // expected sum to be 7
        let tmp%23#0: bool = (!= arr#0 arr2#1)
        (assert tmp%23#0) // expected arrays to be different
        let aggregate%total_length%0#0: uint64 = (len arr2#1)
        let aggregate%array_trimmed%0#0: bytes = (substring3 arr2#1 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#0
        let aggregate%as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%3#0: bytes = (concat aggregate%len_u16%0#0 array_item%0#0)
        let aggregate%as_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = aggregate%head%3#0
        let arr7#0: Encoded(len+(uint64,uint64)[]) = aggregate%as_Encoded(len+(uint64,uint64)[])%0#0
        let tmp%24#0: bool = (== arr2#1 arr7#0)
        (assert tmp%24#0) // expected arrays to be the same
        let aggregate%as_bytes%1#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%as_Encoded(len+(uint64,uint64)[])%1#0: Encoded(len+(uint64,uint64)[]) = aggregate%len_u16%1#0
        let arr8#0: Encoded(len+(uint64,uint64)[]) = aggregate%as_Encoded(len+(uint64,uint64)[])%1#0
        let extract_to_end%1#0: bytes = ((extract 2 0) arr2#1)
        let concat%2#0: Encoded(len+(uint64,uint64)[]) = (concat arr8#0 extract_to_end%1#0) // on error: max array length exceeded
        let extract_to_end%2#0: bytes = ((extract 2 0) concat%2#0)
        let len%0#0: uint64 = (len extract_to_end%2#0)
        let div_floor%0#0: uint64 = (/ len%0#0 16u)
        let as_bytes%2#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let arr8#1: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%2#0 as_u16_bytes%2#0)
        let tmp%25#0: bool = (== arr2#1 arr8#1)
        (assert tmp%25#0) // expected arrays to be the same
        let _i#0: uint64 = 0u
        goto block@4
    block@4: // for_header_L236
        let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@5)
        let arr2#3: Encoded(len+(uint64,uint64)[]) = φ(arr8#0 <- block@0, arr2#4 <- block@5)
        let continue_looping%0#0: bool = (< _i#1 3u)
        goto continue_looping%0#0 ? block@5 : block@7
    block@5: // for_body_L237
        let concat%3#0: Encoded(len+(uint64,uint64)[]) = (concat arr2#3 tmp%17#0) // on error: max array length exceeded
        let extract_uint16%1#0: uint64 = (extract_uint16 arr2#3 0u)
        let add%1#0: uint64 = (+ extract_uint16%1#0 1u)
        let as_bytes%3#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let arr2#4: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%3#0 as_u16_bytes%3#0)
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@4
    block@7: // after_for_L236
        let aggregate%array_length%3#0: uint64 = (extract_uint16 arr2#3 0u)
        let tmp%31#0: uint64 = aggregate%array_length%3#0
        let tmp%32#0: bool = (== tmp%31#0 3u)
        (assert tmp%32#0) // expected 3 elements
        let tmp%34#0: uint64 = test_cases.mutable_native_types.contract.sum_frozen_arr(arr2#3)
        let tmp%35#0: bool = (== tmp%34#0 21u)
        (assert tmp%35#0) // expected sum to be 21
        let array_length#0: uint64 = (extract_uint16 arr2#3 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#1: bytes = (itob length_minus_1#0)
        let tmp%3#1: bytes = ((extract 6 0) tmp%2#1)
        let result#0: bytes = ((replace2 0) arr2#3 tmp%3#1)
        let tmp%5#1: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%5#1 16u)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        let tmp%39#0: uint64 = test_cases.mutable_native_types.contract.sum_frozen_arr(arr2#3)
        let tmp%40#0: bool = (== tmp%39#0 21u)
        (assert tmp%40#0) // expected sum to be 21
        let tmp%41#0: uint64 = test_cases.mutable_native_types.contract.sum_frozen_arr(result#1)
        let tmp%42#0: bool = (== tmp%41#0 14u)
        (assert tmp%42#0) // expected sum to be 14
        let extract_to_end%3#0: bytes = ((extract 2 0) result#1)
        let concat%4#0: Encoded(len+(uint64,uint64)[]) = (concat result#1 extract_to_end%3#0) // on error: max array length exceeded
        let extract_to_end%4#0: bytes = ((extract 2 0) concat%4#0)
        let len%1#0: uint64 = (len extract_to_end%4#0)
        let div_floor%1#0: uint64 = (/ len%1#0 16u)
        let as_bytes%4#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let frozen2#1: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%4#0 as_u16_bytes%4#0)
        let tmp%43#0: uint64 = test_cases.mutable_native_types.contract.sum_frozen_arr(frozen2#1)
        let tmp%44#0: bool = (== tmp%43#0 28u)
        (assert tmp%44#0) // and the sum shall be 41
        (app_global_put "arr" result#1)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "arr")
        (assert maybe_exists%0#0) // check self.arr exists
        let tmp%45#0: bool = (== maybe_value%0#0 result#1)
        (assert tmp%45#0) // expected array in storage to be the same
        let arr11#0: Encoded((uint64,uint64)[])* = new()
        store(arr11#0, encoded_array%0#0)
        let aggregate%slot_contents%1#0: Encoded((uint64,uint64)[]) = load(arr11#0)
        let aggregate%bytes_len%2#0: uint64 = (len aggregate%slot_contents%1#0)
        let aggregate%array_len%2#0: uint64 = (/ aggregate%bytes_len%2#0 16u)
        let tmp%46#0: uint64 = aggregate%array_len%2#0
        let tmp%47#0: bool = (! tmp%46#0)
        (assert tmp%47#0)
        let slot_contents%2#0: Encoded((uint64,uint64)[]) = load(arr11#0)
        let concat%5#0: Encoded((uint64,uint64)[]) = (concat slot_contents%2#0 tmp%17#0) // on error: max array length exceeded
        store(arr11#0, concat%5#0)
        let aggregate%slot_contents%2#0: Encoded((uint64,uint64)[]) = load(arr11#0)
        let aggregate%bytes_len%3#0: uint64 = (len aggregate%slot_contents%2#0)
        let aggregate%array_len%3#0: uint64 = (/ aggregate%bytes_len%3#0 16u)
        let tmp%49#0: uint64 = aggregate%array_len%3#0
        (assert tmp%49#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "arr")
        (assert maybe_exists%1#0) // check self.arr exists
        let tmp%1#0: bytes = (concat 0x151f7c75 maybe_value%1#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.mutable_native_types.contract.Contract.test_match_struct[routing]() -> void:
    block@0: // L261
        let arg#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%0#1: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        switch arg#0 {tmp%0#1 => block@2, * => block@3}
    block@2: // switch_case_0_L265
        let test_cases.mutable_native_types.contract.Contract.test_match_struct%0#0: bool = 1u
        goto block@4
    block@3: // switch_case_default_L267
        let test_cases.mutable_native_types.contract.Contract.test_match_struct%0#1: bool = 0u
        goto block@4
    block@4: // after_inlined_test_cases.mutable_native_types.contract.Contract.test_match_struct_L261
        let tmp%0#0: bool = φ(test_cases.mutable_native_types.contract.Contract.test_match_struct%0#0 <- block@2, test_cases.mutable_native_types.contract.Contract.test_match_struct%0#1 <- block@3)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%0#0)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%1#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u