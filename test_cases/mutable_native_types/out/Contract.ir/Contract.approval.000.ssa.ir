main test_cases.mutable_native_types.contract.Contract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.mutable_native_types.contract.Contract.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let tmp%0#0: bytes = ((substring 0 2) array#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) array#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_byte_length_head(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let tmp%0#0: bytes = ((substring 0 2) source#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) source#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_dynamic_element(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let tmp%1#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let original_offset#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (+ index#0 1u)
        let tmp%3#0: uint64 = (* tmp%2#0 2u)
        let tmp%4#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#0)
        let next_item_offset#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (len array_head_and_tail#0)
        let end_of_tail#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let tmp%7#0: uint64 = (- tmp%6#0 1u)
        let is_before_end#0: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let end_offset#0: uint64 = tmp%8#0
        let tmp%9#0: uint64 = (- end_offset#0 original_offset#0)
        let original_item_length#0: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (len new_item#0)
        let new_item_length#0: uint64 = tmp%10#0
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let tmp%14#0: bytes = (concat tmp%12#0 tmp%13#0)
        let new_head_and_tail#0: bytes = tmp%14#0
        let tmp%15#0: uint64 = (* array_length#0 2u)
        let tmp%16#0: uint64 = (+ index#0 1u)
        let tmp%17#0: uint64 = (* tmp%16#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%17#0
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tmp%18#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#0: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#1: uint64 = tmp%19#0
        let tmp%20#0: uint64 = (- tail_offset#1 original_item_length#0)
        let tail_offset#2: uint64 = tmp%20#0
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tmp%22#0: bytes = ((extract 6 2) tmp%21#0)
        let tail_offset_bytes#0: bytes = tmp%22#0
        let tmp%23#0: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let new_head_and_tail#2: bytes = tmp%23#0
        goto block@3
    block@3: // for_footer_L273
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let offset_for_index#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let old_item_length#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let tmp%5#0: uint64 = (+ tmp%4#0 2u)
        let old_item_end#0: uint64 = tmp%5#0
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        return tmp%11#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tmp%3#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tail_offset#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* length#0 2u)
        let tmp%5#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%5#0
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%4#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let tail_offset_bytes#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let array_head_and_tail#2: bytes = tmp%8#0
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (+ tail_offset#1 tmp%10#0)
        let tail_offset#2: uint64 = tmp%11#0
        let tmp%12#0: uint64 = (+ head_offset#1 2u)
        let head_offset#2: uint64 = tmp%12#0
        goto block@3
    block@3: // for_footer_L331
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine test_cases.mutable_native_types.contract.add(val: Encoded(uint64,uint64)) -> uint64:
    block@0: // L191
        let tuple_item%0#0: Encoded(uint64) = agg_read_index(val#0, 0)
        let values%0#0: uint64 = decode<uint64>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(uint64) = agg_read_index(val#0, 1)
        let values%1#0: uint64 = decode<uint64>(tuple_item%1#0)
        let tmp%0#0: uint64 = (+ values%0#0 values%1#0)
        return tmp%0#0

subroutine test_cases.mutable_native_types.contract.do_something(pay: Encoded(uint8[32],uint64,uint64)) -> Encoded(uint8[32],uint64,uint64):
    block@0: // L196
        let pay%is_original#0: bool = 1u
        let pay%out#0: Encoded(uint8[32],uint64,uint64) = pay#0
        return pay%out#0

subroutine test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__() -> bool:
    block@0: // L68
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@14
    block@1: // abi_routing_L68
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "fixed_initialize()void" => block@2, method "add_payment((address,uint64,uint64))void" => block@3, method "increment_payment(uint64,uint64)void" => block@4, method "create_storage(uint64)void" => block@5, method "local_struct()(address,uint64,uint64)" => block@6, method "delete_storage(uint64)void" => block@7, method "struct_arg(uint64,(uint64,uint64))void" => block@8, method "struct_return()(uint64,uint64)" => block@9, method "tup_return()(uint64,uint64)" => block@10, method "calculate_sum()uint64" => block@11, * => block@12}
    block@2: // fixed_initialize_route_L92
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.mutable_native_types.contract.Contract.fixed_initialize()
        return 1u
    block@3: // add_payment_route_L122
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_Encoded(uint8[32],uint64,uint64)%0#0: Encoded(uint8[32],uint64,uint64) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.contract.Contract.add_payment(reinterpret_Encoded(uint8[32],uint64,uint64)%0#0)
        return 1u
    block@4: // increment_payment_route_L128
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%15#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%16#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%1#0)
        test_cases.mutable_native_types.contract.Contract.increment_payment(tmp%15#0, tmp%16#0)
        return 1u
    block@5: // create_storage_route_L133
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (== tmp%17#0 NoOp)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%21#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%2#0)
        test_cases.mutable_native_types.contract.Contract.create_storage(tmp%21#0)
        return 1u
    block@6: // local_struct_route_L140
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (== tmp%22#0 NoOp)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        let tmp%25#0: bool = (!= tmp%24#0 0u)
        (assert tmp%25#0) // can only call when not creating
        let tmp%26#0: Encoded(uint8[32],uint64,uint64) = test_cases.mutable_native_types.contract.Contract.local_struct()
        let tmp%27#0: bytes = (concat 0x151f7c75 tmp%26#0)
        (log tmp%27#0)
        return 1u
    block@7: // delete_storage_route_L152
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (== tmp%28#0 NoOp)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (!= tmp%30#0 0u)
        (assert tmp%31#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%32#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%3#0)
        test_cases.mutable_native_types.contract.Contract.delete_storage(tmp%32#0)
        return 1u
    block@8: // struct_arg_route_L161
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (== tmp%33#0 NoOp)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        let tmp%36#0: bool = (!= tmp%35#0 0u)
        (assert tmp%36#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%37#0: uint64 = decode<uint64>(reinterpret_Encoded(uint64)%4#0)
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 2)
        test_cases.mutable_native_types.contract.Contract.struct_arg(tmp%37#0, reinterpret_Encoded(uint64,uint64)%0#0)
        return 1u
    block@9: // struct_return_route_L171
        let tmp%38#0: uint64 = (txn OnCompletion)
        let tmp%39#0: bool = (== tmp%38#0 NoOp)
        (assert tmp%39#0) // OnCompletion is not NoOp
        let tmp%40#0: uint64 = (txn ApplicationID)
        let tmp%41#0: bool = (!= tmp%40#0 0u)
        (assert tmp%41#0) // can only call when not creating
        let tmp%42#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.contract.Contract.struct_return()
        let tmp%43#0: bytes = (concat 0x151f7c75 tmp%42#0)
        (log tmp%43#0)
        return 1u
    block@10: // tup_return_route_L175
        let tmp%44#0: uint64 = (txn OnCompletion)
        let tmp%45#0: bool = (== tmp%44#0 NoOp)
        (assert tmp%45#0) // OnCompletion is not NoOp
        let tmp%46#0: uint64 = (txn ApplicationID)
        let tmp%47#0: bool = (!= tmp%46#0 0u)
        (assert tmp%47#0) // can only call when not creating
        let (tmp%48#0: uint64, tmp%49#0: uint64) = test_cases.mutable_native_types.contract.Contract.tup_return()
        let tmp%50#0: Encoded(uint64,uint64) = encode<(uint64,uint64)>(tmp%48#0, tmp%49#0)
        let tmp%51#0: bytes = (concat 0x151f7c75 tmp%50#0)
        (log tmp%51#0)
        return 1u
    block@11: // calculate_sum_route_L179
        let tmp%52#0: uint64 = (txn OnCompletion)
        let tmp%53#0: bool = (== tmp%52#0 NoOp)
        (assert tmp%53#0) // OnCompletion is not NoOp
        let tmp%54#0: uint64 = (txn ApplicationID)
        let tmp%55#0: bool = (!= tmp%54#0 0u)
        (assert tmp%55#0) // can only call when not creating
        let tmp%56#0: uint64 = test_cases.mutable_native_types.contract.Contract.calculate_sum()
        let tmp%57#0: Encoded(uint64) = encode<uint64>(tmp%56#0)
        let tmp%58#0: bytes = (concat 0x151f7c75 tmp%57#0)
        (log tmp%58#0)
        return 1u
    block@12: // switch_case_default_L68
        goto block@13
    block@13: // switch_case_next_L68
        goto block@18
    block@14: // bare_routing_L68
        let tmp%59#0: uint64 = (txn OnCompletion)
        switch tmp%59#0 {0u => block@15, * => block@16}
    block@15: // __algopy_default_create_L1
        let tmp%60#0: uint64 = (txn ApplicationID)
        let tmp%61#0: bool = (== tmp%60#0 0u)
        (assert tmp%61#0) // can only call when creating
        test_cases.mutable_native_types.contract.Contract.__algopy_default_create()
        return 1u
    block@16: // switch_case_default_L68
        goto block@17
    block@17: // switch_case_next_L68
        goto block@18
    block@18: // after_if_else_L68
        return 0u

subroutine test_cases.mutable_native_types.contract.Contract.__init__() -> void:
    block@0: // L69
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: Encoded(uint64,uint64) = encode<(uint64,uint64)>(tmp%0#0, tmp%1#0)
        let tmp%3#0: uint64 = (txn NumAppArgs)
        let tmp%4#0: uint64 = (+ tmp%3#0 1u)
        let tmp%5#0: uint64 = (txn NumAppArgs)
        let tmp%6#0: uint64 = (+ tmp%5#0 1u)
        let tmp%7#0: Encoded(uint64,uint64) = encode<(uint64,uint64)>(tmp%4#0, tmp%6#0)
        let tmp%8#0: uint64 = (txn NumAppArgs)
        let tmp%9#0: uint64 = (+ tmp%8#0 1u)
        let tmp%10#0: uint64 = (txn NumAppArgs)
        let tmp%11#0: uint64 = (+ tmp%10#0 1u)
        let tmp%12#0: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = encode<((uint64,uint64),(uint64,uint64),(uint64,uint64))>(tmp%2#0, tmp%7#0, tmp%9#0, tmp%11#0)
        (app_global_put "nested" tmp%12#0)
        let tmp%13#0: uint64 = (txn NumAppArgs)
        let tmp%14#0: uint64 = (txn NumAppArgs)
        let encoded_array%0#0: Encoded(len+uint8[]) = encode<(len+uint8[])>()
        let tmp%15#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+uint8[])) = encode<(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+uint8[]))>(tmp%13#0, tmp%14#0, 0x, "", encoded_array%0#0)
        (app_global_put "dyn" tmp%15#0)
        (app_global_put "num_payments" 0u)
        let tmp%16#0: Encoded((uint8[32],uint64,uint64)[8]) = (bzero 384u)
        (app_global_put "payments" tmp%16#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.fixed_initialize() -> void:
    block@0: // L92
        let tmp%0#0: Encoded(uint64[3]) = (bzero 24u)
        let arr_3#0: Encoded(uint64[3]) = tmp%0#0
        let encoded_value%0#0: Encoded(uint64) = encode<uint64>(0u)
        let updated_array%0#0: Encoded(uint64[3]) = agg_write_index(arr_3#0, 0u, encoded_value%0#0)
        let arr_3#1: Encoded(uint64[3]) = updated_array%0#0
        let encoded_value%1#0: Encoded(uint64) = encode<uint64>(1u)
        let updated_array%1#0: Encoded(uint64[3]) = agg_write_index(arr_3#1, 1u, encoded_value%1#0)
        let arr_3#2: Encoded(uint64[3]) = updated_array%1#0
        let encoded_value%2#0: Encoded(uint64) = encode<uint64>(2u)
        let updated_array%2#0: Encoded(uint64[3]) = agg_write_index(arr_3#2, 2u, encoded_value%2#0)
        let arr_3#3: Encoded(uint64[3]) = updated_array%2#0
        let encoded_array%0#0: Encoded(uint64[3]) = encode<uint64[3]>(0u, 1u, 2u)
        let arr_3_from_tuple#0: Encoded(uint64[3]) = encoded_array%0#0
        let tmp%1#0: bool = (== arr_3#3 arr_3_from_tuple#0)
        (assert tmp%1#0) // should be the same
        let encoded_array%1#0: Encoded(uint64[3]) = encode<uint64[3]>(1u, 1u, 1u)
        let arr_3_from_full#0: Encoded(uint64[3]) = encoded_array%1#0
        let array_item%0#0: Encoded(uint64) = agg_read_index(arr_3_from_full#0, 0u)
        let values%0#0: uint64 = decode<uint64>(array_item%0#0)
        let tmp%2#0: bool = (== values%0#0 1u)
        (assert tmp%2#0)
        let array_item%1#0: Encoded(uint64) = agg_read_index(arr_3_from_full#0, 1u)
        let values%1#0: uint64 = decode<uint64>(array_item%1#0)
        let tmp%3#0: bool = (== values%1#0 1u)
        (assert tmp%3#0)
        let array_item%2#0: Encoded(uint64) = agg_read_index(arr_3_from_full#0, 2u)
        let values%2#0: uint64 = decode<uint64>(array_item%2#0)
        let tmp%4#0: bool = (== values%2#0 1u)
        (assert tmp%4#0)
        let arr_3_from_fixed#0: Encoded(uint64[3]) = arr_3#3
        let tmp%5#0: bool = (== arr_3#3 arr_3_from_fixed#0)
        (assert tmp%5#0) // should be the same
        let encoded_array%2#0: Encoded(len+uint64[]) = encode<(len+uint64[])>(0u, 1u, 2u)
        let dynamic_arr#0: Encoded(len+uint64[]) = encoded_array%2#0
        let array_length%0#0: uint64 = (extract_uint16 dynamic_arr#0 0u)
        let eq%0#0: bool = (== array_length%0#0 3u)
        (assert eq%0#0) // invalid input length
        let converted_array%0#0: Encoded(uint64[3]) = ((extract 2 0) dynamic_arr#0)
        let tmp%6#0: bool = (== arr_3#3 converted_array%0#0)
        (assert tmp%6#0)
        let awst_tmp%0#0: Encoded(uint64,uint64,uint64) = encode<(uint64,uint64,uint64)>(0u, 1u, 2u)
        let tuple_item%0#0: Encoded(uint64) = agg_read_index(awst_tmp%0#0, 0)
        let values%3#0: uint64 = decode<uint64>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(uint64) = agg_read_index(awst_tmp%0#0, 1)
        let values%4#0: uint64 = decode<uint64>(tuple_item%1#0)
        let tuple_item%2#0: Encoded(uint64) = agg_read_index(awst_tmp%0#0, 2)
        let values%5#0: uint64 = decode<uint64>(tuple_item%2#0)
        let encoded_array%3#0: Encoded(uint64[3]) = encode<uint64[3]>(values%3#0, values%4#0, values%5#0)
        let tmp%7#0: bool = (== arr_3#3 encoded_array%3#0)
        (assert tmp%7#0)
        let encoded_array%4#0: Encoded(uint64[3]) = encode<uint64[3]>(0x0000000000000000, 0x0000000000000001, 0x0000000000000002)
        let static_array#0: Encoded(uint64[3]) = encoded_array%4#0
        let tmp%8#0: bool = (== static_array#0 arr_3#3)
        (assert tmp%8#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.add_payment(pay: Encoded(uint8[32],uint64,uint64)) -> void:
    block@0: // L122
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%0#0) // check self.num_payments exists
        let tmp%0#0: bool = (< maybe_value%0#0 8u)
        (assert tmp%0#0) // too many payments
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "payments")
        (assert maybe_exists%1#0) // check self.payments exists
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%2#0) // check self.num_payments exists
        let updated_array%0#0: Encoded((uint8[32],uint64,uint64)[8]) = agg_write_index(maybe_value%1#0, maybe_value%2#0, pay#0)
        (app_global_put "payments" updated_array%0#0)
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%3#0) // check self.num_payments exists
        let tmp%1#0: uint64 = (+ maybe_value%3#0 1u)
        (app_global_put "num_payments" tmp%1#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.increment_payment(index: uint64, amt: uint64) -> void:
    block@0: // L128
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%0#0) // check self.num_payments exists
        let tmp%0#0: bool = (< index#0 maybe_value%0#0)
        (assert tmp%0#0) // invalid payment index
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "payments")
        (assert maybe_exists%1#0) // check self.payments exists
        let array_item%0#0: Encoded(uint8[32],uint64,uint64) = agg_read_index(maybe_value%1#0, index#0)
        let tuple_item%0#0: Encoded(uint64) = agg_read_index(array_item%0#0, 2)
        let values%0#0: uint64 = decode<uint64>(tuple_item%0#0)
        let tmp%1#0: uint64 = (+ values%0#0 amt#0)
        let encoded_value%0#0: Encoded(uint64) = encode<uint64>(tmp%1#0)
        let updated_array%0#0: Encoded((uint8[32],uint64,uint64)[8]) = agg_write_index(maybe_value%1#0, index#0, 2, encoded_value%0#0)
        (app_global_put "payments" updated_array%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.create_storage(box_key: uint64) -> void:
    block@0: // L133
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        (app_global_put 0x70 maybe_value%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%1#0) // check self.nested exists
        let tmp%0#0: account = (txn Sender)
        (app_local_put tmp%0#0 0x6c maybe_value%1#0)
        let tmp%1#0: bool = (box_create "box" 2064u)
        (assert tmp%1#0) // expected box to not exist
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%2#0) // check self.nested exists
        let tuple_item%0#0: Encoded(uint64,uint64) = agg_read_index(maybe_value%2#0, 0)
        let encoded_value%0#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#0)
        let storage_value%0#0: bytes = box_read(box_prefixed_key%0#0)
        let updated_tuple%0#0: Encoded((uint64,uint64),uint8[2048]) = agg_write_index(storage_value%0#0, 0, tuple_item%0#0)
        box_write(box_prefixed_key%0#0, updated_tuple%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.local_struct() -> Encoded(uint8[32],uint64,uint64):
    block@0: // L140
        let tmp%0#0: account = (txn Sender)
        let tmp%1#0: Encoded(uint8[32],uint64,uint64) = encode<(uint8[32],uint64,uint64)>(tmp%0#0, 1234u, 567u)
        let a#0: Encoded(uint8[32],uint64,uint64) = tmp%1#0
        let tuple_item%0#0: Encoded(uint8[32]) = agg_read_index(a#0, 0)
        let values%0#0: account = decode<account>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(uint64) = agg_read_index(a#0, 1)
        let values%1#0: uint64 = decode<uint64>(tuple_item%1#0)
        let tuple_item%2#0: Encoded(uint64) = agg_read_index(a#0, 2)
        let values%2#0: uint64 = decode<uint64>(tuple_item%2#0)
        let foo#0: account = values%0#0
        let bar#0: uint64 = values%1#0
        let baz#0: uint64 = values%2#0
        let tmp%2#0: account = (global ZeroAddress)
        let tmp%3#0: bool = (!= foo#0 tmp%2#0)
        (assert tmp%3#0) // use foo
        let reinterpret_bool%0#0: bool = bar#0
        (assert reinterpret_bool%0#0) // use bar
        let tmp%4#0: bool = (!= baz#0 0u)
        (assert tmp%4#0) // use baz
        let do_something%0#0: Encoded(uint8[32],uint64,uint64) = test_cases.mutable_native_types.contract.do_something(a#0)
        let a#1: Encoded(uint8[32],uint64,uint64) = do_something%0#0
        return a#1

subroutine test_cases.mutable_native_types.contract.Contract.delete_storage(box_key: uint64) -> void:
    block@0: // L152
        (app_global_del 0x70)
        let tmp%0#0: account = (txn Sender)
        (app_local_del tmp%0#0 0x6c)
        (box_del "box")
        let encoded_value%0#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#0)
        (box_del box_prefixed_key%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.struct_arg(box_key: uint64, a: Encoded(uint64,uint64)) -> void:
    block@0: // L161
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let updated_tuple%0#0: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = agg_write_index(maybe_value%0#0, 0, a#0)
        (app_global_put "nested" updated_tuple%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u 0x70)
        (assert maybe_exists%1#0) // check self.nested_proxy exists
        let updated_tuple%1#0: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = agg_write_index(maybe_value%1#0, 0, a#0)
        (app_global_put 0x70 updated_tuple%1#0)
        let tmp%0#0: account = (txn Sender)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_local_get_ex tmp%0#0 0u 0x6c)
        (assert maybe_exists%2#0) // check self.nested_local exists for account
        let updated_tuple%2#0: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = agg_write_index(maybe_value%2#0, 0, a#0)
        (app_local_put tmp%0#0 0x6c updated_tuple%2#0)
        let storage_value%0#0: bytes = box_read("box")
        let updated_tuple%3#0: Encoded((uint64,uint64),uint8[2048]) = agg_write_index(storage_value%0#0, 0, a#0)
        box_write("box", updated_tuple%3#0)
        let encoded_value%0#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#0)
        let storage_value%1#0: bytes = box_read(box_prefixed_key%0#0)
        let updated_tuple%4#0: Encoded((uint64,uint64),uint8[2048]) = agg_write_index(storage_value%1#0, 0, a#0)
        box_write(box_prefixed_key%0#0, updated_tuple%4#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.struct_return() -> Encoded(uint64,uint64):
    block@0: // L171
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let tuple_item%0#0: Encoded(uint64,uint64) = agg_read_index(maybe_value%0#0, 0)
        return tuple_item%0#0

subroutine test_cases.mutable_native_types.contract.Contract.tup_return() -> <uint64, uint64>:
    block@0: // L175
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let tuple_item%0#0: Encoded(uint64,uint64) = agg_read_index(maybe_value%0#0, 2)
        let (values%0#0: uint64, values%1#0: uint64) = decode<(uint64,uint64,)>(tuple_item%0#0)
        return values%0#0 values%1#0

subroutine test_cases.mutable_native_types.contract.Contract.calculate_sum() -> uint64:
    block@0: // L179
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let tuple_item%0#0: Encoded(uint64,uint64) = agg_read_index(maybe_value%0#0, 0)
        let fixed_a#0: Encoded(uint64,uint64) = tuple_item%0#0
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%1#0) // check self.nested exists
        let tuple_item%1#0: Encoded(uint64,uint64) = agg_read_index(maybe_value%1#0, 1)
        let fixed_b#0: Encoded(uint64,uint64) = tuple_item%1#0
        let tmp%0#0: uint64 = test_cases.mutable_native_types.contract.add(fixed_a#0)
        let tmp%1#0: uint64 = test_cases.mutable_native_types.contract.add(fixed_b#0)
        let tmp%2#0: uint64 = (+ tmp%0#0 tmp%1#0)
        let result#0: uint64 = tmp%2#0
        let tmp%3#0: bool = (< result#0 100u)
        goto tmp%3#0 ? block@1 : block@2
    block@1: // if_body_L185
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%2#0) // check self.nested exists
        let tuple_item%2#0: Encoded(uint64,uint64) = agg_read_index(maybe_value%2#0, 2)
        let (values%0#0: uint64, values%1#0: uint64) = decode<(uint64,uint64,)>(tuple_item%2#0)
        let c#0: uint64 = values%0#0
        let d#0: uint64 = values%1#0
        let tmp%4#0: uint64 = (+ result#0 c#0)
        let result#1: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (+ result#1 d#0)
        let result#2: uint64 = tmp%5#0
        goto block@2
    block@2: // after_if_else_L184
        let result#3: uint64 = φ(result#0 <- block@0, result#2 <- block@1)
        return result#3

subroutine test_cases.mutable_native_types.contract.Contract.__algopy_default_create() -> void:
    block@0: // L1
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        let tmp%0#0: bool = test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__()
        return tmp%0#0