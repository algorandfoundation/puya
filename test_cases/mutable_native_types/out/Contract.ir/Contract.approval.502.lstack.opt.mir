// Op                                                                                                      Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        txn ApplicationID                                                                                  tmp%0#0
        bz main_call___init__@1 ; b main_after_if_else@2

    main_call___init__@1:
        // mutable_native_types/contract.py:75
        // FixedStruct(a=Txn.num_app_args, b=Txn.num_app_args),
        txn NumAppArgs                                                                                     tmp%0#1
        txn NumAppArgs                                                                                     tmp%0#1,tmp%1#2
        l-load tmp%0#1 1                                                                                   tmp%1#2,tmp%0#1
        itob                                                                                               tmp%1#2,aggregate%val_as_bytes%0#0
        l-load tmp%1#2 1                                                                                   aggregate%val_as_bytes%0#0,tmp%1#2
        itob                                                                                               aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        l-load aggregate%val_as_bytes%0#0 1                                                                aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%0#0
        l-load aggregate%val_as_bytes%1#0 1                                                                aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        concat                                                                                             aggregate%head%1#0
        // mutable_native_types/contract.py:76
        // FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
        txn NumAppArgs                                                                                     aggregate%head%1#0,tmp%3#1
        int 1                                                                                              aggregate%head%1#0,tmp%3#1,1
        +                                                                                                  aggregate%head%1#0,tmp%4#0
        txn NumAppArgs                                                                                     aggregate%head%1#0,tmp%4#0,tmp%5#1
        int 1                                                                                              aggregate%head%1#0,tmp%4#0,tmp%5#1,1
        +                                                                                                  aggregate%head%1#0,tmp%4#0,tmp%6#1
        l-load tmp%4#0 1                                                                                   aggregate%head%1#0,tmp%6#1,tmp%4#0
        itob                                                                                               aggregate%head%1#0,tmp%6#1,aggregate%val_as_bytes%2#0
        l-load tmp%6#1 1                                                                                   aggregate%head%1#0,aggregate%val_as_bytes%2#0,tmp%6#1
        itob                                                                                               aggregate%head%1#0,aggregate%val_as_bytes%2#0,aggregate%val_as_bytes%3#0
        l-load aggregate%val_as_bytes%2#0 1                                                                aggregate%head%1#0,aggregate%val_as_bytes%3#0,aggregate%val_as_bytes%2#0
        l-load aggregate%val_as_bytes%3#0 1                                                                aggregate%head%1#0,aggregate%val_as_bytes%2#0,aggregate%val_as_bytes%3#0
        concat                                                                                             aggregate%head%1#0,aggregate%head%3#0
        // mutable_native_types/contract.py:77
        // NamedTup(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
        txn NumAppArgs                                                                                     aggregate%head%1#0,aggregate%head%3#0,tmp%8#1
        int 1                                                                                              aggregate%head%1#0,aggregate%head%3#0,tmp%8#1,1
        +                                                                                                  aggregate%head%1#0,aggregate%head%3#0,tmp%9#0
        txn NumAppArgs                                                                                     aggregate%head%1#0,aggregate%head%3#0,tmp%9#0,tmp%10#1
        int 1                                                                                              aggregate%head%1#0,aggregate%head%3#0,tmp%9#0,tmp%10#1,1
        +                                                                                                  aggregate%head%1#0,aggregate%head%3#0,tmp%9#0,tmp%11#1
        // mutable_native_types/contract.py:74-78
        // self.nested = NestedStruct(
        //     FixedStruct(a=Txn.num_app_args, b=Txn.num_app_args),
        //     FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
        //     NamedTup(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
        // )
        l-load aggregate%head%1#0 3                                                                        aggregate%head%3#0,tmp%9#0,tmp%11#1,aggregate%head%1#0
        l-load aggregate%head%3#0 3                                                                        tmp%9#0,tmp%11#1,aggregate%head%1#0,aggregate%head%3#0
        concat                                                                                             tmp%9#0,tmp%11#1,aggregate%head%5#0
        l-load tmp%9#0 2                                                                                   tmp%11#1,aggregate%head%5#0,tmp%9#0
        itob                                                                                               tmp%11#1,aggregate%head%5#0,aggregate%val_as_bytes%4#0
        l-load tmp%11#1 2                                                                                  aggregate%head%5#0,aggregate%val_as_bytes%4#0,tmp%11#1
        itob                                                                                               aggregate%head%5#0,aggregate%val_as_bytes%4#0,aggregate%val_as_bytes%5#0
        l-load aggregate%val_as_bytes%4#0 1                                                                aggregate%head%5#0,aggregate%val_as_bytes%5#0,aggregate%val_as_bytes%4#0
        l-load aggregate%val_as_bytes%5#0 1                                                                aggregate%head%5#0,aggregate%val_as_bytes%4#0,aggregate%val_as_bytes%5#0
        concat                                                                                             aggregate%head%5#0,aggregate%head%7#0
        l-load aggregate%head%5#0 1                                                                        aggregate%head%7#0,aggregate%head%5#0
        l-load aggregate%head%7#0 1                                                                        aggregate%head%5#0,aggregate%head%7#0
        concat                                                                                             aggregate%head%8#0
        // mutable_native_types/contract.py:74
        // self.nested = NestedStruct(
        byte "nested"                                                                                      aggregate%head%8#0,"nested"
        // mutable_native_types/contract.py:74-78
        // self.nested = NestedStruct(
        //     FixedStruct(a=Txn.num_app_args, b=Txn.num_app_args),
        //     FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
        //     NamedTup(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
        // )
        l-load aggregate%head%8#0 1                                                                        "nested",aggregate%head%8#0
        app_global_put
        // mutable_native_types/contract.py:85
        // a=Txn.num_app_args,
        txn NumAppArgs                                                                                     tmp%13#0
        // mutable_native_types/contract.py:86
        // b=Txn.num_app_args,
        txn NumAppArgs                                                                                     tmp%13#0,tmp%14#0
        // mutable_native_types/contract.py:84-90
        // self.dyn = DynamicStruct(
        //     a=Txn.num_app_args,
        //     b=Txn.num_app_args,
        //     c=Bytes(),
        //     d=String(),
        //     e=Array[arc4.Byte](),
        // )
        l-load tmp%13#0 1                                                                                  tmp%14#0,tmp%13#0
        itob                                                                                               tmp%14#0,aggregate%val_as_bytes%6#0
        l-load tmp%14#0 1                                                                                  aggregate%val_as_bytes%6#0,tmp%14#0
        itob                                                                                               aggregate%val_as_bytes%6#0,aggregate%val_as_bytes%7#0
        l-load aggregate%val_as_bytes%6#0 1                                                                aggregate%val_as_bytes%7#0,aggregate%val_as_bytes%6#0
        l-load aggregate%val_as_bytes%7#0 1                                                                aggregate%val_as_bytes%6#0,aggregate%val_as_bytes%7#0
        concat                                                                                             aggregate%head%10#0
        byte 0x00160018001a000000000000                                                                    aggregate%head%10#0,0x00160018001a000000000000
        concat                                                                                             aggregate%concat%2#0
        // mutable_native_types/contract.py:84
        // self.dyn = DynamicStruct(
        byte "dyn"                                                                                         aggregate%concat%2#0,"dyn"
        // mutable_native_types/contract.py:84-90
        // self.dyn = DynamicStruct(
        //     a=Txn.num_app_args,
        //     b=Txn.num_app_args,
        //     c=Bytes(),
        //     d=String(),
        //     e=Array[arc4.Byte](),
        // )
        l-load aggregate%concat%2#0 1                                                                      "dyn",aggregate%concat%2#0
        app_global_put
        // mutable_native_types/contract.py:92
        // self.num_payments = UInt64(0)
        byte "num_payments"                                                                                "num_payments"
        int 0                                                                                              "num_payments",0
        app_global_put
        // mutable_native_types/contract.py:93
        // self.payments = zero_bytes(FixedArray[Payment, typing.Literal[2]])
        int 96                                                                                             96
        bzero                                                                                              tmp%16#0
        byte "payments"                                                                                    tmp%16#0,"payments"
        l-load tmp%16#0 1                                                                                  "payments",tmp%16#0
        app_global_put
        b main_after_if_else@2

    main_after_if_else@2:
        // mutable_native_types/contract.py:71
        // class Contract(arc4.ARC4Contract):
        txn NumAppArgs                                                                                     tmp%0#1
        bz main___algopy_default_create@22 ; b main_abi_routing@4

    main_abi_routing@4:
        // mutable_native_types/contract.py:71
        // class Contract(arc4.ARC4Contract):
        txn OnCompletion                                                                                   tmp%2#0
        !                                                                                                  tmp%3#0
        assert // OnCompletion must be NoOp
        txn ApplicationID                                                                                  tmp%4#0
        assert
        txna ApplicationArgs 0                                                                             tmp%6#0
        method test_imm_fixed_array()void                                                                  tmp%6#0,Method(test_imm_fixed_array()void)
        method fixed_initialize()void                                                                      tmp%6#0,Method(test_imm_fixed_array()void),Method(fixed_initialize()void)
        method add_payment((address,uint64,uint64))void                                                    tmp%6#0,Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void)
        method increment_payment(uint64,uint64)void                                                        tmp%6#0,Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void)
        method create_storage(uint64)void                                                                  tmp%6#0,Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void)
        method local_struct()(address,uint64,uint64)                                                       tmp%6#0,Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64))
        method delete_storage(uint64)void                                                                  tmp%6#0,Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void)
        method struct_arg(uint64,(uint64,uint64))void                                                      tmp%6#0,Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void),Method(struct_arg(uint64,(uint64,uint64))void)
        method struct_return()(uint64,uint64)                                                              tmp%6#0,Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void),Method(struct_arg(uint64,(uint64,uint64))void),Method(struct_return()(uint64,uint64))
        method tup_return()(uint64,uint64)                                                                 tmp%6#0,Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void),Method(struct_arg(uint64,(uint64,uint64))void),Method(struct_return()(uint64,uint64)),Method(tup_return()(uint64,uint64))
        method calculate_sum()uint64                                                                       tmp%6#0,Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void),Method(struct_arg(uint64,(uint64,uint64))void),Method(struct_return()(uint64,uint64)),Method(tup_return()(uint64,uint64)),Method(calculate_sum()uint64)
        method test_arr((uint64,uint64)[])(uint64,uint64)[]                                                tmp%6#0,Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void),Method(struct_arg(uint64,(uint64,uint64))void),Method(struct_return()(uint64,uint64)),Method(tup_return()(uint64,uint64)),Method(calculate_sum()uint64),Method(test_arr((uint64,uint64)[])(uint64,uint64)[])
        method test_match_struct((uint64,uint64))bool                                                      tmp%6#0,Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void),Method(struct_arg(uint64,(uint64,uint64))void),Method(struct_return()(uint64,uint64)),Method(tup_return()(uint64,uint64)),Method(calculate_sum()uint64),Method(test_arr((uint64,uint64)[])(uint64,uint64)[]),Method(test_match_struct((uint64,uint64))bool)
        l-load tmp%6#0 13                                                                                  Method(test_imm_fixed_array()void),Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void),Method(struct_arg(uint64,(uint64,uint64))void),Method(struct_return()(uint64,uint64)),Method(tup_return()(uint64,uint64)),Method(calculate_sum()uint64),Method(test_arr((uint64,uint64)[])(uint64,uint64)[]),Method(test_match_struct((uint64,uint64))bool),tmp%6#0
        match main_test_imm_fixed_array_route@6 main_fixed_initialize_route@7 main_add_payment_route@8 main_increment_payment_route@9 main_create_storage_route@10 main_local_struct_route@11 main_delete_storage_route@12 main_struct_arg_route@13 main_struct_return_route@14 main_tup_return_route@15 main_calculate_sum_route@16 main_test_arr_route@17 main_test_match_struct_route@18 ; b main_after_if_else@21 

    main_test_imm_fixed_array_route@6:
        // mutable_native_types/contract.py:95
        // @arc4.abimethod()
        int 1                                                                                              1
        return

    main_fixed_initialize_route@7:
        // mutable_native_types/contract.py:101
        // @arc4.abimethod()
        int 1                                                                                              1
        return

    main_add_payment_route@8:
        // mutable_native_types/contract.py:131
        // @arc4.abimethod()
        callsub add_payment
        b main_after_if_else@21

    main_increment_payment_route@9:
        // mutable_native_types/contract.py:137
        // @arc4.abimethod()
        callsub increment_payment
        b main_after_if_else@21

    main_create_storage_route@10:
        // mutable_native_types/contract.py:142
        // @arc4.abimethod()
        callsub create_storage
        b main_after_if_else@21

    main_local_struct_route@11:
        // mutable_native_types/contract.py:149
        // @arc4.abimethod()
        callsub local_struct
        b main_after_if_else@21

    main_delete_storage_route@12:
        // mutable_native_types/contract.py:161
        // @arc4.abimethod()
        callsub delete_storage
        b main_after_if_else@21

    main_struct_arg_route@13:
        // mutable_native_types/contract.py:168
        // @arc4.abimethod()
        callsub struct_arg
        b main_after_if_else@21

    main_struct_return_route@14:
        // mutable_native_types/contract.py:178
        // @arc4.abimethod()
        callsub struct_return
        b main_after_if_else@21

    main_tup_return_route@15:
        // mutable_native_types/contract.py:182
        // @arc4.abimethod()
        callsub tup_return
        b main_after_if_else@21

    main_calculate_sum_route@16:
        // mutable_native_types/contract.py:186
        // @arc4.abimethod()
        callsub calculate_sum
        b main_after_if_else@21

    main_test_arr_route@17:
        // mutable_native_types/contract.py:197
        // @arc4.abimethod()
        callsub test_arr
        b main_after_if_else@21

    main_test_match_struct_route@18:
        // mutable_native_types/contract.py:261
        // @arc4.abimethod
        callsub test_match_struct
        b main_after_if_else@21

    main_after_if_else@21:
        // mutable_native_types/contract.py:71
        // class Contract(arc4.ARC4Contract):
        err

    main___algopy_default_create@22:
        txn OnCompletion                                                                                   tmp%7#0
        !                                                                                                  tmp%8#0
        txn ApplicationID                                                                                  tmp%8#0,tmp%9#0
        !                                                                                                  tmp%8#0,tmp%10#0
        l-load tmp%8#0 1                                                                                   tmp%10#0,tmp%8#0
        l-load tmp%10#0 1                                                                                  tmp%8#0,tmp%10#0
        &&                                                                                                 tmp%11#0
        assert // OnCompletion must be NoOp && can only call when creating
        int 1                                                                                              1
        return


// test_cases.mutable_native_types.contract.sum_frozen_arr(arr: bytes) -> uint64:
subroutine sum_frozen_arr:
    sum_frozen_arr_block@0:                                                                                (𝕡) arr#0 |
        // mutable_native_types/contract.py:272
        // total = UInt64(0)
        int 0                                                                                              (𝕡) arr#0 | 0
        v-store total#0                                                                                    (𝕡) arr#0 |
        // mutable_native_types/contract.py:273
        // for element in arr:
        p-load arr#0                                                                                       (𝕡) arr#0 | arr#0 (copy)
        int 0                                                                                              (𝕡) arr#0 | arr#0 (copy),0
        extract_uint16                                                                                     (𝕡) arr#0 | aggregate%array_length%0#0
        v-store aggregate%array_length%0#0                                                                 (𝕡) arr#0 |
        int 0                                                                                              (𝕡) arr#0 | 0
        v-store item_index_internal%0#0                                                                    (𝕡) arr#0 |
        b sum_frozen_arr_for_header@1                                                                      (𝕡) arr#0 |

    sum_frozen_arr_for_header@1:                                                                           (𝕡) arr#0 |
        // mutable_native_types/contract.py:273
        // for element in arr:
        v-load item_index_internal%0#0                                                                     (𝕡) arr#0 | item_index_internal%0#0
        v-load aggregate%array_length%0#0                                                                  (𝕡) arr#0 | item_index_internal%0#0,aggregate%array_length%0#0
        <                                                                                                  (𝕡) arr#0 | continue_looping%0#0
        bz sum_frozen_arr_after_for@4 ; b sum_frozen_arr_for_body@2                                        (𝕡) arr#0 |

    sum_frozen_arr_for_body@2:                                                                             (𝕡) arr#0 |
        // mutable_native_types/contract.py:273-274
        // for element in arr:
        //     total += element.a
        p-load arr#0                                                                                       (𝕡) arr#0 | arr#0 (copy)
        extract 2 0                                                                                        (𝕡) arr#0 | aggregate%array_trimmed%0#0
        v-load item_index_internal%0#0                                                                     (𝕡) arr#0 | aggregate%array_trimmed%0#0,item_index_internal%0#0
        l-store-copy item_index_internal%0#0 1                                                             (𝕡) arr#0 | item_index_internal%0#0,aggregate%array_trimmed%0#0,item_index_internal%0#0 (copy)
        int 16                                                                                             (𝕡) arr#0 | item_index_internal%0#0,aggregate%array_trimmed%0#0,item_index_internal%0#0 (copy),16
        *                                                                                                  (𝕡) arr#0 | item_index_internal%0#0,aggregate%array_trimmed%0#0,aggregate%bytes_offset%0#0
        l-load aggregate%array_trimmed%0#0 1                                                               (𝕡) arr#0 | item_index_internal%0#0,aggregate%bytes_offset%0#0,aggregate%array_trimmed%0#0
        l-load aggregate%bytes_offset%0#0 1                                                                (𝕡) arr#0 | item_index_internal%0#0,aggregate%array_trimmed%0#0,aggregate%bytes_offset%0#0
        int 16                                                                                             (𝕡) arr#0 | item_index_internal%0#0,aggregate%array_trimmed%0#0,aggregate%bytes_offset%0#0,16
        extract3 // on error: index access is out of bounds                                                (𝕡) arr#0 | item_index_internal%0#0,aggregate%encoded_element%0#0
        // mutable_native_types/contract.py:274
        // total += element.a
        l-load-copy aggregate%encoded_element%0#0 0                                                        (𝕡) arr#0 | item_index_internal%0#0,aggregate%encoded_element%0#0,aggregate%encoded_element%0#0 (copy)
        // mutable_native_types/contract.py:273-274
        // for element in arr:
        //     total += element.a
        int 0                                                                                              (𝕡) arr#0 | item_index_internal%0#0,aggregate%encoded_element%0#0,aggregate%encoded_element%0#0 (copy),0
        // mutable_native_types/contract.py:274
        // total += element.a
        extract_uint64                                                                                     (𝕡) arr#0 | item_index_internal%0#0,aggregate%encoded_element%0#0,values%0#0
        v-load total#0                                                                                     (𝕡) arr#0 | item_index_internal%0#0,aggregate%encoded_element%0#0,values%0#0,total#0
        l-load values%0#0 1                                                                                (𝕡) arr#0 | item_index_internal%0#0,aggregate%encoded_element%0#0,total#0,values%0#0
        +                                                                                                  (𝕡) arr#0 | item_index_internal%0#0,aggregate%encoded_element%0#0,total#0
        // mutable_native_types/contract.py:275
        // total += element.b
        l-load aggregate%encoded_element%0#0 1                                                             (𝕡) arr#0 | item_index_internal%0#0,total#0,aggregate%encoded_element%0#0
        int 8                                                                                              (𝕡) arr#0 | item_index_internal%0#0,total#0,aggregate%encoded_element%0#0,8
        extract_uint64                                                                                     (𝕡) arr#0 | item_index_internal%0#0,total#0,values%1#0
        l-load total#0 1                                                                                   (𝕡) arr#0 | item_index_internal%0#0,values%1#0,total#0
        l-load values%1#0 1                                                                                (𝕡) arr#0 | item_index_internal%0#0,total#0,values%1#0
        +                                                                                                  (𝕡) arr#0 | item_index_internal%0#0,total#0
        v-store total#0                                                                                    (𝕡) arr#0 | item_index_internal%0#0
        l-load item_index_internal%0#0 0                                                                   (𝕡) arr#0 | item_index_internal%0#0
        int 1                                                                                              (𝕡) arr#0 | item_index_internal%0#0,1
        +                                                                                                  (𝕡) arr#0 | item_index_internal%0#0
        v-store item_index_internal%0#0                                                                    (𝕡) arr#0 |
        b sum_frozen_arr_for_header@1                                                                      (𝕡) arr#0 |

    sum_frozen_arr_after_for@4:                                                                            (𝕡) arr#0 |
        // mutable_native_types/contract.py:276
        // return total
        v-load total#0                                                                                     (𝕡) arr#0 | total#0
        retsub                                                                                             total#0


// test_cases.mutable_native_types.contract.do_something(pay: bytes) -> bytes:
subroutine do_something:
    do_something_block@0:                                                                                  (𝕡) pay#0 |
        p-load pay#0                                                                                       (𝕡) pay#0 | pay#0 (copy)
        retsub                                                                                             pay#0 (copy)


// test_cases.mutable_native_types.contract.Contract.add_payment[routing]() -> void:
subroutine add_payment:
    add_payment_block@0:
        // mutable_native_types/contract.py:131
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                             pay#0
        // mutable_native_types/contract.py:133
        // assert self.num_payments < self.payments.length, "too many payments"
        int 0                                                                                              pay#0,0
        byte "num_payments"                                                                                pay#0,0,"num_payments"
        app_global_get_ex                                                                                  pay#0,maybe_value%0#0,maybe_exists%0#0
        assert // check self.num_payments exists                                                           pay#0,maybe_value%0#0
        l-load-copy maybe_value%0#0 0                                                                      pay#0,maybe_value%0#0,maybe_value%0#0 (copy)
        int 2                                                                                              pay#0,maybe_value%0#0,maybe_value%0#0 (copy),2
        <                                                                                                  pay#0,maybe_value%0#0,tmp%0#0
        assert // too many payments                                                                        pay#0,maybe_value%0#0
        // mutable_native_types/contract.py:134
        // self.payments[self.num_payments] = pay.copy()
        int 0                                                                                              pay#0,maybe_value%0#0,0
        byte "payments"                                                                                    pay#0,maybe_value%0#0,0,"payments"
        app_global_get_ex                                                                                  pay#0,maybe_value%0#0,maybe_value%1#0,maybe_exists%1#0
        assert // check self.payments exists                                                               pay#0,maybe_value%0#0,maybe_value%1#0
        l-load maybe_value%0#0 1                                                                           pay#0,maybe_value%1#0,maybe_value%0#0
        int 48                                                                                             pay#0,maybe_value%1#0,maybe_value%0#0,48
        *                                                                                                  pay#0,maybe_value%1#0,aggregate%write_offset%0#0
        l-load maybe_value%1#0 1                                                                           pay#0,aggregate%write_offset%0#0,maybe_value%1#0
        l-load aggregate%write_offset%0#0 1                                                                pay#0,maybe_value%1#0,aggregate%write_offset%0#0
        l-load pay#0 2                                                                                     maybe_value%1#0,aggregate%write_offset%0#0,pay#0
        replace3 // on error: index access is out of bounds                                                aggregate%updated_array%0#0
        byte "payments"                                                                                    aggregate%updated_array%0#0,"payments"
        l-load aggregate%updated_array%0#0 1                                                               "payments",aggregate%updated_array%0#0
        app_global_put
        // mutable_native_types/contract.py:135
        // self.num_payments += 1
        int 0                                                                                              0
        byte "num_payments"                                                                                0,"num_payments"
        app_global_get_ex                                                                                  maybe_value%3#0,maybe_exists%3#0
        assert // check self.num_payments exists                                                           maybe_value%3#0
        l-load maybe_value%3#0 0                                                                           maybe_value%3#0
        int 1                                                                                              maybe_value%3#0,1
        +                                                                                                  tmp%1#0
        byte "num_payments"                                                                                tmp%1#0,"num_payments"
        l-load tmp%1#0 1                                                                                   "num_payments",tmp%1#0
        app_global_put
        // mutable_native_types/contract.py:131
        // @arc4.abimethod()
        int 1                                                                                              1
        return


// test_cases.mutable_native_types.contract.Contract.increment_payment[routing]() -> void:
subroutine increment_payment:
    increment_payment_block@0:
        // mutable_native_types/contract.py:137
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                             reinterpret_Encoded(uint64)%0#0
        btoi                                                                                               index#0
        txna ApplicationArgs 2                                                                             index#0,reinterpret_Encoded(uint64)%1#0
        btoi                                                                                               index#0,amt#0
        // mutable_native_types/contract.py:139
        // assert index < self.num_payments, "invalid payment index"
        int 0                                                                                              index#0,amt#0,0
        byte "num_payments"                                                                                index#0,amt#0,0,"num_payments"
        app_global_get_ex                                                                                  index#0,amt#0,maybe_value%0#0,maybe_exists%0#0
        assert // check self.num_payments exists                                                           index#0,amt#0,maybe_value%0#0
        l-load-copy index#0 2                                                                              index#0,amt#0,maybe_value%0#0,index#0 (copy)
        l-load maybe_value%0#0 1                                                                           index#0,amt#0,index#0 (copy),maybe_value%0#0
        <                                                                                                  index#0,amt#0,tmp%0#1
        assert // invalid payment index                                                                    index#0,amt#0
        // mutable_native_types/contract.py:140
        // self.payments[index].amt += amt
        int 0                                                                                              index#0,amt#0,0
        byte "payments"                                                                                    index#0,amt#0,0,"payments"
        app_global_get_ex                                                                                  index#0,amt#0,maybe_value%1#0,maybe_exists%1#0
        assert // check self.payments exists                                                               index#0,amt#0,maybe_value%1#0
        l-load index#0 2                                                                                   amt#0,maybe_value%1#0,index#0
        int 48                                                                                             amt#0,maybe_value%1#0,index#0,48
        *                                                                                                  amt#0,maybe_value%1#0,aggregate%bytes_offset%0#0
        l-load-copy maybe_value%1#0 1                                                                      amt#0,maybe_value%1#0,aggregate%bytes_offset%0#0,maybe_value%1#0 (copy)
        l-load-copy aggregate%bytes_offset%0#0 1                                                           amt#0,maybe_value%1#0,aggregate%bytes_offset%0#0,maybe_value%1#0 (copy),aggregate%bytes_offset%0#0 (copy)
        int 48                                                                                             amt#0,maybe_value%1#0,aggregate%bytes_offset%0#0,maybe_value%1#0 (copy),aggregate%bytes_offset%0#0 (copy),48
        extract3 // on error: index access is out of bounds                                                amt#0,maybe_value%1#0,aggregate%bytes_offset%0#0,aggregate%encoded_element%0#0
        l-load-copy aggregate%encoded_element%0#0 0                                                        amt#0,maybe_value%1#0,aggregate%bytes_offset%0#0,aggregate%encoded_element%0#0,aggregate%encoded_element%0#0 (copy)
        int 40                                                                                             amt#0,maybe_value%1#0,aggregate%bytes_offset%0#0,aggregate%encoded_element%0#0,aggregate%encoded_element%0#0 (copy),40
        extract_uint64                                                                                     amt#0,maybe_value%1#0,aggregate%bytes_offset%0#0,aggregate%encoded_element%0#0,values%0#0
        l-load amt#0 4                                                                                     maybe_value%1#0,aggregate%bytes_offset%0#0,aggregate%encoded_element%0#0,values%0#0,amt#0
        +                                                                                                  maybe_value%1#0,aggregate%bytes_offset%0#0,aggregate%encoded_element%0#0,tmp%1#1
        itob                                                                                               maybe_value%1#0,aggregate%bytes_offset%0#0,aggregate%encoded_element%0#0,aggregate%val_as_bytes%0#0
        l-load aggregate%encoded_element%0#0 1                                                             maybe_value%1#0,aggregate%bytes_offset%0#0,aggregate%val_as_bytes%0#0,aggregate%encoded_element%0#0
        l-load aggregate%val_as_bytes%0#0 1                                                                maybe_value%1#0,aggregate%bytes_offset%0#0,aggregate%encoded_element%0#0,aggregate%val_as_bytes%0#0
        replace2 40                                                                                        maybe_value%1#0,aggregate%bytes_offset%0#0,aggregate%updated_data%0#0
        l-load maybe_value%1#0 2                                                                           aggregate%bytes_offset%0#0,aggregate%updated_data%0#0,maybe_value%1#0
        l-load aggregate%bytes_offset%0#0 2                                                                aggregate%updated_data%0#0,maybe_value%1#0,aggregate%bytes_offset%0#0
        l-load aggregate%updated_data%0#0 2                                                                maybe_value%1#0,aggregate%bytes_offset%0#0,aggregate%updated_data%0#0
        replace3 // on error: index access is out of bounds                                                aggregate%updated_array%0#0
        byte "payments"                                                                                    aggregate%updated_array%0#0,"payments"
        l-load aggregate%updated_array%0#0 1                                                               "payments",aggregate%updated_array%0#0
        app_global_put
        // mutable_native_types/contract.py:137
        // @arc4.abimethod()
        int 1                                                                                              1
        return


// test_cases.mutable_native_types.contract.Contract.create_storage[routing]() -> void:
subroutine create_storage:
    create_storage_block@0:
        // mutable_native_types/contract.py:142
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                             reinterpret_Encoded(uint64)%0#0
        btoi                                                                                               box_key#0
        // mutable_native_types/contract.py:144
        // self.nested_proxy.value = self.nested.copy()
        int 0                                                                                              box_key#0,0
        byte "nested"                                                                                      box_key#0,0,"nested"
        app_global_get_ex                                                                                  box_key#0,maybe_value%0#0,maybe_exists%0#0
        assert // check self.nested exists                                                                 box_key#0,maybe_value%0#0
        byte 0x70                                                                                          box_key#0,maybe_value%0#0,0x70
        l-load maybe_value%0#0 1                                                                           box_key#0,0x70,maybe_value%0#0
        app_global_put                                                                                     box_key#0
        // mutable_native_types/contract.py:145
        // self.nested_local[Txn.sender] = self.nested.copy()
        int 0                                                                                              box_key#0,0
        byte "nested"                                                                                      box_key#0,0,"nested"
        app_global_get_ex                                                                                  box_key#0,maybe_value%1#0,maybe_exists%1#0
        assert // check self.nested exists                                                                 box_key#0,maybe_value%1#0
        txn Sender                                                                                         box_key#0,maybe_value%1#0,tmp%0#1
        byte 0x6c                                                                                          box_key#0,maybe_value%1#0,tmp%0#1,0x6c
        l-load-copy maybe_value%1#0 2                                                                      box_key#0,maybe_value%1#0,tmp%0#1,0x6c,maybe_value%1#0 (copy)
        app_local_put                                                                                      box_key#0,maybe_value%1#0
        // mutable_native_types/contract.py:146
        // assert self.box.create(), "expected box to not exist"
        byte "box"                                                                                         box_key#0,maybe_value%1#0,"box"
        int 2064                                                                                           box_key#0,maybe_value%1#0,"box",2064
        box_create                                                                                         box_key#0,maybe_value%1#0,tmp%1#0
        assert // expected box to not exist                                                                box_key#0,maybe_value%1#0
        // mutable_native_types/contract.py:147
        // self.box_map[box_key].fixed_a = self.nested.fixed_a.copy()
        l-load maybe_value%1#0 0                                                                           box_key#0,maybe_value%1#0
        extract 0 16                                                                                       box_key#0,aggregate%extract%0#0
        l-load box_key#0 1                                                                                 aggregate%extract%0#0,box_key#0
        itob                                                                                               aggregate%extract%0#0,encoded_value%0#0
        byte "box_map"                                                                                     aggregate%extract%0#0,encoded_value%0#0,"box_map"
        l-load encoded_value%0#0 1                                                                         aggregate%extract%0#0,"box_map",encoded_value%0#0
        concat                                                                                             aggregate%extract%0#0,box_prefixed_key%0#0
        int 0                                                                                              aggregate%extract%0#0,box_prefixed_key%0#0,0
        l-load aggregate%extract%0#0 2                                                                     box_prefixed_key%0#0,0,aggregate%extract%0#0
        box_replace
        // mutable_native_types/contract.py:142
        // @arc4.abimethod()
        int 1                                                                                              1
        return


// test_cases.mutable_native_types.contract.Contract.local_struct[routing]() -> void:
subroutine local_struct:
    local_struct_block@0:
        // mutable_native_types/contract.py:151
        // a = Payment(Txn.sender, Asset(1234), UInt64(567))
        txn Sender                                                                                         tmp%0#1
        int 1234                                                                                           tmp%0#1,1234
        itob                                                                                               tmp%0#1,aggregate%val_as_bytes%0#0
        l-load tmp%0#1 1                                                                                   aggregate%val_as_bytes%0#0,tmp%0#1
        l-load aggregate%val_as_bytes%0#0 1                                                                tmp%0#1,aggregate%val_as_bytes%0#0
        concat                                                                                             aggregate%head%1#0
        int 567                                                                                            aggregate%head%1#0,567
        itob                                                                                               aggregate%head%1#0,aggregate%val_as_bytes%1#0
        l-load aggregate%head%1#0 1                                                                        aggregate%val_as_bytes%1#0,aggregate%head%1#0
        l-load aggregate%val_as_bytes%1#0 1                                                                aggregate%head%1#0,aggregate%val_as_bytes%1#0
        concat                                                                                             a#0
        // mutable_native_types/contract.py:154
        // (foo, bar, baz) = (a.receiver, a.asset, a.amt)
        l-load-copy a#0 0                                                                                  a#0,a#0 (copy)
        extract 0 32                                                                                       a#0,foo#0
        l-load-copy a#0 1                                                                                  a#0,foo#0,a#0 (copy)
        int 32                                                                                             a#0,foo#0,a#0 (copy),32
        extract_uint64                                                                                     a#0,foo#0,bar#0
        l-load-copy a#0 2                                                                                  a#0,foo#0,bar#0,a#0 (copy)
        int 40                                                                                             a#0,foo#0,bar#0,a#0 (copy),40
        extract_uint64                                                                                     a#0,foo#0,bar#0,baz#0
        // mutable_native_types/contract.py:155
        // assert foo, "use foo"
        global ZeroAddress                                                                                 a#0,foo#0,bar#0,baz#0,tmp%2#0
        l-load foo#0 3                                                                                     a#0,bar#0,baz#0,tmp%2#0,foo#0
        l-load tmp%2#0 1                                                                                   a#0,bar#0,baz#0,foo#0,tmp%2#0
        !=                                                                                                 a#0,bar#0,baz#0,tmp%3#0
        assert // use foo                                                                                  a#0,bar#0,baz#0
        // mutable_native_types/contract.py:156
        // assert bar, "use bar"
        l-load bar#0 1                                                                                     a#0,baz#0,bar#0
        assert // use bar                                                                                  a#0,baz#0
        // mutable_native_types/contract.py:157
        // assert baz, "use baz"
        l-load baz#0 0                                                                                     a#0,baz#0
        assert // use baz                                                                                  a#0
        // mutable_native_types/contract.py:158
        // do_something(a)
        l-load a#0 0                                                                                       a#0
        callsub do_something                                                                               a#0
        // mutable_native_types/contract.py:149
        // @arc4.abimethod()
        byte 0x151f7c75                                                                                    a#0,0x151f7c75
        l-load a#0 1                                                                                       0x151f7c75,a#0
        concat                                                                                             tmp%1#0
        log
        int 1                                                                                              1
        return


// test_cases.mutable_native_types.contract.Contract.delete_storage[routing]() -> void:
subroutine delete_storage:
    delete_storage_block@0:
        // mutable_native_types/contract.py:161
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                             reinterpret_Encoded(uint64)%0#0
        btoi                                                                                               box_key#0
        // mutable_native_types/contract.py:163
        // del self.nested_proxy.value
        byte 0x70                                                                                          box_key#0,0x70
        app_global_del                                                                                     box_key#0
        // mutable_native_types/contract.py:164
        // del self.nested_local[Txn.sender]
        txn Sender                                                                                         box_key#0,tmp%0#1
        byte 0x6c                                                                                          box_key#0,tmp%0#1,0x6c
        app_local_del                                                                                      box_key#0
        // mutable_native_types/contract.py:165
        // del self.box.value
        byte "box"                                                                                         box_key#0,"box"
        box_del                                                                                            box_key#0,{box_del}
        pop 1                                                                                              box_key#0
        // mutable_native_types/contract.py:166
        // del self.box_map[box_key]
        l-load box_key#0 0                                                                                 box_key#0
        itob                                                                                               encoded_value%0#0
        byte "box_map"                                                                                     encoded_value%0#0,"box_map"
        l-load encoded_value%0#0 1                                                                         "box_map",encoded_value%0#0
        concat                                                                                             box_prefixed_key%0#0
        box_del                                                                                            {box_del}
        pop 1
        // mutable_native_types/contract.py:161
        // @arc4.abimethod()
        int 1                                                                                              1
        return


// test_cases.mutable_native_types.contract.Contract.struct_arg[routing]() -> void:
subroutine struct_arg:
    struct_arg_block@0:
        // mutable_native_types/contract.py:168
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                             reinterpret_Encoded(uint64)%0#0
        btoi                                                                                               box_key#0
        txna ApplicationArgs 2                                                                             box_key#0,a#0
        // mutable_native_types/contract.py:170
        // self.nested.fixed_a = a
        int 0                                                                                              box_key#0,a#0,0
        byte "nested"                                                                                      box_key#0,a#0,0,"nested"
        app_global_get_ex                                                                                  box_key#0,a#0,maybe_value%0#0,maybe_exists%0#0
        assert // check self.nested exists                                                                 box_key#0,a#0,maybe_value%0#0
        l-load maybe_value%0#0 0                                                                           box_key#0,a#0,maybe_value%0#0
        l-load-copy a#0 1                                                                                  box_key#0,a#0,maybe_value%0#0,a#0 (copy)
        replace2 0                                                                                         box_key#0,a#0,aggregate%updated_data%0#0
        byte "nested"                                                                                      box_key#0,a#0,aggregate%updated_data%0#0,"nested"
        l-load aggregate%updated_data%0#0 1                                                                box_key#0,a#0,"nested",aggregate%updated_data%0#0
        app_global_put                                                                                     box_key#0,a#0
        // mutable_native_types/contract.py:171
        // self.nested_proxy.value.fixed_a = a
        int 0                                                                                              box_key#0,a#0,0
        byte 0x70                                                                                          box_key#0,a#0,0,0x70
        app_global_get_ex                                                                                  box_key#0,a#0,maybe_value%1#0,maybe_exists%1#0
        assert // check self.nested_proxy exists                                                           box_key#0,a#0,maybe_value%1#0
        l-load maybe_value%1#0 0                                                                           box_key#0,a#0,maybe_value%1#0
        l-load-copy a#0 1                                                                                  box_key#0,a#0,maybe_value%1#0,a#0 (copy)
        replace2 0                                                                                         box_key#0,a#0,aggregate%updated_data%1#0
        byte 0x70                                                                                          box_key#0,a#0,aggregate%updated_data%1#0,0x70
        l-load aggregate%updated_data%1#0 1                                                                box_key#0,a#0,0x70,aggregate%updated_data%1#0
        app_global_put                                                                                     box_key#0,a#0
        // mutable_native_types/contract.py:172
        // self.nested_local[Txn.sender].fixed_a = a
        txn Sender                                                                                         box_key#0,a#0,tmp%0#1
        l-load-copy tmp%0#1 0                                                                              box_key#0,a#0,tmp%0#1,tmp%0#1 (copy)
        int 0                                                                                              box_key#0,a#0,tmp%0#1,tmp%0#1 (copy),0
        byte 0x6c                                                                                          box_key#0,a#0,tmp%0#1,tmp%0#1 (copy),0,0x6c
        app_local_get_ex                                                                                   box_key#0,a#0,tmp%0#1,maybe_value%2#0,maybe_exists%2#0
        assert // check self.nested_local exists for account                                               box_key#0,a#0,tmp%0#1,maybe_value%2#0
        l-load maybe_value%2#0 0                                                                           box_key#0,a#0,tmp%0#1,maybe_value%2#0
        l-load-copy a#0 2                                                                                  box_key#0,a#0,tmp%0#1,maybe_value%2#0,a#0 (copy)
        replace2 0                                                                                         box_key#0,a#0,tmp%0#1,aggregate%updated_data%2#0
        l-load tmp%0#1 1                                                                                   box_key#0,a#0,aggregate%updated_data%2#0,tmp%0#1
        byte 0x6c                                                                                          box_key#0,a#0,aggregate%updated_data%2#0,tmp%0#1,0x6c
        l-load aggregate%updated_data%2#0 2                                                                box_key#0,a#0,tmp%0#1,0x6c,aggregate%updated_data%2#0
        app_local_put                                                                                      box_key#0,a#0
        // mutable_native_types/contract.py:173
        // self.box.value.fixed_a = a
        byte "box"                                                                                         box_key#0,a#0,"box"
        int 0                                                                                              box_key#0,a#0,"box",0
        l-load-copy a#0 2                                                                                  box_key#0,a#0,"box",0,a#0 (copy)
        box_replace                                                                                        box_key#0,a#0
        // mutable_native_types/contract.py:174
        // self.box_map[box_key].fixed_a = a
        l-load box_key#0 1                                                                                 a#0,box_key#0
        itob                                                                                               a#0,encoded_value%0#0
        byte "box_map"                                                                                     a#0,encoded_value%0#0,"box_map"
        l-load encoded_value%0#0 1                                                                         a#0,"box_map",encoded_value%0#0
        concat                                                                                             a#0,box_prefixed_key%0#0
        int 0                                                                                              a#0,box_prefixed_key%0#0,0
        l-load a#0 2                                                                                       box_prefixed_key%0#0,0,a#0
        box_replace
        // mutable_native_types/contract.py:168
        // @arc4.abimethod()
        int 1                                                                                              1
        return


// test_cases.mutable_native_types.contract.Contract.struct_return[routing]() -> void:
subroutine struct_return:
    struct_return_block@0:
        // mutable_native_types/contract.py:180
        // return self.nested.fixed_a
        int 0                                                                                              0
        byte "nested"                                                                                      0,"nested"
        app_global_get_ex                                                                                  maybe_value%0#0,maybe_exists%0#0
        assert // check self.nested exists                                                                 maybe_value%0#0
        l-load maybe_value%0#0 0                                                                           maybe_value%0#0
        extract 0 16                                                                                       aggregate%extract%0#0
        // mutable_native_types/contract.py:178
        // @arc4.abimethod()
        byte 0x151f7c75                                                                                    aggregate%extract%0#0,0x151f7c75
        l-load aggregate%extract%0#0 1                                                                     0x151f7c75,aggregate%extract%0#0
        concat                                                                                             tmp%1#0
        log
        int 1                                                                                              1
        return


// test_cases.mutable_native_types.contract.Contract.tup_return[routing]() -> void:
subroutine tup_return:
    tup_return_block@0:
        // mutable_native_types/contract.py:184
        // return self.nested.tup
        int 0                                                                                              0
        byte "nested"                                                                                      0,"nested"
        app_global_get_ex                                                                                  maybe_value%0#0,maybe_exists%0#0
        assert // check self.nested exists                                                                 maybe_value%0#0
        l-load maybe_value%0#0 0                                                                           maybe_value%0#0
        extract 32 16                                                                                      aggregate%extract%0#0
        // mutable_native_types/contract.py:182
        // @arc4.abimethod()
        byte 0x151f7c75                                                                                    aggregate%extract%0#0,0x151f7c75
        l-load aggregate%extract%0#0 1                                                                     0x151f7c75,aggregate%extract%0#0
        concat                                                                                             tmp%3#0
        log
        int 1                                                                                              1
        return


// test_cases.mutable_native_types.contract.Contract.calculate_sum[routing]() -> void:
subroutine calculate_sum:
    calculate_sum_block@0:
        // mutable_native_types/contract.py:188
        // fixed_a = self.nested.fixed_a
        int 0                                                                                              0
        byte "nested"                                                                                      0,"nested"
        app_global_get_ex                                                                                  maybe_value%0#0,maybe_exists%0#0
        assert // check self.nested exists                                                                 maybe_value%0#0
        l-load-copy maybe_value%0#0 0                                                                      maybe_value%0#0,maybe_value%0#0 (copy)
        extract 0 16                                                                                       maybe_value%0#0,fixed_a#0
        // mutable_native_types/contract.py:189
        // fixed_b = self.nested.fixed_b
        l-load maybe_value%0#0 1                                                                           fixed_a#0,maybe_value%0#0
        extract 16 16                                                                                      fixed_a#0,fixed_b#0
        // mutable_native_types/contract.py:281
        // return val.a + val.b
        l-load-copy fixed_a#0 1                                                                            fixed_a#0,fixed_b#0,fixed_a#0 (copy)
        int 0                                                                                              fixed_a#0,fixed_b#0,fixed_a#0 (copy),0
        extract_uint64                                                                                     fixed_a#0,fixed_b#0,values%0#0
        l-load fixed_a#0 2                                                                                 fixed_b#0,values%0#0,fixed_a#0
        int 8                                                                                              fixed_b#0,values%0#0,fixed_a#0,8
        extract_uint64                                                                                     fixed_b#0,values%0#0,values%1#0
        l-load values%0#0 1                                                                                fixed_b#0,values%1#0,values%0#0
        l-load values%1#0 1                                                                                fixed_b#0,values%0#0,values%1#0
        +                                                                                                  fixed_b#0,tmp%0#2
        l-load-copy fixed_b#0 1                                                                            fixed_b#0,tmp%0#2,fixed_b#0 (copy)
        int 0                                                                                              fixed_b#0,tmp%0#2,fixed_b#0 (copy),0
        extract_uint64                                                                                     fixed_b#0,tmp%0#2,values%0#0
        l-load fixed_b#0 2                                                                                 tmp%0#2,values%0#0,fixed_b#0
        int 8                                                                                              tmp%0#2,values%0#0,fixed_b#0,8
        extract_uint64                                                                                     tmp%0#2,values%0#0,values%1#0
        l-load values%0#0 1                                                                                tmp%0#2,values%1#0,values%0#0
        l-load values%1#0 1                                                                                tmp%0#2,values%0#0,values%1#0
        +                                                                                                  tmp%0#2,tmp%0#3
        // mutable_native_types/contract.py:190
        // result = add(fixed_a) + add(fixed_b)
        l-load tmp%0#2 1                                                                                   tmp%0#3,tmp%0#2
        l-load tmp%0#3 1                                                                                   tmp%0#2,tmp%0#3
        +                                                                                                  result#0
        l-store-copy result#0 0                                                                            result#0,result#0 (copy)
        v-store result#0                                                                                   result#0
        // mutable_native_types/contract.py:191
        // if result < 100:
        l-load result#0 0                                                                                  result#0
        int 100                                                                                            result#0,100
        <                                                                                                  tmp%3#0
        bz calculate_sum_after_if_else@3 ; b calculate_sum_if_body@2

    calculate_sum_if_body@2:
        // mutable_native_types/contract.py:192
        // c, d = self.nested.tup
        int 0                                                                                              0
        byte "nested"                                                                                      0,"nested"
        app_global_get_ex                                                                                  maybe_value%2#0,maybe_exists%2#0
        assert // check self.nested exists                                                                 maybe_value%2#0
        l-load maybe_value%2#0 0                                                                           maybe_value%2#0
        extract 32 16                                                                                      aggregate%extract%2#0
        l-load-copy aggregate%extract%2#0 0                                                                aggregate%extract%2#0,aggregate%extract%2#0 (copy)
        int 0                                                                                              aggregate%extract%2#0,aggregate%extract%2#0 (copy),0
        extract_uint64                                                                                     aggregate%extract%2#0,c#0
        l-load aggregate%extract%2#0 1                                                                     c#0,aggregate%extract%2#0
        int 8                                                                                              c#0,aggregate%extract%2#0,8
        extract_uint64                                                                                     c#0,d#0
        // mutable_native_types/contract.py:193
        // result += c
        v-load result#0                                                                                    c#0,d#0,result#0
        l-load c#0 2                                                                                       d#0,result#0,c#0
        +                                                                                                  d#0,result#0
        // mutable_native_types/contract.py:194
        // result += d
        l-load d#0 1                                                                                       result#0,d#0
        +                                                                                                  result#0
        v-store result#0
        b calculate_sum_after_if_else@3

    calculate_sum_after_if_else@3:
        // mutable_native_types/contract.py:186
        // @arc4.abimethod()
        v-load result#0                                                                                    result#0
        itob                                                                                               aggregate%val_as_bytes%0#0
        byte 0x151f7c75                                                                                    aggregate%val_as_bytes%0#0,0x151f7c75
        l-load aggregate%val_as_bytes%0#0 1                                                                0x151f7c75,aggregate%val_as_bytes%0#0
        concat                                                                                             tmp%2#0
        log
        int 1                                                                                              1
        return


// test_cases.mutable_native_types.contract.Contract.test_arr[routing]() -> void:
subroutine test_arr:
    test_arr_block@0:
        // mutable_native_types/contract.py:197
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                             arr#0
        // mutable_native_types/contract.py:199
        // assert arr.length == 0, "expected empty array"
        l-load-copy arr#0 0                                                                                arr#0,arr#0 (copy)
        int 0                                                                                              arr#0,arr#0 (copy),0
        extract_uint16                                                                                     arr#0,aggregate%array_length%0#0
        l-load-copy aggregate%array_length%0#0 0                                                           arr#0,aggregate%array_length%0#0,aggregate%array_length%0#0 (copy)
        !                                                                                                  arr#0,aggregate%array_length%0#0,tmp%1#1
        assert // expected empty array                                                                     arr#0,aggregate%array_length%0#0
        // mutable_native_types/contract.py:208
        // arr4.extend(arr)
        l-load-copy arr#0 1                                                                                arr#0,aggregate%array_length%0#0,arr#0 (copy)
        extract 2 0                                                                                        arr#0,aggregate%array_length%0#0,extract_to_end%0#0
        l-load-copy extract_to_end%0#0 0                                                                   arr#0,aggregate%array_length%0#0,extract_to_end%0#0,extract_to_end%0#0 (copy)
        pop 1                                                                                              arr#0,aggregate%array_length%0#0,extract_to_end%0#0
        // mutable_native_types/contract.py:209
        // assert arr.length == arr4.length, "expected arrays to be the same length"
        l-load-copy extract_to_end%0#0 0                                                                   arr#0,aggregate%array_length%0#0,extract_to_end%0#0,extract_to_end%0#0 (copy)
        len                                                                                                arr#0,aggregate%array_length%0#0,extract_to_end%0#0,aggregate%bytes_len%0#0
        int 16                                                                                             arr#0,aggregate%array_length%0#0,extract_to_end%0#0,aggregate%bytes_len%0#0,16
        /                                                                                                  arr#0,aggregate%array_length%0#0,extract_to_end%0#0,aggregate%array_len%0#0
        l-load-copy aggregate%array_length%0#0 2                                                           arr#0,aggregate%array_length%0#0,extract_to_end%0#0,aggregate%array_len%0#0,aggregate%array_length%0#0 (copy)
        l-load-copy aggregate%array_len%0#0 1                                                              arr#0,aggregate%array_length%0#0,extract_to_end%0#0,aggregate%array_len%0#0,aggregate%array_length%0#0 (copy),aggregate%array_len%0#0 (copy)
        ==                                                                                                 arr#0,aggregate%array_length%0#0,extract_to_end%0#0,aggregate%array_len%0#0,tmp%6#0
        assert // expected arrays to be the same length                                                    arr#0,aggregate%array_length%0#0,extract_to_end%0#0,aggregate%array_len%0#0
        // mutable_native_types/contract.py:211
        // arr5 = Array(arr4)
        l-load aggregate%array_len%0#0 0                                                                   arr#0,aggregate%array_length%0#0,extract_to_end%0#0,aggregate%array_len%0#0
        itob                                                                                               arr#0,aggregate%array_length%0#0,extract_to_end%0#0,as_bytes%0#0
        extract 6 2                                                                                        arr#0,aggregate%array_length%0#0,extract_to_end%0#0,as_u16_bytes%0#0
        l-load extract_to_end%0#0 1                                                                        arr#0,aggregate%array_length%0#0,as_u16_bytes%0#0,extract_to_end%0#0
        concat                                                                                             arr#0,aggregate%array_length%0#0,arr5#0
        // mutable_native_types/contract.py:212
        // assert arr == arr5, "expected arrays to be the same"
        l-load-copy arr#0 2                                                                                arr#0,aggregate%array_length%0#0,arr5#0,arr#0 (copy)
        l-load arr5#0 1                                                                                    arr#0,aggregate%array_length%0#0,arr#0 (copy),arr5#0
        ==                                                                                                 arr#0,aggregate%array_length%0#0,tmp%8#0
        assert // expected arrays to be the same                                                           arr#0,aggregate%array_length%0#0
        // mutable_native_types/contract.py:218
        // fixed_struct = FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 2)
        txn NumAppArgs                                                                                     arr#0,aggregate%array_length%0#0,tmp%12#0
        int 1                                                                                              arr#0,aggregate%array_length%0#0,tmp%12#0,1
        +                                                                                                  arr#0,aggregate%array_length%0#0,tmp%13#0
        txn NumAppArgs                                                                                     arr#0,aggregate%array_length%0#0,tmp%13#0,tmp%14#0
        int 2                                                                                              arr#0,aggregate%array_length%0#0,tmp%13#0,tmp%14#0,2
        +                                                                                                  arr#0,aggregate%array_length%0#0,tmp%13#0,tmp%15#0
        l-load tmp%13#0 1                                                                                  arr#0,aggregate%array_length%0#0,tmp%15#0,tmp%13#0
        itob                                                                                               arr#0,aggregate%array_length%0#0,tmp%15#0,aggregate%val_as_bytes%0#0
        l-load tmp%15#0 1                                                                                  arr#0,aggregate%array_length%0#0,aggregate%val_as_bytes%0#0,tmp%15#0
        itob                                                                                               arr#0,aggregate%array_length%0#0,aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        l-load aggregate%val_as_bytes%0#0 1                                                                arr#0,aggregate%array_length%0#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%0#0
        l-load aggregate%val_as_bytes%1#0 1                                                                arr#0,aggregate%array_length%0#0,aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        concat                                                                                             arr#0,aggregate%array_length%0#0,fixed_struct#0
        l-store-copy fixed_struct#0 0                                                                      arr#0,aggregate%array_length%0#0,fixed_struct#0,fixed_struct#0 (copy)
        v-store fixed_struct#0                                                                             arr#0,aggregate%array_length%0#0,fixed_struct#0
        // mutable_native_types/contract.py:219
        // arr2.append(fixed_struct)
        l-load-copy arr#0 2                                                                                arr#0,aggregate%array_length%0#0,fixed_struct#0,arr#0 (copy)
        l-load fixed_struct#0 1                                                                            arr#0,aggregate%array_length%0#0,arr#0 (copy),fixed_struct#0
        concat // on error: max array length exceeded                                                      arr#0,aggregate%array_length%0#0,concat%1#0
        l-load aggregate%array_length%0#0 1                                                                arr#0,concat%1#0,aggregate%array_length%0#0
        int 1                                                                                              arr#0,concat%1#0,aggregate%array_length%0#0,1
        +                                                                                                  arr#0,concat%1#0,add%0#0
        itob                                                                                               arr#0,concat%1#0,as_bytes%1#0
        extract 6 2                                                                                        arr#0,concat%1#0,as_u16_bytes%1#0
        l-load concat%1#0 1                                                                                arr#0,as_u16_bytes%1#0,concat%1#0
        l-load as_u16_bytes%1#0 1                                                                          arr#0,concat%1#0,as_u16_bytes%1#0
        replace2 0                                                                                         arr#0,arr2#1
        // mutable_native_types/contract.py:220
        // assert arr2.length == 1, "expected array to have 1 item"
        l-load-copy arr2#1 0                                                                               arr#0,arr2#1,arr2#1 (copy)
        int 0                                                                                              arr#0,arr2#1,arr2#1 (copy),0
        extract_uint16                                                                                     arr#0,arr2#1,aggregate%array_length%2#0
        int 1                                                                                              arr#0,arr2#1,aggregate%array_length%2#0,1
        ==                                                                                                 arr#0,arr2#1,tmp%19#0
        assert // expected array to have 1 item                                                            arr#0,arr2#1
        // mutable_native_types/contract.py:221
        // assert sum_frozen_arr(arr2.freeze()) == 7, "expected sum to be 7"
        l-load-copy arr2#1 0                                                                               arr#0,arr2#1,arr2#1 (copy)
        callsub sum_frozen_arr                                                                             arr#0,arr2#1,tmp%21#0
        int 7                                                                                              arr#0,arr2#1,tmp%21#0,7
        ==                                                                                                 arr#0,arr2#1,tmp%22#0
        assert // expected sum to be 7                                                                     arr#0,arr2#1
        // mutable_native_types/contract.py:222
        // assert arr != arr2, "expected arrays to be different"
        l-load arr#0 1                                                                                     arr2#1,arr#0
        l-load-copy arr2#1 1                                                                               arr2#1,arr#0,arr2#1 (copy)
        !=                                                                                                 arr2#1,tmp%23#0
        assert // expected arrays to be different                                                          arr2#1
        // mutable_native_types/contract.py:224
        // arr7 = Array[FixedStruct]((arr2[0],))
        l-load-copy arr2#1 0                                                                               arr2#1,arr2#1 (copy)
        extract 2 0                                                                                        arr2#1,aggregate%array_trimmed%0#0
        l-load-copy arr2#1 1                                                                               arr2#1,aggregate%array_trimmed%0#0,arr2#1 (copy)
        extract 2 16                                                                                       arr2#1,aggregate%array_trimmed%0#0,aggregate%encoded_element%0#0
        byte 0x0001                                                                                        arr2#1,aggregate%array_trimmed%0#0,aggregate%encoded_element%0#0,0x0001
        l-load aggregate%encoded_element%0#0 1                                                             arr2#1,aggregate%array_trimmed%0#0,0x0001,aggregate%encoded_element%0#0
        concat                                                                                             arr2#1,aggregate%array_trimmed%0#0,arr7#0
        // mutable_native_types/contract.py:225
        // assert arr2 == arr7, "expected arrays to be the same"
        l-load-copy arr2#1 2                                                                               arr2#1,aggregate%array_trimmed%0#0,arr7#0,arr2#1 (copy)
        l-load arr7#0 1                                                                                    arr2#1,aggregate%array_trimmed%0#0,arr2#1 (copy),arr7#0
        ==                                                                                                 arr2#1,aggregate%array_trimmed%0#0,tmp%24#0
        assert // expected arrays to be the same                                                           arr2#1,aggregate%array_trimmed%0#0
        // mutable_native_types/contract.py:227
        // arr8 = Array[FixedStruct]()
        byte 0x0000                                                                                        arr2#1,aggregate%array_trimmed%0#0,arr8#0
        l-store arr8#0 2                                                                                   arr8#0,arr2#1,aggregate%array_trimmed%0#0
        byte 0x0000                                                                                        arr8#0,arr2#1,aggregate%array_trimmed%0#0,0x0000
        // mutable_native_types/contract.py:228
        // arr8 += arr2
        l-load aggregate%array_trimmed%0#0 1                                                               arr8#0,arr2#1,0x0000,aggregate%array_trimmed%0#0
        concat // on error: max array length exceeded                                                      arr8#0,arr2#1,concat%2#0
        l-load-copy concat%2#0 0                                                                           arr8#0,arr2#1,concat%2#0,concat%2#0 (copy)
        extract 2 0                                                                                        arr8#0,arr2#1,concat%2#0,extract_to_end%2#0
        len                                                                                                arr8#0,arr2#1,concat%2#0,len%0#0
        int 16                                                                                             arr8#0,arr2#1,concat%2#0,len%0#0,16
        /                                                                                                  arr8#0,arr2#1,concat%2#0,div_floor%0#0
        itob                                                                                               arr8#0,arr2#1,concat%2#0,as_bytes%2#0
        extract 6 2                                                                                        arr8#0,arr2#1,concat%2#0,as_u16_bytes%2#0
        l-load concat%2#0 1                                                                                arr8#0,arr2#1,as_u16_bytes%2#0,concat%2#0
        l-load as_u16_bytes%2#0 1                                                                          arr8#0,arr2#1,concat%2#0,as_u16_bytes%2#0
        replace2 0                                                                                         arr8#0,arr2#1,arr8#1
        // mutable_native_types/contract.py:229
        // assert arr2 == arr8, "expected arrays to be the same"
        l-load arr2#1 1                                                                                    arr8#0,arr8#1,arr2#1
        l-load arr8#1 1                                                                                    arr8#0,arr2#1,arr8#1
        ==                                                                                                 arr8#0,tmp%25#0
        assert // expected arrays to be the same                                                           arr8#0
        // mutable_native_types/contract.py:236
        // for _i in urange(3):
        int 0                                                                                              arr8#0,value_internal%0#0
        l-load arr8#0 1                                                                                    value_internal%0#0,arr8#0
        v-store arr2#1                                                                                     value_internal%0#0
        l-load value_internal%0#0 0                                                                        value_internal%0#0
        v-store _i#0
        b test_arr_for_header@4

    test_arr_for_header@4:
        // mutable_native_types/contract.py:236
        // for _i in urange(3):
        v-load _i#0                                                                                        _i#0
        int 3                                                                                              _i#0,3
        <                                                                                                  continue_looping%0#0
        bz test_arr_after_for@7 ; b test_arr_for_body@5

    test_arr_for_body@5:
        // mutable_native_types/contract.py:237
        // arr2.append(fixed_struct)
        v-load arr2#1                                                                                      arr2#1
        l-store-copy arr2#1 0                                                                              arr2#1,arr2#1 (copy)
        v-load fixed_struct#0                                                                              arr2#1,arr2#1 (copy),fixed_struct#0
        concat // on error: max array length exceeded                                                      arr2#1,concat%3#0
        l-load arr2#1 1                                                                                    concat%3#0,arr2#1
        int 0                                                                                              concat%3#0,arr2#1,0
        extract_uint16                                                                                     concat%3#0,extract_uint16%1#0
        int 1                                                                                              concat%3#0,extract_uint16%1#0,1
        +                                                                                                  concat%3#0,add%1#0
        itob                                                                                               concat%3#0,as_bytes%3#0
        extract 6 2                                                                                        concat%3#0,as_u16_bytes%3#0
        l-load concat%3#0 1                                                                                as_u16_bytes%3#0,concat%3#0
        l-load as_u16_bytes%3#0 1                                                                          concat%3#0,as_u16_bytes%3#0
        replace2 0                                                                                         arr2#1
        v-store arr2#1
        // mutable_native_types/contract.py:236
        // for _i in urange(3):
        v-load _i#0                                                                                        _i#0
        int 1                                                                                              _i#0,1
        +                                                                                                  value_internal%0#0
        v-store _i#0
        b test_arr_for_header@4

    test_arr_after_for@7:
        // mutable_native_types/contract.py:239
        // assert arr2.length == 3, "expected 3 elements"
        v-load arr2#1                                                                                      arr2#1
        l-store-copy arr2#1 0                                                                              arr2#1,arr2#1 (copy)
        int 0                                                                                              arr2#1,arr2#1 (copy),0
        extract_uint16                                                                                     arr2#1,array_length#0
        l-load-copy array_length#0 0                                                                       arr2#1,array_length#0,array_length#0 (copy)
        int 3                                                                                              arr2#1,array_length#0,array_length#0 (copy),3
        ==                                                                                                 arr2#1,array_length#0,tmp%32#0
        assert // expected 3 elements                                                                      arr2#1,array_length#0
        // mutable_native_types/contract.py:242
        // assert sum_frozen_arr(frozen1) == 21, "expected sum to be 21"
        l-load-copy arr2#1 1                                                                               arr2#1,array_length#0,arr2#1 (copy)
        callsub sum_frozen_arr                                                                             arr2#1,array_length#0,tmp%34#0
        int 21                                                                                             arr2#1,array_length#0,tmp%34#0,21
        ==                                                                                                 arr2#1,array_length#0,tmp%35#0
        assert // expected sum to be 21                                                                    arr2#1,array_length#0
        l-load array_length#0 0                                                                            arr2#1,array_length#0
        int 1                                                                                              arr2#1,array_length#0,1
        -                                                                                                  arr2#1,length_minus_1#0
        itob                                                                                               arr2#1,tmp%2#1
        extract 6 0                                                                                        arr2#1,tmp%3#1
        l-load-copy arr2#1 1                                                                               arr2#1,tmp%3#1,arr2#1 (copy)
        l-load tmp%3#1 1                                                                                   arr2#1,arr2#1 (copy),tmp%3#1
        replace2 0                                                                                         arr2#1,result#0
        l-load-copy result#0 0                                                                             arr2#1,result#0,result#0 (copy)
        len                                                                                                arr2#1,result#0,tmp%5#1
        // mutable_native_types/contract.py:244
        // arr2.pop()
        int 16                                                                                             arr2#1,result#0,tmp%5#1,16
        -                                                                                                  arr2#1,result#0,item_location#0
        l-load result#0 1                                                                                  arr2#1,item_location#0,result#0
        int 0                                                                                              arr2#1,item_location#0,result#0,0
        l-load item_location#0 2                                                                           arr2#1,result#0,0,item_location#0
        substring3                                                                                         arr2#1,result#0
        // mutable_native_types/contract.py:246
        // assert sum_frozen_arr(frozen1) == 21, "expected sum to be 21"
        l-load arr2#1 1                                                                                    result#0,arr2#1
        callsub sum_frozen_arr                                                                             result#0,tmp%39#0
        int 21                                                                                             result#0,tmp%39#0,21
        ==                                                                                                 result#0,tmp%40#0
        assert // expected sum to be 21                                                                    result#0
        // mutable_native_types/contract.py:247
        // assert sum_frozen_arr(frozen2) == 14, "expected sum to be 14"
        l-load-copy result#0 0                                                                             result#0,result#0 (copy)
        callsub sum_frozen_arr                                                                             result#0,tmp%41#0
        int 14                                                                                             result#0,tmp%41#0,14
        ==                                                                                                 result#0,tmp%42#0
        assert // expected sum to be 14                                                                    result#0
        // mutable_native_types/contract.py:248
        // frozen2 += frozen2
        l-load-copy result#0 0                                                                             result#0,result#0 (copy)
        extract 2 0                                                                                        result#0,extract_to_end%3#0
        l-load-copy result#0 1                                                                             result#0,extract_to_end%3#0,result#0 (copy)
        l-load extract_to_end%3#0 1                                                                        result#0,result#0 (copy),extract_to_end%3#0
        concat // on error: max array length exceeded                                                      result#0,concat%4#0
        l-load-copy concat%4#0 0                                                                           result#0,concat%4#0,concat%4#0 (copy)
        extract 2 0                                                                                        result#0,concat%4#0,extract_to_end%4#0
        len                                                                                                result#0,concat%4#0,len%1#0
        int 16                                                                                             result#0,concat%4#0,len%1#0,16
        /                                                                                                  result#0,concat%4#0,div_floor%1#0
        itob                                                                                               result#0,concat%4#0,as_bytes%4#0
        extract 6 2                                                                                        result#0,concat%4#0,as_u16_bytes%4#0
        l-load concat%4#0 1                                                                                result#0,as_u16_bytes%4#0,concat%4#0
        l-load as_u16_bytes%4#0 1                                                                          result#0,concat%4#0,as_u16_bytes%4#0
        replace2 0                                                                                         result#0,frozen2#1
        // mutable_native_types/contract.py:249
        // assert sum_frozen_arr(frozen2) == 28, "and the sum shall be 41"
        callsub sum_frozen_arr                                                                             result#0,tmp%43#0
        int 28                                                                                             result#0,tmp%43#0,28
        ==                                                                                                 result#0,tmp%44#0
        assert // and the sum shall be 41                                                                  result#0
        // mutable_native_types/contract.py:251
        // self.arr = arr2.copy()
        byte "arr"                                                                                         result#0,"arr"
        l-load-copy result#0 1                                                                             result#0,"arr",result#0 (copy)
        app_global_put                                                                                     result#0
        // mutable_native_types/contract.py:256
        // arr11.append(fixed_struct)
        v-load fixed_struct#0                                                                              result#0,fixed_struct#0
        // mutable_native_types/contract.py:257
        // assert arr11
        len                                                                                                result#0,aggregate%bytes_len%3#0
        int 16                                                                                             result#0,aggregate%bytes_len%3#0,16
        /                                                                                                  result#0,aggregate%array_len%3#0
        assert                                                                                             result#0
        // mutable_native_types/contract.py:197
        // @arc4.abimethod()
        byte 0x151f7c75                                                                                    result#0,0x151f7c75
        l-load result#0 1                                                                                  0x151f7c75,result#0
        concat                                                                                             tmp%1#0
        log
        int 1                                                                                              1
        return


// test_cases.mutable_native_types.contract.Contract.test_match_struct[routing]() -> void:
subroutine test_match_struct:
    test_match_struct_block@0:
        // mutable_native_types/contract.py:261
        // @arc4.abimethod
        txna ApplicationArgs 1                                                                             arg#0
        // mutable_native_types/contract.py:264
        // case FixedStruct(UInt64(1), UInt64(2)):
        byte 0x00000000000000010000000000000002                                                            arg#0,0x00000000000000010000000000000002
        // mutable_native_types/contract.py:263-267
        // match arg:
        //     case FixedStruct(UInt64(1), UInt64(2)):
        //         return True
        //     case _:
        //         return False
        l-load arg#0 1                                                                                     0x00000000000000010000000000000002,arg#0
        match test_match_struct_switch_case_0@2 ; b test_match_struct_switch_case_default@3 

    test_match_struct_switch_case_0@2:
        // mutable_native_types/contract.py:265
        // return True
        int 1                                                                                              test_cases.mutable_native_types.contract.Contract.test_match_struct%0#0
        v-store tmp%0#0
        // mutable_native_types/contract.py:261
        // @arc4.abimethod
        b test_match_struct_after_inlined_test_cases.mutable_native_types.contract.Contract.test_match_struct@4 

    test_match_struct_switch_case_default@3:
        // mutable_native_types/contract.py:267
        // return False
        int 0                                                                                              test_cases.mutable_native_types.contract.Contract.test_match_struct%0#0
        v-store tmp%0#0
        // mutable_native_types/contract.py:261
        // @arc4.abimethod
        b test_match_struct_after_inlined_test_cases.mutable_native_types.contract.Contract.test_match_struct@4 

    test_match_struct_after_inlined_test_cases.mutable_native_types.contract.Contract.test_match_struct@4:
        // mutable_native_types/contract.py:261
        // @arc4.abimethod
        byte 0x00                                                                                          0x00
        int 0                                                                                              0x00,0
        v-load tmp%0#0                                                                                     0x00,0,tmp%0#0
        setbit                                                                                             aggregate%encoded_bool%0#0
        byte 0x151f7c75                                                                                    aggregate%encoded_bool%0#0,0x151f7c75
        l-load aggregate%encoded_bool%0#0 1                                                                0x151f7c75,aggregate%encoded_bool%0#0
        concat                                                                                             tmp%2#0
        log
        int 1                                                                                              1
        return


