// Op                                                                                             Stack (out)
// test_cases.mutable_native_types.contract.Contract.__algopy_entrypoint_with_init() -> uint64:
subroutine main:
    main_block@0:
        txn ApplicationID                                                                         tmp%0#0
        bz main_call___init__@1 ; b main_after_if_else@2

    main_call___init__@1:
        // mutable_native_types/contract.py:73
        // FixedStruct(a=Txn.num_app_args, b=Txn.num_app_args),
        txn NumAppArgs                                                                            tmp%0#2
        txn NumAppArgs                                                                            tmp%0#2,tmp%1#1
        l-load tmp%0#2 1                                                                          tmp%1#1,tmp%0#2
        itob                                                                                      tmp%1#1,aggregate%val_as_bytes%0#1
        l-load tmp%1#1 1                                                                          aggregate%val_as_bytes%0#1,tmp%1#1
        itob                                                                                      aggregate%val_as_bytes%0#1,aggregate%val_as_bytes%1#1
        l-load aggregate%val_as_bytes%0#1 1                                                       aggregate%val_as_bytes%1#1,aggregate%val_as_bytes%0#1
        l-load aggregate%val_as_bytes%1#1 1                                                       aggregate%val_as_bytes%0#1,aggregate%val_as_bytes%1#1
        concat                                                                                    aggregate%head%1#1
        // mutable_native_types/contract.py:74
        // FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
        txn NumAppArgs                                                                            aggregate%head%1#1,tmp%3#0
        int 1                                                                                     aggregate%head%1#1,tmp%3#0,1
        +                                                                                         aggregate%head%1#1,tmp%4#0
        txn NumAppArgs                                                                            aggregate%head%1#1,tmp%4#0,tmp%5#0
        int 1                                                                                     aggregate%head%1#1,tmp%4#0,tmp%5#0,1
        +                                                                                         aggregate%head%1#1,tmp%4#0,tmp%6#0
        l-load tmp%4#0 1                                                                          aggregate%head%1#1,tmp%6#0,tmp%4#0
        itob                                                                                      aggregate%head%1#1,tmp%6#0,aggregate%val_as_bytes%2#1
        l-load tmp%6#0 1                                                                          aggregate%head%1#1,aggregate%val_as_bytes%2#1,tmp%6#0
        itob                                                                                      aggregate%head%1#1,aggregate%val_as_bytes%2#1,aggregate%val_as_bytes%3#1
        l-load aggregate%val_as_bytes%2#1 1                                                       aggregate%head%1#1,aggregate%val_as_bytes%3#1,aggregate%val_as_bytes%2#1
        l-load aggregate%val_as_bytes%3#1 1                                                       aggregate%head%1#1,aggregate%val_as_bytes%2#1,aggregate%val_as_bytes%3#1
        concat                                                                                    aggregate%head%1#1,aggregate%head%3#1
        // mutable_native_types/contract.py:75
        // NamedTup(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
        txn NumAppArgs                                                                            aggregate%head%1#1,aggregate%head%3#1,tmp%8#0
        int 1                                                                                     aggregate%head%1#1,aggregate%head%3#1,tmp%8#0,1
        +                                                                                         aggregate%head%1#1,aggregate%head%3#1,tmp%9#0
        txn NumAppArgs                                                                            aggregate%head%1#1,aggregate%head%3#1,tmp%9#0,tmp%10#0
        int 1                                                                                     aggregate%head%1#1,aggregate%head%3#1,tmp%9#0,tmp%10#0,1
        +                                                                                         aggregate%head%1#1,aggregate%head%3#1,tmp%9#0,tmp%11#0
        // mutable_native_types/contract.py:72-76
        // self.nested = NestedStruct(
        //     FixedStruct(a=Txn.num_app_args, b=Txn.num_app_args),
        //     FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
        //     NamedTup(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
        // )
        l-load aggregate%head%1#1 3                                                               aggregate%head%3#1,tmp%9#0,tmp%11#0,aggregate%head%1#1
        l-load aggregate%head%3#1 3                                                               tmp%9#0,tmp%11#0,aggregate%head%1#1,aggregate%head%3#1
        concat                                                                                    tmp%9#0,tmp%11#0,aggregate%head%5#1
        l-load tmp%9#0 2                                                                          tmp%11#0,aggregate%head%5#1,tmp%9#0
        itob                                                                                      tmp%11#0,aggregate%head%5#1,aggregate%val_as_bytes%4#1
        l-load tmp%11#0 2                                                                         aggregate%head%5#1,aggregate%val_as_bytes%4#1,tmp%11#0
        itob                                                                                      aggregate%head%5#1,aggregate%val_as_bytes%4#1,aggregate%val_as_bytes%5#1
        l-load aggregate%val_as_bytes%4#1 1                                                       aggregate%head%5#1,aggregate%val_as_bytes%5#1,aggregate%val_as_bytes%4#1
        l-load aggregate%val_as_bytes%5#1 1                                                       aggregate%head%5#1,aggregate%val_as_bytes%4#1,aggregate%val_as_bytes%5#1
        concat                                                                                    aggregate%head%5#1,aggregate%head%7#1
        l-load aggregate%head%5#1 1                                                               aggregate%head%7#1,aggregate%head%5#1
        l-load aggregate%head%7#1 1                                                               aggregate%head%5#1,aggregate%head%7#1
        concat                                                                                    aggregate%head%8#1
        // mutable_native_types/contract.py:72
        // self.nested = NestedStruct(
        byte "nested"                                                                             aggregate%head%8#1,"nested"
        // mutable_native_types/contract.py:72-76
        // self.nested = NestedStruct(
        //     FixedStruct(a=Txn.num_app_args, b=Txn.num_app_args),
        //     FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
        //     NamedTup(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
        // )
        l-load aggregate%head%8#1 1                                                               "nested",aggregate%head%8#1
        app_global_put
        // mutable_native_types/contract.py:83
        // a=Txn.num_app_args,
        txn NumAppArgs                                                                            tmp%13#0
        // mutable_native_types/contract.py:84
        // b=Txn.num_app_args,
        txn NumAppArgs                                                                            tmp%13#0,tmp%14#0
        // mutable_native_types/contract.py:82-88
        // self.dyn = DynamicStruct(
        //     a=Txn.num_app_args,
        //     b=Txn.num_app_args,
        //     c=Bytes(),
        //     d=String(),
        //     e=Array[arc4.Byte](),
        // )
        l-load tmp%13#0 1                                                                         tmp%14#0,tmp%13#0
        itob                                                                                      tmp%14#0,aggregate%val_as_bytes%6#1
        l-load tmp%14#0 1                                                                         aggregate%val_as_bytes%6#1,tmp%14#0
        itob                                                                                      aggregate%val_as_bytes%6#1,aggregate%val_as_bytes%7#1
        l-load aggregate%val_as_bytes%6#1 1                                                       aggregate%val_as_bytes%7#1,aggregate%val_as_bytes%6#1
        l-load aggregate%val_as_bytes%7#1 1                                                       aggregate%val_as_bytes%6#1,aggregate%val_as_bytes%7#1
        concat                                                                                    aggregate%head%10#1
        byte 0x00160018001a000000000000                                                           aggregate%head%10#1,0x00160018001a000000000000
        concat                                                                                    aggregate%concat%2#1
        // mutable_native_types/contract.py:82
        // self.dyn = DynamicStruct(
        byte "dyn"                                                                                aggregate%concat%2#1,"dyn"
        // mutable_native_types/contract.py:82-88
        // self.dyn = DynamicStruct(
        //     a=Txn.num_app_args,
        //     b=Txn.num_app_args,
        //     c=Bytes(),
        //     d=String(),
        //     e=Array[arc4.Byte](),
        // )
        l-load aggregate%concat%2#1 1                                                             "dyn",aggregate%concat%2#1
        app_global_put
        // mutable_native_types/contract.py:90
        // self.num_payments = UInt64(0)
        byte "num_payments"                                                                       "num_payments"
        int 0                                                                                     "num_payments",0
        app_global_put
        // mutable_native_types/contract.py:91
        // self.payments = zero_bytes(FixedArray[Payment, typing.Literal[8]])
        int 384                                                                                   384
        bzero                                                                                     tmp%16#0
        byte "payments"                                                                           tmp%16#0,"payments"
        l-load tmp%16#0 1                                                                         "payments",tmp%16#0
        app_global_put
        b main_after_if_else@2

    main_after_if_else@2:
        // mutable_native_types/contract.py:69
        // class Contract(arc4.ARC4Contract):
        txn NumAppArgs                                                                            tmp%0#2
        bz main_bare_routing@16 ; b main_abi_routing@4

    main_abi_routing@4:
        // mutable_native_types/contract.py:69
        // class Contract(arc4.ARC4Contract):
        txna ApplicationArgs 0                                                                    tmp%2#1
        method fixed_initialize()void                                                             tmp%2#1,Method(fixed_initialize()void)
        method add_payment((address,uint64,uint64))void                                           tmp%2#1,Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void)
        method increment_payment(uint64,uint64)void                                               tmp%2#1,Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void)
        method create_storage(uint64)void                                                         tmp%2#1,Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void)
        method local_struct()(address,uint64,uint64)                                              tmp%2#1,Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64))
        method delete_storage(uint64)void                                                         tmp%2#1,Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void)
        method struct_arg(uint64,(uint64,uint64))void                                             tmp%2#1,Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void),Method(struct_arg(uint64,(uint64,uint64))void)
        method struct_return()(uint64,uint64)                                                     tmp%2#1,Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void),Method(struct_arg(uint64,(uint64,uint64))void),Method(struct_return()(uint64,uint64))
        method tup_return()(uint64,uint64)                                                        tmp%2#1,Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void),Method(struct_arg(uint64,(uint64,uint64))void),Method(struct_return()(uint64,uint64)),Method(tup_return()(uint64,uint64))
        method calculate_sum()uint64                                                              tmp%2#1,Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void),Method(struct_arg(uint64,(uint64,uint64))void),Method(struct_return()(uint64,uint64)),Method(tup_return()(uint64,uint64)),Method(calculate_sum()uint64)
        method test_arr((uint64,uint64)[])(uint64,uint64)[]                                       tmp%2#1,Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void),Method(struct_arg(uint64,(uint64,uint64))void),Method(struct_return()(uint64,uint64)),Method(tup_return()(uint64,uint64)),Method(calculate_sum()uint64),Method(test_arr((uint64,uint64)[])(uint64,uint64)[])
        l-load tmp%2#1 11                                                                         Method(fixed_initialize()void),Method(add_payment((address,uint64,uint64))void),Method(increment_payment(uint64,uint64)void),Method(create_storage(uint64)void),Method(local_struct()(address,uint64,uint64)),Method(delete_storage(uint64)void),Method(struct_arg(uint64,(uint64,uint64))void),Method(struct_return()(uint64,uint64)),Method(tup_return()(uint64,uint64)),Method(calculate_sum()uint64),Method(test_arr((uint64,uint64)[])(uint64,uint64)[]),tmp%2#1
        match main_fixed_initialize_route@5 main_add_payment_route@6 main_increment_payment_route@7 main_create_storage_route@8 main_local_struct_route@9 main_delete_storage_route@10 main_struct_arg_route@11 main_struct_return_route@12 main_tup_return_route@13 main_calculate_sum_route@14 main_test_arr_route@15 ; b main_after_if_else@18 

    main_fixed_initialize_route@5:
        // mutable_native_types/contract.py:93
        // @arc4.abimethod()
        txn OnCompletion                                                                          tmp%3#0
        !                                                                                         tmp%4#1
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                         tmp%5#0
        assert // can only call when not creating
        int 1                                                                                     test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@19 

    main_add_payment_route@6:
        // mutable_native_types/contract.py:123
        // @arc4.abimethod()
        txn OnCompletion                                                                          tmp%7#1
        !                                                                                         tmp%8#1
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                         tmp%9#0
        assert // can only call when not creating
        // mutable_native_types/contract.py:69
        // class Contract(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                    reinterpret_Encoded(uint8[32],uint64,uint64)%0#0
        // mutable_native_types/contract.py:123
        // @arc4.abimethod()
        callsub add_payment
        int 1                                                                                     test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@19 

    main_increment_payment_route@7:
        // mutable_native_types/contract.py:129
        // @arc4.abimethod()
        txn OnCompletion                                                                          tmp%11#0
        !                                                                                         tmp%12#1
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                         tmp%13#0
        assert // can only call when not creating
        // mutable_native_types/contract.py:69
        // class Contract(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                    reinterpret_Encoded(uint64)%0#0
        btoi                                                                                      tmp%15#1
        txna ApplicationArgs 2                                                                    tmp%15#1,reinterpret_Encoded(uint64)%1#0
        btoi                                                                                      tmp%15#1,tmp%16#1
        // mutable_native_types/contract.py:129
        // @arc4.abimethod()
        l-load tmp%15#1 1                                                                         tmp%16#1,tmp%15#1
        l-load tmp%16#1 1                                                                         tmp%15#1,tmp%16#1
        callsub increment_payment
        int 1                                                                                     test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@19 

    main_create_storage_route@8:
        // mutable_native_types/contract.py:134
        // @arc4.abimethod()
        txn OnCompletion                                                                          tmp%17#0
        !                                                                                         tmp%18#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                         tmp%19#0
        assert // can only call when not creating
        // mutable_native_types/contract.py:69
        // class Contract(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                    reinterpret_Encoded(uint64)%2#0
        btoi                                                                                      tmp%21#0
        // mutable_native_types/contract.py:134
        // @arc4.abimethod()
        callsub create_storage
        int 1                                                                                     test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@19 

    main_local_struct_route@9:
        // mutable_native_types/contract.py:141
        // @arc4.abimethod()
        txn OnCompletion                                                                          tmp%22#0
        !                                                                                         tmp%23#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                         tmp%24#0
        assert // can only call when not creating
        callsub local_struct                                                                      tmp%26#0
        byte 0x151f7c75                                                                           tmp%26#0,0x151f7c75
        l-load tmp%26#0 1                                                                         0x151f7c75,tmp%26#0
        concat                                                                                    tmp%27#0
        log
        int 1                                                                                     test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@19 

    main_delete_storage_route@10:
        // mutable_native_types/contract.py:153
        // @arc4.abimethod()
        txn OnCompletion                                                                          tmp%28#0
        !                                                                                         tmp%29#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                         tmp%30#0
        assert // can only call when not creating
        // mutable_native_types/contract.py:69
        // class Contract(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                    reinterpret_Encoded(uint64)%3#0
        btoi                                                                                      tmp%32#0
        // mutable_native_types/contract.py:153
        // @arc4.abimethod()
        callsub delete_storage
        int 1                                                                                     test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@19 

    main_struct_arg_route@11:
        // mutable_native_types/contract.py:160
        // @arc4.abimethod()
        txn OnCompletion                                                                          tmp%33#0
        !                                                                                         tmp%34#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                         tmp%35#0
        assert // can only call when not creating
        // mutable_native_types/contract.py:69
        // class Contract(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                    reinterpret_Encoded(uint64)%4#0
        btoi                                                                                      tmp%37#0
        txna ApplicationArgs 2                                                                    tmp%37#0,reinterpret_Encoded(uint64,uint64)%0#0
        // mutable_native_types/contract.py:160
        // @arc4.abimethod()
        l-load tmp%37#0 1                                                                         reinterpret_Encoded(uint64,uint64)%0#0,tmp%37#0
        l-load reinterpret_Encoded(uint64,uint64)%0#0 1                                           tmp%37#0,reinterpret_Encoded(uint64,uint64)%0#0
        callsub struct_arg
        int 1                                                                                     test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@19 

    main_struct_return_route@12:
        // mutable_native_types/contract.py:170
        // @arc4.abimethod()
        txn OnCompletion                                                                          tmp%38#0
        !                                                                                         tmp%39#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                         tmp%40#0
        assert // can only call when not creating
        callsub struct_return                                                                     tmp%42#0
        byte 0x151f7c75                                                                           tmp%42#0,0x151f7c75
        l-load tmp%42#0 1                                                                         0x151f7c75,tmp%42#0
        concat                                                                                    tmp%43#0
        log
        int 1                                                                                     test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@19 

    main_tup_return_route@13:
        // mutable_native_types/contract.py:174
        // @arc4.abimethod()
        txn OnCompletion                                                                          tmp%44#0
        !                                                                                         tmp%45#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                         tmp%46#0
        assert // can only call when not creating
        callsub tup_return                                                                        tmp%48#0,tmp%49#0
        l-load tmp%48#0 1                                                                         tmp%49#0,tmp%48#0
        itob                                                                                      tmp%49#0,aggregate%val_as_bytes%8#1
        l-load tmp%49#0 1                                                                         aggregate%val_as_bytes%8#1,tmp%49#0
        itob                                                                                      aggregate%val_as_bytes%8#1,aggregate%val_as_bytes%9#1
        l-load aggregate%val_as_bytes%8#1 1                                                       aggregate%val_as_bytes%9#1,aggregate%val_as_bytes%8#1
        l-load aggregate%val_as_bytes%9#1 1                                                       aggregate%val_as_bytes%8#1,aggregate%val_as_bytes%9#1
        concat                                                                                    aggregate%head%15#1
        byte 0x151f7c75                                                                           aggregate%head%15#1,0x151f7c75
        l-load aggregate%head%15#1 1                                                              0x151f7c75,aggregate%head%15#1
        concat                                                                                    tmp%51#0
        log
        int 1                                                                                     test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@19 

    main_calculate_sum_route@14:
        // mutable_native_types/contract.py:178
        // @arc4.abimethod()
        txn OnCompletion                                                                          tmp%52#0
        !                                                                                         tmp%53#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                         tmp%54#0
        assert // can only call when not creating
        callsub calculate_sum                                                                     tmp%56#0
        itob                                                                                      aggregate%val_as_bytes%10#1
        byte 0x151f7c75                                                                           aggregate%val_as_bytes%10#1,0x151f7c75
        l-load aggregate%val_as_bytes%10#1 1                                                      0x151f7c75,aggregate%val_as_bytes%10#1
        concat                                                                                    tmp%58#0
        log
        int 1                                                                                     test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@19 

    main_test_arr_route@15:
        // mutable_native_types/contract.py:189
        // @arc4.abimethod()
        txn OnCompletion                                                                          tmp%59#0
        !                                                                                         tmp%60#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                         tmp%61#0
        assert // can only call when not creating
        // mutable_native_types/contract.py:69
        // class Contract(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                    reinterpret_Encoded(len+(uint64,uint64)[])%0#0
        // mutable_native_types/contract.py:189
        // @arc4.abimethod()
        callsub test_arr                                                                          tmp%63#0
        byte 0x151f7c75                                                                           tmp%63#0,0x151f7c75
        l-load tmp%63#0 1                                                                         0x151f7c75,tmp%63#0
        concat                                                                                    tmp%64#0
        log
        int 1                                                                                     test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@19 

    main_bare_routing@16:
        // mutable_native_types/contract.py:69
        // class Contract(arc4.ARC4Contract):
        txn OnCompletion                                                                          tmp%65#0
        bz main___algopy_default_create@17 ; b main_after_if_else@18

    main___algopy_default_create@17:
        txn ApplicationID                                                                         tmp%66#0
        !                                                                                         tmp%67#0
        assert // can only call when creating
        int 1                                                                                     test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@19 

    main_after_if_else@18:
        // mutable_native_types/contract.py:69
        // class Contract(arc4.ARC4Contract):
        int 0                                                                                     test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@19 

    main_after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__@19:
        v-load tmp%0#0                                                                            tmp%0#0
        return


// test_cases.mutable_native_types.contract.sum_frozen_arr(arr: bytes) -> uint64:
subroutine sum_frozen_arr:
    sum_frozen_arr_block@0:                                                                       (𝕡) arr#0 |
        // mutable_native_types/contract.py:220
        // total = UInt64(0)
        int 0                                                                                     (𝕡) arr#0 | 0
        v-store total#0                                                                           (𝕡) arr#0 |
        // mutable_native_types/contract.py:221
        // for element in arr:
        p-load arr#0                                                                              (𝕡) arr#0 | arr#0 (copy)
        int 0                                                                                     (𝕡) arr#0 | arr#0 (copy),0
        extract_uint16                                                                            (𝕡) arr#0 | array_length%0#0
        v-store array_length%0#0                                                                  (𝕡) arr#0 |
        int 0                                                                                     (𝕡) arr#0 | 0
        v-store item_index_internal%0#0                                                           (𝕡) arr#0 |
        b sum_frozen_arr_for_header@1                                                             (𝕡) arr#0 |

    sum_frozen_arr_for_header@1:                                                                  (𝕡) arr#0 |
        // mutable_native_types/contract.py:221
        // for element in arr:
        v-load item_index_internal%0#0                                                            (𝕡) arr#0 | item_index_internal%0#0
        v-load array_length%0#0                                                                   (𝕡) arr#0 | item_index_internal%0#0,array_length%0#0
        <                                                                                         (𝕡) arr#0 | continue_looping%0#0
        bz sum_frozen_arr_after_for@4 ; b sum_frozen_arr_for_body@2                               (𝕡) arr#0 |

    sum_frozen_arr_for_body@2:                                                                    (𝕡) arr#0 |
        // mutable_native_types/contract.py:221
        // for element in arr:
        p-load arr#0                                                                              (𝕡) arr#0 | arr#0 (copy)
        extract 2 0                                                                               (𝕡) arr#0 | aggregate%array_trimmed%0#1
        v-load item_index_internal%0#0                                                            (𝕡) arr#0 | aggregate%array_trimmed%0#1,item_index_internal%0#0
        l-store-copy item_index_internal%0#0 1                                                    (𝕡) arr#0 | item_index_internal%0#0,aggregate%array_trimmed%0#1,item_index_internal%0#0 (copy)
        int 16                                                                                    (𝕡) arr#0 | item_index_internal%0#0,aggregate%array_trimmed%0#1,item_index_internal%0#0 (copy),16
        *                                                                                         (𝕡) arr#0 | item_index_internal%0#0,aggregate%array_trimmed%0#1,aggregate%bytes_offset%0#1
        l-load aggregate%array_trimmed%0#1 1                                                      (𝕡) arr#0 | item_index_internal%0#0,aggregate%bytes_offset%0#1,aggregate%array_trimmed%0#1
        l-load aggregate%bytes_offset%0#1 1                                                       (𝕡) arr#0 | item_index_internal%0#0,aggregate%array_trimmed%0#1,aggregate%bytes_offset%0#1
        int 16                                                                                    (𝕡) arr#0 | item_index_internal%0#0,aggregate%array_trimmed%0#1,aggregate%bytes_offset%0#1,16
        extract3 // on error: index access is out of bounds                                       (𝕡) arr#0 | item_index_internal%0#0,element#0
        // mutable_native_types/contract.py:222
        // total += element.a
        l-load-copy element#0 0                                                                   (𝕡) arr#0 | item_index_internal%0#0,element#0,element#0 (copy)
        int 0                                                                                     (𝕡) arr#0 | item_index_internal%0#0,element#0,element#0 (copy),0
        extract_uint64                                                                            (𝕡) arr#0 | item_index_internal%0#0,element#0,values%1#0
        v-load total#0                                                                            (𝕡) arr#0 | item_index_internal%0#0,element#0,values%1#0,total#0
        l-load values%1#0 1                                                                       (𝕡) arr#0 | item_index_internal%0#0,element#0,total#0,values%1#0
        +                                                                                         (𝕡) arr#0 | item_index_internal%0#0,element#0,total#0
        // mutable_native_types/contract.py:223
        // total += element.b
        l-load element#0 1                                                                        (𝕡) arr#0 | item_index_internal%0#0,total#0,element#0
        int 8                                                                                     (𝕡) arr#0 | item_index_internal%0#0,total#0,element#0,8
        extract_uint64                                                                            (𝕡) arr#0 | item_index_internal%0#0,total#0,values%2#0
        l-load total#0 1                                                                          (𝕡) arr#0 | item_index_internal%0#0,values%2#0,total#0
        l-load values%2#0 1                                                                       (𝕡) arr#0 | item_index_internal%0#0,total#0,values%2#0
        +                                                                                         (𝕡) arr#0 | item_index_internal%0#0,total#0
        v-store total#0                                                                           (𝕡) arr#0 | item_index_internal%0#0
        l-load item_index_internal%0#0 0                                                          (𝕡) arr#0 | item_index_internal%0#0
        int 1                                                                                     (𝕡) arr#0 | item_index_internal%0#0,1
        +                                                                                         (𝕡) arr#0 | item_index_internal%0#0
        v-store item_index_internal%0#0                                                           (𝕡) arr#0 |
        b sum_frozen_arr_for_header@1                                                             (𝕡) arr#0 |

    sum_frozen_arr_after_for@4:                                                                   (𝕡) arr#0 |
        // mutable_native_types/contract.py:224
        // return total
        v-load total#0                                                                            (𝕡) arr#0 | total#0
        retsub                                                                                    total#0


// test_cases.mutable_native_types.contract.do_something(pay: bytes) -> bytes:
subroutine do_something:
    do_something_block@0:                                                                         (𝕡) pay#0 |
        p-load pay#0                                                                              (𝕡) pay#0 | pay#0 (copy)
        retsub                                                                                    pay#0 (copy)


// test_cases.mutable_native_types.contract.Contract.add_payment(pay: bytes) -> void:
subroutine add_payment:
    add_payment_block@0:                                                                          (𝕡) pay#0 |
        // mutable_native_types/contract.py:125
        // assert self.num_payments < self.payments.length, "too many payments"
        int 0                                                                                     (𝕡) pay#0 | 0
        byte "num_payments"                                                                       (𝕡) pay#0 | 0,"num_payments"
        app_global_get_ex                                                                         (𝕡) pay#0 | maybe_value%0#0,maybe_exists%0#0
        assert // check self.num_payments exists                                                  (𝕡) pay#0 | maybe_value%0#0
        l-load-copy maybe_value%0#0 0                                                             (𝕡) pay#0 | maybe_value%0#0,maybe_value%0#0 (copy)
        int 8                                                                                     (𝕡) pay#0 | maybe_value%0#0,maybe_value%0#0 (copy),8
        <                                                                                         (𝕡) pay#0 | maybe_value%0#0,tmp%0#0
        assert // too many payments                                                               (𝕡) pay#0 | maybe_value%0#0
        // mutable_native_types/contract.py:126
        // self.payments[self.num_payments] = pay.copy()
        int 0                                                                                     (𝕡) pay#0 | maybe_value%0#0,0
        byte "payments"                                                                           (𝕡) pay#0 | maybe_value%0#0,0,"payments"
        app_global_get_ex                                                                         (𝕡) pay#0 | maybe_value%0#0,maybe_value%1#0,maybe_exists%1#0
        assert // check self.payments exists                                                      (𝕡) pay#0 | maybe_value%0#0,maybe_value%1#0
        l-load maybe_value%0#0 1                                                                  (𝕡) pay#0 | maybe_value%1#0,maybe_value%0#0
        int 48                                                                                    (𝕡) pay#0 | maybe_value%1#0,maybe_value%0#0,48
        *                                                                                         (𝕡) pay#0 | maybe_value%1#0,aggregate%write_offset%0#1
        l-load maybe_value%1#0 1                                                                  (𝕡) pay#0 | aggregate%write_offset%0#1,maybe_value%1#0
        l-load aggregate%write_offset%0#1 1                                                       (𝕡) pay#0 | maybe_value%1#0,aggregate%write_offset%0#1
        p-load pay#0                                                                              (𝕡) pay#0 | maybe_value%1#0,aggregate%write_offset%0#1,pay#0 (copy)
        replace3                                                                                  (𝕡) pay#0 | aggregate%updated_array%0#1
        byte "payments"                                                                           (𝕡) pay#0 | aggregate%updated_array%0#1,"payments"
        l-load aggregate%updated_array%0#1 1                                                      (𝕡) pay#0 | "payments",aggregate%updated_array%0#1
        app_global_put                                                                            (𝕡) pay#0 |
        // mutable_native_types/contract.py:127
        // self.num_payments += 1
        int 0                                                                                     (𝕡) pay#0 | 0
        byte "num_payments"                                                                       (𝕡) pay#0 | 0,"num_payments"
        app_global_get_ex                                                                         (𝕡) pay#0 | maybe_value%3#0,maybe_exists%3#0
        assert // check self.num_payments exists                                                  (𝕡) pay#0 | maybe_value%3#0
        l-load maybe_value%3#0 0                                                                  (𝕡) pay#0 | maybe_value%3#0
        int 1                                                                                     (𝕡) pay#0 | maybe_value%3#0,1
        +                                                                                         (𝕡) pay#0 | tmp%1#0
        byte "num_payments"                                                                       (𝕡) pay#0 | tmp%1#0,"num_payments"
        l-load tmp%1#0 1                                                                          (𝕡) pay#0 | "num_payments",tmp%1#0
        app_global_put                                                                            (𝕡) pay#0 |
        retsub


// test_cases.mutable_native_types.contract.Contract.increment_payment(index: uint64, amt: uint64) -> void:
subroutine increment_payment:
    increment_payment_block@0:                                                                    (𝕡) index#0,amt#0 |
        // mutable_native_types/contract.py:131
        // assert index < self.num_payments, "invalid payment index"
        int 0                                                                                     (𝕡) index#0,amt#0 | 0
        byte "num_payments"                                                                       (𝕡) index#0,amt#0 | 0,"num_payments"
        app_global_get_ex                                                                         (𝕡) index#0,amt#0 | maybe_value%0#0,maybe_exists%0#0
        assert // check self.num_payments exists                                                  (𝕡) index#0,amt#0 | maybe_value%0#0
        p-load index#0                                                                            (𝕡) index#0,amt#0 | maybe_value%0#0,index#0 (copy)
        l-load maybe_value%0#0 1                                                                  (𝕡) index#0,amt#0 | index#0 (copy),maybe_value%0#0
        <                                                                                         (𝕡) index#0,amt#0 | tmp%0#0
        assert // invalid payment index                                                           (𝕡) index#0,amt#0 |
        // mutable_native_types/contract.py:132
        // self.payments[index].amt += amt
        int 0                                                                                     (𝕡) index#0,amt#0 | 0
        byte "payments"                                                                           (𝕡) index#0,amt#0 | 0,"payments"
        app_global_get_ex                                                                         (𝕡) index#0,amt#0 | maybe_value%1#0,maybe_exists%1#0
        assert // check self.payments exists                                                      (𝕡) index#0,amt#0 | maybe_value%1#0
        p-load index#0                                                                            (𝕡) index#0,amt#0 | maybe_value%1#0,index#0 (copy)
        int 48                                                                                    (𝕡) index#0,amt#0 | maybe_value%1#0,index#0 (copy),48
        *                                                                                         (𝕡) index#0,amt#0 | maybe_value%1#0,aggregate%bytes_offset%0#1
        l-load-copy maybe_value%1#0 1                                                             (𝕡) index#0,amt#0 | maybe_value%1#0,aggregate%bytes_offset%0#1,maybe_value%1#0 (copy)
        l-load-copy aggregate%bytes_offset%0#1 1                                                  (𝕡) index#0,amt#0 | maybe_value%1#0,aggregate%bytes_offset%0#1,maybe_value%1#0 (copy),aggregate%bytes_offset%0#1 (copy)
        int 48                                                                                    (𝕡) index#0,amt#0 | maybe_value%1#0,aggregate%bytes_offset%0#1,maybe_value%1#0 (copy),aggregate%bytes_offset%0#1 (copy),48
        extract3 // on error: index access is out of bounds                                       (𝕡) index#0,amt#0 | maybe_value%1#0,aggregate%bytes_offset%0#1,aggregate%encoded_element%0#1
        l-load-copy aggregate%encoded_element%0#1 0                                               (𝕡) index#0,amt#0 | maybe_value%1#0,aggregate%bytes_offset%0#1,aggregate%encoded_element%0#1,aggregate%encoded_element%0#1 (copy)
        int 40                                                                                    (𝕡) index#0,amt#0 | maybe_value%1#0,aggregate%bytes_offset%0#1,aggregate%encoded_element%0#1,aggregate%encoded_element%0#1 (copy),40
        extract_uint64                                                                            (𝕡) index#0,amt#0 | maybe_value%1#0,aggregate%bytes_offset%0#1,aggregate%encoded_element%0#1,values%1#0
        p-load amt#0                                                                              (𝕡) index#0,amt#0 | maybe_value%1#0,aggregate%bytes_offset%0#1,aggregate%encoded_element%0#1,values%1#0,amt#0 (copy)
        +                                                                                         (𝕡) index#0,amt#0 | maybe_value%1#0,aggregate%bytes_offset%0#1,aggregate%encoded_element%0#1,tmp%1#0
        itob                                                                                      (𝕡) index#0,amt#0 | maybe_value%1#0,aggregate%bytes_offset%0#1,aggregate%encoded_element%0#1,aggregate%val_as_bytes%0#1
        l-load aggregate%encoded_element%0#1 1                                                    (𝕡) index#0,amt#0 | maybe_value%1#0,aggregate%bytes_offset%0#1,aggregate%val_as_bytes%0#1,aggregate%encoded_element%0#1
        l-load aggregate%val_as_bytes%0#1 1                                                       (𝕡) index#0,amt#0 | maybe_value%1#0,aggregate%bytes_offset%0#1,aggregate%encoded_element%0#1,aggregate%val_as_bytes%0#1
        replace2 40                                                                               (𝕡) index#0,amt#0 | maybe_value%1#0,aggregate%bytes_offset%0#1,aggregate%updated_data%0#1
        l-load maybe_value%1#0 2                                                                  (𝕡) index#0,amt#0 | aggregate%bytes_offset%0#1,aggregate%updated_data%0#1,maybe_value%1#0
        l-load aggregate%bytes_offset%0#1 2                                                       (𝕡) index#0,amt#0 | aggregate%updated_data%0#1,maybe_value%1#0,aggregate%bytes_offset%0#1
        l-load aggregate%updated_data%0#1 2                                                       (𝕡) index#0,amt#0 | maybe_value%1#0,aggregate%bytes_offset%0#1,aggregate%updated_data%0#1
        replace3                                                                                  (𝕡) index#0,amt#0 | aggregate%updated_array%0#1
        byte "payments"                                                                           (𝕡) index#0,amt#0 | aggregate%updated_array%0#1,"payments"
        l-load aggregate%updated_array%0#1 1                                                      (𝕡) index#0,amt#0 | "payments",aggregate%updated_array%0#1
        app_global_put                                                                            (𝕡) index#0,amt#0 |
        retsub


// test_cases.mutable_native_types.contract.Contract.create_storage(box_key: uint64) -> void:
subroutine create_storage:
    create_storage_block@0:                                                                       (𝕡) box_key#0 |
        // mutable_native_types/contract.py:136
        // self.nested_proxy.value = self.nested.copy()
        int 0                                                                                     (𝕡) box_key#0 | 0
        byte "nested"                                                                             (𝕡) box_key#0 | 0,"nested"
        app_global_get_ex                                                                         (𝕡) box_key#0 | maybe_value%0#0,maybe_exists%0#0
        assert // check self.nested exists                                                        (𝕡) box_key#0 | maybe_value%0#0
        byte 0x70                                                                                 (𝕡) box_key#0 | maybe_value%0#0,0x70
        l-load maybe_value%0#0 1                                                                  (𝕡) box_key#0 | 0x70,maybe_value%0#0
        app_global_put                                                                            (𝕡) box_key#0 |
        // mutable_native_types/contract.py:137
        // self.nested_local[Txn.sender] = self.nested.copy()
        int 0                                                                                     (𝕡) box_key#0 | 0
        byte "nested"                                                                             (𝕡) box_key#0 | 0,"nested"
        app_global_get_ex                                                                         (𝕡) box_key#0 | maybe_value%1#0,maybe_exists%1#0
        assert // check self.nested exists                                                        (𝕡) box_key#0 | maybe_value%1#0
        txn Sender                                                                                (𝕡) box_key#0 | maybe_value%1#0,tmp%0#0
        byte 0x6c                                                                                 (𝕡) box_key#0 | maybe_value%1#0,tmp%0#0,0x6c
        l-load-copy maybe_value%1#0 2                                                             (𝕡) box_key#0 | maybe_value%1#0,tmp%0#0,0x6c,maybe_value%1#0 (copy)
        app_local_put                                                                             (𝕡) box_key#0 | maybe_value%1#0
        // mutable_native_types/contract.py:138
        // assert self.box.create(), "expected box to not exist"
        byte "box"                                                                                (𝕡) box_key#0 | maybe_value%1#0,"box"
        int 2064                                                                                  (𝕡) box_key#0 | maybe_value%1#0,"box",2064
        box_create                                                                                (𝕡) box_key#0 | maybe_value%1#0,tmp%1#0
        assert // expected box to not exist                                                       (𝕡) box_key#0 | maybe_value%1#0
        // mutable_native_types/contract.py:139
        // self.box_map[box_key].fixed_a = self.nested.fixed_a.copy()
        l-load maybe_value%1#0 0                                                                  (𝕡) box_key#0 | maybe_value%1#0
        extract 0 16                                                                              (𝕡) box_key#0 | aggregate%extract%0#1
        p-load box_key#0                                                                          (𝕡) box_key#0 | aggregate%extract%0#1,box_key#0 (copy)
        itob                                                                                      (𝕡) box_key#0 | aggregate%extract%0#1,encoded_value%0#0
        byte "box_map"                                                                            (𝕡) box_key#0 | aggregate%extract%0#1,encoded_value%0#0,"box_map"
        l-load encoded_value%0#0 1                                                                (𝕡) box_key#0 | aggregate%extract%0#1,"box_map",encoded_value%0#0
        concat                                                                                    (𝕡) box_key#0 | aggregate%extract%0#1,box_prefixed_key%0#0
        int 0                                                                                     (𝕡) box_key#0 | aggregate%extract%0#1,box_prefixed_key%0#0,0
        l-load aggregate%extract%0#1 2                                                            (𝕡) box_key#0 | box_prefixed_key%0#0,0,aggregate%extract%0#1
        box_replace                                                                               (𝕡) box_key#0 |
        retsub


// test_cases.mutable_native_types.contract.Contract.local_struct() -> bytes:
subroutine local_struct:
    local_struct_block@0:
        // mutable_native_types/contract.py:143
        // a = Payment(Txn.sender, Asset(1234), UInt64(567))
        txn Sender                                                                                tmp%0#0
        int 1234                                                                                  tmp%0#0,1234
        itob                                                                                      tmp%0#0,aggregate%val_as_bytes%0#1
        l-load tmp%0#0 1                                                                          aggregate%val_as_bytes%0#1,tmp%0#0
        l-load aggregate%val_as_bytes%0#1 1                                                       tmp%0#0,aggregate%val_as_bytes%0#1
        concat                                                                                    aggregate%head%1#1
        int 567                                                                                   aggregate%head%1#1,567
        itob                                                                                      aggregate%head%1#1,aggregate%val_as_bytes%1#1
        l-load aggregate%head%1#1 1                                                               aggregate%val_as_bytes%1#1,aggregate%head%1#1
        l-load aggregate%val_as_bytes%1#1 1                                                       aggregate%head%1#1,aggregate%val_as_bytes%1#1
        concat                                                                                    a#0
        // mutable_native_types/contract.py:146
        // (foo, bar, baz) = (a.receiver, a.asset, a.amt)
        l-load-copy a#0 0                                                                         a#0,a#0 (copy)
        extract 0 32                                                                              a#0,foo#0
        l-load-copy a#0 1                                                                         a#0,foo#0,a#0 (copy)
        int 32                                                                                    a#0,foo#0,a#0 (copy),32
        extract_uint64                                                                            a#0,foo#0,bar#0
        l-load-copy a#0 2                                                                         a#0,foo#0,bar#0,a#0 (copy)
        int 40                                                                                    a#0,foo#0,bar#0,a#0 (copy),40
        extract_uint64                                                                            a#0,foo#0,bar#0,baz#0
        // mutable_native_types/contract.py:147
        // assert foo, "use foo"
        global ZeroAddress                                                                        a#0,foo#0,bar#0,baz#0,tmp%2#0
        l-load foo#0 3                                                                            a#0,bar#0,baz#0,tmp%2#0,foo#0
        l-load tmp%2#0 1                                                                          a#0,bar#0,baz#0,foo#0,tmp%2#0
        !=                                                                                        a#0,bar#0,baz#0,tmp%3#0
        assert // use foo                                                                         a#0,bar#0,baz#0
        // mutable_native_types/contract.py:148
        // assert bar, "use bar"
        l-load bar#0 1                                                                            a#0,baz#0,bar#0
        assert // use bar                                                                         a#0,baz#0
        // mutable_native_types/contract.py:149
        // assert baz, "use baz"
        l-load baz#0 0                                                                            a#0,baz#0
        assert // use baz                                                                         a#0
        // mutable_native_types/contract.py:150
        // do_something(a)
        l-load a#0 0                                                                              a#0
        callsub do_something                                                                      a#0
        // mutable_native_types/contract.py:151
        // return a
        retsub                                                                                    a#0


// test_cases.mutable_native_types.contract.Contract.delete_storage(box_key: uint64) -> void:
subroutine delete_storage:
    delete_storage_block@0:                                                                       (𝕡) box_key#0 |
        // mutable_native_types/contract.py:155
        // del self.nested_proxy.value
        byte 0x70                                                                                 (𝕡) box_key#0 | 0x70
        app_global_del                                                                            (𝕡) box_key#0 |
        // mutable_native_types/contract.py:156
        // del self.nested_local[Txn.sender]
        txn Sender                                                                                (𝕡) box_key#0 | tmp%0#0
        byte 0x6c                                                                                 (𝕡) box_key#0 | tmp%0#0,0x6c
        app_local_del                                                                             (𝕡) box_key#0 |
        // mutable_native_types/contract.py:157
        // del self.box.value
        byte "box"                                                                                (𝕡) box_key#0 | "box"
        box_del                                                                                   (𝕡) box_key#0 | {box_del}
        pop 1                                                                                     (𝕡) box_key#0 |
        // mutable_native_types/contract.py:158
        // del self.box_map[box_key]
        p-load box_key#0                                                                          (𝕡) box_key#0 | box_key#0 (copy)
        itob                                                                                      (𝕡) box_key#0 | encoded_value%0#0
        byte "box_map"                                                                            (𝕡) box_key#0 | encoded_value%0#0,"box_map"
        l-load encoded_value%0#0 1                                                                (𝕡) box_key#0 | "box_map",encoded_value%0#0
        concat                                                                                    (𝕡) box_key#0 | box_prefixed_key%0#0
        box_del                                                                                   (𝕡) box_key#0 | {box_del}
        pop 1                                                                                     (𝕡) box_key#0 |
        retsub


// test_cases.mutable_native_types.contract.Contract.struct_arg(box_key: uint64, a: bytes) -> void:
subroutine struct_arg:
    struct_arg_block@0:                                                                           (𝕡) box_key#0,a#0 |
        // mutable_native_types/contract.py:162
        // self.nested.fixed_a = a
        int 0                                                                                     (𝕡) box_key#0,a#0 | 0
        byte "nested"                                                                             (𝕡) box_key#0,a#0 | 0,"nested"
        app_global_get_ex                                                                         (𝕡) box_key#0,a#0 | maybe_value%0#0,maybe_exists%0#0
        assert // check self.nested exists                                                        (𝕡) box_key#0,a#0 | maybe_value%0#0
        l-load maybe_value%0#0 0                                                                  (𝕡) box_key#0,a#0 | maybe_value%0#0
        p-load a#0                                                                                (𝕡) box_key#0,a#0 | maybe_value%0#0,a#0 (copy)
        replace2 0                                                                                (𝕡) box_key#0,a#0 | aggregate%updated_data%0#1
        byte "nested"                                                                             (𝕡) box_key#0,a#0 | aggregate%updated_data%0#1,"nested"
        l-load aggregate%updated_data%0#1 1                                                       (𝕡) box_key#0,a#0 | "nested",aggregate%updated_data%0#1
        app_global_put                                                                            (𝕡) box_key#0,a#0 |
        // mutable_native_types/contract.py:163
        // self.nested_proxy.value.fixed_a = a
        int 0                                                                                     (𝕡) box_key#0,a#0 | 0
        byte 0x70                                                                                 (𝕡) box_key#0,a#0 | 0,0x70
        app_global_get_ex                                                                         (𝕡) box_key#0,a#0 | maybe_value%1#0,maybe_exists%1#0
        assert // check self.nested_proxy exists                                                  (𝕡) box_key#0,a#0 | maybe_value%1#0
        l-load maybe_value%1#0 0                                                                  (𝕡) box_key#0,a#0 | maybe_value%1#0
        p-load a#0                                                                                (𝕡) box_key#0,a#0 | maybe_value%1#0,a#0 (copy)
        replace2 0                                                                                (𝕡) box_key#0,a#0 | aggregate%updated_data%1#1
        byte 0x70                                                                                 (𝕡) box_key#0,a#0 | aggregate%updated_data%1#1,0x70
        l-load aggregate%updated_data%1#1 1                                                       (𝕡) box_key#0,a#0 | 0x70,aggregate%updated_data%1#1
        app_global_put                                                                            (𝕡) box_key#0,a#0 |
        // mutable_native_types/contract.py:164
        // self.nested_local[Txn.sender].fixed_a = a
        txn Sender                                                                                (𝕡) box_key#0,a#0 | tmp%0#0
        l-load-copy tmp%0#0 0                                                                     (𝕡) box_key#0,a#0 | tmp%0#0,tmp%0#0 (copy)
        int 0                                                                                     (𝕡) box_key#0,a#0 | tmp%0#0,tmp%0#0 (copy),0
        byte 0x6c                                                                                 (𝕡) box_key#0,a#0 | tmp%0#0,tmp%0#0 (copy),0,0x6c
        app_local_get_ex                                                                          (𝕡) box_key#0,a#0 | tmp%0#0,maybe_value%2#0,maybe_exists%2#0
        assert // check self.nested_local exists for account                                      (𝕡) box_key#0,a#0 | tmp%0#0,maybe_value%2#0
        l-load maybe_value%2#0 0                                                                  (𝕡) box_key#0,a#0 | tmp%0#0,maybe_value%2#0
        p-load a#0                                                                                (𝕡) box_key#0,a#0 | tmp%0#0,maybe_value%2#0,a#0 (copy)
        replace2 0                                                                                (𝕡) box_key#0,a#0 | tmp%0#0,aggregate%updated_data%2#1
        l-load tmp%0#0 1                                                                          (𝕡) box_key#0,a#0 | aggregate%updated_data%2#1,tmp%0#0
        byte 0x6c                                                                                 (𝕡) box_key#0,a#0 | aggregate%updated_data%2#1,tmp%0#0,0x6c
        l-load aggregate%updated_data%2#1 2                                                       (𝕡) box_key#0,a#0 | tmp%0#0,0x6c,aggregate%updated_data%2#1
        app_local_put                                                                             (𝕡) box_key#0,a#0 |
        // mutable_native_types/contract.py:165
        // self.box.value.fixed_a = a
        byte "box"                                                                                (𝕡) box_key#0,a#0 | "box"
        int 0                                                                                     (𝕡) box_key#0,a#0 | "box",0
        p-load a#0                                                                                (𝕡) box_key#0,a#0 | "box",0,a#0 (copy)
        box_replace                                                                               (𝕡) box_key#0,a#0 |
        // mutable_native_types/contract.py:166
        // self.box_map[box_key].fixed_a = a
        p-load box_key#0                                                                          (𝕡) box_key#0,a#0 | box_key#0 (copy)
        itob                                                                                      (𝕡) box_key#0,a#0 | encoded_value%4#0
        byte "box_map"                                                                            (𝕡) box_key#0,a#0 | encoded_value%4#0,"box_map"
        l-load encoded_value%4#0 1                                                                (𝕡) box_key#0,a#0 | "box_map",encoded_value%4#0
        concat                                                                                    (𝕡) box_key#0,a#0 | box_prefixed_key%0#0
        int 0                                                                                     (𝕡) box_key#0,a#0 | box_prefixed_key%0#0,0
        p-load a#0                                                                                (𝕡) box_key#0,a#0 | box_prefixed_key%0#0,0,a#0 (copy)
        box_replace                                                                               (𝕡) box_key#0,a#0 |
        retsub


// test_cases.mutable_native_types.contract.Contract.struct_return() -> bytes:
subroutine struct_return:
    struct_return_block@0:
        // mutable_native_types/contract.py:172
        // return self.nested.fixed_a
        int 0                                                                                     0
        byte "nested"                                                                             0,"nested"
        app_global_get_ex                                                                         maybe_value%0#0,maybe_exists%0#0
        assert // check self.nested exists                                                        maybe_value%0#0
        l-load maybe_value%0#0 0                                                                  maybe_value%0#0
        extract 0 16                                                                              aggregate%extract%0#1
        retsub                                                                                    aggregate%extract%0#1


// test_cases.mutable_native_types.contract.Contract.tup_return() -> uint64, uint64:
subroutine tup_return:
    tup_return_block@0:
        // mutable_native_types/contract.py:176
        // return self.nested.tup
        int 0                                                                                     0
        byte "nested"                                                                             0,"nested"
        app_global_get_ex                                                                         maybe_value%0#0,maybe_exists%0#0
        assert // check self.nested exists                                                        maybe_value%0#0
        l-load maybe_value%0#0 0                                                                  maybe_value%0#0
        extract 32 16                                                                             aggregate%extract%0#1
        l-load-copy aggregate%extract%0#1 0                                                       aggregate%extract%0#1,aggregate%extract%0#1 (copy)
        int 0                                                                                     aggregate%extract%0#1,aggregate%extract%0#1 (copy),0
        extract_uint64                                                                            aggregate%extract%0#1,aggregate%item0%0#1
        l-load aggregate%extract%0#1 1                                                            aggregate%item0%0#1,aggregate%extract%0#1
        int 8                                                                                     aggregate%item0%0#1,aggregate%extract%0#1,8
        extract_uint64                                                                            aggregate%item0%0#1,aggregate%item1%0#1
        l-load aggregate%item0%0#1 1                                                              aggregate%item1%0#1,aggregate%item0%0#1
        l-load aggregate%item1%0#1 1                                                              aggregate%item0%0#1,aggregate%item1%0#1
        retsub                                                                                    aggregate%item0%0#1,aggregate%item1%0#1


// test_cases.mutable_native_types.contract.Contract.calculate_sum() -> uint64:
subroutine calculate_sum:
    calculate_sum_block@0:
        // mutable_native_types/contract.py:180
        // fixed_a = self.nested.fixed_a
        int 0                                                                                     0
        byte "nested"                                                                             0,"nested"
        app_global_get_ex                                                                         maybe_value%0#0,maybe_exists%0#0
        assert // check self.nested exists                                                        maybe_value%0#0
        l-load-copy maybe_value%0#0 0                                                             maybe_value%0#0,maybe_value%0#0 (copy)
        extract 0 16                                                                              maybe_value%0#0,fixed_a#0
        // mutable_native_types/contract.py:181
        // fixed_b = self.nested.fixed_b
        l-load maybe_value%0#0 1                                                                  fixed_a#0,maybe_value%0#0
        extract 16 16                                                                             fixed_a#0,fixed_b#0
        // mutable_native_types/contract.py:229
        // return val.a + val.b
        l-load-copy fixed_a#0 1                                                                   fixed_a#0,fixed_b#0,fixed_a#0 (copy)
        int 0                                                                                     fixed_a#0,fixed_b#0,fixed_a#0 (copy),0
        extract_uint64                                                                            fixed_a#0,fixed_b#0,values%0#0
        l-load fixed_a#0 2                                                                        fixed_b#0,values%0#0,fixed_a#0
        int 8                                                                                     fixed_b#0,values%0#0,fixed_a#0,8
        extract_uint64                                                                            fixed_b#0,values%0#0,values%1#0
        l-load values%0#0 1                                                                       fixed_b#0,values%1#0,values%0#0
        l-load values%1#0 1                                                                       fixed_b#0,values%0#0,values%1#0
        +                                                                                         fixed_b#0,tmp%0#1
        l-load-copy fixed_b#0 1                                                                   fixed_b#0,tmp%0#1,fixed_b#0 (copy)
        int 0                                                                                     fixed_b#0,tmp%0#1,fixed_b#0 (copy),0
        extract_uint64                                                                            fixed_b#0,tmp%0#1,values%0#0
        l-load fixed_b#0 2                                                                        tmp%0#1,values%0#0,fixed_b#0
        int 8                                                                                     tmp%0#1,values%0#0,fixed_b#0,8
        extract_uint64                                                                            tmp%0#1,values%0#0,values%1#0
        l-load values%0#0 1                                                                       tmp%0#1,values%1#0,values%0#0
        l-load values%1#0 1                                                                       tmp%0#1,values%0#0,values%1#0
        +                                                                                         tmp%0#1,tmp%0#2
        // mutable_native_types/contract.py:182
        // result = add(fixed_a) + add(fixed_b)
        l-load tmp%0#1 1                                                                          tmp%0#2,tmp%0#1
        l-load tmp%0#2 1                                                                          tmp%0#1,tmp%0#2
        +                                                                                         result#0
        l-store-copy result#0 0                                                                   result#0,result#0 (copy)
        v-store result#0                                                                          result#0
        // mutable_native_types/contract.py:183
        // if result < 100:
        l-load-copy result#0 0                                                                    result#0,result#0 (copy)
        int 100                                                                                   result#0,result#0 (copy),100
        <                                                                                         result#0,tmp%3#0
        l-load result#0 1                                                                         tmp%3#0,result#0
        v-store result#6                                                                          tmp%3#0
        l-load tmp%3#0 0                                                                          tmp%3#0
        bz calculate_sum_after_if_else@2 ; b calculate_sum_if_body@1

    calculate_sum_if_body@1:
        // mutable_native_types/contract.py:184
        // c, d = self.nested.tup
        int 0                                                                                     0
        byte "nested"                                                                             0,"nested"
        app_global_get_ex                                                                         maybe_value%2#0,maybe_exists%2#0
        assert // check self.nested exists                                                        maybe_value%2#0
        l-load maybe_value%2#0 0                                                                  maybe_value%2#0
        extract 32 16                                                                             aggregate%extract%2#1
        l-load-copy aggregate%extract%2#1 0                                                       aggregate%extract%2#1,aggregate%extract%2#1 (copy)
        int 0                                                                                     aggregate%extract%2#1,aggregate%extract%2#1 (copy),0
        extract_uint64                                                                            aggregate%extract%2#1,c#0
        l-load aggregate%extract%2#1 1                                                            c#0,aggregate%extract%2#1
        int 8                                                                                     c#0,aggregate%extract%2#1,8
        extract_uint64                                                                            c#0,d#0
        // mutable_native_types/contract.py:185
        // result += c
        v-load result#0                                                                           c#0,d#0,result#0
        l-load c#0 2                                                                              d#0,result#0,c#0
        +                                                                                         d#0,result#0
        // mutable_native_types/contract.py:186
        // result += d
        l-load d#0 1                                                                              result#0,d#0
        +                                                                                         result#0
        v-store result#6
        b calculate_sum_after_if_else@2

    calculate_sum_after_if_else@2:
        v-load result#6                                                                           result#0
        // mutable_native_types/contract.py:187
        // return result
        retsub                                                                                    result#0


// test_cases.mutable_native_types.contract.Contract.test_arr(arr: bytes) -> bytes:
subroutine test_arr:
    test_arr_block@0:                                                                             (𝕡) arr#0 |
        // mutable_native_types/contract.py:193
        // fixed_struct = FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 2)
        txn NumAppArgs                                                                            (𝕡) arr#0 | tmp%1#0
        int 1                                                                                     (𝕡) arr#0 | tmp%1#0,1
        +                                                                                         (𝕡) arr#0 | tmp%2#0
        txn NumAppArgs                                                                            (𝕡) arr#0 | tmp%2#0,tmp%3#0
        int 2                                                                                     (𝕡) arr#0 | tmp%2#0,tmp%3#0,2
        +                                                                                         (𝕡) arr#0 | tmp%2#0,tmp%4#0
        l-load tmp%2#0 1                                                                          (𝕡) arr#0 | tmp%4#0,tmp%2#0
        itob                                                                                      (𝕡) arr#0 | tmp%4#0,aggregate%val_as_bytes%0#1
        l-load tmp%4#0 1                                                                          (𝕡) arr#0 | aggregate%val_as_bytes%0#1,tmp%4#0
        itob                                                                                      (𝕡) arr#0 | aggregate%val_as_bytes%0#1,aggregate%val_as_bytes%1#1
        l-load aggregate%val_as_bytes%0#1 1                                                       (𝕡) arr#0 | aggregate%val_as_bytes%1#1,aggregate%val_as_bytes%0#1
        l-load aggregate%val_as_bytes%1#1 1                                                       (𝕡) arr#0 | aggregate%val_as_bytes%0#1,aggregate%val_as_bytes%1#1
        concat                                                                                    (𝕡) arr#0 | fixed_struct#0
        l-store-copy fixed_struct#0 0                                                             (𝕡) arr#0 | fixed_struct#0,fixed_struct#0 (copy)
        v-store fixed_struct#0                                                                    (𝕡) arr#0 | fixed_struct#0
        // mutable_native_types/contract.py:194
        // arr2.append(fixed_struct)
        p-load arr#0                                                                              (𝕡) arr#0 | fixed_struct#0,arr#0 (copy)
        l-load fixed_struct#0 1                                                                   (𝕡) arr#0 | arr#0 (copy),fixed_struct#0
        concat // on error: max array length exceeded                                             (𝕡) arr#0 | concat%0#0
        p-load arr#0                                                                              (𝕡) arr#0 | concat%0#0,arr#0 (copy)
        int 0                                                                                     (𝕡) arr#0 | concat%0#0,arr#0 (copy),0
        extract_uint16                                                                            (𝕡) arr#0 | concat%0#0,extract_uint16%0#0
        int 1                                                                                     (𝕡) arr#0 | concat%0#0,extract_uint16%0#0,1
        +                                                                                         (𝕡) arr#0 | concat%0#0,add%0#0
        itob                                                                                      (𝕡) arr#0 | concat%0#0,as_bytes%0#0
        extract 6 2                                                                               (𝕡) arr#0 | concat%0#0,as_u16_bytes%0#0
        l-load concat%0#0 1                                                                       (𝕡) arr#0 | as_u16_bytes%0#0,concat%0#0
        l-load as_u16_bytes%0#0 1                                                                 (𝕡) arr#0 | concat%0#0,as_u16_bytes%0#0
        replace2 0                                                                                (𝕡) arr#0 | arr2#1
        // mutable_native_types/contract.py:195
        // assert arr != arr2, "expected arrays to be different"
        p-load arr#0                                                                              (𝕡) arr#0 | arr2#1,arr#0 (copy)
        l-load arr2#1 1                                                                           (𝕡) arr#0 | arr#0 (copy),arr2#1
        !=                                                                                        (𝕡) arr#0 | tmp%7#0
        assert // expected arrays to be different                                                 (𝕡) arr#0 |
        // mutable_native_types/contract.py:197
        // arr2 = Array[FixedStruct]()
        byte 0x0000                                                                               (𝕡) arr#0 | 0x0000
        v-store arr2#1                                                                            (𝕡) arr#0 |
        // mutable_native_types/contract.py:199
        // for _i in urange(3):
        int 0                                                                                     (𝕡) arr#0 | 0
        v-store _i#0                                                                              (𝕡) arr#0 |
        b test_arr_for_header@1                                                                   (𝕡) arr#0 |

    test_arr_for_header@1:                                                                        (𝕡) arr#0 |
        // mutable_native_types/contract.py:199
        // for _i in urange(3):
        v-load _i#0                                                                               (𝕡) arr#0 | _i#0
        int 3                                                                                     (𝕡) arr#0 | _i#0,3
        <                                                                                         (𝕡) arr#0 | continue_looping%0#0
        bz test_arr_after_for@4 ; b test_arr_for_body@2                                           (𝕡) arr#0 |

    test_arr_for_body@2:                                                                          (𝕡) arr#0 |
        // mutable_native_types/contract.py:200
        // arr2.append(fixed_struct)
        v-load arr2#1                                                                             (𝕡) arr#0 | arr2#1
        l-store-copy arr2#1 0                                                                     (𝕡) arr#0 | arr2#1,arr2#1 (copy)
        v-load fixed_struct#0                                                                     (𝕡) arr#0 | arr2#1,arr2#1 (copy),fixed_struct#0
        concat // on error: max array length exceeded                                             (𝕡) arr#0 | arr2#1,concat%1#0
        l-load arr2#1 1                                                                           (𝕡) arr#0 | concat%1#0,arr2#1
        int 0                                                                                     (𝕡) arr#0 | concat%1#0,arr2#1,0
        extract_uint16                                                                            (𝕡) arr#0 | concat%1#0,extract_uint16%1#0
        int 1                                                                                     (𝕡) arr#0 | concat%1#0,extract_uint16%1#0,1
        +                                                                                         (𝕡) arr#0 | concat%1#0,add%1#0
        itob                                                                                      (𝕡) arr#0 | concat%1#0,as_bytes%1#0
        extract 6 2                                                                               (𝕡) arr#0 | concat%1#0,as_u16_bytes%1#0
        l-load concat%1#0 1                                                                       (𝕡) arr#0 | as_u16_bytes%1#0,concat%1#0
        l-load as_u16_bytes%1#0 1                                                                 (𝕡) arr#0 | concat%1#0,as_u16_bytes%1#0
        replace2 0                                                                                (𝕡) arr#0 | arr2#1
        v-store arr2#1                                                                            (𝕡) arr#0 |
        // mutable_native_types/contract.py:199
        // for _i in urange(3):
        v-load _i#0                                                                               (𝕡) arr#0 | _i#0
        int 1                                                                                     (𝕡) arr#0 | _i#0,1
        +                                                                                         (𝕡) arr#0 | _i#0
        v-store _i#0                                                                              (𝕡) arr#0 |
        b test_arr_for_header@1                                                                   (𝕡) arr#0 |

    test_arr_after_for@4:                                                                         (𝕡) arr#0 |
        // mutable_native_types/contract.py:202
        // assert arr2.length == 3, "expected 3 elements"
        v-load arr2#1                                                                             (𝕡) arr#0 | arr2#1
        l-store-copy arr2#1 0                                                                     (𝕡) arr#0 | arr2#1,arr2#1 (copy)
        int 0                                                                                     (𝕡) arr#0 | arr2#1,arr2#1 (copy),0
        extract_uint16                                                                            (𝕡) arr#0 | arr2#1,array_length#0
        l-load-copy array_length#0 0                                                              (𝕡) arr#0 | arr2#1,array_length#0,array_length#0 (copy)
        int 3                                                                                     (𝕡) arr#0 | arr2#1,array_length#0,array_length#0 (copy),3
        ==                                                                                        (𝕡) arr#0 | arr2#1,array_length#0,tmp%9#0
        assert // expected 3 elements                                                             (𝕡) arr#0 | arr2#1,array_length#0
        // mutable_native_types/contract.py:205
        // assert sum_frozen_arr(frozen1) == 15, "expected sum to be 15"
        l-load-copy arr2#1 1                                                                      (𝕡) arr#0 | arr2#1,array_length#0,arr2#1 (copy)
        callsub sum_frozen_arr                                                                    (𝕡) arr#0 | arr2#1,array_length#0,tmp%10#0
        int 15                                                                                    (𝕡) arr#0 | arr2#1,array_length#0,tmp%10#0,15
        ==                                                                                        (𝕡) arr#0 | arr2#1,array_length#0,tmp%11#0
        assert // expected sum to be 15                                                           (𝕡) arr#0 | arr2#1,array_length#0
        l-load array_length#0 0                                                                   (𝕡) arr#0 | arr2#1,array_length#0
        int 1                                                                                     (𝕡) arr#0 | arr2#1,array_length#0,1
        -                                                                                         (𝕡) arr#0 | arr2#1,length_minus_1#0
        itob                                                                                      (𝕡) arr#0 | arr2#1,tmp%2#1
        extract 6 0                                                                               (𝕡) arr#0 | arr2#1,tmp%3#1
        l-load-copy arr2#1 1                                                                      (𝕡) arr#0 | arr2#1,tmp%3#1,arr2#1 (copy)
        l-load tmp%3#1 1                                                                          (𝕡) arr#0 | arr2#1,arr2#1 (copy),tmp%3#1
        replace2 0                                                                                (𝕡) arr#0 | arr2#1,result#0
        l-load-copy result#0 0                                                                    (𝕡) arr#0 | arr2#1,result#0,result#0 (copy)
        len                                                                                       (𝕡) arr#0 | arr2#1,result#0,tmp%5#1
        // mutable_native_types/contract.py:207
        // arr2.pop()
        int 16                                                                                    (𝕡) arr#0 | arr2#1,result#0,tmp%5#1,16
        -                                                                                         (𝕡) arr#0 | arr2#1,result#0,item_location#0
        l-load result#0 1                                                                         (𝕡) arr#0 | arr2#1,item_location#0,result#0
        int 0                                                                                     (𝕡) arr#0 | arr2#1,item_location#0,result#0,0
        l-load item_location#0 2                                                                  (𝕡) arr#0 | arr2#1,result#0,0,item_location#0
        substring3                                                                                (𝕡) arr#0 | arr2#1,result#0
        // mutable_native_types/contract.py:209
        // assert sum_frozen_arr(frozen1) == 15, "expected sum to be 15"
        l-load arr2#1 1                                                                           (𝕡) arr#0 | result#0,arr2#1
        callsub sum_frozen_arr                                                                    (𝕡) arr#0 | result#0,tmp%15#0
        int 15                                                                                    (𝕡) arr#0 | result#0,tmp%15#0,15
        ==                                                                                        (𝕡) arr#0 | result#0,tmp%16#0
        assert // expected sum to be 15                                                           (𝕡) arr#0 | result#0
        // mutable_native_types/contract.py:210
        // assert sum_frozen_arr(frozen2) == 10, "expected sum to be 10"
        l-load-copy result#0 0                                                                    (𝕡) arr#0 | result#0,result#0 (copy)
        callsub sum_frozen_arr                                                                    (𝕡) arr#0 | result#0,tmp%17#0
        int 10                                                                                    (𝕡) arr#0 | result#0,tmp%17#0,10
        ==                                                                                        (𝕡) arr#0 | result#0,tmp%18#0
        assert // expected sum to be 10                                                           (𝕡) arr#0 | result#0
        // mutable_native_types/contract.py:212
        // self.arr = arr2.copy()
        byte "arr"                                                                                (𝕡) arr#0 | result#0,"arr"
        l-load-copy result#0 1                                                                    (𝕡) arr#0 | result#0,"arr",result#0 (copy)
        app_global_put                                                                            (𝕡) arr#0 | result#0
        // mutable_native_types/contract.py:215
        // return self.arr
        l-load result#0 0                                                                         (𝕡) arr#0 | result#0
        retsub                                                                                    result#0


