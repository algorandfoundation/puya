main test_cases.mutable_native_types.contract.Contract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        let tmp%1#1: uint64 = (txn NumAppArgs)
        let tmp%2#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%0#2, tmp%1#1)
        let tmp%3#0: uint64 = (txn NumAppArgs)
        let tmp%4#0: uint64 = (+ tmp%3#0 1u)
        let tmp%5#0: uint64 = (txn NumAppArgs)
        let tmp%6#0: uint64 = (+ tmp%5#0 1u)
        let tmp%7#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%4#0, tmp%6#0)
        let tmp%8#0: uint64 = (txn NumAppArgs)
        let tmp%9#0: uint64 = (+ tmp%8#0 1u)
        let tmp%10#0: uint64 = (txn NumAppArgs)
        let tmp%11#0: uint64 = (+ tmp%10#0 1u)
        let tmp%12#0: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = bytes_encode<((uint64,uint64),(uint64,uint64),(uint64,uint64))>(tmp%2#0, tmp%7#0, tmp%9#0, tmp%11#0)
        (app_global_put "nested" tmp%12#0)
        let tmp%13#0: uint64 = (txn NumAppArgs)
        let tmp%14#0: uint64 = (txn NumAppArgs)
        let encoded_array%0#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>()
        let tmp%15#0: Encoded(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+uint8[])) = bytes_encode<(uint64,uint64,(len+uint8[]),(len+utf8[]),(len+uint8[]))>(tmp%13#0, tmp%14#0, 0x, "", encoded_array%0#0)
        (app_global_put "dyn" tmp%15#0)
        (app_global_put "num_payments" 0u)
        let tmp%16#0: Encoded((uint8[32],uint64,uint64)[2]) = (bzero 96u)
        (app_global_put "payments" tmp%16#0)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#3: uint64 = (txn NumAppArgs)
        goto tmp%0#3 ? block@4 : block@16
    block@4: // abi_routing_L70
        let tmp%2#1: bytes = (txna ApplicationArgs 0)
        switch tmp%2#1 {method "fixed_initialize()void" => block@5, method "add_payment((address,uint64,uint64))void" => block@6, method "increment_payment(uint64,uint64)void" => block@7, method "create_storage(uint64)void" => block@8, method "local_struct()(address,uint64,uint64)" => block@9, method "delete_storage(uint64)void" => block@10, method "struct_arg(uint64,(uint64,uint64))void" => block@11, method "struct_return()(uint64,uint64)" => block@12, method "tup_return()(uint64,uint64)" => block@13, method "calculate_sum()uint64" => block@14, method "test_arr((uint64,uint64)[])(uint64,uint64)[]" => block@15, * => block@18}
    block@5: // fixed_initialize_route_L94
        let tmp%3#1: uint64 = (txn OnCompletion)
        let tmp%4#1: bool = (! tmp%3#1)
        (assert tmp%4#1) // OnCompletion is not NoOp
        let tmp%5#1: uint64 = (txn ApplicationID)
        (assert tmp%5#1) // can only call when not creating
        test_cases.mutable_native_types.contract.Contract.fixed_initialize()
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        goto block@19
    block@6: // add_payment_route_L124
        let tmp%7#1: uint64 = (txn OnCompletion)
        let tmp%8#1: bool = (! tmp%7#1)
        (assert tmp%8#1) // OnCompletion is not NoOp
        let tmp%9#1: uint64 = (txn ApplicationID)
        (assert tmp%9#1) // can only call when not creating
        let reinterpret_Encoded(uint8[32],uint64,uint64)%0#0: Encoded(uint8[32],uint64,uint64) = (txna ApplicationArgs 1)
        test_cases.mutable_native_types.contract.Contract.add_payment(reinterpret_Encoded(uint8[32],uint64,uint64)%0#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#1: bool = 1u
        goto block@19
    block@7: // increment_payment_route_L130
        let tmp%11#1: uint64 = (txn OnCompletion)
        let tmp%12#1: bool = (! tmp%11#1)
        (assert tmp%12#1) // OnCompletion is not NoOp
        let tmp%13#1: uint64 = (txn ApplicationID)
        (assert tmp%13#1) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%15#1: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%16#1: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        test_cases.mutable_native_types.contract.Contract.increment_payment(tmp%15#1, tmp%16#1)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#2: bool = 1u
        goto block@19
    block@8: // create_storage_route_L135
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%21#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%2#0)
        test_cases.mutable_native_types.contract.Contract.create_storage(tmp%21#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#3: bool = 1u
        goto block@19
    block@9: // local_struct_route_L142
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        (assert tmp%24#0) // can only call when not creating
        let tmp%26#0: Encoded(uint8[32],uint64,uint64) = test_cases.mutable_native_types.contract.Contract.local_struct()
        let tmp%27#0: bytes = (concat 0x151f7c75 tmp%26#0)
        (log tmp%27#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#4: bool = 1u
        goto block@19
    block@10: // delete_storage_route_L154
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        (assert tmp%30#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%32#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%3#0)
        test_cases.mutable_native_types.contract.Contract.delete_storage(tmp%32#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#5: bool = 1u
        goto block@19
    block@11: // struct_arg_route_L161
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        (assert tmp%35#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%37#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%4#0)
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 2)
        test_cases.mutable_native_types.contract.Contract.struct_arg(tmp%37#0, reinterpret_Encoded(uint64,uint64)%0#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#6: bool = 1u
        goto block@19
    block@12: // struct_return_route_L171
        let tmp%38#0: uint64 = (txn OnCompletion)
        let tmp%39#0: bool = (! tmp%38#0)
        (assert tmp%39#0) // OnCompletion is not NoOp
        let tmp%40#0: uint64 = (txn ApplicationID)
        (assert tmp%40#0) // can only call when not creating
        let tmp%42#0: Encoded(uint64,uint64) = test_cases.mutable_native_types.contract.Contract.struct_return()
        let tmp%43#0: bytes = (concat 0x151f7c75 tmp%42#0)
        (log tmp%43#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#7: bool = 1u
        goto block@19
    block@13: // tup_return_route_L175
        let tmp%44#0: uint64 = (txn OnCompletion)
        let tmp%45#0: bool = (! tmp%44#0)
        (assert tmp%45#0) // OnCompletion is not NoOp
        let tmp%46#0: uint64 = (txn ApplicationID)
        (assert tmp%46#0) // can only call when not creating
        let (tmp%48#0: uint64, tmp%49#0: uint64) = test_cases.mutable_native_types.contract.Contract.tup_return()
        let tmp%50#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%48#0, tmp%49#0)
        let tmp%51#0: bytes = (concat 0x151f7c75 tmp%50#0)
        (log tmp%51#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#8: bool = 1u
        goto block@19
    block@14: // calculate_sum_route_L179
        let tmp%52#0: uint64 = (txn OnCompletion)
        let tmp%53#0: bool = (! tmp%52#0)
        (assert tmp%53#0) // OnCompletion is not NoOp
        let tmp%54#0: uint64 = (txn ApplicationID)
        (assert tmp%54#0) // can only call when not creating
        let tmp%56#0: uint64 = test_cases.mutable_native_types.contract.Contract.calculate_sum()
        let tmp%57#0: Encoded(uint64) = bytes_encode<uint64>(tmp%56#0)
        let tmp%58#0: bytes = (concat 0x151f7c75 tmp%57#0)
        (log tmp%58#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#9: bool = 1u
        goto block@19
    block@15: // test_arr_route_L190
        let tmp%59#0: uint64 = (txn OnCompletion)
        let tmp%60#0: bool = (! tmp%59#0)
        (assert tmp%60#0) // OnCompletion is not NoOp
        let tmp%61#0: uint64 = (txn ApplicationID)
        (assert tmp%61#0) // can only call when not creating
        let reinterpret_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        let tmp%63#0: Encoded(len+(uint64,uint64)[]) = test_cases.mutable_native_types.contract.Contract.test_arr(reinterpret_Encoded(len+(uint64,uint64)[])%0#0)
        let tmp%64#0: bytes = (concat 0x151f7c75 tmp%63#0)
        (log tmp%64#0)
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#10: bool = 1u
        goto block@19
    block@16: // bare_routing_L70
        let tmp%65#0: uint64 = (txn OnCompletion)
        goto tmp%65#0 ? block@18 : block@17
    block@17: // __algopy_default_create_L1
        let tmp%66#0: uint64 = (txn ApplicationID)
        let tmp%67#0: bool = (! tmp%66#0)
        (assert tmp%67#0) // can only call when creating
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#11: bool = 1u
        goto block@19
    block@18: // after_if_else_L70
        let test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#12: bool = 0u
        goto block@19
    block@19: // after_inlined_test_cases.mutable_native_types.contract.Contract.__puya_arc4_router___L1
        let tmp%0#1: bool = φ(test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#0 <- block@5, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#1 <- block@6, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#2 <- block@7, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#3 <- block@8, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#4 <- block@9, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#5 <- block@10, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#6 <- block@11, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#7 <- block@12, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#8 <- block@13, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#9 <- block@14, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#10 <- block@15, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#11 <- block@17, test_cases.mutable_native_types.contract.Contract.__puya_arc4_router__%0#12 <- block@18)
        return tmp%0#1

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#2: uint64 = (* array_length#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#2 tmp%2#0 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#2)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@4: // after_for_L331
        let tmp%4#0: bytes = (concat size_b#0 array_head_and_tail#2)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L273
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L331
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine test_cases.mutable_native_types.contract.sum_frozen_arr(arr: Encoded(len+(uint64,uint64)[])) -> uint64:
    block@0: // L245
        let total#0: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L248
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let total#1: uint64 = φ(total#0 <- block@0, total#3 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L249
        let array_item%0#0: Encoded(uint64,uint64) = extract_value(arr#0, item_index_internal%0#1)
        let element#0: Encoded(uint64,uint64) = decode_bytes<Encoded(uint64,uint64)>(array_item%0#0)
        let tuple_item%0#0: Encoded(uint64) = extract_value(element#0, 0)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let total#2: uint64 = (+ total#1 values%1#0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(element#0, 1)
        let values%2#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let total#3: uint64 = (+ total#2 values%2#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L248
        return total#1

subroutine test_cases.mutable_native_types.contract.add(val: Encoded(uint64,uint64)) -> uint64:
    block@0: // L254
        let tuple_item%0#0: Encoded(uint64) = extract_value(val#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(val#0, 1)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let tmp%0#0: uint64 = (+ values%0#0 values%1#0)
        return tmp%0#0

subroutine test_cases.mutable_native_types.contract.do_something(pay: Encoded(uint8[32],uint64,uint64)) -> Encoded(uint8[32],uint64,uint64):
    block@0: // L259
        return pay#0

subroutine test_cases.mutable_native_types.contract.Contract.fixed_initialize() -> void:
    block@0: // L94
        let arr_3#0: Encoded(uint64[3]) = (bzero 24u)
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(0u)
        let arr_3#1: Encoded(uint64[3]) = replace_value(arr_3#0, 0u, encoded_value%0#0)
        let encoded_value%1#0: Encoded(uint64) = bytes_encode<uint64>(1u)
        let arr_3#2: Encoded(uint64[3]) = replace_value(arr_3#1, 1u, encoded_value%1#0)
        let encoded_value%2#0: Encoded(uint64) = bytes_encode<uint64>(2u)
        let arr_3#3: Encoded(uint64[3]) = replace_value(arr_3#2, 2u, encoded_value%2#0)
        let arr_3_from_tuple#0: Encoded(uint64[3]) = bytes_encode<uint64[3]>(0u, 1u, 2u)
        let tmp%1#0: bool = (== arr_3#3 arr_3_from_tuple#0)
        (assert tmp%1#0) // should be the same
        let arr_3_from_full#0: Encoded(uint64[3]) = bytes_encode<uint64[3]>(1u, 1u, 1u)
        let array_item%0#0: Encoded(uint64) = extract_value(arr_3_from_full#0, 0u)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%2#0: bool = (== values%0#0 1u)
        (assert tmp%2#0)
        let array_item%1#0: Encoded(uint64) = extract_value(arr_3_from_full#0, 1u)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%3#0: bool = (== values%1#0 1u)
        (assert tmp%3#0)
        let array_item%2#0: Encoded(uint64) = extract_value(arr_3_from_full#0, 2u)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let tmp%4#0: bool = (== values%2#0 1u)
        (assert tmp%4#0)
        let dynamic_arr#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(0u, 1u, 2u)
        let array_length%0#0: uint64 = (extract_uint16 dynamic_arr#0 0u)
        let eq%0#0: bool = (== array_length%0#0 3u)
        (assert eq%0#0) // invalid input length
        let converted_array%0#0: Encoded(uint64[3]) = ((extract 2 0) dynamic_arr#0)
        let tmp%6#0: bool = (== arr_3#3 converted_array%0#0)
        (assert tmp%6#0)
        let awst_tmp%0#0: Encoded(uint64,uint64,uint64) = bytes_encode<(uint64,uint64,uint64)>(0u, 1u, 2u)
        let tuple_item%0#0: Encoded(uint64) = extract_value(awst_tmp%0#0, 0)
        let values%3#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(awst_tmp%0#0, 1)
        let values%4#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let tuple_item%2#0: Encoded(uint64) = extract_value(awst_tmp%0#0, 2)
        let values%5#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let encoded_array%3#0: Encoded(uint64[3]) = bytes_encode<uint64[3]>(values%3#0, values%4#0, values%5#0)
        let tmp%7#0: bool = (== arr_3#3 encoded_array%3#0)
        (assert tmp%7#0)
        let static_array#0: Encoded(uint64[3]) = bytes_encode<uint64[3]>(0x0000000000000000, 0x0000000000000001, 0x0000000000000002)
        let tmp%8#0: bool = (== static_array#0 arr_3#3)
        (assert tmp%8#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.add_payment(pay: Encoded(uint8[32],uint64,uint64)) -> void:
    block@0: // L124
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%0#0) // check self.num_payments exists
        let tmp%0#0: bool = (< maybe_value%0#0 2u)
        (assert tmp%0#0) // too many payments
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "payments")
        (assert maybe_exists%1#0) // check self.payments exists
        let encoded_value%0#0: Encoded(uint8[32],uint64,uint64) = bytes_encode<(uint8[32],uint64,uint64)>(pay#0)
        let updated_array%0#0: Encoded((uint8[32],uint64,uint64)[2]) = replace_value(maybe_value%1#0, maybe_value%0#0, encoded_value%0#0)
        (app_global_put "payments" updated_array%0#0)
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%3#0) // check self.num_payments exists
        let tmp%1#0: uint64 = (+ maybe_value%3#0 1u)
        (app_global_put "num_payments" tmp%1#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.increment_payment(index: uint64, amt: uint64) -> void:
    block@0: // L130
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "num_payments")
        (assert maybe_exists%0#0) // check self.num_payments exists
        let tmp%0#0: bool = (< index#0 maybe_value%0#0)
        (assert tmp%0#0) // invalid payment index
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "payments")
        (assert maybe_exists%1#0) // check self.payments exists
        let array_item%0#0: Encoded(uint8[32],uint64,uint64) = extract_value(maybe_value%1#0, index#0)
        let values%0#0: Encoded(uint8[32],uint64,uint64) = decode_bytes<Encoded(uint8[32],uint64,uint64)>(array_item%0#0)
        let tuple_item%0#0: Encoded(uint64) = extract_value(values%0#0, 2)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%1#0: uint64 = (+ values%1#0 amt#0)
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(tmp%1#0)
        let updated_array%0#0: Encoded((uint8[32],uint64,uint64)[2]) = replace_value(maybe_value%1#0, index#0, 2, encoded_value%0#0)
        (app_global_put "payments" updated_array%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.create_storage(box_key: uint64) -> void:
    block@0: // L135
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        (app_global_put 0x70 maybe_value%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%1#0) // check self.nested exists
        let tmp%0#0: account = (txn Sender)
        (app_local_put tmp%0#0 0x6c maybe_value%1#0)
        let tmp%1#0: bool = (box_create "box" 2064u)
        (assert tmp%1#0) // expected box to not exist
        let tuple_item%0#0: Encoded(uint64,uint64) = extract_value(maybe_value%1#0, 0)
        let values%0#0: Encoded(uint64,uint64) = decode_bytes<Encoded(uint64,uint64)>(tuple_item%0#0)
        let encoded_value%0#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#0)
        let box%offset%0#0: uint64 = 0u
        (box_replace box_prefixed_key%0#0 0u tuple_item%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.local_struct() -> Encoded(uint8[32],uint64,uint64):
    block@0: // L142
        let tmp%0#0: account = (txn Sender)
        let a#0: Encoded(uint8[32],uint64,uint64) = bytes_encode<(uint8[32],uint64,uint64)>(tmp%0#0, 1234u, 567u)
        let tuple_item%0#0: Encoded(uint8[32]) = extract_value(a#0, 0)
        let foo#0: account = decode_bytes<account>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(uint64) = extract_value(a#0, 1)
        let bar#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let tuple_item%2#0: Encoded(uint64) = extract_value(a#0, 2)
        let baz#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let tmp%2#0: account = (global ZeroAddress)
        let tmp%3#0: bool = (!= foo#0 tmp%2#0)
        (assert tmp%3#0) // use foo
        (assert bar#0) // use bar
        (assert baz#0) // use baz
        let a#1: Encoded(uint8[32],uint64,uint64) = test_cases.mutable_native_types.contract.do_something(a#0)
        return a#1

subroutine test_cases.mutable_native_types.contract.Contract.delete_storage(box_key: uint64) -> void:
    block@0: // L154
        (app_global_del 0x70)
        let tmp%0#0: account = (txn Sender)
        (app_local_del tmp%0#0 0x6c)
        (box_del "box")
        let encoded_value%0#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%0#0)
        (box_del box_prefixed_key%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.struct_arg(box_key: uint64, a: Encoded(uint64,uint64)) -> void:
    block@0: // L161
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let encoded_value%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(a#0)
        let updated_tuple%0#0: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = replace_value(maybe_value%0#0, 0, encoded_value%0#0)
        (app_global_put "nested" updated_tuple%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u 0x70)
        (assert maybe_exists%1#0) // check self.nested_proxy exists
        let updated_tuple%1#0: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = replace_value(maybe_value%1#0, 0, encoded_value%0#0)
        (app_global_put 0x70 updated_tuple%1#0)
        let tmp%0#0: account = (txn Sender)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_local_get_ex tmp%0#0 0u 0x6c)
        (assert maybe_exists%2#0) // check self.nested_local exists for account
        let updated_tuple%2#0: Encoded((uint64,uint64),(uint64,uint64),(uint64,uint64)) = replace_value(maybe_value%2#0, 0, encoded_value%0#0)
        (app_local_put tmp%0#0 0x6c updated_tuple%2#0)
        let box%offset%0#0: uint64 = 0u
        (box_replace "box" 0u encoded_value%0#0)
        let encoded_value%4#0: bytes[8] = (itob box_key#0)
        let box_prefixed_key%0#0: bytes = (concat "box_map" encoded_value%4#0)
        let box%offset%1#0: uint64 = 0u
        (box_replace box_prefixed_key%0#0 0u encoded_value%0#0)
        return 

subroutine test_cases.mutable_native_types.contract.Contract.struct_return() -> Encoded(uint64,uint64):
    block@0: // L171
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let tuple_item%0#0: Encoded(uint64,uint64) = extract_value(maybe_value%0#0, 0)
        let values%0#0: Encoded(uint64,uint64) = decode_bytes<Encoded(uint64,uint64)>(tuple_item%0#0)
        return values%0#0

subroutine test_cases.mutable_native_types.contract.Contract.tup_return() -> <uint64, uint64>:
    block@0: // L175
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let tuple_item%0#0: Encoded(uint64,uint64) = extract_value(maybe_value%0#0, 2)
        let (values%0#0: uint64, values%1#0: uint64) = decode_bytes<(uint64,uint64,)>(tuple_item%0#0)
        return values%0#0 values%1#0

subroutine test_cases.mutable_native_types.contract.Contract.calculate_sum() -> uint64:
    block@0: // L179
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%0#0) // check self.nested exists
        let tuple_item%0#0: Encoded(uint64,uint64) = extract_value(maybe_value%0#0, 0)
        let fixed_a#0: Encoded(uint64,uint64) = decode_bytes<Encoded(uint64,uint64)>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(uint64,uint64) = extract_value(maybe_value%0#0, 1)
        let fixed_b#0: Encoded(uint64,uint64) = decode_bytes<Encoded(uint64,uint64)>(tuple_item%1#0)
        let tmp%0#0: uint64 = test_cases.mutable_native_types.contract.add(fixed_a#0)
        let tmp%1#0: uint64 = test_cases.mutable_native_types.contract.add(fixed_b#0)
        let result#0: uint64 = (+ tmp%0#0 tmp%1#0)
        let tmp%3#0: bool = (< result#0 100u)
        goto tmp%3#0 ? block@1 : block@2
    block@1: // if_body_L185
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "nested")
        (assert maybe_exists%2#0) // check self.nested exists
        let tuple_item%2#0: Encoded(uint64,uint64) = extract_value(maybe_value%2#0, 2)
        let (c#0: uint64, d#0: uint64) = decode_bytes<(uint64,uint64,)>(tuple_item%2#0)
        let result#1: uint64 = (+ result#0 c#0)
        let result#2: uint64 = (+ result#1 d#0)
        goto block@2
    block@2: // after_if_else_L184
        let result#3: uint64 = φ(result#0 <- block@0, result#2 <- block@1)
        return result#3

subroutine test_cases.mutable_native_types.contract.Contract.test_arr(arr: Encoded(len+(uint64,uint64)[])) -> Encoded(len+(uint64,uint64)[]):
    block@0: // L190
        let array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%0#0: bool = (! array_length%0#0)
        (assert tmp%0#0) // expected empty array
        let encoded_array%0#0: Encoded((uint64,uint64)[]) = bytes_encode<(uint64,uint64)[]>()
        let arr4#0: Encoded((uint64,uint64)[])* = new()
        let extract_to_end%0#0: bytes = ((extract 2 0) arr#0)
        let concat%0#0: Encoded((uint64,uint64)[]) = (concat encoded_array%0#0 extract_to_end%0#0) // on error: max array length exceeded
        store(arr4#0, concat%0#0)
        let bytes_len%0#0: uint64 = (len concat%0#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 16u)
        let tmp%3#0: bool = (== array_length%0#0 array_len%0#0)
        (assert tmp%3#0) // expected arrays to be the same length
        let as_bytes%0#0: bytes[8] = (itob array_len%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr5#0: Encoded(len+(uint64,uint64)[]) = (concat as_u16_bytes%0#0 concat%0#0)
        let tmp%4#0: bool = (== arr#0 arr5#0)
        (assert tmp%4#0) // expected arrays to be the same
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: uint64 = (+ tmp%6#0 1u)
        let tmp%8#0: uint64 = (txn NumAppArgs)
        let tmp%9#0: uint64 = (+ tmp%8#0 2u)
        let fixed_struct#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%7#0, tmp%9#0)
        let tmp%11#0: Encoded((uint64,uint64)[]) = bytes_encode<(uint64,uint64)[]>(fixed_struct#0)
        let concat%1#0: Encoded(len+(uint64,uint64)[]) = (concat arr#0 tmp%11#0) // on error: max array length exceeded
        let add%0#0: uint64 = (+ array_length%0#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr2#1: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let array_length%5#0: uint64 = (extract_uint16 arr2#1 0u)
        let tmp%12#0: bool = (== array_length%5#0 1u)
        (assert tmp%12#0) // expected array to have 1 item
        let tmp%13#0: uint64 = test_cases.mutable_native_types.contract.sum_frozen_arr(arr2#1)
        let tmp%14#0: bool = (== tmp%13#0 7u)
        (assert tmp%14#0) // expected sum to be 7
        let tmp%15#0: bool = (!= arr#0 arr2#1)
        (assert tmp%15#0) // expected arrays to be different
        let array_item%0#0: Encoded(uint64,uint64) = extract_value(arr2#1, 0u)
        let values%0#0: Encoded(uint64,uint64) = decode_bytes<Encoded(uint64,uint64)>(array_item%0#0)
        let arr7#0: Encoded(len+(uint64,uint64)[]) = bytes_encode<(len+(uint64,uint64)[])>(values%0#0)
        let tmp%16#0: bool = (== arr2#1 arr7#0)
        (assert tmp%16#0) // expected arrays to be the same
        let arr8#0: Encoded(len+(uint64,uint64)[]) = bytes_encode<(len+(uint64,uint64)[])>()
        let extract_to_end%1#0: bytes = ((extract 2 0) arr2#1)
        let concat%2#0: Encoded(len+(uint64,uint64)[]) = (concat arr8#0 extract_to_end%1#0) // on error: max array length exceeded
        let extract_to_end%2#0: bytes = ((extract 2 0) concat%2#0)
        let len%0#0: uint64 = (len extract_to_end%2#0)
        let div_floor%0#0: uint64 = (/ len%0#0 16u)
        let as_bytes%2#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let arr8#1: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%2#0 as_u16_bytes%2#0)
        let tmp%17#0: bool = (== arr2#1 arr8#1)
        (assert tmp%17#0) // expected arrays to be the same
        let _i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L226
        let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@2)
        let arr2#3: Encoded(len+(uint64,uint64)[]) = φ(arr8#0 <- block@0, arr2#4 <- block@2)
        let continue_looping%0#0: bool = (< _i#1 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L227
        let concat%3#0: Encoded(len+(uint64,uint64)[]) = (concat arr2#3 tmp%11#0) // on error: max array length exceeded
        let extract_uint16%1#0: uint64 = (extract_uint16 arr2#3 0u)
        let add%1#0: uint64 = (+ extract_uint16%1#0 1u)
        let as_bytes%3#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let arr2#4: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%3#0 as_u16_bytes%3#0)
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@1
    block@4: // after_for_L226
        let array_length#0: uint64 = (extract_uint16 arr2#3 0u)
        let tmp%19#0: bool = (== array_length#0 3u)
        (assert tmp%19#0) // expected 3 elements
        let tmp%20#0: uint64 = test_cases.mutable_native_types.contract.sum_frozen_arr(arr2#3)
        let tmp%21#0: bool = (== tmp%20#0 21u)
        (assert tmp%21#0) // expected sum to be 21
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#1: bytes = (itob length_minus_1#0)
        let tmp%3#1: bytes = ((extract 6 0) tmp%2#1)
        let result#0: bytes = ((replace2 0) arr2#3 tmp%3#1)
        let tmp%5#1: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%5#1 16u)
        let popped#0: bytes = (extract3 result#0 item_location#0 16u)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        let tmp%24#0: Encoded(uint64,uint64) = decode_bytes<Encoded(uint64,uint64)>(popped#0)
        let tmp%25#0: uint64 = test_cases.mutable_native_types.contract.sum_frozen_arr(arr2#3)
        let tmp%26#0: bool = (== tmp%25#0 21u)
        (assert tmp%26#0) // expected sum to be 21
        let tmp%27#0: uint64 = test_cases.mutable_native_types.contract.sum_frozen_arr(result#1)
        let tmp%28#0: bool = (== tmp%27#0 14u)
        (assert tmp%28#0) // expected sum to be 14
        (app_global_put "arr" result#1)
        let tmp%29#0: bool = 1u
        return result#1