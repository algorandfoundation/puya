{
    "name": "Contract",
    "structs": {
        "DynamicStruct": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "c",
                "type": "byte[]"
            },
            {
                "name": "d",
                "type": "string"
            },
            {
                "name": "e",
                "type": "byte[]"
            }
        ],
        "FixedStruct": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "LargeFixedStruct": [
            {
                "name": "fixed_a",
                "type": "FixedStruct"
            },
            {
                "name": "big_bytes",
                "type": "byte[2048]"
            }
        ],
        "NamedTup": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "NestedStruct": [
            {
                "name": "fixed_a",
                "type": "FixedStruct"
            },
            {
                "name": "fixed_b",
                "type": "FixedStruct"
            },
            {
                "name": "tup",
                "type": "NamedTup"
            }
        ],
        "Payment": [
            {
                "name": "receiver",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "uint64"
            },
            {
                "name": "amt",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "test_imm_fixed_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fixed_initialize",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_payment",
            "args": [
                {
                    "type": "(address,uint64,uint64)",
                    "struct": "Payment",
                    "name": "pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "increment_payment",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "amt"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_storage",
            "args": [
                {
                    "type": "uint64",
                    "name": "box_key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "local_struct",
            "args": [],
            "returns": {
                "type": "(address,uint64,uint64)",
                "struct": "Payment"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_storage",
            "args": [
                {
                    "type": "uint64",
                    "name": "box_key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "struct_arg",
            "args": [
                {
                    "type": "uint64",
                    "name": "box_key"
                },
                {
                    "type": "(uint64,uint64)",
                    "struct": "FixedStruct",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "struct_return",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "FixedStruct"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "tup_return",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "NamedTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculate_sum",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arr",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arr2",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 5
            },
            "local": {
                "ints": 0,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "nested": {
                    "keyType": "AVMString",
                    "valueType": "NestedStruct",
                    "key": "bmVzdGVk"
                },
                "nested_proxy": {
                    "keyType": "AVMBytes",
                    "valueType": "NestedStruct",
                    "key": "cA==",
                    "desc": "some documentation"
                },
                "dyn": {
                    "keyType": "AVMString",
                    "valueType": "DynamicStruct",
                    "key": "ZHlu"
                },
                "num_payments": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bnVtX3BheW1lbnRz"
                },
                "payments": {
                    "keyType": "AVMString",
                    "valueType": "(address,uint64,uint64)[2]",
                    "key": "cGF5bWVudHM="
                },
                "arr": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,uint64)[]",
                    "key": "YXJy"
                }
            },
            "local": {
                "nested_local": {
                    "keyType": "AVMBytes",
                    "valueType": "NestedStruct",
                    "key": "bA=="
                }
            },
            "box": {
                "box": {
                    "keyType": "AVMString",
                    "valueType": "LargeFixedStruct",
                    "key": "Ym94"
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_map": {
                    "keyType": "uint64",
                    "valueType": "LargeFixedStruct",
                    "prefix": "Ym94X21hcA=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        261,
                        273,
                        292,
                        309,
                        330,
                        346,
                        365,
                        381,
                        397,
                        413,
                        433,
                        448,
                        457
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1118
                    ],
                    "errorMessage": "and the sum shall be 41"
                },
                {
                    "pc": [
                        471
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        264,
                        276,
                        295,
                        312,
                        333,
                        349,
                        368,
                        384,
                        400,
                        416,
                        436,
                        451,
                        460
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1137
                    ],
                    "errorMessage": "check self.arr exists"
                },
                {
                    "pc": [
                        612,
                        620,
                        720,
                        778,
                        786,
                        803,
                        842
                    ],
                    "errorMessage": "check self.nested exists"
                },
                {
                    "pc": [
                        748
                    ],
                    "errorMessage": "check self.nested_local exists for account"
                },
                {
                    "pc": [
                        732
                    ],
                    "errorMessage": "check self.nested_proxy exists"
                },
                {
                    "pc": [
                        537,
                        560,
                        573
                    ],
                    "errorMessage": "check self.num_payments exists"
                },
                {
                    "pc": [
                        546,
                        581
                    ],
                    "errorMessage": "check self.payments exists"
                },
                {
                    "pc": [
                        1041
                    ],
                    "errorMessage": "expected 3 elements"
                },
                {
                    "pc": [
                        936
                    ],
                    "errorMessage": "expected array to have 1 item"
                },
                {
                    "pc": [
                        951
                    ],
                    "errorMessage": "expected arrays to be different"
                },
                {
                    "pc": [
                        899,
                        971,
                        995
                    ],
                    "errorMessage": "expected arrays to be the same"
                },
                {
                    "pc": [
                        889
                    ],
                    "errorMessage": "expected arrays to be the same length"
                },
                {
                    "pc": [
                        634
                    ],
                    "errorMessage": "expected box to not exist"
                },
                {
                    "pc": [
                        1195
                    ],
                    "errorMessage": "expected elements to match"
                },
                {
                    "pc": [
                        874
                    ],
                    "errorMessage": "expected empty array"
                },
                {
                    "pc": [
                        1086
                    ],
                    "errorMessage": "expected sum to be 14"
                },
                {
                    "pc": [
                        1049,
                        1078
                    ],
                    "errorMessage": "expected sum to be 21"
                },
                {
                    "pc": [
                        945
                    ],
                    "errorMessage": "expected sum to be 7"
                },
                {
                    "pc": [
                        504,
                        590,
                        1182,
                        1193
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        577
                    ],
                    "errorMessage": "invalid payment index"
                },
                {
                    "pc": [
                        918,
                        979,
                        1010,
                        1099
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        542
                    ],
                    "errorMessage": "too many payments"
                },
                {
                    "pc": [
                        683
                    ],
                    "errorMessage": "use bar"
                },
                {
                    "pc": [
                        684
                    ],
                    "errorMessage": "use baz"
                },
                {
                    "pc": [
                        681
                    ],
                    "errorMessage": "use foo"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAEQCCYKBm5lc3RlZAxudW1fcGF5bWVudHMIcGF5bWVudHMEFR98dQFwAWwDYm94B2JveF9tYXACAAADYXJyMRhAAFIxG0kWTBZQMRsjCDEbIwhMFkwWUDEbIwgxGyMITwNPA1BPAhZPAhZQUChMZzEbSRZMFlCADAAWABgAGgAAAAAAAFCAA2R5bkxnKSJngWCvKkxnMRtBATGCDQRnpaAtBNEnb4EEDSq0wATotdVsBIdZAeUESrtw8QSvBfSPBOjXHIwEAaqjnASDE97nBCyoScEEPY5wfQQGSUAtNhoAjg0AxgC9AK4AmgCKAHoAagBXAEcAMgAhAA4AAiJDMRkURDEYRIgDYSNDMRkURDEYRDYaAYgCRitMULAjQzEZFEQxGESIAfIWK0xQsCNDMRkURDEYRIgB00wWTBZQK0xQsCNDMRkURDEYRIgBtitMULAjQzEZFEQxGEQ2GgEXNhoCiAFiI0MxGRREMRhENhoBF4gBOSNDMRkURDEYRIgBBitMULAjQzEZFEQxGEQ2GgEXiADGI0MxGRREMRhENhoBFzYaAheIAIsjQzEZFEQxGEQ2GgGIAFgjQzEZFEQxGEQjQzEZFEQxGEQjQzEZQP8sMRgURCNDigEBIov/IlkiiwKLAQxBACGL/1cCAIsCSU4CJAskWEkiW4sACEwlWwiMACMIjAJC/9eJigEBi/+JigEAIillREmBAgxEIiplREyBMAuL/10qTGciKWVEIwgpTGeJigIAIillRIv+DUQiKmVEi/6BMAtKgTBYSYEoW4v/CBZcKF0qTGeJigEAIihlRCcETGciKGVEMQAnBUsCZicGgZAQuURXABCL/xYnB0xQIk8Cu4kxAIHSCRZQgbcEFlBJVwAgSwGBIFtLAoEoWzIDTwMTRExERIj/XYmKAQAnBGkxACcFaCcGvEiL/xYnB0xQvEiJigIAIihlRIv/XAAoTGciJwRlRIv/XAAnBExnMQBJIicFY0SL/1wAJwVMZicGIov/u4v+FicHTFAii/+7iSIoZURXABCJIihlRFcgEEkiW0wlW4mKAAEiKGVESVcAEExXEBBLASJbTwIlWwhLASJbTwIlWwgIRwKBZAxBABUiKGVEVyAQSSJbTCVbiwBPAggIjAGLAYwAiYoBAYv/IllJFESL/1cCAEkVJApPAksBEkQWVwYCTFCL/xJEMRsjCDEbgQIITBZMFlBJi/9MUEkiWSMIFlcGAlwASSJZSSMSREsBiP4sgQcSRIv/SwITREsBVwIASwJXAhCAAgABTFBLAxJEJwhOAicITFBJIllPAggWVwYCXABPAhJEIkyLAYEDDEEAG4sCiwBQSSJZIwgWVwYCXACMAosBIwiMAUL/3YsCSSJZgQMSREmI/cSBFRJESRUkCUsBIk8CUkkiWSMJFlcGAFwATIj9p4EVEkRJiP2fgQ4SRElXAgBLASJZSwJPAlBJIllPAggWVwYCXACI/X+BHBJEJwlLAWeLABUkCkSMAIkiJwllRElRAAJLAVcSAFBLASJZIwlJFlcGAk8CTFwASSJZSUsDEkQjCUxXAgBMJAskWE8CVwIATwIkCyRYEkSJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}