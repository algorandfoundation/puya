{
    "name": "Contract",
    "structs": {
        "DynamicStruct": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "c",
                "type": "byte[]"
            },
            {
                "name": "d",
                "type": "string"
            },
            {
                "name": "e",
                "type": "byte[]"
            }
        ],
        "FixedStruct": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "LargeFixedStruct": [
            {
                "name": "fixed_a",
                "type": "FixedStruct"
            },
            {
                "name": "big_bytes",
                "type": "byte[2048]"
            }
        ],
        "NamedTup": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "NestedStruct": [
            {
                "name": "fixed_a",
                "type": "FixedStruct"
            },
            {
                "name": "fixed_b",
                "type": "FixedStruct"
            },
            {
                "name": "tup",
                "type": "NamedTup"
            }
        ],
        "Payment": [
            {
                "name": "receiver",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "uint64"
            },
            {
                "name": "amt",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "test_imm_fixed_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fixed_initialize",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_payment",
            "args": [
                {
                    "type": "(address,uint64,uint64)",
                    "struct": "Payment",
                    "name": "pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "increment_payment",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "amt"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_storage",
            "args": [
                {
                    "type": "uint64",
                    "name": "box_key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "local_struct",
            "args": [],
            "returns": {
                "type": "(address,uint64,uint64)",
                "struct": "Payment"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_storage",
            "args": [
                {
                    "type": "uint64",
                    "name": "box_key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "struct_arg",
            "args": [
                {
                    "type": "uint64",
                    "name": "box_key"
                },
                {
                    "type": "(uint64,uint64)",
                    "struct": "FixedStruct",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "struct_return",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "FixedStruct"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "tup_return",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "NamedTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculate_sum",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arr",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 5
            },
            "local": {
                "ints": 0,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "nested": {
                    "keyType": "AVMString",
                    "valueType": "NestedStruct",
                    "key": "bmVzdGVk"
                },
                "nested_proxy": {
                    "keyType": "AVMBytes",
                    "valueType": "NestedStruct",
                    "key": "cA==",
                    "desc": "some documentation"
                },
                "dyn": {
                    "keyType": "AVMString",
                    "valueType": "DynamicStruct",
                    "key": "ZHlu"
                },
                "num_payments": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bnVtX3BheW1lbnRz"
                },
                "payments": {
                    "keyType": "AVMString",
                    "valueType": "(address,uint64,uint64)[2]",
                    "key": "cGF5bWVudHM="
                },
                "arr": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,uint64)[]",
                    "key": "YXJy"
                }
            },
            "local": {
                "nested_local": {
                    "keyType": "AVMBytes",
                    "valueType": "NestedStruct",
                    "key": "bA=="
                }
            },
            "box": {
                "box": {
                    "keyType": "AVMString",
                    "valueType": "LargeFixedStruct",
                    "key": "Ym94"
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_map": {
                    "keyType": "uint64",
                    "valueType": "LargeFixedStruct",
                    "prefix": "Ym94X21hcA=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        183
                    ],
                    "errorMessage": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
                },
                {
                    "pc": [
                        937
                    ],
                    "errorMessage": "and the sum shall be 41"
                },
                {
                    "pc": [
                        430,
                        438,
                        547,
                        605,
                        618,
                        631,
                        670
                    ],
                    "errorMessage": "check self.nested exists"
                },
                {
                    "pc": [
                        575
                    ],
                    "errorMessage": "check self.nested_local exists for account"
                },
                {
                    "pc": [
                        559
                    ],
                    "errorMessage": "check self.nested_proxy exists"
                },
                {
                    "pc": [
                        347,
                        370,
                        389
                    ],
                    "errorMessage": "check self.num_payments exists"
                },
                {
                    "pc": [
                        356,
                        397
                    ],
                    "errorMessage": "check self.payments exists"
                },
                {
                    "pc": [
                        866
                    ],
                    "errorMessage": "expected 3 elements"
                },
                {
                    "pc": [
                        765
                    ],
                    "errorMessage": "expected array to have 1 item"
                },
                {
                    "pc": [
                        778
                    ],
                    "errorMessage": "expected arrays to be different"
                },
                {
                    "pc": [
                        729,
                        797,
                        820
                    ],
                    "errorMessage": "expected arrays to be the same"
                },
                {
                    "pc": [
                        719
                    ],
                    "errorMessage": "expected arrays to be the same length"
                },
                {
                    "pc": [
                        452
                    ],
                    "errorMessage": "expected box to not exist"
                },
                {
                    "pc": [
                        704
                    ],
                    "errorMessage": "expected empty array"
                },
                {
                    "pc": [
                        909
                    ],
                    "errorMessage": "expected sum to be 14"
                },
                {
                    "pc": [
                        875,
                        901
                    ],
                    "errorMessage": "expected sum to be 21"
                },
                {
                    "pc": [
                        773
                    ],
                    "errorMessage": "expected sum to be 7"
                },
                {
                    "pc": [
                        314,
                        363,
                        406,
                        417
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        393
                    ],
                    "errorMessage": "invalid payment index"
                },
                {
                    "pc": [
                        750,
                        805,
                        835,
                        917
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        279
                    ],
                    "errorMessage": "this contract does not implement the given ABI method for call NoOp"
                },
                {
                    "pc": [
                        187
                    ],
                    "errorMessage": "this contract does not implement the given ABI method for create NoOp"
                },
                {
                    "pc": [
                        352
                    ],
                    "errorMessage": "too many payments"
                },
                {
                    "pc": [
                        501
                    ],
                    "errorMessage": "use bar"
                },
                {
                    "pc": [
                        502
                    ],
                    "errorMessage": "use baz"
                },
                {
                    "pc": [
                        499
                    ],
                    "errorMessage": "use foo"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAEQCCYJBm5lc3RlZAxudW1fcGF5bWVudHMIcGF5bWVudHMEFR98dQFwAWwDYm94B2JveF9tYXACAAAxGEAAUjEbSRZMFlAxGyMIMRsjCEwWTBZQMRsjCDEbIwhPA08DUE8CFk8CFlBQKExnMRtJFkwWUIAMABYAGAAaAAAAAAAAUIADZHluTGcpImeBYK8qTGcxGBQxGSOQCI0MAAUAAQAAAAAAAAAAAAAAAAAAAAAAAAAAADEbFEOCDARnpaAtBNEnb4EEDSq0wATotdVsBIdZAeUESrtw8QSvBfSPBOjXHIwEAaqjnASDE97nBCyoScEEPY5wfTYaAI4MAAMAAQA+AGMAkAC9AOkBAgFDAVABXQGhACNDI0OKAQEii/8iWSKLAosBDEEAIYv/VwIAiwJJTgIkCyRYSSJbiwAITCVbCIwAIwiMAkL/14mKAQGL/4k2GgEiKWVESYECDEQiKmVETIEwC08CXSpMZyIpZUQjCClMZyNDNhoBFzYaAhciKWVESwINRCIqZURPAoEwC0qBMFhJgShbTwQIFlwoXSpMZyNDNhoBFyIoZUQnBExnIihlRDEAJwVLAmYnBoGQELlEVwAQTBYnB0xQIk8CuyNDMQCB0gkWUIG3BBZQSVcAIEsBgSBbSwKBKFsyA08DE0RMRESI/1UrTFCwI0M2GgEXJwRpMQAnBWgnBrxIFicHTFC8SCNDNhoBFzYaAiIoZURLAVwAKExnIicEZURLAVwAJwRMZzEASSInBWNESwJcACcFTGYnBiJLArtMFicHTFAiTwK7I0MiKGVEVwAQK0xQsCNDIihlRFcgECtMULAjQyIoZURJVwAQTFcQEEsBIltPAiVbCEsBIltPAiVbCAhHAoFkDEEAFSIoZURXIBBJIltMJVtLA08CCAhFAUkWK0xQsCNDNhoBSSJZSRRESwFXAgBJFSQKSwJLARJEFlcGAkxQSwISRDEbIwgxG4ECCEwWTBZQSU4DSwJMUEwjCBZXBgJcAEkiWSMSREmI/hqBBxJETEsBE0RJVwIASwFXAhCAAgABTFBLAhJEJwhOAicITFBJVwIAFSQKFlcGAlwAEkQiTEsBgQMMQQAbRwJLBFBMIlkjCBZXBgJcAEUBSwEjCEUCQv/dRwIiWUmBAxJESwGI/bSBFRJEIwkWVwYASwFMXABJFSQJIkxSTIj9moEVEkRJiP2SgQ4SRElXAgBLAUxQSVcCABUkChZXBgJcAIj9doEcEkSAA2FycksBZ0sDFSQKRCtMULAjQw==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}