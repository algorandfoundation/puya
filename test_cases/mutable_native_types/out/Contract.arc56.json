{
    "name": "Contract",
    "structs": {
        "DynamicStruct": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "c",
                "type": "byte[]"
            },
            {
                "name": "d",
                "type": "string"
            },
            {
                "name": "e",
                "type": "byte[]"
            }
        ],
        "FixedStruct": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "LargeFixedStruct": [
            {
                "name": "fixed_a",
                "type": "FixedStruct"
            },
            {
                "name": "big_bytes",
                "type": "byte[2048]"
            }
        ],
        "NamedTup": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "NestedStruct": [
            {
                "name": "fixed_a",
                "type": "FixedStruct"
            },
            {
                "name": "fixed_b",
                "type": "FixedStruct"
            },
            {
                "name": "tup",
                "type": "NamedTup"
            }
        ],
        "Payment": [
            {
                "name": "receiver",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "uint64"
            },
            {
                "name": "amt",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "test_imm_fixed_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fixed_initialize",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_payment",
            "args": [
                {
                    "type": "(address,uint64,uint64)",
                    "struct": "Payment",
                    "name": "pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "increment_payment",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "amt"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_storage",
            "args": [
                {
                    "type": "uint64",
                    "name": "box_key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "local_struct",
            "args": [],
            "returns": {
                "type": "(address,uint64,uint64)",
                "struct": "Payment"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_storage",
            "args": [
                {
                    "type": "uint64",
                    "name": "box_key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "struct_arg",
            "args": [
                {
                    "type": "uint64",
                    "name": "box_key"
                },
                {
                    "type": "(uint64,uint64)",
                    "struct": "FixedStruct",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "struct_return",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "FixedStruct"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "tup_return",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "NamedTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculate_sum",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arr",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 5
            },
            "local": {
                "ints": 0,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "nested": {
                    "keyType": "AVMString",
                    "valueType": "NestedStruct",
                    "key": "bmVzdGVk"
                },
                "nested_proxy": {
                    "keyType": "AVMBytes",
                    "valueType": "NestedStruct",
                    "key": "cA==",
                    "desc": "some documentation"
                },
                "dyn": {
                    "keyType": "AVMString",
                    "valueType": "DynamicStruct",
                    "key": "ZHlu"
                },
                "num_payments": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bnVtX3BheW1lbnRz"
                },
                "payments": {
                    "keyType": "AVMString",
                    "valueType": "(address,uint64,uint64)[2]",
                    "key": "cGF5bWVudHM="
                },
                "arr": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,uint64)[]",
                    "key": "YXJy"
                }
            },
            "local": {
                "nested_local": {
                    "keyType": "AVMBytes",
                    "valueType": "NestedStruct",
                    "key": "bA=="
                }
            },
            "box": {
                "box": {
                    "keyType": "AVMString",
                    "valueType": "LargeFixedStruct",
                    "key": "Ym94"
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_map": {
                    "keyType": "uint64",
                    "valueType": "LargeFixedStruct",
                    "prefix": "Ym94X21hcA=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        250,
                        269,
                        286,
                        307,
                        323,
                        342,
                        358,
                        374,
                        390,
                        410,
                        425,
                        434
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1087
                    ],
                    "errorMessage": "and the sum shall be 41"
                },
                {
                    "pc": [
                        448
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        253,
                        272,
                        289,
                        310,
                        326,
                        345,
                        361,
                        377,
                        393,
                        413,
                        428,
                        437
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        589,
                        597,
                        697,
                        755,
                        763,
                        780,
                        819
                    ],
                    "errorMessage": "check self.nested exists"
                },
                {
                    "pc": [
                        725
                    ],
                    "errorMessage": "check self.nested_local exists for account"
                },
                {
                    "pc": [
                        709
                    ],
                    "errorMessage": "check self.nested_proxy exists"
                },
                {
                    "pc": [
                        514,
                        537,
                        550
                    ],
                    "errorMessage": "check self.num_payments exists"
                },
                {
                    "pc": [
                        523,
                        558
                    ],
                    "errorMessage": "check self.payments exists"
                },
                {
                    "pc": [
                        1016
                    ],
                    "errorMessage": "expected 3 elements"
                },
                {
                    "pc": [
                        912
                    ],
                    "errorMessage": "expected array to have 1 item"
                },
                {
                    "pc": [
                        926
                    ],
                    "errorMessage": "expected arrays to be different"
                },
                {
                    "pc": [
                        876,
                        945,
                        968
                    ],
                    "errorMessage": "expected arrays to be the same"
                },
                {
                    "pc": [
                        866
                    ],
                    "errorMessage": "expected arrays to be the same length"
                },
                {
                    "pc": [
                        611
                    ],
                    "errorMessage": "expected box to not exist"
                },
                {
                    "pc": [
                        851
                    ],
                    "errorMessage": "expected empty array"
                },
                {
                    "pc": [
                        1059
                    ],
                    "errorMessage": "expected sum to be 14"
                },
                {
                    "pc": [
                        1025,
                        1051
                    ],
                    "errorMessage": "expected sum to be 21"
                },
                {
                    "pc": [
                        920
                    ],
                    "errorMessage": "expected sum to be 7"
                },
                {
                    "pc": [
                        481,
                        567
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        554
                    ],
                    "errorMessage": "invalid payment index"
                },
                {
                    "pc": [
                        897,
                        953,
                        984,
                        1067
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        519
                    ],
                    "errorMessage": "too many payments"
                },
                {
                    "pc": [
                        660
                    ],
                    "errorMessage": "use bar"
                },
                {
                    "pc": [
                        661
                    ],
                    "errorMessage": "use baz"
                },
                {
                    "pc": [
                        658
                    ],
                    "errorMessage": "use foo"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAEQCCYJBm5lc3RlZAxudW1fcGF5bWVudHMIcGF5bWVudHMEFR98dQFwAWwDYm94B2JveF9tYXACAAAxGEAAUjEbSRZMFlAxGyMIMRsjCEwWTBZQMRsjCDEbIwhPA08DUE8CFk8CFlBQKExnMRtJFkwWUIAMABYAGAAaAAAAAAAAUIADZHluTGcpImeBYK8qTGcxG0EBHoIMBGeloC0E0SdvgQQNKrTABOi11WwEh1kB5QRKu3DxBK8F9I8E6NccjAQBqqOcBIMT3ucELKhJwQQ9jnB9NhoAjgwAugCxAKIAjgB+AG4AXgBLADsAJgAVAAIiQzEZFEQxGEQ2GgGIAkYrTFCwI0MxGRREMRhEiAHyFitMULAjQzEZFEQxGESIAdNMFkwWUCtMULAjQzEZFEQxGESIAbYrTFCwI0MxGRREMRhENhoBFzYaAogBYiNDMRkURDEYRDYaAReIATkjQzEZFEQxGESIAQYrTFCwI0MxGRREMRhENhoBF4gAxiNDMRkURDEYRDYaARc2GgIXiACLI0MxGRREMRhENhoBiABYI0MxGRREMRhEI0MxGRREMRhEI0MxGUD/ODEYFEQjQ4oBASKL/yJZIosCiwEMQQAhi/9XAgCLAklOAiQLJFhJIluLAAhMJVsIjAAjCIwCQv/XiYoBAYv/iYoBACIpZURJgQIMRCIqZURMgTALi/9dKkxnIillRCMIKUxniYoCACIpZUSL/g1EIiplRIv+gTALSoEwWEmBKFuL/wgWXChdKkxniYoBACIoZUQnBExnIihlRDEAJwVLAmYnBoGQELlEVwAQi/8WJwdMUCJPAruJMQCB0gkWUIG3BBZQSVcAIEsBgSBbSwKBKFsyA08DE0RMRESI/12JigEAJwRpMQAnBWgnBrxIi/8WJwdMULxIiYoCACIoZUSL/1wAKExnIicEZUSL/1wAJwRMZzEASSInBWNEi/9cACcFTGYnBiKL/7uL/hYnB0xQIov/u4kiKGVEVwAQiSIoZURXIBBJIltMJVuJigABIihlRElXABBMVxAQSwEiW08CJVsISwEiW08CJVsICEcCgWQMQQAVIihlRFcgEEkiW0wlW4sATwIICIwBiwGMAImKAQGL/yJZSRREi/9XAgBJFSQKSwJLARJEFlcGAkxQi/8SRDEbIwgxG4ECCEwWTBZQSU4Ci/9MUEwjCBZXBgJcAEkiWSMSREmI/i6BBxJEi/9LARNESVcCAEsBVwIQgAIAAUxQSwISRCcITgInCExQSVcCABUkChZXBgJcABJEIkyLAYEDDEEAHIsCSYsAUEwiWSMIFlcGAlwAjAKLASMIjAFC/9yLAkkiWUmBAxJESwGI/cWBFRJEIwkWVwYASwFMXABJFSQJIkxSTIj9q4EVEkRJiP2jgQ4SRElXAgBLAUxQSVcCABUkChZXBgJcAIj9h4EcEkSAA2FycksBZ4sAFSQKRIwAiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}