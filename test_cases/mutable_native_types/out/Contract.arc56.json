{
    "name": "Contract",
    "structs": {
        "DynamicStruct": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "c",
                "type": "byte[]"
            },
            {
                "name": "d",
                "type": "string"
            },
            {
                "name": "e",
                "type": "byte[]"
            }
        ],
        "FixedStruct": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "LargeFixedStruct": [
            {
                "name": "fixed_a",
                "type": "FixedStruct"
            },
            {
                "name": "big_bytes",
                "type": "byte[2048]"
            }
        ],
        "NamedTup": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "NestedStruct": [
            {
                "name": "fixed_a",
                "type": "FixedStruct"
            },
            {
                "name": "fixed_b",
                "type": "FixedStruct"
            },
            {
                "name": "tup",
                "type": "NamedTup"
            }
        ],
        "Payment": [
            {
                "name": "receiver",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "uint64"
            },
            {
                "name": "amt",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "test_imm_fixed_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fixed_initialize",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_payment",
            "args": [
                {
                    "type": "(address,uint64,uint64)",
                    "struct": "Payment",
                    "name": "pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "increment_payment",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "amt"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_storage",
            "args": [
                {
                    "type": "uint64",
                    "name": "box_key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "local_struct",
            "args": [],
            "returns": {
                "type": "(address,uint64,uint64)",
                "struct": "Payment"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_storage",
            "args": [
                {
                    "type": "uint64",
                    "name": "box_key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "struct_arg",
            "args": [
                {
                    "type": "uint64",
                    "name": "box_key"
                },
                {
                    "type": "(uint64,uint64)",
                    "struct": "FixedStruct",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "struct_return",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "FixedStruct"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "tup_return",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "NamedTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculate_sum",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arr",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_match_struct",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "FixedStruct",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 5
            },
            "local": {
                "ints": 0,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "nested": {
                    "keyType": "AVMString",
                    "valueType": "NestedStruct",
                    "key": "bmVzdGVk"
                },
                "nested_proxy": {
                    "keyType": "AVMBytes",
                    "valueType": "NestedStruct",
                    "key": "cA==",
                    "desc": "some documentation"
                },
                "dyn": {
                    "keyType": "AVMString",
                    "valueType": "DynamicStruct",
                    "key": "ZHlu"
                },
                "num_payments": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bnVtX3BheW1lbnRz"
                },
                "payments": {
                    "keyType": "AVMString",
                    "valueType": "(address,uint64,uint64)[2]",
                    "key": "cGF5bWVudHM="
                },
                "arr": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,uint64)[]",
                    "key": "YXJy"
                }
            },
            "local": {
                "nested_local": {
                    "keyType": "AVMBytes",
                    "valueType": "NestedStruct",
                    "key": "bA=="
                }
            },
            "box": {
                "box": {
                    "keyType": "AVMString",
                    "valueType": "LargeFixedStruct",
                    "key": "Ym94"
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_map": {
                    "keyType": "uint64",
                    "valueType": "LargeFixedStruct",
                    "prefix": "Ym94X21hcA=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        157
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        271
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        965
                    ],
                    "errorMessage": "and the sum shall be 41"
                },
                {
                    "pc": [
                        439,
                        447,
                        571,
                        629,
                        642,
                        655,
                        693
                    ],
                    "errorMessage": "check self.nested exists"
                },
                {
                    "pc": [
                        599
                    ],
                    "errorMessage": "check self.nested_local exists for account"
                },
                {
                    "pc": [
                        583
                    ],
                    "errorMessage": "check self.nested_proxy exists"
                },
                {
                    "pc": [
                        341,
                        364,
                        393
                    ],
                    "errorMessage": "check self.num_payments exists"
                },
                {
                    "pc": [
                        350,
                        401
                    ],
                    "errorMessage": "check self.payments exists"
                },
                {
                    "pc": [
                        894
                    ],
                    "errorMessage": "expected 3 elements"
                },
                {
                    "pc": [
                        794
                    ],
                    "errorMessage": "expected array to have 1 item"
                },
                {
                    "pc": [
                        807
                    ],
                    "errorMessage": "expected arrays to be different"
                },
                {
                    "pc": [
                        758,
                        826,
                        849
                    ],
                    "errorMessage": "expected arrays to be the same"
                },
                {
                    "pc": [
                        748
                    ],
                    "errorMessage": "expected arrays to be the same length"
                },
                {
                    "pc": [
                        461
                    ],
                    "errorMessage": "expected box to not exist"
                },
                {
                    "pc": [
                        733
                    ],
                    "errorMessage": "expected empty array"
                },
                {
                    "pc": [
                        937
                    ],
                    "errorMessage": "expected sum to be 14"
                },
                {
                    "pc": [
                        903,
                        929
                    ],
                    "errorMessage": "expected sum to be 21"
                },
                {
                    "pc": [
                        802
                    ],
                    "errorMessage": "expected sum to be 7"
                },
                {
                    "pc": [
                        302,
                        357,
                        410,
                        421
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        730
                    ],
                    "errorMessage": "invalid number of bytes for (len+(uint64,uint64)[])"
                },
                {
                    "pc": [
                        567,
                        993
                    ],
                    "errorMessage": "invalid number of bytes for (uint64,uint64)"
                },
                {
                    "pc": [
                        337
                    ],
                    "errorMessage": "invalid number of bytes for (uint8[32],uint64,uint64)"
                },
                {
                    "pc": [
                        379,
                        388,
                        434,
                        528,
                        558
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        397
                    ],
                    "errorMessage": "invalid payment index"
                },
                {
                    "pc": [
                        779,
                        834,
                        863,
                        945
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        346
                    ],
                    "errorMessage": "too many payments"
                },
                {
                    "pc": [
                        510
                    ],
                    "errorMessage": "use bar"
                },
                {
                    "pc": [
                        511
                    ],
                    "errorMessage": "use baz"
                },
                {
                    "pc": [
                        508
                    ],
                    "errorMessage": "use foo"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAEQCCYJBm5lc3RlZAQVH3x1DG51bV9wYXltZW50cwhwYXltZW50cwFwAWwDYm94B2JveF9tYXACAAAxGEAAUjEbSRZMFlAxGyMIMRsjCEwWTBZQMRsjCDEbIwhPA08DUE8CFk8CFlBQKExnMRtJFkwWUIAMABYAGAAaAAAAAAAAUIADZHluTGcqImeBYK8rTGcxG0EAbjEZFEQxGESCDQRnpaAtBNEnb4EEDSq0wATotdVsBIdZAeUESrtw8QSvBfSPBOjXHIwEAaqjnASDE97nBCyoScEEPY5wfQRRgsdXNhoAjg0AAwABAEYAcQCoANoBBgEkAW8BfAGJAccC1wAjQyNDMRkUMRgUEEOKAQEii/8iWSKLAosBDEEAIYv/VwIAiwJJTgIkCyRYSSJbiwAITCVbCIwAIwiMAkL/14mKAQGL/4k2GgFJFYEwEkQiKmVESYECDEQiK2VETIEwC08CXStMZyIqZUQjCCpMZyNDNhoBSRUlEkQXNhoCSRUlEkQXIiplREsCDUQiK2VETwKBMAtKgTBYSYEoW08ECBZcKF0rTGcjQzYaAUkVJRJEFyIoZUQnBExnIihlRDEAJwVLAmYnBoGQELlEVwAQTBYnB0xQIk8CuyNDMQCB0gkWUIG3BBZQSVcAIEsBgSBbSwKBKFsyA08DE0RMRESI/0ApTFCwI0M2GgFJFSUSRBcnBGkxACcFaCcGvEgWJwdMULxII0M2GgFJFSUSRBc2GgJJFSQSRCIoZURLAVwAKExnIicEZURLAVwAJwRMZzEASSInBWNESwJcACcFTGYnBiJLArtMFicHTFAiTwK7I0MiKGVEVwAQKUxQsCNDIihlRFcgEClMULAjQyIoZURJVwAQTFcQEEsBIltPAiVbCEsBIltPAiVbCAhJgWQMQQARIihlRFcgEEkiW0wlW04CCAgWKUxQsCNDNhoBSSJZSSQLgQIISwIVEkRJFERLAVcCAEkVJApLAksBEkQWVwYCTFBLAhJEMRsjCDEbgQIITBZMFlBJTgNLAkxQTCMIFlcGAlwASSJZIxJESYj98YEHEkRMSwETRElXAgBLAVcCEIACAAFMUEsCEkQnCE4CJwhMUElXAgAVJAoWVwYCXAASRCJJgQMMQQAbSwFJSwRQTCJZIwgWVwYCXABFAkkjCEUBQv/eSwFJIllJgQMSREsBiP2MgRUSRCMJFlcGAEsBTFwASRUkCSJMUkyI/XKBFRJESYj9aoEOEkRJVwIASwFMUElXAgAVJAoWVwYCXACI/U6BHBJEgANhcnJLAWdLAxUkCkQpTFCwI0M2GgFJFSQSRIAQAAAAAAAAAAEAAAAAAAAAAkyOAQAOIoABACJPAlQpTFCwI0MjQv/v",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}