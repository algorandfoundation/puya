{
    "name": "Contract",
    "structs": {
        "DynamicStruct": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "c",
                "type": "byte[]"
            },
            {
                "name": "d",
                "type": "string"
            },
            {
                "name": "e",
                "type": "byte[]"
            }
        ],
        "FixedStruct": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "LargeFixedStruct": [
            {
                "name": "fixed_a",
                "type": "FixedStruct"
            },
            {
                "name": "big_bytes",
                "type": "byte[2048]"
            }
        ],
        "NamedTup": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "NestedStruct": [
            {
                "name": "fixed_a",
                "type": "FixedStruct"
            },
            {
                "name": "fixed_b",
                "type": "FixedStruct"
            },
            {
                "name": "tup",
                "type": "NamedTup"
            }
        ],
        "Payment": [
            {
                "name": "receiver",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "uint64"
            },
            {
                "name": "amt",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "fixed_initialize",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_payment",
            "args": [
                {
                    "type": "(address,uint64,uint64)",
                    "struct": "Payment",
                    "name": "pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "increment_payment",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "amt"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_storage",
            "args": [
                {
                    "type": "uint64",
                    "name": "box_key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "local_struct",
            "args": [],
            "returns": {
                "type": "(address,uint64,uint64)",
                "struct": "Payment"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_storage",
            "args": [
                {
                    "type": "uint64",
                    "name": "box_key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "struct_arg",
            "args": [
                {
                    "type": "uint64",
                    "name": "box_key"
                },
                {
                    "type": "(uint64,uint64)",
                    "struct": "FixedStruct",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "struct_return",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "FixedStruct"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "tup_return",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "NamedTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculate_sum",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 4
            },
            "local": {
                "ints": 0,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "nested": {
                    "keyType": "AVMString",
                    "valueType": "NestedStruct",
                    "key": "bmVzdGVk"
                },
                "nested_proxy": {
                    "keyType": "AVMBytes",
                    "valueType": "NestedStruct",
                    "key": "cA==",
                    "desc": "some documentation"
                },
                "dyn": {
                    "keyType": "AVMString",
                    "valueType": "DynamicStruct",
                    "key": "ZHlu"
                },
                "num_payments": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bnVtX3BheW1lbnRz"
                },
                "payments": {
                    "keyType": "AVMString",
                    "valueType": "(address,uint64,uint64)[8]",
                    "key": "cGF5bWVudHM="
                }
            },
            "local": {
                "nested_local": {
                    "keyType": "AVMBytes",
                    "valueType": "NestedStruct",
                    "key": "bA=="
                }
            },
            "box": {
                "box": {
                    "keyType": "AVMString",
                    "valueType": "LargeFixedStruct",
                    "key": "Ym94"
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_map": {
                    "keyType": "uint64",
                    "valueType": "LargeFixedStruct",
                    "prefix": "Ym94X21hcA=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        492,
                        527,
                        559,
                        685,
                        693,
                        711,
                        715,
                        749
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        243,
                        260,
                        281,
                        297,
                        316,
                        332,
                        348,
                        364,
                        384,
                        399
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        413
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        246,
                        263,
                        284,
                        300,
                        319,
                        335,
                        351,
                        367,
                        387,
                        402
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        656
                    ],
                    "errorMessage": "check self.box exists"
                },
                {
                    "pc": [
                        539,
                        674
                    ],
                    "errorMessage": "check self.box_map entry exists"
                },
                {
                    "pc": [
                        504,
                        512,
                        616,
                        684,
                        692,
                        709,
                        748
                    ],
                    "errorMessage": "check self.nested exists"
                },
                {
                    "pc": [
                        644
                    ],
                    "errorMessage": "check self.nested_local exists for account"
                },
                {
                    "pc": [
                        628
                    ],
                    "errorMessage": "check self.nested_proxy exists"
                },
                {
                    "pc": [
                        428,
                        449,
                        462
                    ],
                    "errorMessage": "check self.num_payments exists"
                },
                {
                    "pc": [
                        436,
                        470
                    ],
                    "errorMessage": "check self.payments exists"
                },
                {
                    "pc": [
                        526
                    ],
                    "errorMessage": "expected box to not exist"
                },
                {
                    "pc": [
                        477
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        466
                    ],
                    "errorMessage": "invalid payment index"
                },
                {
                    "pc": [
                        432
                    ],
                    "errorMessage": "too many payments"
                },
                {
                    "pc": [
                        579
                    ],
                    "errorMessage": "use bar"
                },
                {
                    "pc": [
                        580
                    ],
                    "errorMessage": "use baz"
                },
                {
                    "pc": [
                        577
                    ],
                    "errorMessage": "use foo"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAEIMCYIBm5lc3RlZAxudW1fcGF5bWVudHMIcGF5bWVudHMEFR98dQFwAWwDYm94B2JveF9tYXAxGEAAXDEbSRZMFlAxGyMIMRsjCEwWTBZQMRsjCDEbIwhPA08DUE8CFk8CFlBQKExnMRtJFkwWUIACABZQgAIAGFCAAgAaUIAGAAAAAAAAUIADZHluTGcpImeBgAOvKkxnMRtBAPSCCgTRJ2+BBA0qtMAE6LXVbASHWQHlBEq7cPEErwX0jwTo1xyMBAGqo5wEgxPe5wQsqEnBNhoAjgoAngCPAHsAawBbAEsAOAAoABMAAiJDMRkURDEYRIgBxRYrTFCwI0MxGRREMRhEiAGmTBZMFlArTFCwI0MxGRREMRhEiAGJK0xQsCNDMRkURDEYRDYaARc2GgKIASsjQzEZFEQxGEQ2GgEXiAECI0MxGRREMRhEiADPK0xQsCNDMRkURDEYRDYaAReIAIsjQzEZFEQxGEQ2GgEXNhoCF4gATSNDMRkURDEYRDYaAYgAHCNDMRkURDEYRCNDMRlA/1QxGBREI0OKAQGL/4mKAQAiKWVESSQMRCIqZURMJQuL/10qTGciKWVEIwgpTGeJigIAIillRIv+DUQiKmVEi/4lC0olWEmBKFuL/wgWXCiL/iQMRF0qTGeJigEAIihlRCcETGciKGVEMQAnBUsCZicGgZAQuURXABCL/xYnB0xQSb5ETwJcAL+JMQCB0gkWUIG3BBZQSVcAIEsBgSBbSwKBKFsyA08DE0RMRESI/1iJigEAJwRpMQAnBWgnBrxIi/8WJwdMULxIiYoCACIoZUSL/1wAKExnIicEZUSL/1wAJwRMZzEASSInBWNEi/9cACcFTGYnBr5Ei/9cACcGTL+L/hYnB0xQSb5Ei/9cAL+JIihlRFcAEIkiKGVEVyAQSSJbTCRbiYoAASIoZURJVwAQTFcQEEsBIltPAiRbCEsBIltPAiRbCAhHAoFkDEEAFSIoZURXIBBJIltMJFuLAE8CCAiMAYsBjACJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}