#pragma version 10
#pragma typetrack false

// test_cases.mutable_native_types.contract.Contract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 16 8
    bytecblock "nested" "num_payments" "payments" 0x151f7c75 0x70 0x6c "box" "box_map" 0x0000
    txn ApplicationID
    bnz main_after_if_else@2
    // mutable_native_types/contract.py:74
    // FixedStruct(a=Txn.num_app_args, b=Txn.num_app_args),
    txn NumAppArgs
    dup
    itob
    swap
    itob
    concat
    // mutable_native_types/contract.py:75
    // FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
    txn NumAppArgs
    intc_1 // 1
    +
    txn NumAppArgs
    intc_1 // 1
    +
    swap
    itob
    swap
    itob
    concat
    // mutable_native_types/contract.py:76
    // NamedTup(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
    txn NumAppArgs
    intc_1 // 1
    +
    txn NumAppArgs
    intc_1 // 1
    +
    // mutable_native_types/contract.py:72-77
    // # storage
    // self.nested = NestedStruct(
    //     FixedStruct(a=Txn.num_app_args, b=Txn.num_app_args),
    //     FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
    //     NamedTup(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
    // )
    uncover 3
    uncover 3
    concat
    uncover 2
    itob
    uncover 2
    itob
    concat
    concat
    // mutable_native_types/contract.py:72-73
    // # storage
    // self.nested = NestedStruct(
    bytec_0 // "nested"
    // mutable_native_types/contract.py:72-77
    // # storage
    // self.nested = NestedStruct(
    //     FixedStruct(a=Txn.num_app_args, b=Txn.num_app_args),
    //     FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
    //     NamedTup(a=Txn.num_app_args + 1, b=Txn.num_app_args + 1),
    // )
    swap
    app_global_put
    // mutable_native_types/contract.py:85
    // b=Txn.num_app_args,
    txn NumAppArgs
    // mutable_native_types/contract.py:84
    // a=Txn.num_app_args,
    dup
    // mutable_native_types/contract.py:83-89
    // self.dyn = DynamicStruct(
    //     a=Txn.num_app_args,
    //     b=Txn.num_app_args,
    //     c=Bytes(),
    //     d=String(),
    //     e=Array[arc4.Byte](),
    // )
    itob
    swap
    itob
    concat
    pushbytes 0x00160018001a000000000000
    concat
    // mutable_native_types/contract.py:83
    // self.dyn = DynamicStruct(
    pushbytes "dyn"
    // mutable_native_types/contract.py:83-89
    // self.dyn = DynamicStruct(
    //     a=Txn.num_app_args,
    //     b=Txn.num_app_args,
    //     c=Bytes(),
    //     d=String(),
    //     e=Array[arc4.Byte](),
    // )
    swap
    app_global_put
    // mutable_native_types/contract.py:91
    // self.num_payments = UInt64(0)
    bytec_1 // "num_payments"
    intc_0 // 0
    app_global_put
    // mutable_native_types/contract.py:92
    // self.payments = zero_bytes(FixedArray[Payment, typing.Literal[2]])
    pushint 96 // 96
    bzero
    bytec_2 // "payments"
    swap
    app_global_put

main_after_if_else@2:
    // mutable_native_types/contract.py:70
    // class Contract(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@16
    pushbytess 0xd1276f81 0x0d2ab4c0 0xe8b5d56c 0x875901e5 0x4abb70f1 0xaf05f48f 0xe8d71c8c 0x01aaa39c 0x8313dee7 0x2ca849c1 0x3d8e707d // method "fixed_initialize()void", method "add_payment((address,uint64,uint64))void", method "increment_payment(uint64,uint64)void", method "create_storage(uint64)void", method "local_struct()(address,uint64,uint64)", method "delete_storage(uint64)void", method "struct_arg(uint64,(uint64,uint64))void", method "struct_return()(uint64,uint64)", method "tup_return()(uint64,uint64)", method "calculate_sum()uint64", method "test_arr((uint64,uint64)[])(uint64,uint64)[]"
    txna ApplicationArgs 0
    match main_fixed_initialize_route@5 main_add_payment_route@6 main_increment_payment_route@7 main_create_storage_route@8 main_local_struct_route@9 main_delete_storage_route@10 main_struct_arg_route@11 main_struct_return_route@12 main_tup_return_route@13 main_calculate_sum_route@14 main_test_arr_route@15

main_after_if_else@18:
    // mutable_native_types/contract.py:70
    // class Contract(arc4.ARC4Contract):
    intc_0 // 0
    return

main_test_arr_route@15:
    // mutable_native_types/contract.py:190
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // mutable_native_types/contract.py:70
    // class Contract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // mutable_native_types/contract.py:190
    // @arc4.abimethod()
    callsub test_arr
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_calculate_sum_route@14:
    // mutable_native_types/contract.py:179
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub calculate_sum
    itob
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_tup_return_route@13:
    // mutable_native_types/contract.py:175
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub tup_return
    swap
    itob
    swap
    itob
    concat
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_struct_return_route@12:
    // mutable_native_types/contract.py:171
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub struct_return
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_struct_arg_route@11:
    // mutable_native_types/contract.py:161
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // mutable_native_types/contract.py:70
    // class Contract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    // mutable_native_types/contract.py:161
    // @arc4.abimethod()
    callsub struct_arg
    intc_1 // 1
    return

main_delete_storage_route@10:
    // mutable_native_types/contract.py:154
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // mutable_native_types/contract.py:70
    // class Contract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // mutable_native_types/contract.py:154
    // @arc4.abimethod()
    callsub delete_storage
    intc_1 // 1
    return

main_local_struct_route@9:
    // mutable_native_types/contract.py:142
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub local_struct
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_create_storage_route@8:
    // mutable_native_types/contract.py:135
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // mutable_native_types/contract.py:70
    // class Contract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // mutable_native_types/contract.py:135
    // @arc4.abimethod()
    callsub create_storage
    intc_1 // 1
    return

main_increment_payment_route@7:
    // mutable_native_types/contract.py:130
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // mutable_native_types/contract.py:70
    // class Contract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // mutable_native_types/contract.py:130
    // @arc4.abimethod()
    callsub increment_payment
    intc_1 // 1
    return

main_add_payment_route@6:
    // mutable_native_types/contract.py:124
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // mutable_native_types/contract.py:70
    // class Contract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // mutable_native_types/contract.py:124
    // @arc4.abimethod()
    callsub add_payment
    intc_1 // 1
    return

main_fixed_initialize_route@5:
    // mutable_native_types/contract.py:94
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_1 // 1
    return

main_bare_routing@16:
    // mutable_native_types/contract.py:70
    // class Contract(arc4.ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@18
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// test_cases.mutable_native_types.contract.sum_frozen_arr(arr: bytes) -> uint64:
sum_frozen_arr:
    // mutable_native_types/contract.py:253-254
    // @subroutine()
    // def sum_frozen_arr(arr: ImmutableArray[FixedStruct]) -> UInt64:
    proto 1 1
    // mutable_native_types/contract.py:255
    // total = UInt64(0)
    intc_0 // 0
    // mutable_native_types/contract.py:256
    // for element in arr:
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_0 // 0

sum_frozen_arr_for_header@1:
    // mutable_native_types/contract.py:256
    // for element in arr:
    frame_dig 2
    frame_dig 1
    <
    bz sum_frozen_arr_after_for@4
    frame_dig -1
    extract 2 0
    frame_dig 2
    dup
    cover 2
    intc_2 // 16
    *
    intc_2 // 16
    extract3 // on error: index access is out of bounds
    // mutable_native_types/contract.py:257
    // total += element.a
    dup
    intc_0 // 0
    extract_uint64
    frame_dig 0
    +
    // mutable_native_types/contract.py:258
    // total += element.b
    swap
    intc_3 // 8
    extract_uint64
    +
    frame_bury 0
    intc_1 // 1
    +
    frame_bury 2
    b sum_frozen_arr_for_header@1

sum_frozen_arr_after_for@4:
    // mutable_native_types/contract.py:259
    // return total
    retsub


// test_cases.mutable_native_types.contract.do_something(pay: bytes) -> bytes:
do_something:
    // mutable_native_types/contract.py:267-268
    // @subroutine(inline=False)
    // def do_something(pay: Payment) -> None:
    proto 1 1
    frame_dig -1
    retsub


// test_cases.mutable_native_types.contract.Contract.add_payment(pay: bytes) -> void:
add_payment:
    // mutable_native_types/contract.py:124-125
    // @arc4.abimethod()
    // def add_payment(self, pay: Payment) -> None:
    proto 1 0
    // mutable_native_types/contract.py:126
    // assert self.num_payments < self.payments.length, "too many payments"
    intc_0 // 0
    bytec_1 // "num_payments"
    app_global_get_ex
    assert // check self.num_payments exists
    dup
    pushint 2 // 2
    <
    assert // too many payments
    // mutable_native_types/contract.py:127
    // self.payments[self.num_payments] = pay.copy()
    intc_0 // 0
    bytec_2 // "payments"
    app_global_get_ex
    assert // check self.payments exists
    swap
    pushint 48 // 48
    *
    frame_dig -1
    replace3
    bytec_2 // "payments"
    swap
    app_global_put
    // mutable_native_types/contract.py:128
    // self.num_payments += 1
    intc_0 // 0
    bytec_1 // "num_payments"
    app_global_get_ex
    assert // check self.num_payments exists
    intc_1 // 1
    +
    bytec_1 // "num_payments"
    swap
    app_global_put
    retsub


// test_cases.mutable_native_types.contract.Contract.increment_payment(index: uint64, amt: uint64) -> void:
increment_payment:
    // mutable_native_types/contract.py:130-131
    // @arc4.abimethod()
    // def increment_payment(self, index: UInt64, amt: UInt64) -> None:
    proto 2 0
    // mutable_native_types/contract.py:132
    // assert index < self.num_payments, "invalid payment index"
    intc_0 // 0
    bytec_1 // "num_payments"
    app_global_get_ex
    assert // check self.num_payments exists
    frame_dig -2
    >
    assert // invalid payment index
    // mutable_native_types/contract.py:133
    // self.payments[index].amt += amt
    intc_0 // 0
    bytec_2 // "payments"
    app_global_get_ex
    assert // check self.payments exists
    frame_dig -2
    pushint 48 // 48
    *
    dup2
    pushint 48 // 48
    extract3 // on error: index access is out of bounds
    dup
    pushint 40 // 40
    extract_uint64
    frame_dig -1
    +
    itob
    replace2 40
    replace3
    bytec_2 // "payments"
    swap
    app_global_put
    retsub


// test_cases.mutable_native_types.contract.Contract.create_storage(box_key: uint64) -> void:
create_storage:
    // mutable_native_types/contract.py:135-136
    // @arc4.abimethod()
    // def create_storage(self, box_key: UInt64) -> None:
    proto 1 0
    // mutable_native_types/contract.py:137
    // self.nested_proxy.value = self.nested.copy()
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    bytec 4 // 0x70
    swap
    app_global_put
    // mutable_native_types/contract.py:138
    // self.nested_local[Txn.sender] = self.nested.copy()
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    txn Sender
    bytec 5 // 0x6c
    dig 2
    app_local_put
    // mutable_native_types/contract.py:139
    // assert self.box.create(), "expected box to not exist"
    bytec 6 // "box"
    pushint 2064 // 2064
    box_create
    assert // expected box to not exist
    // mutable_native_types/contract.py:140
    // self.box_map[box_key].fixed_a = self.nested.fixed_a.copy()
    extract 0 16
    frame_dig -1
    itob
    bytec 7 // "box_map"
    swap
    concat
    intc_0 // 0
    uncover 2
    box_replace
    retsub


// test_cases.mutable_native_types.contract.Contract.local_struct() -> bytes:
local_struct:
    // mutable_native_types/contract.py:144
    // a = Payment(Txn.sender, Asset(1234), UInt64(567))
    txn Sender
    pushint 1234 // 1234
    itob
    concat
    pushint 567 // 567
    itob
    concat
    // mutable_native_types/contract.py:145-147
    // # python equivalent to typescript destructuring e.g.
    // # { foo, bar, baz } = a
    // (foo, bar, baz) = (a.receiver, a.asset, a.amt)
    dup
    extract 0 32
    dig 1
    pushint 32 // 32
    extract_uint64
    dig 2
    pushint 40 // 40
    extract_uint64
    // mutable_native_types/contract.py:148
    // assert foo, "use foo"
    global ZeroAddress
    uncover 3
    !=
    assert // use foo
    // mutable_native_types/contract.py:149
    // assert bar, "use bar"
    swap
    assert // use bar
    // mutable_native_types/contract.py:150
    // assert baz, "use baz"
    assert // use baz
    // mutable_native_types/contract.py:151
    // do_something(a)
    callsub do_something
    // mutable_native_types/contract.py:152
    // return a
    retsub


// test_cases.mutable_native_types.contract.Contract.delete_storage(box_key: uint64) -> void:
delete_storage:
    // mutable_native_types/contract.py:154-155
    // @arc4.abimethod()
    // def delete_storage(self, box_key: UInt64) -> None:
    proto 1 0
    // mutable_native_types/contract.py:156
    // del self.nested_proxy.value
    bytec 4 // 0x70
    app_global_del
    // mutable_native_types/contract.py:157
    // del self.nested_local[Txn.sender]
    txn Sender
    bytec 5 // 0x6c
    app_local_del
    // mutable_native_types/contract.py:158
    // del self.box.value
    bytec 6 // "box"
    box_del
    pop
    // mutable_native_types/contract.py:159
    // del self.box_map[box_key]
    frame_dig -1
    itob
    bytec 7 // "box_map"
    swap
    concat
    box_del
    pop
    retsub


// test_cases.mutable_native_types.contract.Contract.struct_arg(box_key: uint64, a: bytes) -> void:
struct_arg:
    // mutable_native_types/contract.py:161-162
    // @arc4.abimethod()
    // def struct_arg(self, box_key: UInt64, a: FixedStruct) -> None:
    proto 2 0
    // mutable_native_types/contract.py:163
    // self.nested.fixed_a = a
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    frame_dig -1
    replace2 0
    bytec_0 // "nested"
    swap
    app_global_put
    // mutable_native_types/contract.py:164
    // self.nested_proxy.value.fixed_a = a
    intc_0 // 0
    bytec 4 // 0x70
    app_global_get_ex
    assert // check self.nested_proxy exists
    frame_dig -1
    replace2 0
    bytec 4 // 0x70
    swap
    app_global_put
    // mutable_native_types/contract.py:165
    // self.nested_local[Txn.sender].fixed_a = a
    txn Sender
    dup
    intc_0 // 0
    bytec 5 // 0x6c
    app_local_get_ex
    assert // check self.nested_local exists for account
    frame_dig -1
    replace2 0
    bytec 5 // 0x6c
    swap
    app_local_put
    // mutable_native_types/contract.py:166
    // self.box.value.fixed_a = a
    bytec 6 // "box"
    intc_0 // 0
    frame_dig -1
    box_replace
    // mutable_native_types/contract.py:167
    // self.box_map[box_key].fixed_a = a
    frame_dig -2
    itob
    bytec 7 // "box_map"
    swap
    concat
    intc_0 // 0
    frame_dig -1
    box_replace
    retsub


// test_cases.mutable_native_types.contract.Contract.struct_return() -> bytes:
struct_return:
    // mutable_native_types/contract.py:173
    // return self.nested.fixed_a
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    extract 0 16
    retsub


// test_cases.mutable_native_types.contract.Contract.tup_return() -> uint64, uint64:
tup_return:
    // mutable_native_types/contract.py:177
    // return self.nested.tup
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    extract 32 16
    dup
    intc_0 // 0
    extract_uint64
    swap
    intc_3 // 8
    extract_uint64
    retsub


// test_cases.mutable_native_types.contract.Contract.calculate_sum() -> uint64:
calculate_sum:
    // mutable_native_types/contract.py:179-180
    // @arc4.abimethod()
    // def calculate_sum(self) -> UInt64:
    proto 0 1
    // mutable_native_types/contract.py:181
    // fixed_a = self.nested.fixed_a
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    dup
    extract 0 16
    // mutable_native_types/contract.py:182
    // fixed_b = self.nested.fixed_b
    swap
    extract 16 16
    // mutable_native_types/contract.py:264
    // return val.a + val.b
    dig 1
    intc_0 // 0
    extract_uint64
    uncover 2
    intc_3 // 8
    extract_uint64
    +
    dig 1
    intc_0 // 0
    extract_uint64
    uncover 2
    intc_3 // 8
    extract_uint64
    +
    // mutable_native_types/contract.py:183
    // result = add(fixed_a) + add(fixed_b)
    +
    dupn 2
    // mutable_native_types/contract.py:184
    // if result < 100:
    pushint 100 // 100
    <
    bz calculate_sum_after_if_else@2
    // mutable_native_types/contract.py:185
    // c, d = self.nested.tup
    intc_0 // 0
    bytec_0 // "nested"
    app_global_get_ex
    assert // check self.nested exists
    extract 32 16
    dup
    intc_0 // 0
    extract_uint64
    swap
    intc_3 // 8
    extract_uint64
    // mutable_native_types/contract.py:186
    // result += c
    frame_dig 0
    uncover 2
    +
    // mutable_native_types/contract.py:187
    // result += d
    +
    frame_bury 1

calculate_sum_after_if_else@2:
    frame_dig 1
    // mutable_native_types/contract.py:188
    // return result
    frame_bury 0
    retsub


// test_cases.mutable_native_types.contract.Contract.test_arr(arr: bytes) -> bytes:
test_arr:
    // mutable_native_types/contract.py:190-191
    // @arc4.abimethod()
    // def test_arr(self, arr: Array[FixedStruct]) -> Array[FixedStruct]:
    proto 1 1
    // mutable_native_types/contract.py:192
    // assert arr.length == 0, "expected empty array"
    frame_dig -1
    intc_0 // 0
    extract_uint16
    dup
    !
    assert // expected empty array
    // mutable_native_types/contract.py:201
    // arr4.extend(arr)
    frame_dig -1
    extract 2 0
    // mutable_native_types/contract.py:202
    // assert arr.length == arr4.length, "expected arrays to be the same length"
    dup
    len
    intc_2 // 16
    /
    dig 2
    dig 1
    ==
    assert // expected arrays to be the same length
    // mutable_native_types/contract.py:204
    // arr5 = Array(arr4)
    itob
    extract 6 2
    swap
    concat
    // mutable_native_types/contract.py:205
    // assert arr == arr5, "expected arrays to be the same"
    frame_dig -1
    ==
    assert // expected arrays to be the same
    // mutable_native_types/contract.py:211
    // fixed_struct = FixedStruct(a=Txn.num_app_args + 1, b=Txn.num_app_args + 2)
    txn NumAppArgs
    intc_1 // 1
    +
    txn NumAppArgs
    pushint 2 // 2
    +
    swap
    itob
    swap
    itob
    concat
    dup
    cover 2
    // mutable_native_types/contract.py:212
    // arr2.append(fixed_struct)
    frame_dig -1
    swap
    concat // on error: max array length exceeded
    swap
    intc_1 // 1
    +
    itob
    extract 6 2
    replace2 0
    // mutable_native_types/contract.py:213
    // assert arr2.length == 1, "expected array to have 1 item"
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    assert // expected array to have 1 item
    // mutable_native_types/contract.py:214
    // assert sum_frozen_arr(arr2.freeze()) == 7, "expected sum to be 7"
    dup
    callsub sum_frozen_arr
    pushint 7 // 7
    ==
    assert // expected sum to be 7
    // mutable_native_types/contract.py:215
    // assert arr != arr2, "expected arrays to be different"
    frame_dig -1
    dig 1
    !=
    assert // expected arrays to be different
    // mutable_native_types/contract.py:217
    // arr7 = Array[FixedStruct]((arr2[0],))
    dup
    extract 2 0
    dig 1
    extract 2 16
    pushbytes 0x0001
    swap
    concat
    // mutable_native_types/contract.py:218
    // assert arr2 == arr7, "expected arrays to be the same"
    dig 2
    ==
    assert // expected arrays to be the same
    // mutable_native_types/contract.py:220
    // arr8 = Array[FixedStruct]()
    bytec 8 // 0x0000
    cover 2
    bytec 8 // 0x0000
    // mutable_native_types/contract.py:221
    // arr8 += arr2
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_2 // 16
    /
    itob
    extract 6 2
    replace2 0
    // mutable_native_types/contract.py:222
    // assert arr2 == arr8, "expected arrays to be the same"
    ==
    assert // expected arrays to be the same
    // mutable_native_types/contract.py:229
    // for _i in urange(3):
    intc_0 // 0
    swap

test_arr_for_header@3:
    // mutable_native_types/contract.py:229
    // for _i in urange(3):
    frame_dig 1
    pushint 3 // 3
    <
    bz test_arr_after_for@6
    // mutable_native_types/contract.py:230
    // arr2.append(fixed_struct)
    frame_dig 2
    dup
    frame_dig 0
    concat // on error: max array length exceeded
    swap
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    replace2 0
    frame_bury 2
    // mutable_native_types/contract.py:229
    // for _i in urange(3):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_arr_for_header@3

test_arr_after_for@6:
    // mutable_native_types/contract.py:232
    // assert arr2.length == 3, "expected 3 elements"
    frame_dig 2
    dup
    intc_0 // 0
    extract_uint16
    dup
    pushint 3 // 3
    ==
    assert // expected 3 elements
    // mutable_native_types/contract.py:235
    // assert sum_frozen_arr(frozen1) == 21, "expected sum to be 21"
    dig 1
    callsub sum_frozen_arr
    pushint 21 // 21
    ==
    assert // expected sum to be 21
    intc_1 // 1
    -
    itob
    extract 6 0
    dig 1
    swap
    replace2 0
    dup
    len
    // mutable_native_types/contract.py:237
    // arr2.pop()
    intc_2 // 16
    -
    intc_0 // 0
    swap
    substring3
    // mutable_native_types/contract.py:239
    // assert sum_frozen_arr(frozen1) == 21, "expected sum to be 21"
    swap
    callsub sum_frozen_arr
    pushint 21 // 21
    ==
    assert // expected sum to be 21
    // mutable_native_types/contract.py:240
    // assert sum_frozen_arr(frozen2) == 14, "expected sum to be 14"
    dup
    callsub sum_frozen_arr
    pushint 14 // 14
    ==
    assert // expected sum to be 14
    // mutable_native_types/contract.py:242
    // self.arr = arr2.copy()
    pushbytes "arr"
    dig 1
    app_global_put
    // mutable_native_types/contract.py:247
    // arr11.append(fixed_struct)
    frame_dig 0
    // mutable_native_types/contract.py:248
    // assert arr11
    len
    intc_2 // 16
    /
    assert
    // mutable_native_types/contract.py:250
    // return self.arr
    frame_bury 0
    retsub
