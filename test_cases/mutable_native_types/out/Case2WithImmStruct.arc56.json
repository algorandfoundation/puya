{
    "name": "Case2WithImmStruct",
    "structs": {
        "NamedTup": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "TupBag": [
            {
                "name": "count",
                "type": "uint64"
            },
            {
                "name": "items",
                "type": "(uint64,uint64)[8]"
            },
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "app",
                "type": "uint64"
            },
            {
                "name": "too_big",
                "type": "byte[4096]"
            },
            {
                "name": "bootstrapped",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "create_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "num_tups",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_tup",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "NamedTup",
                    "name": "tup"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_tup",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "NamedTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_many_tups",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "tups"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_fixed_tups",
            "args": [
                {
                    "type": "(uint64,uint64)[3]",
                    "name": "tups"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_a",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_b",
            "args": [
                {
                    "type": "uint64",
                    "name": "b"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_3_tups",
            "args": [
                {
                    "type": "uint64",
                    "name": "start"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[3]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_all_tups",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "tup_bag": {
                    "keyType": "AVMString",
                    "valueType": "TupBag",
                    "key": "dHVwX2JhZw=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        60
                    ],
                    "errorMessage": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
                },
                {
                    "pc": [
                        672
                    ],
                    "errorMessage": "app not bootstrapped"
                },
                {
                    "pc": [
                        155
                    ],
                    "errorMessage": "box already exists"
                },
                {
                    "pc": [
                        229,
                        263,
                        319,
                        351,
                        400,
                        468,
                        528,
                        539,
                        551,
                        593
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        219,
                        413,
                        480
                    ],
                    "errorMessage": "index out of bounds"
                },
                {
                    "pc": [
                        599
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        514
                    ],
                    "errorMessage": "not enough items"
                },
                {
                    "pc": [
                        683
                    ],
                    "errorMessage": "sender not authorized"
                },
                {
                    "pc": [
                        149
                    ],
                    "errorMessage": "this contract does not implement the given ABI method for call NoOp"
                },
                {
                    "pc": [
                        64
                    ],
                    "errorMessage": "this contract does not implement the given ABI method for create NoOp"
                },
                {
                    "pc": [
                        694
                    ],
                    "errorMessage": "this error should be impossible"
                },
                {
                    "pc": [
                        641
                    ],
                    "errorMessage": "too many tups"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAGAQgAEIABsCEmAgd0dXBfYmFnBBUffHUxGBQxGSKQCI0MAAUAAQAAAAAAAAAAAAAAAAAAAAAAAAAAADEbFEOCCwSmfqKrBAKIQOoE91zunQSIC1U0BFMDC0EEfTnfUQR6HntDBDRHhH8EK6ZIUgSryb54BHNFehk2GgCOCwABACgAMgA6AFcAjwC3ANcBGwFeAZ4AKIGxIblEKIGIATEAuzIIFiiBqAFPArsoIQUiuiQiVCghBU8CuyJDKCQjuilMULAiQzYaAYgBpiJDNhoBFygkI7oXSwENRCgjIQS6TCULJVgpTFCwIkMkKCQjuhckSUsCDEEAISgjIQS6SwFJTgIlCyVYSSRbSwUITCNbCEUEIghFAUL/2EsCFilMULAiQzYaAUkkWSRJSwIMQQAYSwJXAgBLAUlOAiULJViIATAiCEUBQv/hIkM2GgEkSYEDDEEAE0cCJQtLA0wlWIgBECIIRQFC/+YiQzYaAReIASYoJCO6FyRJSwIMQQAuKCMhBLpLAUlOAiULTEsBJVhXCAhLBRZMUEsCIwxEI08CCChMTwK7IghFAUL/yyJDNhoBF4gA4igkI7oXJElLAgxBAC0oIyEEuksBSU4CJQtMSwElWFcACEsFFlBLAiMMRCNPAggoTE8CuyIIRQFC/8wiQzYaARcoJCO6F0sBgQMID0QoIyEEuksBJQtLAUwlWEsCIgglC0sCTCVYTwOBAgglC08DTCVYTgJQTFApTFCwIkOAAgAAKCQjuhckSUsCDEEAKCgjIQS6SwFJTgIlCyVYSwRJTwJQTCRZIggWVwYCXABFBCIIRQFC/9EpSwNQsCJDigEAiAAgKCQjuhdJIwxEJQsjCChMi/+7KCQjuhciCBYoJE8Cu4koIQUiuiRTRCiDAogBILoxABJEKIGoASO6FzIIEkSJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}