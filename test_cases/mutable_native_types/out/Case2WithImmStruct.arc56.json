{
    "name": "Case2WithImmStruct",
    "structs": {
        "NamedTup": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "TupBag": [
            {
                "name": "count",
                "type": "uint64"
            },
            {
                "name": "items",
                "type": "(uint64,uint64)[8]"
            },
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "app",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "create_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "num_tups",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_tup",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "NamedTup",
                    "name": "tup"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_tup",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "NamedTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_many_tups",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "tups"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_fixed_tups",
            "args": [
                {
                    "type": "(uint64,uint64)[3]",
                    "name": "tups"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_a",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_b",
            "args": [
                {
                    "type": "uint64",
                    "name": "b"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_3_tups",
            "args": [
                {
                    "type": "uint64",
                    "name": "start"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[3]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_all_tups",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "tup_bag": {
                    "keyType": "AVMString",
                    "valueType": "TupBag",
                    "key": "dHVwX2JhZw=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        349,
                        385,
                        393,
                        416,
                        427,
                        477,
                        510,
                        546,
                        558,
                        571,
                        613,
                        625,
                        637,
                        671,
                        682,
                        693,
                        705,
                        723,
                        754,
                        780
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        116,
                        132,
                        152,
                        168,
                        184,
                        199,
                        214,
                        231,
                        251,
                        266,
                        283
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        308
                    ],
                    "errorMessage": "box already exists"
                },
                {
                    "pc": [
                        300
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        119,
                        135,
                        155,
                        171,
                        187,
                        202,
                        217,
                        234,
                        254,
                        269,
                        286
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        311,
                        327,
                        339,
                        377,
                        401,
                        415,
                        530,
                        544,
                        597,
                        611,
                        660,
                        721,
                        778
                    ],
                    "errorMessage": "check self.tup_bag exists"
                },
                {
                    "pc": [
                        384
                    ],
                    "errorMessage": "index out of bounds"
                },
                {
                    "pc": [
                        670
                    ],
                    "errorMessage": "not enough items"
                },
                {
                    "pc": [
                        786
                    ],
                    "errorMessage": "sender not authorized"
                },
                {
                    "pc": [
                        794
                    ],
                    "errorMessage": "this error should be impossible"
                },
                {
                    "pc": [
                        346
                    ],
                    "errorMessage": "too many tups"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEEAABCCYCB3R1cF9iYWcEFR98dTEbQQEJggsEpn6iqwQCiEDqBPdc7p0EiAtVNARTAwtBBH0531EEeh57QwQ0R4R/BCumSFIEq8m+eARzRXoZNhoAjgsAqQCYAIkAdQBkAFUARgA2ACYAEgACI0MxGRREMRhEiAJNKUxQsCRDMRkURDEYRDYaAReIAgApTFCwJEMxGRREMRhENhoBF4gBqiRDMRkURDEYRDYaAReIAVckQzEZFEQxGEQ2GgGIASckQzEZFEQxGEQ2GgGIAO8kQzEZFEQxGESIAK4WKUxQsCRDMRkURDEYRDYaAReIAIIpTFCwJEMxGRREMRhENhoBiABGJEMxGRREMRhEiAA0FilMULAkQzEZFEQxGESIAA0kQzEZQP9GMRgURCRDKIGwAblEKL5EMQBciDIIFlyoKEy/iSi+RCNbiYoBAIgBtyi+REkjW0klDERLAVcIgEwiC4v/XVwISSNbJAgWXAAoTL+JigEBKL5ESSNbi/8NRFcIgIv/IgsiWImKAAEjKL5EI1sjiwKLAQxBACIovkRXCICLAklOAiILIlhJI1uLAAhMJVsIjAAkCIwCQv/WiYoBAIv/I1kjiwGLAAxBABiL/1cCAIsBSU4CIgsiWIj/aiQIjAFC/+CJigEAI4sAgQMMQQAUiwBJIguL/0wiWIj/SSQIjABC/+SJigEAiAD4KL5EI1sjiwGLAAxBAC4ovkRJVwiAiwFJTgIiC0oiWCVbi/8WTBZQSwMlDERdTwJMXAgoTL8kCIwBQv/KiYoBAIgAtSi+RCNbI4sBiwAMQQAtKL5ESVcIgIsBSU4CIgtKIlgjWxaL/xZQSwMlDERdTwJMXAgoTL8kCIwBQv/LiYoBASi+REkjW4v/gQMID0RXCICL/yILSwFMIliL/yQIIgtLAkwiWIv/gQIIIgtPA0wiWE4CUExQiYoAAYACAAAovkRJVwiATCNbI4sDiwIMQQAliwBXAgCLA0lOAiILiwFMIlhQSRUiChZXBgJMUIwAJAiMA0L/04kovkRJV4ggMQASRIGoAVsyCBJEiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}