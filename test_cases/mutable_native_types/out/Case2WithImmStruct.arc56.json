{
    "name": "Case2WithImmStruct",
    "structs": {
        "NamedTup": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "TupBag": [
            {
                "name": "count",
                "type": "uint64"
            },
            {
                "name": "items",
                "type": "(uint64,uint64)[8]"
            },
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "app",
                "type": "uint64"
            },
            {
                "name": "too_big",
                "type": "byte[4096]"
            },
            {
                "name": "bootstrapped",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "create_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "num_tups",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_tup",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "NamedTup",
                    "name": "tup"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_tup",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "NamedTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_many_tups",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "tups"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_fixed_tups",
            "args": [
                {
                    "type": "(uint64,uint64)[3]",
                    "name": "tups"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_a",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_b",
            "args": [
                {
                    "type": "uint64",
                    "name": "b"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_3_tups",
            "args": [
                {
                    "type": "uint64",
                    "name": "start"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[3]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_all_tups",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "tup_bag": {
                    "keyType": "AVMString",
                    "valueType": "TupBag",
                    "key": "dHVwX2JhZw=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        34
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        130
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        653
                    ],
                    "errorMessage": "app not bootstrapped"
                },
                {
                    "pc": [
                        136
                    ],
                    "errorMessage": "box already exists"
                },
                {
                    "pc": [
                        210,
                        244,
                        300,
                        332,
                        381,
                        449,
                        509,
                        520,
                        532,
                        574
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        200,
                        394,
                        461
                    ],
                    "errorMessage": "index out of bounds"
                },
                {
                    "pc": [
                        580
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        495
                    ],
                    "errorMessage": "not enough items"
                },
                {
                    "pc": [
                        664
                    ],
                    "errorMessage": "sender not authorized"
                },
                {
                    "pc": [
                        675
                    ],
                    "errorMessage": "this error should be impossible"
                },
                {
                    "pc": [
                        622
                    ],
                    "errorMessage": "too many tups"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAxIDggMCAxNiAxMjggNDI3MgogICAgYnl0ZWNibG9jayAidHVwX2JhZyIgMHgxNTFmN2M3NQogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjM0CiAgICAvLyBjbGFzcyBDYXNlMldpdGhJbW1TdHJ1Y3QoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fX19hbGdvcHlfZGVmYXVsdF9jcmVhdGVAMjAKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gbXVzdCBiZSBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0CiAgICBwdXNoYnl0ZXNzIDB4YTY3ZWEyYWIgMHgwMjg4NDBlYSAweGY3NWNlZTlkIDB4ODgwYjU1MzQgMHg1MzAzMGI0MSAweDdkMzlkZjUxIDB4N2ExZTdiNDMgMHgzNDQ3ODQ3ZiAweDJiYTY0ODUyIDB4YWJjOWJlNzggMHg3MzQ1N2ExOSAvLyBtZXRob2QgImNyZWF0ZV9ib3goKXZvaWQiLCBtZXRob2QgIm51bV90dXBzKCl1aW50NjQiLCBtZXRob2QgImFkZF90dXAoKHVpbnQ2NCx1aW50NjQpKXZvaWQiLCBtZXRob2QgImdldF90dXAodWludDY0KSh1aW50NjQsdWludDY0KSIsIG1ldGhvZCAic3VtKCl1aW50NjQiLCBtZXRob2QgImFkZF9tYW55X3R1cHMoKHVpbnQ2NCx1aW50NjQpW10pdm9pZCIsIG1ldGhvZCAiYWRkX2ZpeGVkX3R1cHMoKHVpbnQ2NCx1aW50NjQpWzNdKXZvaWQiLCBtZXRob2QgInNldF9hKHVpbnQ2NCl2b2lkIiwgbWV0aG9kICJzZXRfYih1aW50NjQpdm9pZCIsIG1ldGhvZCAiZ2V0XzNfdHVwcyh1aW50NjQpKHVpbnQ2NCx1aW50NjQpWzNdIiwgbWV0aG9kICJnZXRfYWxsX3R1cHMoKSh1aW50NjQsdWludDY0KVtdIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggY3JlYXRlX2JveCBudW1fdHVwcyBhZGRfdHVwIGdldF90dXAgc3VtIGFkZF9tYW55X3R1cHMgYWRkX2ZpeGVkX3R1cHMgc2V0X2Egc2V0X2IgZ2V0XzNfdHVwcyBnZXRfYWxsX3R1cHMKICAgIGVycgoKbWFpbl9fX2FsZ29weV9kZWZhdWx0X2NyZWF0ZUAyMDoKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICAmJgogICAgcmV0dXJuIC8vIG9uIGVycm9yOiBPbkNvbXBsZXRpb24gbXVzdCBiZSBOb09wICYmIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwoKCi8vIHRlc3RfY2FzZXMubXV0YWJsZV9uYXRpdmVfdHlwZXMuY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LkNhc2UyV2l0aEltbVN0cnVjdC5jcmVhdGVfYm94W3JvdXRpbmddKCkgLT4gdm9pZDoKY3JlYXRlX2JveDoKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo0MAogICAgLy8gYXNzZXJ0IHNlbGYudHVwX2JhZy5jcmVhdGUoKSwgImJveCBhbHJlYWR5IGV4aXN0cyIKICAgIGJ5dGVjXzAgLy8gInR1cF9iYWciCiAgICBwdXNoaW50IDQyNzMgLy8gNDI3MwogICAgYm94X2NyZWF0ZQogICAgYXNzZXJ0IC8vIGJveCBhbHJlYWR5IGV4aXN0cwogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjQxCiAgICAvLyBzZWxmLnR1cF9iYWcudmFsdWUub3duZXIgPSBUeG4uc2VuZGVyCiAgICBieXRlY18wIC8vICJ0dXBfYmFnIgogICAgcHVzaGludCAxMzYgLy8gMTM2CiAgICB0eG4gU2VuZGVyCiAgICBib3hfcmVwbGFjZQogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjQyCiAgICAvLyBzZWxmLnR1cF9iYWcudmFsdWUuYXBwID0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25faWQKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25JRAogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAidHVwX2JhZyIKICAgIHB1c2hpbnQgMTY4IC8vIDE2OAogICAgdW5jb3ZlciAyCiAgICBib3hfcmVwbGFjZQogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjQzCiAgICAvLyBzZWxmLnR1cF9iYWcudmFsdWUuYm9vdHN0cmFwcGVkID0gVHJ1ZQogICAgYnl0ZWNfMCAvLyAidHVwX2JhZyIKICAgIGludGMgNSAvLyA0MjcyCiAgICBpbnRjXzAgLy8gMQogICAgYm94X2V4dHJhY3QKICAgIGludGNfMiAvLyAwCiAgICBpbnRjXzAgLy8gMQogICAgc2V0Yml0CiAgICBieXRlY18wIC8vICJ0dXBfYmFnIgogICAgaW50YyA1IC8vIDQyNzIKICAgIHVuY292ZXIgMgogICAgYm94X3JlcGxhY2UKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTozOAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0X2Nhc2VzLm11dGFibGVfbmF0aXZlX3R5cGVzLmNhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5DYXNlMldpdGhJbW1TdHJ1Y3QubnVtX3R1cHNbcm91dGluZ10oKSAtPiB2b2lkOgpudW1fdHVwczoKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo0NwogICAgLy8gcmV0dXJuIHNlbGYudHVwX2JhZy52YWx1ZS5jb3VudAogICAgYnl0ZWNfMCAvLyAidHVwX2JhZyIKICAgIGludGNfMiAvLyAwCiAgICBpbnRjXzEgLy8gOAogICAgYm94X2V4dHJhY3QKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo0NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0X2Nhc2VzLm11dGFibGVfbmF0aXZlX3R5cGVzLmNhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5DYXNlMldpdGhJbW1TdHJ1Y3QuYWRkX3R1cFtyb3V0aW5nXSgpIC0+IHZvaWQ6CmFkZF90dXA6CiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6NDkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBjYWxsc3ViIHRlc3RfY2FzZXMubXV0YWJsZV9uYXRpdmVfdHlwZXMuY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LkNhc2UyV2l0aEltbVN0cnVjdC5hZGRfdHVwCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gdGVzdF9jYXNlcy5tdXRhYmxlX25hdGl2ZV90eXBlcy5jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QuQ2FzZTJXaXRoSW1tU3RydWN0LmdldF90dXBbcm91dGluZ10oKSAtPiB2b2lkOgpnZXRfdHVwOgogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjU2CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjU4CiAgICAvLyBhc3NlcnQgaW5kZXggPCBzZWxmLnR1cF9iYWcudmFsdWUuY291bnQsICJpbmRleCBvdXQgb2YgYm91bmRzIgogICAgYnl0ZWNfMCAvLyAidHVwX2JhZyIKICAgIGludGNfMiAvLyAwCiAgICBpbnRjXzEgLy8gOAogICAgYm94X2V4dHJhY3QKICAgIGJ0b2kKICAgIGRpZyAxCiAgICA+CiAgICBhc3NlcnQgLy8gaW5kZXggb3V0IG9mIGJvdW5kcwogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjU5CiAgICAvLyByZXR1cm4gc2VsZi50dXBfYmFnLnZhbHVlLml0ZW1zW2luZGV4XQogICAgYnl0ZWNfMCAvLyAidHVwX2JhZyIKICAgIGludGNfMSAvLyA4CiAgICBpbnRjIDQgLy8gMTI4CiAgICBib3hfZXh0cmFjdAogICAgc3dhcAogICAgaW50Y18zIC8vIDE2CiAgICAqCiAgICBpbnRjXzMgLy8gMTYKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjU2CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RfY2FzZXMubXV0YWJsZV9uYXRpdmVfdHlwZXMuY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LkNhc2UyV2l0aEltbVN0cnVjdC5zdW1bcm91dGluZ10oKSAtPiB2b2lkOgpzdW06CiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6NjMKICAgIC8vIHRvdGFsID0gVUludDY0KCkKICAgIGludGNfMiAvLyAwCiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6NjQKICAgIC8vIGZvciBpIGluIHVyYW5nZShzZWxmLnR1cF9iYWcudmFsdWUuY291bnQpOgogICAgYnl0ZWNfMCAvLyAidHVwX2JhZyIKICAgIGludGNfMiAvLyAwCiAgICBpbnRjXzEgLy8gOAogICAgYm94X2V4dHJhY3QKICAgIGJ0b2kKICAgIGludGNfMiAvLyAwCgpzdW1fZm9yX2hlYWRlckAyOgogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjY0CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2Uoc2VsZi50dXBfYmFnLnZhbHVlLmNvdW50KToKICAgIGR1cAogICAgZGlnIDIKICAgIDwKICAgIGJ6IHN1bV9hZnRlcl9mb3JANQogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjY1CiAgICAvLyB0dXAgPSBzZWxmLnR1cF9iYWcudmFsdWUuaXRlbXNbaV0KICAgIGJ5dGVjXzAgLy8gInR1cF9iYWciCiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6NjUtNjYKICAgIC8vIHR1cCA9IHNlbGYudHVwX2JhZy52YWx1ZS5pdGVtc1tpXQogICAgLy8gdG90YWwgKz0gdHVwLmEKICAgIGludGNfMSAvLyA4CiAgICBpbnRjIDQgLy8gMTI4CiAgICBib3hfZXh0cmFjdAogICAgZGlnIDEKICAgIGR1cAogICAgY292ZXIgMgogICAgaW50Y18zIC8vIDE2CiAgICAqCiAgICBpbnRjXzMgLy8gMTYKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjY2CiAgICAvLyB0b3RhbCArPSB0dXAuYQogICAgZHVwCiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6NjUtNjYKICAgIC8vIHR1cCA9IHNlbGYudHVwX2JhZy52YWx1ZS5pdGVtc1tpXQogICAgLy8gdG90YWwgKz0gdHVwLmEKICAgIGludGNfMiAvLyAwCiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6NjYKICAgIC8vIHRvdGFsICs9IHR1cC5hCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZGlnIDUKICAgICsKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo2NwogICAgLy8gdG90YWwgKz0gdHVwLmIKICAgIHN3YXAKICAgIGludGNfMSAvLyA4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgKwogICAgYnVyeSA0CiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6NjQKICAgIC8vIGZvciBpIGluIHVyYW5nZShzZWxmLnR1cF9iYWcudmFsdWUuY291bnQpOgogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGJ1cnkgMQogICAgYiBzdW1fZm9yX2hlYWRlckAyCgpzdW1fYWZ0ZXJfZm9yQDU6CiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6NjEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBkaWcgMgogICAgaXRvYgogICAgYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RfY2FzZXMubXV0YWJsZV9uYXRpdmVfdHlwZXMuY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LkNhc2UyV2l0aEltbVN0cnVjdC5hZGRfbWFueV90dXBzW3JvdXRpbmddKCkgLT4gdm9pZDoKYWRkX21hbnlfdHVwczoKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo3MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGR1cAogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjcyCiAgICAvLyBmb3IgdHVwIGluIHR1cHM6CiAgICBpbnRjXzIgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMiAvLyAwCgphZGRfbWFueV90dXBzX2Zvcl9oZWFkZXJAMjoKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo3MgogICAgLy8gZm9yIHR1cCBpbiB0dXBzOgogICAgZHVwCiAgICBkaWcgMgogICAgPAogICAgYnogYWRkX21hbnlfdHVwc19hZnRlcl9mb3JANQogICAgZGlnIDIKICAgIGV4dHJhY3QgMiAwCiAgICBkaWcgMQogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpbnRjXzMgLy8gMTYKICAgICoKICAgIGludGNfMyAvLyAxNgogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6NzMKICAgIC8vIHNlbGYuYWRkX3R1cCh0dXApCiAgICBjYWxsc3ViIHRlc3RfY2FzZXMubXV0YWJsZV9uYXRpdmVfdHlwZXMuY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LkNhc2UyV2l0aEltbVN0cnVjdC5hZGRfdHVwCiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgYnVyeSAxCiAgICBiIGFkZF9tYW55X3R1cHNfZm9yX2hlYWRlckAyCgphZGRfbWFueV90dXBzX2FmdGVyX2ZvckA1OgogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjcwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RfY2FzZXMubXV0YWJsZV9uYXRpdmVfdHlwZXMuY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LkNhc2UyV2l0aEltbVN0cnVjdC5hZGRfZml4ZWRfdHVwc1tyb3V0aW5nXSgpIC0+IHZvaWQ6CmFkZF9maXhlZF90dXBzOgogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5Ojc1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgaW50Y18yIC8vIDAKCmFkZF9maXhlZF90dXBzX2Zvcl9oZWFkZXJAMjoKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo3NwogICAgLy8gZm9yIHR1cCBpbiB0dXBzOgogICAgZHVwCiAgICBwdXNoaW50IDMgLy8gMwogICAgPAogICAgYnogYWRkX2ZpeGVkX3R1cHNfYWZ0ZXJfZm9yQDUKICAgIGR1cG4gMgogICAgaW50Y18zIC8vIDE2CiAgICAqCiAgICBkaWcgMwogICAgc3dhcAogICAgaW50Y18zIC8vIDE2CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo3OAogICAgLy8gc2VsZi5hZGRfdHVwKHR1cCkKICAgIGNhbGxzdWIgdGVzdF9jYXNlcy5tdXRhYmxlX25hdGl2ZV90eXBlcy5jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QuQ2FzZTJXaXRoSW1tU3RydWN0LmFkZF90dXAKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBidXJ5IDEKICAgIGIgYWRkX2ZpeGVkX3R1cHNfZm9yX2hlYWRlckAyCgphZGRfZml4ZWRfdHVwc19hZnRlcl9mb3JANToKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo3NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0X2Nhc2VzLm11dGFibGVfbmF0aXZlX3R5cGVzLmNhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5DYXNlMldpdGhJbW1TdHJ1Y3Quc2V0X2Fbcm91dGluZ10oKSAtPiB2b2lkOgpzZXRfYToKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo4MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo4MgogICAgLy8gc2VsZi5fY2hlY2tfb3duZXIoKQogICAgY2FsbHN1YiBfY2hlY2tfb3duZXIKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo4MwogICAgLy8gZm9yIGkgaW4gdXJhbmdlKHNlbGYudHVwX2JhZy52YWx1ZS5jb3VudCk6CiAgICBieXRlY18wIC8vICJ0dXBfYmFnIgogICAgaW50Y18yIC8vIDAKICAgIGludGNfMSAvLyA4CiAgICBib3hfZXh0cmFjdAogICAgYnRvaQogICAgaW50Y18yIC8vIDAKCnNldF9hX2Zvcl9oZWFkZXJAMjoKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo4MwogICAgLy8gZm9yIGkgaW4gdXJhbmdlKHNlbGYudHVwX2JhZy52YWx1ZS5jb3VudCk6CiAgICBkdXAKICAgIGRpZyAyCiAgICA8CiAgICBieiBzZXRfYV9hZnRlcl9mb3JANQogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5Ojg0CiAgICAvLyB0dXAgPSBzZWxmLnR1cF9iYWcudmFsdWUuaXRlbXNbaV0KICAgIGJ5dGVjXzAgLy8gInR1cF9iYWciCiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6ODQtODUKICAgIC8vIHR1cCA9IHNlbGYudHVwX2JhZy52YWx1ZS5pdGVtc1tpXQogICAgLy8gc2VsZi50dXBfYmFnLnZhbHVlLml0ZW1zW2ldID0gdHVwLl9yZXBsYWNlKGE9YSkKICAgIGludGNfMSAvLyA4CiAgICBpbnRjIDQgLy8gMTI4CiAgICBib3hfZXh0cmFjdAogICAgZGlnIDEKICAgIGR1cAogICAgY292ZXIgMgogICAgaW50Y18zIC8vIDE2CiAgICAqCiAgICBzd2FwCiAgICBkaWcgMQogICAgaW50Y18zIC8vIDE2CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGV4dHJhY3QgOCA4CiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6ODUKICAgIC8vIHNlbGYudHVwX2JhZy52YWx1ZS5pdGVtc1tpXSA9IHR1cC5fcmVwbGFjZShhPWEpCiAgICBkaWcgNQogICAgaXRvYgogICAgc3dhcAogICAgY29uY2F0CiAgICBkaWcgMgogICAgaW50Y18xIC8vIDgKICAgIDwKICAgIGFzc2VydCAvLyBpbmRleCBvdXQgb2YgYm91bmRzCiAgICBpbnRjXzEgLy8gOAogICAgdW5jb3ZlciAyCiAgICArCiAgICBieXRlY18wIC8vICJ0dXBfYmFnIgogICAgc3dhcAogICAgdW5jb3ZlciAyCiAgICBib3hfcmVwbGFjZQogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjgzCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2Uoc2VsZi50dXBfYmFnLnZhbHVlLmNvdW50KToKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBidXJ5IDEKICAgIGIgc2V0X2FfZm9yX2hlYWRlckAyCgpzZXRfYV9hZnRlcl9mb3JANToKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo4MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0X2Nhc2VzLm11dGFibGVfbmF0aXZlX3R5cGVzLmNhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5DYXNlMldpdGhJbW1TdHJ1Y3Quc2V0X2Jbcm91dGluZ10oKSAtPiB2b2lkOgpzZXRfYjoKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo4NwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo4OQogICAgLy8gc2VsZi5fY2hlY2tfb3duZXIoKQogICAgY2FsbHN1YiBfY2hlY2tfb3duZXIKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo5MAogICAgLy8gZm9yIGkgaW4gdXJhbmdlKHNlbGYudHVwX2JhZy52YWx1ZS5jb3VudCk6CiAgICBieXRlY18wIC8vICJ0dXBfYmFnIgogICAgaW50Y18yIC8vIDAKICAgIGludGNfMSAvLyA4CiAgICBib3hfZXh0cmFjdAogICAgYnRvaQogICAgaW50Y18yIC8vIDAKCnNldF9iX2Zvcl9oZWFkZXJAMjoKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo5MAogICAgLy8gZm9yIGkgaW4gdXJhbmdlKHNlbGYudHVwX2JhZy52YWx1ZS5jb3VudCk6CiAgICBkdXAKICAgIGRpZyAyCiAgICA8CiAgICBieiBzZXRfYl9hZnRlcl9mb3JANQogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjkxCiAgICAvLyB0dXAgPSBzZWxmLnR1cF9iYWcudmFsdWUuaXRlbXNbaV0KICAgIGJ5dGVjXzAgLy8gInR1cF9iYWciCiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6OTEtOTIKICAgIC8vIHR1cCA9IHNlbGYudHVwX2JhZy52YWx1ZS5pdGVtc1tpXQogICAgLy8gc2VsZi50dXBfYmFnLnZhbHVlLml0ZW1zW2ldID0gdHVwLl9yZXBsYWNlKGI9YikKICAgIGludGNfMSAvLyA4CiAgICBpbnRjIDQgLy8gMTI4CiAgICBib3hfZXh0cmFjdAogICAgZGlnIDEKICAgIGR1cAogICAgY292ZXIgMgogICAgaW50Y18zIC8vIDE2CiAgICAqCiAgICBzd2FwCiAgICBkaWcgMQogICAgaW50Y18zIC8vIDE2CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGV4dHJhY3QgMCA4CiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6OTIKICAgIC8vIHNlbGYudHVwX2JhZy52YWx1ZS5pdGVtc1tpXSA9IHR1cC5fcmVwbGFjZShiPWIpCiAgICBkaWcgNQogICAgaXRvYgogICAgY29uY2F0CiAgICBkaWcgMgogICAgaW50Y18xIC8vIDgKICAgIDwKICAgIGFzc2VydCAvLyBpbmRleCBvdXQgb2YgYm91bmRzCiAgICBpbnRjXzEgLy8gOAogICAgdW5jb3ZlciAyCiAgICArCiAgICBieXRlY18wIC8vICJ0dXBfYmFnIgogICAgc3dhcAogICAgdW5jb3ZlciAyCiAgICBib3hfcmVwbGFjZQogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjkwCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2Uoc2VsZi50dXBfYmFnLnZhbHVlLmNvdW50KToKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBidXJ5IDEKICAgIGIgc2V0X2JfZm9yX2hlYWRlckAyCgpzZXRfYl9hZnRlcl9mb3JANToKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo4NwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0X2Nhc2VzLm11dGFibGVfbmF0aXZlX3R5cGVzLmNhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5DYXNlMldpdGhJbW1TdHJ1Y3QuZ2V0XzNfdHVwc1tyb3V0aW5nXSgpIC0+IHZvaWQ6CmdldF8zX3R1cHM6CiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6OTQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6OTYKICAgIC8vIGFzc2VydCBzZWxmLnR1cF9iYWcudmFsdWUuY291bnQgPj0gc3RhcnQgKyAzLCAibm90IGVub3VnaCBpdGVtcyIKICAgIGJ5dGVjXzAgLy8gInR1cF9iYWciCiAgICBpbnRjXzIgLy8gMAogICAgaW50Y18xIC8vIDgKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICBkaWcgMQogICAgcHVzaGludCAzIC8vIDMKICAgICsKICAgID49CiAgICBhc3NlcnQgLy8gbm90IGVub3VnaCBpdGVtcwogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5Ojk3CiAgICAvLyBpdGVtcyA9IHNlbGYudHVwX2JhZy52YWx1ZS5pdGVtcy5jb3B5KCkKICAgIGJ5dGVjXzAgLy8gInR1cF9iYWciCiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6MTAxCiAgICAvLyBpdGVtc1tzdGFydF0sCiAgICBpbnRjXzEgLy8gOAogICAgaW50YyA0IC8vIDEyOAogICAgYm94X2V4dHJhY3QKICAgIGRpZyAxCiAgICBpbnRjXzMgLy8gMTYKICAgICoKICAgIGRpZyAxCiAgICBzd2FwCiAgICBpbnRjXzMgLy8gMTYKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjEwMgogICAgLy8gaXRlbXNbc3RhcnQgKyAxXSwKICAgIGRpZyAyCiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgaW50Y18zIC8vIDE2CiAgICAqCiAgICBkaWcgMgogICAgc3dhcAogICAgaW50Y18zIC8vIDE2CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weToxMDMKICAgIC8vIGl0ZW1zW3N0YXJ0ICsgMl0sCiAgICB1bmNvdmVyIDMKICAgIHB1c2hpbnQgMiAvLyAyCiAgICArCiAgICBpbnRjXzMgLy8gMTYKICAgICoKICAgIHVuY292ZXIgMwogICAgc3dhcAogICAgaW50Y18zIC8vIDE2CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo5OS0xMDUKICAgIC8vIHJldHVybiBGaXhlZEFycmF5W05hbWVkVHVwLCB0eXBpbmcuTGl0ZXJhbFszXV0oCiAgICAvLyAgICAgKAogICAgLy8gICAgICAgICBpdGVtc1tzdGFydF0sCiAgICAvLyAgICAgICAgIGl0ZW1zW3N0YXJ0ICsgMV0sCiAgICAvLyAgICAgICAgIGl0ZW1zW3N0YXJ0ICsgMl0sCiAgICAvLyAgICAgKQogICAgLy8gKQogICAgY292ZXIgMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo5NAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0X2Nhc2VzLm11dGFibGVfbmF0aXZlX3R5cGVzLmNhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5DYXNlMldpdGhJbW1TdHJ1Y3QuZ2V0X2FsbF90dXBzW3JvdXRpbmddKCkgLT4gdm9pZDoKZ2V0X2FsbF90dXBzOgogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjEwOQogICAgLy8gcmVzdWx0ID0gTmF0aXZlQXJyYXlbTmFtZWRUdXBdKCkKICAgIHB1c2hieXRlcyAweDAwMDAKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weToxMTEtMTEyCiAgICAvLyAjIFRPRE86IGltcHJvdmUgdGhpcyBvbmNlIHNsaWNpbmcgaXMgc3VwcG9ydGVkCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2Uoc2VsZi50dXBfYmFnLnZhbHVlLmNvdW50KToKICAgIGJ5dGVjXzAgLy8gInR1cF9iYWciCiAgICBpbnRjXzIgLy8gMAogICAgaW50Y18xIC8vIDgKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICBpbnRjXzIgLy8gMAoKZ2V0X2FsbF90dXBzX2Zvcl9oZWFkZXJAMjoKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weToxMTEtMTEyCiAgICAvLyAjIFRPRE86IGltcHJvdmUgdGhpcyBvbmNlIHNsaWNpbmcgaXMgc3VwcG9ydGVkCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2Uoc2VsZi50dXBfYmFnLnZhbHVlLmNvdW50KToKICAgIGR1cAogICAgZGlnIDIKICAgIDwKICAgIGJ6IGdldF9hbGxfdHVwc19hZnRlcl9mb3JANQogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjExMAogICAgLy8gaXRlbXMgPSBzZWxmLnR1cF9iYWcudmFsdWUuaXRlbXMuY29weSgpCiAgICBieXRlY18wIC8vICJ0dXBfYmFnIgogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjExMwogICAgLy8gcmVzdWx0LmFwcGVuZChpdGVtc1tpXSkKICAgIGludGNfMSAvLyA4CiAgICBpbnRjIDQgLy8gMTI4CiAgICBib3hfZXh0cmFjdAogICAgZGlnIDEKICAgIGR1cAogICAgY292ZXIgMgogICAgaW50Y18zIC8vIDE2CiAgICAqCiAgICBpbnRjXzMgLy8gMTYKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZGlnIDQKICAgIGR1cAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIHN3YXAKICAgIGludGNfMiAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICByZXBsYWNlMiAwCiAgICBidXJ5IDQKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weToxMTEtMTEyCiAgICAvLyAjIFRPRE86IGltcHJvdmUgdGhpcyBvbmNlIHNsaWNpbmcgaXMgc3VwcG9ydGVkCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2Uoc2VsZi50dXBfYmFnLnZhbHVlLmNvdW50KToKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBidXJ5IDEKICAgIGIgZ2V0X2FsbF90dXBzX2Zvcl9oZWFkZXJAMgoKZ2V0X2FsbF90dXBzX2FmdGVyX2ZvckA1OgogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjEwNwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgZGlnIDMKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gdGVzdF9jYXNlcy5tdXRhYmxlX25hdGl2ZV90eXBlcy5jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QuQ2FzZTJXaXRoSW1tU3RydWN0LmFkZF90dXAodHVwOiBieXRlcykgLT4gdm9pZDoKdGVzdF9jYXNlcy5tdXRhYmxlX25hdGl2ZV90eXBlcy5jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QuQ2FzZTJXaXRoSW1tU3RydWN0LmFkZF90dXA6CiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6NDktNTAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBkZWYgYWRkX3R1cChzZWxmLCB0dXA6IE5hbWVkVHVwKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6NTEKICAgIC8vIHNlbGYuX2NoZWNrX293bmVyKCkKICAgIGNhbGxzdWIgX2NoZWNrX293bmVyCiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6NTIKICAgIC8vIGFzc2VydCBzZWxmLnR1cF9iYWcudmFsdWUuY291bnQgPCBzZWxmLnR1cF9iYWcudmFsdWUuaXRlbXMubGVuZ3RoLCAidG9vIG1hbnkgdHVwcyIKICAgIGJ5dGVjXzAgLy8gInR1cF9iYWciCiAgICBpbnRjXzIgLy8gMAogICAgaW50Y18xIC8vIDgKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICBkdXAKICAgIGludGNfMSAvLyA4CiAgICA8CiAgICBhc3NlcnQgLy8gdG9vIG1hbnkgdHVwcwogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjUzCiAgICAvLyBzZWxmLnR1cF9iYWcudmFsdWUuaXRlbXNbc2VsZi50dXBfYmFnLnZhbHVlLmNvdW50XSA9IHR1cAogICAgaW50Y18zIC8vIDE2CiAgICAqCiAgICBpbnRjXzEgLy8gOAogICAgKwogICAgYnl0ZWNfMCAvLyAidHVwX2JhZyIKICAgIHN3YXAKICAgIGZyYW1lX2RpZyAtMQogICAgYm94X3JlcGxhY2UKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weTo1NAogICAgLy8gc2VsZi50dXBfYmFnLnZhbHVlLmNvdW50ICs9IDEKICAgIGJ5dGVjXzAgLy8gInR1cF9iYWciCiAgICBpbnRjXzIgLy8gMAogICAgaW50Y18xIC8vIDgKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAidHVwX2JhZyIKICAgIGludGNfMiAvLyAwCiAgICB1bmNvdmVyIDIKICAgIGJveF9yZXBsYWNlCiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLm11dGFibGVfbmF0aXZlX3R5cGVzLmNhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5DYXNlMldpdGhJbW1TdHJ1Y3QuX2NoZWNrX293bmVyKCkgLT4gdm9pZDoKX2NoZWNrX293bmVyOgogICAgLy8gbXV0YWJsZV9uYXRpdmVfdHlwZXMvY2FzZTJfd2l0aF9pbW11dGFibGVfc3RydWN0LnB5OjExOAogICAgLy8gYXNzZXJ0IHNlbGYudHVwX2JhZy52YWx1ZS5ib290c3RyYXBwZWQsICJhcHAgbm90IGJvb3RzdHJhcHBlZCIKICAgIGJ5dGVjXzAgLy8gInR1cF9iYWciCiAgICBpbnRjIDUgLy8gNDI3MgogICAgaW50Y18wIC8vIDEKICAgIGJveF9leHRyYWN0CiAgICBpbnRjXzIgLy8gMAogICAgZ2V0Yml0CiAgICBhc3NlcnQgLy8gYXBwIG5vdCBib290c3RyYXBwZWQKICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weToxMTkKICAgIC8vIGFzc2VydCBzZWxmLnR1cF9iYWcudmFsdWUub3duZXIgPT0gVHhuLnNlbmRlciwgInNlbmRlciBub3QgYXV0aG9yaXplZCIKICAgIGJ5dGVjXzAgLy8gInR1cF9iYWciCiAgICBwdXNoaW50cyAxMzYgMzIgLy8gMTM2LCAzMgogICAgYm94X2V4dHJhY3QKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQgLy8gc2VuZGVyIG5vdCBhdXRob3JpemVkCiAgICAvLyBtdXRhYmxlX25hdGl2ZV90eXBlcy9jYXNlMl93aXRoX2ltbXV0YWJsZV9zdHJ1Y3QucHk6MTIxCiAgICAvLyBzZWxmLnR1cF9iYWcudmFsdWUuYXBwID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2lkCiAgICBieXRlY18wIC8vICJ0dXBfYmFnIgogICAgcHVzaGludCAxNjggLy8gMTY4CiAgICBpbnRjXzEgLy8gOAogICAgYm94X2V4dHJhY3QKICAgIGJ0b2kKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25JRAogICAgPT0KICAgIC8vIG11dGFibGVfbmF0aXZlX3R5cGVzL2Nhc2UyX3dpdGhfaW1tdXRhYmxlX3N0cnVjdC5weToxMjAtMTIyCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIHNlbGYudHVwX2JhZy52YWx1ZS5hcHAgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25faWQKICAgIC8vICksICJ0aGlzIGVycm9yIHNob3VsZCBiZSBpbXBvc3NpYmxlIgogICAgYXNzZXJ0IC8vIHRoaXMgZXJyb3Igc2hvdWxkIGJlIGltcG9zc2libGUKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAGAQgAEIABsCEmAgd0dXBfYmFnBBUffHUxG0EAXDEZFEQxGESCCwSmfqKrBAKIQOoE91zunQSIC1U0BFMDC0EEfTnfUQR6HntDBDRHhH8EK6ZIUgSryb54BHNFehk2GgCOCwAJADAAOgBCAF8AlwC/AN8BIwFmAaYAMRkUMRgUEEMogbEhuUQogYgBMQC7MggWKIGoAU8CuyghBSK6JCJUKCEFTwK7IkMoJCO6KUxQsCJDNhoBiAGmIkM2GgEXKCQjuhdLAQ1EKCMhBLpMJQslWClMULAiQyQoJCO6FyRJSwIMQQAhKCMhBLpLAUlOAiULJVhJJFtLBQhMI1sIRQQiCEUBQv/YSwIWKUxQsCJDNhoBSSRZJElLAgxBABhLAlcCAEsBSU4CJQslWIgBMCIIRQFC/+EiQzYaASRJgQMMQQATRwIlC0sDTCVYiAEQIghFAUL/5iJDNhoBF4gBJigkI7oXJElLAgxBAC4oIyEEuksBSU4CJQtMSwElWFcICEsFFkxQSwIjDEQjTwIIKExPArsiCEUBQv/LIkM2GgEXiADiKCQjuhckSUsCDEEALSgjIQS6SwFJTgIlC0xLASVYVwAISwUWUEsCIwxEI08CCChMTwK7IghFAUL/zCJDNhoBFygkI7oXSwGBAwgPRCgjIQS6SwElC0sBTCVYSwIiCCULSwJMJVhPA4ECCCULTwNMJVhOAlBMUClMULAiQ4ACAAAoJCO6FyRJSwIMQQAoKCMhBLpLAUlOAiULJVhLBElPAlBMJFkiCBZXBgJcAEUEIghFAUL/0SlLA1CwIkOKAQCIACAoJCO6F0kjDEQlCyMIKEyL/7soJCO6FyIIFigkTwK7iSghBSK6JFNEKIMCiAEgujEAEkQogagBI7oXMggSRIk=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}