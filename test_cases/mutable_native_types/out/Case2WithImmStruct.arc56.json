{
    "name": "Case2WithImmStruct",
    "structs": {
        "NamedTup": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "TupBag": [
            {
                "name": "count",
                "type": "uint64"
            },
            {
                "name": "items",
                "type": "(uint64,uint64)[8]"
            },
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "app",
                "type": "uint64"
            },
            {
                "name": "too_big",
                "type": "byte[4096]"
            },
            {
                "name": "bootstrapped",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "create_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "num_tups",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_tup",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "NamedTup",
                    "name": "tup"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_tup",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "NamedTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_many_tups",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "tups"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_fixed_tups",
            "args": [
                {
                    "type": "(uint64,uint64)[3]",
                    "name": "tups"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_a",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_b",
            "args": [
                {
                    "type": "uint64",
                    "name": "b"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_3_tups",
            "args": [
                {
                    "type": "uint64",
                    "name": "start"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[3]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_all_tups",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "tup_bag": {
                    "keyType": "AVMString",
                    "valueType": "TupBag",
                    "key": "dHVwX2JhZw=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        120,
                        136,
                        156,
                        172,
                        188,
                        203,
                        218,
                        235,
                        255,
                        270,
                        287
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        797
                    ],
                    "errorMessage": "app not bootstrapped"
                },
                {
                    "pc": [
                        312
                    ],
                    "errorMessage": "box already exists"
                },
                {
                    "pc": [
                        304
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        123,
                        139,
                        159,
                        175,
                        191,
                        206,
                        221,
                        238,
                        258,
                        273,
                        290
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        411,
                        444,
                        494,
                        527,
                        575,
                        642,
                        700,
                        711,
                        723,
                        764
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        400,
                        588,
                        654
                    ],
                    "errorMessage": "index out of bounds"
                },
                {
                    "pc": [
                        768
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        686
                    ],
                    "errorMessage": "not enough items"
                },
                {
                    "pc": [
                        808
                    ],
                    "errorMessage": "sender not authorized"
                },
                {
                    "pc": [
                        819
                    ],
                    "errorMessage": "this error should be impossible"
                },
                {
                    "pc": [
                        365
                    ],
                    "errorMessage": "too many tups"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAGAQAIEIABsCEmAgd0dXBfYmFnBBUffHUxG0EBCYILBKZ+oqsEAohA6gT3XO6dBIgLVTQEUwMLQQR9Od9RBHoee0MENEeEfwQrpkhSBKvJvngEc0V6GTYaAI4LAKkAmACJAHUAZABVAEYANgAmABIAAiNDMRkURDEYRIgCWylMULAiQzEZFEQxGEQ2GgEXiAINKUxQsCJDMRkURDEYRDYaAReIAbciQzEZFEQxGEQ2GgEXiAFkIkMxGRREMRhENhoBiAE0IkMxGRREMRhENhoBiAD8IkMxGRREMRhEiAC8FilMULAiQzEZFEQxGEQ2GgEXiACPKUxQsCJDMRkURDEYRDYaAYgAViJDMRkURDEYRIgARBYpTFCwIkMxGRREMRhEiAANIkMxGUD/RjEYFEQiQyiBsSG5RCiBiAExALsyCBYogagBTwK7KCEFIrojIlQoIQVPAruJKCMkuheJigEAiAGxKCMkuhdJJAxEJQskCChMi/+7KCMkuhciCBYoI08Cu4mKAQEoIyS6F4v/DUQoJCEEuov/JQslWImKAAEjKCMkuhcjiwKLAQxBACEoJCEEuosCSU4CJQslWEkjW4sACEwkWwiMACIIjAJC/9eJigEAi/8jWSOLAYsADEEAGIv/VwIAiwFJTgIlCyVYiP9tIgiMAUL/4ImKAQAjiwCBAwxBABSLAEklC4v/TCVYiP9MIgiMAEL/5ImKAQCIAPUoIyS6FyOLAYsADEEALigkIQS6iwFJTgIlC0xLASVYVwgIi/8WTFBLAiQMRCRPAggoTE8CuyIIjAFC/8qJigEAiACyKCMkuhcjiwGLAAxBAC0oJCEEuosBSU4CJQtMSwElWFcACIv/FlBLAiQMRCRPAggoTE8CuyIIjAFC/8uJigEBKCMkuheL/4EDCA9EKCQhBLqL/yULSwFMJViL/yIIJQtLAkwlWIv/gQIIJQtPA0wlWE4CUExQiYoAAYACAAAoIyS6FyOLAosBDEEAJigkIQS6iwJJTgIlCyVYiwBMUEkjWSIIFlcGAlwAjAAiCIwCQv/SiSghBSK6I1NEKIMCiAEgujEAEkQogagBJLoXMggSRIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}