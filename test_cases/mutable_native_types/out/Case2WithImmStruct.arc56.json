{
    "name": "Case2WithImmStruct",
    "structs": {
        "NamedTup": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "TupBag": [
            {
                "name": "count",
                "type": "uint64"
            },
            {
                "name": "items",
                "type": "(uint64,uint64)[8]"
            },
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "app",
                "type": "uint64"
            },
            {
                "name": "too_big",
                "type": "byte[4096]"
            },
            {
                "name": "bootstrapped",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "create_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "num_tups",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_tup",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "NamedTup",
                    "name": "tup"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_tup",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "NamedTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_many_tups",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "tups"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_fixed_tups",
            "args": [
                {
                    "type": "(uint64,uint64)[3]",
                    "name": "tups"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_a",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_b",
            "args": [
                {
                    "type": "uint64",
                    "name": "b"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_3_tups",
            "args": [
                {
                    "type": "uint64",
                    "name": "start"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[3]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_all_tups",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "tup_bag": {
                    "keyType": "AVMString",
                    "valueType": "TupBag",
                    "key": "dHVwX2JhZw=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        34
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        130
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        699
                    ],
                    "errorMessage": "app not bootstrapped"
                },
                {
                    "pc": [
                        138
                    ],
                    "errorMessage": "box already exists"
                },
                {
                    "pc": [
                        222,
                        256,
                        325,
                        363,
                        417,
                        490,
                        555,
                        566,
                        578,
                        620
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        212,
                        430,
                        502
                    ],
                    "errorMessage": "index out of bounds"
                },
                {
                    "pc": [
                        291
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        303
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<test_cases.mutable_native_types.case2_with_immutable_struct.NamedTup>"
                },
                {
                    "pc": [
                        346
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<test_cases.mutable_native_types.case2_with_immutable_struct.NamedTup, 3>"
                },
                {
                    "pc": [
                        202,
                        383,
                        456,
                        528
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        189
                    ],
                    "errorMessage": "invalid number of bytes for test_cases.mutable_native_types.case2_with_immutable_struct.NamedTup"
                },
                {
                    "pc": [
                        626
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        541
                    ],
                    "errorMessage": "not enough items"
                },
                {
                    "pc": [
                        710
                    ],
                    "errorMessage": "sender not authorized"
                },
                {
                    "pc": [
                        721
                    ],
                    "errorMessage": "this error should be impossible"
                },
                {
                    "pc": [
                        668
                    ],
                    "errorMessage": "too many tups"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAGCAEQAIABsCEmAgd0dXBfYmFnBBUffHUxG0EAXDEZFEQxGESCCwSmfqKrBAKIQOoE91zunQSIC1U0BFMDC0EEfTnfUQR6HntDBDRHhH8EK6ZIUgSryb54BHNFehk2GgCOCwALADIAPABJAGsAowDYAP4BRwGPAdQAMRkUMRgUEEQjQyiBsSG5RCiBiAExALsyCBYogagBTwK7KCEFI7olI1QoIQVPArsjQyglIropTFCwI0M2GgFJFSQSRIgBzSNDNhoBSRUiEkQXKCUiuhdLAQ1EKCIhBLpMJAskWClMULAjQyUoJSK6FyVJSwIMQQAhKCIhBLpLAUlOAiQLJFhJJVtLBQhMIlsIRQQjCEUBQv/YSwIWKUxQsCNDNhoBRwIlWUlOAiQLgQIITBUSRCVJSwIMQQAYSwJXAgBLAUlOAiQLJFiIAUUjCEUBQv/hI0M2GgFJFYEwEkQlSYEDDEEAE0cCJAtLA0wkWIgBHyMIRQFC/+YjQzYaAUkVIhJEF4gBMCglIroXJUlLAgxBAC4oIiEEuksBSU4CJAtMSwEkWFcICEsFFkxQSwIiDEQiTwIIKExPArsjCEUBQv/LI0M2GgFJFSISRBeIAOcoJSK6FyVJSwIMQQAtKCIhBLpLAUlOAiQLTEsBJFhXAAhLBRZQSwIiDEQiTwIIKExPArsjCEUBQv/MI0M2GgFJFSISRBcoJSK6F0sBgQMID0QoIiEEuksBJAtLAUwkWEsCIwgkC0sCTCRYTwOBAggkC08DTCRYTgJQTFApTFCwI0OAAgAAKCUiuhclSUsCDEEAKCgiIQS6SwFJTgIkCyRYSwRJTwJQTCVZIwgWVwYCXABFBCMIRQFC/9EpSwNQsCNDigEAiAAgKCUiuhdJIgxEJAsiCChMi/+7KCUiuhcjCBYoJU8Cu4koIQUjuiVTRCiDAogBILoxABJEKIGoASK6FzIIEkSJ",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}