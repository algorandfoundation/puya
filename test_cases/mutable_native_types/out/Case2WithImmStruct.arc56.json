{
    "name": "Case2WithImmStruct",
    "structs": {
        "NamedTup": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "TupBag": [
            {
                "name": "count",
                "type": "uint64"
            },
            {
                "name": "items",
                "type": "(uint64,uint64)[8]"
            },
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "app",
                "type": "uint64"
            },
            {
                "name": "too_big",
                "type": "byte[4096]"
            },
            {
                "name": "bootstrapped",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "create_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "num_tups",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_tup",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "NamedTup",
                    "name": "tup"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_tup",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "NamedTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_many_tups",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "tups"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_fixed_tups",
            "args": [
                {
                    "type": "(uint64,uint64)[3]",
                    "name": "tups"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_a",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_b",
            "args": [
                {
                    "type": "uint64",
                    "name": "b"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_3_tups",
            "args": [
                {
                    "type": "uint64",
                    "name": "start"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[3]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_all_tups",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "tup_bag": {
                    "keyType": "AVMString",
                    "valueType": "TupBag",
                    "key": "dHVwX2JhZw=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        34
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        130
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        653
                    ],
                    "errorMessage": "app not bootstrapped"
                },
                {
                    "pc": [
                        136
                    ],
                    "errorMessage": "box already exists"
                },
                {
                    "pc": [
                        210,
                        244,
                        300,
                        332,
                        381,
                        449,
                        509,
                        520,
                        532,
                        574
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        200,
                        394,
                        461
                    ],
                    "errorMessage": "index out of bounds"
                },
                {
                    "pc": [
                        580
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        495
                    ],
                    "errorMessage": "not enough items"
                },
                {
                    "pc": [
                        664
                    ],
                    "errorMessage": "sender not authorized"
                },
                {
                    "pc": [
                        675
                    ],
                    "errorMessage": "this error should be impossible"
                },
                {
                    "pc": [
                        622
                    ],
                    "errorMessage": "too many tups"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAGAQgAEIABsCEmAgd0dXBfYmFnBBUffHUxG0EAXDEZFEQxGESCCwSmfqKrBAKIQOoE91zunQSIC1U0BFMDC0EEfTnfUQR6HntDBDRHhH8EK6ZIUgSryb54BHNFehk2GgCOCwAJADAAOgBCAF8AlwC/AN8BIwFmAaYAMRkUMRgUEEMogbEhuUQogYgBMQC7MggWKIGoAU8CuyghBSK6JCJUKCEFTwK7IkMoJCO6KUxQsCJDNhoBiAGmIkM2GgEXKCQjuhdLAQ1EKCMhBLpMJQslWClMULAiQyQoJCO6FyRJSwIMQQAhKCMhBLpLAUlOAiULJVhJJFtLBQhMI1sIRQQiCEUBQv/YSwIWKUxQsCJDNhoBSSRZJElLAgxBABhLAlcCAEsBSU4CJQslWIgBMCIIRQFC/+EiQzYaASRJgQMMQQATRwIlC0sDTCVYiAEQIghFAUL/5iJDNhoBF4gBJigkI7oXJElLAgxBAC4oIyEEuksBSU4CJQtMSwElWFcICEsFFkxQSwIjDEQjTwIIKExPArsiCEUBQv/LIkM2GgEXiADiKCQjuhckSUsCDEEALSgjIQS6SwFJTgIlC0xLASVYVwAISwUWUEsCIwxEI08CCChMTwK7IghFAUL/zCJDNhoBFygkI7oXSwGBAwgPRCgjIQS6SwElC0sBTCVYSwIiCCULSwJMJVhPA4ECCCULTwNMJVhOAlBMUClMULAiQ4ACAAAoJCO6FyRJSwIMQQAoKCMhBLpLAUlOAiULJVhLBElPAlBMJFkiCBZXBgJcAEUEIghFAUL/0SlLA1CwIkOKAQCIACAoJCO6F0kjDEQlCyMIKEyL/7soJCO6FyIIFigkTwK7iSghBSK6JFNEKIMCiAEgujEAEkQogagBI7oXMggSRIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}