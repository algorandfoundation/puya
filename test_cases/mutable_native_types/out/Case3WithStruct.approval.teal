#pragma version 10
#pragma typetrack false

// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 16 1 0 8
    bytecblock "tup_bag" 0x151f7c75
    // mutable_native_types/case3_with_mutable_struct.py:31
    // class Case3WithStruct(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@16
    pushbytess 0xa67ea2ab 0x028840ea 0xf75cee9d 0x880b5534 0x53030b41 0x7d39df51 0x7a1e7b43 0x3447847f 0x2ba64852 0xabc9be78 0x73457a19 // method "create_box()void", method "num_tups()uint64", method "add_tup((uint64,uint64))void", method "get_tup(uint64)(uint64,uint64)", method "sum()uint64", method "add_many_tups((uint64,uint64)[])void", method "add_fixed_tups((uint64,uint64)[3])void", method "set_a(uint64)void", method "set_b(uint64)void", method "get_3_tups(uint64)(uint64,uint64)[3]", method "get_all_tups()(uint64,uint64)[]"
    txna ApplicationArgs 0
    match main_create_box_route@5 main_num_tups_route@6 main_add_tup_route@7 main_get_tup_route@8 main_sum_route@9 main_add_many_tups_route@10 main_add_fixed_tups_route@11 main_set_a_route@12 main_set_b_route@13 main_get_3_tups_route@14 main_get_all_tups_route@15

main_after_if_else@18:
    // mutable_native_types/case3_with_mutable_struct.py:31
    // class Case3WithStruct(arc4.ARC4Contract):
    intc_2 // 0
    return

main_get_all_tups_route@15:
    // mutable_native_types/case3_with_mutable_struct.py:101
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_all_tups
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_get_3_tups_route@14:
    // mutable_native_types/case3_with_mutable_struct.py:88
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // mutable_native_types/case3_with_mutable_struct.py:31
    // class Case3WithStruct(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // mutable_native_types/case3_with_mutable_struct.py:88
    // @arc4.abimethod()
    callsub get_3_tups
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_set_b_route@13:
    // mutable_native_types/case3_with_mutable_struct.py:82
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // mutable_native_types/case3_with_mutable_struct.py:31
    // class Case3WithStruct(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // mutable_native_types/case3_with_mutable_struct.py:82
    // @arc4.abimethod()
    callsub set_b
    intc_1 // 1
    return

main_set_a_route@12:
    // mutable_native_types/case3_with_mutable_struct.py:76
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // mutable_native_types/case3_with_mutable_struct.py:31
    // class Case3WithStruct(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // mutable_native_types/case3_with_mutable_struct.py:76
    // @arc4.abimethod()
    callsub set_a
    intc_1 // 1
    return

main_add_fixed_tups_route@11:
    // mutable_native_types/case3_with_mutable_struct.py:71
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // mutable_native_types/case3_with_mutable_struct.py:31
    // class Case3WithStruct(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // mutable_native_types/case3_with_mutable_struct.py:71
    // @arc4.abimethod()
    callsub add_fixed_tups
    intc_1 // 1
    return

main_add_many_tups_route@10:
    // mutable_native_types/case3_with_mutable_struct.py:66
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // mutable_native_types/case3_with_mutable_struct.py:31
    // class Case3WithStruct(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // mutable_native_types/case3_with_mutable_struct.py:66
    // @arc4.abimethod()
    callsub add_many_tups
    intc_1 // 1
    return

main_sum_route@9:
    // mutable_native_types/case3_with_mutable_struct.py:57
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub sum
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_get_tup_route@8:
    // mutable_native_types/case3_with_mutable_struct.py:52
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // mutable_native_types/case3_with_mutable_struct.py:31
    // class Case3WithStruct(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // mutable_native_types/case3_with_mutable_struct.py:52
    // @arc4.abimethod()
    callsub get_tup
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_add_tup_route@7:
    // mutable_native_types/case3_with_mutable_struct.py:45
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // mutable_native_types/case3_with_mutable_struct.py:31
    // class Case3WithStruct(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // mutable_native_types/case3_with_mutable_struct.py:45
    // @arc4.abimethod()
    callsub add_tup
    pop
    intc_1 // 1
    return

main_num_tups_route@6:
    // mutable_native_types/case3_with_mutable_struct.py:41
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub num_tups
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_create_box_route@5:
    // mutable_native_types/case3_with_mutable_struct.py:35
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub create_box
    intc_1 // 1
    return

main_bare_routing@16:
    // mutable_native_types/case3_with_mutable_struct.py:31
    // class Case3WithStruct(arc4.ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@18
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.create_box() -> void:
create_box:
    // mutable_native_types/case3_with_mutable_struct.py:37
    // assert self.tup_bag.create(), "box already exists"
    bytec_0 // "tup_bag"
    pushint 176 // 176
    box_create
    assert // box already exists
    // mutable_native_types/case3_with_mutable_struct.py:38
    // self.tup_bag.value.owner = Txn.sender
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    txn Sender
    replace2 136
    // mutable_native_types/case3_with_mutable_struct.py:39
    // self.tup_bag.value.app = Global.current_application_id
    global CurrentApplicationID
    itob
    replace2 168
    bytec_0 // "tup_bag"
    swap
    box_put
    retsub


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.num_tups() -> uint64:
num_tups:
    // mutable_native_types/case3_with_mutable_struct.py:43
    // return self.tup_bag.value.count
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_2 // 0
    extract_uint64
    retsub


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(tup: bytes) -> bytes:
add_tup:
    // mutable_native_types/case3_with_mutable_struct.py:45-46
    // @arc4.abimethod()
    // def add_tup(self, tup: NamedTup) -> None:
    proto 1 1
    // mutable_native_types/case3_with_mutable_struct.py:47
    // self._check_owner()
    callsub _check_owner
    // mutable_native_types/case3_with_mutable_struct.py:48
    // assert self.tup_bag.value.count < self.tup_bag.value.items.length, "too many tups"
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    intc_2 // 0
    extract_uint64
    dup
    intc_3 // 8
    <
    assert // too many tups
    // mutable_native_types/case3_with_mutable_struct.py:49
    // self.tup_bag.value.items[self.tup_bag.value.count] = tup.copy()
    dig 1
    extract 8 128 // on error: Index access is out of bounds
    swap
    intc_0 // 16
    *
    frame_dig -1
    replace3
    replace2 8
    // mutable_native_types/case3_with_mutable_struct.py:50
    // self.tup_bag.value.count += 1
    dup
    intc_2 // 0
    extract_uint64
    intc_1 // 1
    +
    itob
    replace2 0
    bytec_0 // "tup_bag"
    swap
    box_put
    frame_dig -1
    retsub


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_tup(index: uint64) -> bytes:
get_tup:
    // mutable_native_types/case3_with_mutable_struct.py:52-53
    // @arc4.abimethod()
    // def get_tup(self, index: UInt64) -> NamedTup:
    proto 1 1
    // mutable_native_types/case3_with_mutable_struct.py:54
    // assert index < self.tup_bag.value.count, "index out of bounds"
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    intc_2 // 0
    extract_uint64
    frame_dig -1
    >
    assert // index out of bounds
    // mutable_native_types/case3_with_mutable_struct.py:55
    // return self.tup_bag.value.items[index]
    extract 8 128 // on error: Index access is out of bounds
    frame_dig -1
    intc_0 // 16
    *
    intc_0 // 16
    extract3 // on error: Index access is out of bounds
    retsub


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum() -> uint64:
sum:
    // mutable_native_types/case3_with_mutable_struct.py:57-58
    // @arc4.abimethod()
    // def sum(self) -> UInt64:
    proto 0 1
    // mutable_native_types/case3_with_mutable_struct.py:59
    // total = UInt64()
    intc_2 // 0
    // mutable_native_types/case3_with_mutable_struct.py:60
    // for i in urange(self.tup_bag.value.count):
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_2 // 0
    extract_uint64
    intc_2 // 0

sum_for_header@1:
    // mutable_native_types/case3_with_mutable_struct.py:60
    // for i in urange(self.tup_bag.value.count):
    frame_dig 2
    frame_dig 1
    <
    bz sum_after_for@4
    // mutable_native_types/case3_with_mutable_struct.py:61
    // tup = self.tup_bag.value.items[i].copy()
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    extract 8 128 // on error: Index access is out of bounds
    frame_dig 2
    dup
    cover 2
    intc_0 // 16
    *
    intc_0 // 16
    extract3 // on error: Index access is out of bounds
    // mutable_native_types/case3_with_mutable_struct.py:62
    // total += tup.a
    dup
    intc_2 // 0
    extract_uint64
    frame_dig 0
    +
    // mutable_native_types/case3_with_mutable_struct.py:63
    // total += tup.b
    swap
    intc_3 // 8
    extract_uint64
    +
    frame_bury 0
    // mutable_native_types/case3_with_mutable_struct.py:60
    // for i in urange(self.tup_bag.value.count):
    intc_1 // 1
    +
    frame_bury 2
    b sum_for_header@1

sum_after_for@4:
    // mutable_native_types/case3_with_mutable_struct.py:64
    // return total
    retsub


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups(tups: bytes) -> void:
add_many_tups:
    // mutable_native_types/case3_with_mutable_struct.py:66-67
    // @arc4.abimethod()
    // def add_many_tups(self, tups: NativeArray[NamedTup]) -> None:
    proto 1 0
    // mutable_native_types/case3_with_mutable_struct.py:68
    // for i in urange(tups.length):
    frame_dig -1
    intc_2 // 0
    extract_uint16
    intc_2 // 0

add_many_tups_for_header@1:
    // mutable_native_types/case3_with_mutable_struct.py:68
    // for i in urange(tups.length):
    frame_dig 1
    frame_dig 0
    <
    bz add_many_tups_after_for@4
    // mutable_native_types/case3_with_mutable_struct.py:69
    // self.add_tup(tups[i].copy())
    frame_dig -1
    extract 2 0
    frame_dig 1
    dup
    cover 2
    intc_0 // 16
    *
    intc_0 // 16
    extract3 // on error: Index access is out of bounds
    callsub add_tup
    pop
    // mutable_native_types/case3_with_mutable_struct.py:68
    // for i in urange(tups.length):
    intc_1 // 1
    +
    frame_bury 1
    b add_many_tups_for_header@1

add_many_tups_after_for@4:
    retsub


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups(tups: bytes) -> void:
add_fixed_tups:
    // mutable_native_types/case3_with_mutable_struct.py:71-72
    // @arc4.abimethod()
    // def add_fixed_tups(self, tups: FixedArray[NamedTup, typing.Literal[3]]) -> None:
    proto 1 0
    // mutable_native_types/case3_with_mutable_struct.py:73
    // for i in urange(tups.length):
    intc_2 // 0

add_fixed_tups_for_header@1:
    // mutable_native_types/case3_with_mutable_struct.py:73
    // for i in urange(tups.length):
    frame_dig 0
    pushint 3 // 3
    <
    bz add_fixed_tups_after_for@4
    // mutable_native_types/case3_with_mutable_struct.py:74
    // self.add_tup(tups[i].copy())
    frame_dig 0
    dup
    intc_0 // 16
    *
    frame_dig -1
    swap
    intc_0 // 16
    extract3 // on error: Index access is out of bounds
    callsub add_tup
    pop
    // mutable_native_types/case3_with_mutable_struct.py:73
    // for i in urange(tups.length):
    intc_1 // 1
    +
    frame_bury 0
    b add_fixed_tups_for_header@1

add_fixed_tups_after_for@4:
    retsub


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a(a: uint64) -> void:
set_a:
    // mutable_native_types/case3_with_mutable_struct.py:76-77
    // @arc4.abimethod()
    // def set_a(self, a: UInt64) -> None:
    proto 1 0
    // mutable_native_types/case3_with_mutable_struct.py:78
    // self._check_owner()
    callsub _check_owner
    // mutable_native_types/case3_with_mutable_struct.py:79
    // for i in urange(self.tup_bag.value.count):
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_2 // 0
    extract_uint64
    intc_2 // 0

set_a_for_header@1:
    // mutable_native_types/case3_with_mutable_struct.py:79
    // for i in urange(self.tup_bag.value.count):
    frame_dig 1
    frame_dig 0
    <
    bz set_a_after_for@4
    // mutable_native_types/case3_with_mutable_struct.py:80
    // self.tup_bag.value.items[i].a = a
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    extract 8 128 // on error: Index access is out of bounds
    frame_dig 1
    dup
    cover 2
    intc_0 // 16
    *
    dup2
    intc_0 // 16
    extract3 // on error: Index access is out of bounds
    frame_dig -1
    itob
    replace2 0
    dig 3
    intc_3 // 8
    <
    assert // Index access is out of bounds
    replace3
    uncover 2
    swap
    replace2 8
    bytec_0 // "tup_bag"
    swap
    box_put
    // mutable_native_types/case3_with_mutable_struct.py:79
    // for i in urange(self.tup_bag.value.count):
    intc_1 // 1
    +
    frame_bury 1
    b set_a_for_header@1

set_a_after_for@4:
    retsub


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b(b: uint64) -> void:
set_b:
    // mutable_native_types/case3_with_mutable_struct.py:82-83
    // @arc4.abimethod()
    // def set_b(self, b: UInt64) -> None:
    proto 1 0
    // mutable_native_types/case3_with_mutable_struct.py:84
    // self._check_owner()
    callsub _check_owner
    // mutable_native_types/case3_with_mutable_struct.py:85
    // for i in urange(self.tup_bag.value.count):
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    intc_2 // 0
    extract_uint64
    intc_2 // 0

set_b_for_header@1:
    // mutable_native_types/case3_with_mutable_struct.py:85
    // for i in urange(self.tup_bag.value.count):
    frame_dig 1
    frame_dig 0
    <
    bz set_b_after_for@4
    // mutable_native_types/case3_with_mutable_struct.py:86
    // self.tup_bag.value.items[i].b = b
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    extract 8 128 // on error: Index access is out of bounds
    frame_dig 1
    dup
    cover 2
    intc_0 // 16
    *
    dup2
    intc_0 // 16
    extract3 // on error: Index access is out of bounds
    frame_dig -1
    itob
    replace2 8
    dig 3
    intc_3 // 8
    <
    assert // Index access is out of bounds
    replace3
    uncover 2
    swap
    replace2 8
    bytec_0 // "tup_bag"
    swap
    box_put
    // mutable_native_types/case3_with_mutable_struct.py:85
    // for i in urange(self.tup_bag.value.count):
    intc_1 // 1
    +
    frame_bury 1
    b set_b_for_header@1

set_b_after_for@4:
    retsub


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_3_tups(start: uint64) -> bytes:
get_3_tups:
    // mutable_native_types/case3_with_mutable_struct.py:88-89
    // @arc4.abimethod()
    // def get_3_tups(self, start: UInt64) -> FixedArray[NamedTup, typing.Literal[3]]:
    proto 1 1
    // mutable_native_types/case3_with_mutable_struct.py:90
    // assert self.tup_bag.value.count >= start + 3, "not enough items"
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    intc_2 // 0
    extract_uint64
    frame_dig -1
    pushint 3 // 3
    +
    >=
    assert // not enough items
    // mutable_native_types/case3_with_mutable_struct.py:91
    // items = self.tup_bag.value.items.copy()
    extract 8 128 // on error: Index access is out of bounds
    // mutable_native_types/case3_with_mutable_struct.py:95
    // items[start].copy(),
    frame_dig -1
    intc_0 // 16
    *
    dig 1
    swap
    intc_0 // 16
    extract3 // on error: Index access is out of bounds
    // mutable_native_types/case3_with_mutable_struct.py:96
    // items[start + 1].copy(),
    frame_dig -1
    intc_1 // 1
    +
    intc_0 // 16
    *
    dig 2
    swap
    intc_0 // 16
    extract3 // on error: Index access is out of bounds
    // mutable_native_types/case3_with_mutable_struct.py:97
    // items[start + 2].copy(),
    frame_dig -1
    pushint 2 // 2
    +
    intc_0 // 16
    *
    uncover 3
    swap
    intc_0 // 16
    extract3 // on error: Index access is out of bounds
    // mutable_native_types/case3_with_mutable_struct.py:93-99
    // return FixedArray[NamedTup, typing.Literal[3]](
    //     (
    //         items[start].copy(),
    //         items[start + 1].copy(),
    //         items[start + 2].copy(),
    //     )
    // )
    cover 2
    concat
    swap
    concat
    retsub


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups() -> bytes:
get_all_tups:
    // mutable_native_types/case3_with_mutable_struct.py:101-102
    // @arc4.abimethod()
    // def get_all_tups(self) -> NativeArray[NamedTup]:
    proto 0 1
    // mutable_native_types/case3_with_mutable_struct.py:103
    // result = NativeArray[NamedTup]()
    pushbytes 0x0000
    // mutable_native_types/case3_with_mutable_struct.py:104
    // items = self.tup_bag.value.items.copy()
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    extract 8 128 // on error: Index access is out of bounds
    swap
    // mutable_native_types/case3_with_mutable_struct.py:105-106
    // # TODO: improve this once slicing is supported
    // for i in urange(self.tup_bag.value.count):
    intc_2 // 0
    extract_uint64
    intc_2 // 0

get_all_tups_for_header@1:
    // mutable_native_types/case3_with_mutable_struct.py:105-106
    // # TODO: improve this once slicing is supported
    // for i in urange(self.tup_bag.value.count):
    frame_dig 3
    frame_dig 2
    <
    bz get_all_tups_after_for@4
    // mutable_native_types/case3_with_mutable_struct.py:107
    // result.append(items[i].copy())
    frame_dig 0
    extract 2 0
    frame_dig 3
    dup
    cover 2
    intc_0 // 16
    *
    frame_dig 1
    swap
    intc_0 // 16
    extract3 // on error: Index access is out of bounds
    concat
    dup
    len
    intc_0 // 16
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 0
    // mutable_native_types/case3_with_mutable_struct.py:105-106
    // # TODO: improve this once slicing is supported
    // for i in urange(self.tup_bag.value.count):
    intc_1 // 1
    +
    frame_bury 3
    b get_all_tups_for_header@1

get_all_tups_after_for@4:
    // mutable_native_types/case3_with_mutable_struct.py:108
    // return result
    retsub


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner() -> void:
_check_owner:
    // mutable_native_types/case3_with_mutable_struct.py:112
    // assert self.tup_bag.value.owner == Txn.sender, "sender not authorized"
    bytec_0 // "tup_bag"
    box_get
    assert // check self.tup_bag exists
    dup
    extract 136 32 // on error: Index access is out of bounds
    txn Sender
    ==
    assert // sender not authorized
    // mutable_native_types/case3_with_mutable_struct.py:114
    // self.tup_bag.value.app == Global.current_application_id
    pushint 168 // 168
    extract_uint64
    global CurrentApplicationID
    ==
    // mutable_native_types/case3_with_mutable_struct.py:113-115
    // assert (
    //     self.tup_bag.value.app == Global.current_application_id
    // ), "this error should be impossible"
    assert // this error should be impossible
    retsub
