#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 8 16 128 4272
    bytecblock "tup_bag" 0x151f7c75
    // mutable_native_types/case3_with_mutable_struct.py:34
    // class Case3WithStruct(arc4.ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@20
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0xa67ea2ab 0x028840ea 0xf75cee9d 0x880b5534 0x53030b41 0x7d39df51 0x7a1e7b43 0x3447847f 0x2ba64852 0xabc9be78 0x73457a19 // method "create_box()void", method "num_tups()uint64", method "add_tup((uint64,uint64))void", method "get_tup(uint64)(uint64,uint64)", method "sum()uint64", method "add_many_tups((uint64,uint64)[])void", method "add_fixed_tups((uint64,uint64)[3])void", method "set_a(uint64)void", method "set_b(uint64)void", method "get_3_tups(uint64)(uint64,uint64)[3]", method "get_all_tups()(uint64,uint64)[]"
    txna ApplicationArgs 0
    match create_box num_tups add_tup get_tup sum add_many_tups add_fixed_tups set_a set_b get_3_tups get_all_tups
    err

main___algopy_default_create@20:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.create_box[routing]() -> void:
create_box:
    // mutable_native_types/case3_with_mutable_struct.py:40
    // assert self.tup_bag.create(), "box already exists"
    bytec_0 // "tup_bag"
    pushint 4273 // 4273
    box_create
    assert // box already exists
    // mutable_native_types/case3_with_mutable_struct.py:41
    // self.tup_bag.value.owner = Txn.sender
    bytec_0 // "tup_bag"
    pushint 136 // 136
    txn Sender
    box_replace
    // mutable_native_types/case3_with_mutable_struct.py:42
    // self.tup_bag.value.app = Global.current_application_id
    global CurrentApplicationID
    itob
    bytec_0 // "tup_bag"
    pushint 168 // 168
    uncover 2
    box_replace
    // mutable_native_types/case3_with_mutable_struct.py:43
    // self.tup_bag.value.bootstrapped = True
    bytec_0 // "tup_bag"
    intc 5 // 4272
    intc_0 // 1
    box_extract
    intc_1 // 0
    intc_0 // 1
    setbit
    bytec_0 // "tup_bag"
    intc 5 // 4272
    uncover 2
    box_replace
    // mutable_native_types/case3_with_mutable_struct.py:38
    // @arc4.abimethod()
    intc_0 // 1
    return


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.num_tups[routing]() -> void:
num_tups:
    // mutable_native_types/case3_with_mutable_struct.py:47
    // return self.tup_bag.value.count
    bytec_0 // "tup_bag"
    intc_1 // 0
    intc_2 // 8
    box_extract
    // mutable_native_types/case3_with_mutable_struct.py:45
    // @arc4.abimethod()
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup[routing]() -> void:
add_tup:
    // mutable_native_types/case3_with_mutable_struct.py:49
    // @arc4.abimethod()
    txna ApplicationArgs 1
    callsub test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup
    pop
    intc_0 // 1
    return


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_tup[routing]() -> void:
get_tup:
    // mutable_native_types/case3_with_mutable_struct.py:56
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // mutable_native_types/case3_with_mutable_struct.py:58
    // assert index < self.tup_bag.value.count, "index out of bounds"
    bytec_0 // "tup_bag"
    intc_1 // 0
    intc_2 // 8
    box_extract
    btoi
    dig 1
    >
    assert // index out of bounds
    // mutable_native_types/case3_with_mutable_struct.py:59
    // return self.tup_bag.value.items[index]
    bytec_0 // "tup_bag"
    intc_2 // 8
    intc 4 // 128
    box_extract
    swap
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    // mutable_native_types/case3_with_mutable_struct.py:56
    // @arc4.abimethod()
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.sum[routing]() -> void:
sum:
    // mutable_native_types/case3_with_mutable_struct.py:63
    // total = UInt64()
    intc_1 // 0
    // mutable_native_types/case3_with_mutable_struct.py:64
    // for i in urange(self.tup_bag.value.count):
    bytec_0 // "tup_bag"
    intc_1 // 0
    intc_2 // 8
    box_extract
    btoi
    intc_1 // 0

sum_for_header@2:
    // mutable_native_types/case3_with_mutable_struct.py:64
    // for i in urange(self.tup_bag.value.count):
    dup
    dig 2
    <
    bz sum_after_for@5
    // mutable_native_types/case3_with_mutable_struct.py:65
    // tup = self.tup_bag.value.items[i].copy()
    bytec_0 // "tup_bag"
    // mutable_native_types/case3_with_mutable_struct.py:65-66
    // tup = self.tup_bag.value.items[i].copy()
    // total += tup.a
    intc_2 // 8
    intc 4 // 128
    box_extract
    dig 1
    dup
    cover 2
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    // mutable_native_types/case3_with_mutable_struct.py:66
    // total += tup.a
    dup
    // mutable_native_types/case3_with_mutable_struct.py:65-66
    // tup = self.tup_bag.value.items[i].copy()
    // total += tup.a
    intc_1 // 0
    // mutable_native_types/case3_with_mutable_struct.py:66
    // total += tup.a
    extract_uint64
    dig 5
    +
    // mutable_native_types/case3_with_mutable_struct.py:67
    // total += tup.b
    swap
    intc_2 // 8
    extract_uint64
    +
    bury 4
    // mutable_native_types/case3_with_mutable_struct.py:64
    // for i in urange(self.tup_bag.value.count):
    intc_0 // 1
    +
    bury 1
    b sum_for_header@2

sum_after_for@5:
    // mutable_native_types/case3_with_mutable_struct.py:61
    // @arc4.abimethod()
    dig 2
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_many_tups[routing]() -> void:
add_many_tups:
    // mutable_native_types/case3_with_mutable_struct.py:70
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    // mutable_native_types/case3_with_mutable_struct.py:72
    // for i in urange(tups.length):
    intc_1 // 0
    extract_uint16
    intc_1 // 0

add_many_tups_for_header@2:
    // mutable_native_types/case3_with_mutable_struct.py:72
    // for i in urange(tups.length):
    dup
    dig 2
    <
    bz add_many_tups_after_for@5
    // mutable_native_types/case3_with_mutable_struct.py:73
    // self.add_tup(tups[i].copy())
    dig 2
    extract 2 0
    dig 1
    dup
    cover 2
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    callsub test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup
    pop
    // mutable_native_types/case3_with_mutable_struct.py:72
    // for i in urange(tups.length):
    intc_0 // 1
    +
    bury 1
    b add_many_tups_for_header@2

add_many_tups_after_for@5:
    // mutable_native_types/case3_with_mutable_struct.py:70
    // @arc4.abimethod()
    intc_0 // 1
    return


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_fixed_tups[routing]() -> void:
add_fixed_tups:
    // mutable_native_types/case3_with_mutable_struct.py:75
    // @arc4.abimethod()
    txna ApplicationArgs 1
    // mutable_native_types/case3_with_mutable_struct.py:77
    // for i in urange(tups.length):
    intc_1 // 0

add_fixed_tups_for_header@2:
    // mutable_native_types/case3_with_mutable_struct.py:77
    // for i in urange(tups.length):
    dup
    pushint 3 // 3
    <
    bz add_fixed_tups_after_for@5
    // mutable_native_types/case3_with_mutable_struct.py:78
    // self.add_tup(tups[i].copy())
    dupn 2
    intc_3 // 16
    *
    dig 3
    swap
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    callsub test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup
    pop
    // mutable_native_types/case3_with_mutable_struct.py:77
    // for i in urange(tups.length):
    intc_0 // 1
    +
    bury 1
    b add_fixed_tups_for_header@2

add_fixed_tups_after_for@5:
    // mutable_native_types/case3_with_mutable_struct.py:75
    // @arc4.abimethod()
    intc_0 // 1
    return


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_a[routing]() -> void:
set_a:
    // mutable_native_types/case3_with_mutable_struct.py:80
    // @arc4.abimethod()
    txna ApplicationArgs 1
    // mutable_native_types/case3_with_mutable_struct.py:82
    // self._check_owner()
    callsub _check_owner
    // mutable_native_types/case3_with_mutable_struct.py:83
    // for i in urange(self.tup_bag.value.count):
    bytec_0 // "tup_bag"
    intc_1 // 0
    intc_2 // 8
    box_extract
    btoi
    intc_1 // 0

set_a_for_header@2:
    // mutable_native_types/case3_with_mutable_struct.py:83
    // for i in urange(self.tup_bag.value.count):
    dup
    dig 2
    <
    bz set_a_after_for@5
    // mutable_native_types/case3_with_mutable_struct.py:84
    // self.tup_bag.value.items[i].a = a
    dupn 2
    intc_2 // 8
    <
    assert // index out of bounds
    dup
    intc_3 // 16
    *
    intc_2 // 8
    +
    bytec_0 // "tup_bag"
    swap
    dig 5
    box_replace
    // mutable_native_types/case3_with_mutable_struct.py:83
    // for i in urange(self.tup_bag.value.count):
    intc_0 // 1
    +
    bury 1
    b set_a_for_header@2

set_a_after_for@5:
    // mutable_native_types/case3_with_mutable_struct.py:80
    // @arc4.abimethod()
    intc_0 // 1
    return


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.set_b[routing]() -> void:
set_b:
    // mutable_native_types/case3_with_mutable_struct.py:86
    // @arc4.abimethod()
    txna ApplicationArgs 1
    // mutable_native_types/case3_with_mutable_struct.py:88
    // self._check_owner()
    callsub _check_owner
    // mutable_native_types/case3_with_mutable_struct.py:89
    // for i in urange(self.tup_bag.value.count):
    bytec_0 // "tup_bag"
    intc_1 // 0
    intc_2 // 8
    box_extract
    btoi
    intc_1 // 0

set_b_for_header@2:
    // mutable_native_types/case3_with_mutable_struct.py:89
    // for i in urange(self.tup_bag.value.count):
    dup
    dig 2
    <
    bz set_b_after_for@5
    // mutable_native_types/case3_with_mutable_struct.py:90
    // self.tup_bag.value.items[i].b = b
    dupn 2
    intc_2 // 8
    <
    assert // index out of bounds
    dup
    intc_3 // 16
    *
    intc_3 // 16
    +
    bytec_0 // "tup_bag"
    swap
    dig 5
    box_replace
    // mutable_native_types/case3_with_mutable_struct.py:89
    // for i in urange(self.tup_bag.value.count):
    intc_0 // 1
    +
    bury 1
    b set_b_for_header@2

set_b_after_for@5:
    // mutable_native_types/case3_with_mutable_struct.py:86
    // @arc4.abimethod()
    intc_0 // 1
    return


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_3_tups[routing]() -> void:
get_3_tups:
    // mutable_native_types/case3_with_mutable_struct.py:92
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // mutable_native_types/case3_with_mutable_struct.py:94
    // assert self.tup_bag.value.count >= start + 3, "not enough items"
    bytec_0 // "tup_bag"
    intc_1 // 0
    intc_2 // 8
    box_extract
    btoi
    dig 1
    pushint 3 // 3
    +
    >=
    assert // not enough items
    // mutable_native_types/case3_with_mutable_struct.py:95
    // items = self.tup_bag.value.items.copy()
    bytec_0 // "tup_bag"
    // mutable_native_types/case3_with_mutable_struct.py:99
    // items[start].copy(),
    intc_2 // 8
    intc 4 // 128
    box_extract
    dig 1
    intc_3 // 16
    *
    dig 1
    swap
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    // mutable_native_types/case3_with_mutable_struct.py:100
    // items[start + 1].copy(),
    dig 2
    intc_0 // 1
    +
    intc_3 // 16
    *
    dig 2
    swap
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    // mutable_native_types/case3_with_mutable_struct.py:101
    // items[start + 2].copy(),
    uncover 3
    pushint 2 // 2
    +
    intc_3 // 16
    *
    uncover 3
    swap
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    // mutable_native_types/case3_with_mutable_struct.py:97-103
    // return FixedArray[NamedTup, typing.Literal[3]](
    //     (
    //         items[start].copy(),
    //         items[start + 1].copy(),
    //         items[start + 2].copy(),
    //     )
    // )
    cover 2
    concat
    swap
    concat
    // mutable_native_types/case3_with_mutable_struct.py:92
    // @arc4.abimethod()
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.get_all_tups[routing]() -> void:
get_all_tups:
    // mutable_native_types/case3_with_mutable_struct.py:107
    // result = NativeArray[NamedTup]()
    pushbytes 0x0000
    // mutable_native_types/case3_with_mutable_struct.py:109-110
    // # TODO: improve this once slicing is supported
    // for i in urange(self.tup_bag.value.count):
    bytec_0 // "tup_bag"
    intc_1 // 0
    intc_2 // 8
    box_extract
    btoi
    intc_1 // 0

get_all_tups_for_header@2:
    // mutable_native_types/case3_with_mutable_struct.py:109-110
    // # TODO: improve this once slicing is supported
    // for i in urange(self.tup_bag.value.count):
    dup
    dig 2
    <
    bz get_all_tups_after_for@5
    // mutable_native_types/case3_with_mutable_struct.py:108
    // items = self.tup_bag.value.items.copy()
    bytec_0 // "tup_bag"
    // mutable_native_types/case3_with_mutable_struct.py:111
    // result.append(items[i].copy())
    intc_2 // 8
    intc 4 // 128
    box_extract
    dig 1
    dup
    cover 2
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    dig 4
    dup
    uncover 2
    concat // on error: max array length exceeded
    swap
    intc_1 // 0
    extract_uint16
    intc_0 // 1
    +
    itob
    extract 6 2
    replace2 0
    bury 4
    // mutable_native_types/case3_with_mutable_struct.py:109-110
    // # TODO: improve this once slicing is supported
    // for i in urange(self.tup_bag.value.count):
    intc_0 // 1
    +
    bury 1
    b get_all_tups_for_header@2

get_all_tups_after_for@5:
    // mutable_native_types/case3_with_mutable_struct.py:105
    // @arc4.abimethod()
    bytec_1 // 0x151f7c75
    dig 3
    concat
    log
    intc_0 // 1
    return


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup(tup: bytes) -> bytes:
test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct.add_tup:
    // mutable_native_types/case3_with_mutable_struct.py:49-50
    // @arc4.abimethod()
    // def add_tup(self, tup: NamedTup) -> None:
    proto 1 1
    // mutable_native_types/case3_with_mutable_struct.py:51
    // self._check_owner()
    callsub _check_owner
    // mutable_native_types/case3_with_mutable_struct.py:52
    // assert self.tup_bag.value.count < self.tup_bag.value.items.length, "too many tups"
    bytec_0 // "tup_bag"
    intc_1 // 0
    intc_2 // 8
    box_extract
    btoi
    dup
    intc_2 // 8
    <
    assert // too many tups
    // mutable_native_types/case3_with_mutable_struct.py:53
    // self.tup_bag.value.items[self.tup_bag.value.count] = tup.copy()
    intc_3 // 16
    *
    intc_2 // 8
    +
    bytec_0 // "tup_bag"
    swap
    frame_dig -1
    box_replace
    // mutable_native_types/case3_with_mutable_struct.py:54
    // self.tup_bag.value.count += 1
    bytec_0 // "tup_bag"
    intc_1 // 0
    intc_2 // 8
    box_extract
    btoi
    intc_0 // 1
    +
    itob
    bytec_0 // "tup_bag"
    intc_1 // 0
    uncover 2
    box_replace
    frame_dig -1
    retsub


// test_cases.mutable_native_types.case3_with_mutable_struct.Case3WithStruct._check_owner() -> void:
_check_owner:
    // mutable_native_types/case3_with_mutable_struct.py:116
    // assert self.tup_bag.value.bootstrapped, "app not bootstrapped"
    bytec_0 // "tup_bag"
    intc 5 // 4272
    intc_0 // 1
    box_extract
    intc_1 // 0
    getbit
    assert // app not bootstrapped
    // mutable_native_types/case3_with_mutable_struct.py:117
    // assert self.tup_bag.value.owner == Txn.sender, "sender not authorized"
    bytec_0 // "tup_bag"
    pushints 136 32 // 136, 32
    box_extract
    txn Sender
    ==
    assert // sender not authorized
    // mutable_native_types/case3_with_mutable_struct.py:119
    // self.tup_bag.value.app == Global.current_application_id
    bytec_0 // "tup_bag"
    pushint 168 // 168
    intc_2 // 8
    box_extract
    btoi
    global CurrentApplicationID
    ==
    // mutable_native_types/case3_with_mutable_struct.py:118-120
    // assert (
    //     self.tup_bag.value.app == Global.current_application_id
    // ), "this error should be impossible"
    assert // this error should be impossible
    retsub
