{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FK;;;;;;AApByC;;AAApB;AAAd;AAAA;AAAA;AAAA;AACc;;AAAmB;AAAnB;AAAwB;;AAAmB;AAAnB;AAAtC;AAAA;AAAA;AAAA;AAAA;AACW;;AAAmB;AAAnB;AAAwB;;AAAmB;AAAnB;AAHzB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAd;AAAA;AAAA;AAYM;;AADA;AADK;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAAA;AAAX;;;;;AAAA;AAAA;AAQA;AAAoB;AAApB;AACgB;;AAAA;AAAhB;AAAA;AAAA;AAtBR;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AA8BK;AANA;AAxBL;;AAAA;AAAA;;;;;;AA+LA;;;AAEY;AACZ;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACiB;AADjB;AACiB;AAAT;;AAAA;AACS;AAAA;AAAA;AAAT;AAAA;;;;;;;;;AACJ;AAQJ;;;;;;AAjJK;;;AAEU;AAAA;AAAA;AAAA;AAAA;AAAoB;;AAApB;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAA;AAAA;AAAA;AAJH;AAAA;AAMA;;;AAAA;AAAA;;;AAAA;AAEkB;AAAA;AAAA;AAAA;AAAR;;AAAA;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAHH;AAAA;AAKA;;;AAAA;AAE6B;AAAA;AAAA;AAAA;AAA1B;;AAAA;AAAA;AACgC;AAAA;AAAA;AAAA;AAAd;;AAAlB;;AAAA;;AAAA;AACO;;AAAA;;;AAAA;AAAP;AACgC;;;AAAnB;AAAA;AAAb;;AAAA;AAAA;AAAA;AAAA;;AAAA;AALH;AAAA;AASe;;AAAY;;;AAApB;AAAA;AAAiC;;;AAAjC;AAAA;AAGe;AAAA;;;AAAY;;AAAA;;AAAA;AAAS;;AAAA;;AAAA;AACjC;;AAAA;;AAAA;AAAP;AACA;AAAA;AACA;AACA;;;AATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;;;AAAA;AAEO;;AAAJ;AACsB;;AAAlB;;AAAJ;AACI;;AAAJ;;AACiB;AAAb;;AAAA;AAAA;AAAJ;;AALH;AAAA;AAOA;;;AAAA;AAAA;;;AAEG;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AACkB;;AAAlB;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;;AAAA;AACa;AAAA;AAAb;;AAAA;AAAA;AAAA;AAAA;;AAAA;AANH;AAAA;AAYU;AAAA;AAAA;AAAA;AAAA;;;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAMU;AAAA;AAAA;AAAA;AAAA;;;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAMa;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;;;AAoFP;;AAAA;AAAA;AAAQ;;AAAA;AAAA;AAAR;AAAA;;AAAA;AAAA;AAAQ;;AAAA;AAAA;AAAR;AAnFM;AAAA;;AACG;;AAAT;AAAX;;;AACmB;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACP;;AAAA;;AAAA;AACA;;;;AARP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;;AAEU;AAAA;AAAA;AAAA;AAAA;AAAP;AASA;;AAAA;;;AACqB;AAAA;AAAA;AAAA;AAAd;;AAAA;;AAAA;AAAP;AAEO;AAAA;;;AAAA;AAAA;AACA;;AAAA;AAAP;AAM6B;;AAAmB;AAAnB;AAAwB;;AAAmB;;AAAnB;AAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AACO;AAAA;AAAA;AAAe;AAAf;AAAP;AACO;AAAA;;;AAAiC;;AAAjC;AAAP;AACO;AAAA;;AAAA;AAAP;AAE2B;AAAA;;;AAAA;;AAAA;;;AAApB;;;;AAAA;AAAA;AACA;;AAAA;AAAP;AAEO;;AAAA;;AAAA;;AACP;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AACO;AAAP;AAOU;AAAN;AAAM;;AAAO;;AAAP;AAAlB;;;AACY;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AADM;;AAAA;AAAA;AAAA;;;;;AAGH;;AAAA;AAAA;AAAA;AAAe;;AAAf;AAAP;AAGO;;AAAA;;;AAA2B;;AAA3B;AAAP;;;;;;;;;;;;;;AAEA;;;;;AAEO;AAAA;;;AAA2B;;AAA3B;AAAP;AACO;AAAA;;;AAA2B;;AAA3B;AAAP;AACA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AACO;;;AAA2B;;AAA3B;AAAP;AAEA;;;;;AAAA;;AAAA;AAKA;;AACO;AAAA;AAAA;AAAP;AA5DH;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 16 8"
    },
    "7": {
      "op": "bytecblock \"nested\" \"num_payments\" \"payments\" 0x151f7c75 0x70 0x6c \"box\" \"box_map\" 0x0000"
    },
    "62": {
      "op": "intc_1 // 1"
    },
    "63": {
      "op": "txn ApplicationID",
      "defined_out": [
        "lifted%return#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%0#0"
      ]
    },
    "65": {
      "op": "bnz main_after_if_else@2",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "68": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "lifted%return#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%1#1"
      ]
    },
    "70": {
      "op": "dup",
      "defined_out": [
        "lifted%return#0",
        "tmp%0#2",
        "tmp%1#1"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "71": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "lifted%return#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%1#1",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "72": {
      "op": "swap",
      "stack_out": [
        "lifted%return#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%1#1"
      ]
    },
    "73": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "74": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%1#0"
      ]
    },
    "75": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "aggregate%head%1#0",
        "lifted%return#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%1#0",
        "tmp%3#0"
      ]
    },
    "77": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%head%1#0",
        "lifted%return#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%1#0",
        "tmp%3#0",
        "1"
      ]
    },
    "78": {
      "op": "+",
      "defined_out": [
        "aggregate%head%1#0",
        "lifted%return#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%1#0",
        "tmp%4#0"
      ]
    },
    "79": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "aggregate%head%1#0",
        "lifted%return#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "81": {
      "op": "intc_1 // 1",
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "tmp%5#0",
        "1"
      ]
    },
    "82": {
      "op": "+",
      "defined_out": [
        "aggregate%head%1#0",
        "lifted%return#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "83": {
      "op": "swap",
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%1#0",
        "tmp%6#0",
        "tmp%4#0"
      ]
    },
    "84": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%2#0",
        "lifted%return#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%1#0",
        "tmp%6#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "85": {
      "op": "swap",
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%2#0",
        "tmp%6#0"
      ]
    },
    "86": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%2#0",
        "aggregate%val_as_bytes%3#0",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%2#0",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "87": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ]
    },
    "88": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "lifted%return#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%8#0"
      ]
    },
    "90": {
      "op": "intc_1 // 1",
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%8#0",
        "1"
      ]
    },
    "91": {
      "op": "+",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "lifted%return#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%9#0"
      ]
    },
    "92": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "lifted%return#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "94": {
      "op": "intc_1 // 1",
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%9#0",
        "tmp%10#0",
        "1"
      ]
    },
    "95": {
      "op": "+",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "lifted%return#0",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "96": {
      "op": "uncover 3",
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%3#0",
        "tmp%9#0",
        "tmp%11#0",
        "aggregate%head%1#0"
      ]
    },
    "98": {
      "op": "uncover 3",
      "stack_out": [
        "lifted%return#0",
        "tmp%9#0",
        "tmp%11#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ]
    },
    "100": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "lifted%return#0",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%9#0",
        "tmp%11#0",
        "aggregate%head%5#0"
      ]
    },
    "101": {
      "op": "uncover 2",
      "stack_out": [
        "lifted%return#0",
        "tmp%11#0",
        "aggregate%head%5#0",
        "tmp%9#0"
      ]
    },
    "103": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%5#0",
        "aggregate%val_as_bytes%4#0",
        "lifted%return#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%11#0",
        "aggregate%head%5#0",
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "104": {
      "op": "uncover 2",
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%5#0",
        "aggregate%val_as_bytes%4#0",
        "tmp%11#0"
      ]
    },
    "106": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%5#0",
        "aggregate%val_as_bytes%4#0",
        "aggregate%val_as_bytes%5#0",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%5#0",
        "aggregate%val_as_bytes%4#0",
        "aggregate%val_as_bytes%5#0"
      ]
    },
    "107": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "aggregate%head%7#0",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%5#0",
        "aggregate%head%7#0"
      ]
    },
    "108": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%8#0",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%8#0"
      ]
    },
    "109": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "aggregate%head%8#0",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%8#0",
        "\"nested\""
      ]
    },
    "110": {
      "op": "swap",
      "stack_out": [
        "lifted%return#0",
        "\"nested\"",
        "aggregate%head%8#0"
      ]
    },
    "111": {
      "op": "app_global_put",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "112": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "lifted%return#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%14#0"
      ]
    },
    "114": {
      "op": "dup",
      "defined_out": [
        "lifted%return#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%14#0",
        "tmp%13#0"
      ]
    },
    "115": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%6#0",
        "lifted%return#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%14#0",
        "aggregate%val_as_bytes%6#0"
      ]
    },
    "116": {
      "op": "swap",
      "stack_out": [
        "lifted%return#0",
        "aggregate%val_as_bytes%6#0",
        "tmp%14#0"
      ]
    },
    "117": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%6#0",
        "aggregate%val_as_bytes%7#0",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%val_as_bytes%6#0",
        "aggregate%val_as_bytes%7#0"
      ]
    },
    "118": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%10#0",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%10#0"
      ]
    },
    "119": {
      "op": "pushbytes 0x00160018001a000000000000",
      "defined_out": [
        "0x00160018001a000000000000",
        "aggregate%head%10#0",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%head%10#0",
        "0x00160018001a000000000000"
      ]
    },
    "133": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%2#0",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%concat%2#0"
      ]
    },
    "134": {
      "op": "pushbytes \"dyn\"",
      "defined_out": [
        "\"dyn\"",
        "aggregate%concat%2#0",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "aggregate%concat%2#0",
        "\"dyn\""
      ]
    },
    "139": {
      "op": "swap",
      "stack_out": [
        "lifted%return#0",
        "\"dyn\"",
        "aggregate%concat%2#0"
      ]
    },
    "140": {
      "op": "app_global_put",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "141": {
      "op": "bytec_1 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\"",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "\"num_payments\""
      ]
    },
    "142": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lifted%return#0",
        "\"num_payments\"",
        "0"
      ]
    },
    "143": {
      "op": "app_global_put",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "144": {
      "op": "pushint 96 // 96",
      "defined_out": [
        "96",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "96"
      ]
    },
    "146": {
      "op": "bzero",
      "defined_out": [
        "lifted%return#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%16#0"
      ]
    },
    "147": {
      "op": "bytec_2 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "lifted%return#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%16#0",
        "\"payments\""
      ]
    },
    "148": {
      "op": "swap",
      "stack_out": [
        "lifted%return#0",
        "\"payments\"",
        "tmp%16#0"
      ]
    },
    "149": {
      "op": "app_global_put",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "150": {
      "block": "main_after_if_else@2",
      "stack_in": [
        "lifted%return#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%0#2"
      ]
    },
    "152": {
      "op": "bz main_bare_routing@19",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "155": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%3#0"
      ]
    },
    "157": {
      "op": "!",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%4#1"
      ]
    },
    "158": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "159": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%6#1"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%6#1"
      ]
    },
    "161": {
      "op": "assert",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "162": {
      "op": "pushbytess 0x67a5a02d 0xd1276f81 0x0d2ab4c0 0xe8b5d56c 0x875901e5 0x4abb70f1 0xaf05f48f 0xe8d71c8c 0x01aaa39c 0x8313dee7 0x2ca849c1 0x3d8e707d // method \"test_imm_fixed_array()void\", method \"fixed_initialize()void\", method \"add_payment((address,uint64,uint64))void\", method \"increment_payment(uint64,uint64)void\", method \"create_storage(uint64)void\", method \"local_struct()(address,uint64,uint64)\", method \"delete_storage(uint64)void\", method \"struct_arg(uint64,(uint64,uint64))void\", method \"struct_return()(uint64,uint64)\", method \"tup_return()(uint64,uint64)\", method \"calculate_sum()uint64\", method \"test_arr((uint64,uint64)[])(uint64,uint64)[]\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(calculate_sum()uint64)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(test_arr((uint64,uint64)[])(uint64,uint64)[])",
        "Method(test_imm_fixed_array()void)",
        "Method(tup_return()(uint64,uint64))"
      ],
      "stack_out": [
        "lifted%return#0",
        "Method(test_imm_fixed_array()void)",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "Method(calculate_sum()uint64)",
        "Method(test_arr((uint64,uint64)[])(uint64,uint64)[])"
      ]
    },
    "224": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(calculate_sum()uint64)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(test_arr((uint64,uint64)[])(uint64,uint64)[])",
        "Method(test_imm_fixed_array()void)",
        "Method(tup_return()(uint64,uint64))",
        "tmp%7#1"
      ],
      "stack_out": [
        "lifted%return#0",
        "Method(test_imm_fixed_array()void)",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "Method(calculate_sum()uint64)",
        "Method(test_arr((uint64,uint64)[])(uint64,uint64)[])",
        "tmp%7#1"
      ]
    },
    "227": {
      "op": "match main_test_imm_fixed_array_route@6 main_fixed_initialize_route@7 add_payment increment_payment create_storage local_struct delete_storage struct_arg struct_return tup_return calculate_sum test_arr",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "253": {
      "op": "err"
    },
    "254": {
      "block": "main_fixed_initialize_route@7",
      "stack_in": [
        "lifted%return#0"
      ],
      "op": "return",
      "defined_out": [
        "lifted%return#0"
      ]
    },
    "255": {
      "block": "main_test_imm_fixed_array_route@6",
      "stack_in": [
        "lifted%return#0"
      ],
      "op": "return",
      "defined_out": [
        "lifted%return#0"
      ]
    },
    "256": {
      "block": "main_bare_routing@19",
      "stack_in": [
        "lifted%return#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%9#0"
      ]
    },
    "258": {
      "op": "!",
      "defined_out": [
        "not%tmp%9#1"
      ],
      "stack_out": [
        "lifted%return#0",
        "not%tmp%9#1"
      ]
    },
    "259": {
      "op": "assert",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "260": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%10#0"
      ]
    },
    "262": {
      "op": "!",
      "defined_out": [
        "tmp%11#1"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%11#1"
      ]
    },
    "263": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "264": {
      "op": "return",
      "defined_out": [
        "lifted%return#0"
      ]
    },
    "265": {
      "subroutine": "test_cases.mutable_native_types.contract.sum_frozen_arr",
      "params": {
        "arr#0": "bytes"
      },
      "block": "sum_frozen_arr",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "268": {
      "op": "intc_0 // 0"
    },
    "269": {
      "op": "frame_dig -1"
    },
    "271": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr#0 (copy)",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "arr#0 (copy)",
        "0"
      ]
    },
    "272": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0"
      ]
    },
    "273": {
      "op": "intc_0 // 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "274": {
      "block": "sum_frozen_arr_for_header@1",
      "stack_in": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "276": {
      "op": "frame_dig 1",
      "defined_out": [
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "278": {
      "op": "<",
      "defined_out": [
        "aggregate%array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "279": {
      "op": "bz sum_frozen_arr_after_for@4",
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "282": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%array_length%0#0",
        "arr#0 (copy)",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "arr#0 (copy)"
      ]
    },
    "284": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "287": {
      "op": "frame_dig 2",
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0"
      ]
    },
    "289": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0 (copy)",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "290": {
      "op": "cover 2",
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "292": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0 (copy)",
        "16"
      ]
    },
    "293": {
      "op": "*",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "294": {
      "op": "intc_2 // 16",
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "16"
      ]
    },
    "295": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%encoded_element%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "296": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)"
      ]
    },
    "297": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%array_length%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "0"
      ]
    },
    "298": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%encoded_element%0#0",
        "item_index_internal%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%encoded_element%0#0",
        "values%0#0"
      ]
    },
    "299": {
      "op": "frame_dig 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%encoded_element%0#0",
        "item_index_internal%0#0",
        "total#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%encoded_element%0#0",
        "values%0#0",
        "total#0"
      ]
    },
    "301": {
      "op": "+",
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%encoded_element%0#0",
        "total#0"
      ]
    },
    "302": {
      "op": "swap",
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "total#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "303": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%array_length%0#0",
        "aggregate%encoded_element%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "total#0",
        "aggregate%encoded_element%0#0",
        "8"
      ]
    },
    "304": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "total#0",
        "values%1#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "total#0",
        "values%1#0"
      ]
    },
    "305": {
      "op": "+",
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "306": {
      "op": "frame_bury 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "308": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "309": {
      "op": "+",
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "310": {
      "op": "frame_bury 2",
      "defined_out": [
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "312": {
      "op": "b sum_frozen_arr_for_header@1"
    },
    "315": {
      "block": "sum_frozen_arr_after_for@4",
      "stack_in": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "316": {
      "subroutine": "test_cases.mutable_native_types.contract.do_something",
      "params": {
        "pay#0": "bytes"
      },
      "block": "do_something",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "319": {
      "op": "frame_dig -1",
      "defined_out": [
        "pay#0 (copy)"
      ],
      "stack_out": [
        "pay#0 (copy)"
      ]
    },
    "321": {
      "retsub": true,
      "op": "retsub"
    },
    "322": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.add_payment[routing]",
      "params": {},
      "block": "add_payment",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "pay#0"
      ],
      "stack_out": [
        "pay#0"
      ]
    },
    "325": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "pay#0"
      ],
      "stack_out": [
        "pay#0",
        "0"
      ]
    },
    "326": {
      "op": "bytec_1 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\"",
        "0",
        "pay#0"
      ],
      "stack_out": [
        "pay#0",
        "0",
        "\"num_payments\""
      ]
    },
    "327": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "pay#0"
      ],
      "stack_out": [
        "pay#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "328": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "pay#0",
        "maybe_value%0#0"
      ]
    },
    "329": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "pay#0"
      ],
      "stack_out": [
        "pay#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "330": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "pay#0"
      ],
      "stack_out": [
        "pay#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "2"
      ]
    },
    "332": {
      "op": "<",
      "defined_out": [
        "maybe_value%0#0",
        "pay#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "pay#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "333": {
      "error": "too many payments",
      "op": "assert // too many payments",
      "stack_out": [
        "pay#0",
        "maybe_value%0#0"
      ]
    },
    "334": {
      "op": "intc_0 // 0",
      "stack_out": [
        "pay#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "335": {
      "op": "bytec_2 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "0",
        "maybe_value%0#0",
        "pay#0"
      ],
      "stack_out": [
        "pay#0",
        "maybe_value%0#0",
        "0",
        "\"payments\""
      ]
    },
    "336": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "pay#0"
      ],
      "stack_out": [
        "pay#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "337": {
      "error": "check self.payments exists",
      "op": "assert // check self.payments exists",
      "stack_out": [
        "pay#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "338": {
      "op": "swap",
      "stack_out": [
        "pay#0",
        "maybe_value%1#0",
        "maybe_value%0#0"
      ]
    },
    "339": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "pay#0"
      ],
      "stack_out": [
        "pay#0",
        "maybe_value%1#0",
        "maybe_value%0#0",
        "48"
      ]
    },
    "341": {
      "op": "*",
      "defined_out": [
        "aggregate%write_offset%0#0",
        "maybe_value%1#0",
        "pay#0"
      ],
      "stack_out": [
        "pay#0",
        "maybe_value%1#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "342": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%write_offset%0#0",
        "pay#0"
      ]
    },
    "344": {
      "error": "index access is out of bounds",
      "op": "replace3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%updated_array%0#0"
      ],
      "stack_out": [
        "aggregate%updated_array%0#0"
      ]
    },
    "345": {
      "op": "bytec_2 // \"payments\"",
      "stack_out": [
        "aggregate%updated_array%0#0",
        "\"payments\""
      ]
    },
    "346": {
      "op": "swap",
      "stack_out": [
        "\"payments\"",
        "aggregate%updated_array%0#0"
      ]
    },
    "347": {
      "op": "app_global_put",
      "stack_out": []
    },
    "348": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "349": {
      "op": "bytec_1 // \"num_payments\"",
      "stack_out": [
        "0",
        "\"num_payments\""
      ]
    },
    "350": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "351": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "352": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "353": {
      "op": "+",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "354": {
      "op": "bytec_1 // \"num_payments\"",
      "stack_out": [
        "tmp%1#0",
        "\"num_payments\""
      ]
    },
    "355": {
      "op": "swap",
      "stack_out": [
        "\"num_payments\"",
        "tmp%1#0"
      ]
    },
    "356": {
      "op": "app_global_put",
      "stack_out": []
    },
    "357": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "358": {
      "op": "return",
      "stack_out": []
    },
    "359": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.increment_payment[routing]",
      "params": {},
      "block": "increment_payment",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "362": {
      "op": "btoi",
      "defined_out": [
        "index#0"
      ],
      "stack_out": [
        "index#0"
      ]
    },
    "363": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "366": {
      "op": "btoi",
      "defined_out": [
        "amt#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "amt#0"
      ]
    },
    "367": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "amt#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "amt#0",
        "0"
      ]
    },
    "368": {
      "op": "bytec_1 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\"",
        "0",
        "amt#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "amt#0",
        "0",
        "\"num_payments\""
      ]
    },
    "369": {
      "op": "app_global_get_ex",
      "defined_out": [
        "amt#0",
        "index#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "index#0",
        "amt#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "370": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "index#0",
        "amt#0",
        "maybe_value%0#0"
      ]
    },
    "371": {
      "op": "dig 2",
      "defined_out": [
        "amt#0",
        "index#0",
        "index#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "index#0",
        "amt#0",
        "maybe_value%0#0",
        "index#0 (copy)"
      ]
    },
    "373": {
      "op": ">",
      "defined_out": [
        "amt#0",
        "index#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "index#0",
        "amt#0",
        "tmp%0#1"
      ]
    },
    "374": {
      "error": "invalid payment index",
      "op": "assert // invalid payment index",
      "stack_out": [
        "index#0",
        "amt#0"
      ]
    },
    "375": {
      "op": "intc_0 // 0",
      "stack_out": [
        "index#0",
        "amt#0",
        "0"
      ]
    },
    "376": {
      "op": "bytec_2 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "0",
        "amt#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "amt#0",
        "0",
        "\"payments\""
      ]
    },
    "377": {
      "op": "app_global_get_ex",
      "defined_out": [
        "amt#0",
        "index#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "index#0",
        "amt#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "378": {
      "error": "check self.payments exists",
      "op": "assert // check self.payments exists",
      "stack_out": [
        "index#0",
        "amt#0",
        "maybe_value%1#0"
      ]
    },
    "379": {
      "op": "uncover 2",
      "stack_out": [
        "amt#0",
        "maybe_value%1#0",
        "index#0"
      ]
    },
    "381": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "amt#0",
        "index#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "amt#0",
        "maybe_value%1#0",
        "index#0",
        "48"
      ]
    },
    "383": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "amt#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "amt#0",
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "384": {
      "op": "dup2",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%bytes_offset%0#0 (copy)",
        "amt#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "amt#0",
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "maybe_value%1#0 (copy)",
        "aggregate%bytes_offset%0#0 (copy)"
      ]
    },
    "385": {
      "op": "pushint 48 // 48",
      "stack_out": [
        "amt#0",
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "maybe_value%1#0 (copy)",
        "aggregate%bytes_offset%0#0 (copy)",
        "48"
      ]
    },
    "387": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "amt#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "amt#0",
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "388": {
      "op": "dup",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "amt#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "amt#0",
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)"
      ]
    },
    "389": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "amt#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "amt#0",
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "40"
      ]
    },
    "391": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "amt#0",
        "maybe_value%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "amt#0",
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "values%0#0"
      ]
    },
    "392": {
      "op": "uncover 4",
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "values%0#0",
        "amt#0"
      ]
    },
    "394": {
      "op": "+",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "maybe_value%1#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "tmp%1#1"
      ]
    },
    "395": {
      "op": "itob",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "396": {
      "op": "replace2 40",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%updated_data%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%updated_data%0#0"
      ]
    },
    "398": {
      "error": "index access is out of bounds",
      "op": "replace3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%updated_array%0#0"
      ],
      "stack_out": [
        "aggregate%updated_array%0#0"
      ]
    },
    "399": {
      "op": "bytec_2 // \"payments\"",
      "stack_out": [
        "aggregate%updated_array%0#0",
        "\"payments\""
      ]
    },
    "400": {
      "op": "swap",
      "stack_out": [
        "\"payments\"",
        "aggregate%updated_array%0#0"
      ]
    },
    "401": {
      "op": "app_global_put",
      "stack_out": []
    },
    "402": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "403": {
      "op": "return",
      "stack_out": []
    },
    "404": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.create_storage[routing]",
      "params": {},
      "block": "create_storage",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "407": {
      "op": "btoi",
      "defined_out": [
        "box_key#0"
      ],
      "stack_out": [
        "box_key#0"
      ]
    },
    "408": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "box_key#0"
      ],
      "stack_out": [
        "box_key#0",
        "0"
      ]
    },
    "409": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0",
        "box_key#0"
      ],
      "stack_out": [
        "box_key#0",
        "0",
        "\"nested\""
      ]
    },
    "410": {
      "op": "app_global_get_ex",
      "defined_out": [
        "box_key#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_key#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "411": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "box_key#0",
        "maybe_value%0#0"
      ]
    },
    "412": {
      "op": "bytec 4 // 0x70",
      "defined_out": [
        "0x70",
        "box_key#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_key#0",
        "maybe_value%0#0",
        "0x70"
      ]
    },
    "414": {
      "op": "swap",
      "stack_out": [
        "box_key#0",
        "0x70",
        "maybe_value%0#0"
      ]
    },
    "415": {
      "op": "app_global_put",
      "stack_out": [
        "box_key#0"
      ]
    },
    "416": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_key#0",
        "0"
      ]
    },
    "417": {
      "op": "bytec_0 // \"nested\"",
      "stack_out": [
        "box_key#0",
        "0",
        "\"nested\""
      ]
    },
    "418": {
      "op": "app_global_get_ex",
      "defined_out": [
        "box_key#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "box_key#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "419": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "box_key#0",
        "maybe_value%1#0"
      ]
    },
    "420": {
      "op": "txn Sender",
      "defined_out": [
        "box_key#0",
        "maybe_value%1#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "box_key#0",
        "maybe_value%1#0",
        "tmp%0#1"
      ]
    },
    "422": {
      "op": "bytec 5 // 0x6c",
      "defined_out": [
        "0x6c",
        "box_key#0",
        "maybe_value%1#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "box_key#0",
        "maybe_value%1#0",
        "tmp%0#1",
        "0x6c"
      ]
    },
    "424": {
      "op": "dig 2",
      "defined_out": [
        "0x6c",
        "box_key#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "box_key#0",
        "maybe_value%1#0",
        "tmp%0#1",
        "0x6c",
        "maybe_value%1#0 (copy)"
      ]
    },
    "426": {
      "op": "app_local_put",
      "stack_out": [
        "box_key#0",
        "maybe_value%1#0"
      ]
    },
    "427": {
      "op": "bytec 6 // \"box\"",
      "defined_out": [
        "\"box\"",
        "box_key#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "box_key#0",
        "maybe_value%1#0",
        "\"box\""
      ]
    },
    "429": {
      "op": "pushint 2064 // 2064",
      "defined_out": [
        "\"box\"",
        "2064",
        "box_key#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "box_key#0",
        "maybe_value%1#0",
        "\"box\"",
        "2064"
      ]
    },
    "432": {
      "op": "box_create",
      "defined_out": [
        "box_key#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_key#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "433": {
      "error": "expected box to not exist",
      "op": "assert // expected box to not exist",
      "stack_out": [
        "box_key#0",
        "maybe_value%1#0"
      ]
    },
    "434": {
      "op": "extract 0 16",
      "defined_out": [
        "aggregate%extract%0#0",
        "box_key#0"
      ],
      "stack_out": [
        "box_key#0",
        "aggregate%extract%0#0"
      ]
    },
    "437": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "box_key#0"
      ]
    },
    "438": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "encoded_value%0#0"
      ]
    },
    "439": {
      "op": "bytec 7 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "aggregate%extract%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "encoded_value%0#0",
        "\"box_map\""
      ]
    },
    "441": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "\"box_map\"",
        "encoded_value%0#0"
      ]
    },
    "442": {
      "op": "concat",
      "defined_out": [
        "aggregate%extract%0#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "443": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#0",
        "box_prefixed_key%0#0",
        "0"
      ]
    },
    "444": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "0",
        "aggregate%extract%0#0"
      ]
    },
    "446": {
      "op": "box_replace",
      "stack_out": []
    },
    "447": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "448": {
      "op": "return",
      "stack_out": []
    },
    "449": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.local_struct[routing]",
      "params": {},
      "block": "local_struct",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "451": {
      "op": "pushint 1234 // 1234",
      "defined_out": [
        "1234",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "1234"
      ]
    },
    "454": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "455": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "456": {
      "op": "pushint 567 // 567",
      "defined_out": [
        "567",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "567"
      ]
    },
    "459": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "460": {
      "op": "concat",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "461": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "462": {
      "op": "extract 0 32",
      "defined_out": [
        "a#0",
        "foo#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0"
      ]
    },
    "465": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "foo#0",
        "a#0 (copy)"
      ]
    },
    "467": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "a#0",
        "a#0 (copy)",
        "foo#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0",
        "a#0 (copy)",
        "32"
      ]
    },
    "469": {
      "op": "extract_uint64",
      "defined_out": [
        "a#0",
        "bar#0",
        "foo#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0",
        "bar#0"
      ]
    },
    "470": {
      "op": "dig 2",
      "stack_out": [
        "a#0",
        "foo#0",
        "bar#0",
        "a#0 (copy)"
      ]
    },
    "472": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "a#0",
        "a#0 (copy)",
        "bar#0",
        "foo#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0",
        "bar#0",
        "a#0 (copy)",
        "40"
      ]
    },
    "474": {
      "op": "extract_uint64",
      "defined_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "foo#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0",
        "bar#0",
        "baz#0"
      ]
    },
    "475": {
      "op": "global ZeroAddress",
      "defined_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "foo#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0",
        "bar#0",
        "baz#0",
        "tmp%2#0"
      ]
    },
    "477": {
      "op": "uncover 3",
      "stack_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "tmp%2#0",
        "foo#0"
      ]
    },
    "479": {
      "op": "!=",
      "defined_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "tmp%3#0"
      ]
    },
    "480": {
      "error": "use foo",
      "op": "assert // use foo",
      "stack_out": [
        "a#0",
        "bar#0",
        "baz#0"
      ]
    },
    "481": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "baz#0",
        "bar#0"
      ]
    },
    "482": {
      "error": "use bar",
      "op": "assert // use bar",
      "stack_out": [
        "a#0",
        "baz#0"
      ]
    },
    "483": {
      "error": "use baz",
      "op": "assert // use baz",
      "stack_out": [
        "a#0"
      ]
    },
    "484": {
      "callsub": "test_cases.mutable_native_types.contract.do_something",
      "op": "callsub do_something"
    },
    "487": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "0x151f7c75"
      ]
    },
    "488": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "a#0"
      ]
    },
    "489": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "490": {
      "op": "log",
      "stack_out": []
    },
    "491": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "492": {
      "op": "return",
      "stack_out": []
    },
    "493": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.delete_storage[routing]",
      "params": {},
      "block": "delete_storage",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "496": {
      "op": "btoi",
      "defined_out": [
        "box_key#0"
      ],
      "stack_out": [
        "box_key#0"
      ]
    },
    "497": {
      "op": "bytec 4 // 0x70",
      "defined_out": [
        "0x70",
        "box_key#0"
      ],
      "stack_out": [
        "box_key#0",
        "0x70"
      ]
    },
    "499": {
      "op": "app_global_del",
      "stack_out": [
        "box_key#0"
      ]
    },
    "500": {
      "op": "txn Sender",
      "defined_out": [
        "box_key#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "box_key#0",
        "tmp%0#1"
      ]
    },
    "502": {
      "op": "bytec 5 // 0x6c",
      "defined_out": [
        "0x6c",
        "box_key#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "box_key#0",
        "tmp%0#1",
        "0x6c"
      ]
    },
    "504": {
      "op": "app_local_del",
      "stack_out": [
        "box_key#0"
      ]
    },
    "505": {
      "op": "bytec 6 // \"box\"",
      "defined_out": [
        "\"box\"",
        "box_key#0"
      ],
      "stack_out": [
        "box_key#0",
        "\"box\""
      ]
    },
    "507": {
      "op": "box_del",
      "defined_out": [
        "box_key#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_key#0",
        "{box_del}"
      ]
    },
    "508": {
      "op": "pop",
      "stack_out": [
        "box_key#0"
      ]
    },
    "509": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "510": {
      "op": "bytec 7 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"box_map\""
      ]
    },
    "512": {
      "op": "swap",
      "stack_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ]
    },
    "513": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "514": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "515": {
      "op": "pop",
      "stack_out": []
    },
    "516": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "517": {
      "op": "return",
      "stack_out": []
    },
    "518": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.struct_arg[routing]",
      "params": {},
      "block": "struct_arg",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "521": {
      "op": "btoi",
      "defined_out": [
        "box_key#0"
      ],
      "stack_out": [
        "box_key#0"
      ]
    },
    "522": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "box_key#0"
      ],
      "stack_out": [
        "box_key#0",
        "a#0"
      ]
    },
    "525": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "a#0",
        "box_key#0"
      ],
      "stack_out": [
        "box_key#0",
        "a#0",
        "0"
      ]
    },
    "526": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0",
        "a#0",
        "box_key#0"
      ],
      "stack_out": [
        "box_key#0",
        "a#0",
        "0",
        "\"nested\""
      ]
    },
    "527": {
      "op": "app_global_get_ex",
      "defined_out": [
        "a#0",
        "box_key#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_key#0",
        "a#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "528": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "box_key#0",
        "a#0",
        "maybe_value%0#0"
      ]
    },
    "529": {
      "op": "dig 1",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "box_key#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_key#0",
        "a#0",
        "maybe_value%0#0",
        "a#0 (copy)"
      ]
    },
    "531": {
      "op": "replace2 0",
      "defined_out": [
        "a#0",
        "aggregate%updated_data%0#0",
        "box_key#0"
      ],
      "stack_out": [
        "box_key#0",
        "a#0",
        "aggregate%updated_data%0#0"
      ]
    },
    "533": {
      "op": "bytec_0 // \"nested\"",
      "stack_out": [
        "box_key#0",
        "a#0",
        "aggregate%updated_data%0#0",
        "\"nested\""
      ]
    },
    "534": {
      "op": "swap",
      "stack_out": [
        "box_key#0",
        "a#0",
        "\"nested\"",
        "aggregate%updated_data%0#0"
      ]
    },
    "535": {
      "op": "app_global_put",
      "stack_out": [
        "box_key#0",
        "a#0"
      ]
    },
    "536": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_key#0",
        "a#0",
        "0"
      ]
    },
    "537": {
      "op": "bytec 4 // 0x70",
      "defined_out": [
        "0",
        "0x70",
        "a#0",
        "box_key#0"
      ],
      "stack_out": [
        "box_key#0",
        "a#0",
        "0",
        "0x70"
      ]
    },
    "539": {
      "op": "app_global_get_ex",
      "defined_out": [
        "a#0",
        "box_key#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "box_key#0",
        "a#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "540": {
      "error": "check self.nested_proxy exists",
      "op": "assert // check self.nested_proxy exists",
      "stack_out": [
        "box_key#0",
        "a#0",
        "maybe_value%1#0"
      ]
    },
    "541": {
      "op": "dig 1",
      "stack_out": [
        "box_key#0",
        "a#0",
        "maybe_value%1#0",
        "a#0 (copy)"
      ]
    },
    "543": {
      "op": "replace2 0",
      "defined_out": [
        "a#0",
        "aggregate%updated_data%1#0",
        "box_key#0"
      ],
      "stack_out": [
        "box_key#0",
        "a#0",
        "aggregate%updated_data%1#0"
      ]
    },
    "545": {
      "op": "bytec 4 // 0x70",
      "stack_out": [
        "box_key#0",
        "a#0",
        "aggregate%updated_data%1#0",
        "0x70"
      ]
    },
    "547": {
      "op": "swap",
      "stack_out": [
        "box_key#0",
        "a#0",
        "0x70",
        "aggregate%updated_data%1#0"
      ]
    },
    "548": {
      "op": "app_global_put",
      "stack_out": [
        "box_key#0",
        "a#0"
      ]
    },
    "549": {
      "op": "txn Sender",
      "defined_out": [
        "a#0",
        "box_key#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "box_key#0",
        "a#0",
        "tmp%0#1"
      ]
    },
    "551": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "box_key#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "box_key#0",
        "a#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "552": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_key#0",
        "a#0",
        "tmp%0#1",
        "tmp%0#1 (copy)",
        "0"
      ]
    },
    "553": {
      "op": "bytec 5 // 0x6c",
      "defined_out": [
        "0",
        "0x6c",
        "a#0",
        "box_key#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "box_key#0",
        "a#0",
        "tmp%0#1",
        "tmp%0#1 (copy)",
        "0",
        "0x6c"
      ]
    },
    "555": {
      "op": "app_local_get_ex",
      "defined_out": [
        "a#0",
        "box_key#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "box_key#0",
        "a#0",
        "tmp%0#1",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "556": {
      "error": "check self.nested_local exists for account",
      "op": "assert // check self.nested_local exists for account",
      "stack_out": [
        "box_key#0",
        "a#0",
        "tmp%0#1",
        "maybe_value%2#0"
      ]
    },
    "557": {
      "op": "dig 2",
      "stack_out": [
        "box_key#0",
        "a#0",
        "tmp%0#1",
        "maybe_value%2#0",
        "a#0 (copy)"
      ]
    },
    "559": {
      "op": "replace2 0",
      "defined_out": [
        "a#0",
        "aggregate%updated_data%2#0",
        "box_key#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "box_key#0",
        "a#0",
        "tmp%0#1",
        "aggregate%updated_data%2#0"
      ]
    },
    "561": {
      "op": "bytec 5 // 0x6c"
    },
    "563": {
      "op": "swap",
      "stack_out": [
        "box_key#0",
        "a#0",
        "tmp%0#1",
        "0x6c",
        "aggregate%updated_data%2#0"
      ]
    },
    "564": {
      "op": "app_local_put",
      "stack_out": [
        "box_key#0",
        "a#0"
      ]
    },
    "565": {
      "op": "bytec 6 // \"box\"",
      "defined_out": [
        "\"box\"",
        "a#0",
        "box_key#0"
      ],
      "stack_out": [
        "box_key#0",
        "a#0",
        "\"box\""
      ]
    },
    "567": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_key#0",
        "a#0",
        "\"box\"",
        "0"
      ]
    },
    "568": {
      "op": "dig 2",
      "stack_out": [
        "box_key#0",
        "a#0",
        "\"box\"",
        "0",
        "a#0 (copy)"
      ]
    },
    "570": {
      "op": "box_replace",
      "stack_out": [
        "box_key#0",
        "a#0"
      ]
    },
    "571": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "box_key#0"
      ]
    },
    "572": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "a#0",
        "encoded_value%0#0"
      ]
    },
    "573": {
      "op": "bytec 7 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "a#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "a#0",
        "encoded_value%0#0",
        "\"box_map\""
      ]
    },
    "575": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "\"box_map\"",
        "encoded_value%0#0"
      ]
    },
    "576": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "a#0",
        "box_prefixed_key%0#0"
      ]
    },
    "577": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "box_prefixed_key%0#0",
        "0"
      ]
    },
    "578": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "0",
        "a#0"
      ]
    },
    "580": {
      "op": "box_replace",
      "stack_out": []
    },
    "581": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "582": {
      "op": "return",
      "stack_out": []
    },
    "583": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.struct_return[routing]",
      "params": {},
      "block": "struct_return",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "584": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "585": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "586": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "587": {
      "op": "extract 0 16",
      "defined_out": [
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0"
      ]
    },
    "590": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "0x151f7c75"
      ]
    },
    "591": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%extract%0#0"
      ]
    },
    "592": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "593": {
      "op": "log",
      "stack_out": []
    },
    "594": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "595": {
      "op": "return",
      "stack_out": []
    },
    "596": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.tup_return[routing]",
      "params": {},
      "block": "tup_return",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "597": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "598": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "599": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "600": {
      "op": "extract 32 16",
      "defined_out": [
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0"
      ]
    },
    "603": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "0x151f7c75"
      ]
    },
    "604": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%extract%0#0"
      ]
    },
    "605": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "606": {
      "op": "log",
      "stack_out": []
    },
    "607": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "608": {
      "op": "return",
      "stack_out": []
    },
    "609": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.calculate_sum[routing]",
      "params": {},
      "block": "calculate_sum",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "610": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "611": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "612": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "613": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "614": {
      "op": "extract 0 16",
      "defined_out": [
        "fixed_a#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "fixed_a#0"
      ]
    },
    "617": {
      "op": "swap",
      "stack_out": [
        "fixed_a#0",
        "maybe_value%0#0"
      ]
    },
    "618": {
      "op": "extract 16 16",
      "defined_out": [
        "fixed_a#0",
        "fixed_b#0"
      ],
      "stack_out": [
        "fixed_a#0",
        "fixed_b#0"
      ]
    },
    "621": {
      "op": "dig 1",
      "defined_out": [
        "fixed_a#0",
        "fixed_a#0 (copy)",
        "fixed_b#0"
      ],
      "stack_out": [
        "fixed_a#0",
        "fixed_b#0",
        "fixed_a#0 (copy)"
      ]
    },
    "623": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fixed_a#0",
        "fixed_b#0",
        "fixed_a#0 (copy)",
        "0"
      ]
    },
    "624": {
      "op": "extract_uint64",
      "defined_out": [
        "fixed_a#0",
        "fixed_b#0",
        "values%0#0"
      ],
      "stack_out": [
        "fixed_a#0",
        "fixed_b#0",
        "values%0#0"
      ]
    },
    "625": {
      "op": "uncover 2",
      "stack_out": [
        "fixed_b#0",
        "values%0#0",
        "fixed_a#0"
      ]
    },
    "627": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "fixed_a#0",
        "fixed_b#0",
        "values%0#0"
      ],
      "stack_out": [
        "fixed_b#0",
        "values%0#0",
        "fixed_a#0",
        "8"
      ]
    },
    "628": {
      "op": "extract_uint64",
      "defined_out": [
        "fixed_b#0",
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "fixed_b#0",
        "values%0#0",
        "values%1#0"
      ]
    },
    "629": {
      "op": "+",
      "defined_out": [
        "fixed_b#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "fixed_b#0",
        "tmp%0#2"
      ]
    },
    "630": {
      "op": "dig 1",
      "defined_out": [
        "fixed_b#0",
        "fixed_b#0 (copy)",
        "tmp%0#2"
      ],
      "stack_out": [
        "fixed_b#0",
        "tmp%0#2",
        "fixed_b#0 (copy)"
      ]
    },
    "632": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fixed_b#0",
        "tmp%0#2",
        "fixed_b#0 (copy)",
        "0"
      ]
    },
    "633": {
      "op": "extract_uint64",
      "stack_out": [
        "fixed_b#0",
        "tmp%0#2",
        "values%0#0"
      ]
    },
    "634": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#2",
        "values%0#0",
        "fixed_b#0"
      ]
    },
    "636": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%0#2",
        "values%0#0",
        "fixed_b#0",
        "8"
      ]
    },
    "637": {
      "op": "extract_uint64",
      "stack_out": [
        "tmp%0#2",
        "values%0#0",
        "values%1#0"
      ]
    },
    "638": {
      "op": "+",
      "defined_out": [
        "tmp%0#2",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%0#3"
      ]
    },
    "639": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "640": {
      "op": "dupn 2",
      "defined_out": [
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "642": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#0",
        "result#0 (copy)",
        "100"
      ]
    },
    "644": {
      "op": "<",
      "defined_out": [
        "result#0",
        "result#6",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%3#0"
      ]
    },
    "645": {
      "op": "bz calculate_sum_after_if_else@3",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "648": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "0"
      ]
    },
    "649": {
      "op": "bytec_0 // \"nested\"",
      "stack_out": [
        "result#0",
        "result#6",
        "0",
        "\"nested\""
      ]
    },
    "650": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "651": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0"
      ]
    },
    "652": {
      "op": "extract 32 16",
      "defined_out": [
        "aggregate%extract%2#0",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%extract%2#0"
      ]
    },
    "655": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract%2#0",
        "aggregate%extract%2#0 (copy)",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%extract%2#0",
        "aggregate%extract%2#0 (copy)"
      ]
    },
    "656": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%extract%2#0",
        "aggregate%extract%2#0 (copy)",
        "0"
      ]
    },
    "657": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%extract%2#0",
        "c#0",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%extract%2#0",
        "c#0"
      ]
    },
    "658": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "c#0",
        "aggregate%extract%2#0"
      ]
    },
    "659": {
      "op": "intc_3 // 8",
      "stack_out": [
        "result#0",
        "result#6",
        "c#0",
        "aggregate%extract%2#0",
        "8"
      ]
    },
    "660": {
      "op": "extract_uint64",
      "defined_out": [
        "c#0",
        "d#0",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "c#0",
        "d#0"
      ]
    },
    "661": {
      "op": "dig 3",
      "stack_out": [
        "result#0",
        "result#6",
        "c#0",
        "d#0",
        "result#0"
      ]
    },
    "663": {
      "op": "uncover 2",
      "stack_out": [
        "result#0",
        "result#6",
        "d#0",
        "result#0",
        "c#0"
      ]
    },
    "665": {
      "op": "+",
      "stack_out": [
        "result#0",
        "result#6",
        "d#0",
        "result#0"
      ]
    },
    "666": {
      "op": "+",
      "stack_out": [
        "result#0",
        "result#6",
        "result#6"
      ]
    },
    "667": {
      "op": "bury 1",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "669": {
      "block": "calculate_sum_after_if_else@3",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "dup",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "result#0"
      ]
    },
    "670": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "671": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "672": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "673": {
      "op": "concat",
      "defined_out": [
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%2#0"
      ]
    },
    "674": {
      "op": "log",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "675": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "1"
      ]
    },
    "676": {
      "op": "return",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "677": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.test_arr[routing]",
      "params": {},
      "block": "test_arr",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0"
      ]
    },
    "680": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "arr#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "arr#0 (copy)"
      ]
    },
    "681": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr#0",
        "arr#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "arr#0 (copy)",
        "0"
      ]
    },
    "682": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0"
      ]
    },
    "683": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_length%0#0 (copy)",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "aggregate%array_length%0#0 (copy)"
      ]
    },
    "684": {
      "op": "!",
      "defined_out": [
        "aggregate%array_length%0#0",
        "arr#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "tmp%1#1"
      ]
    },
    "685": {
      "error": "expected empty array",
      "op": "assert // expected empty array",
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0"
      ]
    },
    "686": {
      "op": "dig 1",
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "arr#0 (copy)"
      ]
    },
    "688": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "arr#0",
        "extract_to_end%0#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "extract_to_end%0#0"
      ]
    },
    "691": {
      "op": "dup",
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "extract_to_end%0#0",
        "extract_to_end%0#0 (copy)"
      ]
    },
    "692": {
      "op": "len",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%bytes_len%0#0",
        "arr#0",
        "extract_to_end%0#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "extract_to_end%0#0",
        "aggregate%bytes_len%0#0"
      ]
    },
    "693": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "aggregate%array_length%0#0",
        "aggregate%bytes_len%0#0",
        "arr#0",
        "extract_to_end%0#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "extract_to_end%0#0",
        "aggregate%bytes_len%0#0",
        "16"
      ]
    },
    "694": {
      "op": "/",
      "defined_out": [
        "aggregate%array_len%0#0",
        "aggregate%array_length%0#0",
        "arr#0",
        "extract_to_end%0#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "extract_to_end%0#0",
        "aggregate%array_len%0#0"
      ]
    },
    "695": {
      "op": "dig 2",
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "extract_to_end%0#0",
        "aggregate%array_len%0#0",
        "aggregate%array_length%0#0 (copy)"
      ]
    },
    "697": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_len%0#0",
        "aggregate%array_len%0#0 (copy)",
        "aggregate%array_length%0#0",
        "aggregate%array_length%0#0 (copy)",
        "arr#0",
        "extract_to_end%0#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "extract_to_end%0#0",
        "aggregate%array_len%0#0",
        "aggregate%array_length%0#0 (copy)",
        "aggregate%array_len%0#0 (copy)"
      ]
    },
    "699": {
      "op": "==",
      "defined_out": [
        "aggregate%array_len%0#0",
        "aggregate%array_length%0#0",
        "arr#0",
        "extract_to_end%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "extract_to_end%0#0",
        "aggregate%array_len%0#0",
        "tmp%6#0"
      ]
    },
    "700": {
      "error": "expected arrays to be the same length",
      "op": "assert // expected arrays to be the same length",
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "extract_to_end%0#0",
        "aggregate%array_len%0#0"
      ]
    },
    "701": {
      "op": "itob",
      "defined_out": [
        "aggregate%array_length%0#0",
        "arr#0",
        "as_bytes%0#0",
        "extract_to_end%0#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "extract_to_end%0#0",
        "as_bytes%0#0"
      ]
    },
    "702": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%array_length%0#0",
        "arr#0",
        "as_u16_bytes%0#0",
        "extract_to_end%0#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "extract_to_end%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "705": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "as_u16_bytes%0#0",
        "extract_to_end%0#0"
      ]
    },
    "706": {
      "op": "concat",
      "defined_out": [
        "aggregate%array_length%0#0",
        "arr#0",
        "arr5#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "arr5#0"
      ]
    },
    "707": {
      "op": "dig 2",
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "arr5#0",
        "arr#0 (copy)"
      ]
    },
    "709": {
      "op": "==",
      "defined_out": [
        "aggregate%array_length%0#0",
        "arr#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "tmp%8#0"
      ]
    },
    "710": {
      "error": "expected arrays to be the same",
      "op": "assert // expected arrays to be the same",
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0"
      ]
    },
    "711": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "aggregate%array_length%0#0",
        "arr#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "tmp%12#0"
      ]
    },
    "713": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%array_length%0#0",
        "arr#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "tmp%12#0",
        "1"
      ]
    },
    "714": {
      "op": "+",
      "defined_out": [
        "aggregate%array_length%0#0",
        "arr#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "tmp%13#0"
      ]
    },
    "715": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "aggregate%array_length%0#0",
        "arr#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "717": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "arr#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "2"
      ]
    },
    "719": {
      "op": "+",
      "defined_out": [
        "aggregate%array_length%0#0",
        "arr#0",
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "720": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "tmp%15#0",
        "tmp%13#0"
      ]
    },
    "721": {
      "op": "itob",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "tmp%15#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "722": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%15#0"
      ]
    },
    "723": {
      "op": "itob",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "724": {
      "op": "concat",
      "defined_out": [
        "aggregate%array_length%0#0",
        "arr#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "fixed_struct#0"
      ]
    },
    "725": {
      "op": "dup",
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "fixed_struct#0",
        "fixed_struct#0"
      ]
    },
    "726": {
      "op": "cover 3",
      "defined_out": [
        "aggregate%array_length%0#0",
        "arr#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "aggregate%array_length%0#0",
        "fixed_struct#0"
      ]
    },
    "728": {
      "op": "dig 2",
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "aggregate%array_length%0#0",
        "fixed_struct#0",
        "arr#0 (copy)"
      ]
    },
    "730": {
      "op": "swap",
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "aggregate%array_length%0#0",
        "arr#0 (copy)",
        "fixed_struct#0"
      ]
    },
    "731": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%array_length%0#0",
        "arr#0",
        "concat%1#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "aggregate%array_length%0#0",
        "concat%1#0"
      ]
    },
    "732": {
      "op": "swap",
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "concat%1#0",
        "aggregate%array_length%0#0"
      ]
    },
    "733": {
      "op": "intc_1 // 1",
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "concat%1#0",
        "aggregate%array_length%0#0",
        "1"
      ]
    },
    "734": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "arr#0",
        "concat%1#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "concat%1#0",
        "add%0#0"
      ]
    },
    "735": {
      "op": "itob",
      "defined_out": [
        "arr#0",
        "as_bytes%1#0",
        "concat%1#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "concat%1#0",
        "as_bytes%1#0"
      ]
    },
    "736": {
      "op": "extract 6 2",
      "defined_out": [
        "arr#0",
        "as_u16_bytes%1#0",
        "concat%1#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "concat%1#0",
        "as_u16_bytes%1#0"
      ]
    },
    "739": {
      "op": "replace2 0",
      "defined_out": [
        "arr#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "arr2#1"
      ]
    },
    "741": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "arr2#1",
        "arr2#1 (copy)",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "arr2#1",
        "arr2#1 (copy)"
      ]
    },
    "742": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "arr2#1",
        "arr2#1 (copy)",
        "0"
      ]
    },
    "743": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%2#0",
        "arr#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "arr2#1",
        "aggregate%array_length%2#0"
      ]
    },
    "744": {
      "op": "intc_1 // 1",
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "arr2#1",
        "aggregate%array_length%2#0",
        "1"
      ]
    },
    "745": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "arr2#1",
        "fixed_struct#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "arr2#1",
        "tmp%19#0"
      ]
    },
    "746": {
      "error": "expected array to have 1 item",
      "op": "assert // expected array to have 1 item",
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "arr2#1"
      ]
    },
    "747": {
      "op": "dup",
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "arr2#1",
        "arr2#1 (copy)"
      ]
    },
    "748": {
      "callsub": "test_cases.mutable_native_types.contract.sum_frozen_arr",
      "op": "callsub sum_frozen_arr",
      "defined_out": [
        "arr#0",
        "arr2#1",
        "fixed_struct#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "arr2#1",
        "tmp%21#0"
      ]
    },
    "751": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "arr#0",
        "arr2#1",
        "fixed_struct#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "arr2#1",
        "tmp%21#0",
        "7"
      ]
    },
    "753": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "arr2#1",
        "fixed_struct#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "arr2#1",
        "tmp%22#0"
      ]
    },
    "754": {
      "error": "expected sum to be 7",
      "op": "assert // expected sum to be 7",
      "stack_out": [
        "fixed_struct#0",
        "arr#0",
        "arr2#1"
      ]
    },
    "755": {
      "op": "swap",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "arr#0"
      ]
    },
    "756": {
      "op": "dig 1",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "arr#0",
        "arr2#1 (copy)"
      ]
    },
    "758": {
      "op": "!=",
      "defined_out": [
        "arr2#1",
        "fixed_struct#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "tmp%23#0"
      ]
    },
    "759": {
      "error": "expected arrays to be different",
      "op": "assert // expected arrays to be different",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1"
      ]
    },
    "760": {
      "op": "dup",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "arr2#1 (copy)"
      ]
    },
    "761": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "764": {
      "op": "dig 1",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_trimmed%0#0",
        "arr2#1 (copy)"
      ]
    },
    "766": {
      "op": "extract 2 16",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "aggregate%encoded_element%0#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_trimmed%0#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "769": {
      "op": "pushbytes 0x0001",
      "defined_out": [
        "0x0001",
        "aggregate%array_trimmed%0#0",
        "aggregate%encoded_element%0#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_trimmed%0#0",
        "aggregate%encoded_element%0#0",
        "0x0001"
      ]
    },
    "773": {
      "op": "swap",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_trimmed%0#0",
        "0x0001",
        "aggregate%encoded_element%0#0"
      ]
    },
    "774": {
      "op": "concat",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "arr2#1",
        "arr7#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_trimmed%0#0",
        "arr7#0"
      ]
    },
    "775": {
      "op": "dig 2",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_trimmed%0#0",
        "arr7#0",
        "arr2#1 (copy)"
      ]
    },
    "777": {
      "op": "==",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "arr2#1",
        "fixed_struct#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_trimmed%0#0",
        "tmp%24#0"
      ]
    },
    "778": {
      "error": "expected arrays to be the same",
      "op": "assert // expected arrays to be the same",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "779": {
      "op": "bytec 8 // 0x0000",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "arr2#1",
        "arr8#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_trimmed%0#0",
        "arr8#0"
      ]
    },
    "781": {
      "op": "cover 2",
      "stack_out": [
        "fixed_struct#0",
        "arr8#0",
        "arr2#1",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "783": {
      "op": "bytec 8 // 0x0000",
      "defined_out": [
        "0x0000",
        "aggregate%array_trimmed%0#0",
        "arr2#1",
        "arr8#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr8#0",
        "arr2#1",
        "aggregate%array_trimmed%0#0",
        "0x0000"
      ]
    },
    "785": {
      "op": "swap",
      "stack_out": [
        "fixed_struct#0",
        "arr8#0",
        "arr2#1",
        "0x0000",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "786": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "arr2#1",
        "arr8#0",
        "concat%2#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr8#0",
        "arr2#1",
        "concat%2#0"
      ]
    },
    "787": {
      "op": "dup",
      "defined_out": [
        "arr2#1",
        "arr8#0",
        "concat%2#0",
        "concat%2#0 (copy)",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr8#0",
        "arr2#1",
        "concat%2#0",
        "concat%2#0 (copy)"
      ]
    },
    "788": {
      "op": "extract 2 0",
      "defined_out": [
        "arr2#1",
        "arr8#0",
        "concat%2#0",
        "extract_to_end%2#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr8#0",
        "arr2#1",
        "concat%2#0",
        "extract_to_end%2#0"
      ]
    },
    "791": {
      "op": "len",
      "defined_out": [
        "arr2#1",
        "arr8#0",
        "concat%2#0",
        "fixed_struct#0",
        "len%0#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr8#0",
        "arr2#1",
        "concat%2#0",
        "len%0#0"
      ]
    },
    "792": {
      "op": "intc_2 // 16",
      "stack_out": [
        "fixed_struct#0",
        "arr8#0",
        "arr2#1",
        "concat%2#0",
        "len%0#0",
        "16"
      ]
    },
    "793": {
      "op": "/",
      "defined_out": [
        "arr2#1",
        "arr8#0",
        "concat%2#0",
        "div_floor%0#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr8#0",
        "arr2#1",
        "concat%2#0",
        "div_floor%0#0"
      ]
    },
    "794": {
      "op": "itob",
      "defined_out": [
        "arr2#1",
        "arr8#0",
        "as_bytes%2#0",
        "concat%2#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr8#0",
        "arr2#1",
        "concat%2#0",
        "as_bytes%2#0"
      ]
    },
    "795": {
      "op": "extract 6 2",
      "defined_out": [
        "arr2#1",
        "arr8#0",
        "as_u16_bytes%2#0",
        "concat%2#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr8#0",
        "arr2#1",
        "concat%2#0",
        "as_u16_bytes%2#0"
      ]
    },
    "798": {
      "op": "replace2 0",
      "defined_out": [
        "arr2#1",
        "arr8#0",
        "arr8#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr8#0",
        "arr2#1",
        "arr8#1"
      ]
    },
    "800": {
      "op": "==",
      "defined_out": [
        "arr8#0",
        "fixed_struct#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr8#0",
        "tmp%25#0"
      ]
    },
    "801": {
      "error": "expected arrays to be the same",
      "op": "assert // expected arrays to be the same",
      "stack_out": [
        "fixed_struct#0",
        "arr8#0"
      ]
    },
    "802": {
      "op": "intc_0 // 0",
      "defined_out": [
        "_i#0",
        "arr8#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr8#0",
        "_i#0"
      ]
    },
    "803": {
      "op": "swap",
      "defined_out": [
        "_i#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1"
      ]
    },
    "804": {
      "block": "test_arr_for_header@4",
      "stack_in": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1"
      ],
      "op": "dig 1",
      "defined_out": [
        "_i#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "_i#0"
      ]
    },
    "806": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "_i#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "_i#0",
        "3"
      ]
    },
    "808": {
      "op": "<",
      "defined_out": [
        "_i#0",
        "continue_looping%0#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "continue_looping%0#0"
      ]
    },
    "809": {
      "op": "bz test_arr_after_for@7",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1"
      ]
    },
    "812": {
      "op": "dupn 2",
      "defined_out": [
        "_i#0",
        "arr2#1",
        "arr2#1 (copy)"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "arr2#1 (copy)"
      ]
    },
    "814": {
      "op": "dig 4",
      "defined_out": [
        "_i#0",
        "arr2#1",
        "arr2#1 (copy)",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "arr2#1 (copy)",
        "fixed_struct#0"
      ]
    },
    "816": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "_i#0",
        "arr2#1",
        "concat%3#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "concat%3#0"
      ]
    },
    "817": {
      "op": "swap",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "concat%3#0",
        "arr2#1"
      ]
    },
    "818": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "_i#0",
        "arr2#1",
        "concat%3#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "concat%3#0",
        "arr2#1",
        "0"
      ]
    },
    "819": {
      "op": "extract_uint16",
      "defined_out": [
        "_i#0",
        "arr2#1",
        "concat%3#0",
        "extract_uint16%1#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "concat%3#0",
        "extract_uint16%1#0"
      ]
    },
    "820": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "_i#0",
        "arr2#1",
        "concat%3#0",
        "extract_uint16%1#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "concat%3#0",
        "extract_uint16%1#0",
        "1"
      ]
    },
    "821": {
      "op": "+",
      "defined_out": [
        "_i#0",
        "add%1#0",
        "arr2#1",
        "concat%3#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "concat%3#0",
        "add%1#0"
      ]
    },
    "822": {
      "op": "itob",
      "defined_out": [
        "_i#0",
        "arr2#1",
        "as_bytes%3#0",
        "concat%3#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "concat%3#0",
        "as_bytes%3#0"
      ]
    },
    "823": {
      "op": "extract 6 2",
      "defined_out": [
        "_i#0",
        "arr2#1",
        "as_u16_bytes%3#0",
        "concat%3#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "concat%3#0",
        "as_u16_bytes%3#0"
      ]
    },
    "826": {
      "op": "replace2 0",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1"
      ]
    },
    "828": {
      "op": "bury 1",
      "defined_out": [
        "_i#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1"
      ]
    },
    "830": {
      "op": "dig 1",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "_i#0"
      ]
    },
    "832": {
      "op": "intc_1 // 1",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "_i#0",
        "1"
      ]
    },
    "833": {
      "op": "+",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "_i#0"
      ]
    },
    "834": {
      "op": "bury 2",
      "defined_out": [
        "_i#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1"
      ]
    },
    "836": {
      "op": "b test_arr_for_header@4"
    },
    "839": {
      "block": "test_arr_after_for@7",
      "stack_in": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1"
      ],
      "op": "dupn 2",
      "defined_out": [
        "arr2#1",
        "arr2#1 (copy)"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "arr2#1 (copy)"
      ]
    },
    "841": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr2#1",
        "arr2#1 (copy)"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "arr2#1 (copy)",
        "0"
      ]
    },
    "842": {
      "op": "extract_uint16",
      "defined_out": [
        "arr2#1",
        "array_length#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "array_length#0"
      ]
    },
    "843": {
      "op": "dup",
      "defined_out": [
        "arr2#1",
        "array_length#0",
        "array_length#0 (copy)"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "array_length#0",
        "array_length#0 (copy)"
      ]
    },
    "844": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "arr2#1",
        "array_length#0",
        "array_length#0 (copy)"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "array_length#0",
        "array_length#0 (copy)",
        "3"
      ]
    },
    "846": {
      "op": "==",
      "defined_out": [
        "arr2#1",
        "array_length#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "array_length#0",
        "tmp%32#0"
      ]
    },
    "847": {
      "error": "expected 3 elements",
      "op": "assert // expected 3 elements",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "array_length#0"
      ]
    },
    "848": {
      "op": "dig 1",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "array_length#0",
        "arr2#1 (copy)"
      ]
    },
    "850": {
      "callsub": "test_cases.mutable_native_types.contract.sum_frozen_arr",
      "op": "callsub sum_frozen_arr",
      "defined_out": [
        "arr2#1",
        "array_length#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "array_length#0",
        "tmp%34#0"
      ]
    },
    "853": {
      "op": "pushint 21 // 21",
      "defined_out": [
        "21",
        "arr2#1",
        "array_length#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "array_length#0",
        "tmp%34#0",
        "21"
      ]
    },
    "855": {
      "op": "==",
      "defined_out": [
        "arr2#1",
        "array_length#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "array_length#0",
        "tmp%35#0"
      ]
    },
    "856": {
      "error": "expected sum to be 21",
      "op": "assert // expected sum to be 21",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "array_length#0"
      ]
    },
    "857": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arr2#1",
        "array_length#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "array_length#0",
        "1"
      ]
    },
    "858": {
      "op": "-",
      "defined_out": [
        "arr2#1",
        "length_minus_1#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "length_minus_1#0"
      ]
    },
    "859": {
      "op": "itob",
      "defined_out": [
        "arr2#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "tmp%2#1"
      ]
    },
    "860": {
      "op": "extract 6 0",
      "defined_out": [
        "arr2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "tmp%3#1"
      ]
    },
    "863": {
      "op": "dig 1",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "tmp%3#1",
        "arr2#1 (copy)"
      ]
    },
    "865": {
      "op": "swap",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "arr2#1 (copy)",
        "tmp%3#1"
      ]
    },
    "866": {
      "op": "replace2 0",
      "defined_out": [
        "arr2#1",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "result#0"
      ]
    },
    "868": {
      "op": "dup",
      "defined_out": [
        "arr2#1",
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "869": {
      "op": "len",
      "defined_out": [
        "arr2#1",
        "result#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "result#0",
        "tmp%5#1"
      ]
    },
    "870": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "arr2#1",
        "result#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "result#0",
        "tmp%5#1",
        "16"
      ]
    },
    "871": {
      "op": "-",
      "defined_out": [
        "arr2#1",
        "item_location#0",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "result#0",
        "item_location#0"
      ]
    },
    "872": {
      "op": "intc_0 // 0"
    },
    "873": {
      "op": "swap",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "result#0",
        "0",
        "item_location#0"
      ]
    },
    "874": {
      "op": "substring3",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "result#0"
      ]
    },
    "875": {
      "op": "swap",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "arr2#1"
      ]
    },
    "876": {
      "callsub": "test_cases.mutable_native_types.contract.sum_frozen_arr",
      "op": "callsub sum_frozen_arr",
      "defined_out": [
        "arr2#1",
        "result#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "tmp%39#0"
      ]
    },
    "879": {
      "op": "pushint 21 // 21",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "tmp%39#0",
        "21"
      ]
    },
    "881": {
      "op": "==",
      "defined_out": [
        "arr2#1",
        "result#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "tmp%40#0"
      ]
    },
    "882": {
      "error": "expected sum to be 21",
      "op": "assert // expected sum to be 21",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0"
      ]
    },
    "883": {
      "op": "dup",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "884": {
      "callsub": "test_cases.mutable_native_types.contract.sum_frozen_arr",
      "op": "callsub sum_frozen_arr",
      "defined_out": [
        "arr2#1",
        "result#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "tmp%41#0"
      ]
    },
    "887": {
      "op": "pushint 14 // 14",
      "defined_out": [
        "14",
        "arr2#1",
        "result#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "tmp%41#0",
        "14"
      ]
    },
    "889": {
      "op": "==",
      "defined_out": [
        "arr2#1",
        "result#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "tmp%42#0"
      ]
    },
    "890": {
      "error": "expected sum to be 14",
      "op": "assert // expected sum to be 14",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0"
      ]
    },
    "891": {
      "op": "dup",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "892": {
      "op": "extract 2 0",
      "defined_out": [
        "arr2#1",
        "extract_to_end%3#0",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "extract_to_end%3#0"
      ]
    },
    "895": {
      "op": "dig 1",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "extract_to_end%3#0",
        "result#0 (copy)"
      ]
    },
    "897": {
      "op": "swap",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "result#0 (copy)",
        "extract_to_end%3#0"
      ]
    },
    "898": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "arr2#1",
        "concat%4#0",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "concat%4#0"
      ]
    },
    "899": {
      "op": "dup",
      "defined_out": [
        "arr2#1",
        "concat%4#0",
        "concat%4#0 (copy)",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "concat%4#0",
        "concat%4#0 (copy)"
      ]
    },
    "900": {
      "op": "extract 2 0",
      "defined_out": [
        "arr2#1",
        "concat%4#0",
        "extract_to_end%4#0",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "concat%4#0",
        "extract_to_end%4#0"
      ]
    },
    "903": {
      "op": "len",
      "defined_out": [
        "arr2#1",
        "concat%4#0",
        "len%1#0",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "concat%4#0",
        "len%1#0"
      ]
    },
    "904": {
      "op": "intc_2 // 16",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "concat%4#0",
        "len%1#0",
        "16"
      ]
    },
    "905": {
      "op": "/",
      "defined_out": [
        "arr2#1",
        "concat%4#0",
        "div_floor%1#0",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "concat%4#0",
        "div_floor%1#0"
      ]
    },
    "906": {
      "op": "itob",
      "defined_out": [
        "arr2#1",
        "as_bytes%4#0",
        "concat%4#0",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "concat%4#0",
        "as_bytes%4#0"
      ]
    },
    "907": {
      "op": "extract 6 2",
      "defined_out": [
        "arr2#1",
        "as_u16_bytes%4#0",
        "concat%4#0",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "concat%4#0",
        "as_u16_bytes%4#0"
      ]
    },
    "910": {
      "op": "replace2 0",
      "defined_out": [
        "arr2#1",
        "frozen2#1",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "frozen2#1"
      ]
    },
    "912": {
      "callsub": "test_cases.mutable_native_types.contract.sum_frozen_arr",
      "op": "callsub sum_frozen_arr",
      "defined_out": [
        "arr2#1",
        "result#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "tmp%43#0"
      ]
    },
    "915": {
      "op": "pushint 28 // 28",
      "defined_out": [
        "28",
        "arr2#1",
        "result#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "tmp%43#0",
        "28"
      ]
    },
    "917": {
      "op": "==",
      "defined_out": [
        "arr2#1",
        "result#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "tmp%44#0"
      ]
    },
    "918": {
      "error": "and the sum shall be 41",
      "op": "assert // and the sum shall be 41",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0"
      ]
    },
    "919": {
      "op": "pushbytes \"arr\"",
      "defined_out": [
        "\"arr\"",
        "arr2#1",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "\"arr\""
      ]
    },
    "924": {
      "op": "dig 1",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "\"arr\"",
        "result#0 (copy)"
      ]
    },
    "926": {
      "op": "app_global_put",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0"
      ]
    },
    "927": {
      "op": "dig 3",
      "defined_out": [
        "arr2#1",
        "fixed_struct#0",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "fixed_struct#0"
      ]
    },
    "929": {
      "op": "len",
      "defined_out": [
        "aggregate%bytes_len%3#0",
        "arr2#1",
        "fixed_struct#0",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "aggregate%bytes_len%3#0"
      ]
    },
    "930": {
      "op": "intc_2 // 16",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "aggregate%bytes_len%3#0",
        "16"
      ]
    },
    "931": {
      "op": "/",
      "defined_out": [
        "aggregate%array_len%3#0",
        "arr2#1",
        "fixed_struct#0",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "aggregate%array_len%3#0"
      ]
    },
    "932": {
      "op": "assert",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0"
      ]
    },
    "933": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "arr2#1",
        "fixed_struct#0",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "result#0",
        "0x151f7c75"
      ]
    },
    "934": {
      "op": "swap",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "0x151f7c75",
        "result#0"
      ]
    },
    "935": {
      "op": "concat",
      "defined_out": [
        "arr2#1",
        "fixed_struct#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "tmp%1#0"
      ]
    },
    "936": {
      "op": "log",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1"
      ]
    },
    "937": {
      "op": "intc_1 // 1",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "1"
      ]
    },
    "938": {
      "op": "return",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1"
      ]
    }
  }
}