{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0E8C;;AAApB;AAAd;AAAA;AAAA;AAAA;AACc;;AAAmB;AAAnB;AAAwB;;AAAmB;AAAnB;AAAtC;AAAA;AAAA;AAAA;AAAA;AACW;;AAAmB;AAAnB;AAAwB;;AAAmB;AAAnB;AAHzB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAd;AAAA;AAAA;AAYM;;AADA;AADK;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAAA;AAAX;;;;;AAAA;AAAA;AAQA;AAAoB;AAApB;AACgB;;AAAA;AAAhB;AAAA;AAAA;AAtBR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA8LK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAhEA;;AAAA;AAAA;AAAA;;AAAA;AA9HL;;;AA8HK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAjGL;;;AAAA;AAAA;;;AAiGK;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AA1FL;;;AAAA;AA0FK;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAvEL;;;AAAA;AAuEK;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAlEL;;;AAAA;AAAA;;;AAAA;AAkEK;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA5DL;;;AA4DK;;;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAxBL;;AAAA;;;;;;;;;AAwMA;;;AAEY;AACZ;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACiB;AADjB;AACiB;AAAT;;AAAA;AACS;AAAA;AAAA;AAAT;AAAA;;;;;;;;;AACJ;AAQJ;;;;;;AA1JA;;;AAEe;AAAA;AAAA;AAAA;AAAA;AAAoB;;AAApB;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAA;AAAA;AAAA;;AAER;;;AAEuB;AAAA;AAAA;AAAA;AAAR;;AAAA;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAER;;;AAEkC;AAAA;AAAA;AAAA;AAA1B;;AAAA;AAAA;AACgC;AAAA;AAAA;AAAA;AAAd;;AAAlB;;AAAA;;AAAA;AACO;;AAAA;;;AAAA;AAAP;AACgC;;;AAAnB;;AAAA;AAAb;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAIY;;AAAY;;;AAApB;AAAA;AAAiC;;;AAAjC;AAAA;AAGe;AAAA;;;AAAY;;AAAA;;AAAA;AAAS;;AAAA;;AAAA;AACjC;;AAAA;;AAAA;AAAP;AACA;AAAA;AACA;AACA;;;AACA;AAER;;;AAEY;;AAAJ;AACsB;;AAAlB;;AAAJ;AACI;;AAAJ;;AACiB;;AAAA;AAAb;;AAAA;AAAA;AAAJ;;;AAER;;;AAEQ;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AACkB;;AAAlB;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;;AAAA;AACa;;AAAA;AAAb;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAMO;AAAA;AAAA;AAAA;AAAA;;;AAAP;AAIO;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAER;;;AAEkB;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;;;AA6FP;;AAAA;AAAA;AAAQ;;AAAA;AAAA;AAAR;AAAA;;AAAA;AAAA;AAAQ;;AAAA;AAAA;AAAR;AA5FM;AAAA;;AACG;;AAAT;AAAX;;;AACmB;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACP;;AAAA;;AAAA;AACA;;;;;AACJ;;AAAA;AAER;;;AAEe;;AAAA;AAAA;AAAA;AAAA;AAAP;AASA;;AAAA;;;AACqB;AAAA;AAAA;AAAA;AAAd;;AAAA;;AAAA;AAAP;AAEO;AAAA;;;AAAA;AAAA;AACA;;AAAA;AAAP;AAM6B;;AAAmB;AAAnB;AAAwB;;AAAmB;;AAAnB;AAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AACf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AACO;AAAA;AAAA;AAAA;AAAe;AAAf;AAAP;AACO;;AAAA;;;AAAiC;;AAAjC;AAAP;AACO;;AAAA;;AAAA;AAAP;AAE2B;;AAAA;;;AAAA;;AAAA;;;AAApB;;;;AAAA;AAAA;AACA;;AAAA;AAAP;AAEO;;AAAA;;AAAA;;AACP;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AACO;;AAAA;AAAP;AAOU;AAAN;AAAM;;AAAO;;AAAP;AAAlB;;;AACY;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AADM;;AAAA;AAAA;AAAA;;;;;AAGH;;AAAA;AAAA;AAAA;AAAe;;AAAf;AAAP;AAGO;AAAA;;;AAA2B;;AAA3B;AAAP;;;AAEA;;;;;;;;;;;;;;;;;;;AAEO;AAAA;;;AAA2B;;AAA3B;AAAP;AACO;AAAA;;;AAA2B;;AAA3B;AAAP;AACA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AACO;;;AAA2B;;AAA3B;AAAP;AAEA;;AAAA;;AAAA;AAKA;;AACO;AAAA;AAAA;AAAP;AAEA;;AAAA;AAIS;AAAA;;AAAA;AAAA;AACD;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AACD;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEO;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACQ;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAR;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 16 8"
    },
    "7": {
      "op": "bytecblock \"nested\" \"num_payments\" \"payments\" 0x151f7c75 0x70 0x6c \"box\" \"box_map\" 0x0000 \"arr\""
    },
    "66": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "68": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "71": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "73": {
      "op": "dup",
      "defined_out": [
        "tmp%0#2",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "74": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "75": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%1#1"
      ]
    },
    "76": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "77": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "78": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%3#0"
      ]
    },
    "80": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%head%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%3#0",
        "1"
      ]
    },
    "81": {
      "op": "+",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%4#0"
      ]
    },
    "82": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "84": {
      "op": "intc_1 // 1",
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%4#0",
        "tmp%5#0",
        "1"
      ]
    },
    "85": {
      "op": "+",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "86": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%6#0",
        "tmp%4#0"
      ]
    },
    "87": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%6#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "88": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%2#0",
        "tmp%6#0"
      ]
    },
    "89": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%2#0",
        "aggregate%val_as_bytes%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%2#0",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "90": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ]
    },
    "91": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%8#0"
      ]
    },
    "93": {
      "op": "intc_1 // 1",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%8#0",
        "1"
      ]
    },
    "94": {
      "op": "+",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%9#0"
      ]
    },
    "95": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "97": {
      "op": "intc_1 // 1",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%9#0",
        "tmp%10#0",
        "1"
      ]
    },
    "98": {
      "op": "+",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "99": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%head%3#0",
        "tmp%9#0",
        "tmp%11#0",
        "aggregate%head%1#0"
      ]
    },
    "101": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ]
    },
    "103": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "aggregate%head%5#0"
      ]
    },
    "104": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%11#0",
        "aggregate%head%5#0",
        "tmp%9#0"
      ]
    },
    "106": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%5#0",
        "aggregate%val_as_bytes%4#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "aggregate%head%5#0",
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "107": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%5#0",
        "aggregate%val_as_bytes%4#0",
        "tmp%11#0"
      ]
    },
    "109": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%5#0",
        "aggregate%val_as_bytes%4#0",
        "aggregate%val_as_bytes%5#0"
      ],
      "stack_out": [
        "aggregate%head%5#0",
        "aggregate%val_as_bytes%4#0",
        "aggregate%val_as_bytes%5#0"
      ]
    },
    "110": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "aggregate%head%7#0"
      ],
      "stack_out": [
        "aggregate%head%5#0",
        "aggregate%head%7#0"
      ]
    },
    "111": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%8#0"
      ],
      "stack_out": [
        "aggregate%head%8#0"
      ]
    },
    "112": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "aggregate%head%8#0"
      ],
      "stack_out": [
        "aggregate%head%8#0",
        "\"nested\""
      ]
    },
    "113": {
      "op": "swap",
      "stack_out": [
        "\"nested\"",
        "aggregate%head%8#0"
      ]
    },
    "114": {
      "op": "app_global_put",
      "stack_out": []
    },
    "115": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "117": {
      "op": "dup",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%13#0"
      ]
    },
    "118": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%6#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "aggregate%val_as_bytes%6#0"
      ]
    },
    "119": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%6#0",
        "tmp%14#0"
      ]
    },
    "120": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%6#0",
        "aggregate%val_as_bytes%7#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%6#0",
        "aggregate%val_as_bytes%7#0"
      ]
    },
    "121": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%10#0"
      ],
      "stack_out": [
        "aggregate%head%10#0"
      ]
    },
    "122": {
      "op": "pushbytes 0x00160018001a000000000000",
      "defined_out": [
        "0x00160018001a000000000000",
        "aggregate%head%10#0"
      ],
      "stack_out": [
        "aggregate%head%10#0",
        "0x00160018001a000000000000"
      ]
    },
    "136": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%2#0"
      ],
      "stack_out": [
        "aggregate%concat%2#0"
      ]
    },
    "137": {
      "op": "pushbytes \"dyn\"",
      "defined_out": [
        "\"dyn\"",
        "aggregate%concat%2#0"
      ],
      "stack_out": [
        "aggregate%concat%2#0",
        "\"dyn\""
      ]
    },
    "142": {
      "op": "swap",
      "stack_out": [
        "\"dyn\"",
        "aggregate%concat%2#0"
      ]
    },
    "143": {
      "op": "app_global_put",
      "stack_out": []
    },
    "144": {
      "op": "bytec_1 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\""
      ],
      "stack_out": [
        "\"num_payments\""
      ]
    },
    "145": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"num_payments\"",
        "0"
      ],
      "stack_out": [
        "\"num_payments\"",
        "0"
      ]
    },
    "146": {
      "op": "app_global_put",
      "stack_out": []
    },
    "147": {
      "op": "pushint 96 // 96",
      "defined_out": [
        "96"
      ],
      "stack_out": [
        "96"
      ]
    },
    "149": {
      "op": "bzero",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "150": {
      "op": "bytec_2 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "\"payments\""
      ]
    },
    "151": {
      "op": "swap",
      "stack_out": [
        "\"payments\"",
        "tmp%16#0"
      ]
    },
    "152": {
      "op": "app_global_put",
      "stack_out": []
    },
    "153": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "155": {
      "op": "bz main_bare_routing@18",
      "stack_out": []
    },
    "158": {
      "op": "pushbytess 0x67a5a02d 0xd1276f81 0x0d2ab4c0 0xe8b5d56c 0x875901e5 0x4abb70f1 0xaf05f48f 0xe8d71c8c 0x01aaa39c 0x8313dee7 0x2ca849c1 0x3d8e707d 0x0649402d // method \"test_imm_fixed_array()void\", method \"fixed_initialize()void\", method \"add_payment((address,uint64,uint64))void\", method \"increment_payment(uint64,uint64)void\", method \"create_storage(uint64)void\", method \"local_struct()(address,uint64,uint64)\", method \"delete_storage(uint64)void\", method \"struct_arg(uint64,(uint64,uint64))void\", method \"struct_return()(uint64,uint64)\", method \"tup_return()(uint64,uint64)\", method \"calculate_sum()uint64\", method \"test_arr((uint64,uint64)[])(uint64,uint64)[]\", method \"test_arr2()void\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(calculate_sum()uint64)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(test_arr((uint64,uint64)[])(uint64,uint64)[])",
        "Method(test_arr2()void)",
        "Method(test_imm_fixed_array()void)",
        "Method(tup_return()(uint64,uint64))"
      ],
      "stack_out": [
        "Method(test_imm_fixed_array()void)",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "Method(calculate_sum()uint64)",
        "Method(test_arr((uint64,uint64)[])(uint64,uint64)[])",
        "Method(test_arr2()void)"
      ]
    },
    "225": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(calculate_sum()uint64)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(test_arr((uint64,uint64)[])(uint64,uint64)[])",
        "Method(test_arr2()void)",
        "Method(test_imm_fixed_array()void)",
        "Method(tup_return()(uint64,uint64))",
        "tmp%2#1"
      ],
      "stack_out": [
        "Method(test_imm_fixed_array()void)",
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "Method(calculate_sum()uint64)",
        "Method(test_arr((uint64,uint64)[])(uint64,uint64)[])",
        "Method(test_arr2()void)",
        "tmp%2#1"
      ]
    },
    "228": {
      "op": "match main_test_imm_fixed_array_route@5 main_fixed_initialize_route@6 main_add_payment_route@7 main_increment_payment_route@8 main_create_storage_route@9 main_local_struct_route@10 main_delete_storage_route@11 main_struct_arg_route@12 main_struct_return_route@13 main_tup_return_route@14 main_calculate_sum_route@15 main_test_arr_route@16 main_test_arr2_route@17",
      "stack_out": []
    },
    "256": {
      "block": "main_after_if_else@20",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "257": {
      "op": "return",
      "stack_out": []
    },
    "258": {
      "block": "main_test_arr2_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "260": {
      "op": "!",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "261": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "262": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "264": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "265": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.test_arr2",
      "op": "callsub test_arr2"
    },
    "268": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "269": {
      "op": "return",
      "stack_out": []
    },
    "270": {
      "block": "main_test_arr_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "272": {
      "op": "!",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "273": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "274": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "276": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "277": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+(uint64,uint64)[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+(uint64,uint64)[])%0#0"
      ]
    },
    "280": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.test_arr",
      "op": "callsub test_arr",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "283": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "0x151f7c75"
      ]
    },
    "284": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%67#0"
      ]
    },
    "285": {
      "op": "concat",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "286": {
      "op": "log",
      "stack_out": []
    },
    "287": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "288": {
      "op": "return",
      "stack_out": []
    },
    "289": {
      "block": "main_calculate_sum_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "291": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "292": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "293": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "295": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "296": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.calculate_sum",
      "op": "callsub calculate_sum",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "299": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%10#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%10#0"
      ]
    },
    "300": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%10#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%10#0",
        "0x151f7c75"
      ]
    },
    "301": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%10#0"
      ]
    },
    "302": {
      "op": "concat",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "303": {
      "op": "log",
      "stack_out": []
    },
    "304": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "305": {
      "op": "return",
      "stack_out": []
    },
    "306": {
      "block": "main_tup_return_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "308": {
      "op": "!",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "309": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "310": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "312": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "313": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.tup_return",
      "op": "callsub tup_return",
      "defined_out": [
        "tmp%52#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%53#0"
      ]
    },
    "316": {
      "op": "swap",
      "stack_out": [
        "tmp%53#0",
        "tmp%52#0"
      ]
    },
    "317": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%8#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "aggregate%val_as_bytes%8#0"
      ]
    },
    "318": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%8#0",
        "tmp%53#0"
      ]
    },
    "319": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%8#0",
        "aggregate%val_as_bytes%9#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%8#0",
        "aggregate%val_as_bytes%9#0"
      ]
    },
    "320": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%15#0"
      ],
      "stack_out": [
        "aggregate%head%15#0"
      ]
    },
    "321": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%15#0"
      ],
      "stack_out": [
        "aggregate%head%15#0",
        "0x151f7c75"
      ]
    },
    "322": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%head%15#0"
      ]
    },
    "323": {
      "op": "concat",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "324": {
      "op": "log",
      "stack_out": []
    },
    "325": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "326": {
      "op": "return",
      "stack_out": []
    },
    "327": {
      "block": "main_struct_return_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "329": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "330": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "331": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "333": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "334": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.struct_return",
      "op": "callsub struct_return",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "337": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "0x151f7c75"
      ]
    },
    "338": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%46#0"
      ]
    },
    "339": {
      "op": "concat",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "340": {
      "op": "log",
      "stack_out": []
    },
    "341": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "342": {
      "op": "return",
      "stack_out": []
    },
    "343": {
      "block": "main_struct_arg_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "345": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "346": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "347": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "349": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "350": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "353": {
      "op": "btoi",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "354": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "357": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.struct_arg",
      "op": "callsub struct_arg",
      "stack_out": []
    },
    "360": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "361": {
      "op": "return",
      "stack_out": []
    },
    "362": {
      "block": "main_delete_storage_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "364": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "365": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "366": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "368": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "369": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "372": {
      "op": "btoi",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "373": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.delete_storage",
      "op": "callsub delete_storage",
      "stack_out": []
    },
    "376": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "377": {
      "op": "return",
      "stack_out": []
    },
    "378": {
      "block": "main_local_struct_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "380": {
      "op": "!",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "381": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "382": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "384": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "385": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.local_struct",
      "op": "callsub local_struct",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "388": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "0x151f7c75"
      ]
    },
    "389": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%30#0"
      ]
    },
    "390": {
      "op": "concat",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "391": {
      "op": "log",
      "stack_out": []
    },
    "392": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "393": {
      "op": "return",
      "stack_out": []
    },
    "394": {
      "block": "main_create_storage_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "396": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "397": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "398": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "400": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "401": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "404": {
      "op": "btoi",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "405": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.create_storage",
      "op": "callsub create_storage",
      "stack_out": []
    },
    "408": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "409": {
      "op": "return",
      "stack_out": []
    },
    "410": {
      "block": "main_increment_payment_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#1"
      ],
      "stack_out": [
        "tmp%15#1"
      ]
    },
    "412": {
      "op": "!",
      "defined_out": [
        "tmp%16#1"
      ],
      "stack_out": [
        "tmp%16#1"
      ]
    },
    "413": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "414": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "416": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "417": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "420": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "421": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "424": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "425": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.increment_payment",
      "op": "callsub increment_payment",
      "stack_out": []
    },
    "428": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "429": {
      "op": "return",
      "stack_out": []
    },
    "430": {
      "block": "main_add_payment_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "432": {
      "op": "!",
      "defined_out": [
        "tmp%12#1"
      ],
      "stack_out": [
        "tmp%12#1"
      ]
    },
    "433": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "434": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "436": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "437": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32],uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32],uint64,uint64)%0#0"
      ]
    },
    "440": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.add_payment",
      "op": "callsub add_payment",
      "stack_out": []
    },
    "443": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "444": {
      "op": "return",
      "stack_out": []
    },
    "445": {
      "block": "main_fixed_initialize_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#1"
      ],
      "stack_out": [
        "tmp%7#1"
      ]
    },
    "447": {
      "op": "!",
      "defined_out": [
        "tmp%8#1"
      ],
      "stack_out": [
        "tmp%8#1"
      ]
    },
    "448": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "449": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "451": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "452": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "453": {
      "op": "return",
      "stack_out": []
    },
    "454": {
      "block": "main_test_imm_fixed_array_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "456": {
      "op": "!",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%4#1"
      ]
    },
    "457": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "458": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "460": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "461": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "462": {
      "op": "return",
      "stack_out": []
    },
    "463": {
      "block": "main_bare_routing@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "465": {
      "op": "bnz main_after_if_else@20",
      "stack_out": []
    },
    "468": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "470": {
      "op": "!",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "471": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "472": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "473": {
      "op": "return",
      "stack_out": []
    },
    "474": {
      "subroutine": "test_cases.mutable_native_types.contract.sum_frozen_arr",
      "params": {
        "arr#0": "bytes"
      },
      "block": "sum_frozen_arr",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "477": {
      "op": "intc_0 // 0"
    },
    "478": {
      "op": "frame_dig -1"
    },
    "480": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr#0 (copy)",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "arr#0 (copy)",
        "0"
      ]
    },
    "481": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0"
      ]
    },
    "482": {
      "op": "intc_0 // 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "483": {
      "block": "sum_frozen_arr_for_header@1",
      "stack_in": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "485": {
      "op": "frame_dig 1",
      "defined_out": [
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "487": {
      "op": "<",
      "defined_out": [
        "aggregate%array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "488": {
      "op": "bz sum_frozen_arr_after_for@4",
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "491": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%array_length%0#0",
        "arr#0 (copy)",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "arr#0 (copy)"
      ]
    },
    "493": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "496": {
      "op": "frame_dig 2",
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0"
      ]
    },
    "498": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0 (copy)",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "499": {
      "op": "cover 2",
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "501": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0 (copy)",
        "16"
      ]
    },
    "502": {
      "op": "*",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "503": {
      "op": "intc_2 // 16",
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "16"
      ]
    },
    "504": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%encoded_element%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "505": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)"
      ]
    },
    "506": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%array_length%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "0"
      ]
    },
    "507": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%encoded_element%0#0",
        "item_index_internal%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%encoded_element%0#0",
        "values%0#0"
      ]
    },
    "508": {
      "op": "frame_dig 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%encoded_element%0#0",
        "item_index_internal%0#0",
        "total#0",
        "values%0#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%encoded_element%0#0",
        "values%0#0",
        "total#0"
      ]
    },
    "510": {
      "op": "+",
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "aggregate%encoded_element%0#0",
        "total#0"
      ]
    },
    "511": {
      "op": "swap",
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "total#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "512": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%array_length%0#0",
        "aggregate%encoded_element%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "total#0",
        "aggregate%encoded_element%0#0",
        "8"
      ]
    },
    "513": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "total#0",
        "values%1#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "total#0",
        "values%1#0"
      ]
    },
    "514": {
      "op": "+",
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "515": {
      "op": "frame_bury 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "517": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "518": {
      "op": "+",
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "519": {
      "op": "frame_bury 2",
      "defined_out": [
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "521": {
      "op": "b sum_frozen_arr_for_header@1"
    },
    "524": {
      "block": "sum_frozen_arr_after_for@4",
      "stack_in": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "525": {
      "subroutine": "test_cases.mutable_native_types.contract.do_something",
      "params": {
        "pay#0": "bytes"
      },
      "block": "do_something",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "528": {
      "op": "frame_dig -1",
      "defined_out": [
        "pay#0 (copy)"
      ],
      "stack_out": [
        "pay#0 (copy)"
      ]
    },
    "530": {
      "retsub": true,
      "op": "retsub"
    },
    "531": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.add_payment",
      "params": {
        "pay#0": "bytes"
      },
      "block": "add_payment",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "534": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "535": {
      "op": "bytec_1 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"num_payments\""
      ]
    },
    "536": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "537": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "538": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "539": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "2"
      ]
    },
    "541": {
      "op": "<",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "542": {
      "error": "too many payments",
      "op": "assert // too many payments",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "543": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "544": {
      "op": "bytec_2 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"payments\""
      ]
    },
    "545": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "546": {
      "error": "check self.payments exists",
      "op": "assert // check self.payments exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "547": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%0#0"
      ]
    },
    "548": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%0#0",
        "48"
      ]
    },
    "550": {
      "op": "*",
      "defined_out": [
        "aggregate%write_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "551": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%write_offset%0#0",
        "maybe_value%1#0",
        "pay#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%write_offset%0#0",
        "pay#0 (copy)"
      ]
    },
    "553": {
      "op": "replace3",
      "defined_out": [
        "aggregate%updated_array%0#0"
      ],
      "stack_out": [
        "aggregate%updated_array%0#0"
      ]
    },
    "554": {
      "op": "bytec_2 // \"payments\"",
      "stack_out": [
        "aggregate%updated_array%0#0",
        "\"payments\""
      ]
    },
    "555": {
      "op": "swap",
      "stack_out": [
        "\"payments\"",
        "aggregate%updated_array%0#0"
      ]
    },
    "556": {
      "op": "app_global_put",
      "stack_out": []
    },
    "557": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "558": {
      "op": "bytec_1 // \"num_payments\"",
      "stack_out": [
        "0",
        "\"num_payments\""
      ]
    },
    "559": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "560": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "561": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "562": {
      "op": "+",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "563": {
      "op": "bytec_1 // \"num_payments\"",
      "stack_out": [
        "tmp%1#0",
        "\"num_payments\""
      ]
    },
    "564": {
      "op": "swap",
      "stack_out": [
        "\"num_payments\"",
        "tmp%1#0"
      ]
    },
    "565": {
      "op": "app_global_put",
      "stack_out": []
    },
    "566": {
      "retsub": true,
      "op": "retsub"
    },
    "567": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.increment_payment",
      "params": {
        "index#0": "uint64",
        "amt#0": "uint64"
      },
      "block": "increment_payment",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "570": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "571": {
      "op": "bytec_1 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"num_payments\""
      ]
    },
    "572": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "573": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "574": {
      "op": "frame_dig -2",
      "defined_out": [
        "index#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "index#0 (copy)"
      ]
    },
    "576": {
      "op": ">",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "577": {
      "error": "invalid payment index",
      "op": "assert // invalid payment index",
      "stack_out": []
    },
    "578": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "579": {
      "op": "bytec_2 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"payments\""
      ]
    },
    "580": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "581": {
      "error": "check self.payments exists",
      "op": "assert // check self.payments exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "582": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%1#0",
        "index#0 (copy)"
      ]
    },
    "584": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "index#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "index#0 (copy)",
        "48"
      ]
    },
    "586": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "587": {
      "op": "dup2",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%bytes_offset%0#0 (copy)",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "maybe_value%1#0 (copy)",
        "aggregate%bytes_offset%0#0 (copy)"
      ]
    },
    "588": {
      "op": "pushint 48 // 48",
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "maybe_value%1#0 (copy)",
        "aggregate%bytes_offset%0#0 (copy)",
        "48"
      ]
    },
    "590": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "591": {
      "op": "dup",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)"
      ]
    },
    "592": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "40"
      ]
    },
    "594": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "maybe_value%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "values%0#0"
      ]
    },
    "595": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "amt#0 (copy)",
        "maybe_value%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "values%0#0",
        "amt#0 (copy)"
      ]
    },
    "597": {
      "op": "+",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "tmp%1#0"
      ]
    },
    "598": {
      "op": "itob",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "599": {
      "op": "replace2 40",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%updated_data%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%updated_data%0#0"
      ]
    },
    "601": {
      "op": "replace3",
      "defined_out": [
        "aggregate%updated_array%0#0"
      ],
      "stack_out": [
        "aggregate%updated_array%0#0"
      ]
    },
    "602": {
      "op": "bytec_2 // \"payments\"",
      "stack_out": [
        "aggregate%updated_array%0#0",
        "\"payments\""
      ]
    },
    "603": {
      "op": "swap",
      "stack_out": [
        "\"payments\"",
        "aggregate%updated_array%0#0"
      ]
    },
    "604": {
      "op": "app_global_put",
      "stack_out": []
    },
    "605": {
      "retsub": true,
      "op": "retsub"
    },
    "606": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.create_storage",
      "params": {
        "box_key#0": "uint64"
      },
      "block": "create_storage",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "609": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "610": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "611": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "612": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "613": {
      "op": "bytec 4 // 0x70",
      "defined_out": [
        "0x70",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x70"
      ]
    },
    "615": {
      "op": "swap",
      "stack_out": [
        "0x70",
        "maybe_value%0#0"
      ]
    },
    "616": {
      "op": "app_global_put",
      "stack_out": []
    },
    "617": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "618": {
      "op": "bytec_0 // \"nested\"",
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "619": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "620": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "621": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%0#0"
      ]
    },
    "623": {
      "op": "bytec 5 // 0x6c",
      "defined_out": [
        "0x6c",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%0#0",
        "0x6c"
      ]
    },
    "625": {
      "op": "dig 2",
      "defined_out": [
        "0x6c",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%0#0",
        "0x6c",
        "maybe_value%1#0 (copy)"
      ]
    },
    "627": {
      "op": "app_local_put",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "628": {
      "op": "bytec 6 // \"box\"",
      "defined_out": [
        "\"box\"",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "\"box\""
      ]
    },
    "630": {
      "op": "pushint 2064 // 2064",
      "defined_out": [
        "\"box\"",
        "2064",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "\"box\"",
        "2064"
      ]
    },
    "633": {
      "op": "box_create",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "634": {
      "error": "expected box to not exist",
      "op": "assert // expected box to not exist",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "635": {
      "op": "extract 0 16",
      "defined_out": [
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0"
      ]
    },
    "638": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%extract%0#0",
        "box_key#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "box_key#0 (copy)"
      ]
    },
    "640": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "encoded_value%0#0"
      ]
    },
    "641": {
      "op": "bytec 7 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "aggregate%extract%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "encoded_value%0#0",
        "\"box_map\""
      ]
    },
    "643": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "\"box_map\"",
        "encoded_value%0#0"
      ]
    },
    "644": {
      "op": "concat",
      "defined_out": [
        "aggregate%extract%0#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "645": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#0",
        "box_prefixed_key%0#0",
        "0"
      ]
    },
    "646": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "0",
        "aggregate%extract%0#0"
      ]
    },
    "648": {
      "op": "box_replace",
      "stack_out": []
    },
    "649": {
      "retsub": true,
      "op": "retsub"
    },
    "650": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.local_struct",
      "params": {},
      "block": "local_struct",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "652": {
      "op": "pushint 1234 // 1234",
      "defined_out": [
        "1234",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1234"
      ]
    },
    "655": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "656": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "657": {
      "op": "pushint 567 // 567",
      "defined_out": [
        "567",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "567"
      ]
    },
    "660": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "661": {
      "op": "concat",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "662": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "663": {
      "op": "extract 0 32",
      "defined_out": [
        "a#0",
        "foo#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0"
      ]
    },
    "666": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "foo#0",
        "a#0 (copy)"
      ]
    },
    "668": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "a#0",
        "a#0 (copy)",
        "foo#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0",
        "a#0 (copy)",
        "32"
      ]
    },
    "670": {
      "op": "extract_uint64",
      "defined_out": [
        "a#0",
        "bar#0",
        "foo#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0",
        "bar#0"
      ]
    },
    "671": {
      "op": "dig 2",
      "stack_out": [
        "a#0",
        "foo#0",
        "bar#0",
        "a#0 (copy)"
      ]
    },
    "673": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "a#0",
        "a#0 (copy)",
        "bar#0",
        "foo#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0",
        "bar#0",
        "a#0 (copy)",
        "40"
      ]
    },
    "675": {
      "op": "extract_uint64",
      "defined_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "foo#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0",
        "bar#0",
        "baz#0"
      ]
    },
    "676": {
      "op": "global ZeroAddress",
      "defined_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "foo#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0",
        "bar#0",
        "baz#0",
        "tmp%2#0"
      ]
    },
    "678": {
      "op": "uncover 3",
      "stack_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "tmp%2#0",
        "foo#0"
      ]
    },
    "680": {
      "op": "!=",
      "defined_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "tmp%3#0"
      ]
    },
    "681": {
      "error": "use foo",
      "op": "assert // use foo",
      "stack_out": [
        "a#0",
        "bar#0",
        "baz#0"
      ]
    },
    "682": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "baz#0",
        "bar#0"
      ]
    },
    "683": {
      "error": "use bar",
      "op": "assert // use bar",
      "stack_out": [
        "a#0",
        "baz#0"
      ]
    },
    "684": {
      "error": "use baz",
      "op": "assert // use baz",
      "stack_out": [
        "a#0"
      ]
    },
    "685": {
      "callsub": "test_cases.mutable_native_types.contract.do_something",
      "op": "callsub do_something"
    },
    "688": {
      "retsub": true,
      "op": "retsub"
    },
    "689": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.delete_storage",
      "params": {
        "box_key#0": "uint64"
      },
      "block": "delete_storage",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "692": {
      "op": "bytec 4 // 0x70",
      "defined_out": [
        "0x70"
      ],
      "stack_out": [
        "0x70"
      ]
    },
    "694": {
      "op": "app_global_del",
      "stack_out": []
    },
    "695": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "697": {
      "op": "bytec 5 // 0x6c",
      "defined_out": [
        "0x6c",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x6c"
      ]
    },
    "699": {
      "op": "app_local_del",
      "stack_out": []
    },
    "700": {
      "op": "bytec 6 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "702": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "703": {
      "op": "pop",
      "stack_out": []
    },
    "704": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_key#0 (copy)"
      ],
      "stack_out": [
        "box_key#0 (copy)"
      ]
    },
    "706": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "707": {
      "op": "bytec 7 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"box_map\""
      ]
    },
    "709": {
      "op": "swap",
      "stack_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ]
    },
    "710": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "711": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "712": {
      "op": "pop",
      "stack_out": []
    },
    "713": {
      "retsub": true,
      "op": "retsub"
    },
    "714": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.struct_arg",
      "params": {
        "box_key#0": "uint64",
        "a#0": "bytes"
      },
      "block": "struct_arg",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "717": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "718": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "719": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "720": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "721": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "a#0 (copy)"
      ]
    },
    "723": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%updated_data%0#0"
      ],
      "stack_out": [
        "aggregate%updated_data%0#0"
      ]
    },
    "725": {
      "op": "bytec_0 // \"nested\"",
      "stack_out": [
        "aggregate%updated_data%0#0",
        "\"nested\""
      ]
    },
    "726": {
      "op": "swap",
      "stack_out": [
        "\"nested\"",
        "aggregate%updated_data%0#0"
      ]
    },
    "727": {
      "op": "app_global_put",
      "stack_out": []
    },
    "728": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "729": {
      "op": "bytec 4 // 0x70",
      "defined_out": [
        "0",
        "0x70"
      ],
      "stack_out": [
        "0",
        "0x70"
      ]
    },
    "731": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "732": {
      "error": "check self.nested_proxy exists",
      "op": "assert // check self.nested_proxy exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "733": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%1#0",
        "a#0 (copy)"
      ]
    },
    "735": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%updated_data%1#0"
      ],
      "stack_out": [
        "aggregate%updated_data%1#0"
      ]
    },
    "737": {
      "op": "bytec 4 // 0x70",
      "stack_out": [
        "aggregate%updated_data%1#0",
        "0x70"
      ]
    },
    "739": {
      "op": "swap",
      "stack_out": [
        "0x70",
        "aggregate%updated_data%1#0"
      ]
    },
    "740": {
      "op": "app_global_put",
      "stack_out": []
    },
    "741": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "743": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "744": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "745": {
      "op": "bytec 5 // 0x6c",
      "defined_out": [
        "0",
        "0x6c",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0",
        "0x6c"
      ]
    },
    "747": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "748": {
      "error": "check self.nested_local exists for account",
      "op": "assert // check self.nested_local exists for account",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "749": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "a#0 (copy)"
      ]
    },
    "751": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%updated_data%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%updated_data%2#0"
      ]
    },
    "753": {
      "op": "bytec 5 // 0x6c"
    },
    "755": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "0x6c",
        "aggregate%updated_data%2#0"
      ]
    },
    "756": {
      "op": "app_local_put",
      "stack_out": []
    },
    "757": {
      "op": "bytec 6 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "759": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"box\"",
        "0"
      ]
    },
    "760": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"box\"",
        "0",
        "a#0 (copy)"
      ]
    },
    "762": {
      "op": "box_replace",
      "stack_out": []
    },
    "763": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_key#0 (copy)"
      ],
      "stack_out": [
        "box_key#0 (copy)"
      ]
    },
    "765": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "766": {
      "op": "bytec 7 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"box_map\""
      ]
    },
    "768": {
      "op": "swap",
      "stack_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ]
    },
    "769": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "770": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "0"
      ]
    },
    "771": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "0",
        "a#0 (copy)"
      ]
    },
    "773": {
      "op": "box_replace",
      "stack_out": []
    },
    "774": {
      "retsub": true,
      "op": "retsub"
    },
    "775": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.struct_return",
      "params": {},
      "block": "struct_return",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "776": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "777": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "778": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "779": {
      "op": "extract 0 16",
      "defined_out": [
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0"
      ]
    },
    "782": {
      "retsub": true,
      "op": "retsub"
    },
    "783": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.tup_return",
      "params": {},
      "block": "tup_return",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "784": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "785": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "786": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "787": {
      "op": "extract 32 16",
      "defined_out": [
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0"
      ]
    },
    "790": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%0#0 (copy)"
      ]
    },
    "791": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%0#0 (copy)",
        "0"
      ]
    },
    "792": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%item0%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "793": {
      "op": "swap",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "794": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%extract%0#0",
        "aggregate%item0%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%0#0",
        "8"
      ]
    },
    "795": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "796": {
      "retsub": true,
      "op": "retsub"
    },
    "797": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.calculate_sum",
      "params": {},
      "block": "calculate_sum",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "800": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "801": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "802": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "803": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "804": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "805": {
      "op": "extract 0 16",
      "defined_out": [
        "fixed_a#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "fixed_a#0"
      ]
    },
    "808": {
      "op": "swap",
      "stack_out": [
        "fixed_a#0",
        "maybe_value%0#0"
      ]
    },
    "809": {
      "op": "extract 16 16",
      "defined_out": [
        "fixed_a#0",
        "fixed_b#0"
      ],
      "stack_out": [
        "fixed_a#0",
        "fixed_b#0"
      ]
    },
    "812": {
      "op": "dig 1",
      "defined_out": [
        "fixed_a#0",
        "fixed_a#0 (copy)",
        "fixed_b#0"
      ],
      "stack_out": [
        "fixed_a#0",
        "fixed_b#0",
        "fixed_a#0 (copy)"
      ]
    },
    "814": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fixed_a#0",
        "fixed_b#0",
        "fixed_a#0 (copy)",
        "0"
      ]
    },
    "815": {
      "op": "extract_uint64",
      "defined_out": [
        "fixed_a#0",
        "fixed_b#0",
        "values%0#0"
      ],
      "stack_out": [
        "fixed_a#0",
        "fixed_b#0",
        "values%0#0"
      ]
    },
    "816": {
      "op": "uncover 2",
      "stack_out": [
        "fixed_b#0",
        "values%0#0",
        "fixed_a#0"
      ]
    },
    "818": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "fixed_a#0",
        "fixed_b#0",
        "values%0#0"
      ],
      "stack_out": [
        "fixed_b#0",
        "values%0#0",
        "fixed_a#0",
        "8"
      ]
    },
    "819": {
      "op": "extract_uint64",
      "defined_out": [
        "fixed_b#0",
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "fixed_b#0",
        "values%0#0",
        "values%1#0"
      ]
    },
    "820": {
      "op": "+",
      "defined_out": [
        "fixed_b#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "fixed_b#0",
        "tmp%0#1"
      ]
    },
    "821": {
      "op": "dig 1",
      "defined_out": [
        "fixed_b#0",
        "fixed_b#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "fixed_b#0",
        "tmp%0#1",
        "fixed_b#0 (copy)"
      ]
    },
    "823": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fixed_b#0",
        "tmp%0#1",
        "fixed_b#0 (copy)",
        "0"
      ]
    },
    "824": {
      "op": "extract_uint64",
      "stack_out": [
        "fixed_b#0",
        "tmp%0#1",
        "values%0#0"
      ]
    },
    "825": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "values%0#0",
        "fixed_b#0"
      ]
    },
    "827": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%0#1",
        "values%0#0",
        "fixed_b#0",
        "8"
      ]
    },
    "828": {
      "op": "extract_uint64",
      "stack_out": [
        "tmp%0#1",
        "values%0#0",
        "values%1#0"
      ]
    },
    "829": {
      "op": "+",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%0#2"
      ]
    },
    "830": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "831": {
      "op": "dupn 2",
      "defined_out": [
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "833": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#0",
        "result#0 (copy)",
        "100"
      ]
    },
    "835": {
      "op": "<",
      "defined_out": [
        "result#0",
        "result#6",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%3#0"
      ]
    },
    "836": {
      "op": "bz calculate_sum_after_if_else@2",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "839": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "0"
      ]
    },
    "840": {
      "op": "bytec_0 // \"nested\"",
      "stack_out": [
        "result#0",
        "result#6",
        "0",
        "\"nested\""
      ]
    },
    "841": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "842": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0"
      ]
    },
    "843": {
      "op": "extract 32 16",
      "defined_out": [
        "aggregate%extract%2#0",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%extract%2#0"
      ]
    },
    "846": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract%2#0",
        "aggregate%extract%2#0 (copy)",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%extract%2#0",
        "aggregate%extract%2#0 (copy)"
      ]
    },
    "847": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%extract%2#0",
        "aggregate%extract%2#0 (copy)",
        "0"
      ]
    },
    "848": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%extract%2#0",
        "c#0",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%extract%2#0",
        "c#0"
      ]
    },
    "849": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "c#0",
        "aggregate%extract%2#0"
      ]
    },
    "850": {
      "op": "intc_3 // 8",
      "stack_out": [
        "result#0",
        "result#6",
        "c#0",
        "aggregate%extract%2#0",
        "8"
      ]
    },
    "851": {
      "op": "extract_uint64",
      "defined_out": [
        "c#0",
        "d#0",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "c#0",
        "d#0"
      ]
    },
    "852": {
      "op": "frame_dig 0",
      "stack_out": [
        "result#0",
        "result#6",
        "c#0",
        "d#0",
        "result#0"
      ]
    },
    "854": {
      "op": "uncover 2",
      "stack_out": [
        "result#0",
        "result#6",
        "d#0",
        "result#0",
        "c#0"
      ]
    },
    "856": {
      "op": "+",
      "stack_out": [
        "result#0",
        "result#6",
        "d#0",
        "result#0"
      ]
    },
    "857": {
      "op": "+",
      "stack_out": [
        "result#0",
        "result#6",
        "result#6"
      ]
    },
    "858": {
      "op": "frame_bury 1",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "860": {
      "block": "calculate_sum_after_if_else@2",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "result#0"
      ]
    },
    "862": {
      "op": "frame_bury 0"
    },
    "864": {
      "retsub": true,
      "op": "retsub"
    },
    "865": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.test_arr",
      "params": {
        "arr#0": "bytes"
      },
      "block": "test_arr",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "868": {
      "op": "frame_dig -1",
      "defined_out": [
        "arr#0 (copy)"
      ],
      "stack_out": [
        "arr#0 (copy)"
      ]
    },
    "870": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr#0 (copy)"
      ],
      "stack_out": [
        "arr#0 (copy)",
        "0"
      ]
    },
    "871": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0"
      ]
    },
    "872": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_length%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_length%0#0 (copy)"
      ]
    },
    "873": {
      "op": "!",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "tmp%1#0"
      ]
    },
    "874": {
      "error": "expected empty array",
      "op": "assert // expected empty array",
      "stack_out": [
        "aggregate%array_length%0#0"
      ]
    },
    "875": {
      "op": "frame_dig -1",
      "stack_out": [
        "aggregate%array_length%0#0",
        "arr#0 (copy)"
      ]
    },
    "877": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "extract_to_end%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "extract_to_end%0#0"
      ]
    },
    "880": {
      "op": "dup",
      "stack_out": [
        "aggregate%array_length%0#0",
        "extract_to_end%0#0",
        "extract_to_end%0#0 (copy)"
      ]
    },
    "881": {
      "op": "len",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%bytes_len%0#0",
        "extract_to_end%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "extract_to_end%0#0",
        "aggregate%bytes_len%0#0"
      ]
    },
    "882": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "aggregate%array_length%0#0",
        "aggregate%bytes_len%0#0",
        "extract_to_end%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "extract_to_end%0#0",
        "aggregate%bytes_len%0#0",
        "16"
      ]
    },
    "883": {
      "op": "/",
      "defined_out": [
        "aggregate%array_len%0#0",
        "aggregate%array_length%0#0",
        "extract_to_end%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "extract_to_end%0#0",
        "aggregate%array_len%0#0"
      ]
    },
    "884": {
      "op": "uncover 2",
      "stack_out": [
        "extract_to_end%0#0",
        "aggregate%array_len%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "886": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_len%0#0",
        "aggregate%array_len%0#0 (copy)",
        "aggregate%array_length%0#0",
        "extract_to_end%0#0"
      ],
      "stack_out": [
        "extract_to_end%0#0",
        "aggregate%array_len%0#0",
        "aggregate%array_length%0#0",
        "aggregate%array_len%0#0 (copy)"
      ]
    },
    "888": {
      "op": "==",
      "defined_out": [
        "aggregate%array_len%0#0",
        "extract_to_end%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "extract_to_end%0#0",
        "aggregate%array_len%0#0",
        "tmp%8#0"
      ]
    },
    "889": {
      "error": "expected arrays to be the same length",
      "op": "assert // expected arrays to be the same length",
      "stack_out": [
        "extract_to_end%0#0",
        "aggregate%array_len%0#0"
      ]
    },
    "890": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "extract_to_end%0#0"
      ],
      "stack_out": [
        "extract_to_end%0#0",
        "as_bytes%0#0"
      ]
    },
    "891": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "extract_to_end%0#0"
      ],
      "stack_out": [
        "extract_to_end%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "894": {
      "op": "swap",
      "stack_out": [
        "as_u16_bytes%0#0",
        "extract_to_end%0#0"
      ]
    },
    "895": {
      "op": "concat",
      "defined_out": [
        "arr5#0"
      ],
      "stack_out": [
        "arr5#0"
      ]
    },
    "896": {
      "op": "frame_dig -1",
      "stack_out": [
        "arr5#0",
        "arr#0 (copy)"
      ]
    },
    "898": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "899": {
      "error": "expected arrays to be the same",
      "op": "assert // expected arrays to be the same",
      "stack_out": []
    },
    "900": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "902": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "1"
      ]
    },
    "903": {
      "op": "+",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "904": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "906": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "2"
      ]
    },
    "908": {
      "op": "+",
      "defined_out": [
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "909": {
      "op": "swap",
      "stack_out": [
        "tmp%17#0",
        "tmp%15#0"
      ]
    },
    "910": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "911": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%17#0"
      ]
    },
    "912": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "913": {
      "op": "concat",
      "defined_out": [
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0"
      ]
    },
    "914": {
      "op": "dup",
      "defined_out": [
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "fixed_struct#0"
      ]
    },
    "915": {
      "op": "frame_dig -1",
      "stack_out": [
        "fixed_struct#0",
        "fixed_struct#0",
        "arr#0 (copy)"
      ]
    },
    "917": {
      "op": "swap",
      "stack_out": [
        "fixed_struct#0",
        "arr#0 (copy)",
        "fixed_struct#0"
      ]
    },
    "918": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%concat%1#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "aggregate%concat%1#0"
      ]
    },
    "919": {
      "op": "dup",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%concat%1#0 (copy)",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "aggregate%concat%1#0",
        "aggregate%concat%1#0 (copy)"
      ]
    },
    "920": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fixed_struct#0",
        "aggregate%concat%1#0",
        "aggregate%concat%1#0 (copy)",
        "0"
      ]
    },
    "921": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%extract_uint16%0#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "aggregate%concat%1#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "922": {
      "op": "intc_1 // 1",
      "stack_out": [
        "fixed_struct#0",
        "aggregate%concat%1#0",
        "aggregate%extract_uint16%0#0",
        "1"
      ]
    },
    "923": {
      "op": "+",
      "defined_out": [
        "aggregate%add%0#0",
        "aggregate%concat%1#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "aggregate%concat%1#0",
        "aggregate%add%0#0"
      ]
    },
    "924": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%concat%1#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "aggregate%concat%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "925": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_u16_bytes%0#0",
        "aggregate%concat%1#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "aggregate%concat%1#0",
        "aggregate%as_u16_bytes%0#0"
      ]
    },
    "928": {
      "op": "replace2 0",
      "defined_out": [
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1"
      ]
    },
    "930": {
      "op": "dup",
      "defined_out": [
        "arr2#1",
        "arr2#1 (copy)",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "arr2#1 (copy)"
      ]
    },
    "931": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "arr2#1 (copy)",
        "0"
      ]
    },
    "932": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%3#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0"
      ]
    },
    "933": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%3#0",
        "aggregate%array_length%3#0 (copy)",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "aggregate%array_length%3#0 (copy)"
      ]
    },
    "934": {
      "op": "intc_1 // 1",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "aggregate%array_length%3#0 (copy)",
        "1"
      ]
    },
    "935": {
      "op": "==",
      "defined_out": [
        "aggregate%array_length%3#0",
        "arr2#1",
        "fixed_struct#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "tmp%22#0"
      ]
    },
    "936": {
      "error": "expected array to have 1 item",
      "op": "assert // expected array to have 1 item",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0"
      ]
    },
    "937": {
      "op": "dig 1",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "arr2#1 (copy)"
      ]
    },
    "939": {
      "callsub": "test_cases.mutable_native_types.contract.sum_frozen_arr",
      "op": "callsub sum_frozen_arr",
      "defined_out": [
        "aggregate%array_length%3#0",
        "arr2#1",
        "fixed_struct#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "tmp%24#0"
      ]
    },
    "942": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "aggregate%array_length%3#0",
        "arr2#1",
        "fixed_struct#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "tmp%24#0",
        "7"
      ]
    },
    "944": {
      "op": "==",
      "defined_out": [
        "aggregate%array_length%3#0",
        "arr2#1",
        "fixed_struct#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "tmp%25#0"
      ]
    },
    "945": {
      "error": "expected sum to be 7",
      "op": "assert // expected sum to be 7",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0"
      ]
    },
    "946": {
      "op": "frame_dig -1",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "arr#0 (copy)"
      ]
    },
    "948": {
      "op": "dig 2",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "arr#0 (copy)",
        "arr2#1 (copy)"
      ]
    },
    "950": {
      "op": "!=",
      "defined_out": [
        "aggregate%array_length%3#0",
        "arr2#1",
        "fixed_struct#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "tmp%26#0"
      ]
    },
    "951": {
      "error": "expected arrays to be different",
      "op": "assert // expected arrays to be different",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0"
      ]
    },
    "952": {
      "op": "dig 1",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "arr2#1 (copy)"
      ]
    },
    "954": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_length%3#0",
        "aggregate%array_trimmed%0#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "957": {
      "op": "dig 2",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "aggregate%array_trimmed%0#0",
        "arr2#1 (copy)"
      ]
    },
    "959": {
      "op": "extract 2 16",
      "defined_out": [
        "aggregate%array_length%3#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%encoded_element%0#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "962": {
      "op": "pushbytes 0x0001",
      "defined_out": [
        "0x0001",
        "aggregate%array_length%3#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%encoded_element%0#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%encoded_element%0#0",
        "0x0001"
      ]
    },
    "966": {
      "op": "swap",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "aggregate%array_trimmed%0#0",
        "0x0001",
        "aggregate%encoded_element%0#0"
      ]
    },
    "967": {
      "op": "concat",
      "defined_out": [
        "aggregate%array_length%3#0",
        "aggregate%array_trimmed%0#0",
        "arr2#1",
        "arr7#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "aggregate%array_trimmed%0#0",
        "arr7#0"
      ]
    },
    "968": {
      "op": "dig 3",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "aggregate%array_trimmed%0#0",
        "arr7#0",
        "arr2#1 (copy)"
      ]
    },
    "970": {
      "op": "==",
      "defined_out": [
        "aggregate%array_length%3#0",
        "aggregate%array_trimmed%0#0",
        "arr2#1",
        "fixed_struct#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "aggregate%array_trimmed%0#0",
        "tmp%27#0"
      ]
    },
    "971": {
      "error": "expected arrays to be the same",
      "op": "assert // expected arrays to be the same",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "972": {
      "op": "bytec 8 // 0x0000",
      "defined_out": [
        "aggregate%array_length%3#0",
        "aggregate%array_trimmed%0#0",
        "arr2#1",
        "arr8#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "aggregate%array_length%3#0",
        "aggregate%array_trimmed%0#0",
        "arr8#0"
      ]
    },
    "974": {
      "op": "cover 2",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "arr8#0",
        "aggregate%array_length%3#0",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "976": {
      "op": "bytec 8 // 0x0000",
      "defined_out": [
        "0x0000",
        "aggregate%array_length%3#0",
        "aggregate%array_trimmed%0#0",
        "arr2#1",
        "arr8#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "arr8#0",
        "aggregate%array_length%3#0",
        "aggregate%array_trimmed%0#0",
        "0x0000"
      ]
    },
    "978": {
      "op": "swap",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "arr8#0",
        "aggregate%array_length%3#0",
        "0x0000",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "979": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%array_length%3#0",
        "aggregate%concat%2#0",
        "arr2#1",
        "arr8#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "arr8#0",
        "aggregate%array_length%3#0",
        "aggregate%concat%2#0"
      ]
    },
    "980": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%3#0",
        "aggregate%concat%2#0",
        "aggregate%concat%2#0 (copy)",
        "arr2#1",
        "arr8#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "arr8#0",
        "aggregate%array_length%3#0",
        "aggregate%concat%2#0",
        "aggregate%concat%2#0 (copy)"
      ]
    },
    "981": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "arr8#0",
        "aggregate%array_length%3#0",
        "aggregate%concat%2#0",
        "aggregate%concat%2#0 (copy)",
        "0"
      ]
    },
    "982": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%3#0",
        "aggregate%concat%2#0",
        "aggregate%extract_uint16%1#0",
        "arr2#1",
        "arr8#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "arr8#0",
        "aggregate%array_length%3#0",
        "aggregate%concat%2#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "983": {
      "op": "uncover 2",
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "arr8#0",
        "aggregate%concat%2#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%array_length%3#0"
      ]
    },
    "985": {
      "op": "+",
      "defined_out": [
        "aggregate%add%1#0",
        "aggregate%concat%2#0",
        "arr2#1",
        "arr8#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "arr8#0",
        "aggregate%concat%2#0",
        "aggregate%add%1#0"
      ]
    },
    "986": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "aggregate%concat%2#0",
        "arr2#1",
        "arr8#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "arr8#0",
        "aggregate%concat%2#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "987": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_u16_bytes%1#0",
        "aggregate%concat%2#0",
        "arr2#1",
        "arr8#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "arr8#0",
        "aggregate%concat%2#0",
        "aggregate%as_u16_bytes%1#0"
      ]
    },
    "990": {
      "op": "replace2 0",
      "defined_out": [
        "arr2#1",
        "arr8#0",
        "arr8#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr2#1",
        "arr8#0",
        "arr8#1"
      ]
    },
    "992": {
      "op": "uncover 2",
      "stack_out": [
        "fixed_struct#0",
        "arr8#0",
        "arr8#1",
        "arr2#1"
      ]
    },
    "994": {
      "op": "==",
      "defined_out": [
        "arr8#0",
        "fixed_struct#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr8#0",
        "tmp%30#0"
      ]
    },
    "995": {
      "error": "expected arrays to be the same",
      "op": "assert // expected arrays to be the same",
      "stack_out": [
        "fixed_struct#0",
        "arr8#0"
      ]
    },
    "996": {
      "op": "intc_0 // 0",
      "defined_out": [
        "_i#0",
        "arr8#0",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "arr8#0",
        "_i#0"
      ]
    },
    "997": {
      "op": "swap",
      "defined_out": [
        "_i#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1"
      ]
    },
    "998": {
      "block": "test_arr_for_header@3",
      "stack_in": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "_i#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "_i#0"
      ]
    },
    "1000": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "_i#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "_i#0",
        "3"
      ]
    },
    "1002": {
      "op": "<",
      "defined_out": [
        "_i#0",
        "continue_looping%0#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "continue_looping%0#0"
      ]
    },
    "1003": {
      "op": "bz test_arr_after_for@6",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1"
      ]
    },
    "1006": {
      "op": "frame_dig 2",
      "defined_out": [
        "_i#0",
        "arr2#1"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1"
      ]
    },
    "1008": {
      "op": "frame_dig 0",
      "defined_out": [
        "_i#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "fixed_struct#0"
      ]
    },
    "1010": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "_i#0",
        "aggregate%concat%3#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "aggregate%concat%3#0"
      ]
    },
    "1011": {
      "op": "dup",
      "defined_out": [
        "_i#0",
        "aggregate%concat%3#0",
        "aggregate%concat%3#0 (copy)",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "aggregate%concat%3#0",
        "aggregate%concat%3#0 (copy)"
      ]
    },
    "1012": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "_i#0",
        "aggregate%concat%3#0",
        "aggregate%concat%3#0 (copy)",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "aggregate%concat%3#0",
        "aggregate%concat%3#0 (copy)",
        "0"
      ]
    },
    "1013": {
      "op": "extract_uint16",
      "defined_out": [
        "_i#0",
        "aggregate%concat%3#0",
        "aggregate%extract_uint16%2#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "aggregate%concat%3#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "1014": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "_i#0",
        "aggregate%concat%3#0",
        "aggregate%extract_uint16%2#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "aggregate%concat%3#0",
        "aggregate%extract_uint16%2#0",
        "1"
      ]
    },
    "1015": {
      "op": "+",
      "defined_out": [
        "_i#0",
        "aggregate%add%2#0",
        "aggregate%concat%3#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "aggregate%concat%3#0",
        "aggregate%add%2#0"
      ]
    },
    "1016": {
      "op": "itob",
      "defined_out": [
        "_i#0",
        "aggregate%as_bytes%4#0",
        "aggregate%concat%3#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "aggregate%concat%3#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "1017": {
      "op": "extract 6 2",
      "defined_out": [
        "_i#0",
        "aggregate%as_u16_bytes%2#0",
        "aggregate%concat%3#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "aggregate%concat%3#0",
        "aggregate%as_u16_bytes%2#0"
      ]
    },
    "1020": {
      "op": "replace2 0",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1"
      ]
    },
    "1022": {
      "op": "frame_bury 2",
      "defined_out": [
        "_i#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1"
      ]
    },
    "1024": {
      "op": "frame_dig 1",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "_i#0"
      ]
    },
    "1026": {
      "op": "intc_1 // 1",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "_i#0",
        "1"
      ]
    },
    "1027": {
      "op": "+",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "_i#0"
      ]
    },
    "1028": {
      "op": "frame_bury 1",
      "defined_out": [
        "_i#0",
        "arr2#1",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1"
      ]
    },
    "1030": {
      "op": "b test_arr_for_header@3"
    },
    "1033": {
      "block": "test_arr_after_for@6",
      "stack_in": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "arr2#1"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1"
      ]
    },
    "1035": {
      "op": "dup",
      "defined_out": [
        "arr2#1",
        "arr2#1 (copy)"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "arr2#1 (copy)"
      ]
    },
    "1036": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr2#1",
        "arr2#1 (copy)"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "arr2#1 (copy)",
        "0"
      ]
    },
    "1037": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%5#0",
        "arr2#1"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "aggregate%array_length%5#0"
      ]
    },
    "1038": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "aggregate%array_length%5#0",
        "arr2#1"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "aggregate%array_length%5#0",
        "3"
      ]
    },
    "1040": {
      "op": "==",
      "defined_out": [
        "arr2#1",
        "tmp%38#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "tmp%38#0"
      ]
    },
    "1041": {
      "error": "expected 3 elements",
      "op": "assert // expected 3 elements",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1"
      ]
    },
    "1042": {
      "op": "dup",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "arr2#1 (copy)"
      ]
    },
    "1043": {
      "callsub": "test_cases.mutable_native_types.contract.sum_frozen_arr",
      "op": "callsub sum_frozen_arr",
      "defined_out": [
        "arr2#1",
        "tmp%40#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "tmp%40#0"
      ]
    },
    "1046": {
      "op": "pushint 21 // 21",
      "defined_out": [
        "21",
        "arr2#1",
        "tmp%40#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "tmp%40#0",
        "21"
      ]
    },
    "1048": {
      "op": "==",
      "defined_out": [
        "arr2#1",
        "tmp%41#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "tmp%41#0"
      ]
    },
    "1049": {
      "error": "expected sum to be 21",
      "op": "assert // expected sum to be 21",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1"
      ]
    },
    "1050": {
      "op": "dup",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "arr2#1 (copy)"
      ]
    },
    "1051": {
      "op": "len",
      "defined_out": [
        "arr2#1",
        "tmp%0#2"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "tmp%0#2"
      ]
    },
    "1052": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "arr2#1",
        "tmp%0#2"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "tmp%0#2",
        "16"
      ]
    },
    "1053": {
      "op": "-",
      "defined_out": [
        "arr2#1",
        "tmp%1#2"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "tmp%1#2"
      ]
    },
    "1054": {
      "op": "dig 1",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "tmp%1#2",
        "arr2#1 (copy)"
      ]
    },
    "1056": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "tmp%1#2",
        "arr2#1 (copy)",
        "0"
      ]
    },
    "1057": {
      "op": "uncover 2",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "arr2#1 (copy)",
        "0",
        "tmp%1#2"
      ]
    },
    "1059": {
      "op": "substring3",
      "defined_out": [
        "arr2#1",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "result#0"
      ]
    },
    "1060": {
      "op": "dup",
      "defined_out": [
        "arr2#1",
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "1061": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "result#0",
        "result#0 (copy)",
        "0"
      ]
    },
    "1062": {
      "op": "extract_uint16",
      "defined_out": [
        "arr2#1",
        "array_length#0",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "result#0",
        "array_length#0"
      ]
    },
    "1063": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arr2#1",
        "array_length#0",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "result#0",
        "array_length#0",
        "1"
      ]
    },
    "1064": {
      "op": "-",
      "defined_out": [
        "arr2#1",
        "length_minus_1#0",
        "result#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "result#0",
        "length_minus_1#0"
      ]
    },
    "1065": {
      "op": "itob",
      "defined_out": [
        "arr2#1",
        "result#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "result#0",
        "tmp%3#0"
      ]
    },
    "1066": {
      "op": "extract 6 0",
      "defined_out": [
        "arr2#1",
        "result#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "result#0",
        "tmp%4#1"
      ]
    },
    "1069": {
      "op": "replace2 0",
      "defined_out": [
        "arr2#1",
        "arr2#6"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#1",
        "arr2#6"
      ]
    },
    "1071": {
      "op": "swap",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "arr2#1"
      ]
    },
    "1072": {
      "callsub": "test_cases.mutable_native_types.contract.sum_frozen_arr",
      "op": "callsub sum_frozen_arr",
      "defined_out": [
        "arr2#1",
        "arr2#6",
        "tmp%46#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "tmp%46#0"
      ]
    },
    "1075": {
      "op": "pushint 21 // 21",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "tmp%46#0",
        "21"
      ]
    },
    "1077": {
      "op": "==",
      "defined_out": [
        "arr2#1",
        "arr2#6",
        "tmp%47#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "tmp%47#0"
      ]
    },
    "1078": {
      "error": "expected sum to be 21",
      "op": "assert // expected sum to be 21",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6"
      ]
    },
    "1079": {
      "op": "dup",
      "defined_out": [
        "arr2#1",
        "arr2#6",
        "arr2#6 (copy)"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "arr2#6 (copy)"
      ]
    },
    "1080": {
      "callsub": "test_cases.mutable_native_types.contract.sum_frozen_arr",
      "op": "callsub sum_frozen_arr",
      "defined_out": [
        "arr2#1",
        "arr2#6",
        "tmp%48#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "tmp%48#0"
      ]
    },
    "1083": {
      "op": "pushint 14 // 14",
      "defined_out": [
        "14",
        "arr2#1",
        "arr2#6",
        "tmp%48#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "tmp%48#0",
        "14"
      ]
    },
    "1085": {
      "op": "==",
      "defined_out": [
        "arr2#1",
        "arr2#6",
        "tmp%49#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "tmp%49#0"
      ]
    },
    "1086": {
      "error": "expected sum to be 14",
      "op": "assert // expected sum to be 14",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6"
      ]
    },
    "1087": {
      "op": "dup",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "arr2#6 (copy)"
      ]
    },
    "1088": {
      "op": "extract 2 0",
      "defined_out": [
        "arr2#1",
        "arr2#6",
        "extract_to_end%2#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "extract_to_end%2#0"
      ]
    },
    "1091": {
      "op": "dig 1",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "extract_to_end%2#0",
        "arr2#6 (copy)"
      ]
    },
    "1093": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "extract_to_end%2#0",
        "arr2#6 (copy)",
        "0"
      ]
    },
    "1094": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%6#0",
        "arr2#1",
        "arr2#6",
        "extract_to_end%2#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "extract_to_end%2#0",
        "aggregate%array_length%6#0"
      ]
    },
    "1095": {
      "op": "dig 2",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "extract_to_end%2#0",
        "aggregate%array_length%6#0",
        "arr2#6 (copy)"
      ]
    },
    "1097": {
      "op": "uncover 2",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "aggregate%array_length%6#0",
        "arr2#6 (copy)",
        "extract_to_end%2#0"
      ]
    },
    "1099": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%array_length%6#0",
        "aggregate%concat%4#0",
        "arr2#1",
        "arr2#6"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "aggregate%array_length%6#0",
        "aggregate%concat%4#0"
      ]
    },
    "1100": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%6#0",
        "aggregate%concat%4#0",
        "aggregate%concat%4#0 (copy)",
        "arr2#1",
        "arr2#6"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "aggregate%array_length%6#0",
        "aggregate%concat%4#0",
        "aggregate%concat%4#0 (copy)"
      ]
    },
    "1101": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "aggregate%array_length%6#0",
        "aggregate%concat%4#0",
        "aggregate%concat%4#0 (copy)",
        "0"
      ]
    },
    "1102": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%6#0",
        "aggregate%concat%4#0",
        "aggregate%extract_uint16%3#0",
        "arr2#1",
        "arr2#6"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "aggregate%array_length%6#0",
        "aggregate%concat%4#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "1103": {
      "op": "uncover 2",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "aggregate%concat%4#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%array_length%6#0"
      ]
    },
    "1105": {
      "op": "+",
      "defined_out": [
        "aggregate%add%3#0",
        "aggregate%concat%4#0",
        "arr2#1",
        "arr2#6"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "aggregate%concat%4#0",
        "aggregate%add%3#0"
      ]
    },
    "1106": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%5#0",
        "aggregate%concat%4#0",
        "arr2#1",
        "arr2#6"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "aggregate%concat%4#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "1107": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_u16_bytes%3#0",
        "aggregate%concat%4#0",
        "arr2#1",
        "arr2#6"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "aggregate%concat%4#0",
        "aggregate%as_u16_bytes%3#0"
      ]
    },
    "1110": {
      "op": "replace2 0",
      "defined_out": [
        "arr2#1",
        "arr2#6",
        "frozen2#1"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "frozen2#1"
      ]
    },
    "1112": {
      "callsub": "test_cases.mutable_native_types.contract.sum_frozen_arr",
      "op": "callsub sum_frozen_arr",
      "defined_out": [
        "arr2#1",
        "arr2#6",
        "tmp%52#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "tmp%52#0"
      ]
    },
    "1115": {
      "op": "pushint 28 // 28",
      "defined_out": [
        "28",
        "arr2#1",
        "arr2#6",
        "tmp%52#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "tmp%52#0",
        "28"
      ]
    },
    "1117": {
      "op": "==",
      "defined_out": [
        "arr2#1",
        "arr2#6",
        "tmp%53#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "tmp%53#0"
      ]
    },
    "1118": {
      "error": "and the sum shall be 41",
      "op": "assert // and the sum shall be 41",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6"
      ]
    },
    "1119": {
      "op": "bytec 9 // \"arr\"",
      "defined_out": [
        "\"arr\"",
        "arr2#1",
        "arr2#6"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "\"arr\""
      ]
    },
    "1121": {
      "op": "dig 1",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "\"arr\"",
        "arr2#6 (copy)"
      ]
    },
    "1123": {
      "op": "app_global_put",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6"
      ]
    },
    "1124": {
      "op": "frame_dig 0",
      "defined_out": [
        "arr2#1",
        "arr2#6",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "fixed_struct#0"
      ]
    },
    "1126": {
      "op": "len",
      "defined_out": [
        "aggregate%bytes_len%3#0",
        "arr2#1",
        "arr2#6",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "aggregate%bytes_len%3#0"
      ]
    },
    "1127": {
      "op": "intc_2 // 16",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "aggregate%bytes_len%3#0",
        "16"
      ]
    },
    "1128": {
      "op": "/",
      "defined_out": [
        "aggregate%array_len%3#0",
        "arr2#1",
        "arr2#6",
        "fixed_struct#0"
      ],
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6",
        "aggregate%array_len%3#0"
      ]
    },
    "1129": {
      "op": "assert",
      "stack_out": [
        "fixed_struct#0",
        "_i#0",
        "arr2#1",
        "arr2#6"
      ]
    },
    "1130": {
      "op": "frame_bury 0"
    },
    "1132": {
      "retsub": true,
      "op": "retsub"
    },
    "1133": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.test_arr2",
      "params": {},
      "block": "test_arr2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1134": {
      "op": "bytec 9 // \"arr\"",
      "defined_out": [
        "\"arr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arr\""
      ]
    },
    "1136": {
      "op": "app_global_get_ex",
      "defined_out": [
        "copied#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "copied#0",
        "maybe_exists%0#0"
      ]
    },
    "1137": {
      "error": "check self.arr exists",
      "op": "assert // check self.arr exists",
      "stack_out": [
        "copied#0"
      ]
    },
    "1138": {
      "op": "dup",
      "defined_out": [
        "copied#0",
        "copied#0 (copy)"
      ],
      "stack_out": [
        "copied#0",
        "copied#0 (copy)"
      ]
    },
    "1139": {
      "op": "substring 0 2",
      "defined_out": [
        "aggregate%substring3%0#0",
        "copied#0"
      ],
      "stack_out": [
        "copied#0",
        "aggregate%substring3%0#0"
      ]
    },
    "1142": {
      "op": "dig 1",
      "stack_out": [
        "copied#0",
        "aggregate%substring3%0#0",
        "copied#0 (copy)"
      ]
    },
    "1144": {
      "op": "extract 18 0",
      "defined_out": [
        "aggregate%extract_to_end%0#0",
        "aggregate%substring3%0#0",
        "copied#0"
      ],
      "stack_out": [
        "copied#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_to_end%0#0"
      ]
    },
    "1147": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "copied#0"
      ],
      "stack_out": [
        "copied#0",
        "aggregate%concat%0#0"
      ]
    },
    "1148": {
      "op": "dig 1",
      "stack_out": [
        "copied#0",
        "aggregate%concat%0#0",
        "copied#0 (copy)"
      ]
    },
    "1150": {
      "op": "intc_0 // 0",
      "stack_out": [
        "copied#0",
        "aggregate%concat%0#0",
        "copied#0 (copy)",
        "0"
      ]
    },
    "1151": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%extract_uint16%0#0",
        "copied#0"
      ],
      "stack_out": [
        "copied#0",
        "aggregate%concat%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1152": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%concat%0#0",
        "aggregate%extract_uint16%0#0",
        "copied#0"
      ],
      "stack_out": [
        "copied#0",
        "aggregate%concat%0#0",
        "aggregate%extract_uint16%0#0",
        "1"
      ]
    },
    "1153": {
      "op": "-",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%sub%0#0",
        "copied#0"
      ],
      "stack_out": [
        "copied#0",
        "aggregate%concat%0#0",
        "aggregate%sub%0#0"
      ]
    },
    "1154": {
      "op": "dup",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%sub%0#0",
        "aggregate%sub%0#0 (copy)",
        "copied#0"
      ],
      "stack_out": [
        "copied#0",
        "aggregate%concat%0#0",
        "aggregate%sub%0#0",
        "aggregate%sub%0#0 (copy)"
      ]
    },
    "1155": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%concat%0#0",
        "aggregate%sub%0#0",
        "copied#0"
      ],
      "stack_out": [
        "copied#0",
        "aggregate%concat%0#0",
        "aggregate%sub%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "1156": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_u16_bytes%0#0",
        "aggregate%concat%0#0",
        "aggregate%sub%0#0",
        "copied#0"
      ],
      "stack_out": [
        "copied#0",
        "aggregate%concat%0#0",
        "aggregate%sub%0#0",
        "aggregate%as_u16_bytes%0#0"
      ]
    },
    "1159": {
      "op": "uncover 2",
      "stack_out": [
        "copied#0",
        "aggregate%sub%0#0",
        "aggregate%as_u16_bytes%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "1161": {
      "op": "swap",
      "stack_out": [
        "copied#0",
        "aggregate%sub%0#0",
        "aggregate%concat%0#0",
        "aggregate%as_u16_bytes%0#0"
      ]
    },
    "1162": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%sub%0#0",
        "copied#0",
        "copied#1"
      ],
      "stack_out": [
        "copied#0",
        "aggregate%sub%0#0",
        "copied#1"
      ]
    },
    "1164": {
      "op": "dup",
      "defined_out": [
        "aggregate%sub%0#0",
        "copied#0",
        "copied#1",
        "copied#1 (copy)"
      ],
      "stack_out": [
        "copied#0",
        "aggregate%sub%0#0",
        "copied#1",
        "copied#1 (copy)"
      ]
    },
    "1165": {
      "op": "intc_0 // 0",
      "stack_out": [
        "copied#0",
        "aggregate%sub%0#0",
        "copied#1",
        "copied#1 (copy)",
        "0"
      ]
    },
    "1166": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%sub%0#0",
        "copied#0",
        "copied#1"
      ],
      "stack_out": [
        "copied#0",
        "aggregate%sub%0#0",
        "copied#1",
        "aggregate%array_length%0#0"
      ]
    },
    "1167": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_length%0#0 (copy)",
        "aggregate%sub%0#0",
        "copied#0",
        "copied#1"
      ],
      "stack_out": [
        "copied#0",
        "aggregate%sub%0#0",
        "copied#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%0#0 (copy)"
      ]
    },
    "1168": {
      "op": "dig 3",
      "stack_out": [
        "copied#0",
        "aggregate%sub%0#0",
        "copied#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%0#0 (copy)",
        "aggregate%sub%0#0 (copy)"
      ]
    },
    "1170": {
      "op": "==",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%sub%0#0",
        "copied#0",
        "copied#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "copied#0",
        "aggregate%sub%0#0",
        "copied#1",
        "aggregate%array_length%0#0",
        "tmp%6#0"
      ]
    },
    "1171": {
      "op": "assert",
      "stack_out": [
        "copied#0",
        "aggregate%sub%0#0",
        "copied#1",
        "aggregate%array_length%0#0"
      ]
    },
    "1172": {
      "op": "intc_1 // 1",
      "stack_out": [
        "copied#0",
        "aggregate%sub%0#0",
        "copied#1",
        "aggregate%array_length%0#0",
        "1"
      ]
    },
    "1173": {
      "op": "-",
      "defined_out": [
        "aggregate%sub%0#0",
        "copied#0",
        "copied#1",
        "sub%0#0"
      ],
      "stack_out": [
        "copied#0",
        "aggregate%sub%0#0",
        "copied#1",
        "sub%0#0"
      ]
    },
    "1174": {
      "op": "swap",
      "stack_out": [
        "copied#0",
        "aggregate%sub%0#0",
        "sub%0#0",
        "copied#1"
      ]
    },
    "1175": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_trimmed%2#0",
        "aggregate%sub%0#0",
        "copied#0",
        "sub%0#0"
      ],
      "stack_out": [
        "copied#0",
        "aggregate%sub%0#0",
        "sub%0#0",
        "aggregate%array_trimmed%2#0"
      ]
    },
    "1178": {
      "op": "swap",
      "stack_out": [
        "copied#0",
        "aggregate%sub%0#0",
        "aggregate%array_trimmed%2#0",
        "sub%0#0"
      ]
    },
    "1179": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "aggregate%array_trimmed%2#0",
        "aggregate%sub%0#0",
        "copied#0",
        "sub%0#0"
      ],
      "stack_out": [
        "copied#0",
        "aggregate%sub%0#0",
        "aggregate%array_trimmed%2#0",
        "sub%0#0",
        "16"
      ]
    },
    "1180": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%2#0",
        "aggregate%bytes_offset%2#0",
        "aggregate%sub%0#0",
        "copied#0"
      ],
      "stack_out": [
        "copied#0",
        "aggregate%sub%0#0",
        "aggregate%array_trimmed%2#0",
        "aggregate%bytes_offset%2#0"
      ]
    },
    "1181": {
      "op": "intc_2 // 16",
      "stack_out": [
        "copied#0",
        "aggregate%sub%0#0",
        "aggregate%array_trimmed%2#0",
        "aggregate%bytes_offset%2#0",
        "16"
      ]
    },
    "1182": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%sub%0#0",
        "copied#0",
        "last#0"
      ],
      "stack_out": [
        "copied#0",
        "aggregate%sub%0#0",
        "last#0"
      ]
    },
    "1183": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%sub%0#0",
        "last#0",
        "copied#0"
      ]
    },
    "1185": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_trimmed%3#0",
        "aggregate%sub%0#0",
        "last#0"
      ],
      "stack_out": [
        "aggregate%sub%0#0",
        "last#0",
        "aggregate%array_trimmed%3#0"
      ]
    },
    "1188": {
      "op": "uncover 2",
      "stack_out": [
        "last#0",
        "aggregate%array_trimmed%3#0",
        "aggregate%sub%0#0"
      ]
    },
    "1190": {
      "op": "intc_2 // 16",
      "stack_out": [
        "last#0",
        "aggregate%array_trimmed%3#0",
        "aggregate%sub%0#0",
        "16"
      ]
    },
    "1191": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%3#0",
        "aggregate%bytes_offset%3#0",
        "last#0"
      ],
      "stack_out": [
        "last#0",
        "aggregate%array_trimmed%3#0",
        "aggregate%bytes_offset%3#0"
      ]
    },
    "1192": {
      "op": "intc_2 // 16",
      "stack_out": [
        "last#0",
        "aggregate%array_trimmed%3#0",
        "aggregate%bytes_offset%3#0",
        "16"
      ]
    },
    "1193": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%3#0",
        "last#0"
      ],
      "stack_out": [
        "last#0",
        "aggregate%encoded_element%3#0"
      ]
    },
    "1194": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1195": {
      "error": "expected elements to match",
      "op": "assert // expected elements to match",
      "stack_out": []
    },
    "1196": {
      "retsub": true,
      "op": "retsub"
    }
  }
}