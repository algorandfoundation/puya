{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuE8C;;AAApB;AAAd;AAAA;AAAA;AAAA;AACc;;AAAmB;AAAnB;AAAwB;;AAAmB;AAAnB;AAAtC;AAAA;AAAA;AAAA;AAAA;AACW;;AAAmB;AAAnB;AAAwB;;AAAmB;AAAnB;AAHzB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAd;AAAA;AAAA;AAYM;;AADA;AADK;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;;;AAAA;AAAX;;;;;AAAA;AAAA;AAQA;AAAoB;AAApB;AACgB;;;AAAA;AAAhB;AAAA;AAAA;AAtBR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA+GK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AA7FL;;;AAAA;AAAA;;;AA6FK;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AApFL;;;AAAA;AAoFK;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAjEL;;;AAAA;AAiEK;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA5DL;;;AAAA;AAAA;;;AAAA;AA4DK;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAtDL;;;AAsDK;;;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAxBL;;AAAA;;;;;;;;;AAgIA;;;;;;AA1EA;;;AAEe;AAAA;AAAA;AAAA;AAAA;AAAoB;AAApB;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAA;AAAA;AAAA;;AAER;;;AAEuB;AAAA;AAAA;AAAA;AAAR;;AAAA;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAER;;;AAEkC;AAAA;AAAA;AAAA;AAA1B;;AAAA;AAAA;AACgC;AAAA;AAAA;AAAA;AAAd;;AAAlB;;AAAA;;AAAA;AACO;;AAAA;;;AAAA;AAAP;AACgC;;;AAAnB;;AAAA;AAAb;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAIY;;AAAY;;;AAApB;AAAA;AAAiC;;;AAAjC;AAAA;AAGe;AAAA;;;AAAY;;AAAA;;AAAA;AAAS;;AAAA;;AAAA;AACjC;;AAAA;;AAAA;AAAP;AACA;AAAA;AACA;AACA;;;AACA;AAER;;;AAEY;;AAAJ;AACsB;;AAAlB;;AAAJ;AACI;;AAAJ;;AACiB;;AAAA;AAAb;;AAAA;AAAA;AAAJ;;;AAIR;;;AAEQ;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AACkB;;AAAlB;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;;AAAA;AACa;;AAAA;AAAb;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAMO;AAAA;AAAA;AAAA;AAAA;;;AAAP;AAIO;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAER;;;AAEkB;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;;;AAWP;;AAAA;AAAA;AAAQ;;AAAA;AAAA;AAAR;AAAA;;AAAA;AAAA;AAAQ;;AAAA;AAAA;AAAR;AAVM;AAAA;;AACG;;AAAT;AAAX;;;AACmB;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACP;;AAAA;;AAAA;AACA;;;;;AACJ;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 48"
    },
    "7": {
      "op": "bytecblock \"nested\" \"num_payments\" \"payments\" 0x151f7c75 0x70 0x6c \"box\" \"box_map\""
    },
    "59": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "61": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "64": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "66": {
      "op": "dup",
      "defined_out": [
        "tmp%0#2",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "67": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "aggregate%val_as_bytes%0#1"
      ]
    },
    "68": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%0#1",
        "tmp%1#1"
      ]
    },
    "69": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#1",
        "aggregate%val_as_bytes%1#1"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#1",
        "aggregate%val_as_bytes%1#1"
      ]
    },
    "70": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%1#1"
      ],
      "stack_out": [
        "aggregate%encoded%1#1"
      ]
    },
    "71": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "aggregate%encoded%1#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%encoded%1#1",
        "tmp%3#0"
      ]
    },
    "73": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%encoded%1#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%encoded%1#1",
        "tmp%3#0",
        "1"
      ]
    },
    "74": {
      "op": "+",
      "defined_out": [
        "aggregate%encoded%1#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "aggregate%encoded%1#1",
        "tmp%4#0"
      ]
    },
    "75": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "aggregate%encoded%1#1",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "aggregate%encoded%1#1",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "77": {
      "op": "intc_1 // 1",
      "stack_out": [
        "aggregate%encoded%1#1",
        "tmp%4#0",
        "tmp%5#0",
        "1"
      ]
    },
    "78": {
      "op": "+",
      "defined_out": [
        "aggregate%encoded%1#1",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "aggregate%encoded%1#1",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "79": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded%1#1",
        "tmp%6#0",
        "tmp%4#0"
      ]
    },
    "80": {
      "op": "itob",
      "defined_out": [
        "aggregate%encoded%1#1",
        "aggregate%val_as_bytes%2#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "aggregate%encoded%1#1",
        "tmp%6#0",
        "aggregate%val_as_bytes%2#1"
      ]
    },
    "81": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded%1#1",
        "aggregate%val_as_bytes%2#1",
        "tmp%6#0"
      ]
    },
    "82": {
      "op": "itob",
      "defined_out": [
        "aggregate%encoded%1#1",
        "aggregate%val_as_bytes%2#1",
        "aggregate%val_as_bytes%3#1"
      ],
      "stack_out": [
        "aggregate%encoded%1#1",
        "aggregate%val_as_bytes%2#1",
        "aggregate%val_as_bytes%3#1"
      ]
    },
    "83": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%1#1",
        "aggregate%encoded%4#1"
      ],
      "stack_out": [
        "aggregate%encoded%1#1",
        "aggregate%encoded%4#1"
      ]
    },
    "84": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "aggregate%encoded%1#1",
        "aggregate%encoded%4#1",
        "tmp%8#0"
      ],
      "stack_out": [
        "aggregate%encoded%1#1",
        "aggregate%encoded%4#1",
        "tmp%8#0"
      ]
    },
    "86": {
      "op": "intc_1 // 1",
      "stack_out": [
        "aggregate%encoded%1#1",
        "aggregate%encoded%4#1",
        "tmp%8#0",
        "1"
      ]
    },
    "87": {
      "op": "+",
      "defined_out": [
        "aggregate%encoded%1#1",
        "aggregate%encoded%4#1",
        "tmp%9#0"
      ],
      "stack_out": [
        "aggregate%encoded%1#1",
        "aggregate%encoded%4#1",
        "tmp%9#0"
      ]
    },
    "88": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "aggregate%encoded%1#1",
        "aggregate%encoded%4#1",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "aggregate%encoded%1#1",
        "aggregate%encoded%4#1",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "90": {
      "op": "intc_1 // 1",
      "stack_out": [
        "aggregate%encoded%1#1",
        "aggregate%encoded%4#1",
        "tmp%9#0",
        "tmp%10#0",
        "1"
      ]
    },
    "91": {
      "op": "+",
      "defined_out": [
        "aggregate%encoded%1#1",
        "aggregate%encoded%4#1",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "aggregate%encoded%1#1",
        "aggregate%encoded%4#1",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "92": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%encoded%4#1",
        "tmp%9#0",
        "tmp%11#0",
        "aggregate%encoded%1#1"
      ]
    },
    "94": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "aggregate%encoded%1#1",
        "aggregate%encoded%4#1"
      ]
    },
    "96": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%7#1",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "aggregate%encoded%7#1"
      ]
    },
    "97": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%11#0",
        "aggregate%encoded%7#1",
        "tmp%9#0"
      ]
    },
    "99": {
      "op": "itob",
      "defined_out": [
        "aggregate%encoded%7#1",
        "aggregate%val_as_bytes%4#1",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "aggregate%encoded%7#1",
        "aggregate%val_as_bytes%4#1"
      ]
    },
    "100": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%encoded%7#1",
        "aggregate%val_as_bytes%4#1",
        "tmp%11#0"
      ]
    },
    "102": {
      "op": "itob",
      "defined_out": [
        "aggregate%encoded%7#1",
        "aggregate%val_as_bytes%4#1",
        "aggregate%val_as_bytes%5#1"
      ],
      "stack_out": [
        "aggregate%encoded%7#1",
        "aggregate%val_as_bytes%4#1",
        "aggregate%val_as_bytes%5#1"
      ]
    },
    "103": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%7#1",
        "aggregate%encoded%9#1"
      ],
      "stack_out": [
        "aggregate%encoded%7#1",
        "aggregate%encoded%9#1"
      ]
    },
    "104": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%11#1"
      ],
      "stack_out": [
        "aggregate%encoded%11#1"
      ]
    },
    "105": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "aggregate%encoded%11#1"
      ],
      "stack_out": [
        "aggregate%encoded%11#1",
        "\"nested\""
      ]
    },
    "106": {
      "op": "swap",
      "stack_out": [
        "\"nested\"",
        "aggregate%encoded%11#1"
      ]
    },
    "107": {
      "op": "app_global_put",
      "stack_out": []
    },
    "108": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "110": {
      "op": "dup",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%13#0"
      ]
    },
    "111": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%6#1",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "aggregate%val_as_bytes%6#1"
      ]
    },
    "112": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%6#1",
        "tmp%14#0"
      ]
    },
    "113": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%6#1",
        "aggregate%val_as_bytes%7#1"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%6#1",
        "aggregate%val_as_bytes%7#1"
      ]
    },
    "114": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%15#1"
      ],
      "stack_out": [
        "aggregate%encoded%15#1"
      ]
    },
    "115": {
      "op": "pushbytes 0x0016",
      "defined_out": [
        "0x0016",
        "aggregate%encoded%15#1"
      ],
      "stack_out": [
        "aggregate%encoded%15#1",
        "0x0016"
      ]
    },
    "119": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%16#1"
      ],
      "stack_out": [
        "aggregate%encoded%16#1"
      ]
    },
    "120": {
      "op": "pushbytes 0x0018",
      "defined_out": [
        "0x0018",
        "aggregate%encoded%16#1"
      ],
      "stack_out": [
        "aggregate%encoded%16#1",
        "0x0018"
      ]
    },
    "124": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%17#1"
      ],
      "stack_out": [
        "aggregate%encoded%17#1"
      ]
    },
    "125": {
      "op": "pushbytes 0x001a",
      "defined_out": [
        "0x001a",
        "aggregate%encoded%17#1"
      ],
      "stack_out": [
        "aggregate%encoded%17#1",
        "0x001a"
      ]
    },
    "129": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%18#1"
      ],
      "stack_out": [
        "aggregate%encoded%18#1"
      ]
    },
    "130": {
      "op": "pushbytes 0x000000000000",
      "defined_out": [
        "0x000000000000",
        "aggregate%encoded%18#1"
      ],
      "stack_out": [
        "aggregate%encoded%18#1",
        "0x000000000000"
      ]
    },
    "138": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%19#1"
      ],
      "stack_out": [
        "aggregate%encoded%19#1"
      ]
    },
    "139": {
      "op": "pushbytes \"dyn\"",
      "defined_out": [
        "\"dyn\"",
        "aggregate%encoded%19#1"
      ],
      "stack_out": [
        "aggregate%encoded%19#1",
        "\"dyn\""
      ]
    },
    "144": {
      "op": "swap",
      "stack_out": [
        "\"dyn\"",
        "aggregate%encoded%19#1"
      ]
    },
    "145": {
      "op": "app_global_put",
      "stack_out": []
    },
    "146": {
      "op": "bytec_1 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\""
      ],
      "stack_out": [
        "\"num_payments\""
      ]
    },
    "147": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"num_payments\"",
        "0"
      ],
      "stack_out": [
        "\"num_payments\"",
        "0"
      ]
    },
    "148": {
      "op": "app_global_put",
      "stack_out": []
    },
    "149": {
      "op": "pushint 384 // 384",
      "defined_out": [
        "384"
      ],
      "stack_out": [
        "384"
      ]
    },
    "152": {
      "op": "bzero",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "153": {
      "op": "bytec_2 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "\"payments\""
      ]
    },
    "154": {
      "op": "swap",
      "stack_out": [
        "\"payments\"",
        "tmp%16#0"
      ]
    },
    "155": {
      "op": "app_global_put",
      "stack_out": []
    },
    "156": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "158": {
      "op": "bz main_bare_routing@15",
      "stack_out": []
    },
    "161": {
      "op": "pushbytess 0xd1276f81 0x0d2ab4c0 0xe8b5d56c 0x875901e5 0x4abb70f1 0xaf05f48f 0xe8d71c8c 0x01aaa39c 0x8313dee7 0x2ca849c1 // method \"fixed_initialize()void\", method \"add_payment((address,uint64,uint64))void\", method \"increment_payment(uint64,uint64)void\", method \"create_storage(uint64)void\", method \"local_struct()(address,uint64,uint64)\", method \"delete_storage(uint64)void\", method \"struct_arg(uint64,(uint64,uint64))void\", method \"struct_return()(uint64,uint64)\", method \"tup_return()(uint64,uint64)\", method \"calculate_sum()uint64\"",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(calculate_sum()uint64)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))"
      ],
      "stack_out": [
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "Method(calculate_sum()uint64)"
      ]
    },
    "213": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(calculate_sum()uint64)",
        "Method(create_storage(uint64)void)",
        "Method(delete_storage(uint64)void)",
        "Method(fixed_initialize()void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "tmp%2#1"
      ],
      "stack_out": [
        "Method(fixed_initialize()void)",
        "Method(add_payment((address,uint64,uint64))void)",
        "Method(increment_payment(uint64,uint64)void)",
        "Method(create_storage(uint64)void)",
        "Method(local_struct()(address,uint64,uint64))",
        "Method(delete_storage(uint64)void)",
        "Method(struct_arg(uint64,(uint64,uint64))void)",
        "Method(struct_return()(uint64,uint64))",
        "Method(tup_return()(uint64,uint64))",
        "Method(calculate_sum()uint64)",
        "tmp%2#1"
      ]
    },
    "216": {
      "op": "match main_fixed_initialize_route@5 main_add_payment_route@6 main_increment_payment_route@7 main_create_storage_route@8 main_local_struct_route@9 main_delete_storage_route@10 main_struct_arg_route@11 main_struct_return_route@12 main_tup_return_route@13 main_calculate_sum_route@14",
      "stack_out": []
    },
    "238": {
      "block": "main_after_if_else@17",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "239": {
      "op": "return",
      "stack_out": []
    },
    "240": {
      "block": "main_calculate_sum_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "242": {
      "op": "!",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "243": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "244": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "246": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "247": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.calculate_sum",
      "op": "callsub calculate_sum",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "250": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%10#1"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%10#1"
      ]
    },
    "251": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%10#1"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%10#1",
        "0x151f7c75"
      ]
    },
    "252": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%10#1"
      ]
    },
    "253": {
      "op": "concat",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "254": {
      "op": "log",
      "stack_out": []
    },
    "255": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "256": {
      "op": "return",
      "stack_out": []
    },
    "257": {
      "block": "main_tup_return_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "259": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "260": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "261": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "263": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "264": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.tup_return",
      "op": "callsub tup_return",
      "defined_out": [
        "tmp%48#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "tmp%49#0"
      ]
    },
    "267": {
      "op": "swap",
      "stack_out": [
        "tmp%49#0",
        "tmp%48#0"
      ]
    },
    "268": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%8#1",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "aggregate%val_as_bytes%8#1"
      ]
    },
    "269": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%8#1",
        "tmp%49#0"
      ]
    },
    "270": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%8#1",
        "aggregate%val_as_bytes%9#1"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%8#1",
        "aggregate%val_as_bytes%9#1"
      ]
    },
    "271": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%21#1"
      ],
      "stack_out": [
        "aggregate%encoded%21#1"
      ]
    },
    "272": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded%21#1"
      ],
      "stack_out": [
        "aggregate%encoded%21#1",
        "0x151f7c75"
      ]
    },
    "273": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded%21#1"
      ]
    },
    "274": {
      "op": "concat",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "275": {
      "op": "log",
      "stack_out": []
    },
    "276": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "277": {
      "op": "return",
      "stack_out": []
    },
    "278": {
      "block": "main_struct_return_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "280": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "281": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "282": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "284": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "285": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.struct_return",
      "op": "callsub struct_return",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "288": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "0x151f7c75"
      ]
    },
    "289": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%42#0"
      ]
    },
    "290": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "291": {
      "op": "log",
      "stack_out": []
    },
    "292": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "293": {
      "op": "return",
      "stack_out": []
    },
    "294": {
      "block": "main_struct_arg_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "296": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "297": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "298": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "300": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "301": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "304": {
      "op": "btoi",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "305": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "308": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.struct_arg",
      "op": "callsub struct_arg",
      "stack_out": []
    },
    "311": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "312": {
      "op": "return",
      "stack_out": []
    },
    "313": {
      "block": "main_delete_storage_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "315": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "316": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "317": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "319": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "320": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "323": {
      "op": "btoi",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "324": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.delete_storage",
      "op": "callsub delete_storage",
      "stack_out": []
    },
    "327": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "328": {
      "op": "return",
      "stack_out": []
    },
    "329": {
      "block": "main_local_struct_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "331": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "332": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "333": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "335": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "336": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.local_struct",
      "op": "callsub local_struct",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "339": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "0x151f7c75"
      ]
    },
    "340": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%26#0"
      ]
    },
    "341": {
      "op": "concat",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "342": {
      "op": "log",
      "stack_out": []
    },
    "343": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "344": {
      "op": "return",
      "stack_out": []
    },
    "345": {
      "block": "main_create_storage_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "347": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "348": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "349": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "351": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "352": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "355": {
      "op": "btoi",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "356": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.create_storage",
      "op": "callsub create_storage",
      "stack_out": []
    },
    "359": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "360": {
      "op": "return",
      "stack_out": []
    },
    "361": {
      "block": "main_increment_payment_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "363": {
      "op": "!",
      "defined_out": [
        "tmp%12#1"
      ],
      "stack_out": [
        "tmp%12#1"
      ]
    },
    "364": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "365": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "367": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "368": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "371": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#1"
      ],
      "stack_out": [
        "tmp%15#1"
      ]
    },
    "372": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "tmp%15#1"
      ],
      "stack_out": [
        "tmp%15#1",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "375": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#1",
        "tmp%16#1"
      ],
      "stack_out": [
        "tmp%15#1",
        "tmp%16#1"
      ]
    },
    "376": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.increment_payment",
      "op": "callsub increment_payment",
      "stack_out": []
    },
    "379": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "380": {
      "op": "return",
      "stack_out": []
    },
    "381": {
      "block": "main_add_payment_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#1"
      ],
      "stack_out": [
        "tmp%7#1"
      ]
    },
    "383": {
      "op": "!",
      "defined_out": [
        "tmp%8#1"
      ],
      "stack_out": [
        "tmp%8#1"
      ]
    },
    "384": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "385": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "387": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "388": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32],uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32],uint64,uint64)%0#0"
      ]
    },
    "391": {
      "callsub": "test_cases.mutable_native_types.contract.Contract.add_payment",
      "op": "callsub add_payment",
      "stack_out": []
    },
    "394": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "395": {
      "op": "return",
      "stack_out": []
    },
    "396": {
      "block": "main_fixed_initialize_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "398": {
      "op": "!",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%4#1"
      ]
    },
    "399": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "400": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "402": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "403": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "404": {
      "op": "return",
      "stack_out": []
    },
    "405": {
      "block": "main_bare_routing@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "407": {
      "op": "bnz main_after_if_else@17",
      "stack_out": []
    },
    "410": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "412": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "413": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "414": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "415": {
      "op": "return",
      "stack_out": []
    },
    "416": {
      "subroutine": "test_cases.mutable_native_types.contract.do_something",
      "params": {
        "pay#0": "bytes"
      },
      "block": "do_something",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "419": {
      "op": "frame_dig -1",
      "defined_out": [
        "pay#0 (copy)"
      ],
      "stack_out": [
        "pay#0 (copy)"
      ]
    },
    "421": {
      "retsub": true,
      "op": "retsub"
    },
    "422": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.add_payment",
      "params": {
        "pay#0": "bytes"
      },
      "block": "add_payment",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "425": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "426": {
      "op": "bytec_1 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"num_payments\""
      ]
    },
    "427": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "428": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "429": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "430": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "8"
      ]
    },
    "431": {
      "op": "<",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "432": {
      "error": "too many payments",
      "op": "assert // too many payments",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "433": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "434": {
      "op": "bytec_2 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"payments\""
      ]
    },
    "435": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "436": {
      "error": "check self.payments exists",
      "op": "assert // check self.payments exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "437": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%0#0"
      ]
    },
    "438": {
      "op": "intc_3 // 48",
      "defined_out": [
        "48",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%0#0",
        "48"
      ]
    },
    "439": {
      "op": "*",
      "defined_out": [
        "aggregate%write_offset%0#1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%write_offset%0#1"
      ]
    },
    "440": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%write_offset%0#1",
        "maybe_value%1#0",
        "pay#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%write_offset%0#1",
        "pay#0 (copy)"
      ]
    },
    "442": {
      "op": "replace3",
      "defined_out": [
        "aggregate%updated_array%0#1"
      ],
      "stack_out": [
        "aggregate%updated_array%0#1"
      ]
    },
    "443": {
      "op": "bytec_2 // \"payments\"",
      "stack_out": [
        "aggregate%updated_array%0#1",
        "\"payments\""
      ]
    },
    "444": {
      "op": "swap",
      "stack_out": [
        "\"payments\"",
        "aggregate%updated_array%0#1"
      ]
    },
    "445": {
      "op": "app_global_put",
      "stack_out": []
    },
    "446": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "447": {
      "op": "bytec_1 // \"num_payments\"",
      "stack_out": [
        "0",
        "\"num_payments\""
      ]
    },
    "448": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "449": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "450": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "451": {
      "op": "+",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "452": {
      "op": "bytec_1 // \"num_payments\"",
      "stack_out": [
        "tmp%1#0",
        "\"num_payments\""
      ]
    },
    "453": {
      "op": "swap",
      "stack_out": [
        "\"num_payments\"",
        "tmp%1#0"
      ]
    },
    "454": {
      "op": "app_global_put",
      "stack_out": []
    },
    "455": {
      "retsub": true,
      "op": "retsub"
    },
    "456": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.increment_payment",
      "params": {
        "index#0": "uint64",
        "amt#0": "uint64"
      },
      "block": "increment_payment",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "459": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "460": {
      "op": "bytec_1 // \"num_payments\"",
      "defined_out": [
        "\"num_payments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"num_payments\""
      ]
    },
    "461": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "462": {
      "error": "check self.num_payments exists",
      "op": "assert // check self.num_payments exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "463": {
      "op": "frame_dig -2",
      "defined_out": [
        "index#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "index#0 (copy)"
      ]
    },
    "465": {
      "op": ">",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "466": {
      "error": "invalid payment index",
      "op": "assert // invalid payment index",
      "stack_out": []
    },
    "467": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "468": {
      "op": "bytec_2 // \"payments\"",
      "defined_out": [
        "\"payments\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"payments\""
      ]
    },
    "469": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "470": {
      "error": "check self.payments exists",
      "op": "assert // check self.payments exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "471": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%1#0",
        "index#0 (copy)"
      ]
    },
    "473": {
      "op": "intc_3 // 48",
      "defined_out": [
        "48",
        "index#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "index#0 (copy)",
        "48"
      ]
    },
    "474": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#1"
      ]
    },
    "475": {
      "op": "dup2",
      "defined_out": [
        "aggregate%bytes_offset%0#1",
        "aggregate%bytes_offset%0#1 (copy)",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#1",
        "maybe_value%1#0 (copy)",
        "aggregate%bytes_offset%0#1 (copy)"
      ]
    },
    "476": {
      "op": "intc_3 // 48",
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#1",
        "maybe_value%1#0 (copy)",
        "aggregate%bytes_offset%0#1 (copy)",
        "48"
      ]
    },
    "477": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%bytes_offset%0#1",
        "aggregate%encoded_element%0#1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#1",
        "aggregate%encoded_element%0#1"
      ]
    },
    "478": {
      "op": "dup",
      "defined_out": [
        "aggregate%bytes_offset%0#1",
        "aggregate%encoded_element%0#1",
        "aggregate%encoded_element%0#1 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#1",
        "aggregate%encoded_element%0#1",
        "aggregate%encoded_element%0#1 (copy)"
      ]
    },
    "479": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "aggregate%bytes_offset%0#1",
        "aggregate%encoded_element%0#1",
        "aggregate%encoded_element%0#1 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#1",
        "aggregate%encoded_element%0#1",
        "aggregate%encoded_element%0#1 (copy)",
        "40"
      ]
    },
    "481": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%bytes_offset%0#1",
        "aggregate%encoded_element%0#1",
        "maybe_value%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#1",
        "aggregate%encoded_element%0#1",
        "values%0#0"
      ]
    },
    "482": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%bytes_offset%0#1",
        "aggregate%encoded_element%0#1",
        "amt#0 (copy)",
        "maybe_value%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#1",
        "aggregate%encoded_element%0#1",
        "values%0#0",
        "amt#0 (copy)"
      ]
    },
    "484": {
      "op": "+",
      "defined_out": [
        "aggregate%bytes_offset%0#1",
        "aggregate%encoded_element%0#1",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#1",
        "aggregate%encoded_element%0#1",
        "tmp%1#0"
      ]
    },
    "485": {
      "op": "itob",
      "defined_out": [
        "aggregate%bytes_offset%0#1",
        "aggregate%encoded_element%0#1",
        "aggregate%val_as_bytes%0#1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#1",
        "aggregate%encoded_element%0#1",
        "aggregate%val_as_bytes%0#1"
      ]
    },
    "486": {
      "op": "replace2 40",
      "defined_out": [
        "aggregate%bytes_offset%0#1",
        "aggregate%updated_data%0#1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%bytes_offset%0#1",
        "aggregate%updated_data%0#1"
      ]
    },
    "488": {
      "op": "replace3",
      "defined_out": [
        "aggregate%updated_array%0#1"
      ],
      "stack_out": [
        "aggregate%updated_array%0#1"
      ]
    },
    "489": {
      "op": "bytec_2 // \"payments\"",
      "stack_out": [
        "aggregate%updated_array%0#1",
        "\"payments\""
      ]
    },
    "490": {
      "op": "swap",
      "stack_out": [
        "\"payments\"",
        "aggregate%updated_array%0#1"
      ]
    },
    "491": {
      "op": "app_global_put",
      "stack_out": []
    },
    "492": {
      "retsub": true,
      "op": "retsub"
    },
    "493": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.create_storage",
      "params": {
        "box_key#0": "uint64"
      },
      "block": "create_storage",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "496": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "497": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "498": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "499": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "500": {
      "op": "bytec 4 // 0x70",
      "defined_out": [
        "0x70",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x70"
      ]
    },
    "502": {
      "op": "swap",
      "stack_out": [
        "0x70",
        "maybe_value%0#0"
      ]
    },
    "503": {
      "op": "app_global_put",
      "stack_out": []
    },
    "504": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "505": {
      "op": "bytec_0 // \"nested\"",
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "506": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "507": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "508": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%0#0"
      ]
    },
    "510": {
      "op": "bytec 5 // 0x6c",
      "defined_out": [
        "0x6c",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%0#0",
        "0x6c"
      ]
    },
    "512": {
      "op": "dig 2",
      "defined_out": [
        "0x6c",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%0#0",
        "0x6c",
        "maybe_value%1#0 (copy)"
      ]
    },
    "514": {
      "op": "app_local_put",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "515": {
      "op": "bytec 6 // \"box\"",
      "defined_out": [
        "\"box\"",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "\"box\""
      ]
    },
    "517": {
      "op": "pushint 2064 // 2064",
      "defined_out": [
        "\"box\"",
        "2064",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "\"box\"",
        "2064"
      ]
    },
    "520": {
      "op": "box_create",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "521": {
      "error": "expected box to not exist",
      "op": "assert // expected box to not exist",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "522": {
      "op": "extract 0 16",
      "defined_out": [
        "aggregate%extract%0#1"
      ],
      "stack_out": [
        "aggregate%extract%0#1"
      ]
    },
    "525": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%extract%0#1",
        "box_key#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#1",
        "box_key#0 (copy)"
      ]
    },
    "527": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#1",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#1",
        "encoded_value%0#0"
      ]
    },
    "528": {
      "op": "bytec 7 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "aggregate%extract%0#1",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#1",
        "encoded_value%0#0",
        "\"box_map\""
      ]
    },
    "530": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#1",
        "\"box_map\"",
        "encoded_value%0#0"
      ]
    },
    "531": {
      "op": "concat",
      "defined_out": [
        "aggregate%extract%0#1",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#1",
        "box_prefixed_key%0#0"
      ]
    },
    "532": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#1",
        "box_prefixed_key%0#0",
        "0"
      ]
    },
    "533": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "0",
        "aggregate%extract%0#1"
      ]
    },
    "535": {
      "op": "box_replace",
      "stack_out": []
    },
    "536": {
      "retsub": true,
      "op": "retsub"
    },
    "537": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.local_struct",
      "params": {},
      "block": "local_struct",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "539": {
      "op": "pushint 1234 // 1234",
      "defined_out": [
        "1234",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1234"
      ]
    },
    "542": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#1"
      ]
    },
    "543": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%1#1"
      ],
      "stack_out": [
        "aggregate%encoded%1#1"
      ]
    },
    "544": {
      "op": "pushint 567 // 567",
      "defined_out": [
        "567",
        "aggregate%encoded%1#1"
      ],
      "stack_out": [
        "aggregate%encoded%1#1",
        "567"
      ]
    },
    "547": {
      "op": "itob",
      "defined_out": [
        "aggregate%encoded%1#1",
        "aggregate%val_as_bytes%1#1"
      ],
      "stack_out": [
        "aggregate%encoded%1#1",
        "aggregate%val_as_bytes%1#1"
      ]
    },
    "548": {
      "op": "concat",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "549": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "550": {
      "op": "extract 0 32",
      "defined_out": [
        "a#0",
        "foo#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0"
      ]
    },
    "553": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "foo#0",
        "a#0 (copy)"
      ]
    },
    "555": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "a#0",
        "a#0 (copy)",
        "foo#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0",
        "a#0 (copy)",
        "32"
      ]
    },
    "557": {
      "op": "extract_uint64",
      "defined_out": [
        "a#0",
        "bar#0",
        "foo#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0",
        "bar#0"
      ]
    },
    "558": {
      "op": "dig 2",
      "stack_out": [
        "a#0",
        "foo#0",
        "bar#0",
        "a#0 (copy)"
      ]
    },
    "560": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "a#0",
        "a#0 (copy)",
        "bar#0",
        "foo#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0",
        "bar#0",
        "a#0 (copy)",
        "40"
      ]
    },
    "562": {
      "op": "extract_uint64",
      "defined_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "foo#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0",
        "bar#0",
        "baz#0"
      ]
    },
    "563": {
      "op": "global ZeroAddress",
      "defined_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "foo#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "foo#0",
        "bar#0",
        "baz#0",
        "tmp%2#0"
      ]
    },
    "565": {
      "op": "uncover 3",
      "stack_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "tmp%2#0",
        "foo#0"
      ]
    },
    "567": {
      "op": "!=",
      "defined_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "bar#0",
        "baz#0",
        "tmp%3#0"
      ]
    },
    "568": {
      "error": "use foo",
      "op": "assert // use foo",
      "stack_out": [
        "a#0",
        "bar#0",
        "baz#0"
      ]
    },
    "569": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "baz#0",
        "bar#0"
      ]
    },
    "570": {
      "error": "use bar",
      "op": "assert // use bar",
      "stack_out": [
        "a#0",
        "baz#0"
      ]
    },
    "571": {
      "error": "use baz",
      "op": "assert // use baz",
      "stack_out": [
        "a#0"
      ]
    },
    "572": {
      "callsub": "test_cases.mutable_native_types.contract.do_something",
      "op": "callsub do_something"
    },
    "575": {
      "retsub": true,
      "op": "retsub"
    },
    "576": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.delete_storage",
      "params": {
        "box_key#0": "uint64"
      },
      "block": "delete_storage",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "579": {
      "op": "bytec 4 // 0x70",
      "defined_out": [
        "0x70"
      ],
      "stack_out": [
        "0x70"
      ]
    },
    "581": {
      "op": "app_global_del",
      "stack_out": []
    },
    "582": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "584": {
      "op": "bytec 5 // 0x6c",
      "defined_out": [
        "0x6c",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x6c"
      ]
    },
    "586": {
      "op": "app_local_del",
      "stack_out": []
    },
    "587": {
      "op": "bytec 6 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "589": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "590": {
      "op": "pop",
      "stack_out": []
    },
    "591": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_key#0 (copy)"
      ],
      "stack_out": [
        "box_key#0 (copy)"
      ]
    },
    "593": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "594": {
      "op": "bytec 7 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"box_map\""
      ]
    },
    "596": {
      "op": "swap",
      "stack_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ]
    },
    "597": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "598": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "599": {
      "op": "pop",
      "stack_out": []
    },
    "600": {
      "retsub": true,
      "op": "retsub"
    },
    "601": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.struct_arg",
      "params": {
        "box_key#0": "uint64",
        "a#0": "bytes"
      },
      "block": "struct_arg",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "604": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "605": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "606": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "607": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "608": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "a#0 (copy)"
      ]
    },
    "610": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%updated_data%0#1"
      ],
      "stack_out": [
        "aggregate%updated_data%0#1"
      ]
    },
    "612": {
      "op": "bytec_0 // \"nested\"",
      "stack_out": [
        "aggregate%updated_data%0#1",
        "\"nested\""
      ]
    },
    "613": {
      "op": "swap",
      "stack_out": [
        "\"nested\"",
        "aggregate%updated_data%0#1"
      ]
    },
    "614": {
      "op": "app_global_put",
      "stack_out": []
    },
    "615": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "616": {
      "op": "bytec 4 // 0x70",
      "defined_out": [
        "0",
        "0x70"
      ],
      "stack_out": [
        "0",
        "0x70"
      ]
    },
    "618": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "619": {
      "error": "check self.nested_proxy exists",
      "op": "assert // check self.nested_proxy exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "620": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%1#0",
        "a#0 (copy)"
      ]
    },
    "622": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%updated_data%1#1"
      ],
      "stack_out": [
        "aggregate%updated_data%1#1"
      ]
    },
    "624": {
      "op": "bytec 4 // 0x70",
      "stack_out": [
        "aggregate%updated_data%1#1",
        "0x70"
      ]
    },
    "626": {
      "op": "swap",
      "stack_out": [
        "0x70",
        "aggregate%updated_data%1#1"
      ]
    },
    "627": {
      "op": "app_global_put",
      "stack_out": []
    },
    "628": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "630": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "631": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "632": {
      "op": "bytec 5 // 0x6c",
      "defined_out": [
        "0",
        "0x6c",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0",
        "0x6c"
      ]
    },
    "634": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "635": {
      "error": "check self.nested_local exists for account",
      "op": "assert // check self.nested_local exists for account",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "636": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "a#0 (copy)"
      ]
    },
    "638": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%updated_data%2#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%updated_data%2#1"
      ]
    },
    "640": {
      "op": "bytec 5 // 0x6c"
    },
    "642": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "0x6c",
        "aggregate%updated_data%2#1"
      ]
    },
    "643": {
      "op": "app_local_put",
      "stack_out": []
    },
    "644": {
      "op": "bytec 6 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "646": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"box\"",
        "0"
      ]
    },
    "647": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"box\"",
        "0",
        "a#0 (copy)"
      ]
    },
    "649": {
      "op": "box_replace",
      "stack_out": []
    },
    "650": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_key#0 (copy)"
      ],
      "stack_out": [
        "box_key#0 (copy)"
      ]
    },
    "652": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "653": {
      "op": "bytec 7 // \"box_map\"",
      "defined_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"box_map\""
      ]
    },
    "655": {
      "op": "swap",
      "stack_out": [
        "\"box_map\"",
        "encoded_value%0#0"
      ]
    },
    "656": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "657": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "0"
      ]
    },
    "658": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "0",
        "a#0 (copy)"
      ]
    },
    "660": {
      "op": "box_replace",
      "stack_out": []
    },
    "661": {
      "retsub": true,
      "op": "retsub"
    },
    "662": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.struct_return",
      "params": {},
      "block": "struct_return",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "663": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "664": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "665": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "666": {
      "op": "extract 0 16",
      "defined_out": [
        "aggregate%extract%0#1"
      ],
      "stack_out": [
        "aggregate%extract%0#1"
      ]
    },
    "669": {
      "retsub": true,
      "op": "retsub"
    },
    "670": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.tup_return",
      "params": {},
      "block": "tup_return",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "671": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "672": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "673": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "674": {
      "op": "extract 32 16",
      "defined_out": [
        "aggregate%extract%0#1"
      ],
      "stack_out": [
        "aggregate%extract%0#1"
      ]
    },
    "677": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract%0#1",
        "aggregate%extract%0#1 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#1",
        "aggregate%extract%0#1 (copy)"
      ]
    },
    "678": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#1",
        "aggregate%extract%0#1 (copy)",
        "0"
      ]
    },
    "679": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%extract%0#1",
        "aggregate%item0%0#1"
      ],
      "stack_out": [
        "aggregate%extract%0#1",
        "aggregate%item0%0#1"
      ]
    },
    "680": {
      "op": "swap",
      "stack_out": [
        "aggregate%item0%0#1",
        "aggregate%extract%0#1"
      ]
    },
    "681": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "aggregate%extract%0#1",
        "aggregate%item0%0#1"
      ],
      "stack_out": [
        "aggregate%item0%0#1",
        "aggregate%extract%0#1",
        "8"
      ]
    },
    "682": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%0#1",
        "aggregate%item1%0#1"
      ],
      "stack_out": [
        "aggregate%item0%0#1",
        "aggregate%item1%0#1"
      ]
    },
    "683": {
      "retsub": true,
      "op": "retsub"
    },
    "684": {
      "subroutine": "test_cases.mutable_native_types.contract.Contract.calculate_sum",
      "params": {},
      "block": "calculate_sum",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "687": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "688": {
      "op": "bytec_0 // \"nested\"",
      "defined_out": [
        "\"nested\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nested\""
      ]
    },
    "689": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "690": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "691": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "692": {
      "op": "extract 0 16",
      "defined_out": [
        "fixed_a#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "fixed_a#0"
      ]
    },
    "695": {
      "op": "swap",
      "stack_out": [
        "fixed_a#0",
        "maybe_value%0#0"
      ]
    },
    "696": {
      "op": "extract 16 16",
      "defined_out": [
        "fixed_a#0",
        "fixed_b#0"
      ],
      "stack_out": [
        "fixed_a#0",
        "fixed_b#0"
      ]
    },
    "699": {
      "op": "dig 1",
      "defined_out": [
        "fixed_a#0",
        "fixed_a#0 (copy)",
        "fixed_b#0"
      ],
      "stack_out": [
        "fixed_a#0",
        "fixed_b#0",
        "fixed_a#0 (copy)"
      ]
    },
    "701": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fixed_a#0",
        "fixed_b#0",
        "fixed_a#0 (copy)",
        "0"
      ]
    },
    "702": {
      "op": "extract_uint64",
      "defined_out": [
        "fixed_a#0",
        "fixed_b#0",
        "values%0#0"
      ],
      "stack_out": [
        "fixed_a#0",
        "fixed_b#0",
        "values%0#0"
      ]
    },
    "703": {
      "op": "uncover 2",
      "stack_out": [
        "fixed_b#0",
        "values%0#0",
        "fixed_a#0"
      ]
    },
    "705": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "fixed_a#0",
        "fixed_b#0",
        "values%0#0"
      ],
      "stack_out": [
        "fixed_b#0",
        "values%0#0",
        "fixed_a#0",
        "8"
      ]
    },
    "706": {
      "op": "extract_uint64",
      "defined_out": [
        "fixed_b#0",
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "fixed_b#0",
        "values%0#0",
        "values%1#0"
      ]
    },
    "707": {
      "op": "+",
      "defined_out": [
        "fixed_b#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "fixed_b#0",
        "tmp%0#1"
      ]
    },
    "708": {
      "op": "dig 1",
      "defined_out": [
        "fixed_b#0",
        "fixed_b#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "fixed_b#0",
        "tmp%0#1",
        "fixed_b#0 (copy)"
      ]
    },
    "710": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fixed_b#0",
        "tmp%0#1",
        "fixed_b#0 (copy)",
        "0"
      ]
    },
    "711": {
      "op": "extract_uint64",
      "stack_out": [
        "fixed_b#0",
        "tmp%0#1",
        "values%0#0"
      ]
    },
    "712": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "values%0#0",
        "fixed_b#0"
      ]
    },
    "714": {
      "op": "intc_2 // 8",
      "stack_out": [
        "tmp%0#1",
        "values%0#0",
        "fixed_b#0",
        "8"
      ]
    },
    "715": {
      "op": "extract_uint64",
      "stack_out": [
        "tmp%0#1",
        "values%0#0",
        "values%1#0"
      ]
    },
    "716": {
      "op": "+",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%0#2"
      ]
    },
    "717": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "718": {
      "op": "dupn 2",
      "defined_out": [
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "720": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#0",
        "result#0 (copy)",
        "100"
      ]
    },
    "722": {
      "op": "<",
      "defined_out": [
        "result#0",
        "result#6",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "tmp%3#0"
      ]
    },
    "723": {
      "op": "bz calculate_sum_after_if_else@2",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "726": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "0"
      ]
    },
    "727": {
      "op": "bytec_0 // \"nested\"",
      "stack_out": [
        "result#0",
        "result#6",
        "0",
        "\"nested\""
      ]
    },
    "728": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "729": {
      "error": "check self.nested exists",
      "op": "assert // check self.nested exists",
      "stack_out": [
        "result#0",
        "result#6",
        "maybe_value%2#0"
      ]
    },
    "730": {
      "op": "extract 32 16",
      "defined_out": [
        "aggregate%extract%2#1",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%extract%2#1"
      ]
    },
    "733": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract%2#1",
        "aggregate%extract%2#1 (copy)",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%extract%2#1",
        "aggregate%extract%2#1 (copy)"
      ]
    },
    "734": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%extract%2#1",
        "aggregate%extract%2#1 (copy)",
        "0"
      ]
    },
    "735": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%extract%2#1",
        "c#0",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "aggregate%extract%2#1",
        "c#0"
      ]
    },
    "736": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "result#6",
        "c#0",
        "aggregate%extract%2#1"
      ]
    },
    "737": {
      "op": "intc_2 // 8",
      "stack_out": [
        "result#0",
        "result#6",
        "c#0",
        "aggregate%extract%2#1",
        "8"
      ]
    },
    "738": {
      "op": "extract_uint64",
      "defined_out": [
        "c#0",
        "d#0",
        "result#0",
        "result#6"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "c#0",
        "d#0"
      ]
    },
    "739": {
      "op": "frame_dig 0",
      "stack_out": [
        "result#0",
        "result#6",
        "c#0",
        "d#0",
        "result#0"
      ]
    },
    "741": {
      "op": "uncover 2",
      "stack_out": [
        "result#0",
        "result#6",
        "d#0",
        "result#0",
        "c#0"
      ]
    },
    "743": {
      "op": "+",
      "stack_out": [
        "result#0",
        "result#6",
        "d#0",
        "result#0"
      ]
    },
    "744": {
      "op": "+",
      "stack_out": [
        "result#0",
        "result#6",
        "result#6"
      ]
    },
    "745": {
      "op": "frame_bury 1",
      "stack_out": [
        "result#0",
        "result#6"
      ]
    },
    "747": {
      "block": "calculate_sum_after_if_else@2",
      "stack_in": [
        "result#0",
        "result#6"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "result#6",
        "result#0"
      ]
    },
    "749": {
      "op": "frame_bury 0"
    },
    "751": {
      "retsub": true,
      "op": "retsub"
    }
  }
}