{
    "name": "TestAbiCall",
    "structs": {},
    "methods": [
        {
            "name": "test_fixed_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_nested_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_fixed_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_log",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        564,
                        576,
                        588,
                        600,
                        612,
                        624
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        724,
                        789,
                        896,
                        968,
                        1138,
                        1251,
                        1357,
                        1428,
                        1538,
                        1613
                    ],
                    "errorMessage": "application log value is not the result of an ABI return"
                },
                {
                    "pc": [
                        641
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        567,
                        579,
                        591,
                        603,
                        615,
                        627
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1812
                    ],
                    "errorMessage": "expected 5 logs"
                },
                {
                    "pc": [
                        1834
                    ],
                    "errorMessage": "expected dynamic struct"
                },
                {
                    "pc": [
                        1839,
                        1847
                    ],
                    "errorMessage": "expected fixed array"
                },
                {
                    "pc": [
                        1819
                    ],
                    "errorMessage": "expected fixed struct"
                },
                {
                    "pc": [
                        1826
                    ],
                    "errorMessage": "expected nested struct"
                },
                {
                    "pc": [
                        726,
                        791,
                        898,
                        970,
                        1140,
                        1253,
                        1359,
                        1430,
                        1540,
                        1615
                    ],
                    "errorMessage": "should be the same"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}