{
    "name": "TestAbiCall",
    "structs": {},
    "methods": [
        {
            "name": "test_fixed_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_nested_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_fixed_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_log",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        460
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        521
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        610,
                        680,
                        795,
                        872,
                        1043,
                        1155,
                        1269,
                        1345,
                        1470,
                        1557
                    ],
                    "errorMessage": "application log value is not the result of an ABI return"
                },
                {
                    "pc": [
                        1760
                    ],
                    "errorMessage": "expected 5 logs"
                },
                {
                    "pc": [
                        1782
                    ],
                    "errorMessage": "expected dynamic struct"
                },
                {
                    "pc": [
                        1787,
                        1794
                    ],
                    "errorMessage": "expected fixed array"
                },
                {
                    "pc": [
                        1767
                    ],
                    "errorMessage": "expected fixed struct"
                },
                {
                    "pc": [
                        1774
                    ],
                    "errorMessage": "expected nested struct"
                },
                {
                    "pc": [
                        788,
                        865
                    ],
                    "errorMessage": "invalid number of bytes for ((uint64,uint64),uint64)"
                },
                {
                    "pc": [
                        1463,
                        1550
                    ],
                    "errorMessage": "invalid number of bytes for (len+(uint64,uint64)[])"
                },
                {
                    "pc": [
                        603,
                        673
                    ],
                    "errorMessage": "invalid number of bytes for (uint64,uint64)"
                },
                {
                    "pc": [
                        1262,
                        1338
                    ],
                    "errorMessage": "invalid number of bytes for (uint64,uint64)[3]"
                },
                {
                    "pc": [
                        612,
                        682,
                        797,
                        874,
                        1045,
                        1157,
                        1271,
                        1347,
                        1472,
                        1559
                    ],
                    "errorMessage": "should be the same"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}