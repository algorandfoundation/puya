{
    "name": "TestAbiCall",
    "structs": {},
    "methods": [
        {
            "name": "test_fixed_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_nested_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_fixed_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_log",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        421
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        482
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        563,
                        628,
                        736,
                        808,
                        979,
                        1092,
                        1199,
                        1270,
                        1381,
                        1456
                    ],
                    "errorMessage": "application log value is not the result of an ABI return"
                },
                {
                    "pc": [
                        1656
                    ],
                    "errorMessage": "expected 5 logs"
                },
                {
                    "pc": [
                        1678
                    ],
                    "errorMessage": "expected dynamic struct"
                },
                {
                    "pc": [
                        1683,
                        1691
                    ],
                    "errorMessage": "expected fixed array"
                },
                {
                    "pc": [
                        1663
                    ],
                    "errorMessage": "expected fixed struct"
                },
                {
                    "pc": [
                        1670
                    ],
                    "errorMessage": "expected nested struct"
                },
                {
                    "pc": [
                        565,
                        630,
                        738,
                        810,
                        981,
                        1094,
                        1201,
                        1272,
                        1383,
                        1458
                    ],
                    "errorMessage": "should be the same"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEBgAFASYSBBUffHUECoEBQ8ACCiACAQAmBgQVH3x1DGZpeGVkX3N0cnVjdA1uZXN0ZWRfc3RydWN0DmR5bmFtaWNfc3RydWN0CWZpeGVkX2FycgpuYXRpdmVfYXJyMRtBAHKABCQ3jTw2GgCOAQBcMRkURDEYRIILBBGxm5UE0ouWSgTqGGVfBLs7/bcERuwUoASbTQkmBE8N61AEWWZKtgQSXRN2BIGOSmIEm74QMjYaAI4LABIAGQAjACoANAA7AEUATQBYAGAAawAxGYEFEjEYEEMxGRQxGBQQQyk2GgFnIkMjKWVEKExQsCJDKjYaAWciQyMqZUQoTFCwIkMrNhoBZyJDIytlRChMULAiQycENhoBZyJDIycEZUQoTFCwIkMnBTYaAWciQyMnBWVEKExQsCJDIyllRLAjKmVEsCMrZUSwIycEZUSwIycFZUSwIkMEJDeNPAQRsZuVBOoYZV8ERuwUoARPDetQBBJdE3YE0ouWSgS7O/23AgAIAgAWBwAFSGVsbG8Em00JJgRZZkq2AgADBIGOSmIxG0EAOTEZFEQxGESCBgRd8ZdzBLoEHNUEhEFmSgTKpi4sBDg1fV4E5HPHCjYaAI4GAAkArwFjAn8DMQPrADEZFDEYFBBDsSSyNSmyQiqyQCKyECOyAbO0PTEbJQgxG4ECCEwWTBZQsUsBshgnBLIaSbIaIrIQI7IBs7FLAbIYJwmyGiKyECOyAbO0PklXBABMVwAEKBJEEkQxG4ECCDEbgQMITBZMFlCxSwGyGCcEshpJshoishAjsgGzsUsBshgnCbIaIrIQI7IBs7Q+SVcEAExXAAQoEkQSRLEkshmyGCuyGiKyECOyAbMlQ7EksjUpskIqskAishAjsgGztD0xGyUIMRuBAghMFkwWUDEbgQMIFlCxSwGyGCcFshpJshoishAjsgGzsUsBshgnCrIaIrIQI7IBs7Q+SVcEAExXAAQoEkQSRDEbgQIIMRuBAwhMFkwWUDEbgQQIFlCxSwGyGCcFshpJshoishAjsgGzsUsBshgnCrIaIrIQI7IBs7Q+SVcEAExXAAQoEkQSRLEkshmyGCuyGiKyECOyAbMlQ7EksjUpskIqskAishAjsgGztD0xGyUIMRuBAghMFkwWUDEbJQgxG4ECCDEbgQMIFoACAAFPBFBPAxZPAxZQJwtPA1BMJwxQSwEVgRYISRZXBgJPAkxQTIEHCBZXBgJQTFAnDVBLAVCxSwKyGCcGshpJshoishAjsgGzsUsCshgnDrIaIrIQI7IBs7Q+SVcEAExXAAQoEkQSRDEbgQIIMRuBAwgxG4EECBZPAhZPAhZQJwtPAlBMJwxQSwEVgRYISRZXBgJPAkxQTIEHCBZXBgJQTFAnDVBMULFLAbIYJwayGkmyGiKyECOyAbOxSwGyGCcOshoishAjsgGztD5JVwQATFcABCgSRBJEsSSyGbIYK7IaIrIQI7IBsyVDsSSyNSmyQiqyQCKyECOyAbO0PTEbJQgxG4ECCEwWTBZQSUsBUExQsUsBshgnB7IaSbIaIrIQI7IBs7FLAbIYJw+yGiKyECOyAbO0PklXBABMVwAEKBJEEkQxG4ECCDEbgQMITBZMFlBJSwFQTFCxSwGyGCcHshpJshoishAjsgGzsUsBshgnD7IaIrIQI7IBs7Q+SVcEAExXAAQoEkQSRLEkshmyGCuyGiKyECOyAbMlQ7EksjUpskIqskAishAjsgGztD0xGyUIMRuBAghMFkwWUCcQSwFQSwFQTFCxSwGyGCcIshpJshoishAjsgGzsUsBshgnEbIaIrIQI7IBs7Q+SVcEAExXAAQoEkQSRDEbgQIIMRuBAwhMFkwWUCcQSwFQSwFQTFCxSwGyGCcIshpJshoishAjsgGzsUsBshgnEbIaIrIQI7IBs7Q+SVcEAExXAAQoEkQSRLEkshmyGCuyGiKyECOyAbMlQ7EksjUpskIqskAishAjsgGztD2BEK+xSwGyGCcEshpJshoishAjsgGzgRivsUsCshgnBbIaSbIaIrIQI7IBs7FLArIYJwayGoAcAAAAAAAAAAAAAAAAAAAAAAAWABgAGgAAAAAAALIaIrIQI7IBs4Ewr7FLA7IYJweyGkmyGiKyECOyAbOxSwOyGCcIshqAAgAAshoishAjsgGzsUsDshiABJu+EDKyGiKyECOyAbO0OyQSRLU6AE8DEkS1OgFPAhJEtToCFYEcEkS1OgMSRLU6BIECrxJEsSSyGbIYK7IaIrIQI7IBsyVD",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}