{
    "name": "TestAbiCall",
    "structs": {},
    "methods": [
        {
            "name": "test_fixed_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_nested_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_fixed_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_log",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        532
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        593
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        682,
                        752,
                        867,
                        944,
                        1188,
                        1373,
                        1487,
                        1563,
                        1688,
                        1775
                    ],
                    "errorMessage": "application log value is not the result of an ABI return"
                },
                {
                    "pc": [
                        1978
                    ],
                    "errorMessage": "expected 5 logs"
                },
                {
                    "pc": [
                        2000
                    ],
                    "errorMessage": "expected dynamic struct"
                },
                {
                    "pc": [
                        2005,
                        2012
                    ],
                    "errorMessage": "expected fixed array"
                },
                {
                    "pc": [
                        1985
                    ],
                    "errorMessage": "expected fixed struct"
                },
                {
                    "pc": [
                        1992
                    ],
                    "errorMessage": "expected nested struct"
                },
                {
                    "pc": [
                        1131,
                        1151,
                        1171,
                        1316,
                        1336,
                        1356,
                        1671,
                        1758
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        1681,
                        1768
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<test_cases.mutable_native_types.abi_call.FixedStruct>"
                },
                {
                    "pc": [
                        1480,
                        1556
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<test_cases.mutable_native_types.abi_call.FixedStruct, 3>"
                },
                {
                    "pc": [
                        1181,
                        1366
                    ],
                    "errorMessage": "invalid number of bytes for test_cases.mutable_native_types.abi_call.DynamicStruct"
                },
                {
                    "pc": [
                        675,
                        745
                    ],
                    "errorMessage": "invalid number of bytes for test_cases.mutable_native_types.abi_call.FixedStruct"
                },
                {
                    "pc": [
                        860,
                        937
                    ],
                    "errorMessage": "invalid number of bytes for test_cases.mutable_native_types.abi_call.NestedStruct"
                },
                {
                    "pc": [
                        1117,
                        1302
                    ],
                    "errorMessage": "invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))"
                },
                {
                    "pc": [
                        1137,
                        1322
                    ],
                    "errorMessage": "invalid tail pointer at index 3 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))"
                },
                {
                    "pc": [
                        1159,
                        1344
                    ],
                    "errorMessage": "invalid tail pointer at index 4 of (uint64,uint64,(len+uint8[]),(len+utf8[]),(len+(uint64,uint64)[]))"
                },
                {
                    "pc": [
                        1112,
                        1297
                    ],
                    "errorMessage": "invalid tuple encoding"
                },
                {
                    "pc": [
                        684,
                        754,
                        869,
                        946,
                        1190,
                        1375,
                        1489,
                        1565,
                        1690,
                        1777
                    ],
                    "errorMessage": "should be the same"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}