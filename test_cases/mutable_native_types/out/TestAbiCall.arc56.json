{
    "name": "TestAbiCall",
    "structs": {},
    "methods": [
        {
            "name": "test_fixed_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_nested_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_fixed_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_log",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        424
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        568,
                        633,
                        741,
                        813,
                        984,
                        1097,
                        1204,
                        1275,
                        1386,
                        1461
                    ],
                    "errorMessage": "application log value is not the result of an ABI return"
                },
                {
                    "pc": [
                        485
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        1661
                    ],
                    "errorMessage": "expected 5 logs"
                },
                {
                    "pc": [
                        1683
                    ],
                    "errorMessage": "expected dynamic struct"
                },
                {
                    "pc": [
                        1688,
                        1696
                    ],
                    "errorMessage": "expected fixed array"
                },
                {
                    "pc": [
                        1668
                    ],
                    "errorMessage": "expected fixed struct"
                },
                {
                    "pc": [
                        1675
                    ],
                    "errorMessage": "expected nested struct"
                },
                {
                    "pc": [
                        570,
                        635,
                        743,
                        815,
                        986,
                        1099,
                        1206,
                        1277,
                        1388,
                        1463
                    ],
                    "errorMessage": "should be the same"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}