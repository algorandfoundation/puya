main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L8
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@5
    block@2: // abi_routing_L8
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "battle()void" => block@3, * => block@4}
    block@3: // battle_route_L13
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        test_cases.regression_tests.jira_142.Jira142.battle[routing]()
        goto block@4
    block@4: // switch_case_next_L8
        goto block@6
    block@5: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        goto block@8
    block@8: // L1
        goto block@9
    block@9: // after_inlined_test_cases.regression_tests.jira_142.Jira142.__algopy_default_create_L1
        exit 1u
    block@6: // after_if_else_L8
        exit 0u
    block@7: // after_inlined_test_cases.regression_tests.jira_142.Jira142.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.regression_tests.jira_142.Jira142.battle[routing]() -> void:
    block@0: // L13
        test_cases.regression_tests.jira_142.Jira142.battle()
        exit 1u

subroutine test_cases.regression_tests.jira_142.Jira142.some_subroutine(char: Encoded(uint64)) -> Encoded(uint64):
    block@0: // L9
        let char%out#0: Encoded(uint64) = char#0
        return char%out#0

subroutine test_cases.regression_tests.jira_142.Jira142.battle() -> void:
    block@0: // L13
        let aggregate%head%0#0: bytes = (concat 0x 0x00000000000000c8)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%head%0#0
        let tmp%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let my_struct#0: Encoded(uint64) = tmp%0#0
        let aggregate%extract%0#0: bytes = (extract3 my_struct#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let reinterpret_biguint%0#0: biguint = tuple_item%0#0
        let tmp%1#0: bool = (b> reinterpret_biguint%0#0 0x0000000000000064)
        let my_struct#2: Encoded(uint64) = my_struct#0
        goto tmp%1#0 ? block@1 : block@2
    block@1: // if_body_L18
        let some_subroutine%0#0: Encoded(uint64) = test_cases.regression_tests.jira_142.Jira142.some_subroutine(my_struct#0)
        let my_struct#0: Encoded(uint64) = some_subroutine%0#0
        let my_struct#2: Encoded(uint64) = my_struct#0
        goto block@2
    block@2: // after_if_else_L17
        (log my_struct#2)
        return 