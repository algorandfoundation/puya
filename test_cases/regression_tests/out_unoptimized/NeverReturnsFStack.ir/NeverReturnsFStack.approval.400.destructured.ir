main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L16
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@6
    block@2: // abi_routing_L16
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "method()uint64" => block@3, * => block@4}
    block@3: // method_route_L17
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: uint64 = test_cases.regression_tests.never_returns.NeverReturnsFStack.method()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%7#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%8#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        let test_cases.regression_tests.never_returns.NeverReturnsFStack.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.regression_tests.never_returns.NeverReturnsFStack.__puya_arc4_router__%0#0
        goto block@11
    block@4: // switch_case_default_L16
        goto block@5
    block@5: // switch_case_next_L16
        goto block@10
    block@6: // bare_routing_L16
        let tmp%10#0: uint64 = (txn OnCompletion)
        switch tmp%10#0 {0u => block@7, * => block@8}
    block@7: // __algopy_default_create_L1
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (== tmp%11#0 0u)
        (assert tmp%12#0) // can only call when creating
        goto block@12
    block@12: // L1
        goto block@13
    block@13: // after_inlined_test_cases.regression_tests.never_returns.NeverReturnsFStack.__algopy_default_create_L1
        let test_cases.regression_tests.never_returns.NeverReturnsFStack.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.regression_tests.never_returns.NeverReturnsFStack.__puya_arc4_router__%0#0
        goto block@11
    block@8: // switch_case_default_L16
        goto block@9
    block@9: // switch_case_next_L16
        goto block@10
    block@10: // after_if_else_L16
        let test_cases.regression_tests.never_returns.NeverReturnsFStack.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.regression_tests.never_returns.NeverReturnsFStack.__puya_arc4_router__%0#0
        goto block@11
    block@11: // after_inlined_test_cases.regression_tests.never_returns.NeverReturnsFStack.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.regression_tests.never_returns.NeverReturnsFStack.method() -> uint64:
    block@0: // L17
        goto block@1
    block@1: // L23
        let x#0: uint64 = 1u
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (> tmp%0#0 0u)
        goto tmp%1#0 ? block@2 : block@3
    block@2: // if_body_L27
        let x#0: uint64 = 2u
        goto block@3
    block@3: // after_if_else_L26
        let one#0: uint64 = 0u
        let tmp%2#0: uint64 = (txn NumAppArgs)
        (assert 1u) // Step cannot be zero
        let idx#0: uint64 = 0u
        goto block@4
    block@4: // for_header_L30
        let continue_looping%0#0: bool = (< idx#0 tmp%2#0)
        goto continue_looping%0#0 ? block@5 : block@9
    block@5: // for_body_L31
        let tmp%3#0: uint64 = (+ x#0 idx#0)
        let x#0: uint64 = tmp%3#0
        let tmp%4#0: bool = (== idx#0 0u)
        let one#9: uint64 = one#0
        goto tmp%4#0 ? block@6 : block@7
    block@6: // if_body_L33
        let tmp%5#0: uint64 = (+ one#0 1u)
        let one#0: uint64 = tmp%5#0
        let one#9: uint64 = one#0
        goto block@7
    block@7: // after_if_else_L32
        let one#0: uint64 = one#9
        goto block@8
    block@8: // for_footer_L30
        let idx#0: uint64 = (+ idx#0 1u)
        goto block@4
    block@9: // after_for_L30
        let tmp%6#0: bytes = (concat "you won't see this" "")
        let tmp%7#0: bytes = (itob one#0)
        let tmp%8#0: bytes = (concat tmp%6#0 tmp%7#0)
        (log tmp%8#0)
        fail
    block@10: // after_inlined_test_cases.regression_tests.never_returns.invoke_with_fstack_L17
        let tmp%0#0: uint64 = undefined
        let result#0: uint64 = tmp%0#0
        return result#0