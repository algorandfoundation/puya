#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1
    bytecblock 0x068101
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // regression_tests/branch_to_proto.py:4
    // class VRFVerifier(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main___algopy_default_create@5
    b main_abi_routing@2

main_abi_routing@2:
    // regression_tests/branch_to_proto.py:4
    // class VRFVerifier(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x6e50bd99 // method "verify(byte[],byte[],byte[])(byte[],bool)"
    uncover 1
    match main_verify_route@3
    b main_switch_case_next@4

main_switch_case_next@4:
    b main_after_if_else@6

main_after_if_else@6:
    // regression_tests/branch_to_proto.py:4
    // class VRFVerifier(ARC4Contract):
    err

main_verify_route@3:
    // regression_tests/branch_to_proto.py:5
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    !=
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    callsub verify
    b main_switch_case_next@4

main___algopy_default_create@5:
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b main_block@8

main_block@8:
    b main_after_inlined_test_cases.regression_tests.branch_to_proto.VRFVerifier.__algopy_default_create@9

main_after_inlined_test_cases.regression_tests.branch_to_proto.VRFVerifier.__algopy_default_create@9:
    intc_1 // 1
    return


// _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    proto 2 0
    b ensure_budget_block@0

ensure_budget_block@0:
    frame_dig -2
    pushint 10 // 10
    +
    b ensure_budget_while_top@1

ensure_budget_while_top@1:
    global OpcodeBudget
    frame_dig 0
    <
    bz ensure_budget_after_while@6
    b ensure_budget_while_body@2

ensure_budget_while_body@2:
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec_0 // 0x068101
    itxn_field ApprovalProgram
    bytec_0 // 0x068101
    itxn_field ClearStateProgram
    intc_0 // 0
    intc_1 // 1
    frame_dig -1
    match ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4
    b ensure_budget_switch_case_next@5

ensure_budget_switch_case_next@5:
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_switch_case_1@4:
    global MinTxnFee
    itxn_field Fee
    b ensure_budget_switch_case_next@5

ensure_budget_switch_case_0@3:
    intc_0 // 0
    itxn_field Fee
    b ensure_budget_switch_case_next@5

ensure_budget_after_while@6:
    retsub


// test_cases.regression_tests.branch_to_proto.VRFVerifier.verify[routing]() -> void:
verify:
    b verify_block@0

verify_block@0:
    // regression_tests/branch_to_proto.py:5
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    extract 2 0
    uncover 2
    uncover 2
    uncover 2
    callsub test_cases.regression_tests.branch_to_proto.VRFVerifier.verify
    cover 1
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    pushint 3 // 3
    itob
    extract 6 2
    pushbytes 0x
    uncover 1
    concat
    pushbytes 0x00
    intc_0 // 0
    uncover 4
    setbit
    concat
    uncover 1
    concat
    pushbytes 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.regression_tests.branch_to_proto.VRFVerifier.verify(message: bytes, proof: bytes, pk: bytes) -> bytes, uint64:
test_cases.regression_tests.branch_to_proto.VRFVerifier.verify:
    // regression_tests/branch_to_proto.py:5-6
    // @arc4.abimethod
    // def verify(self, message: Bytes, proof: Bytes, pk: Bytes) -> tuple[Bytes, bool]:
    proto 3 2
    b test_cases.regression_tests.branch_to_proto.VRFVerifier.verify_block@0

test_cases.regression_tests.branch_to_proto.VRFVerifier.verify_block@0:
    // regression_tests/branch_to_proto.py:7
    // ensure_budget(10_000, OpUpFeeSource.AppAccount)
    pushint 10000 // 10000
    intc_1 // 1
    callsub ensure_budget
    // regression_tests/branch_to_proto.py:8
    // return op.vrf_verify(op.VrfVerify.VrfAlgorand, message, proof, pk)
    frame_dig -3
    frame_dig -2
    frame_dig -1
    vrf_verify VrfAlgorand
    retsub
