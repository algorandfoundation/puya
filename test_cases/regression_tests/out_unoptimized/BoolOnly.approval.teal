#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1
    bytecblock 0x151f7c75
    b block@0

block@0:
    b block@1

block@1:
    // regression_tests/bool_only.py:4
    // class BoolOnly(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz __algopy_default_create@11
    b abi_routing@2

abi_routing@2:
    // regression_tests/bool_only.py:4
    // class BoolOnly(arc4.ARC4Contract):
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    bz create_NoOp@9
    b call_NoOp@3

call_NoOp@3:
    // regression_tests/bool_only.py:4
    // class BoolOnly(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xa85bff00 // method "set_0_convert(byte[])byte[]"
    pushbytes 0xc4af225c // method "set_0_compare(byte[])byte[]"
    pushbytes 0x83589f2d // method "bool_only_properties()void"
    uncover 3
    match set_0_convert_route@4 set_0_compare_route@5 bool_only_properties_route@6
    b switch_case_default@7

switch_case_default@7:
    b switch_case_next@8

switch_case_next@8:
    b after_if_else@10

after_if_else@10:
    b after_if_else@12

after_if_else@12:
    // regression_tests/bool_only.py:4
    // class BoolOnly(arc4.ARC4Contract):
    err

bool_only_properties_route@6:
    // regression_tests/bool_only.py:13
    // @arc4.abimethod()
    callsub bool_only_properties
    b switch_case_next@8

set_0_compare_route@5:
    // regression_tests/bool_only.py:9
    // @arc4.abimethod()
    callsub set_0_compare
    b switch_case_next@8

set_0_convert_route@4:
    // regression_tests/bool_only.py:5
    // @arc4.abimethod()
    callsub set_0_convert
    b switch_case_next@8

create_NoOp@9:
    b after_if_else@10

__algopy_default_create@11:
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b block@14

block@14:
    b after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__algopy_default_create@15

after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__algopy_default_create@15:
    intc_1 // 1
    return


// test_cases.regression_tests.bool_only.BoolOnly.set_0_convert[routing]() -> void:
set_0_convert:
    b set_0_convert_block@0

set_0_convert_block@0:
    // regression_tests/bool_only.py:5
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.regression_tests.bool_only.BoolOnly.set_0_convert
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.regression_tests.bool_only.BoolOnly.set_0_compare[routing]() -> void:
set_0_compare:
    b set_0_compare_block@0

set_0_compare_block@0:
    // regression_tests/bool_only.py:9
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.regression_tests.bool_only.BoolOnly.set_0_compare
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties[routing]() -> void:
bool_only_properties:
    b bool_only_properties_block@0

bool_only_properties_block@0:
    // regression_tests/bool_only.py:13
    // @arc4.abimethod()
    callsub test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties
    intc_1 // 1
    return


// test_cases.regression_tests.bool_only.BoolOnly.set_0_convert(inp: bytes) -> bytes:
test_cases.regression_tests.bool_only.BoolOnly.set_0_convert:
    // regression_tests/bool_only.py:5-6
    // @arc4.abimethod()
    // def set_0_convert(self, inp: Bytes) -> Bytes:
    proto 1 1
    b test_cases.regression_tests.bool_only.BoolOnly.set_0_convert_block@0

test_cases.regression_tests.bool_only.BoolOnly.set_0_convert_block@0:
    // regression_tests/bool_only.py:7
    // return op.setbit_bytes(inp, 0, bool(Txn.num_app_args))
    txn NumAppArgs
    intc_0 // 0
    !=
    frame_dig -1
    intc_0 // 0
    uncover 2
    setbit
    retsub


// test_cases.regression_tests.bool_only.BoolOnly.set_0_compare(inp: bytes) -> bytes:
test_cases.regression_tests.bool_only.BoolOnly.set_0_compare:
    // regression_tests/bool_only.py:9-10
    // @arc4.abimethod()
    // def set_0_compare(self, inp: Bytes) -> Bytes:
    proto 1 1
    b test_cases.regression_tests.bool_only.BoolOnly.set_0_compare_block@0

test_cases.regression_tests.bool_only.BoolOnly.set_0_compare_block@0:
    // regression_tests/bool_only.py:11
    // return op.setbit_bytes(inp, 0, Txn.num_app_args > 0)
    txn NumAppArgs
    intc_0 // 0
    >
    frame_dig -1
    intc_0 // 0
    uncover 2
    setbit
    retsub


// test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties() -> void:
test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties:
    b test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties_block@0

test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties_block@0:
    // regression_tests/bool_only.py:15
    // op.ITxnCreate.begin()
    itxn_begin
    // regression_tests/bool_only.py:16
    // op.ITxnCreate.set_type_enum(TransactionType.AssetConfig)
    pushint 3 // acfg
    itxn_field TypeEnum
    // regression_tests/bool_only.py:17
    // op.ITxnCreate.set_config_asset_default_frozen(bool(Txn.num_app_args))
    txn NumAppArgs
    intc_0 // 0
    !=
    itxn_field ConfigAssetDefaultFrozen
    // regression_tests/bool_only.py:18
    // op.ITxnCreate.submit()
    itxn_submit
    // regression_tests/bool_only.py:20-22
    // itxn.KeyRegistration(
    //     non_participation=True,
    // ).submit()
    itxn_begin
    // regression_tests/bool_only.py:21
    // non_participation=True,
    intc_1 // 1
    itxn_field Nonparticipation
    // regression_tests/bool_only.py:20
    // itxn.KeyRegistration(
    pushint 2 // keyreg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties_next_txn@1

test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties_next_txn@1:
    // regression_tests/bool_only.py:20-22
    // itxn.KeyRegistration(
    //     non_participation=True,
    // ).submit()
    itxn_submit
    retsub
