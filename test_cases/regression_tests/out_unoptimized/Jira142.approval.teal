#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // regression_tests/jira_142.py:8
    // class Jira142(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main___algopy_default_create@5
    b main_abi_routing@2

main_abi_routing@2:
    // regression_tests/jira_142.py:8
    // class Jira142(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xebb6cc95 // method "battle()void"
    uncover 1
    match main_battle_route@3
    b main_switch_case_next@4

main_switch_case_next@4:
    b main_after_if_else@6

main_after_if_else@6:
    // regression_tests/jira_142.py:8
    // class Jira142(ARC4Contract):
    err

main_battle_route@3:
    // regression_tests/jira_142.py:13
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    !=
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    callsub battle
    b main_switch_case_next@4

main___algopy_default_create@5:
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b main_block@8

main_block@8:
    b main_after_inlined_test_cases.regression_tests.jira_142.Jira142.__algopy_default_create@9

main_after_inlined_test_cases.regression_tests.jira_142.Jira142.__algopy_default_create@9:
    intc_1 // 1
    return


// test_cases.regression_tests.jira_142.Jira142.battle[routing]() -> void:
battle:
    b battle_block@0

battle_block@0:
    // regression_tests/jira_142.py:13
    // @arc4.abimethod
    callsub test_cases.regression_tests.jira_142.Jira142.battle
    intc_1 // 1
    return


// test_cases.regression_tests.jira_142.Jira142.some_subroutine(char: bytes) -> bytes:
some_subroutine:
    // regression_tests/jira_142.py:9-10
    // @subroutine
    // def some_subroutine(self, char: MyStruct) -> None:
    proto 1 1
    b some_subroutine_block@0

some_subroutine_block@0:
    frame_dig -1
    retsub


// test_cases.regression_tests.jira_142.Jira142.battle() -> void:
test_cases.regression_tests.jira_142.Jira142.battle:
    // regression_tests/jira_142.py:13-14
    // @arc4.abimethod
    // def battle(self) -> None:
    proto 0 0
    b test_cases.regression_tests.jira_142.Jira142.battle_block@0

test_cases.regression_tests.jira_142.Jira142.battle_block@0:
    // regression_tests/jira_142.py:15
    // my_struct = MyStruct(foo=arc4.UInt64(200))
    pushbytes 0x
    pushbytes 0x00000000000000c8
    concat
    dupn 2
    // regression_tests/jira_142.py:17
    // if my_struct.foo > arc4.UInt64(100):
    intc_0 // 0
    pushint 8 // 8
    extract3
    pushbytes 0x0000000000000064
    b>
    bz test_cases.regression_tests.jira_142.Jira142.battle_after_if_else@2
    b test_cases.regression_tests.jira_142.Jira142.battle_if_body@1

test_cases.regression_tests.jira_142.Jira142.battle_if_body@1:
    // regression_tests/jira_142.py:18
    // self.some_subroutine(my_struct)
    frame_dig 0
    callsub some_subroutine
    frame_bury 1
    b test_cases.regression_tests.jira_142.Jira142.battle_after_if_else@2

test_cases.regression_tests.jira_142.Jira142.battle_after_if_else@2:
    // regression_tests/jira_142.py:20
    // log(my_struct.copy())
    frame_dig 1
    log
    retsub
