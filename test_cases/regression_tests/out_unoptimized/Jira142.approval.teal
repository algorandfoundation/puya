#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1

main_block@0:

main_block@1:
    // regression_tests/jira_142.py:8
    // class Jira142(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@6

main_abi_routing@2:
    // regression_tests/jira_142.py:8
    // class Jira142(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xebb6cc95 // method "battle()void"
    swap
    match main_battle_route@3

main_switch_case_default@4:

main_switch_case_next@5:

main_after_if_else@10:
    // regression_tests/jira_142.py:8
    // class Jira142(ARC4Contract):
    intc_0 // 0

main_after_inlined_test_cases.regression_tests.jira_142.Jira142.__puya_arc4_router__@11:
    return

main_battle_route@3:
    // regression_tests/jira_142.py:13
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub battle
    intc_1 // 1
    b main_after_inlined_test_cases.regression_tests.jira_142.Jira142.__puya_arc4_router__@11

main_bare_routing@6:
    // regression_tests/jira_142.py:8
    // class Jira142(ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algopy_default_create@7

main_switch_case_default@8:

main_switch_case_next@9:
    b main_after_if_else@10

main___algopy_default_create@7:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

main_block@12:

main_after_inlined_test_cases.regression_tests.jira_142.Jira142.__algopy_default_create@13:
    intc_1 // 1
    b main_after_inlined_test_cases.regression_tests.jira_142.Jira142.__puya_arc4_router__@11


// test_cases.regression_tests.jira_142.Jira142.some_subroutine(char: bytes) -> bytes:
some_subroutine:
    // regression_tests/jira_142.py:9-10
    // @subroutine
    // def some_subroutine(self, char: MyStruct) -> None:
    proto 1 1

some_subroutine_block@0:
    frame_dig -1
    retsub


// test_cases.regression_tests.jira_142.Jira142.battle() -> void:
battle:
    // regression_tests/jira_142.py:13-14
    // @arc4.abimethod
    // def battle(self) -> None:
    proto 0 0

battle_block@0:
    // regression_tests/jira_142.py:15
    // my_struct = MyStruct(foo=arc4.UInt64(200))
    pushbytes 0x
    pushbytes 0x00000000000000c8
    concat
    pushbytes 0x
    concat
    dupn 2
    // regression_tests/jira_142.py:17
    // if my_struct.foo > arc4.UInt64(100):
    intc_0 // 0
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    pushbytes 0x0000000000000064
    b>
    bz battle_after_if_else@2

battle_if_body@1:
    // regression_tests/jira_142.py:18
    // self.some_subroutine(my_struct)
    frame_dig 0
    callsub some_subroutine
    frame_bury 1

battle_after_if_else@2:
    frame_dig 1
    // regression_tests/jira_142.py:20
    // log(my_struct.copy())
    log
    retsub
