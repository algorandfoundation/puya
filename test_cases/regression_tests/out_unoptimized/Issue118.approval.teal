#pragma version 10

test_cases.regression_tests.issue_118.Issue118.approval_program:
    intcblock 0 1 3
    bytecblock 0x
    callsub __puya_arc4_router__
    return


// test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // regression_tests/issue_118.py:5
    // class Issue118(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    intc_0 // 0
    !=
    bz __puya_arc4_router___bare_routing@5
    txna ApplicationArgs 0
    pushbytes 0xbc66eb62 // method "verify(uint256[])(bool,string)"
    swap
    match __puya_arc4_router___verify_route@2
    b __puya_arc4_router___switch_case_default@3

__puya_arc4_router___verify_route@2:
    // regression_tests/issue_118.py:6-7
    // # ref: https://github.com/algorandfoundation/puya/issues/118
    // @abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    // regression_tests/issue_118.py:5
    // class Issue118(ARC4Contract):
    txna ApplicationArgs 1
    // regression_tests/issue_118.py:6-7
    // # ref: https://github.com/algorandfoundation/puya/issues/118
    // @abimethod
    callsub verify
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___switch_case_default@3:
    b __puya_arc4_router___after_if_else@9

__puya_arc4_router___bare_routing@5:
    // regression_tests/issue_118.py:5
    // class Issue118(ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match __puya_arc4_router_____algopy_default_create@6
    b __puya_arc4_router___switch_case_default@7

__puya_arc4_router_____algopy_default_create@6:
    // regression_tests/issue_118.py:5
    // class Issue118(ARC4Contract):
    txn ApplicationID
    intc_0 // 0
    ==
    assert // is creating
    callsub __algopy_default_create
    intc_1 // 1
    retsub

__puya_arc4_router___switch_case_default@7:

__puya_arc4_router___after_if_else@9:
    // regression_tests/issue_118.py:5
    // class Issue118(ARC4Contract):
    intc_0 // 0
    retsub


// test_cases.regression_tests.issue_118.Issue118.verify(values: bytes) -> bytes:
verify:
    // regression_tests/issue_118.py:6-8
    // # ref: https://github.com/algorandfoundation/puya/issues/118
    // @abimethod
    // def verify(self, values: DynamicArray[UInt256]) -> Tuple[Bool, String]:
    proto 1 1
    // regression_tests/issue_118.py:10
    // bool(Txn.num_app_args)
    txn NumAppArgs
    intc_0 // 0
    !=
    // regression_tests/issue_118.py:9-11
    // val1 = Bool(
    //     bool(Txn.num_app_args)
    // )  # use a non constant value so the repeated expression is not simplified
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    // regression_tests/issue_118.py:12
    // if values.length != 2:
    frame_dig -1
    intc_0 // 0
    extract_uint16
    pushint 2 // 2
    !=
    bz verify_after_if_else@2
    // regression_tests/issue_118.py:13
    // return Tuple((val1, String("")))
    bytec_0 // ""
    len
    itob
    extract 6 2
    bytec_0 // ""
    concat
    bytec_0 // 0x
    uncover 2
    concat
    intc_2 // 3
    itob
    extract 6 2
    concat
    swap
    concat
    retsub

verify_after_if_else@2:
    // regression_tests/issue_118.py:14
    // return Tuple((val1, String("")))
    bytec_0 // ""
    len
    itob
    extract 6 2
    bytec_0 // ""
    concat
    bytec_0 // 0x
    uncover 2
    concat
    intc_2 // 3
    itob
    extract 6 2
    concat
    swap
    concat
    retsub


// test_cases.regression_tests.issue_118.Issue118.__algopy_default_create() -> void:
__algopy_default_create:
    // regression_tests/issue_118.py:5
    // class Issue118(ARC4Contract):
    proto 0 0
    retsub
