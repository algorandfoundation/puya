#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 3
    bytecblock 0x
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // regression_tests/issue_118.py:5
    // class Issue118(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main___algopy_default_create@6
    b main_abi_routing@2

main_abi_routing@2:
    // regression_tests/issue_118.py:5
    // class Issue118(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xbc66eb62 // method "verify(uint256[])(bool,string)"
    uncover 1
    match main_verify_route@3
    b main_switch_case_default@4

main_switch_case_default@4:
    b main_switch_case_next@5

main_switch_case_next@5:
    b main_after_if_else@7

main_after_if_else@7:
    // regression_tests/issue_118.py:5
    // class Issue118(ARC4Contract):
    err

main_verify_route@3:
    // regression_tests/issue_118.py:6-7
    // # ref: https://github.com/algorandfoundation/puya/issues/118
    // @abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    !=
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    callsub verify
    b main_switch_case_next@5

main___algopy_default_create@6:
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b main_block@9

main_block@9:
    b main_after_inlined_test_cases.regression_tests.issue_118.Issue118.__algopy_default_create@10

main_after_inlined_test_cases.regression_tests.issue_118.Issue118.__algopy_default_create@10:
    intc_1 // 1
    return


// test_cases.regression_tests.issue_118.Issue118.verify[routing]() -> void:
verify:
    b verify_block@0

verify_block@0:
    // regression_tests/issue_118.py:6-7
    // # ref: https://github.com/algorandfoundation/puya/issues/118
    // @abimethod
    txna ApplicationArgs 1
    callsub test_cases.regression_tests.issue_118.Issue118.verify
    pushbytes 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.regression_tests.issue_118.Issue118.verify(values: bytes) -> bytes:
test_cases.regression_tests.issue_118.Issue118.verify:
    // regression_tests/issue_118.py:6-8
    // # ref: https://github.com/algorandfoundation/puya/issues/118
    // @abimethod
    // def verify(self, values: DynamicArray[UInt256]) -> Tuple[Bool, String]:
    proto 1 1
    b test_cases.regression_tests.issue_118.Issue118.verify_block@0

test_cases.regression_tests.issue_118.Issue118.verify_block@0:
    // regression_tests/issue_118.py:10
    // bool(Txn.num_app_args)
    txn NumAppArgs
    intc_0 // 0
    !=
    // regression_tests/issue_118.py:9-11
    // val1 = Bool(
    //     bool(Txn.num_app_args)
    // )  # use a non constant value so the repeated expression is not simplified
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    // regression_tests/issue_118.py:12
    // if values.length != 2:
    frame_dig -1
    intc_0 // 0
    extract_uint16
    pushint 2 // 2
    !=
    bz test_cases.regression_tests.issue_118.Issue118.verify_after_if_else@2
    b test_cases.regression_tests.issue_118.Issue118.verify_if_body@1

test_cases.regression_tests.issue_118.Issue118.verify_if_body@1:
    // regression_tests/issue_118.py:13
    // return Tuple((val1, String("")))
    bytec_0 // ""
    len
    itob
    extract 6 2
    bytec_0 // ""
    concat
    bytec_0 // 0x
    frame_dig 0
    concat
    intc_2 // 3
    itob
    extract 6 2
    concat
    uncover 1
    concat
    uncover 1
    retsub

test_cases.regression_tests.issue_118.Issue118.verify_after_if_else@2:
    // regression_tests/issue_118.py:14
    // return Tuple((val1, String("")))
    bytec_0 // ""
    len
    itob
    extract 6 2
    bytec_0 // ""
    concat
    bytec_0 // 0x
    frame_dig 0
    concat
    intc_2 // 3
    itob
    extract 6 2
    concat
    uncover 1
    concat
    uncover 1
    retsub
