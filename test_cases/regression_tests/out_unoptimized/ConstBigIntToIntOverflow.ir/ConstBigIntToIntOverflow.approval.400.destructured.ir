main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@16
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {* => block@3}
    block@3: // route_NoOp_L4
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {* => block@4}
    block@4: // switch_case_default_L4
        let tmp%6#0: bool = (txn ApplicationID)
        goto tmp%6#0 ? block@5 : block@10
    block@5: // call_NoOp_L4
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "get_abs_bound1(uint64)uint64" => block@6, method "get_abs_bound2()uint64" => block@7, * => block@8}
    block@6: // get_abs_bound1_route_L5
        test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1[routing]()
        goto block@9
    block@7: // get_abs_bound2_route_L17
        test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2[routing]()
        goto block@9
    block@8: // switch_case_default_L4
        goto block@9
    block@9: // switch_case_next_L4
        goto block@13
    block@10: // create_NoOp_L4
        let tmp%8#0: bytes = (txna ApplicationArgs 0)
        switch tmp%8#0 {* => block@11}
    block@11: // switch_case_default_L4
        goto block@12
    block@12: // switch_case_next_L4
        goto block@13
    block@13: // after_if_else_L4
        goto block@14
    block@14: // switch_case_next_L4
        goto block@15
    block@15: // switch_case_next_L4
        goto block@20
    block@16: // bare_routing_L4
        let tmp%9#0: uint64 = (txn OnCompletion)
        switch tmp%9#0 {0u => block@17, * => block@18}
    block@17: // __algopy_default_create_L1
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        (assert tmp%11#0) // can only call when creating
        goto block@22
    block@22: // L1
        goto block@23
    block@23: // after_inlined_test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__algopy_default_create_L1
        exit 1u
    block@18: // switch_case_default_L4
        goto block@19
    block@19: // switch_case_next_L4
        goto block@20
    block@20: // after_if_else_L4
        exit 0u
    block@21: // after_inlined_test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1[routing]() -> void:
    block@0: // L5
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%1#0: uint64 = test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1(tmp%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%2#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2[routing]() -> void:
    block@0: // L17
        let tmp%0#0: uint64 = test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1(upper_bound: uint64) -> uint64:
    block@0: // L5
        let abs_bound#0: uint64 = 0u
        let tmp%0#0: bool = (!= upper_bound#0 0u)
        goto tmp%0#0 ? block@1 : block@2
    block@1: // if_body_L13
        let tmp%1#0: biguint = (itob 0u)
        let tmp%2#0: biguint = (b- 18446744073709551616b tmp%1#0)
        let tmp%3#0: uint64 = (btoi tmp%2#0)
        let abs_bound#0: uint64 = tmp%3#0
        goto block@2
    block@2: // after_if_else_L8
        return abs_bound#0

subroutine test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2() -> uint64:
    block@0: // L17
        let tmp%0#0: biguint = (b- 18446744073709551616b 0b)
        let tmp%1#0: uint64 = (btoi tmp%0#0)
        let abs_bound#0: uint64 = tmp%1#0
        return abs_bound#0