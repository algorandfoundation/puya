main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@7
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "get_abs_bound1(uint64)uint64" => block@3, method "get_abs_bound2()uint64" => block@4, * => block@5}
    block@3: // get_abs_bound1_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%8#0: uint64 = test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1(tmp%7#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%8#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let tmp%9#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#1
        let tmp%10#0: bytes = (concat 0x151f7c75 tmp%9#0)
        (log tmp%10#0)
        let test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0
        goto block@12
    block@4: // get_abs_bound2_route_L17
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        let tmp%15#0: uint64 = test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2()
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%15#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let tmp%16#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#1
        let tmp%17#0: bytes = (concat 0x151f7c75 tmp%16#0)
        (log tmp%17#0)
        let test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0
        goto block@12
    block@5: // switch_case_default_L4
        goto block@6
    block@6: // switch_case_next_L4
        goto block@11
    block@7: // bare_routing_L4
        let tmp%18#0: uint64 = (txn OnCompletion)
        switch tmp%18#0 {0u => block@8, * => block@9}
    block@8: // __algopy_default_create_L1
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (== tmp%19#0 0u)
        (assert tmp%20#0) // can only call when creating
        goto block@13
    block@13: // L1
        goto block@14
    block@14: // after_inlined_test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__algopy_default_create_L1
        let test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0
        goto block@12
    block@9: // switch_case_default_L4
        goto block@10
    block@10: // switch_case_next_L4
        goto block@11
    block@11: // after_if_else_L4
        let test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0
        goto block@12
    block@12: // after_inlined_test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1(upper_bound: uint64) -> uint64:
    block@0: // L5
        let abs_bound#0: uint64 = 0u
        let tmp%0#0: bool = (!= upper_bound#0 0u)
        goto tmp%0#0 ? block@1 : block@2
    block@1: // if_body_L13
        let tmp%1#0: biguint = (itob 0u)
        let tmp%2#0: biguint = (b- 18446744073709551616b tmp%1#0)
        let tmp%3#0: uint64 = (btoi tmp%2#0)
        let abs_bound#0: uint64 = tmp%3#0
        goto block@2
    block@2: // after_if_else_L8
        return abs_bound#0

subroutine test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2() -> uint64:
    block@0: // L17
        let tmp%0#0: biguint = (b- 18446744073709551616b 0b)
        let tmp%1#0: uint64 = (btoi tmp%0#0)
        let abs_bound#0: uint64 = tmp%1#0
        return abs_bound#0