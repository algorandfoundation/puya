main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@9
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@7
    block@3: // call_NoOp_L4
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "get_abs_bound1(uint64)uint64" => block@4, method "get_abs_bound2()uint64" => block@5, * => block@6}
    block@4: // get_abs_bound1_route_L5
        test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1[routing]()
        goto block@6
    block@5: // get_abs_bound2_route_L17
        test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2[routing]()
        goto block@6
    block@6: // switch_case_next_L4
        goto block@8
    block@7: // create_NoOp_L4
        goto block@8
    block@8: // after_if_else_L4
        goto block@10
    block@9: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        goto block@12
    block@12: // L1
        goto block@13
    block@13: // after_inlined_test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__algopy_default_create_L1
        exit 1u
    block@10: // after_if_else_L4
        exit 0u
    block@11: // after_inlined_test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1[routing]() -> void:
    block@0: // L5
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: uint64 = (btoi as_Encoded(uint64)%0#0)
        let tmp%2#0: uint64 = test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1(tmp%1#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%3#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2[routing]() -> void:
    block@0: // L17
        let tmp%0#0: uint64 = test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1(upper_bound: uint64) -> uint64:
    block@0: // L5
        let abs_bound#0: uint64 = 0u
        let tmp%0#0: bool = (!= upper_bound#0 0u)
        goto tmp%0#0 ? block@1 : block@2
    block@1: // if_body_L13
        let tmp%1#0: biguint = (itob 0u)
        let tmp%2#0: biguint = (b- 18446744073709551616b tmp%1#0)
        let tmp%3#0: uint64 = (btoi tmp%2#0)
        let abs_bound#0: uint64 = tmp%3#0
        goto block@2
    block@2: // after_if_else_L8
        return abs_bound#0

subroutine test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2() -> uint64:
    block@0: // L17
        let tmp%0#0: biguint = (b- 18446744073709551616b 0b)
        let tmp%1#0: uint64 = (btoi tmp%0#0)
        let abs_bound#0: uint64 = tmp%1#0
        return abs_bound#0