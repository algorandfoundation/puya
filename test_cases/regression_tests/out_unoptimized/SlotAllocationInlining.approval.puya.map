{
  "version": 3,
  "sources": [
    "../slot_allocation_inlining.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKsB;;;AAAd;AAAA;;;AACA;;;AACO;AAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASE;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AACN;AAAA;;;AACO;AAAA;AAAA;;AAAA;AAAc;;AAAd;AAAP;;AAGJ;;;AAEa;;AAAA;AAAb;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;AACmB;AAAX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.regression_tests.slot_allocation_inlining.SlotAllocationInlining.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x 0x068101"
    },
    "12": {
      "op": "pushbytes 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
    },
    "46": {
      "op": "store 0"
    },
    "48": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "pushint 800 // 800",
      "defined_out": [
        "800"
      ],
      "stack_out": [
        "800"
      ]
    },
    "51": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "800"
      ],
      "stack_out": [
        "800",
        "0"
      ]
    },
    "52": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "55": {
      "callsub": "test_cases.regression_tests.slot_allocation_inlining.do_something_with_array",
      "op": "callsub do_something_with_array"
    },
    "58": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "59": {
      "op": "return",
      "stack_out": []
    },
    "60": {
      "subroutine": "_puya_lib.util.ensure_budget",
      "params": {
        "required_budget#0": "uint64",
        "fee_source#0": "uint64"
      },
      "block": "ensure_budget",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "63": {
      "block": "ensure_budget_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)"
      ]
    },
    "65": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)",
        "10"
      ]
    },
    "67": {
      "op": "+",
      "defined_out": [
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "68": {
      "block": "ensure_budget_while_top@1",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "global OpcodeBudget",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ]
    },
    "70": {
      "op": "frame_dig 0",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%0#0",
        "required_budget_with_buffer#0"
      ]
    },
    "72": {
      "op": "<",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ]
    },
    "73": {
      "op": "bz ensure_budget_after_while@7",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "76": {
      "block": "ensure_budget_while_body@2",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "itxn_begin"
    },
    "77": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "appl"
      ]
    },
    "79": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "81": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "DeleteApplication"
      ]
    },
    "83": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "85": {
      "op": "bytec_1 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "86": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "88": {
      "op": "bytec_1 // 0x068101",
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "89": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "91": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0"
      ]
    },
    "92": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "1"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0",
        "1"
      ]
    },
    "93": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "1",
        "fee_source#0 (copy)"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0",
        "1",
        "fee_source#0 (copy)"
      ]
    },
    "95": {
      "op": "match ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "101": {
      "block": "ensure_budget_switch_case_next@6",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "itxn_submit"
    },
    "102": {
      "op": "b ensure_budget_while_top@1"
    },
    "105": {
      "block": "ensure_budget_switch_case_1@4",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%2#0"
      ]
    },
    "107": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "109": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "112": {
      "block": "ensure_budget_switch_case_0@3",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0"
      ]
    },
    "113": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "115": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "118": {
      "block": "ensure_budget_after_while@7",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "119": {
      "subroutine": "test_cases.regression_tests.slot_allocation_inlining.do_something_with_array",
      "params": {},
      "block": "do_something_with_array_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "120": {
      "op": "dup",
      "stack_out": [
        "0x",
        "0x"
      ]
    },
    "121": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "122": {
      "callsub": "_puya_lib.mem.new_slot",
      "op": "callsub _puya_lib.mem.new_slot",
      "defined_out": [
        "encoded%0#0",
        "slot%0#0"
      ],
      "stack_out": [
        "encoded%0#0",
        "slot%0#0"
      ]
    },
    "125": {
      "op": "dup",
      "defined_out": [
        "encoded%0#0",
        "slot%0#0",
        "slot%0#0 (copy)"
      ],
      "stack_out": [
        "encoded%0#0",
        "slot%0#0",
        "slot%0#0 (copy)"
      ]
    },
    "126": {
      "op": "uncover 2",
      "stack_out": [
        "slot%0#0",
        "slot%0#0 (copy)",
        "encoded%0#0"
      ]
    },
    "128": {
      "op": "stores",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0"
      ]
    },
    "129": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "arr#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "arr#0 (copy)"
      ]
    },
    "130": {
      "callsub": "test_cases.regression_tests.slot_allocation_inlining.append_to_array",
      "op": "callsub append_to_array",
      "stack_out": [
        "arr#0"
      ]
    },
    "133": {
      "op": "loads",
      "defined_out": [
        "slot_contents%0#0"
      ],
      "stack_out": [
        "slot_contents%0#0"
      ]
    },
    "134": {
      "op": "len",
      "defined_out": [
        "array%bytes_len%0#1"
      ],
      "stack_out": [
        "array%bytes_len%0#1"
      ]
    },
    "135": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "array%bytes_len%0#1"
      ],
      "stack_out": [
        "array%bytes_len%0#1",
        "8"
      ]
    },
    "137": {
      "op": "/",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "138": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "32"
      ]
    },
    "140": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "141": {
      "error": "expected array of length 32",
      "op": "assert // expected array of length 32",
      "stack_out": []
    },
    "142": {
      "retsub": true,
      "op": "retsub"
    },
    "143": {
      "subroutine": "test_cases.regression_tests.slot_allocation_inlining.append_to_array",
      "params": {
        "arr#0": "uint64"
      },
      "block": "append_to_array",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "146": {
      "block": "append_to_array_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "148": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "149": {
      "op": "len",
      "defined_out": [
        "bytes_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0"
      ]
    },
    "150": {
      "op": "intc_0 // 0",
      "defined_out": [
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "151": {
      "block": "append_to_array_for_header@1",
      "stack_in": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "153": {
      "op": "frame_dig 1",
      "defined_out": [
        "bytes_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "bytes_length%0#0"
      ]
    },
    "155": {
      "op": "<",
      "defined_out": [
        "bytes_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "156": {
      "op": "bz append_to_array_after_for@4",
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "159": {
      "block": "append_to_array_for_body@2",
      "stack_in": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "tmp%0#0"
      ]
    },
    "161": {
      "op": "frame_dig 2",
      "defined_out": [
        "item_index_internal%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "tmp%0#0",
        "item_index_internal%0#0"
      ]
    },
    "163": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "tmp%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "164": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "b#0",
        "item_index_internal%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "b#0"
      ]
    },
    "165": {
      "op": "btoi",
      "defined_out": [
        "item_index_internal%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "tmp%1#0"
      ]
    },
    "166": {
      "op": "frame_dig -1",
      "defined_out": [
        "arr#0 (copy)",
        "item_index_internal%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "tmp%1#0",
        "arr#0 (copy)"
      ]
    },
    "168": {
      "op": "loads",
      "defined_out": [
        "item_index_internal%0#0",
        "slot_contents%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "tmp%1#0",
        "slot_contents%0#0"
      ]
    },
    "169": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "slot_contents%0#0",
        "tmp%1#0"
      ]
    },
    "170": {
      "op": "itob",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "item_index_internal%0#0",
        "slot_contents%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "slot_contents%0#0",
        "as_Encoded(uint64)%0#0"
      ]
    },
    "171": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "as_Encoded(uint64)%0#0",
        "item_index_internal%0#0",
        "slot_contents%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "slot_contents%0#0",
        "as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "172": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "slot_contents%0#0",
        "0x",
        "as_Encoded(uint64)%0#0"
      ]
    },
    "173": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "item_index_internal%0#0",
        "slot_contents%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "slot_contents%0#0",
        "encoded%0#0"
      ]
    },
    "174": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "slot_contents%0#0",
        "encoded%0#0",
        "0x"
      ]
    },
    "175": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0",
        "item_index_internal%0#0",
        "slot_contents%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "slot_contents%0#0",
        "encoded%1#0"
      ]
    },
    "176": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "item_index_internal%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "concat%0#0"
      ]
    },
    "177": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "concat%0#0",
        "arr#0 (copy)"
      ]
    },
    "179": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "arr#0 (copy)",
        "concat%0#0"
      ]
    },
    "180": {
      "op": "stores",
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "181": {
      "block": "append_to_array_for_footer@3",
      "stack_in": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "183": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "184": {
      "op": "+",
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "185": {
      "op": "frame_bury 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "187": {
      "op": "b append_to_array_for_header@1"
    },
    "190": {
      "block": "append_to_array_after_for@4",
      "stack_in": [
        "tmp%0#0",
        "bytes_length%0#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "191": {
      "subroutine": "_puya_lib.mem.new_slot",
      "params": {},
      "block": "_puya_lib.mem.new_slot@entry",
      "stack_in": [],
      "op": "load 0",
      "defined_out": [
        "slot_allocations"
      ],
      "stack_out": [
        "slot_allocations"
      ]
    },
    "193": {
      "op": "bitlen",
      "defined_out": [
        "free_slot#0"
      ],
      "stack_out": [
        "free_slot#0"
      ]
    },
    "194": {
      "op": "load 0",
      "stack_out": [
        "free_slot#0",
        "slot_allocations"
      ]
    },
    "196": {
      "op": "pushint 256 // 256",
      "defined_out": [
        "256",
        "free_slot#0",
        "slot_allocations"
      ],
      "stack_out": [
        "free_slot#0",
        "slot_allocations",
        "256"
      ]
    },
    "199": {
      "op": "dig 2",
      "defined_out": [
        "256",
        "free_slot#0",
        "free_slot#0 (copy)",
        "slot_allocations"
      ],
      "stack_out": [
        "free_slot#0",
        "slot_allocations",
        "256",
        "free_slot#0 (copy)"
      ]
    },
    "201": {
      "op": "-",
      "defined_out": [
        "free_slot#0",
        "free_slot_idx",
        "slot_allocations"
      ],
      "stack_out": [
        "free_slot#0",
        "slot_allocations",
        "free_slot_idx"
      ]
    },
    "202": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "free_slot#0",
        "free_slot_idx",
        "slot_allocations"
      ],
      "stack_out": [
        "free_slot#0",
        "slot_allocations",
        "free_slot_idx",
        "0"
      ]
    },
    "203": {
      "error": "no available slots",
      "op": "setbit // on error: no available slots",
      "defined_out": [
        "free_slot#0",
        "new_slot_allocations"
      ],
      "stack_out": [
        "free_slot#0",
        "new_slot_allocations"
      ]
    },
    "204": {
      "op": "store 0",
      "stack_out": [
        "free_slot#0"
      ]
    },
    "206": {
      "retsub": true,
      "op": "retsub"
    }
  }
}