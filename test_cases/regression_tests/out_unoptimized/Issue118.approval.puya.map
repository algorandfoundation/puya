{
  "version": 3,
  "sources": [
    "../issue_118.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAIA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;;;;AAAA;AAEK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAL;;;;;;AAGiB;;AAAL;AAAA;AADG;;;AAAA;AAAA;;AAAA;AAGJ;;AAAA;AAAA;AAAiB;;AAAjB;AAAX;;;AAAA;;;AACgC;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAP;;AAAA;AACgB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAP;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3"
    },
    "6": {
      "op": "bytecblock 0x"
    },
    "9": {
      "op": "b block@0"
    },
    "12": {
      "block": "block@0",
      "stack_in": [],
      "op": "b block@1"
    },
    "15": {
      "block": "block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "17": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "18": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "19": {
      "op": "bz __algopy_default_create@6",
      "stack_out": []
    },
    "22": {
      "op": "b abi_routing@2"
    },
    "25": {
      "block": "abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "28": {
      "op": "pushbytes 0xbc66eb62 // method \"verify(uint256[])(bool,string)\"",
      "defined_out": [
        "Method(verify(uint256[])(bool,string))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(verify(uint256[])(bool,string))"
      ]
    },
    "34": {
      "op": "uncover 1",
      "stack_out": [
        "Method(verify(uint256[])(bool,string))",
        "tmp%2#0"
      ]
    },
    "36": {
      "op": "match verify_route@3",
      "stack_out": []
    },
    "40": {
      "op": "b switch_case_default@4"
    },
    "43": {
      "block": "switch_case_default@4",
      "stack_in": [],
      "op": "b switch_case_next@5"
    },
    "46": {
      "block": "switch_case_next@5",
      "stack_in": [],
      "op": "b after_if_else@7"
    },
    "49": {
      "block": "after_if_else@7",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "50": {
      "block": "verify_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "52": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "53": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "54": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "56": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0"
      ]
    },
    "57": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "58": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "59": {
      "error": "OnCompletion must be NoOp && can only call when not creating",
      "op": "assert // OnCompletion must be NoOp && can only call when not creating",
      "stack_out": []
    },
    "60": {
      "callsub": "test_cases.regression_tests.issue_118.Issue118.verify[routing]",
      "op": "callsub verify"
    },
    "63": {
      "op": "b switch_case_next@5"
    },
    "66": {
      "block": "__algopy_default_create@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "68": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "69": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "70": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "72": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "0"
      ]
    },
    "73": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "74": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "75": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "76": {
      "op": "b block@9"
    },
    "79": {
      "block": "block@9",
      "stack_in": [],
      "op": "b after_inlined_test_cases.regression_tests.issue_118.Issue118.__algopy_default_create@10"
    },
    "82": {
      "block": "after_inlined_test_cases.regression_tests.issue_118.Issue118.__algopy_default_create@10",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "83": {
      "op": "return",
      "stack_out": []
    },
    "84": {
      "subroutine": "test_cases.regression_tests.issue_118.Issue118.verify[routing]",
      "params": {},
      "block": "verify",
      "stack_in": [],
      "op": "b verify_block@0"
    },
    "87": {
      "block": "verify_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint256[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint256[])%0#0"
      ]
    },
    "90": {
      "callsub": "test_cases.regression_tests.issue_118.Issue118.verify",
      "op": "callsub test_cases.regression_tests.issue_118.Issue118.verify",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "93": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "99": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "101": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "102": {
      "op": "log",
      "stack_out": []
    },
    "103": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "104": {
      "op": "return",
      "stack_out": []
    },
    "105": {
      "subroutine": "test_cases.regression_tests.issue_118.Issue118.verify",
      "params": {
        "values#0": "bytes"
      },
      "block": "test_cases.regression_tests.issue_118.Issue118.verify",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "108": {
      "op": "b test_cases.regression_tests.issue_118.Issue118.verify_block@0"
    },
    "111": {
      "block": "test_cases.regression_tests.issue_118.Issue118.verify_block@0",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "113": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "114": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "115": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x00"
      ]
    },
    "118": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0x00",
        "0"
      ]
    },
    "119": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%1#0"
      ]
    },
    "121": {
      "op": "setbit",
      "defined_out": [],
      "stack_out": [
        "val1#0"
      ]
    },
    "122": {
      "op": "frame_dig -1",
      "defined_out": [
        "values#0 (copy)"
      ],
      "stack_out": [
        "val1#0",
        "values#0 (copy)"
      ]
    },
    "124": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val1#0",
        "values#0 (copy)",
        "0"
      ]
    },
    "125": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%3#0"
      ]
    },
    "126": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%3#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%3#0",
        "2"
      ]
    },
    "128": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%4#0"
      ]
    },
    "129": {
      "op": "bz test_cases.regression_tests.issue_118.Issue118.verify_after_if_else@2",
      "stack_out": [
        "val1#0"
      ]
    },
    "132": {
      "op": "b test_cases.regression_tests.issue_118.Issue118.verify_if_body@1"
    },
    "135": {
      "block": "test_cases.regression_tests.issue_118.Issue118.verify_if_body@1",
      "stack_in": [
        "val1#0"
      ],
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "\"\""
      ],
      "stack_out": [
        "val1#0",
        "\"\""
      ]
    },
    "136": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "val1#0",
        "aggregate%length%0#0"
      ]
    },
    "137": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "val1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "138": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "val1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "141": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "val1#0",
        "aggregate%length_uint16%0#0",
        "\"\""
      ]
    },
    "142": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%5#0"
      ]
    },
    "143": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%5#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%5#0",
        "0x"
      ]
    },
    "144": {
      "op": "frame_dig 0",
      "defined_out": [
        "0x",
        "tmp%5#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%5#0",
        "0x",
        "val1#0"
      ]
    },
    "146": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%5#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%5#0",
        "aggregate%head%0#0"
      ]
    },
    "147": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "aggregate%head%0#0",
        "tmp%5#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%5#0",
        "aggregate%head%0#0",
        "3"
      ]
    },
    "148": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%5#0",
        "aggregate%head%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "149": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%5#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%5#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "152": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%5#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%5#0",
        "aggregate%head%1#0"
      ]
    },
    "153": {
      "op": "uncover 1",
      "stack_out": [
        "val1#0",
        "aggregate%head%1#0",
        "tmp%5#0"
      ]
    },
    "155": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%6#0"
      ]
    },
    "156": {
      "op": "uncover 1"
    },
    "158": {
      "retsub": true,
      "op": "retsub"
    },
    "159": {
      "block": "test_cases.regression_tests.issue_118.Issue118.verify_after_if_else@2",
      "stack_in": [
        "val1#0"
      ],
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "\"\""
      ],
      "stack_out": [
        "val1#0",
        "\"\""
      ]
    },
    "160": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0"
      ],
      "stack_out": [
        "val1#0",
        "aggregate%length%1#0"
      ]
    },
    "161": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0"
      ],
      "stack_out": [
        "val1#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "162": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0"
      ],
      "stack_out": [
        "val1#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "165": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "val1#0",
        "aggregate%length_uint16%1#0",
        "\"\""
      ]
    },
    "166": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%7#0"
      ]
    },
    "167": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%7#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%7#0",
        "0x"
      ]
    },
    "168": {
      "op": "frame_dig 0",
      "defined_out": [
        "0x",
        "tmp%7#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%7#0",
        "0x",
        "val1#0"
      ]
    },
    "170": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "tmp%7#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%7#0",
        "aggregate%head%2#0"
      ]
    },
    "171": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "aggregate%head%2#0",
        "tmp%7#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%7#0",
        "aggregate%head%2#0",
        "3"
      ]
    },
    "172": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "aggregate%head%2#0",
        "tmp%7#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "173": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%7#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "176": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%3#0",
        "tmp%7#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%7#0",
        "aggregate%head%3#0"
      ]
    },
    "177": {
      "op": "uncover 1",
      "stack_out": [
        "val1#0",
        "aggregate%head%3#0",
        "tmp%7#0"
      ]
    },
    "179": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%8#0"
      ]
    },
    "180": {
      "op": "uncover 1"
    },
    "182": {
      "retsub": true,
      "op": "retsub"
    }
  }
}