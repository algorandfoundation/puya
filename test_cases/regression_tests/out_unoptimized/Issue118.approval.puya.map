{
  "version": 3,
  "sources": [
    "../issue_118.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;AAIA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;AAAA;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;;;;;;;;AAEK;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAL;;;;;;AAGiB;;AAAL;AAAA;AADG;;;AAAA;AAAA;;AAAA;AAGJ;;AAAA;AAAA;AAAiB;AAAjB;AAAX;;;AAAA;;;AACgC;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAP;;AAAA;AACgB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAP;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3 2"
    },
    "7": {
      "op": "bytecblock 0x"
    },
    "10": {
      "op": "b block@0"
    },
    "13": {
      "block": "block@0",
      "stack_in": [],
      "op": "b block@1"
    },
    "16": {
      "block": "block@1",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "18": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "19": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "21": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "22": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "23": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "24": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "25": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%4#0",
        "0",
        "1"
      ]
    },
    "26": {
      "op": "intc_3 // 2",
      "defined_out": [
        "0",
        "1",
        "2",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2"
      ]
    },
    "27": {
      "op": "intc_2 // 3",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3"
      ]
    },
    "28": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "30": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5"
      ]
    },
    "32": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ]
    },
    "34": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7"
      ]
    },
    "36": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    },
    "38": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "40": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "0",
        "1",
        "10",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ]
    },
    "42": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "0",
        "1",
        "10",
        "11",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11"
      ]
    },
    "44": {
      "op": "uncover 12",
      "stack_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "tmp%4#0"
      ]
    },
    "46": {
      "op": "match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication",
      "stack_out": []
    },
    "72": {
      "op": "b *NOT_IMPLEMENTED"
    },
    "75": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "76": {
      "block": "create_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "79": {
      "block": "call_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "82": {
      "block": "create_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "85": {
      "block": "call_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "88": {
      "block": "create_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "91": {
      "block": "call_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "94": {
      "block": "create_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "97": {
      "block": "call_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "100": {
      "block": "create_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "103": {
      "block": "call_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "106": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "108": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "109": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "110": {
      "op": "bz else_body@8",
      "stack_out": []
    },
    "113": {
      "op": "b __algopy_default_create@7"
    },
    "116": {
      "block": "__algopy_default_create@7",
      "stack_in": [],
      "op": "b block@21"
    },
    "119": {
      "block": "block@21",
      "stack_in": [],
      "op": "b after_inlined_test_cases.regression_tests.issue_118.Issue118.__algopy_default_create@22"
    },
    "122": {
      "block": "after_inlined_test_cases.regression_tests.issue_118.Issue118.__algopy_default_create@22",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "123": {
      "op": "return",
      "stack_out": []
    },
    "124": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "block": "else_body@8",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for create NoOp"
    },
    "125": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "128": {
      "op": "pushbytes 0xbc66eb62 // method \"verify(uint256[])(bool,string)\"",
      "defined_out": [
        "Method(verify(uint256[])(bool,string))",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(verify(uint256[])(bool,string))"
      ]
    },
    "134": {
      "op": "uncover 1",
      "stack_out": [
        "Method(verify(uint256[])(bool,string))",
        "tmp%5#0"
      ]
    },
    "136": {
      "op": "match verify_route@3",
      "stack_out": []
    },
    "140": {
      "op": "b switch_case_default@4"
    },
    "143": {
      "block": "switch_case_default@4",
      "stack_in": [],
      "op": "b switch_case_next@5"
    },
    "146": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "block": "switch_case_next@5",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "147": {
      "block": "verify_route@3",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.issue_118.Issue118.verify[routing]",
      "op": "callsub verify"
    },
    "150": {
      "op": "b switch_case_next@5"
    },
    "153": {
      "subroutine": "test_cases.regression_tests.issue_118.Issue118.verify[routing]",
      "params": {},
      "block": "verify",
      "stack_in": [],
      "op": "b verify_block@0"
    },
    "156": {
      "block": "verify_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint256[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint256[])%0#0"
      ]
    },
    "159": {
      "callsub": "test_cases.regression_tests.issue_118.Issue118.verify",
      "op": "callsub test_cases.regression_tests.issue_118.Issue118.verify",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "162": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "168": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "170": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "171": {
      "op": "log",
      "stack_out": []
    },
    "172": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "173": {
      "op": "return",
      "stack_out": []
    },
    "174": {
      "subroutine": "test_cases.regression_tests.issue_118.Issue118.verify",
      "params": {
        "values#0": "bytes"
      },
      "block": "test_cases.regression_tests.issue_118.Issue118.verify",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "177": {
      "op": "b test_cases.regression_tests.issue_118.Issue118.verify_block@0"
    },
    "180": {
      "block": "test_cases.regression_tests.issue_118.Issue118.verify_block@0",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "182": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "183": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "184": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x00"
      ]
    },
    "187": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0x00",
        "0"
      ]
    },
    "188": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%1#0"
      ]
    },
    "190": {
      "op": "setbit",
      "defined_out": [],
      "stack_out": [
        "val1#0"
      ]
    },
    "191": {
      "op": "frame_dig -1",
      "defined_out": [
        "values#0 (copy)"
      ],
      "stack_out": [
        "val1#0",
        "values#0 (copy)"
      ]
    },
    "193": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val1#0",
        "values#0 (copy)",
        "0"
      ]
    },
    "194": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%3#0"
      ]
    },
    "195": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%3#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%3#0",
        "2"
      ]
    },
    "196": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%4#0"
      ]
    },
    "197": {
      "op": "bz test_cases.regression_tests.issue_118.Issue118.verify_after_if_else@2",
      "stack_out": [
        "val1#0"
      ]
    },
    "200": {
      "op": "b test_cases.regression_tests.issue_118.Issue118.verify_if_body@1"
    },
    "203": {
      "block": "test_cases.regression_tests.issue_118.Issue118.verify_if_body@1",
      "stack_in": [
        "val1#0"
      ],
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "\"\""
      ],
      "stack_out": [
        "val1#0",
        "\"\""
      ]
    },
    "204": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "val1#0",
        "aggregate%length%0#0"
      ]
    },
    "205": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "val1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "206": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "val1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "209": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "val1#0",
        "aggregate%length_uint16%0#0",
        "\"\""
      ]
    },
    "210": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%5#0"
      ]
    },
    "211": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%5#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%5#0",
        "0x"
      ]
    },
    "212": {
      "op": "frame_dig 0",
      "defined_out": [
        "0x",
        "tmp%5#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%5#0",
        "0x",
        "val1#0"
      ]
    },
    "214": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%5#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%5#0",
        "aggregate%head%0#0"
      ]
    },
    "215": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "aggregate%head%0#0",
        "tmp%5#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%5#0",
        "aggregate%head%0#0",
        "3"
      ]
    },
    "216": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%5#0",
        "aggregate%head%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "217": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%5#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%5#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "220": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%5#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%5#0",
        "aggregate%head%1#0"
      ]
    },
    "221": {
      "op": "uncover 1",
      "stack_out": [
        "val1#0",
        "aggregate%head%1#0",
        "tmp%5#0"
      ]
    },
    "223": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%6#0"
      ]
    },
    "224": {
      "op": "uncover 1"
    },
    "226": {
      "retsub": true,
      "op": "retsub"
    },
    "227": {
      "block": "test_cases.regression_tests.issue_118.Issue118.verify_after_if_else@2",
      "stack_in": [
        "val1#0"
      ],
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "\"\""
      ],
      "stack_out": [
        "val1#0",
        "\"\""
      ]
    },
    "228": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0"
      ],
      "stack_out": [
        "val1#0",
        "aggregate%length%1#0"
      ]
    },
    "229": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0"
      ],
      "stack_out": [
        "val1#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "230": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0"
      ],
      "stack_out": [
        "val1#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "233": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "val1#0",
        "aggregate%length_uint16%1#0",
        "\"\""
      ]
    },
    "234": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%7#0"
      ]
    },
    "235": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%7#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%7#0",
        "0x"
      ]
    },
    "236": {
      "op": "frame_dig 0",
      "defined_out": [
        "0x",
        "tmp%7#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%7#0",
        "0x",
        "val1#0"
      ]
    },
    "238": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "tmp%7#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%7#0",
        "aggregate%head%2#0"
      ]
    },
    "239": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "aggregate%head%2#0",
        "tmp%7#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%7#0",
        "aggregate%head%2#0",
        "3"
      ]
    },
    "240": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "aggregate%head%2#0",
        "tmp%7#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "241": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%7#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "244": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%3#0",
        "tmp%7#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%7#0",
        "aggregate%head%3#0"
      ]
    },
    "245": {
      "op": "uncover 1",
      "stack_out": [
        "val1#0",
        "aggregate%head%3#0",
        "tmp%7#0"
      ]
    },
    "247": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%8#0"
      ]
    },
    "248": {
      "op": "uncover 1"
    },
    "250": {
      "retsub": true,
      "op": "retsub"
    }
  }
}