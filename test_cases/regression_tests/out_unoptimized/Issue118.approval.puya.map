{
  "version": 3,
  "sources": [
    "../issue_118.py"
  ],
  "mappings": ";;;;;;;;;AAIA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;;AAEK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAFL;;;AAEK;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;;AAFL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AAEA;;;AAGiB;;AAAL;AAAA;AADG;;;AAAA;AAAA;;AAAA;AAGJ;;AAAA;AAAA;AAAiB;;AAAjB;AAAX;;;AACgC;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAP;AACgB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3"
    },
    "6": {
      "op": "bytecblock 0x"
    },
    "9": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "11": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "12": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "13": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "16": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "19": {
      "op": "pushbytes 0xbc66eb62 // method \"verify(uint256[])(bool,string)\"",
      "defined_out": [
        "Method(verify(uint256[])(bool,string))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(verify(uint256[])(bool,string))"
      ]
    },
    "25": {
      "op": "swap",
      "stack_out": [
        "Method(verify(uint256[])(bool,string))",
        "tmp%2#0"
      ]
    },
    "26": {
      "op": "match main_verify_route@3",
      "stack_out": []
    },
    "30": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "31": {
      "block": "main_after_inlined_test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__@11",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "32": {
      "block": "main_verify_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "34": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "35": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "36": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "37": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "39": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "40": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "41": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "42": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint256[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint256[])%0#0"
      ]
    },
    "45": {
      "callsub": "test_cases.regression_tests.issue_118.Issue118.verify",
      "op": "callsub verify",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "48": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x151f7c75"
      ]
    },
    "54": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%7#0"
      ]
    },
    "55": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "56": {
      "op": "log",
      "stack_out": []
    },
    "57": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "58": {
      "op": "b main_after_inlined_test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__@11"
    },
    "61": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "63": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "64": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%9#0"
      ]
    },
    "65": {
      "op": "match main___algopy_default_create@7",
      "stack_out": []
    },
    "69": {
      "block": "main_switch_case_next@9",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "72": {
      "block": "main___algopy_default_create@7",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "74": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "75": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "76": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "77": {
      "block": "main_after_inlined_test_cases.regression_tests.issue_118.Issue118.__algopy_default_create@13",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "78": {
      "op": "b main_after_inlined_test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__@11"
    },
    "81": {
      "subroutine": "test_cases.regression_tests.issue_118.Issue118.verify",
      "params": {
        "values#0": "bytes"
      },
      "block": "verify",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "84": {
      "block": "verify_block@0",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "86": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "87": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "88": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x00"
      ]
    },
    "91": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0x00",
        "0"
      ]
    },
    "92": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%1#0"
      ]
    },
    "94": {
      "op": "setbit",
      "defined_out": [
        "val1#0"
      ],
      "stack_out": [
        "val1#0"
      ]
    },
    "95": {
      "op": "frame_dig -1",
      "defined_out": [
        "val1#0",
        "values#0 (copy)"
      ],
      "stack_out": [
        "val1#0",
        "values#0 (copy)"
      ]
    },
    "97": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val1#0",
        "values#0 (copy)",
        "0"
      ]
    },
    "98": {
      "op": "extract_uint16",
      "defined_out": [
        "length%0#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "length%0#0"
      ]
    },
    "99": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "length%0#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "length%0#0",
        "2"
      ]
    },
    "101": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%2#0"
      ]
    },
    "102": {
      "op": "bz verify_after_if_else@2",
      "stack_out": [
        "val1#0"
      ]
    },
    "105": {
      "block": "verify_if_body@1",
      "stack_in": [
        "val1#0"
      ],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "val1#0",
        "0x"
      ]
    },
    "106": {
      "op": "len",
      "defined_out": [
        "length%1#0"
      ],
      "stack_out": [
        "val1#0",
        "length%1#0"
      ]
    },
    "107": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "val1#0",
        "as_bytes%0#0"
      ]
    },
    "108": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "val1#0",
        "length_uint16%0#0"
      ]
    },
    "111": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "val1#0",
        "length_uint16%0#0",
        "0x"
      ]
    },
    "112": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "val1#0",
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "113": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "val1#0",
        "as_Encoded(len+utf8[])%0#0",
        "0x"
      ]
    },
    "114": {
      "op": "uncover 2",
      "defined_out": [
        "0x",
        "as_Encoded(len+utf8[])%0#0",
        "val1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "0x",
        "val1#0"
      ]
    },
    "116": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "encoded%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "encoded%0#0"
      ]
    },
    "117": {
      "op": "swap",
      "stack_out": [
        "encoded%0#0",
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "118": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "0x"
      ]
    },
    "119": {
      "op": "swap",
      "stack_out": [
        "encoded%0#0",
        "0x",
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "120": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "encoded%0#0",
        "tail%0#0"
      ]
    },
    "121": {
      "op": "swap",
      "stack_out": [
        "tail%0#0",
        "encoded%0#0"
      ]
    },
    "122": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "encoded%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "tail%0#0",
        "encoded%0#0",
        "3"
      ]
    },
    "123": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "tail%0#0",
        "encoded%0#0",
        "as_bytes%1#0"
      ]
    },
    "124": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%0#0",
        "offset_as_uint16%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "tail%0#0",
        "encoded%0#0",
        "offset_as_uint16%0#0"
      ]
    },
    "127": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0",
        "tail%0#0"
      ],
      "stack_out": [
        "tail%0#0",
        "encoded%1#0"
      ]
    },
    "128": {
      "op": "swap",
      "stack_out": [
        "encoded%1#0",
        "tail%0#0"
      ]
    },
    "129": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0"
      ],
      "stack_out": [
        "encoded%2#0"
      ]
    },
    "130": {
      "retsub": true,
      "op": "retsub"
    },
    "131": {
      "block": "verify_after_if_else@2",
      "stack_in": [
        "val1#0"
      ],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "val1#0",
        "0x"
      ]
    },
    "132": {
      "op": "len",
      "defined_out": [
        "length%2#0"
      ],
      "stack_out": [
        "val1#0",
        "length%2#0"
      ]
    },
    "133": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0"
      ],
      "stack_out": [
        "val1#0",
        "as_bytes%2#0"
      ]
    },
    "134": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0"
      ],
      "stack_out": [
        "val1#0",
        "length_uint16%1#0"
      ]
    },
    "137": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "val1#0",
        "length_uint16%1#0",
        "0x"
      ]
    },
    "138": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0"
      ],
      "stack_out": [
        "val1#0",
        "as_Encoded(len+utf8[])%1#0"
      ]
    },
    "139": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "val1#0",
        "as_Encoded(len+utf8[])%1#0",
        "0x"
      ]
    },
    "140": {
      "op": "uncover 2",
      "defined_out": [
        "0x",
        "as_Encoded(len+utf8[])%1#0",
        "val1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "0x",
        "val1#0"
      ]
    },
    "142": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0",
        "encoded%3#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "encoded%3#0"
      ]
    },
    "143": {
      "op": "swap",
      "stack_out": [
        "encoded%3#0",
        "as_Encoded(len+utf8[])%1#0"
      ]
    },
    "144": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded%3#0",
        "as_Encoded(len+utf8[])%1#0",
        "0x"
      ]
    },
    "145": {
      "op": "swap",
      "stack_out": [
        "encoded%3#0",
        "0x",
        "as_Encoded(len+utf8[])%1#0"
      ]
    },
    "146": {
      "op": "concat",
      "defined_out": [
        "encoded%3#0",
        "tail%1#0"
      ],
      "stack_out": [
        "encoded%3#0",
        "tail%1#0"
      ]
    },
    "147": {
      "op": "swap",
      "stack_out": [
        "tail%1#0",
        "encoded%3#0"
      ]
    },
    "148": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "encoded%3#0",
        "tail%1#0"
      ],
      "stack_out": [
        "tail%1#0",
        "encoded%3#0",
        "3"
      ]
    },
    "149": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded%3#0",
        "tail%1#0"
      ],
      "stack_out": [
        "tail%1#0",
        "encoded%3#0",
        "as_bytes%3#0"
      ]
    },
    "150": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%3#0",
        "offset_as_uint16%1#0",
        "tail%1#0"
      ],
      "stack_out": [
        "tail%1#0",
        "encoded%3#0",
        "offset_as_uint16%1#0"
      ]
    },
    "153": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0",
        "tail%1#0"
      ],
      "stack_out": [
        "tail%1#0",
        "encoded%4#0"
      ]
    },
    "154": {
      "op": "swap",
      "stack_out": [
        "encoded%4#0",
        "tail%1#0"
      ]
    },
    "155": {
      "op": "concat",
      "defined_out": [
        "encoded%5#0"
      ],
      "stack_out": [
        "encoded%5#0"
      ]
    },
    "156": {
      "retsub": true,
      "op": "retsub"
    }
  }
}