main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@5
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "verify(byte[],byte[],byte[])(byte[],bool)" => block@3, * => block@4}
    block@3: // verify_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        test_cases.regression_tests.branch_to_proto.VRFVerifier.verify[routing]()
        goto block@4
    block@4: // switch_case_next_L4
        goto block@6
    block@5: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        goto block@8
    block@8: // L1
        goto block@9
    block@9: // after_inlined_test_cases.regression_tests.branch_to_proto.VRFVerifier.__algopy_default_create_L1
        exit 1u
    block@6: // after_if_else_L4
        exit 0u
    block@7: // after_inlined_test_cases.regression_tests.branch_to_proto.VRFVerifier.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let tmp%0#0: uint64 = (+ required_budget#0 10u)
        let required_budget_with_buffer#0: uint64 = tmp%0#0
        goto block@1
    block@1: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> required_budget_with_buffer#0 tmp%1#0)
        goto tmp%2#0 ? block@2 : block@6
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        switch fee_source#0 {0u => block@3, 1u => block@4, * => block@5}
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@5
    block@4: // switch_case_1_L30
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@5
    block@5: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@6: // after_while_L20
        return 

subroutine test_cases.regression_tests.branch_to_proto.VRFVerifier.verify[routing]() -> void:
    block@0: // L5
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%2#0 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%1#0
        let mul%1#0: uint64 = (* length%1#0 1u)
        let add%1#0: uint64 = (+ mul%1#0 2u)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = tmp%2#0
        let tmp%3#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%1#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 tmp%4#0 0u) // on error: invalid array length header
        let length%2#0: uint64 = aggregate%array_length%2#0
        let mul%2#0: uint64 = (* length%2#0 1u)
        let add%2#0: uint64 = (+ mul%2#0 2u)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 add%2#0)
        (assert eq%2#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = tmp%4#0
        let tmp%5#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%2#0)
        let (tmp%6#0: bytes, tmp%7#0: bool) = test_cases.regression_tests.branch_to_proto.VRFVerifier.verify(tmp%1#0, tmp%3#0, tmp%5#0)
        let aggregate%length%0#0: uint64 = (len tmp%6#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%6#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%7#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%encoded_bool%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%as_Encoded((len+uint8[]),bool1)%0#0: Encoded((len+uint8[]),bool1) = aggregate%concat%0#0
        let tmp%8#0: Encoded((len+uint8[]),bool1) = aggregate%as_Encoded((len+uint8[]),bool1)%0#0
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        exit 1u

subroutine test_cases.regression_tests.branch_to_proto.VRFVerifier.verify(message: bytes, proof: bytes, pk: bytes) -> <bytes, bool>:
    block@0: // L5
        _puya_lib.util.ensure_budget(10000u, 1u)
        let (tmp%0#0: bytes, tmp%1#0: bool) = ((vrf_verify VrfAlgorand) message#0 proof#0 pk#0)
        return tmp%0#0 tmp%1#0