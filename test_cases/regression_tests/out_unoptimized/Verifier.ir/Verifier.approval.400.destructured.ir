main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L12
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@5
    block@2: // abi_routing_L12
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "verify(byte[32][])byte[]" => block@3, * => block@4}
    block@3: // verify_route_L13
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        test_cases.regression_tests.jira_ak_752.Verifier.verify[routing]()
        goto block@4
    block@4: // switch_case_next_L12
        goto block@6
    block@5: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        goto block@8
    block@8: // L1
        goto block@9
    block@9: // after_inlined_test_cases.regression_tests.jira_ak_752.Verifier.__algopy_default_create_L1
        exit 1u
    block@6: // after_if_else_L12
        exit 0u
    block@7: // after_inlined_test_cases.regression_tests.jira_ak_752.Verifier.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.regression_tests.jira_ak_752.Verifier.verify[routing]() -> void:
    block@0: // L13
        let reinterpret_Encoded(len+uint8[32][])%0#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = test_cases.regression_tests.jira_ak_752.Verifier.verify(reinterpret_Encoded(len+uint8[32][])%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%0#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%0#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.regression_tests.jira_ak_752.Verifier.verify(proof: Encoded(len+uint8[32][])) -> bytes:
    block@0: // L13
        let aggregate%total_length%0#0: uint64 = (len proof#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 proof#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 8u 32u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 32u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint8[32]) = aggregate%encoded_element%0#0
        let x#0: bytes = array_item%0#0
        let aggregate%total_length%1#0: uint64 = (len proof#0)
        let aggregate%array_trimmed%1#0: bytes = (substring3 proof#0 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 6u 32u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 32u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint8[32]) = aggregate%encoded_element%1#0
        let aggregate%total_length%2#0: uint64 = (len proof#0)
        let aggregate%array_trimmed%2#0: bytes = (substring3 proof#0 2u aggregate%total_length%2#0)
        let aggregate%bytes_offset%2#0: uint64 = (* 7u 32u)
        let aggregate%encoded_element%2#0: bytes = (extract3 aggregate%array_trimmed%2#0 aggregate%bytes_offset%2#0 32u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint8[32]) = aggregate%encoded_element%2#0
        let tmp%0#0: bytes = (concat array_item%1#0 array_item%2#0)
        let y#0: bytes = tmp%0#0
        let aggregate%total_length%3#0: uint64 = (len proof#0)
        let aggregate%array_trimmed%3#0: bytes = (substring3 proof#0 2u aggregate%total_length%3#0)
        let aggregate%bytes_offset%3#0: uint64 = (* 7u 32u)
        let aggregate%encoded_element%3#0: bytes = (extract3 aggregate%array_trimmed%3#0 aggregate%bytes_offset%3#0 32u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint8[32]) = aggregate%encoded_element%3#0
        let aggregate%total_length%4#0: uint64 = (len proof#0)
        let aggregate%array_trimmed%4#0: bytes = (substring3 proof#0 2u aggregate%total_length%4#0)
        let aggregate%bytes_offset%4#0: uint64 = (* 8u 32u)
        let aggregate%encoded_element%4#0: bytes = (extract3 aggregate%array_trimmed%4#0 aggregate%bytes_offset%4#0 32u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint8[32]) = aggregate%encoded_element%4#0
        let tmp%1#0: bytes = (concat array_item%3#0 array_item%4#0)
        let z#0: bytes = tmp%1#0
        let tmp%2#0: bytes = (concat x#0 y#0)
        let tmp%3#0: bytes = (concat tmp%2#0 z#0)
        return tmp%3#0