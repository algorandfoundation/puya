main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L5
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@6
    block@2: // abi_routing_L5
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "verify(uint256[])(bool,string)" => block@3, * => block@4}
    block@3: // verify_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(len+uint256[])%0#0: Encoded(len+uint256[]) = (txna ApplicationArgs 1)
        let tmp%7#0: Encoded(bool1,(len+utf8[])) = test_cases.regression_tests.issue_118.Issue118.verify(reinterpret_Encoded(len+uint256[])%0#0)
        let tmp%8#0: bytes = (concat 0x151f7c75 tmp%7#0)
        (log tmp%8#0)
        let test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__%0#0
        goto block@11
    block@4: // switch_case_default_L5
        goto block@5
    block@5: // switch_case_next_L5
        goto block@10
    block@6: // bare_routing_L5
        let tmp%9#0: uint64 = (txn OnCompletion)
        switch tmp%9#0 {0u => block@7, * => block@8}
    block@7: // __algopy_default_create_L1
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        (assert tmp%11#0) // can only call when creating
        goto block@12
    block@12: // L1
        goto block@13
    block@13: // after_inlined_test_cases.regression_tests.issue_118.Issue118.__algopy_default_create_L1
        let test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__%0#0
        goto block@11
    block@8: // switch_case_default_L5
        goto block@9
    block@9: // switch_case_next_L5
        goto block@10
    block@10: // after_if_else_L5
        let test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__%0#0
        goto block@11
    block@11: // after_inlined_test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.regression_tests.issue_118.Issue118.verify(values: Encoded(len+uint256[])) -> Encoded(bool1,(len+utf8[])):
    block@0: // L7
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u tmp%1#0)
        let aggregate%as_Encoded(bool8)%0#1: Encoded(bool8) = aggregate%encoded_bool%0#1
        let tmp%2#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#1
        let val1#0: Encoded(bool8) = tmp%2#0
        let array_length%0#0: uint64 = (extract_uint16 values#0 0u)
        let tmp%3#0: bool = (!= array_length%0#0 2u)
        goto tmp%3#0 ? block@1 : block@2
    block@1: // if_body_L13
        let aggregate%length%0#1: uint64 = (len 0x)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let aggregate%encoded%0#1: bytes = (concat 0x val1#0)
        let aggregate%tail%0#1: bytes = (concat 0x encoded%0#0)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded%1#1: bytes = (concat aggregate%encoded%0#1 aggregate%offset_as_uint16%0#1)
        let aggregate%encoded%2#1: Encoded(bool1,(len+utf8[])) = (concat aggregate%encoded%1#1 aggregate%tail%0#1)
        let tmp%4#0: Encoded(bool1,(len+utf8[])) = aggregate%encoded%2#1
        return tmp%4#0
    block@2: // after_if_else_L12
        let aggregate%length%1#1: uint64 = (len 0x)
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 0x)
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let encoded%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let aggregate%encoded%3#1: bytes = (concat 0x val1#0)
        let aggregate%tail%1#1: bytes = (concat 0x encoded%1#0)
        let aggregate%as_bytes%3#1: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%4#1: bytes = (concat aggregate%encoded%3#1 aggregate%offset_as_uint16%1#1)
        let aggregate%encoded%5#1: Encoded(bool1,(len+utf8[])) = (concat aggregate%encoded%4#1 aggregate%tail%1#1)
        let tmp%5#0: Encoded(bool1,(len+utf8[])) = aggregate%encoded%5#1
        return tmp%5#0