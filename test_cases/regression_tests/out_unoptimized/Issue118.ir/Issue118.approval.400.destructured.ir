main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L5
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@5
    block@2: // abi_routing_L5
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "verify(uint256[])(bool,string)" => block@3, * => block@4}
    block@3: // verify_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        test_cases.regression_tests.issue_118.Issue118.verify[routing]()
        goto block@4
    block@4: // switch_case_next_L5
        goto block@6
    block@5: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        goto block@8
    block@8: // L1
        goto block@9
    block@9: // after_inlined_test_cases.regression_tests.issue_118.Issue118.__algopy_default_create_L1
        exit 1u
    block@6: // after_if_else_L5
        exit 0u
    block@7: // after_inlined_test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.regression_tests.issue_118.Issue118.verify[routing]() -> void:
    block@0: // L7
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 32u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+uint256[])
        let as_Encoded(len+uint256[])%0#0: Encoded(len+uint256[]) = tmp%0#0
        let tmp%1#0: Encoded(bool1,(len+utf8[])) = test_cases.regression_tests.issue_118.Issue118.verify(as_Encoded(len+uint256[])%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.regression_tests.issue_118.Issue118.verify(values: Encoded(len+uint256[])) -> Encoded(bool1,(len+utf8[])):
    block@0: // L7
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%1#0)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%2#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let val1#0: Encoded(bool8) = tmp%2#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 values#0 0u)
        let tmp%3#0: uint64 = aggregate%array_length%0#0
        let tmp%4#0: bool = (!= tmp%3#0 2u)
        goto tmp%4#0 ? block@1 : block@2
    block@1: // if_body_L13
        let aggregate%length%0#0: uint64 = (len "")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%5#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let aggregate%head%0#0: bytes = (concat 0x val1#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 tmp%5#0)
        let aggregate%as_Encoded(bool1,(len+utf8[]))%0#0: Encoded(bool1,(len+utf8[])) = aggregate%concat%0#0
        let tmp%6#0: Encoded(bool1,(len+utf8[])) = aggregate%as_Encoded(bool1,(len+utf8[]))%0#0
        return tmp%6#0
    block@2: // after_if_else_L12
        let aggregate%length%1#0: uint64 = (len "")
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%7#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let aggregate%head%2#0: bytes = (concat 0x val1#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%3#0 tmp%7#0)
        let aggregate%as_Encoded(bool1,(len+utf8[]))%1#0: Encoded(bool1,(len+utf8[])) = aggregate%concat%1#0
        let tmp%8#0: Encoded(bool1,(len+utf8[])) = aggregate%as_Encoded(bool1,(len+utf8[]))%1#0
        return tmp%8#0