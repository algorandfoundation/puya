main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L5
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@6
    block@2: // abi_routing_L5
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "verify(uint256[])(bool,string)" => block@3, * => block@4}
    block@3: // verify_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: bytes = (txna ApplicationArgs 1)
        let tmp%8#0: bytes = test_cases.regression_tests.issue_118.Issue118.verify(tmp%7#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        let test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__%0#0
        goto block@11
    block@4: // switch_case_default_L5
        goto block@5
    block@5: // switch_case_next_L5
        goto block@10
    block@6: // bare_routing_L5
        let tmp%10#0: uint64 = (txn OnCompletion)
        switch tmp%10#0 {0u => block@7, * => block@8}
    block@7: // __algopy_default_create_L1
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (== tmp%11#0 0u)
        (assert tmp%12#0) // can only call when creating
        goto block@12
    block@12: // L1
        goto block@13
    block@13: // after_inlined_test_cases.regression_tests.issue_118.Issue118.__algopy_default_create_L1
        let test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__%0#0
        goto block@11
    block@8: // switch_case_default_L5
        goto block@9
    block@9: // switch_case_next_L5
        goto block@10
    block@10: // after_if_else_L5
        let test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__%0#0
        goto block@11
    block@11: // after_inlined_test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.regression_tests.issue_118.Issue118.verify(values: bytes) -> bytes:
    block@0: // L7
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let to_encode%0#0: bool = (!= tmp%0#0 0u)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u to_encode%0#0)
        let val1#0: bytes[1] = encoded_bool%0#0
        let tmp%1#0: uint64 = (extract_uint16 values#0 0u)
        let tmp%2#0: bool = (!= tmp%1#0 2u)
        goto tmp%2#0 ? block@1 : block@2
    block@1: // if_body_L13
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val1#0)
        let as_bytes%0#0: bytes[8] = (itob 3u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 offset_as_uint16%0#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 0x0000)
        return encoded_tuple_buffer%3#0
    block@2: // after_if_else_L12
        let encoded_tuple_buffer%5#0: bytes = (concat 0x val1#0)
        let as_bytes%1#0: bytes[8] = (itob 3u)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 offset_as_uint16%1#0)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 0x0000)
        return encoded_tuple_buffer%7#0