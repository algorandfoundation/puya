{
  "version": 3,
  "sources": [
    "../biguint_opt.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;AAAA;AAaK;;;;;;AAZA;;;;;;AADL;;;AAAA;;AAAA;;;;;;;;;AAAA;;AAAA;AAAA;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AACK;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAYA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAZL;;;;;;AAEkC;AACvB;;AAAA;AAAA;AAAX;;;AAAA;;;AADkC;AAMD;AAAA;AAAA;;AAAA;AAAT;AAAZ;;;;;AAEJ;;AAAA;;AAAA;;;;AAMqB;AAAmB;;AAAnB;AAAT;AAEZ",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x151f7c75 0x010000000000000000"
    },
    "22": {
      "op": "b main_block@0"
    },
    "25": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "28": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "30": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "31": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "32": {
      "op": "bz main_bare_routing@16",
      "stack_out": []
    },
    "35": {
      "op": "b main_abi_routing@2"
    },
    "38": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "41": {
      "op": "match",
      "stack_out": []
    },
    "43": {
      "op": "b main_route_NoOp@3"
    },
    "46": {
      "block": "main_route_NoOp@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "48": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "49": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "50": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "51": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "54": {
      "op": "match",
      "stack_out": []
    },
    "56": {
      "op": "b main_switch_case_default@4"
    },
    "59": {
      "block": "main_switch_case_default@4",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "61": {
      "op": "bz main_create_NoOp@10",
      "stack_out": []
    },
    "64": {
      "op": "b main_call_NoOp@5"
    },
    "67": {
      "block": "main_call_NoOp@5",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "70": {
      "op": "pushbytes 0x58db7ce9 // method \"get_abs_bound1(uint64)uint64\"",
      "defined_out": [
        "Method(get_abs_bound1(uint64)uint64)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(get_abs_bound1(uint64)uint64)"
      ]
    },
    "76": {
      "op": "pushbytes 0xc95c01ca // method \"get_abs_bound2()uint64\"",
      "defined_out": [
        "Method(get_abs_bound1(uint64)uint64)",
        "Method(get_abs_bound2()uint64)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(get_abs_bound1(uint64)uint64)",
        "Method(get_abs_bound2()uint64)"
      ]
    },
    "82": {
      "op": "uncover 2",
      "stack_out": [
        "Method(get_abs_bound1(uint64)uint64)",
        "Method(get_abs_bound2()uint64)",
        "tmp%7#0"
      ]
    },
    "84": {
      "op": "match main_get_abs_bound1_route@6 main_get_abs_bound2_route@7",
      "stack_out": []
    },
    "90": {
      "op": "b main_switch_case_default@8"
    },
    "93": {
      "block": "main_switch_case_default@8",
      "stack_in": [],
      "op": "b main_switch_case_next@9"
    },
    "96": {
      "block": "main_switch_case_next@9",
      "stack_in": [],
      "op": "b main_after_if_else@13"
    },
    "99": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "b main_switch_case_next@14"
    },
    "102": {
      "block": "main_switch_case_next@14",
      "stack_in": [],
      "op": "b main_switch_case_next@15"
    },
    "105": {
      "block": "main_switch_case_next@15",
      "stack_in": [],
      "op": "b main_after_if_else@20"
    },
    "108": {
      "block": "main_after_if_else@20",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "109": {
      "block": "main_get_abs_bound2_route@7",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2[routing]",
      "op": "callsub get_abs_bound2"
    },
    "112": {
      "op": "b main_switch_case_next@9"
    },
    "115": {
      "block": "main_get_abs_bound1_route@6",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1[routing]",
      "op": "callsub get_abs_bound1"
    },
    "118": {
      "op": "b main_switch_case_next@9"
    },
    "121": {
      "block": "main_create_NoOp@10",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "124": {
      "op": "match",
      "stack_out": []
    },
    "126": {
      "op": "b main_switch_case_default@11"
    },
    "129": {
      "block": "main_switch_case_default@11",
      "stack_in": [],
      "op": "b main_switch_case_next@12"
    },
    "132": {
      "block": "main_switch_case_next@12",
      "stack_in": [],
      "op": "b main_after_if_else@13"
    },
    "135": {
      "block": "main_bare_routing@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "137": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "138": {
      "op": "uncover 1",
      "stack_out": [
        "0",
        "tmp%9#0"
      ]
    },
    "140": {
      "op": "match main___algopy_default_create@17",
      "stack_out": []
    },
    "144": {
      "op": "b main_switch_case_default@18"
    },
    "147": {
      "block": "main_switch_case_default@18",
      "stack_in": [],
      "op": "b main_switch_case_next@19"
    },
    "150": {
      "block": "main_switch_case_next@19",
      "stack_in": [],
      "op": "b main_after_if_else@20"
    },
    "153": {
      "block": "main___algopy_default_create@17",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "155": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "156": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "157": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "158": {
      "op": "b main_block@22"
    },
    "161": {
      "block": "main_block@22",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__algopy_default_create@23"
    },
    "164": {
      "block": "main_after_inlined_test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__algopy_default_create@23",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "165": {
      "op": "return",
      "stack_out": []
    },
    "166": {
      "subroutine": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1[routing]",
      "params": {},
      "block": "get_abs_bound1",
      "stack_in": [],
      "op": "b get_abs_bound1_block@0"
    },
    "169": {
      "block": "get_abs_bound1_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "172": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "173": {
      "callsub": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1",
      "op": "callsub test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "176": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "177": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "178": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "180": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "181": {
      "op": "log",
      "stack_out": []
    },
    "182": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "183": {
      "op": "return",
      "stack_out": []
    },
    "184": {
      "subroutine": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2[routing]",
      "params": {},
      "block": "get_abs_bound2",
      "stack_in": [],
      "op": "b get_abs_bound2_block@0"
    },
    "187": {
      "block": "get_abs_bound2_block@0",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2",
      "op": "callsub test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "190": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "191": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "192": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "194": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "195": {
      "op": "log",
      "stack_out": []
    },
    "196": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "197": {
      "op": "return",
      "stack_out": []
    },
    "198": {
      "subroutine": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1",
      "params": {
        "upper_bound#0": "uint64"
      },
      "block": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "201": {
      "op": "b test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_block@0"
    },
    "204": {
      "block": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [],
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "205": {
      "op": "frame_dig -1",
      "defined_out": [
        "upper_bound#0 (copy)"
      ],
      "stack_out": [
        "abs_bound#0",
        "upper_bound#0 (copy)"
      ]
    },
    "207": {
      "op": "intc_0 // 0",
      "stack_out": [
        "abs_bound#0",
        "upper_bound#0 (copy)",
        "0"
      ]
    },
    "208": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "tmp%0#0"
      ]
    },
    "209": {
      "op": "bz test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_after_if_else@2",
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "212": {
      "op": "b test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_if_body@1"
    },
    "215": {
      "block": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_if_body@1",
      "stack_in": [
        "abs_bound#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "abs_bound#0",
        "0"
      ]
    },
    "216": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "tmp%1#0"
      ]
    },
    "217": {
      "op": "bytec_1 // 0x010000000000000000",
      "defined_out": [
        "0x010000000000000000",
        "tmp%1#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "tmp%1#0",
        "0x010000000000000000"
      ]
    },
    "218": {
      "op": "uncover 1",
      "stack_out": [
        "abs_bound#0",
        "0x010000000000000000",
        "tmp%1#0"
      ]
    },
    "220": {
      "op": "b-",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "tmp%2#0"
      ]
    },
    "221": {
      "op": "btoi",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "tmp%3#0"
      ]
    },
    "222": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "224": {
      "op": "b test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_after_if_else@2"
    },
    "227": {
      "block": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_after_if_else@2",
      "stack_in": [
        "abs_bound#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "abs_bound#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "abs_bound#0"
      ]
    },
    "229": {
      "op": "uncover 1"
    },
    "231": {
      "retsub": true,
      "op": "retsub"
    },
    "232": {
      "subroutine": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2",
      "params": {},
      "block": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2",
      "stack_in": [],
      "op": "b test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2_block@0"
    },
    "235": {
      "block": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x010000000000000000",
      "defined_out": [
        "0x010000000000000000"
      ],
      "stack_out": [
        "0x010000000000000000"
      ]
    },
    "236": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "0x010000000000000000"
      ],
      "stack_out": [
        "0x010000000000000000",
        "0x"
      ]
    },
    "238": {
      "op": "b-",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "239": {
      "op": "btoi",
      "defined_out": [
        "abs_bound#0"
      ],
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "240": {
      "retsub": true,
      "op": "retsub"
    }
  }
}