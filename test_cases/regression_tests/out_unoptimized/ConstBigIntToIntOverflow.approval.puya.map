{
  "version": 3,
  "sources": [
    "../biguint_opt.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;;;;;;;;AAAA;AAaK;;;;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAYA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAZL;;;;;;AAEkC;AACvB;;AAAA;AAAA;AAAX;;;AAAA;;;AADkC;AAMD;AAAA;AAAA;;AAAA;AAAT;AAAZ;;;;;AAEJ;;AAAA;;AAAA;;;;AAMqB;AAAmB;;AAAnB;AAAT;AAEZ",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x151f7c75 0x010000000000000000"
    },
    "22": {
      "op": "b main_block@0"
    },
    "25": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "28": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "30": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "31": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "32": {
      "op": "bz main___algopy_default_create@9",
      "stack_out": []
    },
    "35": {
      "op": "b main_abi_routing@2"
    },
    "38": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "40": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "NoOp"
      ]
    },
    "41": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "42": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "43": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "45": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "46": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "47": {
      "op": "bz main_create_NoOp@7",
      "stack_out": []
    },
    "50": {
      "op": "b main_call_NoOp@3"
    },
    "53": {
      "block": "main_call_NoOp@3",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "56": {
      "op": "pushbytes 0x58db7ce9 // method \"get_abs_bound1(uint64)uint64\"",
      "defined_out": [
        "Method(get_abs_bound1(uint64)uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(get_abs_bound1(uint64)uint64)"
      ]
    },
    "62": {
      "op": "pushbytes 0xc95c01ca // method \"get_abs_bound2()uint64\"",
      "defined_out": [
        "Method(get_abs_bound1(uint64)uint64)",
        "Method(get_abs_bound2()uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(get_abs_bound1(uint64)uint64)",
        "Method(get_abs_bound2()uint64)"
      ]
    },
    "68": {
      "op": "uncover 2",
      "stack_out": [
        "Method(get_abs_bound1(uint64)uint64)",
        "Method(get_abs_bound2()uint64)",
        "tmp%6#0"
      ]
    },
    "70": {
      "op": "match main_get_abs_bound1_route@4 main_get_abs_bound2_route@5",
      "stack_out": []
    },
    "76": {
      "op": "b main_switch_case_next@6"
    },
    "79": {
      "block": "main_switch_case_next@6",
      "stack_in": [],
      "op": "b main_after_if_else@8"
    },
    "82": {
      "block": "main_after_if_else@8",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "85": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "86": {
      "block": "main_get_abs_bound2_route@5",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2[routing]",
      "op": "callsub get_abs_bound2"
    },
    "89": {
      "op": "b main_switch_case_next@6"
    },
    "92": {
      "block": "main_get_abs_bound1_route@4",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1[routing]",
      "op": "callsub get_abs_bound1"
    },
    "95": {
      "op": "b main_switch_case_next@6"
    },
    "98": {
      "block": "main_create_NoOp@7",
      "stack_in": [],
      "op": "b main_after_if_else@8"
    },
    "101": {
      "block": "main___algopy_default_create@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "103": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "104": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "105": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "107": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0"
      ]
    },
    "108": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "109": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "110": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "111": {
      "op": "b main_block@12"
    },
    "114": {
      "block": "main_block@12",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__algopy_default_create@13"
    },
    "117": {
      "block": "main_after_inlined_test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__algopy_default_create@13",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "118": {
      "op": "return",
      "stack_out": []
    },
    "119": {
      "subroutine": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1[routing]",
      "params": {},
      "block": "get_abs_bound1",
      "stack_in": [],
      "op": "b get_abs_bound1_block@0"
    },
    "122": {
      "block": "get_abs_bound1_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "125": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "126": {
      "callsub": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1",
      "op": "callsub test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "129": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "130": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "131": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "133": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "134": {
      "op": "log",
      "stack_out": []
    },
    "135": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "136": {
      "op": "return",
      "stack_out": []
    },
    "137": {
      "subroutine": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2[routing]",
      "params": {},
      "block": "get_abs_bound2",
      "stack_in": [],
      "op": "b get_abs_bound2_block@0"
    },
    "140": {
      "block": "get_abs_bound2_block@0",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2",
      "op": "callsub test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "143": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "144": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "145": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "147": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "148": {
      "op": "log",
      "stack_out": []
    },
    "149": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "150": {
      "op": "return",
      "stack_out": []
    },
    "151": {
      "subroutine": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1",
      "params": {
        "upper_bound#0": "uint64"
      },
      "block": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "154": {
      "op": "b test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_block@0"
    },
    "157": {
      "block": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [],
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "158": {
      "op": "frame_dig -1",
      "defined_out": [
        "upper_bound#0 (copy)"
      ],
      "stack_out": [
        "abs_bound#0",
        "upper_bound#0 (copy)"
      ]
    },
    "160": {
      "op": "intc_0 // 0",
      "stack_out": [
        "abs_bound#0",
        "upper_bound#0 (copy)",
        "0"
      ]
    },
    "161": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "tmp%0#0"
      ]
    },
    "162": {
      "op": "bz test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_after_if_else@2",
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "165": {
      "op": "b test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_if_body@1"
    },
    "168": {
      "block": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_if_body@1",
      "stack_in": [
        "abs_bound#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "abs_bound#0",
        "0"
      ]
    },
    "169": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "tmp%1#0"
      ]
    },
    "170": {
      "op": "bytec_1 // 0x010000000000000000",
      "defined_out": [
        "0x010000000000000000",
        "tmp%1#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "tmp%1#0",
        "0x010000000000000000"
      ]
    },
    "171": {
      "op": "uncover 1",
      "stack_out": [
        "abs_bound#0",
        "0x010000000000000000",
        "tmp%1#0"
      ]
    },
    "173": {
      "op": "b-",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "tmp%2#0"
      ]
    },
    "174": {
      "op": "btoi",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "tmp%3#0"
      ]
    },
    "175": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "177": {
      "op": "b test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_after_if_else@2"
    },
    "180": {
      "block": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_after_if_else@2",
      "stack_in": [
        "abs_bound#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "abs_bound#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "abs_bound#0"
      ]
    },
    "182": {
      "op": "uncover 1"
    },
    "184": {
      "retsub": true,
      "op": "retsub"
    },
    "185": {
      "subroutine": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2",
      "params": {},
      "block": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2",
      "stack_in": [],
      "op": "b test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2_block@0"
    },
    "188": {
      "block": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x010000000000000000",
      "defined_out": [
        "0x010000000000000000"
      ],
      "stack_out": [
        "0x010000000000000000"
      ]
    },
    "189": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "0x010000000000000000"
      ],
      "stack_out": [
        "0x010000000000000000",
        "0x"
      ]
    },
    "191": {
      "op": "b-",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "192": {
      "op": "btoi",
      "defined_out": [
        "abs_bound#0"
      ],
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "193": {
      "retsub": true,
      "op": "retsub"
    }
  }
}