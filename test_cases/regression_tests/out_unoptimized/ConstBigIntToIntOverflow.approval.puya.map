{
  "version": 3,
  "sources": [
    "../biguint_opt.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;AAAA;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;AAAA;;;;;;;;;AACK;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAYA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAZL;;;;;;AAEkC;AACvB;;AAAA;AAAA;AAAX;;;AAAA;;;AADkC;AAMD;AAAA;AAAA;;AAAA;AAAT;AAAZ;;;;;AAEJ;;AAAA;;AAAA;;;;AAMqB;AAAmB;;AAAnB;AAAT;AAEZ",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock 0x151f7c75 0x010000000000000000"
    },
    "22": {
      "op": "b block@0"
    },
    "25": {
      "block": "block@0",
      "stack_in": [],
      "op": "b block@1"
    },
    "28": {
      "block": "block@1",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "30": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "31": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "33": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "34": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "35": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "36": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "37": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%4#0",
        "0",
        "1"
      ]
    },
    "38": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "0",
        "1",
        "2",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2"
      ]
    },
    "40": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3"
      ]
    },
    "42": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "44": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5"
      ]
    },
    "46": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ]
    },
    "48": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7"
      ]
    },
    "50": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    },
    "52": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "54": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "0",
        "1",
        "10",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ]
    },
    "56": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "0",
        "1",
        "10",
        "11",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11"
      ]
    },
    "58": {
      "op": "uncover 12",
      "stack_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "tmp%4#0"
      ]
    },
    "60": {
      "op": "match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication",
      "stack_out": []
    },
    "86": {
      "op": "b *NOT_IMPLEMENTED"
    },
    "89": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "90": {
      "block": "create_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "93": {
      "block": "call_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "96": {
      "block": "create_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "99": {
      "block": "call_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "102": {
      "block": "create_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "105": {
      "block": "call_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "108": {
      "block": "create_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "111": {
      "block": "call_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "114": {
      "block": "create_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "117": {
      "block": "call_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "120": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "122": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "123": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "124": {
      "op": "bz else_body@9",
      "stack_out": []
    },
    "127": {
      "op": "b __algopy_default_create@8"
    },
    "130": {
      "block": "__algopy_default_create@8",
      "stack_in": [],
      "op": "b block@22"
    },
    "133": {
      "block": "block@22",
      "stack_in": [],
      "op": "b after_inlined_test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__algopy_default_create@23"
    },
    "136": {
      "block": "after_inlined_test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__algopy_default_create@23",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "137": {
      "op": "return",
      "stack_out": []
    },
    "138": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "block": "else_body@9",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for create NoOp"
    },
    "139": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "142": {
      "op": "pushbytes 0x58db7ce9 // method \"get_abs_bound1(uint64)uint64\"",
      "defined_out": [
        "Method(get_abs_bound1(uint64)uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(get_abs_bound1(uint64)uint64)"
      ]
    },
    "148": {
      "op": "pushbytes 0xc95c01ca // method \"get_abs_bound2()uint64\"",
      "defined_out": [
        "Method(get_abs_bound1(uint64)uint64)",
        "Method(get_abs_bound2()uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(get_abs_bound1(uint64)uint64)",
        "Method(get_abs_bound2()uint64)"
      ]
    },
    "154": {
      "op": "uncover 2",
      "stack_out": [
        "Method(get_abs_bound1(uint64)uint64)",
        "Method(get_abs_bound2()uint64)",
        "tmp%5#0"
      ]
    },
    "156": {
      "op": "match get_abs_bound1_route@3 get_abs_bound2_route@4",
      "stack_out": []
    },
    "162": {
      "op": "b switch_case_default@5"
    },
    "165": {
      "block": "switch_case_default@5",
      "stack_in": [],
      "op": "b switch_case_next@6"
    },
    "168": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "block": "switch_case_next@6",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "169": {
      "block": "get_abs_bound2_route@4",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2[routing]",
      "op": "callsub get_abs_bound2"
    },
    "172": {
      "op": "b switch_case_next@6"
    },
    "175": {
      "block": "get_abs_bound1_route@3",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1[routing]",
      "op": "callsub get_abs_bound1"
    },
    "178": {
      "op": "b switch_case_next@6"
    },
    "181": {
      "subroutine": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1[routing]",
      "params": {},
      "block": "get_abs_bound1",
      "stack_in": [],
      "op": "b get_abs_bound1_block@0"
    },
    "184": {
      "block": "get_abs_bound1_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "187": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "188": {
      "callsub": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1",
      "op": "callsub test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "191": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "192": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "193": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "195": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "196": {
      "op": "log",
      "stack_out": []
    },
    "197": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "198": {
      "op": "return",
      "stack_out": []
    },
    "199": {
      "subroutine": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2[routing]",
      "params": {},
      "block": "get_abs_bound2",
      "stack_in": [],
      "op": "b get_abs_bound2_block@0"
    },
    "202": {
      "block": "get_abs_bound2_block@0",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2",
      "op": "callsub test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "205": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "206": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "207": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "209": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "210": {
      "op": "log",
      "stack_out": []
    },
    "211": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "212": {
      "op": "return",
      "stack_out": []
    },
    "213": {
      "subroutine": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1",
      "params": {
        "upper_bound#0": "uint64"
      },
      "block": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "216": {
      "op": "b test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_block@0"
    },
    "219": {
      "block": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_block@0",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [],
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "220": {
      "op": "frame_dig -1",
      "defined_out": [
        "upper_bound#0 (copy)"
      ],
      "stack_out": [
        "abs_bound#0",
        "upper_bound#0 (copy)"
      ]
    },
    "222": {
      "op": "intc_1 // 0",
      "stack_out": [
        "abs_bound#0",
        "upper_bound#0 (copy)",
        "0"
      ]
    },
    "223": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "tmp%0#0"
      ]
    },
    "224": {
      "op": "bz test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_after_if_else@2",
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "227": {
      "op": "b test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_if_body@1"
    },
    "230": {
      "block": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_if_body@1",
      "stack_in": [
        "abs_bound#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "abs_bound#0",
        "0"
      ]
    },
    "231": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "tmp%1#0"
      ]
    },
    "232": {
      "op": "bytec_1 // 0x010000000000000000",
      "defined_out": [
        "0x010000000000000000",
        "tmp%1#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "tmp%1#0",
        "0x010000000000000000"
      ]
    },
    "233": {
      "op": "uncover 1",
      "stack_out": [
        "abs_bound#0",
        "0x010000000000000000",
        "tmp%1#0"
      ]
    },
    "235": {
      "op": "b-",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "tmp%2#0"
      ]
    },
    "236": {
      "op": "btoi",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "tmp%3#0"
      ]
    },
    "237": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "239": {
      "op": "b test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_after_if_else@2"
    },
    "242": {
      "block": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_after_if_else@2",
      "stack_in": [
        "abs_bound#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "abs_bound#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "abs_bound#0"
      ]
    },
    "244": {
      "op": "uncover 1"
    },
    "246": {
      "retsub": true,
      "op": "retsub"
    },
    "247": {
      "subroutine": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2",
      "params": {},
      "block": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2",
      "stack_in": [],
      "op": "b test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2_block@0"
    },
    "250": {
      "block": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x010000000000000000",
      "defined_out": [
        "0x010000000000000000"
      ],
      "stack_out": [
        "0x010000000000000000"
      ]
    },
    "251": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "0x010000000000000000"
      ],
      "stack_out": [
        "0x010000000000000000",
        "0x"
      ]
    },
    "253": {
      "op": "b-",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "254": {
      "op": "btoi",
      "defined_out": [
        "abs_bound#0"
      ],
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "255": {
      "retsub": true,
      "op": "retsub"
    }
  }
}