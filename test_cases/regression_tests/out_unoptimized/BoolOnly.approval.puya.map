{
  "version": 3,
  "sources": [
    "../bool_only.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;AAAA;;;;;;;;;AAAA;AASK;;;;;;AAJA;;;;;;AAJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AARA;;;;;;AAEuC;;AAAL;AAAA;AAAxB;;AAAqB;AAArB;;AAAA;AAAP;AAEH;;;;;;AAEkC;;AAAmB;AAAnB;AAAxB;;AAAqB;AAArB;;AAAA;AAAP;;;;AAIA;AAC4B;;AAA5B;;AACmD;;AAAL;AAAA;AAA9C;;AACA;AAEA;AACsB;;;AADtB;;;;AAAA;;;;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x151f7c75"
    },
    "12": {
      "op": "b main_block@0"
    },
    "15": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "18": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "20": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "21": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "22": {
      "op": "bz main___algopy_default_create@10",
      "stack_out": []
    },
    "25": {
      "op": "b main_abi_routing@2"
    },
    "28": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "30": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "NoOp"
      ]
    },
    "31": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "32": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "33": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "35": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "36": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "37": {
      "op": "bz main_create_NoOp@8",
      "stack_out": []
    },
    "40": {
      "op": "b main_call_NoOp@3"
    },
    "43": {
      "block": "main_call_NoOp@3",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "46": {
      "op": "pushbytes 0xa85bff00 // method \"set_0_convert(byte[])byte[]\"",
      "defined_out": [
        "Method(set_0_convert(byte[])byte[])",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(set_0_convert(byte[])byte[])"
      ]
    },
    "52": {
      "op": "pushbytes 0xc4af225c // method \"set_0_compare(byte[])byte[]\"",
      "defined_out": [
        "Method(set_0_compare(byte[])byte[])",
        "Method(set_0_convert(byte[])byte[])",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(set_0_convert(byte[])byte[])",
        "Method(set_0_compare(byte[])byte[])"
      ]
    },
    "58": {
      "op": "pushbytes 0x83589f2d // method \"bool_only_properties()void\"",
      "defined_out": [
        "Method(bool_only_properties()void)",
        "Method(set_0_compare(byte[])byte[])",
        "Method(set_0_convert(byte[])byte[])",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(set_0_convert(byte[])byte[])",
        "Method(set_0_compare(byte[])byte[])",
        "Method(bool_only_properties()void)"
      ]
    },
    "64": {
      "op": "uncover 3",
      "stack_out": [
        "Method(set_0_convert(byte[])byte[])",
        "Method(set_0_compare(byte[])byte[])",
        "Method(bool_only_properties()void)",
        "tmp%6#0"
      ]
    },
    "66": {
      "op": "match main_set_0_convert_route@4 main_set_0_compare_route@5 main_bool_only_properties_route@6",
      "stack_out": []
    },
    "74": {
      "op": "b main_switch_case_next@7"
    },
    "77": {
      "block": "main_switch_case_next@7",
      "stack_in": [],
      "op": "b main_after_if_else@9"
    },
    "80": {
      "block": "main_after_if_else@9",
      "stack_in": [],
      "op": "b main_after_if_else@11"
    },
    "83": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "84": {
      "block": "main_bool_only_properties_route@6",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties[routing]",
      "op": "callsub bool_only_properties"
    },
    "87": {
      "op": "b main_switch_case_next@7"
    },
    "90": {
      "block": "main_set_0_compare_route@5",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare[routing]",
      "op": "callsub set_0_compare"
    },
    "93": {
      "op": "b main_switch_case_next@7"
    },
    "96": {
      "block": "main_set_0_convert_route@4",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert[routing]",
      "op": "callsub set_0_convert"
    },
    "99": {
      "op": "b main_switch_case_next@7"
    },
    "102": {
      "block": "main_create_NoOp@8",
      "stack_in": [],
      "op": "b main_after_if_else@9"
    },
    "105": {
      "block": "main___algopy_default_create@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "107": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "108": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "109": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "111": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0"
      ]
    },
    "112": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "113": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "114": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "115": {
      "op": "b main_block@13"
    },
    "118": {
      "block": "main_block@13",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__algopy_default_create@14"
    },
    "121": {
      "block": "main_after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__algopy_default_create@14",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "122": {
      "op": "return",
      "stack_out": []
    },
    "123": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert[routing]",
      "params": {},
      "block": "set_0_convert",
      "stack_in": [],
      "op": "b set_0_convert_block@0"
    },
    "126": {
      "block": "set_0_convert_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "129": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "132": {
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert",
      "op": "callsub test_cases.regression_tests.bool_only.BoolOnly.set_0_convert",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "135": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "136": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length%0#0"
      ]
    },
    "137": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "138": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "141": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ]
    },
    "143": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "144": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "145": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "147": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "148": {
      "op": "log",
      "stack_out": []
    },
    "149": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "150": {
      "op": "return",
      "stack_out": []
    },
    "151": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare[routing]",
      "params": {},
      "block": "set_0_compare",
      "stack_in": [],
      "op": "b set_0_compare_block@0"
    },
    "154": {
      "block": "set_0_compare_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "157": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "160": {
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare",
      "op": "callsub test_cases.regression_tests.bool_only.BoolOnly.set_0_compare",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "163": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "164": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length%0#0"
      ]
    },
    "165": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "166": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "169": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ]
    },
    "171": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "172": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "173": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "175": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "176": {
      "op": "log",
      "stack_out": []
    },
    "177": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "178": {
      "op": "return",
      "stack_out": []
    },
    "179": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties[routing]",
      "params": {},
      "block": "bool_only_properties",
      "stack_in": [],
      "op": "b bool_only_properties_block@0"
    },
    "182": {
      "block": "bool_only_properties_block@0",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties",
      "op": "callsub test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties"
    },
    "185": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "186": {
      "op": "return",
      "stack_out": []
    },
    "187": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert",
      "params": {
        "inp#0": "bytes"
      },
      "block": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "190": {
      "op": "b test_cases.regression_tests.bool_only.BoolOnly.set_0_convert_block@0"
    },
    "193": {
      "block": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert_block@0",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "195": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "196": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "197": {
      "op": "frame_dig -1",
      "defined_out": [
        "inp#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)"
      ]
    },
    "199": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)",
        "0"
      ]
    },
    "200": {
      "op": "uncover 2",
      "stack_out": [
        "inp#0 (copy)",
        "0",
        "tmp%1#0"
      ]
    },
    "202": {
      "op": "setbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "203": {
      "retsub": true,
      "op": "retsub"
    },
    "204": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare",
      "params": {
        "inp#0": "bytes"
      },
      "block": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "207": {
      "op": "b test_cases.regression_tests.bool_only.BoolOnly.set_0_compare_block@0"
    },
    "210": {
      "block": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare_block@0",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "212": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "213": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "214": {
      "op": "frame_dig -1",
      "defined_out": [
        "inp#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)"
      ]
    },
    "216": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)",
        "0"
      ]
    },
    "217": {
      "op": "uncover 2",
      "stack_out": [
        "inp#0 (copy)",
        "0",
        "tmp%1#0"
      ]
    },
    "219": {
      "op": "setbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "220": {
      "retsub": true,
      "op": "retsub"
    },
    "221": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties",
      "params": {},
      "block": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties",
      "stack_in": [],
      "op": "b test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties_block@0"
    },
    "224": {
      "block": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "225": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "227": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "229": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "231": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "232": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "233": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": []
    },
    "235": {
      "op": "itxn_submit"
    },
    "236": {
      "op": "itxn_begin"
    },
    "237": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "238": {
      "op": "itxn_field Nonparticipation",
      "stack_out": []
    },
    "240": {
      "op": "pushint 2 // keyreg",
      "defined_out": [
        "keyreg"
      ],
      "stack_out": [
        "keyreg"
      ]
    },
    "242": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "244": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "245": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "247": {
      "op": "b test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties_next_txn@1"
    },
    "250": {
      "block": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "251": {
      "retsub": true,
      "op": "retsub"
    }
  }
}