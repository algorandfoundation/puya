{
  "version": 3,
  "sources": [
    "../bool_only.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;AAAA;AASK;;;;;;AAJA;;;;;;AAJA;;;;;;AADL;;;AAAA;;AAAA;;;;;;;;;AAAA;;AAAA;AAAA;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AACK;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AARL;;;;;;AAE4C;;AAAL;AAAA;AAAxB;;AAAqB;AAArB;;AAAA;AAAP;AAER;;;;;;AAEuC;;AAAmB;AAAnB;AAAxB;;AAAqB;AAArB;;AAAA;AAAP;;;;AAIA;AAC4B;;AAA5B;;AACmD;;AAAL;AAAA;AAA9C;;AACA;AAEA;AACsB;;;AADtB;;;;AAAA;;;;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x151f7c75"
    },
    "12": {
      "op": "b main_block@0"
    },
    "15": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "18": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "20": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "21": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "22": {
      "op": "bz main_bare_routing@17",
      "stack_out": []
    },
    "25": {
      "op": "b main_abi_routing@2"
    },
    "28": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "31": {
      "op": "match",
      "stack_out": []
    },
    "33": {
      "op": "b main_route_NoOp@3"
    },
    "36": {
      "block": "main_route_NoOp@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "38": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "39": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "40": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "41": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "44": {
      "op": "match",
      "stack_out": []
    },
    "46": {
      "op": "b main_switch_case_default@4"
    },
    "49": {
      "block": "main_switch_case_default@4",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "51": {
      "op": "bz main_create_NoOp@11",
      "stack_out": []
    },
    "54": {
      "op": "b main_call_NoOp@5"
    },
    "57": {
      "block": "main_call_NoOp@5",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "60": {
      "op": "pushbytes 0xa85bff00 // method \"set_0_convert(byte[])byte[]\"",
      "defined_out": [
        "Method(set_0_convert(byte[])byte[])",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(set_0_convert(byte[])byte[])"
      ]
    },
    "66": {
      "op": "pushbytes 0xc4af225c // method \"set_0_compare(byte[])byte[]\"",
      "defined_out": [
        "Method(set_0_compare(byte[])byte[])",
        "Method(set_0_convert(byte[])byte[])",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(set_0_convert(byte[])byte[])",
        "Method(set_0_compare(byte[])byte[])"
      ]
    },
    "72": {
      "op": "pushbytes 0x83589f2d // method \"bool_only_properties()void\"",
      "defined_out": [
        "Method(bool_only_properties()void)",
        "Method(set_0_compare(byte[])byte[])",
        "Method(set_0_convert(byte[])byte[])",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(set_0_convert(byte[])byte[])",
        "Method(set_0_compare(byte[])byte[])",
        "Method(bool_only_properties()void)"
      ]
    },
    "78": {
      "op": "uncover 3",
      "stack_out": [
        "Method(set_0_convert(byte[])byte[])",
        "Method(set_0_compare(byte[])byte[])",
        "Method(bool_only_properties()void)",
        "tmp%7#0"
      ]
    },
    "80": {
      "op": "match main_set_0_convert_route@6 main_set_0_compare_route@7 main_bool_only_properties_route@8",
      "stack_out": []
    },
    "88": {
      "op": "b main_switch_case_default@9"
    },
    "91": {
      "block": "main_switch_case_default@9",
      "stack_in": [],
      "op": "b main_switch_case_next@10"
    },
    "94": {
      "block": "main_switch_case_next@10",
      "stack_in": [],
      "op": "b main_after_if_else@14"
    },
    "97": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "b main_switch_case_next@15"
    },
    "100": {
      "block": "main_switch_case_next@15",
      "stack_in": [],
      "op": "b main_switch_case_next@16"
    },
    "103": {
      "block": "main_switch_case_next@16",
      "stack_in": [],
      "op": "b main_after_if_else@21"
    },
    "106": {
      "block": "main_after_if_else@21",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "107": {
      "block": "main_bool_only_properties_route@8",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties[routing]",
      "op": "callsub bool_only_properties"
    },
    "110": {
      "op": "b main_switch_case_next@10"
    },
    "113": {
      "block": "main_set_0_compare_route@7",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare[routing]",
      "op": "callsub set_0_compare"
    },
    "116": {
      "op": "b main_switch_case_next@10"
    },
    "119": {
      "block": "main_set_0_convert_route@6",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert[routing]",
      "op": "callsub set_0_convert"
    },
    "122": {
      "op": "b main_switch_case_next@10"
    },
    "125": {
      "block": "main_create_NoOp@11",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "128": {
      "op": "match",
      "stack_out": []
    },
    "130": {
      "op": "b main_switch_case_default@12"
    },
    "133": {
      "block": "main_switch_case_default@12",
      "stack_in": [],
      "op": "b main_switch_case_next@13"
    },
    "136": {
      "block": "main_switch_case_next@13",
      "stack_in": [],
      "op": "b main_after_if_else@14"
    },
    "139": {
      "block": "main_bare_routing@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "141": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "142": {
      "op": "uncover 1",
      "stack_out": [
        "0",
        "tmp%9#0"
      ]
    },
    "144": {
      "op": "match main___algopy_default_create@18",
      "stack_out": []
    },
    "148": {
      "op": "b main_switch_case_default@19"
    },
    "151": {
      "block": "main_switch_case_default@19",
      "stack_in": [],
      "op": "b main_switch_case_next@20"
    },
    "154": {
      "block": "main_switch_case_next@20",
      "stack_in": [],
      "op": "b main_after_if_else@21"
    },
    "157": {
      "block": "main___algopy_default_create@18",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "159": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "160": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "161": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "162": {
      "op": "b main_block@23"
    },
    "165": {
      "block": "main_block@23",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__algopy_default_create@24"
    },
    "168": {
      "block": "main_after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__algopy_default_create@24",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "169": {
      "op": "return",
      "stack_out": []
    },
    "170": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert[routing]",
      "params": {},
      "block": "set_0_convert",
      "stack_in": [],
      "op": "b set_0_convert_block@0"
    },
    "173": {
      "block": "set_0_convert_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "176": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "179": {
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert",
      "op": "callsub test_cases.regression_tests.bool_only.BoolOnly.set_0_convert",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "182": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "183": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length%0#0"
      ]
    },
    "184": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "185": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "188": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ]
    },
    "190": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "191": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "192": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "194": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "195": {
      "op": "log",
      "stack_out": []
    },
    "196": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "197": {
      "op": "return",
      "stack_out": []
    },
    "198": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare[routing]",
      "params": {},
      "block": "set_0_compare",
      "stack_in": [],
      "op": "b set_0_compare_block@0"
    },
    "201": {
      "block": "set_0_compare_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "204": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "207": {
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare",
      "op": "callsub test_cases.regression_tests.bool_only.BoolOnly.set_0_compare",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "210": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "211": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length%0#0"
      ]
    },
    "212": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "213": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "216": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ]
    },
    "218": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "219": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "220": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "222": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "223": {
      "op": "log",
      "stack_out": []
    },
    "224": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "225": {
      "op": "return",
      "stack_out": []
    },
    "226": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties[routing]",
      "params": {},
      "block": "bool_only_properties",
      "stack_in": [],
      "op": "b bool_only_properties_block@0"
    },
    "229": {
      "block": "bool_only_properties_block@0",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties",
      "op": "callsub test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties"
    },
    "232": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "233": {
      "op": "return",
      "stack_out": []
    },
    "234": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert",
      "params": {
        "inp#0": "bytes"
      },
      "block": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "237": {
      "op": "b test_cases.regression_tests.bool_only.BoolOnly.set_0_convert_block@0"
    },
    "240": {
      "block": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert_block@0",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "242": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "243": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "244": {
      "op": "frame_dig -1",
      "defined_out": [
        "inp#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)"
      ]
    },
    "246": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)",
        "0"
      ]
    },
    "247": {
      "op": "uncover 2",
      "stack_out": [
        "inp#0 (copy)",
        "0",
        "tmp%1#0"
      ]
    },
    "249": {
      "op": "setbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "250": {
      "retsub": true,
      "op": "retsub"
    },
    "251": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare",
      "params": {
        "inp#0": "bytes"
      },
      "block": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "254": {
      "op": "b test_cases.regression_tests.bool_only.BoolOnly.set_0_compare_block@0"
    },
    "257": {
      "block": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare_block@0",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "259": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "260": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "261": {
      "op": "frame_dig -1",
      "defined_out": [
        "inp#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)"
      ]
    },
    "263": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)",
        "0"
      ]
    },
    "264": {
      "op": "uncover 2",
      "stack_out": [
        "inp#0 (copy)",
        "0",
        "tmp%1#0"
      ]
    },
    "266": {
      "op": "setbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "267": {
      "retsub": true,
      "op": "retsub"
    },
    "268": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties",
      "params": {},
      "block": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties",
      "stack_in": [],
      "op": "b test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties_block@0"
    },
    "271": {
      "block": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "272": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "274": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "276": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "278": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "279": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "280": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": []
    },
    "282": {
      "op": "itxn_submit"
    },
    "283": {
      "op": "itxn_begin"
    },
    "284": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "285": {
      "op": "itxn_field Nonparticipation",
      "stack_out": []
    },
    "287": {
      "op": "pushint 2 // keyreg",
      "defined_out": [
        "keyreg"
      ],
      "stack_out": [
        "keyreg"
      ]
    },
    "289": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "291": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "292": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "294": {
      "op": "b test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties_next_txn@1"
    },
    "297": {
      "block": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "298": {
      "retsub": true,
      "op": "retsub"
    }
  }
}