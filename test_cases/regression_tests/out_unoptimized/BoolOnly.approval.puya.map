{
  "version": 3,
  "sources": [
    "../bool_only.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;AAAA;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;AACK;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AARL;;;;;;AAE4C;;AAAL;AAAA;AAAxB;;AAAqB;AAArB;;AAAA;AAAP;AAER;;;;;;AAEuC;;AAAmB;AAAnB;AAAxB;;AAAqB;AAArB;;AAAA;AAAP;;;;AAIA;AAC4B;AAA5B;;AACmD;;AAAL;AAAA;AAA9C;;AACA;AAEA;AACsB;;;AADtB;;;AAAA;;;;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 3"
    },
    "7": {
      "op": "bytecblock 0x151f7c75"
    },
    "14": {
      "op": "b block@0"
    },
    "17": {
      "block": "block@0",
      "stack_in": [],
      "op": "b block@1"
    },
    "20": {
      "block": "block@1",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "22": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "23": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "25": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "26": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "27": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "28": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "29": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%4#0",
        "0",
        "1"
      ]
    },
    "30": {
      "op": "intc_2 // 2",
      "defined_out": [
        "0",
        "1",
        "2",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2"
      ]
    },
    "31": {
      "op": "intc_3 // 3",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3"
      ]
    },
    "32": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "34": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5"
      ]
    },
    "36": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ]
    },
    "38": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7"
      ]
    },
    "40": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    },
    "42": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "44": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "0",
        "1",
        "10",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ]
    },
    "46": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "0",
        "1",
        "10",
        "11",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11"
      ]
    },
    "48": {
      "op": "uncover 12",
      "stack_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "tmp%4#0"
      ]
    },
    "50": {
      "op": "match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication",
      "stack_out": []
    },
    "76": {
      "op": "b *NOT_IMPLEMENTED"
    },
    "79": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "80": {
      "block": "create_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "83": {
      "block": "call_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "86": {
      "block": "create_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "89": {
      "block": "call_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "92": {
      "block": "create_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "95": {
      "block": "call_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "98": {
      "block": "create_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "101": {
      "block": "call_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "104": {
      "block": "create_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "107": {
      "block": "call_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "110": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "112": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "113": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "114": {
      "op": "bz else_body@10",
      "stack_out": []
    },
    "117": {
      "op": "b __algopy_default_create@9"
    },
    "120": {
      "block": "__algopy_default_create@9",
      "stack_in": [],
      "op": "b block@23"
    },
    "123": {
      "block": "block@23",
      "stack_in": [],
      "op": "b after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__algopy_default_create@24"
    },
    "126": {
      "block": "after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__algopy_default_create@24",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "127": {
      "op": "return",
      "stack_out": []
    },
    "128": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "block": "else_body@10",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for create NoOp"
    },
    "129": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "132": {
      "op": "pushbytes 0xa85bff00 // method \"set_0_convert(byte[])byte[]\"",
      "defined_out": [
        "Method(set_0_convert(byte[])byte[])",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(set_0_convert(byte[])byte[])"
      ]
    },
    "138": {
      "op": "pushbytes 0xc4af225c // method \"set_0_compare(byte[])byte[]\"",
      "defined_out": [
        "Method(set_0_compare(byte[])byte[])",
        "Method(set_0_convert(byte[])byte[])",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(set_0_convert(byte[])byte[])",
        "Method(set_0_compare(byte[])byte[])"
      ]
    },
    "144": {
      "op": "pushbytes 0x83589f2d // method \"bool_only_properties()void\"",
      "defined_out": [
        "Method(bool_only_properties()void)",
        "Method(set_0_compare(byte[])byte[])",
        "Method(set_0_convert(byte[])byte[])",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(set_0_convert(byte[])byte[])",
        "Method(set_0_compare(byte[])byte[])",
        "Method(bool_only_properties()void)"
      ]
    },
    "150": {
      "op": "uncover 3",
      "stack_out": [
        "Method(set_0_convert(byte[])byte[])",
        "Method(set_0_compare(byte[])byte[])",
        "Method(bool_only_properties()void)",
        "tmp%5#0"
      ]
    },
    "152": {
      "op": "match set_0_convert_route@3 set_0_compare_route@4 bool_only_properties_route@5",
      "stack_out": []
    },
    "160": {
      "op": "b switch_case_default@6"
    },
    "163": {
      "block": "switch_case_default@6",
      "stack_in": [],
      "op": "b switch_case_next@7"
    },
    "166": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "block": "switch_case_next@7",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "167": {
      "block": "bool_only_properties_route@5",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties[routing]",
      "op": "callsub bool_only_properties"
    },
    "170": {
      "op": "b switch_case_next@7"
    },
    "173": {
      "block": "set_0_compare_route@4",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare[routing]",
      "op": "callsub set_0_compare"
    },
    "176": {
      "op": "b switch_case_next@7"
    },
    "179": {
      "block": "set_0_convert_route@3",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert[routing]",
      "op": "callsub set_0_convert"
    },
    "182": {
      "op": "b switch_case_next@7"
    },
    "185": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert[routing]",
      "params": {},
      "block": "set_0_convert",
      "stack_in": [],
      "op": "b set_0_convert_block@0"
    },
    "188": {
      "block": "set_0_convert_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "191": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "194": {
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert",
      "op": "callsub test_cases.regression_tests.bool_only.BoolOnly.set_0_convert",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "197": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "198": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length%0#0"
      ]
    },
    "199": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "200": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "203": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ]
    },
    "205": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "206": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "207": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "209": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "210": {
      "op": "log",
      "stack_out": []
    },
    "211": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "212": {
      "op": "return",
      "stack_out": []
    },
    "213": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare[routing]",
      "params": {},
      "block": "set_0_compare",
      "stack_in": [],
      "op": "b set_0_compare_block@0"
    },
    "216": {
      "block": "set_0_compare_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "219": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "222": {
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare",
      "op": "callsub test_cases.regression_tests.bool_only.BoolOnly.set_0_compare",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "225": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "226": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length%0#0"
      ]
    },
    "227": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "228": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "231": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ]
    },
    "233": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "234": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "235": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "237": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "238": {
      "op": "log",
      "stack_out": []
    },
    "239": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "240": {
      "op": "return",
      "stack_out": []
    },
    "241": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties[routing]",
      "params": {},
      "block": "bool_only_properties",
      "stack_in": [],
      "op": "b bool_only_properties_block@0"
    },
    "244": {
      "block": "bool_only_properties_block@0",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties",
      "op": "callsub test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties"
    },
    "247": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "248": {
      "op": "return",
      "stack_out": []
    },
    "249": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert",
      "params": {
        "inp#0": "bytes"
      },
      "block": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "252": {
      "op": "b test_cases.regression_tests.bool_only.BoolOnly.set_0_convert_block@0"
    },
    "255": {
      "block": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert_block@0",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "257": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "258": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "259": {
      "op": "frame_dig -1",
      "defined_out": [
        "inp#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)"
      ]
    },
    "261": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)",
        "0"
      ]
    },
    "262": {
      "op": "uncover 2",
      "stack_out": [
        "inp#0 (copy)",
        "0",
        "tmp%1#0"
      ]
    },
    "264": {
      "op": "setbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "265": {
      "retsub": true,
      "op": "retsub"
    },
    "266": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare",
      "params": {
        "inp#0": "bytes"
      },
      "block": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "269": {
      "op": "b test_cases.regression_tests.bool_only.BoolOnly.set_0_compare_block@0"
    },
    "272": {
      "block": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare_block@0",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "274": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "275": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "276": {
      "op": "frame_dig -1",
      "defined_out": [
        "inp#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)"
      ]
    },
    "278": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)",
        "0"
      ]
    },
    "279": {
      "op": "uncover 2",
      "stack_out": [
        "inp#0 (copy)",
        "0",
        "tmp%1#0"
      ]
    },
    "281": {
      "op": "setbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "282": {
      "retsub": true,
      "op": "retsub"
    },
    "283": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties",
      "params": {},
      "block": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties",
      "stack_in": [],
      "op": "b test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties_block@0"
    },
    "286": {
      "block": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "287": {
      "op": "intc_3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "288": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "290": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "292": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "293": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "294": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": []
    },
    "296": {
      "op": "itxn_submit"
    },
    "297": {
      "op": "itxn_begin"
    },
    "298": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "299": {
      "op": "itxn_field Nonparticipation",
      "stack_out": []
    },
    "301": {
      "op": "intc_2 // keyreg",
      "defined_out": [
        "keyreg"
      ],
      "stack_out": [
        "keyreg"
      ]
    },
    "302": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "304": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "305": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "307": {
      "op": "b test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties_next_txn@1"
    },
    "310": {
      "block": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "311": {
      "retsub": true,
      "op": "retsub"
    }
  }
}