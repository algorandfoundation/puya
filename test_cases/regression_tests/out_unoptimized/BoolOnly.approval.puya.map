{
  "version": 3,
  "sources": [
    "../bool_only.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;AAAA;;;;;;;;;AAAA;;;;;;;AASK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AALL;;;AAAA;;;AAKK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADL;;;AAAA;;;AACK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AADL;;AAAA;AAAA;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;AAE4C;;AAAL;AAAA;AAAxB;;AAAqB;AAArB;;AAAA;AAAP;AAER;;;;;;AAEuC;;AAAmB;AAAnB;AAAxB;;AAAqB;AAArB;;AAAA;AAAP;;;;AAIA;AAC4B;;AAA5B;;AACmD;;AAAL;AAAA;AAA9C;;AACA;AAEA;AACsB;;;AADtB;;;;AAAA;;;;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x151f7c75"
    },
    "12": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "14": {
      "op": "b main_block@0"
    },
    "17": {
      "block": "main_block@0",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_block@1"
    },
    "20": {
      "block": "main_block@1",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#1"
      ]
    },
    "22": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#1",
        "0"
      ]
    },
    "23": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "24": {
      "op": "bz main_bare_routing@8",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "27": {
      "op": "b main_abi_routing@2"
    },
    "30": {
      "block": "main_abi_routing@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "33": {
      "op": "pushbytes 0xa85bff00 // method \"set_0_convert(byte[])byte[]\"",
      "defined_out": [
        "Method(set_0_convert(byte[])byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(set_0_convert(byte[])byte[])"
      ]
    },
    "39": {
      "op": "pushbytes 0xc4af225c // method \"set_0_compare(byte[])byte[]\"",
      "defined_out": [
        "Method(set_0_compare(byte[])byte[])",
        "Method(set_0_convert(byte[])byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(set_0_convert(byte[])byte[])",
        "Method(set_0_compare(byte[])byte[])"
      ]
    },
    "45": {
      "op": "pushbytes 0x83589f2d // method \"bool_only_properties()void\"",
      "defined_out": [
        "Method(bool_only_properties()void)",
        "Method(set_0_compare(byte[])byte[])",
        "Method(set_0_convert(byte[])byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(set_0_convert(byte[])byte[])",
        "Method(set_0_compare(byte[])byte[])",
        "Method(bool_only_properties()void)"
      ]
    },
    "51": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "Method(set_0_convert(byte[])byte[])",
        "Method(set_0_compare(byte[])byte[])",
        "Method(bool_only_properties()void)",
        "tmp%2#0"
      ]
    },
    "53": {
      "op": "match main_set_0_convert_route@3 main_set_0_compare_route@4 main_bool_only_properties_route@5",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "61": {
      "op": "b main_switch_case_default@6"
    },
    "64": {
      "block": "main_switch_case_default@6",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_switch_case_next@7"
    },
    "67": {
      "block": "main_switch_case_next@7",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_after_if_else@12"
    },
    "70": {
      "block": "main_after_if_else@12",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#0"
      ]
    },
    "71": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "73": {
      "op": "b main_after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__@13"
    },
    "76": {
      "block": "main_after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__@13",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "77": {
      "block": "main_bool_only_properties_route@5",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%19#0"
      ]
    },
    "79": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%19#0",
        "NoOp"
      ]
    },
    "80": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%20#0"
      ]
    },
    "81": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "82": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%21#0"
      ]
    },
    "84": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%21#0",
        "0"
      ]
    },
    "85": {
      "op": "!=",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%22#0"
      ]
    },
    "86": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "87": {
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties",
      "op": "callsub bool_only_properties"
    },
    "90": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#0"
      ]
    },
    "91": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "93": {
      "op": "b main_after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__@13"
    },
    "96": {
      "block": "main_set_0_compare_route@4",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "98": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%11#0",
        "NoOp"
      ]
    },
    "99": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0"
      ]
    },
    "100": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "101": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%13#0"
      ]
    },
    "103": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%13#0",
        "0"
      ]
    },
    "104": {
      "op": "!=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%14#0"
      ]
    },
    "105": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "106": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "109": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%15#0"
      ]
    },
    "112": {
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare",
      "op": "callsub set_0_compare",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%16#0"
      ]
    },
    "115": {
      "op": "dup",
      "defined_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "116": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%16#0",
        "aggregate%length%1#0"
      ]
    },
    "117": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%16#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "118": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%16#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "121": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0",
        "tmp%16#0"
      ]
    },
    "123": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0"
      ]
    },
    "124": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "125": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%17#0"
      ]
    },
    "127": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%18#0"
      ]
    },
    "128": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "129": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#0"
      ]
    },
    "130": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "132": {
      "op": "b main_after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__@13"
    },
    "135": {
      "block": "main_set_0_convert_route@3",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "137": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "NoOp"
      ]
    },
    "138": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "139": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "140": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "142": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "0"
      ]
    },
    "143": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "144": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "145": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "148": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "151": {
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert",
      "op": "callsub set_0_convert",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "154": {
      "op": "dup",
      "defined_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "155": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "aggregate%length%0#0"
      ]
    },
    "156": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "157": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "160": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%0#0",
        "tmp%8#0"
      ]
    },
    "162": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0"
      ]
    },
    "163": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "164": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%9#0"
      ]
    },
    "166": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%10#0"
      ]
    },
    "167": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "168": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#0"
      ]
    },
    "169": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "171": {
      "op": "b main_after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__@13"
    },
    "174": {
      "block": "main_bare_routing@8",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%23#0"
      ]
    },
    "176": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%23#0",
        "0"
      ]
    },
    "177": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0",
        "tmp%23#0"
      ]
    },
    "179": {
      "op": "match main___algopy_default_create@9",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "183": {
      "op": "b main_switch_case_default@10"
    },
    "186": {
      "block": "main_switch_case_default@10",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_switch_case_next@11"
    },
    "189": {
      "block": "main_switch_case_next@11",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_after_if_else@12"
    },
    "192": {
      "block": "main___algopy_default_create@9",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%24#0"
      ]
    },
    "194": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%24#0",
        "0"
      ]
    },
    "195": {
      "op": "==",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%25#0"
      ]
    },
    "196": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "197": {
      "op": "b main_block@14"
    },
    "200": {
      "block": "main_block@14",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__algopy_default_create@15"
    },
    "203": {
      "block": "main_after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__algopy_default_create@15",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#0"
      ]
    },
    "204": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "206": {
      "op": "b main_after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__@13"
    },
    "209": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert",
      "params": {
        "inp#0": "bytes"
      },
      "block": "set_0_convert",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "212": {
      "op": "b set_0_convert_block@0"
    },
    "215": {
      "block": "set_0_convert_block@0",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "217": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "218": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "219": {
      "op": "frame_dig -1",
      "defined_out": [
        "inp#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)"
      ]
    },
    "221": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)",
        "0"
      ]
    },
    "222": {
      "op": "uncover 2",
      "stack_out": [
        "inp#0 (copy)",
        "0",
        "tmp%1#0"
      ]
    },
    "224": {
      "op": "setbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "225": {
      "retsub": true,
      "op": "retsub"
    },
    "226": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare",
      "params": {
        "inp#0": "bytes"
      },
      "block": "set_0_compare",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "229": {
      "op": "b set_0_compare_block@0"
    },
    "232": {
      "block": "set_0_compare_block@0",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "234": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "235": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "236": {
      "op": "frame_dig -1",
      "defined_out": [
        "inp#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)"
      ]
    },
    "238": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)",
        "0"
      ]
    },
    "239": {
      "op": "uncover 2",
      "stack_out": [
        "inp#0 (copy)",
        "0",
        "tmp%1#0"
      ]
    },
    "241": {
      "op": "setbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "242": {
      "retsub": true,
      "op": "retsub"
    },
    "243": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties",
      "params": {},
      "block": "bool_only_properties",
      "stack_in": [],
      "op": "b bool_only_properties_block@0"
    },
    "246": {
      "block": "bool_only_properties_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "247": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "249": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "251": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "253": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "254": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "255": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": []
    },
    "257": {
      "op": "itxn_submit"
    },
    "258": {
      "op": "itxn_begin"
    },
    "259": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "260": {
      "op": "itxn_field Nonparticipation",
      "stack_out": []
    },
    "262": {
      "op": "pushint 2 // keyreg",
      "defined_out": [
        "keyreg"
      ],
      "stack_out": [
        "keyreg"
      ]
    },
    "264": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "266": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "267": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "269": {
      "op": "b bool_only_properties_next_txn@1"
    },
    "272": {
      "block": "bool_only_properties_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "273": {
      "retsub": true,
      "op": "retsub"
    }
  }
}