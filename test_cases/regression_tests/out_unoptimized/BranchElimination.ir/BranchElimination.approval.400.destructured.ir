main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@8
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "umm()uint64" => block@3, method "umm2()void" => block@4, method "calculate(uint64[][],uint64)void" => block@5, * => block@6}
    block@3: // umm_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: uint64 = test_cases.regression_tests.leftover_branch.BranchElimination.umm()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%7#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%8#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        let test_cases.regression_tests.leftover_branch.BranchElimination.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.regression_tests.leftover_branch.BranchElimination.__puya_arc4_router__%0#0
        goto block@13
    block@4: // umm2_route_L18
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (== tmp%10#0 NoOp)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        (assert tmp%13#0) // can only call when not creating
        test_cases.regression_tests.leftover_branch.BranchElimination.umm2()
        let test_cases.regression_tests.leftover_branch.BranchElimination.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.regression_tests.leftover_branch.BranchElimination.__puya_arc4_router__%0#0
        goto block@13
    block@5: // calculate_route_L29
        let tmp%14#0: uint64 = (txn OnCompletion)
        let tmp%15#0: bool = (== tmp%14#0 NoOp)
        (assert tmp%15#0) // OnCompletion is not NoOp
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (!= tmp%16#0 0u)
        (assert tmp%17#0) // can only call when not creating
        let reinterpret_Encoded(len+(len+uint64[])[])%0#0: Encoded(len+(len+uint64[])[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        test_cases.regression_tests.leftover_branch.BranchElimination.calculate(reinterpret_Encoded(len+(len+uint64[])[])%0#0, reinterpret_Encoded(uint64)%0#0)
        let test_cases.regression_tests.leftover_branch.BranchElimination.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.regression_tests.leftover_branch.BranchElimination.__puya_arc4_router__%0#0
        goto block@13
    block@6: // switch_case_default_L4
        goto block@7
    block@7: // switch_case_next_L4
        goto block@12
    block@8: // bare_routing_L4
        let tmp%18#0: uint64 = (txn OnCompletion)
        switch tmp%18#0 {0u => block@9, * => block@10}
    block@9: // __algopy_default_create_L1
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (== tmp%19#0 0u)
        (assert tmp%20#0) // can only call when creating
        goto block@14
    block@14: // L1
        goto block@15
    block@15: // after_inlined_test_cases.regression_tests.leftover_branch.BranchElimination.__algopy_default_create_L1
        let test_cases.regression_tests.leftover_branch.BranchElimination.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.regression_tests.leftover_branch.BranchElimination.__puya_arc4_router__%0#0
        goto block@13
    block@10: // switch_case_default_L4
        goto block@11
    block@11: // switch_case_next_L4
        goto block@12
    block@12: // after_if_else_L4
        let test_cases.regression_tests.leftover_branch.BranchElimination.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.regression_tests.leftover_branch.BranchElimination.__puya_arc4_router__%0#0
        goto block@13
    block@13: // after_inlined_test_cases.regression_tests.leftover_branch.BranchElimination.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.regression_tests.leftover_branch.hmm() -> bool:
    block@0: // L53
        return 0u

subroutine test_cases.regression_tests.leftover_branch.hmm_uint64() -> uint64:
    block@0: // L58
        return 0u

subroutine test_cases.regression_tests.leftover_branch.BranchElimination.umm() -> uint64:
    block@0: // L5
        let ahuh#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L8
        let ahuh#16: uint64 = ahuh#0
        goto 1u ? block@2 : block@15
    block@2: // while_body_L9
        let tmp%0#0: uint64 = test_cases.regression_tests.leftover_branch.hmm_uint64()
        (assert 1u) // Step cannot be zero
        let _i#0: uint64 = 0u
        goto block@3
    block@3: // for_header_L9
        let continue_looping%0#0: bool = (< _i#0 tmp%0#0)
        goto continue_looping%0#0 ? block@4 : block@12
    block@4: // for_body_L10
        let tmp%1#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#16: uint64 = ahuh#0
        goto tmp%1#0 ? block@5 : block@10
    block@5: // if_body_L11
        let tmp%2#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#16: uint64 = ahuh#0
        goto tmp%2#0 ? block@6 : block@9
    block@6: // if_body_L12
        let tmp%3#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#16: uint64 = ahuh#0
        goto tmp%3#0 ? block@7 : block@8
    block@7: // if_body_L13
        let tmp%4#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        let tmp%5#0: uint64 = (+ ahuh#0 tmp%4#0)
        let ahuh#0: uint64 = tmp%5#0
        let ahuh#16: uint64 = ahuh#0
        goto block@8
    block@8: // after_if_else_L12
        let ahuh#0: uint64 = ahuh#16
        let ahuh#16: uint64 = ahuh#0
        goto block@9
    block@9: // after_if_else_L11
        let ahuh#0: uint64 = ahuh#16
        let ahuh#16: uint64 = ahuh#0
        goto block@10
    block@10: // after_if_else_L10
        let ahuh#0: uint64 = ahuh#16
        goto block@11
    block@11: // for_footer_L9
        let _i#0: uint64 = (+ _i#0 1u)
        goto block@3
    block@12: // after_for_L9
        let tmp%6#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%6#0 ? block@13 : block@14
    block@13: // if_body_L15
        let ahuh#16: uint64 = ahuh#0
        goto block@15
    block@14: // after_if_else_L14
        goto block@1
    block@15: // after_while_L8
        let ahuh#0: uint64 = ahuh#16
        return ahuh#0

subroutine test_cases.regression_tests.leftover_branch.BranchElimination.umm2() -> void:
    block@0: // L18
        let ahuh#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L21
        goto 1u ? block@2 : block@11
    block@2: // while_body_L22
        let tmp%0#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#11: uint64 = ahuh#0
        goto tmp%0#0 ? block@3 : block@8
    block@3: // if_body_L23
        let tmp%1#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#11: uint64 = ahuh#0
        goto tmp%1#0 ? block@4 : block@7
    block@4: // if_body_L24
        let tmp%2#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#11: uint64 = ahuh#0
        goto tmp%2#0 ? block@5 : block@6
    block@5: // if_body_L25
        let tmp%3#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        let tmp%4#0: uint64 = (+ ahuh#0 tmp%3#0)
        let ahuh#0: uint64 = tmp%4#0
        let ahuh#11: uint64 = ahuh#0
        goto block@6
    block@6: // after_if_else_L24
        let ahuh#0: uint64 = ahuh#11
        let ahuh#11: uint64 = ahuh#0
        goto block@7
    block@7: // after_if_else_L23
        let ahuh#0: uint64 = ahuh#11
        let ahuh#11: uint64 = ahuh#0
        goto block@8
    block@8: // after_if_else_L22
        let ahuh#0: uint64 = ahuh#11
        let tmp%5#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%5#0 ? block@9 : block@10
    block@9: // if_body_L27
        goto block@11
    block@10: // after_if_else_L26
        goto block@1
    block@11: // after_while_L21
        return 

subroutine test_cases.regression_tests.leftover_branch.BranchElimination.calculate(nested_list: Encoded(len+(len+uint64[])[]), threshold: Encoded(uint64)) -> void:
    block@0: // L29
        let total#0: uint64 = 0u
        let num_boosts#0: uint64 = 0u
        let aggregate%array_length%0#0: uint64 = (extract_uint16 nested_list#0 0u)
        let tmp%0#0: uint64 = aggregate%array_length%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L38
        let continue_looping%0#0: bool = (< i#0 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@14
    block@2: // for_body_L39
        let aggregate%total_length%0#0: uint64 = (len nested_list#0)
        let aggregate%array_head_and_tail%0#0: bytes = (substring3 nested_list#0 2u aggregate%total_length%0#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 nested_list#0 0u)
        let aggregate%lt%0#0: bool = (< i#0 aggregate%array_length%1#0)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%item_offset_offset%0#0: uint64 = (* i#0 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%item_length%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0)
        let aggregate%item_length_in_bytes%0#0: uint64 = (* aggregate%item_length%0#0 8u)
        let aggregate%item_head_tail_length%0#0: uint64 = (+ aggregate%item_length_in_bytes%0#0 2u)
        let aggregate%item%0#0: bytes = (extract3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%item_head_tail_length%0#0)
        let array_item%0#0: Encoded(len+uint64[]) = aggregate%item%0#0
        let inner_list#0: Encoded(len+uint64[]) = array_item%0#0
        let aggregate%array_length%2#0: uint64 = (extract_uint16 inner_list#0 0u)
        let tmp%1#0: uint64 = aggregate%array_length%2#0
        let tmp%2#0: uint64 = (- tmp%1#0 1u)
        let last_inner_list_index#0: uint64 = tmp%2#0
        let aggregate%array_length%3#0: uint64 = (extract_uint16 inner_list#0 0u)
        let tmp%3#0: uint64 = aggregate%array_length%3#0
        (assert 1u) // Step cannot be zero
        let j#0: uint64 = 0u
        goto block@3
    block@3: // for_header_L41
        let continue_looping%1#0: bool = (< j#0 tmp%3#0)
        goto continue_looping%1#0 ? block@4 : block@12
    block@4: // for_body_L42
        let aggregate%total_length%1#0: uint64 = (len inner_list#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 inner_list#0 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%0#0: uint64 = (* j#0 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let value#0: Encoded(uint64) = array_item%1#0
        let reinterpret_biguint%0#0: biguint = value#0
        let reinterpret_biguint%1#0: biguint = threshold#0
        let tmp%4#0: bool = (b>= reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        let num_boosts#15: uint64 = num_boosts#0
        let total#16: uint64 = total#0
        goto tmp%4#0 ? block@5 : block@10
    block@5: // if_body_L44
        let tmp%5#0: bool = (< j#0 last_inner_list_index#0)
        let has_next#0: bool = tmp%5#0
        let num_boosts#15: uint64 = num_boosts#0
        let total#16: uint64 = total#0
        goto has_next#0 ? block@6 : block@9
    block@6: // if_body_L46
        let tmp%6#0: uint64 = (+ total#0 1u)
        let total#0: uint64 = tmp%6#0
        let tmp%7#0: uint64 = (+ j#0 1u)
        let aggregate%total_length%2#0: uint64 = (len inner_list#0)
        let aggregate%array_trimmed%1#0: bytes = (substring3 inner_list#0 2u aggregate%total_length%2#0)
        let aggregate%bytes_offset%1#0: uint64 = (* tmp%7#0 8u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%1#0
        let next_value#0: Encoded(uint64) = array_item%2#0
        let reinterpret_biguint%2#0: biguint = value#0
        let reinterpret_biguint%3#0: biguint = next_value#0
        let tmp%8#0: bool = (b< reinterpret_biguint%2#0 reinterpret_biguint%3#0)
        let num_boosts#15: uint64 = num_boosts#0
        let total#16: uint64 = total#0
        goto tmp%8#0 ? block@7 : block@8
    block@7: // if_body_L49
        let tmp%9#0: uint64 = (* total#0 2u)
        let total#0: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (+ num_boosts#0 1u)
        let num_boosts#0: uint64 = tmp%10#0
        let num_boosts#15: uint64 = num_boosts#0
        let total#16: uint64 = total#0
        goto block@8
    block@8: // after_if_else_L48
        let num_boosts#0: uint64 = num_boosts#15
        let total#0: uint64 = total#16
        let num_boosts#15: uint64 = num_boosts#0
        let total#16: uint64 = total#0
        goto block@9
    block@9: // after_if_else_L45
        let num_boosts#0: uint64 = num_boosts#15
        let total#0: uint64 = total#16
        let num_boosts#15: uint64 = num_boosts#0
        let total#16: uint64 = total#0
        goto block@10
    block@10: // after_if_else_L43
        let num_boosts#0: uint64 = num_boosts#15
        let total#0: uint64 = total#16
        goto block@11
    block@11: // for_footer_L41
        let j#0: uint64 = (+ j#0 1u)
        goto block@3
    block@12: // after_for_L41
        goto block@13
    block@13: // for_footer_L38
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@14: // after_for_L38
        return 