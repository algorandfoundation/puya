{
  "version": 3,
  "sources": [
    "../issue_434.py"
  ],
  "mappings": ";;;;;;;;;;;;AAGA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;AAAA;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;;;;;;;;AAEK;;;AAAA;AAAA;;;AAAA;AAAA;AAAL;;;;;;;;;;;AAEc;;AAAyB;;;AAAzB;AAAd;;;AAAA;;;AAC+B;;AAAZ;AAAiC;;AAAjC;AAAP;;;;AAED;;AAAI;AAAJ;AAAX;;;AAAA;;;AACgB;;AAAI;AAAJ;AAAJ;;;;;AAIG;;AAAI;AAAJ;AAAA;;AAAA;AAAP;;AAFQ;;AAAI;AAAJ;AAAJ;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 2 0"
    },
    "6": {
      "op": "b block@0"
    },
    "9": {
      "block": "block@0",
      "stack_in": [],
      "op": "b block@1"
    },
    "12": {
      "block": "block@1",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "14": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "15": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "17": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "18": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "19": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "20": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "21": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%4#0",
        "0",
        "1"
      ]
    },
    "22": {
      "op": "intc_1 // 2",
      "defined_out": [
        "0",
        "1",
        "2",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2"
      ]
    },
    "23": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3"
      ]
    },
    "25": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "27": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5"
      ]
    },
    "29": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ]
    },
    "31": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7"
      ]
    },
    "33": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    },
    "35": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "37": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "0",
        "1",
        "10",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ]
    },
    "39": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "0",
        "1",
        "10",
        "11",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11"
      ]
    },
    "41": {
      "op": "uncover 12",
      "stack_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "tmp%4#0"
      ]
    },
    "43": {
      "op": "match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication",
      "stack_out": []
    },
    "69": {
      "op": "b *NOT_IMPLEMENTED"
    },
    "72": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "73": {
      "block": "create_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "76": {
      "block": "call_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "79": {
      "block": "create_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "82": {
      "block": "call_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "85": {
      "block": "create_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "88": {
      "block": "call_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "91": {
      "block": "create_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "94": {
      "block": "call_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "97": {
      "block": "create_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "100": {
      "block": "call_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "103": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "105": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "106": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "107": {
      "op": "bz else_body@8",
      "stack_out": []
    },
    "110": {
      "op": "b __algopy_default_create@7"
    },
    "113": {
      "block": "__algopy_default_create@7",
      "stack_in": [],
      "op": "b block@21"
    },
    "116": {
      "block": "block@21",
      "stack_in": [],
      "op": "b after_inlined_test_cases.regression_tests.issue_434.Issue434.__algopy_default_create@22"
    },
    "119": {
      "block": "after_inlined_test_cases.regression_tests.issue_434.Issue434.__algopy_default_create@22",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "120": {
      "op": "return",
      "stack_out": []
    },
    "121": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "block": "else_body@8",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for create NoOp"
    },
    "122": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "125": {
      "op": "pushbytes 0xd3ad7a55 // method \"method(uint64)void\"",
      "defined_out": [
        "Method(method(uint64)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(method(uint64)void)"
      ]
    },
    "131": {
      "op": "uncover 1",
      "stack_out": [
        "Method(method(uint64)void)",
        "tmp%5#0"
      ]
    },
    "133": {
      "op": "match method_route@3",
      "stack_out": []
    },
    "137": {
      "op": "b switch_case_default@4"
    },
    "140": {
      "block": "switch_case_default@4",
      "stack_in": [],
      "op": "b switch_case_next@5"
    },
    "143": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "block": "switch_case_next@5",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "144": {
      "block": "method_route@3",
      "stack_in": [],
      "callsub": "test_cases.regression_tests.issue_434.Issue434.method[routing]",
      "op": "callsub method"
    },
    "147": {
      "op": "b switch_case_next@5"
    },
    "150": {
      "subroutine": "test_cases.regression_tests.issue_434.Issue434.method[routing]",
      "params": {},
      "block": "method",
      "stack_in": [],
      "op": "b method_block@0"
    },
    "153": {
      "block": "method_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "156": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "157": {
      "callsub": "test_cases.regression_tests.issue_434.Issue434.method",
      "op": "callsub test_cases.regression_tests.issue_434.Issue434.method",
      "stack_out": []
    },
    "160": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "161": {
      "op": "return",
      "stack_out": []
    },
    "162": {
      "subroutine": "test_cases.regression_tests.issue_434.Issue434.method",
      "params": {
        "c#0": "uint64"
      },
      "block": "test_cases.regression_tests.issue_434.Issue434.method",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "165": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "x#0"
      ]
    },
    "167": {
      "op": "b test_cases.regression_tests.issue_434.Issue434.method_block@0"
    },
    "170": {
      "block": "test_cases.regression_tests.issue_434.Issue434.method_block@0",
      "stack_in": [
        "x#0"
      ],
      "op": "b test_cases.regression_tests.issue_434.Issue434.method_while_top@1"
    },
    "173": {
      "block": "test_cases.regression_tests.issue_434.Issue434.method_while_top@1",
      "stack_in": [
        "x#0"
      ],
      "op": "global OpcodeBudget",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "x#0",
        "tmp%0#0"
      ]
    },
    "175": {
      "op": "pushint 350 // 350",
      "defined_out": [
        "350",
        "tmp%0#0"
      ],
      "stack_out": [
        "x#0",
        "tmp%0#0",
        "350"
      ]
    },
    "178": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "x#0",
        "tmp%1#0"
      ]
    },
    "179": {
      "op": "bz test_cases.regression_tests.issue_434.Issue434.method_after_while@3",
      "stack_out": [
        "x#0"
      ]
    },
    "182": {
      "op": "b test_cases.regression_tests.issue_434.Issue434.method_while_body@2"
    },
    "185": {
      "block": "test_cases.regression_tests.issue_434.Issue434.method_while_body@2",
      "stack_in": [
        "x#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "x#0",
        "tmp%2#0"
      ]
    },
    "187": {
      "op": "sha3_256",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "x#0",
        "tmp%3#0"
      ]
    },
    "188": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "x#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "190": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "x#0",
        "tmp%5#0"
      ]
    },
    "191": {
      "op": "assert",
      "stack_out": [
        "x#0"
      ]
    },
    "192": {
      "op": "b test_cases.regression_tests.issue_434.Issue434.method_while_top@1"
    },
    "195": {
      "block": "test_cases.regression_tests.issue_434.Issue434.method_after_while@3",
      "stack_in": [
        "x#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "c#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "c#0 (copy)"
      ]
    },
    "197": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "c#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "c#0 (copy)",
        "0"
      ]
    },
    "198": {
      "op": ">",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "x#0",
        "tmp%6#0"
      ]
    },
    "199": {
      "op": "bz test_cases.regression_tests.issue_434.Issue434.method_else_body@5",
      "stack_out": [
        "x#0"
      ]
    },
    "202": {
      "op": "b test_cases.regression_tests.issue_434.Issue434.method_if_body@4"
    },
    "205": {
      "block": "test_cases.regression_tests.issue_434.Issue434.method_if_body@4",
      "stack_in": [
        "x#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "c#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "c#0 (copy)"
      ]
    },
    "207": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "c#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "c#0 (copy)",
        "2"
      ]
    },
    "208": {
      "op": "+",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "x#0",
        "tmp%7#0"
      ]
    },
    "209": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "x#0"
      ]
    },
    "211": {
      "op": "b test_cases.regression_tests.issue_434.Issue434.method_after_if_else@6"
    },
    "214": {
      "block": "test_cases.regression_tests.issue_434.Issue434.method_after_if_else@6",
      "stack_in": [
        "x#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "x#0"
      ]
    },
    "216": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "x#0",
        "2"
      ]
    },
    "217": {
      "op": "-",
      "defined_out": [
        "tmp%9#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "tmp%9#0"
      ]
    },
    "218": {
      "op": "frame_dig -1",
      "defined_out": [
        "c#0 (copy)",
        "tmp%9#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "tmp%9#0",
        "c#0 (copy)"
      ]
    },
    "220": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "tmp%10#0"
      ]
    },
    "221": {
      "op": "assert",
      "stack_out": [
        "x#0"
      ]
    },
    "222": {
      "retsub": true,
      "op": "retsub"
    },
    "223": {
      "block": "test_cases.regression_tests.issue_434.Issue434.method_else_body@5",
      "stack_in": [
        "x#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "c#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "c#0 (copy)"
      ]
    },
    "225": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "c#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "c#0 (copy)",
        "2"
      ]
    },
    "226": {
      "op": "+",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "x#0",
        "tmp%8#0"
      ]
    },
    "227": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "x#0"
      ]
    },
    "229": {
      "op": "b test_cases.regression_tests.issue_434.Issue434.method_after_if_else@6"
    }
  }
}