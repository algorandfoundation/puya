slot_allocation(dynamic, reserved=[])
main test_cases.regression_tests.slot_allocation_inlining.SlotAllocationInlining.approval_program:
    block@0: // L13
        _puya_lib.util.ensure_budget(800u, 0u)
        test_cases.regression_tests.slot_allocation_inlining.do_something_with_array()
        return 1u

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let tmp%0#0: uint64 = (+ required_budget#0 10u)
        let required_budget_with_buffer#0: uint64 = tmp%0#0
        goto block@1
    block@1: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> required_budget_with_buffer#0 tmp%1#0)
        goto tmp%2#0 ? block@2 : block@7
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        switch fee_source#0 {0u => block@3, 1u => block@4, * => block@5}
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@6
    block@4: // switch_case_1_L30
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@6
    block@5: // switch_case_default_L26
        goto block@6
    block@6: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@7: // after_while_L20
        return 

subroutine test_cases.regression_tests.slot_allocation_inlining.do_something_with_array() -> void:
    block@0: // L22
        let aggregate%encoded%0#1: Encoded(uint64[]) = (concat 0x 0x)
        let encoded_array%0#0: Encoded(uint64[]) = aggregate%encoded%0#1
        let slot%0#0: Encoded(uint64[])* = new()
        write(slot%0#0, encoded_array%0#0)
        let arr#0: Encoded(uint64[])* = slot%0#0
        test_cases.regression_tests.slot_allocation_inlining.append_to_array(arr#0)
        let slot_contents%0#0: Encoded(uint64[]) = read(arr#0)
        let bytes_len%0#0: uint64 = (len slot_contents%0#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let tmp%0#0: bool = (== array_len%0#0 32u)
        (assert tmp%0#0) // expected array of length 32
        return 

subroutine test_cases.regression_tests.slot_allocation_inlining.append_to_array(arr: Encoded(uint64[])*) -> void:
    block@0: // L30
        let tmp%0#0: account = (txn Sender)
        let bytes_length%0#0: uint64 = (len tmp%0#0)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L32
        let continue_looping%0#0: bool = (< item_index_internal%0#0 bytes_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L33
        let b#0: bytes = (extract3 tmp%0#0 item_index_internal%0#0 1u)
        let tmp%1#0: uint64 = (btoi b#0)
        let slot_contents%0#0: Encoded(uint64[]) = read(arr#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%encoded%1#1: Encoded(uint64[]) = (concat aggregate%encoded%0#1 0x)
        let tmp%2#0: Encoded(uint64[]) = aggregate%encoded%1#1
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%2#0) // on error: max array length exceeded
        write(arr#0, concat%0#0)
        goto block@3
    block@3: // for_footer_L32
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L32
        return 