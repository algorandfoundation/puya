contract test_cases.regression_tests.issue_118.Issue118:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L1
                let tmp%0#0: bool = test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__() -> bool:
            block@0: // L5
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bool = (!= tmp%0#0 0u)
                goto tmp%1#0 ? block@1 : block@5
            block@1: // abi_routing_L5
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "verify(uint256[])(bool,string)" => block@2, * => block@3}
            block@2: // verify_route_L7
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (== tmp%3#0 NoOp)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: bool = (!= tmp%5#0 0u)
                (assert tmp%6#0) // is not creating
                let tmp%7#0: bytes = (txna ApplicationArgs 1)
                let tmp%8#0: bytes = test_cases.regression_tests.issue_118.Issue118.verify(tmp%7#0)
                let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
                (log tmp%9#0)
                return 1u
            block@3: // switch_case_default_L5
                goto block@4
            block@4: // switch_case_next_L5
                goto block@9
            block@5: // bare_routing_L5
                let tmp%10#0: uint64 = (txn OnCompletion)
                switch tmp%10#0 {0u => block@6, * => block@7}
            block@6: // __algopy_default_create_L1
                let tmp%11#0: uint64 = (txn ApplicationID)
                let tmp%12#0: bool = (== tmp%11#0 0u)
                (assert tmp%12#0) // is creating
                test_cases.regression_tests.issue_118.Issue118.__algopy_default_create()
                return 1u
            block@7: // switch_case_default_L5
                goto block@8
            block@8: // switch_case_next_L5
                goto block@9
            block@9: // after_if_else_L5
                return 0u
        
        subroutine test_cases.regression_tests.issue_118.Issue118.verify(values: bytes) -> bytes:
            block@0: // L7
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let to_encode%0#0: bool = (!= tmp%0#0 0u)
                let encoded_bool%0#0: bytes = (setbit 0x00 0u to_encode%0#0)
                let val1#0: bytes = encoded_bool%0#0
                let tmp%1#0: uint64 = (extract_uint16 values#0 0u)
                let tmp%2#0: bool = (!= tmp%1#0 2u)
                goto tmp%2#0 ? block@1 : block@2
            block@1: // if_body_L13
                let encoded_tuple_buffer%1#0: bytes = (concat 0x val1#0)
                let as_bytes%0#0: bytes = (itob 3u)
                let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 offset_as_uint16%0#0)
                let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 "\x00\x00")
                return encoded_tuple_buffer%3#0
            block@2: // after_if_else_L12
                let encoded_tuple_buffer%5#0: bytes = (concat 0x val1#0)
                let as_bytes%1#0: bytes = (itob 3u)
                let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 offset_as_uint16%1#0)
                let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 "\x00\x00")
                return encoded_tuple_buffer%7#0
        
        subroutine test_cases.regression_tests.issue_118.Issue118.__algopy_default_create() -> void:
            block@0: // L1
                return 
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u