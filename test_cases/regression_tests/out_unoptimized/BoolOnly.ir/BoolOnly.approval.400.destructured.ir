main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@11
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion is not NoOp
        let tmp%4#0: bool = (txn ApplicationID)
        goto tmp%4#0 ? block@3 : block@9
    block@3: // call_NoOp_L4
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "set_0_convert(byte[])byte[]" => block@4, method "set_0_compare(byte[])byte[]" => block@5, method "bool_only_properties()void" => block@6, * => block@7}
    block@4: // set_0_convert_route_L5
        test_cases.regression_tests.bool_only.BoolOnly.set_0_convert[routing]()
        goto block@8
    block@5: // set_0_compare_route_L9
        test_cases.regression_tests.bool_only.BoolOnly.set_0_compare[routing]()
        goto block@8
    block@6: // bool_only_properties_route_L13
        test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties[routing]()
        goto block@8
    block@7: // switch_case_default_L4
        goto block@8
    block@8: // switch_case_next_L4
        goto block@10
    block@9: // create_NoOp_L4
        goto block@10
    block@10: // after_if_else_L4
        goto block@12
    block@11: // __algopy_default_create_L1
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (== tmp%6#0 NoOp)
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        let tmp%10#0: bool = (&& tmp%7#0 tmp%9#0)
        (assert tmp%10#0) // OnCompletion must be NoOp && can only call when creating
        goto block@14
    block@14: // L1
        goto block@15
    block@15: // after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__algopy_default_create_L1
        exit 1u
    block@12: // after_if_else_L4
        exit 0u
    block@13: // after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.regression_tests.bool_only.BoolOnly.set_0_convert[routing]() -> void:
    block@0: // L5
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%1#0: bytes = test_cases.regression_tests.bool_only.BoolOnly.set_0_convert(tmp%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%1#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%1#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%2#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.regression_tests.bool_only.BoolOnly.set_0_compare[routing]() -> void:
    block@0: // L9
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%1#0: bytes = test_cases.regression_tests.bool_only.BoolOnly.set_0_compare(tmp%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%1#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%1#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%2#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties[routing]() -> void:
    block@0: // L13
        test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties()
        exit 1u

subroutine test_cases.regression_tests.bool_only.BoolOnly.set_0_convert(inp: bytes) -> bytes:
    block@0: // L5
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        let tmp%2#0: bytes = (setbit inp#0 0u tmp%1#0)
        return tmp%2#0

subroutine test_cases.regression_tests.bool_only.BoolOnly.set_0_compare(inp: bytes) -> bytes:
    block@0: // L9
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (> tmp%0#0 0u)
        let tmp%2#0: bytes = (setbit inp#0 0u tmp%1#0)
        return tmp%2#0

subroutine test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties() -> void:
    block@0: // L13
        itxn_begin
        ((itxn_field TypeEnum) acfg)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        ((itxn_field ConfigAssetDefaultFrozen) tmp%1#0)
        itxn_submit
        itxn_begin
        ((itxn_field Nonparticipation) 1u)
        ((itxn_field TypeEnum) keyreg)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L20
        itxn_submit
        return 