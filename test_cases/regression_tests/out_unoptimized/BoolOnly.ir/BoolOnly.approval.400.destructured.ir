main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@2, 1u => block@8, 2u => block@11, 3u => block@12, 4u => block@13, 5u => block@14, 6u => block@15, 7u => block@16, 8u => block@17, 9u => block@18, 10u => block@19, 11u => block@20, * => block@21}
    block@2: // switch_case_0_L4
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "set_0_convert(byte[])byte[]" => block@3, method "set_0_compare(byte[])byte[]" => block@4, method "bool_only_properties()void" => block@5, * => block@6}
    block@3: // set_0_convert_route_L5
        test_cases.regression_tests.bool_only.BoolOnly.set_0_convert[routing]()
        goto block@7
    block@4: // set_0_compare_route_L9
        test_cases.regression_tests.bool_only.BoolOnly.set_0_compare[routing]()
        goto block@7
    block@5: // bool_only_properties_route_L13
        test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties[routing]()
        goto block@7
    block@6: // switch_case_default_L4
        goto block@7
    block@7: // switch_case_next_L4
        fail // this contract does not implement the given ABI method for call NoOp
    block@8: // switch_case_1_L4
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@9 : block@10
    block@9: // __algopy_default_create_L1
        goto block@23
    block@23: // L1
        goto block@24
    block@24: // after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__algopy_default_create_L1
        exit 1u
    block@10: // else_body_L4
        fail // this contract does not implement the given ABI method for create NoOp
    block@11: // switch_case_2_L4
        goto block@21
    block@12: // switch_case_3_L4
        goto block@21
    block@13: // switch_case_4_L4
        goto block@21
    block@14: // switch_case_5_L4
        goto block@21
    block@15: // switch_case_6_L4
        goto block@21
    block@16: // switch_case_7_L4
        goto block@21
    block@17: // switch_case_8_L4
        goto block@21
    block@18: // switch_case_9_L4
        goto block@21
    block@19: // switch_case_10_L4
        goto block@21
    block@20: // switch_case_11_L4
        goto block@21
    block@21: // switch_case_default_L4
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
    block@22: // after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.regression_tests.bool_only.BoolOnly.set_0_convert[routing]() -> void:
    block@0: // L5
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%1#0: bytes = test_cases.regression_tests.bool_only.BoolOnly.set_0_convert(tmp%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%1#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%1#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%2#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.regression_tests.bool_only.BoolOnly.set_0_compare[routing]() -> void:
    block@0: // L9
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%1#0: bytes = test_cases.regression_tests.bool_only.BoolOnly.set_0_compare(tmp%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%1#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%1#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%2#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties[routing]() -> void:
    block@0: // L13
        test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties()
        exit 1u

subroutine test_cases.regression_tests.bool_only.BoolOnly.set_0_convert(inp: bytes) -> bytes:
    block@0: // L5
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        let tmp%2#0: bytes = (setbit inp#0 0u tmp%1#0)
        return tmp%2#0

subroutine test_cases.regression_tests.bool_only.BoolOnly.set_0_compare(inp: bytes) -> bytes:
    block@0: // L9
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (> tmp%0#0 0u)
        let tmp%2#0: bytes = (setbit inp#0 0u tmp%1#0)
        return tmp%2#0

subroutine test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties() -> void:
    block@0: // L13
        itxn_begin
        ((itxn_field TypeEnum) acfg)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        ((itxn_field ConfigAssetDefaultFrozen) tmp%1#0)
        itxn_submit
        itxn_begin
        ((itxn_field Nonparticipation) 1u)
        ((itxn_field TypeEnum) keyreg)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L20
        itxn_submit
        return 