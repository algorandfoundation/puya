{
  "version": 3,
  "sources": [
    "../branch_to_proto.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;AAAA;AACK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAEiB;;;AAAQ;AAAtB;;;AACO;;AAAA;;AAAA;;AAAA;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2"
    },
    "6": {
      "op": "bytecblock 0x068101"
    },
    "12": {
      "op": "b main_block@0"
    },
    "15": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "18": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "20": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "21": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "22": {
      "op": "bz main___algopy_default_create@5",
      "stack_out": []
    },
    "25": {
      "op": "b main_abi_routing@2"
    },
    "28": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "31": {
      "op": "pushbytes 0x6e50bd99 // method \"verify(byte[],byte[],byte[])(byte[],bool)\"",
      "defined_out": [
        "Method(verify(byte[],byte[],byte[])(byte[],bool))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(verify(byte[],byte[],byte[])(byte[],bool))"
      ]
    },
    "37": {
      "op": "uncover 1",
      "stack_out": [
        "Method(verify(byte[],byte[],byte[])(byte[],bool))",
        "tmp%2#0"
      ]
    },
    "39": {
      "op": "match main_verify_route@3",
      "stack_out": []
    },
    "43": {
      "op": "b main_switch_case_next@4"
    },
    "46": {
      "block": "main_switch_case_next@4",
      "stack_in": [],
      "op": "b main_after_if_else@6"
    },
    "49": {
      "block": "main_after_if_else@6",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "50": {
      "block": "main_verify_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "52": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "53": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "54": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "56": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0"
      ]
    },
    "57": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "58": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "59": {
      "error": "OnCompletion must be NoOp && can only call when not creating",
      "op": "assert // OnCompletion must be NoOp && can only call when not creating",
      "stack_out": []
    },
    "60": {
      "callsub": "test_cases.regression_tests.branch_to_proto.VRFVerifier.verify[routing]",
      "op": "callsub verify"
    },
    "63": {
      "op": "b main_switch_case_next@4"
    },
    "66": {
      "block": "main___algopy_default_create@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "68": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "69": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "70": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "72": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "0"
      ]
    },
    "73": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "74": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "75": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "76": {
      "op": "b main_block@8"
    },
    "79": {
      "block": "main_block@8",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.regression_tests.branch_to_proto.VRFVerifier.__algopy_default_create@9"
    },
    "82": {
      "block": "main_after_inlined_test_cases.regression_tests.branch_to_proto.VRFVerifier.__algopy_default_create@9",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "83": {
      "op": "return",
      "stack_out": []
    },
    "84": {
      "subroutine": "_puya_lib.util.ensure_budget",
      "params": {
        "required_budget#0": "uint64",
        "fee_source#0": "uint64"
      },
      "block": "ensure_budget",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "87": {
      "op": "b ensure_budget_block@0"
    },
    "90": {
      "block": "ensure_budget_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)"
      ]
    },
    "92": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)",
        "10"
      ]
    },
    "94": {
      "op": "+",
      "defined_out": [],
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "95": {
      "op": "b ensure_budget_while_top@1"
    },
    "98": {
      "block": "ensure_budget_while_top@1",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "global OpcodeBudget",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ]
    },
    "100": {
      "op": "frame_dig 0",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0",
        "required_budget_with_buffer#0"
      ]
    },
    "102": {
      "op": "<",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%2#0"
      ]
    },
    "103": {
      "op": "bz ensure_budget_after_while@6",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "106": {
      "op": "b ensure_budget_while_body@2"
    },
    "109": {
      "block": "ensure_budget_while_body@2",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "itxn_begin"
    },
    "110": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "appl"
      ]
    },
    "112": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "114": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "DeleteApplication"
      ]
    },
    "116": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "118": {
      "op": "bytec_0 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "119": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "121": {
      "op": "bytec_0 // 0x068101",
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "122": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "124": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0"
      ]
    },
    "125": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "1"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0",
        "1"
      ]
    },
    "126": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "1",
        "fee_source#0 (copy)"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0",
        "1",
        "fee_source#0 (copy)"
      ]
    },
    "128": {
      "op": "match ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "134": {
      "op": "b ensure_budget_switch_case_next@5"
    },
    "137": {
      "block": "ensure_budget_switch_case_next@5",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "itxn_submit"
    },
    "138": {
      "op": "b ensure_budget_while_top@1"
    },
    "141": {
      "block": "ensure_budget_switch_case_1@4",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%3#0"
      ]
    },
    "143": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "145": {
      "op": "b ensure_budget_switch_case_next@5"
    },
    "148": {
      "block": "ensure_budget_switch_case_0@3",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0"
      ]
    },
    "149": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "151": {
      "op": "b ensure_budget_switch_case_next@5"
    },
    "154": {
      "block": "ensure_budget_after_while@6",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "155": {
      "subroutine": "test_cases.regression_tests.branch_to_proto.VRFVerifier.verify[routing]",
      "params": {},
      "block": "verify",
      "stack_in": [],
      "op": "b verify_block@0"
    },
    "158": {
      "block": "verify_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "161": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "162": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "163": {
      "op": "extract_uint16",
      "defined_out": [
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0"
      ]
    },
    "164": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0",
        "1"
      ]
    },
    "165": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0"
      ]
    },
    "166": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "167": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "168": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "170": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "171": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "172": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "173": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "176": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "179": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "180": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "181": {
      "op": "extract_uint16",
      "defined_out": [
        "length%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "length%1#0"
      ]
    },
    "182": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "length%1#0",
        "1"
      ]
    },
    "183": {
      "op": "*",
      "defined_out": [
        "mul%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "mul%1#0"
      ]
    },
    "184": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "mul%1#0",
        "2"
      ]
    },
    "185": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "add%1#0"
      ]
    },
    "186": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "188": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "189": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "190": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "defined_out": [
        "as_Encoded(len+uint8[])%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint8[])%1#0"
      ]
    },
    "191": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "194": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "197": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "198": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "0"
      ]
    },
    "199": {
      "op": "extract_uint16",
      "defined_out": [
        "length%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "length%2#0"
      ]
    },
    "200": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "length%2#0",
        "1"
      ]
    },
    "201": {
      "op": "*",
      "defined_out": [
        "mul%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "mul%2#0"
      ]
    },
    "202": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "mul%2#0",
        "2"
      ]
    },
    "203": {
      "op": "+",
      "defined_out": [
        "add%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "add%2#0"
      ]
    },
    "204": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "add%2#0",
        "tmp%4#0 (copy)"
      ]
    },
    "206": {
      "op": "len",
      "defined_out": [
        "add%2#0",
        "len%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "add%2#0",
        "len%2#0"
      ]
    },
    "207": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "eq%2#0"
      ]
    },
    "208": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "defined_out": [
        "as_Encoded(len+uint8[])%2#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "as_Encoded(len+uint8[])%2#0"
      ]
    },
    "209": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "212": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%1#0"
      ]
    },
    "214": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%5#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "216": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "218": {
      "callsub": "test_cases.regression_tests.branch_to_proto.VRFVerifier.verify",
      "op": "callsub test_cases.regression_tests.branch_to_proto.VRFVerifier.verify",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "221": {
      "op": "cover 1",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0"
      ]
    },
    "223": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "224": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%length%0#0"
      ]
    },
    "225": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "226": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "229": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%7#0",
        "aggregate%length_uint16%0#0",
        "tmp%6#0"
      ]
    },
    "231": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "232": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "3"
      ]
    },
    "234": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "235": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "238": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "240": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "242": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%0#0"
      ]
    },
    "243": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%0#0",
        "0x00"
      ]
    },
    "246": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%0#0",
        "0x00",
        "0"
      ]
    },
    "247": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%0#0",
        "0x00",
        "0",
        "tmp%7#0"
      ]
    },
    "249": {
      "op": "setbit",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%encoded_bool%0#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%0#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "250": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0"
      ]
    },
    "251": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "253": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "254": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "260": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%8#0"
      ]
    },
    "262": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "263": {
      "op": "log",
      "stack_out": []
    },
    "264": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "265": {
      "op": "return",
      "stack_out": []
    },
    "266": {
      "subroutine": "test_cases.regression_tests.branch_to_proto.VRFVerifier.verify",
      "params": {
        "message#0": "bytes",
        "proof#0": "bytes",
        "pk#0": "bytes"
      },
      "block": "test_cases.regression_tests.branch_to_proto.VRFVerifier.verify",
      "stack_in": [],
      "op": "proto 3 2"
    },
    "269": {
      "op": "b test_cases.regression_tests.branch_to_proto.VRFVerifier.verify_block@0"
    },
    "272": {
      "block": "test_cases.regression_tests.branch_to_proto.VRFVerifier.verify_block@0",
      "stack_in": [],
      "op": "pushint 10000 // 10000",
      "defined_out": [
        "10000"
      ],
      "stack_out": [
        "10000"
      ]
    },
    "275": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "10000"
      ],
      "stack_out": [
        "10000",
        "1"
      ]
    },
    "276": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "279": {
      "op": "frame_dig -3",
      "defined_out": [
        "message#0 (copy)"
      ],
      "stack_out": [
        "message#0 (copy)"
      ]
    },
    "281": {
      "op": "frame_dig -2",
      "defined_out": [
        "message#0 (copy)",
        "proof#0 (copy)"
      ],
      "stack_out": [
        "message#0 (copy)",
        "proof#0 (copy)"
      ]
    },
    "283": {
      "op": "frame_dig -1",
      "defined_out": [
        "message#0 (copy)",
        "pk#0 (copy)",
        "proof#0 (copy)"
      ],
      "stack_out": [
        "message#0 (copy)",
        "proof#0 (copy)",
        "pk#0 (copy)"
      ]
    },
    "285": {
      "op": "vrf_verify VrfAlgorand",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "287": {
      "retsub": true,
      "op": "retsub"
    }
  }
}