{
  "version": 3,
  "sources": [
    "../branch_to_proto.py"
  ],
  "mappings": ";;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;;AACK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AACK;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;;AADL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;AAEsB;;;AAAQ;AAAtB;;;AACO;;AAAA;;AAAA;;AAAA;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x068101"
    },
    "11": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "13": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "14": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "15": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "18": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "21": {
      "op": "pushbytes 0x6e50bd99 // method \"verify(byte[],byte[],byte[])(byte[],bool)\"",
      "defined_out": [
        "Method(verify(byte[],byte[],byte[])(byte[],bool))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(verify(byte[],byte[],byte[])(byte[],bool))"
      ]
    },
    "27": {
      "op": "swap",
      "stack_out": [
        "Method(verify(byte[],byte[],byte[])(byte[],bool))",
        "tmp%2#0"
      ]
    },
    "28": {
      "op": "match main_verify_route@3",
      "stack_out": []
    },
    "32": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "33": {
      "block": "main_after_inlined_test_cases.regression_tests.branch_to_proto.VRFVerifier.__puya_arc4_router__@11",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "34": {
      "block": "main_verify_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "36": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "37": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "38": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "39": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "41": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "42": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "43": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "44": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "47": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "50": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "53": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "56": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "59": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "62": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%8#0"
      ]
    },
    "64": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%12#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "66": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "68": {
      "callsub": "test_cases.regression_tests.branch_to_proto.VRFVerifier.verify",
      "op": "callsub verify",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "71": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%0#0"
      ]
    },
    "72": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%0#0 (copy)",
        "elements_to_encode%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%0#0",
        "elements_to_encode%0#0 (copy)"
      ]
    },
    "73": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "length%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%0#0",
        "length%0#0"
      ]
    },
    "74": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "75": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "length_uint16%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "78": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%1#0",
        "length_uint16%0#0",
        "elements_to_encode%0#0"
      ]
    },
    "79": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "encoded_value%0#0"
      ]
    },
    "80": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "81": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "elements_to_encode%1#0",
        "0x00"
      ]
    },
    "84": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_value%0#0",
        "elements_to_encode%1#0",
        "0x00",
        "0"
      ]
    },
    "85": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "0x00",
        "0",
        "elements_to_encode%1#0"
      ]
    },
    "87": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_bool%0#0"
      ]
    },
    "88": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "encoded_bool%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_bool%0#0",
        "3"
      ]
    },
    "90": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded_bool%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_bool%0#0",
        "as_bytes%1#0"
      ]
    },
    "91": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "offset_as_uint16%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_bool%0#0",
        "offset_as_uint16%0#0"
      ]
    },
    "94": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "offset_as_uint16%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_bool%0#0",
        "offset_as_uint16%0#0",
        "0x"
      ]
    },
    "96": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_bool%0#0",
        "0x",
        "offset_as_uint16%0#0"
      ]
    },
    "97": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "98": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "encoded_bool%0#0"
      ]
    },
    "99": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "100": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ]
    },
    "101": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "102": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "0x151f7c75"
      ]
    },
    "108": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "109": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "110": {
      "op": "log",
      "stack_out": []
    },
    "111": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "112": {
      "op": "b main_after_inlined_test_cases.regression_tests.branch_to_proto.VRFVerifier.__puya_arc4_router__@11"
    },
    "115": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "117": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "0"
      ]
    },
    "118": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%14#0"
      ]
    },
    "119": {
      "op": "match main___algopy_default_create@7",
      "stack_out": []
    },
    "123": {
      "block": "main_switch_case_next@9",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "126": {
      "block": "main___algopy_default_create@7",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "128": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0"
      ]
    },
    "129": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "130": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "131": {
      "block": "main_after_inlined_test_cases.regression_tests.branch_to_proto.VRFVerifier.__algopy_default_create@13",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "132": {
      "op": "b main_after_inlined_test_cases.regression_tests.branch_to_proto.VRFVerifier.__puya_arc4_router__@11"
    },
    "135": {
      "subroutine": "_puya_lib.util.ensure_budget",
      "params": {
        "required_budget#0": "uint64",
        "fee_source#0": "uint64"
      },
      "block": "ensure_budget",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "138": {
      "block": "ensure_budget_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)"
      ]
    },
    "140": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)",
        "10"
      ]
    },
    "142": {
      "op": "+",
      "defined_out": [
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "143": {
      "block": "ensure_budget_while_top@1",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "global OpcodeBudget",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ]
    },
    "145": {
      "op": "frame_dig 0",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%0#0",
        "required_budget_with_buffer#0"
      ]
    },
    "147": {
      "op": "<",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ]
    },
    "148": {
      "op": "bz ensure_budget_after_while@7",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "151": {
      "block": "ensure_budget_while_body@2",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "itxn_begin"
    },
    "152": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "appl"
      ]
    },
    "154": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "156": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "DeleteApplication"
      ]
    },
    "158": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "160": {
      "op": "bytec_0 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "161": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "163": {
      "op": "bytec_0 // 0x068101",
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "164": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "166": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0"
      ]
    },
    "167": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "1"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0",
        "1"
      ]
    },
    "168": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "1",
        "fee_source#0 (copy)"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0",
        "1",
        "fee_source#0 (copy)"
      ]
    },
    "170": {
      "op": "match ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "176": {
      "block": "ensure_budget_switch_case_next@6",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "itxn_submit"
    },
    "177": {
      "op": "b ensure_budget_while_top@1"
    },
    "180": {
      "block": "ensure_budget_switch_case_1@4",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%2#0"
      ]
    },
    "182": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "184": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "187": {
      "block": "ensure_budget_switch_case_0@3",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0"
      ]
    },
    "188": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "190": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "193": {
      "block": "ensure_budget_after_while@7",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "194": {
      "subroutine": "test_cases.regression_tests.branch_to_proto.VRFVerifier.verify",
      "params": {
        "message#0": "bytes",
        "proof#0": "bytes",
        "pk#0": "bytes"
      },
      "block": "verify",
      "stack_in": [],
      "op": "proto 3 2"
    },
    "197": {
      "block": "verify_block@0",
      "stack_in": [],
      "op": "pushint 10000 // 10000",
      "defined_out": [
        "10000"
      ],
      "stack_out": [
        "10000"
      ]
    },
    "200": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "10000"
      ],
      "stack_out": [
        "10000",
        "1"
      ]
    },
    "201": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "204": {
      "op": "frame_dig -3",
      "defined_out": [
        "message#0 (copy)"
      ],
      "stack_out": [
        "message#0 (copy)"
      ]
    },
    "206": {
      "op": "frame_dig -2",
      "defined_out": [
        "message#0 (copy)",
        "proof#0 (copy)"
      ],
      "stack_out": [
        "message#0 (copy)",
        "proof#0 (copy)"
      ]
    },
    "208": {
      "op": "frame_dig -1",
      "defined_out": [
        "message#0 (copy)",
        "pk#0 (copy)",
        "proof#0 (copy)"
      ],
      "stack_out": [
        "message#0 (copy)",
        "proof#0 (copy)",
        "pk#0 (copy)"
      ]
    },
    "210": {
      "op": "vrf_verify VrfAlgorand",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "212": {
      "retsub": true,
      "op": "retsub"
    }
  }
}