#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0
    bytecblock 0x151f7c75 0x010000000000000000
    b block@0

block@0:
    b block@1

block@1:
    // regression_tests/biguint_opt.py:4
    // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
    txn ApplicationID
    !
    txn OnCompletion
    intc_0 // 1
    shl
    +
    intc_1 // 0
    intc_0 // 1
    pushint 2 // 2
    pushint 3 // 3
    pushint 4 // 4
    pushint 5 // 5
    pushint 6 // 6
    pushint 7 // 7
    pushint 8 // 8
    pushint 9 // 9
    pushint 10 // 10
    pushint 11 // 11
    uncover 12
    match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication
    b *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    // regression_tests/biguint_opt.py:4
    // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_DeleteApplication:
    // regression_tests/biguint_opt.py:4
    // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_DeleteApplication:
    // regression_tests/biguint_opt.py:4
    // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_UpdateApplication:
    // regression_tests/biguint_opt.py:4
    // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_UpdateApplication:
    // regression_tests/biguint_opt.py:4
    // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_ClearState:
    // regression_tests/biguint_opt.py:4
    // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_ClearState:
    // regression_tests/biguint_opt.py:4
    // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_CloseOut:
    // regression_tests/biguint_opt.py:4
    // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_CloseOut:
    // regression_tests/biguint_opt.py:4
    // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_OptIn:
    // regression_tests/biguint_opt.py:4
    // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_OptIn:
    // regression_tests/biguint_opt.py:4
    // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_NoOp:
    // regression_tests/biguint_opt.py:4
    // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
    txn NumAppArgs
    intc_1 // 0
    ==
    bz else_body@9
    b __algopy_default_create@8

__algopy_default_create@8:
    b block@22

block@22:
    b after_inlined_test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__algopy_default_create@23

after_inlined_test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__algopy_default_create@23:
    intc_0 // 1
    return

else_body@9:
    // regression_tests/biguint_opt.py:4
    // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
    err // this contract does not implement the given ABI method for create NoOp

call_NoOp:
    // regression_tests/biguint_opt.py:4
    // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x58db7ce9 // method "get_abs_bound1(uint64)uint64"
    pushbytes 0xc95c01ca // method "get_abs_bound2()uint64"
    uncover 2
    match get_abs_bound1_route@3 get_abs_bound2_route@4
    b switch_case_default@5

switch_case_default@5:
    b switch_case_next@6

switch_case_next@6:
    // regression_tests/biguint_opt.py:4
    // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
    err // this contract does not implement the given ABI method for call NoOp

get_abs_bound2_route@4:
    // regression_tests/biguint_opt.py:4
    // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
    callsub get_abs_bound2
    b switch_case_next@6

get_abs_bound1_route@3:
    // regression_tests/biguint_opt.py:4
    // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
    callsub get_abs_bound1
    b switch_case_next@6


// test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1[routing]() -> void:
get_abs_bound1:
    b get_abs_bound1_block@0

get_abs_bound1_block@0:
    // regression_tests/biguint_opt.py:5
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    callsub test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1
    itob
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2[routing]() -> void:
get_abs_bound2:
    b get_abs_bound2_block@0

get_abs_bound2_block@0:
    // regression_tests/biguint_opt.py:17
    // @arc4.abimethod()
    callsub test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2
    itob
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1(upper_bound: uint64) -> uint64:
test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1:
    // regression_tests/biguint_opt.py:5-6
    // @arc4.abimethod()
    // def get_abs_bound1(self, upper_bound: UInt64) -> UInt64:
    proto 1 1
    b test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_block@0

test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_block@0:
    // regression_tests/biguint_opt.py:7
    // abs_bound = lower_bound = UInt64(0)
    intc_1 // 0
    // regression_tests/biguint_opt.py:8
    // if upper_bound:
    frame_dig -1
    intc_1 // 0
    !=
    bz test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_after_if_else@2
    b test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_if_body@1

test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_if_body@1:
    // regression_tests/biguint_opt.py:7
    // abs_bound = lower_bound = UInt64(0)
    intc_1 // 0
    // regression_tests/biguint_opt.py:9-13
    // # if upper bound is truthy, then this will error at run time
    // # but optimizer should not replace this op in this case since it is guarded
    // # TODO: it would be nice if the optimizer could just replace this failure
    // #       with an err, but that would require terminating the block as part of optimizing
    // abs_bound = op.btoi((BigUInt(1 << 64) - lower_bound).bytes)
    itob
    bytec_1 // 0x010000000000000000
    uncover 1
    b-
    btoi
    frame_bury 0
    b test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_after_if_else@2

test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1_after_if_else@2:
    // regression_tests/biguint_opt.py:15
    // return abs_bound
    frame_dig 0
    uncover 1
    retsub


// test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2() -> uint64:
test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2:
    b test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2_block@0

test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2_block@0:
    // regression_tests/biguint_opt.py:19-21
    // # this variant resulted in the optimization bug appearing in the router after inlining
    // # this function
    // abs_bound = op.btoi((BigUInt(1 << 64) - 0).bytes)
    bytec_1 // 0x010000000000000000
    pushbytes 0x
    b-
    btoi
    // regression_tests/biguint_opt.py:23
    // return abs_bound
    retsub
