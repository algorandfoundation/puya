#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 32 0 2 1
    b block@0

block@0:
    b block@1

block@1:
    // regression_tests/jira_ak_752.py:12
    // class Verifier(algopy.ARC4Contract):
    txn NumAppArgs
    intc_1 // 0
    !=
    bz __algopy_default_create@6
    b abi_routing@2

abi_routing@2:
    // regression_tests/jira_ak_752.py:12
    // class Verifier(algopy.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x49e82748 // method "verify(byte[32][])byte[]"
    uncover 1
    match verify_route@3
    b switch_case_default@4

switch_case_default@4:
    b switch_case_next@5

switch_case_next@5:
    b after_if_else@7

after_if_else@7:
    // regression_tests/jira_ak_752.py:12
    // class Verifier(algopy.ARC4Contract):
    err

verify_route@3:
    // regression_tests/jira_ak_752.py:13
    // @abimethod
    txn OnCompletion
    intc_1 // NoOp
    ==
    txn ApplicationID
    intc_1 // 0
    !=
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    callsub verify
    b switch_case_next@5

__algopy_default_create@6:
    txn OnCompletion
    intc_1 // NoOp
    ==
    txn ApplicationID
    intc_1 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b block@9

block@9:
    b after_inlined_test_cases.regression_tests.jira_ak_752.Verifier.__algopy_default_create@10

after_inlined_test_cases.regression_tests.jira_ak_752.Verifier.__algopy_default_create@10:
    intc_3 // 1
    return


// test_cases.regression_tests.jira_ak_752.Verifier.verify[routing]() -> void:
verify:
    b verify_block@0

verify_block@0:
    // regression_tests/jira_ak_752.py:13
    // @abimethod
    txna ApplicationArgs 1
    callsub test_cases.regression_tests.jira_ak_752.Verifier.verify
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    pushbytes 0x151f7c75
    uncover 1
    concat
    log
    intc_3 // 1
    return


// test_cases.regression_tests.jira_ak_752.Verifier.verify(proof: bytes) -> bytes:
test_cases.regression_tests.jira_ak_752.Verifier.verify:
    // regression_tests/jira_ak_752.py:13-17
    // @abimethod
    // def verify(
    //     self,
    //     proof: DynamicArray[Bytes32],
    // ) -> algopy.Bytes:
    proto 1 1
    b test_cases.regression_tests.jira_ak_752.Verifier.verify_block@0

test_cases.regression_tests.jira_ak_752.Verifier.verify_block@0:
    // regression_tests/jira_ak_752.py:18
    // x = proof[8].bytes  # ok
    frame_dig -1
    len
    frame_dig -1
    intc_2 // 2
    uncover 2
    substring3
    pushint 8 // 8
    intc_0 // 32
    *
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    // regression_tests/jira_ak_752.py:19
    // y = proof[6].bytes + proof[7].bytes  # ok
    frame_dig -1
    len
    frame_dig -1
    intc_2 // 2
    uncover 2
    substring3
    pushint 6 // 6
    intc_0 // 32
    *
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    frame_dig -1
    len
    frame_dig -1
    intc_2 // 2
    uncover 2
    substring3
    pushint 7 // 7
    intc_0 // 32
    *
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    concat
    // regression_tests/jira_ak_752.py:20
    // z = proof[7].bytes + proof[8].bytes  # Invalid immediate, expected value between 0 and 255
    frame_dig -1
    len
    frame_dig -1
    intc_2 // 2
    uncover 2
    substring3
    pushint 7 // 7
    intc_0 // 32
    *
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    frame_dig -1
    len
    frame_dig -1
    intc_2 // 2
    uncover 2
    substring3
    pushint 8 // 8
    intc_0 // 32
    *
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    concat
    // regression_tests/jira_ak_752.py:22
    // return x + y + z
    uncover 2
    uncover 2
    concat
    uncover 1
    concat
    retsub
