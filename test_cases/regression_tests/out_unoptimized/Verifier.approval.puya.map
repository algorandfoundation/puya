{
  "version": 3,
  "sources": [
    "../jira_ak_752.py"
  ],
  "mappings": ";;;;;;;;;;;;;AAWA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;;;;AAAA;AACK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAL;;;;;;AAKY;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAM;;AAAN;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAM;;AAAN;AAAA;AAAA;AAAA;AAAiB;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAM;;AAAN;AAAA;AAAA;AAAA;AAAjB;AACA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAM;;AAAN;AAAA;AAAA;AAAA;AAAiB;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAM;;AAAN;AAAA;AAAA;AAAA;AAAjB;AAEG;;AAAA;;AAAA;AAAA;;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 32 0 2 1"
    },
    "7": {
      "op": "b block@0"
    },
    "10": {
      "block": "block@0",
      "stack_in": [],
      "op": "b block@1"
    },
    "13": {
      "block": "block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "15": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "16": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "17": {
      "op": "bz __algopy_default_create@6",
      "stack_out": []
    },
    "20": {
      "op": "b abi_routing@2"
    },
    "23": {
      "block": "abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "26": {
      "op": "pushbytes 0x49e82748 // method \"verify(byte[32][])byte[]\"",
      "defined_out": [
        "Method(verify(byte[32][])byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(verify(byte[32][])byte[])"
      ]
    },
    "32": {
      "op": "uncover 1",
      "stack_out": [
        "Method(verify(byte[32][])byte[])",
        "tmp%2#0"
      ]
    },
    "34": {
      "op": "match verify_route@3",
      "stack_out": []
    },
    "38": {
      "op": "b switch_case_default@4"
    },
    "41": {
      "block": "switch_case_default@4",
      "stack_in": [],
      "op": "b switch_case_next@5"
    },
    "44": {
      "block": "switch_case_next@5",
      "stack_in": [],
      "op": "b after_if_else@7"
    },
    "47": {
      "block": "after_if_else@7",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "48": {
      "block": "verify_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "50": {
      "op": "intc_1 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "51": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "52": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "54": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0"
      ]
    },
    "55": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "56": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "57": {
      "error": "OnCompletion must be NoOp && can only call when not creating",
      "op": "assert // OnCompletion must be NoOp && can only call when not creating",
      "stack_out": []
    },
    "58": {
      "callsub": "test_cases.regression_tests.jira_ak_752.Verifier.verify[routing]",
      "op": "callsub verify"
    },
    "61": {
      "op": "b switch_case_next@5"
    },
    "64": {
      "block": "__algopy_default_create@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "66": {
      "op": "intc_1 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "67": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "68": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "70": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "0"
      ]
    },
    "71": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "72": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "73": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "74": {
      "op": "b block@9"
    },
    "77": {
      "block": "block@9",
      "stack_in": [],
      "op": "b after_inlined_test_cases.regression_tests.jira_ak_752.Verifier.__algopy_default_create@10"
    },
    "80": {
      "block": "after_inlined_test_cases.regression_tests.jira_ak_752.Verifier.__algopy_default_create@10",
      "stack_in": [],
      "op": "intc_3 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "81": {
      "op": "return",
      "stack_out": []
    },
    "82": {
      "subroutine": "test_cases.regression_tests.jira_ak_752.Verifier.verify[routing]",
      "params": {},
      "block": "verify",
      "stack_in": [],
      "op": "b verify_block@0"
    },
    "85": {
      "block": "verify_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[32][])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[32][])%0#0"
      ]
    },
    "88": {
      "callsub": "test_cases.regression_tests.jira_ak_752.Verifier.verify",
      "op": "callsub test_cases.regression_tests.jira_ak_752.Verifier.verify",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "91": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "92": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%0#0"
      ]
    },
    "93": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "94": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "97": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "99": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "100": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "106": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "108": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "109": {
      "op": "log",
      "stack_out": []
    },
    "110": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "111": {
      "op": "return",
      "stack_out": []
    },
    "112": {
      "subroutine": "test_cases.regression_tests.jira_ak_752.Verifier.verify",
      "params": {
        "proof#0": "bytes"
      },
      "block": "test_cases.regression_tests.jira_ak_752.Verifier.verify",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "115": {
      "op": "b test_cases.regression_tests.jira_ak_752.Verifier.verify_block@0"
    },
    "118": {
      "block": "test_cases.regression_tests.jira_ak_752.Verifier.verify_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "proof#0 (copy)"
      ],
      "stack_out": [
        "proof#0 (copy)"
      ]
    },
    "120": {
      "op": "len",
      "defined_out": [
        "aggregate%total_length%0#0"
      ],
      "stack_out": [
        "aggregate%total_length%0#0"
      ]
    },
    "121": {
      "op": "frame_dig -1",
      "stack_out": [
        "aggregate%total_length%0#0",
        "proof#0 (copy)"
      ]
    },
    "123": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%total_length%0#0",
        "proof#0 (copy)"
      ],
      "stack_out": [
        "aggregate%total_length%0#0",
        "proof#0 (copy)",
        "2"
      ]
    },
    "124": {
      "op": "uncover 2",
      "stack_out": [
        "proof#0 (copy)",
        "2",
        "aggregate%total_length%0#0"
      ]
    },
    "126": {
      "op": "substring3",
      "defined_out": [
        "aggregate%array_trimmed%0#0"
      ],
      "stack_out": [
        "aggregate%array_trimmed%0#0"
      ]
    },
    "127": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "aggregate%array_trimmed%0#0"
      ],
      "stack_out": [
        "aggregate%array_trimmed%0#0",
        "8"
      ]
    },
    "129": {
      "op": "intc_0 // 32",
      "defined_out": [
        "32",
        "8",
        "aggregate%array_trimmed%0#0"
      ],
      "stack_out": [
        "aggregate%array_trimmed%0#0",
        "8",
        "32"
      ]
    },
    "130": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0"
      ],
      "stack_out": [
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "131": {
      "op": "intc_0 // 32",
      "stack_out": [
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "32"
      ]
    },
    "132": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0"
      ]
    },
    "133": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0",
        "proof#0 (copy)"
      ]
    },
    "135": {
      "op": "len",
      "defined_out": [
        "aggregate%total_length%1#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%total_length%1#0"
      ]
    },
    "136": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0",
        "aggregate%total_length%1#0",
        "proof#0 (copy)"
      ]
    },
    "138": {
      "op": "intc_2 // 2",
      "stack_out": [
        "x#0",
        "aggregate%total_length%1#0",
        "proof#0 (copy)",
        "2"
      ]
    },
    "139": {
      "op": "uncover 2",
      "stack_out": [
        "x#0",
        "proof#0 (copy)",
        "2",
        "aggregate%total_length%1#0"
      ]
    },
    "141": {
      "op": "substring3",
      "defined_out": [
        "aggregate%array_trimmed%1#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%array_trimmed%1#0"
      ]
    },
    "142": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "aggregate%array_trimmed%1#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%array_trimmed%1#0",
        "6"
      ]
    },
    "144": {
      "op": "intc_0 // 32",
      "stack_out": [
        "x#0",
        "aggregate%array_trimmed%1#0",
        "6",
        "32"
      ]
    },
    "145": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%1#0",
        "aggregate%bytes_offset%1#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%array_trimmed%1#0",
        "aggregate%bytes_offset%1#0"
      ]
    },
    "146": {
      "op": "intc_0 // 32",
      "stack_out": [
        "x#0",
        "aggregate%array_trimmed%1#0",
        "aggregate%bytes_offset%1#0",
        "32"
      ]
    },
    "147": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%1#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array_item%1#0"
      ]
    },
    "148": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0",
        "array_item%1#0",
        "proof#0 (copy)"
      ]
    },
    "150": {
      "op": "len",
      "defined_out": [
        "aggregate%total_length%2#0",
        "array_item%1#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array_item%1#0",
        "aggregate%total_length%2#0"
      ]
    },
    "151": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0",
        "array_item%1#0",
        "aggregate%total_length%2#0",
        "proof#0 (copy)"
      ]
    },
    "153": {
      "op": "intc_2 // 2",
      "stack_out": [
        "x#0",
        "array_item%1#0",
        "aggregate%total_length%2#0",
        "proof#0 (copy)",
        "2"
      ]
    },
    "154": {
      "op": "uncover 2",
      "stack_out": [
        "x#0",
        "array_item%1#0",
        "proof#0 (copy)",
        "2",
        "aggregate%total_length%2#0"
      ]
    },
    "156": {
      "op": "substring3",
      "defined_out": [
        "aggregate%array_trimmed%2#0",
        "array_item%1#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array_item%1#0",
        "aggregate%array_trimmed%2#0"
      ]
    },
    "157": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "aggregate%array_trimmed%2#0",
        "array_item%1#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array_item%1#0",
        "aggregate%array_trimmed%2#0",
        "7"
      ]
    },
    "159": {
      "op": "intc_0 // 32",
      "stack_out": [
        "x#0",
        "array_item%1#0",
        "aggregate%array_trimmed%2#0",
        "7",
        "32"
      ]
    },
    "160": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%2#0",
        "aggregate%bytes_offset%2#0",
        "array_item%1#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array_item%1#0",
        "aggregate%array_trimmed%2#0",
        "aggregate%bytes_offset%2#0"
      ]
    },
    "161": {
      "op": "intc_0 // 32",
      "stack_out": [
        "x#0",
        "array_item%1#0",
        "aggregate%array_trimmed%2#0",
        "aggregate%bytes_offset%2#0",
        "32"
      ]
    },
    "162": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%1#0",
        "array_item%2#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array_item%1#0",
        "array_item%2#0"
      ]
    },
    "163": {
      "op": "concat",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "164": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0",
        "y#0",
        "proof#0 (copy)"
      ]
    },
    "166": {
      "op": "len",
      "defined_out": [
        "aggregate%total_length%3#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "aggregate%total_length%3#0"
      ]
    },
    "167": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0",
        "y#0",
        "aggregate%total_length%3#0",
        "proof#0 (copy)"
      ]
    },
    "169": {
      "op": "intc_2 // 2",
      "stack_out": [
        "x#0",
        "y#0",
        "aggregate%total_length%3#0",
        "proof#0 (copy)",
        "2"
      ]
    },
    "170": {
      "op": "uncover 2",
      "stack_out": [
        "x#0",
        "y#0",
        "proof#0 (copy)",
        "2",
        "aggregate%total_length%3#0"
      ]
    },
    "172": {
      "op": "substring3",
      "defined_out": [
        "aggregate%array_trimmed%3#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "aggregate%array_trimmed%3#0"
      ]
    },
    "173": {
      "op": "pushint 7 // 7",
      "stack_out": [
        "x#0",
        "y#0",
        "aggregate%array_trimmed%3#0",
        "7"
      ]
    },
    "175": {
      "op": "intc_0 // 32",
      "stack_out": [
        "x#0",
        "y#0",
        "aggregate%array_trimmed%3#0",
        "7",
        "32"
      ]
    },
    "176": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%3#0",
        "aggregate%bytes_offset%3#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "aggregate%array_trimmed%3#0",
        "aggregate%bytes_offset%3#0"
      ]
    },
    "177": {
      "op": "intc_0 // 32",
      "stack_out": [
        "x#0",
        "y#0",
        "aggregate%array_trimmed%3#0",
        "aggregate%bytes_offset%3#0",
        "32"
      ]
    },
    "178": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%3#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "array_item%3#0"
      ]
    },
    "179": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0",
        "y#0",
        "array_item%3#0",
        "proof#0 (copy)"
      ]
    },
    "181": {
      "op": "len",
      "defined_out": [
        "aggregate%total_length%4#0",
        "array_item%3#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "array_item%3#0",
        "aggregate%total_length%4#0"
      ]
    },
    "182": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0",
        "y#0",
        "array_item%3#0",
        "aggregate%total_length%4#0",
        "proof#0 (copy)"
      ]
    },
    "184": {
      "op": "intc_2 // 2",
      "stack_out": [
        "x#0",
        "y#0",
        "array_item%3#0",
        "aggregate%total_length%4#0",
        "proof#0 (copy)",
        "2"
      ]
    },
    "185": {
      "op": "uncover 2",
      "stack_out": [
        "x#0",
        "y#0",
        "array_item%3#0",
        "proof#0 (copy)",
        "2",
        "aggregate%total_length%4#0"
      ]
    },
    "187": {
      "op": "substring3",
      "defined_out": [
        "aggregate%array_trimmed%4#0",
        "array_item%3#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "array_item%3#0",
        "aggregate%array_trimmed%4#0"
      ]
    },
    "188": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "x#0",
        "y#0",
        "array_item%3#0",
        "aggregate%array_trimmed%4#0",
        "8"
      ]
    },
    "190": {
      "op": "intc_0 // 32",
      "stack_out": [
        "x#0",
        "y#0",
        "array_item%3#0",
        "aggregate%array_trimmed%4#0",
        "8",
        "32"
      ]
    },
    "191": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%4#0",
        "aggregate%bytes_offset%4#0",
        "array_item%3#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "array_item%3#0",
        "aggregate%array_trimmed%4#0",
        "aggregate%bytes_offset%4#0"
      ]
    },
    "192": {
      "op": "intc_0 // 32",
      "stack_out": [
        "x#0",
        "y#0",
        "array_item%3#0",
        "aggregate%array_trimmed%4#0",
        "aggregate%bytes_offset%4#0",
        "32"
      ]
    },
    "193": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%3#0",
        "array_item%4#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "array_item%3#0",
        "array_item%4#0"
      ]
    },
    "194": {
      "op": "concat",
      "defined_out": [
        "x#0",
        "y#0",
        "z#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "z#0"
      ]
    },
    "195": {
      "op": "uncover 2",
      "stack_out": [
        "y#0",
        "z#0",
        "x#0"
      ]
    },
    "197": {
      "op": "uncover 2",
      "stack_out": [
        "z#0",
        "x#0",
        "y#0"
      ]
    },
    "199": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "z#0"
      ],
      "stack_out": [
        "z#0",
        "tmp%2#0"
      ]
    },
    "200": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%2#0",
        "z#0"
      ]
    },
    "202": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "203": {
      "retsub": true,
      "op": "retsub"
    }
  }
}