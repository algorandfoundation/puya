{
  "version": 3,
  "sources": [
    "../jira_ak_752.py"
  ],
  "mappings": ";;;;;;;AAWA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;;AACK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADL;;;AACK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;;AADL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AACA;;;AAKY;;AAAA;;;AAAM;AAAN;AAAA;AAAA;AAAA;AACA;;AAAA;;;AAAM;;AAAN;AAAA;AAAA;AAAA;AAAiB;;AAAA;;;AAAM;;AAAN;AAAA;AAAA;AAAA;AAAjB;AACA;;AAAA;;;AAAM;;AAAN;AAAA;AAAA;AAAA;AAAiB;;AAAA;;;AAAM;AAAN;AAAA;AAAA;AAAA;AAAjB;AAEG;;AAAA;;AAAA;AAAA;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 32 0 1 8"
    },
    "7": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "9": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "10": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "11": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "14": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "17": {
      "op": "pushbytes 0x49e82748 // method \"verify(byte[32][])byte[]\"",
      "defined_out": [
        "Method(verify(byte[32][])byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(verify(byte[32][])byte[])"
      ]
    },
    "23": {
      "op": "swap",
      "stack_out": [
        "Method(verify(byte[32][])byte[])",
        "tmp%2#0"
      ]
    },
    "24": {
      "op": "match main_verify_route@3",
      "stack_out": []
    },
    "28": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "29": {
      "block": "main_after_inlined_test_cases.regression_tests.jira_ak_752.Verifier.__puya_arc4_router__@11",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "30": {
      "block": "main_verify_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "32": {
      "op": "intc_1 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "33": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "34": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "35": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "37": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "38": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "39": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "40": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[32][])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[32][])%0#0"
      ]
    },
    "43": {
      "callsub": "test_cases.regression_tests.jira_ak_752.Verifier.verify",
      "op": "callsub verify",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "46": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "47": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%length%0#0"
      ]
    },
    "48": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "49": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "52": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%7#0"
      ]
    },
    "53": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "54": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "60": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%8#0"
      ]
    },
    "61": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "62": {
      "op": "log",
      "stack_out": []
    },
    "63": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "64": {
      "op": "b main_after_inlined_test_cases.regression_tests.jira_ak_752.Verifier.__puya_arc4_router__@11"
    },
    "67": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "69": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "70": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%10#0"
      ]
    },
    "71": {
      "op": "match main___algopy_default_create@7",
      "stack_out": []
    },
    "75": {
      "block": "main_switch_case_next@9",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "78": {
      "block": "main___algopy_default_create@7",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "80": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0"
      ]
    },
    "81": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "82": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "83": {
      "block": "main_after_inlined_test_cases.regression_tests.jira_ak_752.Verifier.__algopy_default_create@13",
      "stack_in": [],
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "84": {
      "op": "b main_after_inlined_test_cases.regression_tests.jira_ak_752.Verifier.__puya_arc4_router__@11"
    },
    "87": {
      "subroutine": "test_cases.regression_tests.jira_ak_752.Verifier.verify",
      "params": {
        "proof#0": "bytes"
      },
      "block": "verify",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "90": {
      "block": "verify_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "proof#0 (copy)"
      ],
      "stack_out": [
        "proof#0 (copy)"
      ]
    },
    "92": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_trimmed%0#0"
      ],
      "stack_out": [
        "aggregate%array_trimmed%0#0"
      ]
    },
    "95": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%array_trimmed%0#0"
      ],
      "stack_out": [
        "aggregate%array_trimmed%0#0",
        "8"
      ]
    },
    "96": {
      "op": "intc_0 // 32",
      "defined_out": [
        "32",
        "8",
        "aggregate%array_trimmed%0#0"
      ],
      "stack_out": [
        "aggregate%array_trimmed%0#0",
        "8",
        "32"
      ]
    },
    "97": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0"
      ],
      "stack_out": [
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "98": {
      "op": "intc_0 // 32",
      "stack_out": [
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "32"
      ]
    },
    "99": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0"
      ]
    },
    "100": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0",
        "proof#0 (copy)"
      ]
    },
    "102": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_trimmed%1#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%array_trimmed%1#0"
      ]
    },
    "105": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "aggregate%array_trimmed%1#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%array_trimmed%1#0",
        "6"
      ]
    },
    "107": {
      "op": "intc_0 // 32",
      "stack_out": [
        "x#0",
        "aggregate%array_trimmed%1#0",
        "6",
        "32"
      ]
    },
    "108": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%1#0",
        "aggregate%bytes_offset%1#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%array_trimmed%1#0",
        "aggregate%bytes_offset%1#0"
      ]
    },
    "109": {
      "op": "intc_0 // 32",
      "stack_out": [
        "x#0",
        "aggregate%array_trimmed%1#0",
        "aggregate%bytes_offset%1#0",
        "32"
      ]
    },
    "110": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "values%1#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "values%1#0"
      ]
    },
    "111": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0",
        "values%1#0",
        "proof#0 (copy)"
      ]
    },
    "113": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_trimmed%2#0",
        "values%1#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "values%1#0",
        "aggregate%array_trimmed%2#0"
      ]
    },
    "116": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "aggregate%array_trimmed%2#0",
        "values%1#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "values%1#0",
        "aggregate%array_trimmed%2#0",
        "7"
      ]
    },
    "118": {
      "op": "intc_0 // 32",
      "stack_out": [
        "x#0",
        "values%1#0",
        "aggregate%array_trimmed%2#0",
        "7",
        "32"
      ]
    },
    "119": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%2#0",
        "aggregate%bytes_offset%2#0",
        "values%1#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "values%1#0",
        "aggregate%array_trimmed%2#0",
        "aggregate%bytes_offset%2#0"
      ]
    },
    "120": {
      "op": "intc_0 // 32",
      "stack_out": [
        "x#0",
        "values%1#0",
        "aggregate%array_trimmed%2#0",
        "aggregate%bytes_offset%2#0",
        "32"
      ]
    },
    "121": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "values%1#0",
        "values%2#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "values%1#0",
        "values%2#0"
      ]
    },
    "122": {
      "op": "concat",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "123": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0",
        "y#0",
        "proof#0 (copy)"
      ]
    },
    "125": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_trimmed%3#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "aggregate%array_trimmed%3#0"
      ]
    },
    "128": {
      "op": "pushint 7 // 7",
      "stack_out": [
        "x#0",
        "y#0",
        "aggregate%array_trimmed%3#0",
        "7"
      ]
    },
    "130": {
      "op": "intc_0 // 32",
      "stack_out": [
        "x#0",
        "y#0",
        "aggregate%array_trimmed%3#0",
        "7",
        "32"
      ]
    },
    "131": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%3#0",
        "aggregate%bytes_offset%3#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "aggregate%array_trimmed%3#0",
        "aggregate%bytes_offset%3#0"
      ]
    },
    "132": {
      "op": "intc_0 // 32",
      "stack_out": [
        "x#0",
        "y#0",
        "aggregate%array_trimmed%3#0",
        "aggregate%bytes_offset%3#0",
        "32"
      ]
    },
    "133": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "values%3#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "values%3#0"
      ]
    },
    "134": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0",
        "y#0",
        "values%3#0",
        "proof#0 (copy)"
      ]
    },
    "136": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_trimmed%4#0",
        "values%3#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "values%3#0",
        "aggregate%array_trimmed%4#0"
      ]
    },
    "139": {
      "op": "intc_3 // 8",
      "stack_out": [
        "x#0",
        "y#0",
        "values%3#0",
        "aggregate%array_trimmed%4#0",
        "8"
      ]
    },
    "140": {
      "op": "intc_0 // 32",
      "stack_out": [
        "x#0",
        "y#0",
        "values%3#0",
        "aggregate%array_trimmed%4#0",
        "8",
        "32"
      ]
    },
    "141": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%4#0",
        "aggregate%bytes_offset%4#0",
        "values%3#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "values%3#0",
        "aggregate%array_trimmed%4#0",
        "aggregate%bytes_offset%4#0"
      ]
    },
    "142": {
      "op": "intc_0 // 32",
      "stack_out": [
        "x#0",
        "y#0",
        "values%3#0",
        "aggregate%array_trimmed%4#0",
        "aggregate%bytes_offset%4#0",
        "32"
      ]
    },
    "143": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "values%3#0",
        "values%4#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "values%3#0",
        "values%4#0"
      ]
    },
    "144": {
      "op": "concat",
      "defined_out": [
        "x#0",
        "y#0",
        "z#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "z#0"
      ]
    },
    "145": {
      "op": "uncover 2",
      "stack_out": [
        "y#0",
        "z#0",
        "x#0"
      ]
    },
    "147": {
      "op": "uncover 2",
      "stack_out": [
        "z#0",
        "x#0",
        "y#0"
      ]
    },
    "149": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "z#0"
      ],
      "stack_out": [
        "z#0",
        "tmp%2#0"
      ]
    },
    "150": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "z#0"
      ]
    },
    "151": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "152": {
      "retsub": true,
      "op": "retsub"
    }
  }
}