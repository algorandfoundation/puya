main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L16
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        let eq%tmp%2#0: bool = (== tmp%2#0 method "method()uint64")
        (assert eq%tmp%2#0)
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let x#0: uint64 = 1u
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@8 : block@9
    block@8: // if_body_L27
        let x#0: uint64 = 2u
        goto block@9
    block@9: // after_if_else_L26
        let one#0: uint64 = 0u
        let tmp%2#2: uint64 = (txn NumAppArgs)
        let idx#0: uint64 = 0u
        goto block@10
    block@10: // for_header_L30
        let continue_looping%0#0: bool = (< idx#0 tmp%2#2)
        goto continue_looping%0#0 ? block@11 : block@14
    block@11: // for_body_L31
        let x#0: uint64 = (+ x#0 idx#0)
        let one#9: uint64 = one#0
        goto idx#0 ? block@13 : block@12
    block@12: // if_body_L33
        let one#0: uint64 = (+ one#0 1u)
        let one#9: uint64 = one#0
        goto block@13
    block@13: // after_if_else_L32
        let one#0: uint64 = one#9
        let idx#0: uint64 = (+ idx#0 1u)
        goto block@10
    block@14: // after_for_L30
        let tmp%7#1: bytes = (itob one#0)
        let tmp%8#1: bytes = (concat "you won't see this" tmp%7#1)
        (log tmp%8#1)
        fail
    block@6: // bare_routing_L16
        let tmp%7#0: uint64 = (txn OnCompletion)
        let not%tmp%7#0: bool = (! tmp%7#0)
        (assert not%tmp%7#0)
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        exit 1u