contract test_cases.regression_tests.issue_118.Issue118:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L1
                let tmp%0#0: bool = test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__() -> bool:
            block@0: // L5
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@5
            block@1: // abi_routing_L5
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "verify(uint256[])(bool,string)" => block@2, * => return 0u}
            block@2: // verify_route_L6
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                (assert tmp%5#0) // is not creating
                let tmp%7#0: bytes = (txna ApplicationArgs 1)
                let tmp%8#0: bytes = test_cases.regression_tests.issue_118.Issue118.verify(tmp%7#0)
                let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
                (log tmp%9#0)
                return 1u
            block@5: // bare_routing_L5
                let tmp%10#0: uint64 = (txn OnCompletion)
                goto tmp%10#0 ? block@9 : block@6
            block@6: // __algopy_default_create_L5
                let tmp%11#0: uint64 = (txn ApplicationID)
                let tmp%12#0: bool = (! tmp%11#0)
                (assert tmp%12#0) // is creating
                return 1u
            block@9: // after_if_else_L5
                return 0u
        
        subroutine test_cases.regression_tests.issue_118.Issue118.verify(values: bytes) -> bytes:
            block@0: // L6
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let val1#0: bytes = (setbit 0x00 0u tmp%0#0)
                let tmp%2#0: uint64 = (extract_uint16 values#0 0u)
                let tmp%3#0: bool = (!= tmp%2#0 2u)
                goto tmp%3#0 ? block@1 : block@2
            block@1: // if_body_L13
                let encoded_tuple_buffer%2#0: bytes = (concat val1#0 0x0003)
                let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 0x0000)
                return encoded_tuple_buffer%3#0
            block@2: // after_if_else_L12
                let encoded_tuple_buffer%6#0: bytes = (concat val1#0 0x0003)
                let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 0x0000)
                return encoded_tuple_buffer%7#0
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u