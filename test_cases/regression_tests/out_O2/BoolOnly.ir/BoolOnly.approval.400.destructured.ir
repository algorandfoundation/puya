main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let lifted%return#0: bool = 1u
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@11
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion is not NoOp
        let tmp%4#0: bool = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "set_0_convert(byte[])byte[]" => block@4, method "set_0_compare(byte[])byte[]" => block@5, method "bool_only_properties()void" => block@6, * => block@10}
    block@4: // set_0_convert_route_L5
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let inp#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: bool = (!= tmp%0#1 0u)
        let tmp%2#2: bytes = (setbit inp#0 0u tmp%1#1)
        let aggregate%length%0#0: uint64 = (len tmp%2#2)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%2#2)
        let tmp%3#1: bytes = (concat 0x151f7c75 aggregate%encoded_value%0#0)
        (log tmp%3#1)
        exit lifted%return#0
    block@5: // set_0_compare_route_L9
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let inp#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: bool = (> tmp%0#1 0u)
        let tmp%2#2: bytes = (setbit inp#0 0u tmp%1#1)
        let aggregate%length%1#0: uint64 = (len tmp%2#2)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%2#2)
        let tmp%3#1: bytes = (concat 0x151f7c75 aggregate%encoded_value%1#0)
        (log tmp%3#1)
        exit lifted%return#0
    block@6: // bool_only_properties_route_L13
        itxn_begin
        ((itxn_field TypeEnum) acfg)
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: bool = (!= tmp%0#1 0u)
        ((itxn_field ConfigAssetDefaultFrozen) tmp%1#1)
        itxn_submit
        itxn_begin
        ((itxn_field Nonparticipation) 1u)
        ((itxn_field TypeEnum) keyreg)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit lifted%return#0
    block@10: // after_if_else_L4
        fail
    block@11: // __algopy_default_create_L1
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (! tmp%6#0)
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: bool = (&& tmp%7#0 tmp%9#0)
        (assert tmp%10#0) // OnCompletion must be NoOp && can only call when creating
        exit lifted%return#0