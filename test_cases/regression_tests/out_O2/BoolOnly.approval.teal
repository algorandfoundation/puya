#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1
    bytecblock 0x151f7c75
    txn NumAppArgs
    bz __algopy_default_create@11
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0xa85bff00 0xc4af225c 0x83589f2d // method "set_0_convert(byte[])byte[]", method "set_0_compare(byte[])byte[]", method "bool_only_properties()void"
    txna ApplicationArgs 0
    match set_0_convert_route@4 set_0_compare_route@5 bool_only_properties_route@6
    err

bool_only_properties_route@6:
    itxn_begin
    pushint 3 // acfg
    itxn_field TypeEnum
    txn NumAppArgs
    intc_0 // 0
    !=
    itxn_field ConfigAssetDefaultFrozen
    itxn_submit
    itxn_begin
    intc_1 // 1
    itxn_field Nonparticipation
    pushint 2 // keyreg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    intc_1 // 1
    return

set_0_compare_route@5:
    txna ApplicationArgs 1
    extract 2 0
    txn NumAppArgs
    intc_0 // 0
    >
    intc_0 // 0
    swap
    setbit
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

set_0_convert_route@4:
    txna ApplicationArgs 1
    extract 2 0
    txn NumAppArgs
    intc_0 // 0
    !=
    intc_0 // 0
    swap
    setbit
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

__algopy_default_create@11:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating
