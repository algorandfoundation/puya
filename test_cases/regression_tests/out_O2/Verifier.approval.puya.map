{
  "version": 3,
  "sources": [
    "../jira_ak_752.py"
  ],
  "mappings": ";AAWA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;;AACK;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAMY;;;;;;AAAA;AACA;;AAAA;;;AAAiB;;AAAA;;;AAAjB;AAAA;;AAAA;AACA;AAAA;;AAAA;AAEG;;AAAA;AAAA;AAAA;AATV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;AADL;;AAAA;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "6": {
      "op": "pushbytes 0x49e82748 // method \"verify(byte[32][])byte[]\"",
      "defined_out": [
        "Method(verify(byte[32][])byte[])"
      ],
      "stack_out": [
        "Method(verify(byte[32][])byte[])"
      ]
    },
    "12": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(verify(byte[32][])byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(verify(byte[32][])byte[])",
        "tmp%2#0"
      ]
    },
    "15": {
      "op": "match main_verify_route@3",
      "stack_out": []
    },
    "19": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "20": {
      "block": "main_verify_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "22": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "23": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "24": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "26": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "27": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "proof#0"
      ],
      "stack_out": [
        "proof#0"
      ]
    },
    "30": {
      "op": "dup",
      "defined_out": [
        "proof#0",
        "proof#0 (copy)"
      ],
      "stack_out": [
        "proof#0",
        "proof#0 (copy)"
      ]
    },
    "31": {
      "op": "pushints 258 32 // 258, 32",
      "defined_out": [
        "258",
        "32",
        "proof#0",
        "proof#0 (copy)"
      ],
      "stack_out": [
        "proof#0",
        "proof#0 (copy)",
        "258",
        "32"
      ]
    },
    "36": {
      "op": "extract3",
      "defined_out": [
        "proof#0",
        "x#0"
      ],
      "stack_out": [
        "proof#0",
        "x#0"
      ]
    },
    "37": {
      "op": "dig 1",
      "stack_out": [
        "proof#0",
        "x#0",
        "proof#0 (copy)"
      ]
    },
    "39": {
      "op": "extract 194 32",
      "defined_out": [
        "aggregate%encoded_element%1#0",
        "proof#0",
        "x#0"
      ],
      "stack_out": [
        "proof#0",
        "x#0",
        "aggregate%encoded_element%1#0"
      ]
    },
    "42": {
      "op": "uncover 2",
      "stack_out": [
        "x#0",
        "aggregate%encoded_element%1#0",
        "proof#0"
      ]
    },
    "44": {
      "op": "extract 226 32",
      "defined_out": [
        "aggregate%encoded_element%1#0",
        "aggregate%encoded_element%2#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%encoded_element%1#0",
        "aggregate%encoded_element%2#0"
      ]
    },
    "47": {
      "op": "swap",
      "stack_out": [
        "x#0",
        "aggregate%encoded_element%2#0",
        "aggregate%encoded_element%1#0"
      ]
    },
    "48": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%encoded_element%1#0",
        "aggregate%encoded_element%2#0",
        "aggregate%encoded_element%2#0 (copy)",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%encoded_element%2#0",
        "aggregate%encoded_element%1#0",
        "aggregate%encoded_element%2#0 (copy)"
      ]
    },
    "50": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_element%2#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%encoded_element%2#0",
        "y#0"
      ]
    },
    "51": {
      "op": "swap",
      "stack_out": [
        "x#0",
        "y#0",
        "aggregate%encoded_element%2#0"
      ]
    },
    "52": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%encoded_element%2#0",
        "x#0",
        "x#0 (copy)",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "aggregate%encoded_element%2#0",
        "x#0 (copy)"
      ]
    },
    "54": {
      "op": "concat",
      "defined_out": [
        "x#0",
        "y#0",
        "z#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "z#0"
      ]
    },
    "55": {
      "op": "cover 2",
      "stack_out": [
        "z#0",
        "x#0",
        "y#0"
      ]
    },
    "57": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "z#0"
      ],
      "stack_out": [
        "z#0",
        "tmp%2#0"
      ]
    },
    "58": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "z#0"
      ]
    },
    "59": {
      "op": "concat",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1"
      ]
    },
    "60": {
      "op": "dup",
      "defined_out": [
        "tmp%3#1",
        "tmp%3#1 (copy)"
      ],
      "stack_out": [
        "tmp%3#1",
        "tmp%3#1 (copy)"
      ]
    },
    "61": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "aggregate%length%0#0"
      ]
    },
    "62": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "aggregate%as_bytes%0#0"
      ]
    },
    "63": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "aggregate%length_uint16%0#0"
      ]
    },
    "66": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%3#1"
      ]
    },
    "67": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "68": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "74": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "75": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "76": {
      "op": "log",
      "stack_out": []
    },
    "77": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "79": {
      "op": "return",
      "stack_out": []
    },
    "80": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "82": {
      "op": "bnz main_after_if_else@10",
      "stack_out": []
    },
    "85": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "87": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "88": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "89": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "91": {
      "op": "return",
      "stack_out": []
    }
  }
}