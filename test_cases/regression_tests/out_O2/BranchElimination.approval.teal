#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 8 2
    intc_0 // 0
    dupn 4
    pushbytes ""
    dupn 13
    intc_1 // 1
    txn NumAppArgs
    bz main___algopy_default_create@11
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert
    pushbytess 0xaec250ef 0xbd4b223f 0x847f775f // method "umm()uint64", method "umm2()void", method "calculate(uint64[][],uint64)void"
    txna ApplicationArgs 0
    match main_umm_route@4 main_umm2_route@5 main_calculate_route@6
    err

main_calculate_route@6:
    txna ApplicationArgs 1
    dup
    bury 19
    txna ApplicationArgs 2
    bury 18
    intc_0 // 0
    bury 4
    intc_0 // 0
    bury 7
    intc_0 // 0
    extract_uint16
    bury 14
    intc_0 // 0
    bury 9

main_for_header@15:
    dig 8
    dig 14
    <
    dup
    bury 11
    bz main_if_body@36
    dig 17
    extract 2 0
    dig 10
    assert // index access is out of bounds
    dig 9
    intc_3 // 2
    *
    dig 1
    swap
    extract_uint16
    dup2
    extract_uint16
    intc_2 // 8
    *
    intc_3 // 2
    +
    extract3
    dup
    bury 20
    intc_0 // 0
    extract_uint16
    dup
    bury 14
    intc_1 // 1
    -
    bury 7
    intc_0 // 0
    bury 8

main_for_header@17:
    dig 7
    dig 13
    <
    bz main_after_for@25
    dig 18
    extract 2 0
    dup
    bury 21
    dig 8
    intc_2 // 8
    *
    intc_2 // 8
    extract3 // on error: index access is out of bounds
    dup
    bury 17
    dig 17
    b>=
    dig 6
    bury 6
    dig 3
    bury 3
    bz main_after_if_else@24
    dig 7
    dig 7
    <
    dig 6
    bury 6
    dig 3
    bury 3
    bz main_after_if_else@23
    dig 2
    intc_1 // 1
    +
    dup
    bury 4
    dig 8
    intc_1 // 1
    +
    intc_2 // 8
    *
    dig 21
    swap
    intc_2 // 8
    extract3 // on error: index access is out of bounds
    dig 17
    b>
    dig 7
    bury 7
    swap
    bury 3
    bz main_after_if_else@22
    dig 2
    intc_3 // 2
    *
    dig 6
    intc_1 // 1
    +
    bury 6
    bury 2

main_after_if_else@22:
    dig 1
    dig 5
    bury 6
    bury 2

main_after_if_else@23:
    dig 1
    dig 5
    bury 6
    bury 2

main_after_if_else@24:
    dig 4
    bury 6
    dig 1
    bury 3
    dig 7
    intc_1 // 1
    +
    bury 8
    b main_for_header@17

main_after_for@25:
    dig 8
    intc_1 // 1
    +
    bury 9
    b main_for_header@15

main_if_body@36:
    return

main_umm2_route@5:
    intc_0 // 0
    bury 12

main_while_top@29:
    callsub hmm
    dig 12
    bury 12
    bz main_after_if_else@35
    callsub hmm
    dig 12
    bury 12
    bz main_after_if_else@35
    callsub hmm
    dig 12
    bury 12
    bz main_after_if_else@35
    callsub hmm
    dig 12
    +
    bury 11

main_after_if_else@35:
    dig 10
    bury 12
    callsub hmm
    bz main_while_top@29
    return

main_umm_route@4:
    intc_0 // 0
    bury 12

main_while_top@40:
    callsub hmm_uint64
    bury 4
    intc_0 // 0
    bury 15

main_for_header@41:
    dig 14
    dig 4
    <
    bz main_after_for@49
    callsub hmm
    dig 12
    bury 12
    bz main_after_if_else@48
    callsub hmm
    dig 12
    bury 12
    bz main_after_if_else@48
    callsub hmm
    dig 12
    bury 12
    bz main_after_if_else@48
    callsub hmm
    dig 12
    +
    bury 11

main_after_if_else@48:
    dig 10
    bury 12
    dig 14
    intc_1 // 1
    +
    bury 15
    b main_for_header@41

main_after_for@49:
    callsub hmm
    bz main_while_top@40
    dig 11
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    return

main___algopy_default_create@11:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// test_cases.regression_tests.leftover_branch.hmm() -> uint64:
hmm:
    intc_0 // 0
    retsub


// test_cases.regression_tests.leftover_branch.hmm_uint64() -> uint64:
hmm_uint64:
    intc_0 // 0
    retsub
