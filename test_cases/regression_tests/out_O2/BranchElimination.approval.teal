#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 8 2
    intc_0 // 0
    dupn 4
    pushbytes ""
    dupn 13
    txn ApplicationID
    !
    txn OnCompletion
    intc_1 // 1
    shl
    +
    switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_NoOp:
    txn NumAppArgs
    !
    return // on error: this contract does not implement the given ABI method for create NoOp

call_NoOp:
    pushbytess 0xaec250ef 0xbd4b223f 0x847f775f // method "umm()uint64", method "umm2()void", method "calculate(uint64[][],uint64)void"
    txna ApplicationArgs 0
    match umm_route@3 umm2_route@4 calculate_route@5
    err // this contract does not implement the given ABI method for call NoOp

calculate_route@5:
    txna ApplicationArgs 1
    dup
    bury 18
    txna ApplicationArgs 2
    bury 17
    intc_0 // 0
    bury 3
    intc_0 // 0
    bury 6
    intc_0 // 0
    extract_uint16
    bury 13
    intc_0 // 0
    bury 8

for_header@25:
    dig 7
    dig 13
    <
    dup
    bury 10
    bz if_body@46
    dig 16
    extract 2 0
    dig 9
    assert // index access is out of bounds
    dig 8
    intc_3 // 2
    *
    dig 1
    swap
    extract_uint16
    dup2
    extract_uint16
    intc_2 // 8
    *
    intc_3 // 2
    +
    extract3
    dup
    bury 19
    intc_0 // 0
    extract_uint16
    dup
    bury 13
    intc_1 // 1
    -
    bury 6
    intc_0 // 0
    bury 7

for_header@27:
    dig 6
    dig 12
    <
    bz after_for@35
    dig 17
    extract 2 0
    dup
    bury 20
    dig 7
    intc_2 // 8
    *
    intc_2 // 8
    extract3 // on error: index access is out of bounds
    dup
    bury 16
    dig 16
    b>=
    dig 5
    bury 5
    dig 2
    bury 2
    bz after_if_else@34
    dig 6
    dig 6
    <
    dig 5
    bury 5
    dig 2
    bury 2
    bz after_if_else@33
    dig 1
    intc_1 // 1
    +
    dup
    bury 3
    dig 7
    intc_1 // 1
    +
    intc_2 // 8
    *
    dig 20
    swap
    intc_2 // 8
    extract3 // on error: index access is out of bounds
    dig 16
    b>
    dig 6
    bury 6
    swap
    bury 2
    bz after_if_else@32
    dig 1
    intc_3 // 2
    *
    dig 5
    intc_1 // 1
    +
    bury 5
    bury 1

after_if_else@32:
    dup
    dig 4
    bury 5
    bury 1

after_if_else@33:
    dup
    dig 4
    bury 5
    bury 1

after_if_else@34:
    dig 3
    bury 5
    dup
    bury 2
    dig 6
    intc_1 // 1
    +
    bury 7
    b for_header@27

after_for@35:
    dig 7
    intc_1 // 1
    +
    bury 8
    b for_header@25

if_body@46:
    intc_1 // 1
    return

umm2_route@4:
    intc_0 // 0
    bury 11

while_top@39:
    callsub hmm
    dig 11
    bury 11
    bz after_if_else@45
    callsub hmm
    dig 11
    bury 11
    bz after_if_else@45
    callsub hmm
    dig 11
    bury 11
    bz after_if_else@45
    callsub hmm
    dig 11
    +
    bury 10

after_if_else@45:
    dig 9
    bury 11
    callsub hmm
    bz while_top@39
    b if_body@46

umm_route@3:
    intc_0 // 0
    bury 11

while_top@50:
    callsub hmm_uint64
    bury 3
    intc_0 // 0
    bury 14

for_header@51:
    dig 13
    dig 3
    <
    bz after_for@59
    callsub hmm
    dig 11
    bury 11
    bz after_if_else@58
    callsub hmm
    dig 11
    bury 11
    bz after_if_else@58
    callsub hmm
    dig 11
    bury 11
    bz after_if_else@58
    callsub hmm
    dig 11
    +
    bury 10

after_if_else@58:
    dig 9
    bury 11
    dig 13
    intc_1 // 1
    +
    bury 14
    b for_header@51

after_for@59:
    callsub hmm
    bz while_top@50
    dig 10
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// test_cases.regression_tests.leftover_branch.hmm() -> uint64:
hmm:
    intc_0 // 0
    retsub


// test_cases.regression_tests.leftover_branch.hmm_uint64() -> uint64:
hmm_uint64:
    intc_0 // 0
    retsub
