{
  "version": 3,
  "sources": [
    "../branch_to_proto.py"
  ],
  "mappings": ";;;;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;AACK;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;;;AAAA;;AAAA;;;AAAA;;;AAAA;;AAAA;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIe;;AAAA;;AAAA;;AAAA;;AAHV;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AADL;;AAAA;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x068101"
    },
    "11": {
      "op": "intc_0 // 0",
      "stack_out": [
        "message#0"
      ]
    },
    "12": {
      "op": "dupn 2",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    },
    "14": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#1"
      ]
    },
    "16": {
      "op": "bz main_bare_routing@6",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    },
    "19": {
      "op": "pushbytes 0x6e50bd99 // method \"verify(byte[],byte[],byte[])(byte[],bool)\"",
      "defined_out": [
        "Method(verify(byte[],byte[],byte[])(byte[],bool))"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "Method(verify(byte[],byte[],byte[])(byte[],bool))"
      ]
    },
    "25": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(verify(byte[],byte[],byte[])(byte[],bool))",
        "tmp%2#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "Method(verify(byte[],byte[],byte[])(byte[],bool))",
        "tmp%2#0"
      ]
    },
    "28": {
      "op": "match main_verify_route@3",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    },
    "32": {
      "block": "main_after_if_else@10",
      "stack_in": [
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#0"
      ]
    },
    "33": {
      "op": "return",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    },
    "34": {
      "block": "main_verify_route@3",
      "stack_in": [
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%3#0"
      ]
    },
    "36": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%4#0"
      ]
    },
    "37": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    },
    "38": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%5#0"
      ]
    },
    "40": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    },
    "41": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "44": {
      "op": "extract 2 0",
      "defined_out": [
        "message#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "message#0"
      ]
    },
    "47": {
      "op": "bury 3",
      "defined_out": [
        "message#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    },
    "49": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "message#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "52": {
      "op": "extract 2 0",
      "defined_out": [
        "message#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "proof#0"
      ]
    },
    "55": {
      "op": "bury 1",
      "defined_out": [
        "message#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    },
    "57": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "message#0",
        "proof#0",
        "reinterpret_Encoded(len+uint8[])%2#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "reinterpret_Encoded(len+uint8[])%2#0"
      ]
    },
    "60": {
      "op": "extract 2 0",
      "defined_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "pk#0"
      ]
    },
    "63": {
      "op": "bury 2",
      "defined_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    },
    "65": {
      "block": "main_while_top@15",
      "stack_in": [
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "op": "pushint 10010 // 10010",
      "defined_out": [
        "10010"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "10010"
      ]
    },
    "68": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "10010",
        "tmp%1#2"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "10010",
        "tmp%1#2"
      ]
    },
    "70": {
      "op": ">",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%2#1"
      ]
    },
    "71": {
      "op": "bz main_after_while@18",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    },
    "74": {
      "op": "itxn_begin"
    },
    "75": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "appl"
      ]
    },
    "77": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    },
    "79": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "DeleteApplication"
      ]
    },
    "81": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    },
    "83": {
      "op": "bytec_0 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "0x068101"
      ]
    },
    "84": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    },
    "86": {
      "op": "bytec_0 // 0x068101",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "0x068101"
      ]
    },
    "87": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    },
    "89": {
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%3#0"
      ]
    },
    "91": {
      "op": "itxn_field Fee",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    },
    "93": {
      "op": "itxn_submit"
    },
    "94": {
      "op": "b main_while_top@15"
    },
    "97": {
      "block": "main_after_while@18",
      "stack_in": [
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "message#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "message#0"
      ]
    },
    "99": {
      "op": "dig 1",
      "defined_out": [
        "message#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "message#0",
        "proof#0"
      ]
    },
    "101": {
      "op": "dig 3",
      "defined_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "message#0",
        "proof#0",
        "pk#0"
      ]
    },
    "103": {
      "op": "vrf_verify VrfAlgorand",
      "defined_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#2",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#2",
        "tmp%1#1"
      ]
    },
    "105": {
      "op": "dig 1",
      "defined_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#2",
        "tmp%0#2 (copy)",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#2",
        "tmp%1#1",
        "tmp%0#2 (copy)"
      ]
    },
    "107": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#2",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#2",
        "tmp%1#1",
        "length%0#0"
      ]
    },
    "108": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#2",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#2",
        "tmp%1#1",
        "as_bytes%0#0"
      ]
    },
    "109": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#2",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#2",
        "tmp%1#1",
        "length_uint16%0#0"
      ]
    },
    "112": {
      "op": "uncover 2",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%1#1",
        "length_uint16%0#0",
        "tmp%0#2"
      ]
    },
    "114": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%1#1",
        "encoded_value%0#0"
      ]
    },
    "115": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "encoded_value%0#0",
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%1#1",
        "encoded_value%0#0",
        "0x00"
      ]
    },
    "118": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "encoded_value%0#0",
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%1#1",
        "encoded_value%0#0",
        "0x00",
        "0"
      ]
    },
    "119": {
      "op": "uncover 3",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "encoded_value%0#0",
        "0x00",
        "0",
        "tmp%1#1"
      ]
    },
    "121": {
      "op": "setbit",
      "defined_out": [
        "encoded_bit%0#0",
        "encoded_value%0#0",
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "encoded_value%0#0",
        "encoded_bit%0#0"
      ]
    },
    "122": {
      "op": "pushbytes 0x0003",
      "defined_out": [
        "0x0003",
        "encoded_bit%0#0",
        "encoded_value%0#0",
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "encoded_value%0#0",
        "encoded_bit%0#0",
        "0x0003"
      ]
    },
    "126": {
      "op": "swap",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "encoded_value%0#0",
        "0x0003",
        "encoded_bit%0#0"
      ]
    },
    "127": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0",
        "encoded_value%0#0",
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "encoded_value%0#0",
        "encoded%1#0"
      ]
    },
    "128": {
      "op": "swap",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "encoded%1#0",
        "encoded_value%0#0"
      ]
    },
    "129": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0",
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "encoded%2#0"
      ]
    },
    "130": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded%2#0",
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "encoded%2#0",
        "0x151f7c75"
      ]
    },
    "136": {
      "op": "swap",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "0x151f7c75",
        "encoded%2#0"
      ]
    },
    "137": {
      "op": "concat",
      "defined_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%12#0"
      ]
    },
    "138": {
      "op": "log",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    },
    "139": {
      "op": "intc_1 // 1",
      "defined_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#0"
      ]
    },
    "140": {
      "op": "return",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    },
    "141": {
      "block": "main_bare_routing@6",
      "stack_in": [
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%13#0"
      ]
    },
    "143": {
      "op": "bnz main_after_if_else@10",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    },
    "146": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%14#0"
      ]
    },
    "148": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%15#0"
      ]
    },
    "149": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    },
    "150": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#0"
      ]
    },
    "151": {
      "op": "return",
      "stack_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ]
    }
  }
}