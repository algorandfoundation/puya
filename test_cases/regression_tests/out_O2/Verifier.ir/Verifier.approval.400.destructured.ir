main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L12
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "verify(byte[32][])byte[]" => block@3, * => block@4}
    block@3: // verify_route_L13
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        let proof#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 proof#0 0u) // on error: invalid array length header
        let mul%0#0: uint64 = (* aggregate%array_length%0#0 32u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len proof#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.static_array<arc4.uint8, 32>>
        let x#0: bytes = (extract3 proof#0 258u 32u)
        let aggregate%encoded_element%1#0: bytes = ((extract 194 32) proof#0)
        let aggregate%encoded_element%2#0: bytes = ((extract 226 32) proof#0)
        let y#0: bytes = (concat aggregate%encoded_element%1#0 aggregate%encoded_element%2#0)
        let z#0: bytes = (concat aggregate%encoded_element%2#0 x#0)
        let tmp%2#0: bytes = (concat x#0 y#0)
        let tmp%3#1: bytes = (concat tmp%2#0 z#0)
        let aggregate%length%0#0: uint64 = (len tmp%3#1)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%3#1)
        let tmp%3#1: bytes = (concat 0x151f7c75 aggregate%encoded_value%0#0)
        (log tmp%3#1)
        exit 1u
    block@4: // switch_case_next_L12
        fail
    block@5: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u