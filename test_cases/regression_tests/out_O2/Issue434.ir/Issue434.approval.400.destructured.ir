main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "method(uint64)void" => block@3, * => block@4}
    block@3: // method_route_L6
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let c#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        goto block@9
    block@9: // while_top_L8
        let tmp%0#1: uint64 = (global OpcodeBudget)
        let tmp%1#1: bool = (> tmp%0#1 350u)
        goto tmp%1#1 ? block@10 : block@11
    block@10: // while_body_L9
        let tmp%2#1: account = (txn Sender)
        let tmp%3#1: bytes = (sha3_256 tmp%2#1)
        let tmp%4#1: account = (txn Sender)
        let tmp%5#1: bool = (!= tmp%3#1 tmp%4#1)
        (assert tmp%5#1)
        goto block@9
    block@11: // after_while_L8
        goto block@12
    block@12: // if_body_L12
        let x#0: uint64 = (+ c#0 2u)
        goto block@14
    block@14: // after_if_else_L11
        let tmp%9#1: uint64 = (- x#0 2u)
        let tmp%10#1: bool = (== tmp%9#1 c#0)
        (assert tmp%10#1)
        exit 1u
    block@4: // switch_case_next_L4
        fail
    block@5: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u