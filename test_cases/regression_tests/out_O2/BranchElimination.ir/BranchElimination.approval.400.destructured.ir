main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "umm()uint64" => block@4, method "umm2()void" => block@5, method "calculate(uint64[][],uint64)void" => block@6, * => block@9}
    block@4: // umm_route_L5
        let ahuh#0: uint64 = 0u
        goto block@39
    block@39: // while_top_L8
        let tmp%0#1: uint64 = test_cases.regression_tests.leftover_branch.hmm_uint64()
        let _i#0: uint64 = 0u
        goto block@40
    block@40: // for_header_L9
        let continue_looping%0#0: bool = (< _i#0 tmp%0#1)
        goto continue_looping%0#0 ? block@41 : block@48
    block@41: // for_body_L10
        let tmp%1#2: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%1#2 ? block@42 : block@47
    block@42: // if_body_L11
        let tmp%2#1: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%2#1 ? block@43 : block@47
    block@43: // if_body_L12
        let tmp%3#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%3#0 ? block@44 : block@47
    block@44: // if_body_L13
        let tmp%4#1: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#0: uint64 = (+ ahuh#0 tmp%4#1)
        goto block@47
    block@47: // after_if_else_L10
        let _i#0: uint64 = (+ _i#0 1u)
        goto block@40
    block@48: // after_for_L9
        let tmp%6#1: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%6#1 ? block@49 : block@39
    block@49: // if_body_L15
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob ahuh#0)
        let tmp%2#2: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%2#2)
        exit 1u
    block@5: // umm2_route_L18
        let ahuh#0: uint64 = 0u
        goto block@28
    block@28: // while_top_L21
        let tmp%0#3: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%0#3 ? block@29 : block@34
    block@29: // if_body_L23
        let tmp%1#2: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%1#2 ? block@30 : block@34
    block@30: // if_body_L24
        let tmp%2#1: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%2#1 ? block@31 : block@34
    block@31: // if_body_L25
        let tmp%3#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#0: uint64 = (+ ahuh#0 tmp%3#0)
        goto block@34
    block@34: // after_if_else_L22
        let tmp%5#1: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%5#1 ? block@35 : block@28
    block@35: // if_body_L27
        exit 1u
    block@6: // calculate_route_L29
        let nested_list#0: Encoded(len+(len+uint64[])[]) = (txna ApplicationArgs 1)
        let threshold#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let total#0: uint64 = 0u
        let num_boosts#0: uint64 = 0u
        let aggregate%array_length%0#0: uint64 = (extract_uint16 nested_list#0 0u)
        let i#0: uint64 = 0u
        goto block@14
    block@14: // for_header_L38
        let continue_looping%0#0: bool = (< i#0 aggregate%array_length%0#0)
        goto continue_looping%0#0 ? block@15 : block@35
    block@15: // for_body_L39
        let aggregate%array_head_and_tail%0#0: bytes = ((extract 2 0) nested_list#0)
        (assert continue_looping%0#0) // index access is out of bounds
        let aggregate%item_offset_offset%0#0: uint64 = (* i#0 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%item_length%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0)
        let aggregate%item_length_in_bytes%0#0: uint64 = (* aggregate%item_length%0#0 8u)
        let aggregate%item_head_tail_length%0#0: uint64 = (+ aggregate%item_length_in_bytes%0#0 2u)
        let inner_list#0: Encoded(len+uint64[]) = (extract3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%item_head_tail_length%0#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 inner_list#0 0u)
        let last_inner_list_index#0: uint64 = (- aggregate%array_length%2#0 1u)
        let j#0: uint64 = 0u
        goto block@16
    block@16: // for_header_L41
        let continue_looping%1#0: bool = (< j#0 aggregate%array_length%2#0)
        goto continue_looping%1#0 ? block@17 : block@24
    block@17: // for_body_L42
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) inner_list#0)
        let aggregate%bytes_offset%0#0: uint64 = (* j#0 8u)
        let value#0: Encoded(uint64) = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let tmp%4#1: bool = (b>= value#0 threshold#0)
        goto tmp%4#1 ? block@18 : block@23
    block@18: // if_body_L44
        let has_next#0: bool = (< j#0 last_inner_list_index#0)
        goto has_next#0 ? block@19 : block@23
    block@19: // if_body_L46
        let total#0: uint64 = (+ total#0 1u)
        let tmp%7#0: uint64 = (+ j#0 1u)
        let aggregate%bytes_offset%1#0: uint64 = (* tmp%7#0 8u)
        let next_value#0: Encoded(uint64) = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let tmp%8#0: bool = (b< value#0 next_value#0)
        goto tmp%8#0 ? block@20 : block@23
    block@20: // if_body_L49
        let total#0: uint64 = (* total#0 2u)
        let num_boosts#0: uint64 = (+ num_boosts#0 1u)
        goto block@23
    block@23: // after_if_else_L43
        let j#0: uint64 = (+ j#0 1u)
        goto block@16
    block@24: // after_for_L41
        let i#0: uint64 = (+ i#0 1u)
        goto block@14
    block@9: // after_if_else_L4
        fail
    block@10: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.regression_tests.leftover_branch.hmm() -> bool:
    block@0: // L53
        return 0u

subroutine test_cases.regression_tests.leftover_branch.hmm_uint64() -> uint64:
    block@0: // L58
        return 0u