main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@8, block@21, block@21, block@21, block@21, block@21, block@21, block@21, block@21, block@21, block@21][tmp%4#0] else goto block@21
    block@2: // switch_case_0_L4
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "umm()uint64" => block@3, method "umm2()void" => block@4, method "calculate(uint64[][],uint64)void" => block@5, * => block@7}
    block@3: // umm_route_L5
        let ahuh#0: uint64 = 0u
        goto block@50
    block@50: // while_top_L8
        let tmp%0#5: uint64 = test_cases.regression_tests.leftover_branch.hmm_uint64()
        let _i#0: uint64 = 0u
        goto block@51
    block@51: // for_header_L9
        let continue_looping%0#0: bool = (< _i#0 tmp%0#5)
        goto continue_looping%0#0 ? block@52 : block@59
    block@52: // for_body_L10
        let tmp%1#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#21: uint64 = ahuh#0
        goto tmp%1#0 ? block@53 : block@58
    block@53: // if_body_L11
        let tmp%2#1: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#21: uint64 = ahuh#0
        goto tmp%2#1 ? block@54 : block@57
    block@54: // if_body_L12
        let tmp%3#2: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#21: uint64 = ahuh#0
        goto tmp%3#2 ? block@55 : block@56
    block@55: // if_body_L13
        let tmp%4#1: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#0: uint64 = (+ ahuh#0 tmp%4#1)
        let ahuh#21: uint64 = ahuh#0
        goto block@56
    block@56: // after_if_else_L12
        let ahuh#0: uint64 = ahuh#21
        let ahuh#21: uint64 = ahuh#0
        goto block@57
    block@57: // after_if_else_L11
        let ahuh#0: uint64 = ahuh#21
        let ahuh#21: uint64 = ahuh#0
        goto block@58
    block@58: // after_if_else_L10
        let ahuh#0: uint64 = ahuh#21
        let _i#0: uint64 = (+ _i#0 1u)
        goto block@51
    block@59: // after_for_L9
        let tmp%6#1: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%6#1 ? block@60 : block@50
    block@60: // if_body_L15
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob ahuh#0)
        let tmp%2#2: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%2#2)
        exit 1u
    block@4: // umm2_route_L18
        let ahuh#0: uint64 = 0u
        goto block@39
    block@39: // while_top_L21
        let tmp%0#1: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#21: uint64 = ahuh#0
        goto tmp%0#1 ? block@40 : block@45
    block@40: // if_body_L23
        let tmp%1#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#21: uint64 = ahuh#0
        goto tmp%1#0 ? block@41 : block@44
    block@41: // if_body_L24
        let tmp%2#1: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#21: uint64 = ahuh#0
        goto tmp%2#1 ? block@42 : block@43
    block@42: // if_body_L25
        let tmp%3#2: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#0: uint64 = (+ ahuh#0 tmp%3#2)
        let ahuh#21: uint64 = ahuh#0
        goto block@43
    block@43: // after_if_else_L24
        let ahuh#0: uint64 = ahuh#21
        let ahuh#21: uint64 = ahuh#0
        goto block@44
    block@44: // after_if_else_L23
        let ahuh#0: uint64 = ahuh#21
        let ahuh#21: uint64 = ahuh#0
        goto block@45
    block@45: // after_if_else_L22
        let ahuh#0: uint64 = ahuh#21
        let tmp%5#1: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%5#1 ? block@46 : block@39
    block@46: // if_body_L27
        exit 1u
    block@5: // calculate_route_L29
        let nested_list#0: Encoded(len+(len+uint64[])[]) = (txna ApplicationArgs 1)
        let threshold#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let total#0: uint64 = 0u
        let num_boosts#0: uint64 = 0u
        let aggregate%array_length%0#0: uint64 = (extract_uint16 nested_list#0 0u)
        let i#0: uint64 = 0u
        goto block@25
    block@25: // for_header_L38
        let continue_looping%0#0: bool = (< i#0 aggregate%array_length%0#0)
        goto continue_looping%0#0 ? block@26 : block@46
    block@26: // for_body_L39
        let aggregate%array_head_and_tail%0#0: bytes = ((extract 2 0) nested_list#0)
        (assert continue_looping%0#0) // index access is out of bounds
        let aggregate%item_offset_offset%0#0: uint64 = (* i#0 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%item_length%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0)
        let aggregate%item_length_in_bytes%0#0: uint64 = (* aggregate%item_length%0#0 8u)
        let aggregate%item_head_tail_length%0#0: uint64 = (+ aggregate%item_length_in_bytes%0#0 2u)
        let inner_list#0: Encoded(len+uint64[]) = (extract3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%item_head_tail_length%0#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 inner_list#0 0u)
        let last_inner_list_index#0: uint64 = (- aggregate%array_length%2#0 1u)
        let j#0: uint64 = 0u
        goto block@27
    block@27: // for_header_L41
        let continue_looping%1#0: bool = (< j#0 aggregate%array_length%2#0)
        goto continue_looping%1#0 ? block@28 : block@35
    block@28: // for_body_L42
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) inner_list#0)
        let aggregate%bytes_offset%0#0: uint64 = (* j#0 8u)
        let value#0: Encoded(uint64) = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let tmp%4#1: bool = (b>= value#0 threshold#0)
        let num_boosts#15: uint64 = num_boosts#0
        let total#16: uint64 = total#0
        goto tmp%4#1 ? block@29 : block@34
    block@29: // if_body_L44
        let has_next#0: bool = (< j#0 last_inner_list_index#0)
        let num_boosts#15: uint64 = num_boosts#0
        let total#16: uint64 = total#0
        goto has_next#0 ? block@30 : block@33
    block@30: // if_body_L46
        let total#0: uint64 = (+ total#0 1u)
        let tmp%7#1: uint64 = (+ j#0 1u)
        let aggregate%bytes_offset%1#0: uint64 = (* tmp%7#1 8u)
        let next_value#0: Encoded(uint64) = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let tmp%8#0: bool = (b< value#0 next_value#0)
        let num_boosts#15: uint64 = num_boosts#0
        let total#16: uint64 = total#0
        goto tmp%8#0 ? block@31 : block@32
    block@31: // if_body_L49
        let total#0: uint64 = (* total#0 2u)
        let num_boosts#0: uint64 = (+ num_boosts#0 1u)
        let num_boosts#15: uint64 = num_boosts#0
        let total#16: uint64 = total#0
        goto block@32
    block@32: // after_if_else_L48
        let num_boosts#0: uint64 = num_boosts#15
        let total#0: uint64 = total#16
        let num_boosts#15: uint64 = num_boosts#0
        let total#16: uint64 = total#0
        goto block@33
    block@33: // after_if_else_L45
        let num_boosts#0: uint64 = num_boosts#15
        let total#0: uint64 = total#16
        let num_boosts#15: uint64 = num_boosts#0
        let total#16: uint64 = total#0
        goto block@34
    block@34: // after_if_else_L43
        let num_boosts#0: uint64 = num_boosts#15
        let total#0: uint64 = total#16
        let j#0: uint64 = (+ j#0 1u)
        goto block@27
    block@35: // after_for_L41
        let i#0: uint64 = (+ i#0 1u)
        goto block@25
    block@7: // switch_case_next_L4
        fail // this contract does not implement the given ABI method for call NoOp
    block@8: // switch_case_1_L4
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@21: // switch_case_default_L4
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.regression_tests.leftover_branch.hmm() -> bool:
    block@0: // L53
        return 0u

subroutine test_cases.regression_tests.leftover_branch.hmm_uint64() -> uint64:
    block@0: // L58
        return 0u