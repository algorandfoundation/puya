{
    "name": "Issue118",
    "structs": {},
    "methods": [
        {
            "name": "verify",
            "args": [
                {
                    "type": "uint256[]",
                    "name": "values"
                }
            ],
            "returns": {
                "type": "(bool,string)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        49
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        38
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when not creating"
                },
                {
                    "pc": [
                        68
                    ],
                    "errorMessage": "invalid number of bytes for (len+uint256[])"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEgMgogICAgYnl0ZWNibG9jayAweDAwMDMwMDAwCiAgICAvLyByZWdyZXNzaW9uX3Rlc3RzL2lzc3VlXzExOC5weTo1CiAgICAvLyBjbGFzcyBJc3N1ZTExOChBUkM0Q29udHJhY3QpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fX19hbGdvcHlfZGVmYXVsdF9jcmVhdGVANQogICAgcHVzaGJ5dGVzIDB4YmM2NmViNjIgLy8gbWV0aG9kICJ2ZXJpZnkodWludDI1NltdKShib29sLHN0cmluZykiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX3ZlcmlmeV9yb3V0ZUAzCiAgICBlcnIKCm1haW5fdmVyaWZ5X3JvdXRlQDM6CiAgICAvLyByZWdyZXNzaW9uX3Rlc3RzL2lzc3VlXzExOC5weTo2LTcKICAgIC8vICMgcmVmOiBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL3B1eWEvaXNzdWVzLzExOAogICAgLy8gQGFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICYmCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcCAmJiBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBiIHZlcmlmeQoKbWFpbl9fX2FsZ29weV9kZWZhdWx0X2NyZWF0ZUA1OgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgICYmCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcCAmJiBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0X2Nhc2VzLnJlZ3Jlc3Npb25fdGVzdHMuaXNzdWVfMTE4Lklzc3VlMTE4LnZlcmlmeVtyb3V0aW5nXSgpIC0+IHZvaWQ6CnZlcmlmeToKICAgIC8vIHJlZ3Jlc3Npb25fdGVzdHMvaXNzdWVfMTE4LnB5OjYtNwogICAgLy8gIyByZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vcHV5YS9pc3N1ZXMvMTE4CiAgICAvLyBAYWJpbWV0aG9kCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZHVwCiAgICBwdXNoaW50IDMyIC8vIDMyCiAgICAqCiAgICBpbnRjXzIgLy8gMgogICAgKwogICAgdW5jb3ZlciAyCiAgICBsZW4KICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBudW1iZXIgb2YgYnl0ZXMgZm9yIChsZW4rdWludDI1NltdKQogICAgLy8gcmVncmVzc2lvbl90ZXN0cy9pc3N1ZV8xMTgucHk6MTAKICAgIC8vIGJvb2woVHhuLm51bV9hcHBfYXJncykKICAgIHR4biBOdW1BcHBBcmdzCiAgICBpbnRjXzAgLy8gMAogICAgIT0KICAgIC8vIHJlZ3Jlc3Npb25fdGVzdHMvaXNzdWVfMTE4LnB5OjktMTEKICAgIC8vIHZhbDEgPSBCb29sKAogICAgLy8gICAgIGJvb2woVHhuLm51bV9hcHBfYXJncykKICAgIC8vICkgICMgdXNlIGEgbm9uIGNvbnN0YW50IHZhbHVlIHNvIHRoZSByZXBlYXRlZCBleHByZXNzaW9uIGlzIG5vdCBzaW1wbGlmaWVkCiAgICBwdXNoYnl0ZXMgMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBzd2FwCiAgICAvLyByZWdyZXNzaW9uX3Rlc3RzL2lzc3VlXzExOC5weToxMgogICAgLy8gaWYgdmFsdWVzLmxlbmd0aCAhPSAyOgogICAgaW50Y18yIC8vIDIKICAgICE9CiAgICBieiB2ZXJpZnlfYWZ0ZXJfaWZfZWxzZUAzCiAgICAvLyByZWdyZXNzaW9uX3Rlc3RzL2lzc3VlXzExOC5weToxMwogICAgLy8gcmV0dXJuIFR1cGxlKCh2YWwxLCBTdHJpbmcoIiIpKSkKICAgIGJ5dGVjXzAgLy8gMHgwMDAzMDAwMAogICAgY29uY2F0Cgp2ZXJpZnlfYWZ0ZXJfaW5saW5lZF90ZXN0X2Nhc2VzLnJlZ3Jlc3Npb25fdGVzdHMuaXNzdWVfMTE4Lklzc3VlMTE4LnZlcmlmeUA0OgogICAgLy8gcmVncmVzc2lvbl90ZXN0cy9pc3N1ZV8xMTgucHk6Ni03CiAgICAvLyAjIHJlZjogaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9wdXlhL2lzc3Vlcy8xMTgKICAgIC8vIEBhYmltZXRob2QKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKdmVyaWZ5X2FmdGVyX2lmX2Vsc2VAMzoKICAgIC8vIHJlZ3Jlc3Npb25fdGVzdHMvaXNzdWVfMTE4LnB5OjE0CiAgICAvLyByZXR1cm4gVHVwbGUoKHZhbDEsIFN0cmluZygiIikpKQogICAgYnl0ZWNfMCAvLyAweDAwMDMwMDAwCiAgICBjb25jYXQKICAgIC8vIHJlZ3Jlc3Npb25fdGVzdHMvaXNzdWVfMTE4LnB5OjYtNwogICAgLy8gIyByZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vcHV5YS9pc3N1ZXMvMTE4CiAgICAvLyBAYWJpbWV0aG9kCiAgICBiIHZlcmlmeV9hZnRlcl9pbmxpbmVkX3Rlc3RfY2FzZXMucmVncmVzc2lvbl90ZXN0cy5pc3N1ZV8xMTguSXNzdWUxMTgudmVyaWZ5QDQK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyADAAECJgEEAAMAADEbQQAYgAS8ZutiNhoAjgEAAQAxGRQxGBBEQgAKMRkUMRgUEEQjQzYaAUkiWUmBIAskCE8CFRJEMRsiE4ABACJPAlRMJBNBAA0oUIAEFR98dUxQsCNDKFBC//A=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}