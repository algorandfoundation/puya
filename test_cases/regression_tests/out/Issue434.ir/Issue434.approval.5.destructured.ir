main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "method(uint64)void" => block@3, * => block@10}
    block@3: // method_route_L6
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.regression_tests.issue_434.Issue434.method(tmp%7#0)
        let test_cases.regression_tests.issue_434.Issue434.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.regression_tests.issue_434.Issue434.__puya_arc4_router__%0#0
        goto block@11
    block@6: // bare_routing_L4
        let tmp%8#0: uint64 = (txn OnCompletion)
        goto tmp%8#0 ? block@10 : block@7
    block@7: // __algopy_default_create_L1
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // can only call when creating
        let test_cases.regression_tests.issue_434.Issue434.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.regression_tests.issue_434.Issue434.__puya_arc4_router__%0#0
        goto block@11
    block@10: // after_if_else_L4
        let test_cases.regression_tests.issue_434.Issue434.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.regression_tests.issue_434.Issue434.__puya_arc4_router__%0#0
        goto block@11
    block@11: // after_inlined_test_cases.regression_tests.issue_434.Issue434.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.regression_tests.issue_434.Issue434.method(c: uint64) -> void:
    block@1: // while_top_L8
        let tmp%0#0: uint64 = (global OpcodeBudget)
        let tmp%1#0: bool = (> tmp%0#0 350u)
        goto tmp%1#0 ? block@2 : block@3
    block@2: // while_body_L9
        let tmp%2#0: bytes[32] = (txn Sender)
        let tmp%3#0: bytes = (sha3_256 tmp%2#0)
        let tmp%4#0: bytes[32] = (txn Sender)
        let tmp%5#0: bool = (!= tmp%3#0 tmp%4#0)
        (assert tmp%5#0)
        goto block@1
    block@3: // after_while_L8
        goto c#0 ? block@4 : block@5
    block@4: // if_body_L12
        let x#0: uint64 = (+ c#0 2u)
        goto block@6
    block@5: // else_body_L14
        let x#0: uint64 = (+ c#0 2u)
        goto block@6
    block@6: // after_if_else_L11
        let tmp%9#0: uint64 = (- x#0 2u)
        let tmp%10#0: bool = (== tmp%9#0 c#0)
        (assert tmp%10#0)
        return 