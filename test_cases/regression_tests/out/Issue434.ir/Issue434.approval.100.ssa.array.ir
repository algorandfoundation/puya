main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@6, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19][tmp%4#0] else goto block@19
    block@2: // switch_case_0_L4
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "method(uint64)void" => block@3, * => block@5}
    block@3: // method_route_L6
        test_cases.regression_tests.issue_434.Issue434.method[routing]()
        goto block@5
    block@5: // switch_case_next_L4
        fail // this contract does not implement the given ABI method for call NoOp
    block@6: // switch_case_1_L4
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@19: // switch_case_default_L4
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.regression_tests.issue_434.Issue434.method[routing]() -> void:
    block@0: // L6
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let c#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        goto block@2
    block@2: // while_top_L8
        let tmp%0#1: uint64 = (global OpcodeBudget)
        let tmp%1#0: bool = (> tmp%0#1 350u)
        goto tmp%1#0 ? block@3 : block@4
    block@3: // while_body_L9
        let tmp%2#0: account = (txn Sender)
        let tmp%3#0: bytes = (sha3_256 tmp%2#0)
        let tmp%4#0: account = (txn Sender)
        let tmp%5#0: bool = (!= tmp%3#0 tmp%4#0)
        (assert tmp%5#0)
        goto block@2
    block@4: // after_while_L8
        goto c#0 ? block@5 : block@6
    block@5: // if_body_L12
        let x#0: uint64 = (+ c#0 2u)
        goto block@7
    block@6: // else_body_L14
        let x#1: uint64 = (+ c#0 2u)
        goto block@7
    block@7: // after_if_else_L11
        let x#2: uint64 = Ï†(x#0 <- block@5, x#1 <- block@6)
        let tmp%9#0: uint64 = (- x#2 2u)
        let tmp%10#0: bool = (== tmp%9#0 c#0)
        (assert tmp%10#0)
        exit 1u