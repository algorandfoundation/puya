main test_cases.regression_tests.slot_allocation_inlining.SlotAllocationInlining.approval_program:
    block@0: // L13
        let required_budget_with_buffer#0: uint64 = 810u
        goto block@2
    block@2: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> 810u tmp%1#0)
        goto tmp%2#0 ? block@3 : block@7
    block@3: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        goto block@6
    block@6: // switch_case_next_L26
        itxn_submit
        goto block@2
    block@7: // after_while_L20
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, encoded_array%0#0)
        test_cases.regression_tests.slot_allocation_inlining.append_to_array(arr#0)
        let tmp%0#1: uint64 = array_len(arr#0)
        let tmp%1#1: bool = (== tmp%0#1 32u)
        (assert tmp%1#1) // expected array of length 32
        return 1u

subroutine test_cases.regression_tests.slot_allocation_inlining.append_to_array(arr: Encoded(uint64[])*) -> void:
    block@0: // L30
        let tmp%0#0: account = (txn Sender)
        let bytes_length%0#0: uint64 = 32u
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L32
        let item_index_internal%0#1: uint64 = Ï†(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 32u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L33
        let b#0: bytes = (extract3 tmp%0#0 item_index_internal%0#1 1u)
        let tmp%1#0: uint64 = (getbyte tmp%0#0 item_index_internal%0#1)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%2#0: Encoded(uint64[]) = bytes_encode<uint64[]>(tmp%1#0)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%2#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L32
        return 