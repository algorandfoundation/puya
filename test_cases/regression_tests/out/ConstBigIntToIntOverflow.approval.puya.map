{
  "version": 3,
  "sources": [
    "../biguint_opt.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;;;;;;;AACK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAE6B;;AAA1B;AACR;;;AAKiC;AAAT;AAAA;;AARnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAgBwB;AAAT;AAJf;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "bytecblock 0x010000000000000000 0x151f7c75"
    },
    "18": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "20": {
      "op": "bz main___algopy_default_create@9",
      "stack_out": []
    },
    "23": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "25": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "26": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "27": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "29": {
      "op": "assert",
      "stack_out": []
    },
    "30": {
      "op": "pushbytess 0x58db7ce9 0xc95c01ca // method \"get_abs_bound1(uint64)uint64\", method \"get_abs_bound2()uint64\"",
      "defined_out": [
        "Method(get_abs_bound1(uint64)uint64)",
        "Method(get_abs_bound2()uint64)"
      ],
      "stack_out": [
        "Method(get_abs_bound1(uint64)uint64)",
        "Method(get_abs_bound2()uint64)"
      ]
    },
    "42": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(get_abs_bound1(uint64)uint64)",
        "Method(get_abs_bound2()uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(get_abs_bound1(uint64)uint64)",
        "Method(get_abs_bound2()uint64)",
        "tmp%6#0"
      ]
    },
    "45": {
      "op": "match get_abs_bound1 get_abs_bound2",
      "stack_out": []
    },
    "51": {
      "op": "err"
    },
    "52": {
      "block": "main___algopy_default_create@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "54": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "55": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "57": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "58": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "59": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "60": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "62": {
      "op": "return",
      "stack_out": []
    },
    "63": {
      "subroutine": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1[routing]",
      "params": {},
      "block": "get_abs_bound1",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "66": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "67": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "68": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "70": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "71": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "72": {
      "op": "btoi",
      "defined_out": [
        "upper_bound#0"
      ],
      "stack_out": [
        "upper_bound#0"
      ]
    },
    "73": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "abs_bound#0",
        "upper_bound#0"
      ],
      "stack_out": [
        "upper_bound#0",
        "abs_bound#0"
      ]
    },
    "75": {
      "op": "swap",
      "defined_out": [
        "abs_bound#0",
        "upper_bound#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "upper_bound#0"
      ]
    },
    "76": {
      "op": "bz get_abs_bound1_after_if_else@3",
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "79": {
      "op": "bytec_0 // 0x010000000000000000",
      "defined_out": [
        "0x010000000000000000",
        "abs_bound#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "0x010000000000000000"
      ]
    },
    "80": {
      "op": "btoi",
      "stack_out": [
        "abs_bound#0",
        "abs_bound#0"
      ]
    },
    "81": {
      "op": "bury 1",
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "83": {
      "block": "get_abs_bound1_after_if_else@3",
      "stack_in": [
        "abs_bound#0"
      ],
      "op": "dup",
      "defined_out": [
        "abs_bound#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "abs_bound#0"
      ]
    },
    "84": {
      "op": "itob",
      "defined_out": [
        "abs_bound#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "85": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "abs_bound#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "86": {
      "op": "swap",
      "stack_out": [
        "abs_bound#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "87": {
      "op": "concat",
      "defined_out": [
        "abs_bound#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "tmp%4#0"
      ]
    },
    "88": {
      "op": "log",
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "89": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1",
        "abs_bound#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "1"
      ]
    },
    "91": {
      "op": "return",
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "92": {
      "subroutine": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2[routing]",
      "params": {},
      "block": "get_abs_bound2",
      "stack_in": [],
      "op": "bytec_0 // 0x010000000000000000",
      "defined_out": [
        "0x010000000000000000"
      ],
      "stack_out": [
        "0x010000000000000000"
      ]
    },
    "93": {
      "op": "btoi",
      "defined_out": [
        "abs_bound#0"
      ],
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "94": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "95": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "96": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "97": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "98": {
      "op": "log",
      "stack_out": []
    },
    "99": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "101": {
      "op": "return",
      "stack_out": []
    }
  }
}