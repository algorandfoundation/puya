{
  "version": 3,
  "sources": [
    "../biguint_opt.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAaK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;AACK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADL;;AAAA;;;;;;;;;AACA;;;AAEkC;AAClC;;AAAA;;;AAKiC;AAAT;AAAZ;;AAEJ;;AAAA;AAAA;AAMqB;AAAT;AAEZ",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock 0x151f7c75 0x010000000000000000"
    },
    "22": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "24": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "27": {
      "op": "pushbytess 0x58db7ce9 0xc95c01ca // method \"get_abs_bound1(uint64)uint64\", method \"get_abs_bound2()uint64\"",
      "defined_out": [
        "Method(get_abs_bound1(uint64)uint64)",
        "Method(get_abs_bound2()uint64)"
      ],
      "stack_out": [
        "Method(get_abs_bound1(uint64)uint64)",
        "Method(get_abs_bound2()uint64)"
      ]
    },
    "39": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(get_abs_bound1(uint64)uint64)",
        "Method(get_abs_bound2()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(get_abs_bound1(uint64)uint64)",
        "Method(get_abs_bound2()uint64)",
        "tmp%2#0"
      ]
    },
    "42": {
      "op": "match main_get_abs_bound1_route@3 main_get_abs_bound2_route@4",
      "stack_out": []
    },
    "48": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "49": {
      "op": "return",
      "stack_out": []
    },
    "50": {
      "block": "main_get_abs_bound2_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "52": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "53": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "54": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "56": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "57": {
      "callsub": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2",
      "op": "callsub get_abs_bound2",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "60": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "61": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "62": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "63": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "64": {
      "op": "log",
      "stack_out": []
    },
    "65": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "66": {
      "op": "return",
      "stack_out": []
    },
    "67": {
      "block": "main_get_abs_bound1_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "69": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "70": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "71": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "73": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "74": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "77": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "78": {
      "callsub": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1",
      "op": "callsub get_abs_bound1",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "81": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "82": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "83": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "84": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "85": {
      "op": "log",
      "stack_out": []
    },
    "86": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "87": {
      "op": "return",
      "stack_out": []
    },
    "88": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "90": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "93": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "95": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "96": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "97": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "98": {
      "op": "return",
      "stack_out": []
    },
    "99": {
      "subroutine": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1",
      "params": {
        "upper_bound#0": "uint64"
      },
      "block": "get_abs_bound1",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "102": {
      "op": "intc_1 // 0"
    },
    "103": {
      "op": "frame_dig -1",
      "defined_out": [
        "abs_bound#0",
        "upper_bound#0 (copy)"
      ],
      "stack_out": [
        "abs_bound#0",
        "upper_bound#0 (copy)"
      ]
    },
    "105": {
      "op": "bz get_abs_bound1_after_if_else@2",
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "108": {
      "op": "bytec_1 // 0x010000000000000000",
      "defined_out": [
        "0x010000000000000000",
        "abs_bound#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "0x010000000000000000"
      ]
    },
    "109": {
      "op": "btoi",
      "stack_out": [
        "abs_bound#0",
        "abs_bound#0"
      ]
    },
    "110": {
      "op": "frame_bury 0",
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "112": {
      "block": "get_abs_bound1_after_if_else@2",
      "stack_in": [
        "abs_bound#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "abs_bound#0"
      ],
      "stack_out": [
        "abs_bound#0",
        "abs_bound#0"
      ]
    },
    "114": {
      "op": "swap"
    },
    "115": {
      "retsub": true,
      "op": "retsub"
    },
    "116": {
      "subroutine": "test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2",
      "params": {},
      "block": "get_abs_bound2",
      "stack_in": [],
      "op": "bytec_1 // 0x010000000000000000",
      "defined_out": [
        "0x010000000000000000"
      ],
      "stack_out": [
        "0x010000000000000000"
      ]
    },
    "117": {
      "op": "btoi",
      "defined_out": [
        "abs_bound#0"
      ],
      "stack_out": [
        "abs_bound#0"
      ]
    },
    "118": {
      "retsub": true,
      "op": "retsub"
    }
  }
}