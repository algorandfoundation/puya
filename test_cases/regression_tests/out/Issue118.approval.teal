#pragma version 10

test_cases.regression_tests.issue_118.Issue118.approval_program:
    // regression_tests/issue_118.py:5
    // class Issue118(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@5
    method "verify(uint256[])(bool,string)"
    txna ApplicationArgs 0
    match main_verify_route@2
    err // reject transaction

main_verify_route@2:
    // regression_tests/issue_118.py:6-7
    // # ref: https://github.com/algorandfoundation/puya/issues/118
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // regression_tests/issue_118.py:5
    // class Issue118(ARC4Contract):
    txna ApplicationArgs 1
    // regression_tests/issue_118.py:6-7
    // # ref: https://github.com/algorandfoundation/puya/issues/118
    // @abimethod
    callsub verify
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@5:
    // regression_tests/issue_118.py:5
    // class Issue118(ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// test_cases.regression_tests.issue_118.Issue118.verify(values: bytes) -> bytes:
verify:
    // regression_tests/issue_118.py:6-8
    // # ref: https://github.com/algorandfoundation/puya/issues/118
    // @abimethod
    // def verify(self, values: DynamicArray[UInt256]) -> Tuple[Bool, String]:
    proto 1 1
    // regression_tests/issue_118.py:9-11
    // val1 = Bool(
    //     bool(Txn.num_app_args)
    // )  # use a non constant value so the repeated expression is not simplified
    byte 0x00
    int 0
    // regression_tests/issue_118.py:10
    // bool(Txn.num_app_args)
    txn NumAppArgs
    // regression_tests/issue_118.py:9-11
    // val1 = Bool(
    //     bool(Txn.num_app_args)
    // )  # use a non constant value so the repeated expression is not simplified
    setbit
    // regression_tests/issue_118.py:12
    // if values.length != 2:
    frame_dig -1
    int 0
    extract_uint16
    int 2
    !=
    bz verify_after_if_else@2
    // regression_tests/issue_118.py:13
    // return Tuple((val1, String("")))
    byte 0x0003
    concat
    byte 0x0000
    concat
    retsub

verify_after_if_else@2:
    // regression_tests/issue_118.py:14
    // return Tuple((val1, String("")))
    byte 0x0003
    concat
    byte 0x0000
    concat
    retsub
