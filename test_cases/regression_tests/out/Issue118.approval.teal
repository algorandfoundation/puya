#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 2
    bytecblock 0x00030000
    // regression_tests/issue_118.py:5
    // class Issue118(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@5
    pushbytes 0xbc66eb62 // method "verify(uint256[])(bool,string)"
    txna ApplicationArgs 0
    match main_verify_route@3
    err

main_verify_route@3:
    // regression_tests/issue_118.py:6-7
    // # ref: https://github.com/algorandfoundation/puya/issues/118
    // @abimethod
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    b verify

main___algopy_default_create@5:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_1 // 1
    return


// test_cases.regression_tests.issue_118.Issue118.verify[routing]() -> void:
verify:
    // regression_tests/issue_118.py:6-7
    // # ref: https://github.com/algorandfoundation/puya/issues/118
    // @abimethod
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    dup
    pushint 32 // 32
    *
    intc_2 // 2
    +
    uncover 2
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint256>
    // regression_tests/issue_118.py:10
    // bool(Txn.num_app_args)
    txn NumAppArgs
    intc_0 // 0
    !=
    // regression_tests/issue_118.py:9-11
    // val1 = Bool(
    //     bool(Txn.num_app_args)
    // )  # use a non constant value so the repeated expression is not simplified
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    swap
    // regression_tests/issue_118.py:12
    // if values.length != 2:
    intc_2 // 2
    !=
    bz verify_after_if_else@3
    // regression_tests/issue_118.py:13
    // return Tuple((val1, String("")))
    bytec_0 // 0x00030000
    concat

verify_after_inlined_test_cases.regression_tests.issue_118.Issue118.verify@4:
    // regression_tests/issue_118.py:6-7
    // # ref: https://github.com/algorandfoundation/puya/issues/118
    // @abimethod
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

verify_after_if_else@3:
    // regression_tests/issue_118.py:14
    // return Tuple((val1, String("")))
    bytec_0 // 0x00030000
    concat
    // regression_tests/issue_118.py:6-7
    // # ref: https://github.com/algorandfoundation/puya/issues/118
    // @abimethod
    b verify_after_inlined_test_cases.regression_tests.issue_118.Issue118.verify@4
