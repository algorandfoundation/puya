{
  "version": 3,
  "sources": [
    "../jira_ak_752.py"
  ],
  "mappings": ";AAWA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;;AACK;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AACK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;AADL;;AAAA;;;;;;;;;;AACA;;;AAKY;;;;;;;AAAA;AACA;;AAAA;;;AAAiB;;AAAA;;;AAAjB;AAAA;;AAAA;AACA;AAAA;;AAAA;AAEG;;AAAA;AAAA;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "6": {
      "op": "pushbytes 0x49e82748 // method \"verify(byte[32][])byte[]\"",
      "defined_out": [
        "Method(verify(byte[32][])byte[])"
      ],
      "stack_out": [
        "Method(verify(byte[32][])byte[])"
      ]
    },
    "12": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(verify(byte[32][])byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(verify(byte[32][])byte[])",
        "tmp%2#0"
      ]
    },
    "15": {
      "op": "match main_verify_route@3",
      "stack_out": []
    },
    "19": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "21": {
      "op": "return",
      "stack_out": []
    },
    "22": {
      "block": "main_verify_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "24": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "25": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "26": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "28": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "29": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[32][])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[32][])%0#0"
      ]
    },
    "32": {
      "callsub": "test_cases.regression_tests.jira_ak_752.Verifier.verify",
      "op": "callsub verify",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "35": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "36": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%length%0#1"
      ]
    },
    "37": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_bytes%0#1"
      ]
    },
    "38": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%length_uint16%0#1"
      ]
    },
    "41": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#1",
        "tmp%7#0"
      ]
    },
    "42": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#1"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#1"
      ]
    },
    "43": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#1"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#1",
        "0x151f7c75"
      ]
    },
    "49": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#1"
      ]
    },
    "50": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "51": {
      "op": "log",
      "stack_out": []
    },
    "52": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "54": {
      "op": "return",
      "stack_out": []
    },
    "55": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "57": {
      "op": "bnz main_after_if_else@10",
      "stack_out": []
    },
    "60": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "62": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "63": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "64": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "66": {
      "op": "return",
      "stack_out": []
    },
    "67": {
      "subroutine": "test_cases.regression_tests.jira_ak_752.Verifier.verify",
      "params": {
        "proof#0": "bytes"
      },
      "block": "verify",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "70": {
      "op": "frame_dig -1",
      "defined_out": [
        "proof#0 (copy)"
      ],
      "stack_out": [
        "proof#0 (copy)"
      ]
    },
    "72": {
      "op": "pushints 258 32 // 258, 32",
      "defined_out": [
        "258",
        "32",
        "proof#0 (copy)"
      ],
      "stack_out": [
        "proof#0 (copy)",
        "258",
        "32"
      ]
    },
    "77": {
      "op": "extract3",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0"
      ]
    },
    "78": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0",
        "proof#0 (copy)"
      ]
    },
    "80": {
      "op": "extract 194 32",
      "defined_out": [
        "aggregate%encoded_element%1#1",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%encoded_element%1#1"
      ]
    },
    "83": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0",
        "aggregate%encoded_element%1#1",
        "proof#0 (copy)"
      ]
    },
    "85": {
      "op": "extract 226 32",
      "defined_out": [
        "aggregate%encoded_element%1#1",
        "aggregate%encoded_element%2#1",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%encoded_element%1#1",
        "aggregate%encoded_element%2#1"
      ]
    },
    "88": {
      "op": "swap",
      "stack_out": [
        "x#0",
        "aggregate%encoded_element%2#1",
        "aggregate%encoded_element%1#1"
      ]
    },
    "89": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%encoded_element%1#1",
        "aggregate%encoded_element%2#1",
        "aggregate%encoded_element%2#1 (copy)",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%encoded_element%2#1",
        "aggregate%encoded_element%1#1",
        "aggregate%encoded_element%2#1 (copy)"
      ]
    },
    "91": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_element%2#1",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%encoded_element%2#1",
        "y#0"
      ]
    },
    "92": {
      "op": "swap",
      "stack_out": [
        "x#0",
        "y#0",
        "aggregate%encoded_element%2#1"
      ]
    },
    "93": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%encoded_element%2#1",
        "x#0",
        "x#0 (copy)",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "aggregate%encoded_element%2#1",
        "x#0 (copy)"
      ]
    },
    "95": {
      "op": "concat",
      "defined_out": [
        "x#0",
        "y#0",
        "z#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "z#0"
      ]
    },
    "96": {
      "op": "cover 2",
      "stack_out": [
        "z#0",
        "x#0",
        "y#0"
      ]
    },
    "98": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "z#0"
      ],
      "stack_out": [
        "z#0",
        "tmp%2#0"
      ]
    },
    "99": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "z#0"
      ]
    },
    "100": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "101": {
      "retsub": true,
      "op": "retsub"
    }
  }
}