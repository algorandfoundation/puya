{
  "version": 3,
  "sources": [
    "../jira_ak_752.py"
  ],
  "mappings": ";AAWA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AACK;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKO;;;;;;AAAA;AACA;;AAAA;;;AAAiB;;AAAA;;;AAAjB;AAAA;;AAAA;AACA;AAAA;;AAAA;AAEG;;AAAA;AAAA;AAAA;AATV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3": {
      "op": "bz main___algopy_default_create@5",
      "stack_out": []
    },
    "6": {
      "op": "pushbytes 0x49e82748 // method \"verify(byte[32][])byte[]\"",
      "defined_out": [
        "Method(verify(byte[32][])byte[])"
      ],
      "stack_out": [
        "Method(verify(byte[32][])byte[])"
      ]
    },
    "12": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(verify(byte[32][])byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(verify(byte[32][])byte[])",
        "tmp%2#0"
      ]
    },
    "15": {
      "op": "match main_verify_route@3",
      "stack_out": []
    },
    "19": {
      "op": "err"
    },
    "20": {
      "block": "main_verify_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "22": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "23": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "25": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "26": {
      "error": "OnCompletion must be NoOp && can only call when not creating",
      "op": "assert // OnCompletion must be NoOp && can only call when not creating",
      "stack_out": []
    },
    "27": {
      "op": "b verify"
    },
    "30": {
      "block": "main___algopy_default_create@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "32": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "33": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "35": {
      "op": "!",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "36": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "37": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "38": {
      "subroutine": "test_cases.regression_tests.jira_ak_752.Verifier.verify[routing]",
      "params": {},
      "block": "verify",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "proof#0"
      ],
      "stack_out": [
        "proof#0"
      ]
    },
    "41": {
      "op": "dup",
      "defined_out": [
        "proof#0",
        "proof#0 (copy)"
      ],
      "stack_out": [
        "proof#0",
        "proof#0 (copy)"
      ]
    },
    "42": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0",
        "proof#0",
        "proof#0 (copy)"
      ],
      "stack_out": [
        "proof#0",
        "proof#0 (copy)",
        "0"
      ]
    },
    "44": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "proof#0"
      ],
      "stack_out": [
        "proof#0",
        "aggregate%array_length%0#0"
      ]
    },
    "45": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "aggregate%array_length%0#0",
        "proof#0"
      ],
      "stack_out": [
        "proof#0",
        "aggregate%array_length%0#0",
        "32"
      ]
    },
    "47": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "proof#0"
      ],
      "stack_out": [
        "proof#0",
        "mul%0#0"
      ]
    },
    "48": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "proof#0"
      ],
      "stack_out": [
        "proof#0",
        "mul%0#0",
        "2"
      ]
    },
    "50": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "proof#0"
      ],
      "stack_out": [
        "proof#0",
        "add%0#0"
      ]
    },
    "51": {
      "op": "dig 1",
      "stack_out": [
        "proof#0",
        "add%0#0",
        "proof#0 (copy)"
      ]
    },
    "53": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "proof#0"
      ],
      "stack_out": [
        "proof#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "54": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "proof#0"
      ],
      "stack_out": [
        "proof#0",
        "eq%0#0"
      ]
    },
    "55": {
      "error": "invalid number of bytes for (len+uint8[32][])",
      "op": "assert // invalid number of bytes for (len+uint8[32][])",
      "stack_out": [
        "proof#0"
      ]
    },
    "56": {
      "op": "dup",
      "stack_out": [
        "proof#0",
        "proof#0 (copy)"
      ]
    },
    "57": {
      "op": "pushints 258 32 // 258, 32",
      "defined_out": [
        "258",
        "32",
        "proof#0",
        "proof#0 (copy)"
      ],
      "stack_out": [
        "proof#0",
        "proof#0 (copy)",
        "258",
        "32"
      ]
    },
    "62": {
      "op": "extract3",
      "defined_out": [
        "proof#0",
        "x#0"
      ],
      "stack_out": [
        "proof#0",
        "x#0"
      ]
    },
    "63": {
      "op": "dig 1",
      "stack_out": [
        "proof#0",
        "x#0",
        "proof#0 (copy)"
      ]
    },
    "65": {
      "op": "extract 194 32",
      "defined_out": [
        "aggregate%encoded_element%1#0",
        "proof#0",
        "x#0"
      ],
      "stack_out": [
        "proof#0",
        "x#0",
        "aggregate%encoded_element%1#0"
      ]
    },
    "68": {
      "op": "uncover 2",
      "stack_out": [
        "x#0",
        "aggregate%encoded_element%1#0",
        "proof#0"
      ]
    },
    "70": {
      "op": "extract 226 32",
      "defined_out": [
        "aggregate%encoded_element%1#0",
        "aggregate%encoded_element%2#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%encoded_element%1#0",
        "aggregate%encoded_element%2#0"
      ]
    },
    "73": {
      "op": "swap",
      "stack_out": [
        "x#0",
        "aggregate%encoded_element%2#0",
        "aggregate%encoded_element%1#0"
      ]
    },
    "74": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%encoded_element%1#0",
        "aggregate%encoded_element%2#0",
        "aggregate%encoded_element%2#0 (copy)",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%encoded_element%2#0",
        "aggregate%encoded_element%1#0",
        "aggregate%encoded_element%2#0 (copy)"
      ]
    },
    "76": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_element%2#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%encoded_element%2#0",
        "y#0"
      ]
    },
    "77": {
      "op": "swap",
      "stack_out": [
        "x#0",
        "y#0",
        "aggregate%encoded_element%2#0"
      ]
    },
    "78": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%encoded_element%2#0",
        "x#0",
        "x#0 (copy)",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "aggregate%encoded_element%2#0",
        "x#0 (copy)"
      ]
    },
    "80": {
      "op": "concat",
      "defined_out": [
        "x#0",
        "y#0",
        "z#0"
      ],
      "stack_out": [
        "x#0",
        "y#0",
        "z#0"
      ]
    },
    "81": {
      "op": "cover 2",
      "stack_out": [
        "z#0",
        "x#0",
        "y#0"
      ]
    },
    "83": {
      "op": "concat",
      "defined_out": [
        "tmp%2#1",
        "z#0"
      ],
      "stack_out": [
        "z#0",
        "tmp%2#1"
      ]
    },
    "84": {
      "op": "swap",
      "stack_out": [
        "tmp%2#1",
        "z#0"
      ]
    },
    "85": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "86": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "87": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "aggregate%length%0#0"
      ]
    },
    "88": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "89": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "92": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%3#0"
      ]
    },
    "93": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "94": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "100": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "101": {
      "op": "concat",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "102": {
      "op": "log",
      "stack_out": []
    },
    "103": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "105": {
      "op": "return",
      "stack_out": []
    }
  }
}