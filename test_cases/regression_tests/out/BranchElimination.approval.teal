#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 2 8
    // regression_tests/leftover_branch.py:4
    // class BranchElimination(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@10
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0xaec250ef 0xbd4b223f 0x847f775f // method "umm()uint64", method "umm2()void", method "calculate(uint64[][],uint64)void"
    txna ApplicationArgs 0
    match umm umm2 calculate
    err

main___algopy_default_create@10:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_1 // 1
    return


// test_cases.regression_tests.leftover_branch.hmm() -> uint64:
hmm:
    // regression_tests/leftover_branch.py:55
    // return False
    intc_0 // 0
    retsub


// test_cases.regression_tests.leftover_branch.hmm_uint64() -> uint64:
hmm_uint64:
    // regression_tests/leftover_branch.py:60
    // return UInt64(0)
    intc_0 // 0
    retsub


// test_cases.regression_tests.leftover_branch.BranchElimination.umm[routing]() -> void:
umm:
    pushbytes ""
    dup
    // regression_tests/leftover_branch.py:7
    // ahuh = UInt64(0)
    intc_0 // 0

umm_while_top@2:
    // regression_tests/leftover_branch.py:9
    // for _i in urange(hmm_uint64()):
    callsub hmm_uint64
    bury 2
    intc_0 // 0
    bury 3

umm_for_header@4:
    // regression_tests/leftover_branch.py:9
    // for _i in urange(hmm_uint64()):
    dig 2
    dig 2
    <
    bz umm_after_for@13
    // regression_tests/leftover_branch.py:10
    // if hmm():  # noqa: SIM102
    callsub hmm
    bz umm_after_if_else@11
    // regression_tests/leftover_branch.py:11
    // if hmm():  # noqa: SIM102
    callsub hmm
    bz umm_after_if_else@11
    // regression_tests/leftover_branch.py:12
    // if hmm():
    callsub hmm
    bz umm_after_if_else@11
    // regression_tests/leftover_branch.py:13
    // ahuh += hmm()
    callsub hmm
    dig 1
    +
    bury 1

umm_after_if_else@11:
    // regression_tests/leftover_branch.py:9
    // for _i in urange(hmm_uint64()):
    dig 2
    intc_1 // 1
    +
    bury 3
    b umm_for_header@4

umm_after_for@13:
    // regression_tests/leftover_branch.py:14
    // if hmm():
    callsub hmm
    bz umm_while_top@2
    // regression_tests/leftover_branch.py:5
    // @arc4.abimethod
    dup
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// test_cases.regression_tests.leftover_branch.BranchElimination.umm2[routing]() -> void:
umm2:
    // regression_tests/leftover_branch.py:20
    // ahuh = UInt64(0)
    intc_0 // 0

umm2_while_top@2:
    // regression_tests/leftover_branch.py:22
    // if hmm():  # noqa: SIM102
    callsub hmm
    bz umm2_after_if_else@9
    // regression_tests/leftover_branch.py:23
    // if hmm():  # noqa: SIM102
    callsub hmm
    bz umm2_after_if_else@9
    // regression_tests/leftover_branch.py:24
    // if hmm():
    callsub hmm
    bz umm2_after_if_else@9
    // regression_tests/leftover_branch.py:25
    // ahuh += hmm()
    callsub hmm
    dig 1
    +
    bury 1

umm2_after_if_else@9:
    // regression_tests/leftover_branch.py:26
    // if hmm():
    callsub hmm
    bz umm2_while_top@2
    // regression_tests/leftover_branch.py:18
    // @arc4.abimethod
    intc_1 // 1
    return


// test_cases.regression_tests.leftover_branch.BranchElimination.calculate[routing]() -> void:
calculate:
    intc_0 // 0
    dupn 3
    pushbytes ""
    dupn 6
    // regression_tests/leftover_branch.py:29
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    dup
    cover 2
    intc_2 // 2
    *
    swap
    dup
    len
    swap
    extract 2 0
    intc_0 // 0

calculate_for_header@1:
    // regression_tests/leftover_branch.py:29
    // @arc4.abimethod
    dup
    dig 5
    <
    bz calculate_after_for@4
    dupn 2
    intc_2 // 2
    *
    dig 3
    dup
    uncover 2
    extract_uint16 // on error: invalid array encoding
    dup
    dig 7
    dup
    cover 4
    ==
    assert // invalid tail pointer for (len+(len+uint64[])[])
    dup2
    extract_uint16
    intc_3 // 8
    *
    intc_2 // 2
    +
    extract3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_3 // 8
    *
    intc_2 // 2
    +
    +
    bury 5
    intc_1 // 1
    +
    bury 1
    b calculate_for_header@1

calculate_after_for@4:
    // regression_tests/leftover_branch.py:29
    // @arc4.abimethod
    dig 3
    intc_2 // 2
    +
    dig 3
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.dynamic_array<arc4.uint64>>
    txna ApplicationArgs 2
    dup
    bury 15
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // regression_tests/leftover_branch.py:35
    // total = UInt64(0)
    intc_0 // 0
    bury 6
    // regression_tests/leftover_branch.py:36
    // num_boosts = UInt64(0)
    intc_0 // 0
    bury 7
    // regression_tests/leftover_branch.py:38
    // for i in urange(nested_list.length):
    intc_0 // 0
    bury 10

calculate_for_header@6:
    // regression_tests/leftover_branch.py:38
    // for i in urange(nested_list.length):
    dig 9
    dig 5
    <
    dup
    bury 12
    bz calculate_after_for@19
    // regression_tests/leftover_branch.py:39
    // inner_list = nested_list[i].copy()
    dig 10
    assert // index access is out of bounds
    dig 9
    intc_2 // 2
    *
    dig 2
    dup
    uncover 2
    extract_uint16
    dup2
    extract_uint16
    intc_3 // 8
    *
    intc_2 // 2
    +
    extract3
    dup
    bury 16
    // regression_tests/leftover_branch.py:40
    // last_inner_list_index = inner_list.length - 1
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    dup
    bury 13
    intc_1 // 1
    -
    bury 8
    // regression_tests/leftover_branch.py:41
    // for j in urange(inner_list.length):
    intc_0 // 0
    bury 9

calculate_for_header@8:
    // regression_tests/leftover_branch.py:41
    // for j in urange(inner_list.length):
    dig 8
    dig 12
    <
    bz calculate_after_for@17
    // regression_tests/leftover_branch.py:42
    // value = inner_list[j]
    dig 14
    extract 2 0
    dup
    bury 17
    dig 9
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    dup
    bury 14
    // regression_tests/leftover_branch.py:43
    // if value >= threshold:
    dig 14
    b>=
    bz calculate_after_if_else@15
    // regression_tests/leftover_branch.py:44
    // has_next = j < last_inner_list_index
    dig 8
    dig 8
    <
    // regression_tests/leftover_branch.py:45
    // if has_next:
    bz calculate_after_if_else@15
    // regression_tests/leftover_branch.py:46
    // total += 1
    dig 5
    intc_1 // 1
    +
    bury 6
    // regression_tests/leftover_branch.py:47
    // next_value = inner_list[j + 1]
    dig 8
    intc_1 // 1
    +
    intc_3 // 8
    *
    dig 16
    swap
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    // regression_tests/leftover_branch.py:48
    // if value < next_value:
    dig 13
    b>
    bz calculate_after_if_else@15
    // regression_tests/leftover_branch.py:49
    // total *= 2
    dig 5
    intc_2 // 2
    *
    bury 6
    // regression_tests/leftover_branch.py:50
    // num_boosts += 1
    dig 6
    intc_1 // 1
    +
    bury 7

calculate_after_if_else@15:
    // regression_tests/leftover_branch.py:41
    // for j in urange(inner_list.length):
    dig 8
    intc_1 // 1
    +
    bury 9
    b calculate_for_header@8

calculate_after_for@17:
    // regression_tests/leftover_branch.py:38
    // for i in urange(nested_list.length):
    dig 9
    intc_1 // 1
    +
    bury 10
    b calculate_for_header@6

calculate_after_for@19:
    // regression_tests/leftover_branch.py:29
    // @arc4.abimethod
    intc_1 // 1
    return
