main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "set_0_convert(byte[])byte[]" => block@4, method "set_0_compare(byte[])byte[]" => block@5, method "bool_only_properties()void" => block@6, * => block@9}
    block@4: // set_0_convert_route_L5
        test_cases.regression_tests.bool_only.BoolOnly.set_0_convert[routing]()
        goto block@9
    block@5: // set_0_compare_route_L9
        test_cases.regression_tests.bool_only.BoolOnly.set_0_compare[routing]()
        goto block@9
    block@6: // bool_only_properties_route_L13
        test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties[routing]()
        goto block@9
    block@9: // after_if_else_L4
        fail
    block@10: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.regression_tests.bool_only.BoolOnly.set_0_convert[routing]() -> void:
    block@0: // L5
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(tmp%0#0)
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let inp#0: bytes = decode_bytes<bytes>(tmp%0#0)
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: bool = (!= tmp%0#1 0u)
        let tmp%2#1: bytes = (setbit inp#0 0u tmp%1#1)
        let tmp%3#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%2#1)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine test_cases.regression_tests.bool_only.BoolOnly.set_0_compare[routing]() -> void:
    block@0: // L9
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(tmp%0#0)
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let inp#0: bytes = decode_bytes<bytes>(tmp%0#0)
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: bool = (> tmp%0#1 0u)
        let tmp%2#1: bytes = (setbit inp#0 0u tmp%1#1)
        let tmp%3#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%2#1)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties[routing]() -> void:
    block@0: // L13
        itxn_begin
        ((itxn_field TypeEnum) acfg)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        ((itxn_field ConfigAssetDefaultFrozen) tmp%1#0)
        itxn_submit
        itxn_begin
        ((itxn_field Nonparticipation) 1u)
        ((itxn_field TypeEnum) keyreg)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u