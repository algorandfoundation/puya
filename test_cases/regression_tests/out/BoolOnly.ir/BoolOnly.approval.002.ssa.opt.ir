main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@8
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "set_0_convert(byte[])byte[]" => block@3, method "set_0_compare(byte[])byte[]" => block@4, method "bool_only_properties()void" => block@5, * => block@12}
    block@3: // set_0_convert_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%7#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%8#0: bytes = test_cases.regression_tests.bool_only.BoolOnly.set_0_convert(tmp%7#0)
        let tmp%9#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%8#0)
        let tmp%10#0: bytes = (concat 0x151f7c75 tmp%9#0)
        (log tmp%10#0)
        let test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#0: bool = 1u
        goto block@13
    block@4: // set_0_compare_route_L9
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%15#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%1#0)
        let tmp%16#0: bytes = test_cases.regression_tests.bool_only.BoolOnly.set_0_compare(tmp%15#0)
        let tmp%17#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%16#0)
        let tmp%18#0: bytes = (concat 0x151f7c75 tmp%17#0)
        (log tmp%18#0)
        let test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#1: bool = 1u
        goto block@13
    block@5: // bool_only_properties_route_L13
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties()
        let test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#2: bool = 1u
        goto block@13
    block@8: // bare_routing_L4
        let tmp%23#0: uint64 = (txn OnCompletion)
        goto tmp%23#0 ? block@12 : block@9
    block@9: // __algopy_default_create_L1
        let tmp%24#0: uint64 = (txn ApplicationID)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // can only call when creating
        let test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#3: bool = 1u
        goto block@13
    block@12: // after_if_else_L4
        let test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#4: bool = 0u
        goto block@13
    block@13: // after_inlined_test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#0 <- block@3, test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#1 <- block@4, test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#2 <- block@5, test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#3 <- block@9, test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__%0#4 <- block@12)
        return tmp%0#0

subroutine test_cases.regression_tests.bool_only.BoolOnly.set_0_convert(inp: bytes) -> bytes:
    block@0: // L5
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        let tmp%2#0: bytes = (setbit inp#0 0u tmp%1#0)
        return tmp%2#0

subroutine test_cases.regression_tests.bool_only.BoolOnly.set_0_compare(inp: bytes) -> bytes:
    block@0: // L9
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (> tmp%0#0 0u)
        let tmp%2#0: bytes = (setbit inp#0 0u tmp%1#0)
        return tmp%2#0

subroutine test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties() -> void:
    block@0: // L13
        itxn_begin
        ((itxn_field TypeEnum) acfg)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        ((itxn_field ConfigAssetDefaultFrozen) tmp%1#0)
        itxn_submit
        itxn_begin
        ((itxn_field Nonparticipation) 1u)
        ((itxn_field TypeEnum) keyreg)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 