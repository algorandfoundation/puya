main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.regression_tests.bool_only.BoolOnly.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@9
    block@1: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@2 : block@7
    block@2: // call_NoOp_L4
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "set_0_convert(byte[])byte[]" => block@3, method "set_0_compare(byte[])byte[]" => block@4, method "bool_only_properties()void" => block@5, * => block@6}
    block@3: // set_0_convert_route_L5
        test_cases.regression_tests.bool_only.BoolOnly.set_0_convert[routing]()
        goto block@6
    block@4: // set_0_compare_route_L9
        test_cases.regression_tests.bool_only.BoolOnly.set_0_compare[routing]()
        goto block@6
    block@5: // bool_only_properties_route_L13
        test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties[routing]()
        goto block@6
    block@6: // switch_case_next_L4
        goto block@8
    block@7: // create_NoOp_L4
        goto block@8
    block@8: // after_if_else_L4
        goto block@10
    block@9: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        test_cases.regression_tests.bool_only.BoolOnly.__algopy_default_create()
        exit 1u
    block@10: // after_if_else_L4
        exit 0u

subroutine test_cases.regression_tests.bool_only.BoolOnly.set_0_convert[routing]() -> void:
    block@0: // L5
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(tmp%0#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+uint8[])
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = decode_bytes<bytes>(as_Encoded(len+uint8[])%0#0)
        let tmp%2#0: bytes = test_cases.regression_tests.bool_only.BoolOnly.set_0_convert(tmp%1#0)
        let tmp%3#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%2#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine test_cases.regression_tests.bool_only.BoolOnly.set_0_compare[routing]() -> void:
    block@0: // L9
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(tmp%0#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+uint8[])
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = decode_bytes<bytes>(as_Encoded(len+uint8[])%0#0)
        let tmp%2#0: bytes = test_cases.regression_tests.bool_only.BoolOnly.set_0_compare(tmp%1#0)
        let tmp%3#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%2#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties[routing]() -> void:
    block@0: // L13
        test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties()
        exit 1u

subroutine test_cases.regression_tests.bool_only.BoolOnly.set_0_convert(inp: bytes) -> bytes:
    block@0: // L5
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        let tmp%2#0: bytes = (setbit inp#0 0u tmp%1#0)
        return tmp%2#0

subroutine test_cases.regression_tests.bool_only.BoolOnly.set_0_compare(inp: bytes) -> bytes:
    block@0: // L9
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (> tmp%0#0 0u)
        let tmp%2#0: bytes = (setbit inp#0 0u tmp%1#0)
        return tmp%2#0

subroutine test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties() -> void:
    block@0: // L13
        itxn_begin
        ((itxn_field TypeEnum) acfg)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        ((itxn_field ConfigAssetDefaultFrozen) tmp%1#0)
        itxn_submit
        itxn_begin
        let inner_txn_params%0#0: itxn_field_set = itxn_field_set(0)
        let inner_txn_params%0%%param_Fee_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%Fee_length#0: uint64 = 1u
        let inner_txn_params%0%%param_TypeEnum_idx_0#0: uint64 = keyreg
        let inner_txn_params%0%%TypeEnum_length#0: uint64 = 1u
        let inner_txn_params%0%%param_Nonparticipation_idx_0#0: bool = 1u
        let inner_txn_params%0%%Nonparticipation_length#0: uint64 = 1u
        let inner_txn_params%0%%Sender_length#0: uint64 = 0u
        let inner_txn_params%0%%Note_length#0: uint64 = 0u
        let inner_txn_params%0%%Receiver_length#0: uint64 = 0u
        let inner_txn_params%0%%Amount_length#0: uint64 = 0u
        let inner_txn_params%0%%CloseRemainderTo_length#0: uint64 = 0u
        let inner_txn_params%0%%VotePK_length#0: uint64 = 0u
        let inner_txn_params%0%%SelectionPK_length#0: uint64 = 0u
        let inner_txn_params%0%%VoteFirst_length#0: uint64 = 0u
        let inner_txn_params%0%%VoteLast_length#0: uint64 = 0u
        let inner_txn_params%0%%VoteKeyDilution_length#0: uint64 = 0u
        let inner_txn_params%0%%Type_length#0: uint64 = 0u
        let inner_txn_params%0%%XferAsset_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetAmount_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetSender_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetReceiver_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetCloseTo_length#0: uint64 = 0u
        let inner_txn_params%0%%ApplicationID_length#0: uint64 = 0u
        let inner_txn_params%0%%OnCompletion_length#0: uint64 = 0u
        let inner_txn_params%0%%ApprovalProgram_length#0: uint64 = 0u
        let inner_txn_params%0%%ClearStateProgram_length#0: uint64 = 0u
        let inner_txn_params%0%%RekeyTo_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAsset_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetTotal_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetDecimals_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetDefaultFrozen_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetUnitName_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetName_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetURL_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetMetadataHash_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetManager_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetReserve_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetFreeze_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetClawback_length#0: uint64 = 0u
        let inner_txn_params%0%%FreezeAsset_length#0: uint64 = 0u
        let inner_txn_params%0%%FreezeAssetAccount_length#0: uint64 = 0u
        let inner_txn_params%0%%FreezeAssetFrozen_length#0: uint64 = 0u
        let inner_txn_params%0%%GlobalNumUint_length#0: uint64 = 0u
        let inner_txn_params%0%%GlobalNumByteSlice_length#0: uint64 = 0u
        let inner_txn_params%0%%LocalNumUint_length#0: uint64 = 0u
        let inner_txn_params%0%%LocalNumByteSlice_length#0: uint64 = 0u
        let inner_txn_params%0%%ExtraProgramPages_length#0: uint64 = 0u
        let inner_txn_params%0%%StateProofPK_length#0: uint64 = 0u
        let inner_txn_params%0%%ApplicationArgs_length#0: uint64 = 0u
        let inner_txn_params%0%%Accounts_length#0: uint64 = 0u
        let inner_txn_params%0%%Assets_length#0: uint64 = 0u
        let inner_txn_params%0%%Applications_length#0: uint64 = 0u
        let inner_txn_params%0%%ApprovalProgramPages_length#0: uint64 = 0u
        let inner_txn_params%0%%ClearStateProgramPages_length#0: uint64 = 0u
        let inner_txn_params%0%%RejectVersion_length#0: uint64 = 0u
        ((itxn_field Nonparticipation) inner_txn_params%0%%param_Nonparticipation_idx_0#0)
        ((itxn_field TypeEnum) inner_txn_params%0%%param_TypeEnum_idx_0#0)
        ((itxn_field Fee) inner_txn_params%0%%param_Fee_idx_0#0)
        goto block@1
    block@1: // next_txn_L20
        itxn_submit
        return 

subroutine test_cases.regression_tests.bool_only.BoolOnly.__algopy_default_create() -> void:
    block@0: // L1
        return 