main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L12
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "verify(byte[32][])byte[]" => block@3, * => block@10}
    block@3: // verify_route_L13
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[32][])%0#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        let tmp%7#0: bytes = test_cases.regression_tests.jira_ak_752.Verifier.verify(reinterpret_Encoded(len+uint8[32][])%0#0)
        let tmp%8#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%7#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        let test_cases.regression_tests.jira_ak_752.Verifier.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L12
        let tmp%10#0: uint64 = (txn OnCompletion)
        goto tmp%10#0 ? block@10 : block@7
    block@7: // __algopy_default_create_L1
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // can only call when creating
        let test_cases.regression_tests.jira_ak_752.Verifier.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L12
        let test_cases.regression_tests.jira_ak_752.Verifier.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_test_cases.regression_tests.jira_ak_752.Verifier.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(test_cases.regression_tests.jira_ak_752.Verifier.__puya_arc4_router__%0#0 <- block@3, test_cases.regression_tests.jira_ak_752.Verifier.__puya_arc4_router__%0#1 <- block@7, test_cases.regression_tests.jira_ak_752.Verifier.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine test_cases.regression_tests.jira_ak_752.Verifier.verify(proof: Encoded(len+uint8[32][])) -> bytes:
    block@0: // L13
        let x#0: bytes = extract_value(proof#0, 8u)
        let array_item%1#0: Encoded(uint8[32]) = extract_value(proof#0, 6u)
        let array_item%2#0: Encoded(uint8[32]) = extract_value(proof#0, 7u)
        let y#0: bytes = (concat array_item%1#0 array_item%2#0)
        let z#0: bytes = (concat array_item%2#0 x#0)
        let tmp%2#0: bytes = (concat x#0 y#0)
        let tmp%3#0: bytes = (concat tmp%2#0 z#0)
        return tmp%3#0