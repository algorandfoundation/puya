main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L12
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "verify(byte[32][])byte[]" => block@3, * => block@4}
    block@3: // verify_route_L13
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        test_cases.regression_tests.jira_ak_752.Verifier.verify[routing]()
        goto block@4
    block@4: // switch_case_next_L12
        fail
    block@5: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.regression_tests.jira_ak_752.Verifier.verify[routing]() -> void:
    block@0: // L13
        let proof#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        let x#0: bytes = extract_value(proof#0, 8u)
        let array_item%1#0: Encoded(uint8[32]) = extract_value(proof#0, 6u)
        let array_item%2#0: Encoded(uint8[32]) = extract_value(proof#0, 7u)
        let y#0: bytes = (concat array_item%1#0 array_item%2#0)
        let z#0: bytes = (concat array_item%2#0 x#0)
        let tmp%2#1: bytes = (concat x#0 y#0)
        let tmp%3#0: bytes = (concat tmp%2#1 z#0)
        let tmp%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%3#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u