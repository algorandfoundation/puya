main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.regression_tests.jira_ak_752.Verifier.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.regression_tests.jira_ak_752.Verifier.__puya_arc4_router__() -> bool:
    block@0: // L12
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L12
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "verify(byte[32][])byte[]" => block@2, * => block@3}
    block@2: // verify_route_L13
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[32][])%0#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        let tmp%7#0: bytes = test_cases.regression_tests.jira_ak_752.Verifier.verify(reinterpret_Encoded(len+uint8[32][])%0#0)
        let tmp%8#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%7#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        return 1u
    block@3: // switch_case_default_L12
        goto block@4
    block@4: // switch_case_next_L12
        goto block@9
    block@5: // bare_routing_L12
        let tmp%10#0: uint64 = (txn OnCompletion)
        switch tmp%10#0 {0u => block@6, * => block@7}
    block@6: // __algopy_default_create_L1
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (== tmp%11#0 0u)
        (assert tmp%12#0) // can only call when creating
        test_cases.regression_tests.jira_ak_752.Verifier.__algopy_default_create()
        return 1u
    block@7: // switch_case_default_L12
        goto block@8
    block@8: // switch_case_next_L12
        goto block@9
    block@9: // after_if_else_L12
        return 0u

subroutine test_cases.regression_tests.jira_ak_752.Verifier.verify(proof: Encoded(len+uint8[32][])) -> bytes:
    block@0: // L13
        let array_item%0#0: Encoded(uint8[32]) = extract_value(proof#0, 8u)
        let values%0#0: Encoded(uint8[32]) = decode_bytes<Encoded(uint8[32])>(array_item%0#0)
        let x#0: bytes = values%0#0
        let array_item%1#0: Encoded(uint8[32]) = extract_value(proof#0, 6u)
        let values%1#0: Encoded(uint8[32]) = decode_bytes<Encoded(uint8[32])>(array_item%1#0)
        let array_item%2#0: Encoded(uint8[32]) = extract_value(proof#0, 7u)
        let values%2#0: Encoded(uint8[32]) = decode_bytes<Encoded(uint8[32])>(array_item%2#0)
        let tmp%0#0: bytes = (concat values%1#0 values%2#0)
        let y#0: bytes = tmp%0#0
        let array_item%3#0: Encoded(uint8[32]) = extract_value(proof#0, 7u)
        let values%3#0: Encoded(uint8[32]) = decode_bytes<Encoded(uint8[32])>(array_item%3#0)
        let array_item%4#0: Encoded(uint8[32]) = extract_value(proof#0, 8u)
        let values%4#0: Encoded(uint8[32]) = decode_bytes<Encoded(uint8[32])>(array_item%4#0)
        let tmp%1#0: bytes = (concat values%3#0 values%4#0)
        let z#0: bytes = tmp%1#0
        let tmp%2#0: bytes = (concat x#0 y#0)
        let tmp%3#0: bytes = (concat tmp%2#0 z#0)
        return tmp%3#0

subroutine test_cases.regression_tests.jira_ak_752.Verifier.__algopy_default_create() -> void:
    block@0: // L1
        return 