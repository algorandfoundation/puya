main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@17
    block@2: // abi_routing_L4
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%6#0: bool = (txn ApplicationID)
        (assert tmp%6#0)
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "umm()uint64" => block@6, method "umm2()void" => block@7, method "calculate(uint64[][],uint64)void" => block@8, * => block@9}
    block@6: // umm_route_L5
        test_cases.regression_tests.leftover_branch.BranchElimination.umm[routing]()
        fail
    block@7: // umm2_route_L18
        test_cases.regression_tests.leftover_branch.BranchElimination.umm2[routing]()
        fail
    block@8: // calculate_route_L29
        test_cases.regression_tests.leftover_branch.BranchElimination.calculate[routing]()
        fail
    block@9: // switch_case_default_L4
        fail
    block@17: // bare_routing_L4
        let tmp%9#0: uint64 = (txn OnCompletion)
        let not%tmp%9#0: bool = (! tmp%9#0)
        (assert not%tmp%9#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        exit 1u

subroutine test_cases.regression_tests.leftover_branch.hmm() -> bool:
    block@0: // L53
        return 0u

subroutine test_cases.regression_tests.leftover_branch.hmm_uint64() -> uint64:
    block@0: // L58
        return 0u

subroutine test_cases.regression_tests.leftover_branch.BranchElimination.umm[routing]() -> void:
    block@0: // L5
        let ahuh#0: uint64 = 0u
        goto block@2
    block@2: // while_top_L8
        let ahuh#3: uint64 = φ(ahuh#0 <- block@0, ahuh#1 <- block@15)
        let tmp%0#1: uint64 = test_cases.regression_tests.leftover_branch.hmm_uint64()
        let _i#0: uint64 = 0u
        goto block@4
    block@4: // for_header_L9
        let _i#1: uint64 = φ(_i#0 <- block@2, _i#2 <- block@11)
        let ahuh#1: uint64 = φ(ahuh#3 <- block@2, ahuh#4 <- block@11)
        let continue_looping%0#0: bool = (< _i#1 tmp%0#1)
        goto continue_looping%0#0 ? block@5 : block@13
    block@5: // for_body_L10
        let tmp%1#1: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%1#1 ? block@6 : block@11
    block@6: // if_body_L11
        let tmp%2#1: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%2#1 ? block@7 : block@10
    block@7: // if_body_L12
        let tmp%3#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%3#0 ? block@8 : block@9
    block@8: // if_body_L13
        let tmp%4#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#2: uint64 = (+ ahuh#1 tmp%4#0)
        goto block@9
    block@9: // after_if_else_L12
        let ahuh#6: uint64 = φ(ahuh#1 <- block@7, ahuh#2 <- block@8)
        goto block@10
    block@10: // after_if_else_L11
        let ahuh#5: uint64 = φ(ahuh#1 <- block@6, ahuh#6 <- block@9)
        goto block@11
    block@11: // after_if_else_L10
        let ahuh#4: uint64 = φ(ahuh#1 <- block@5, ahuh#5 <- block@10)
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@4
    block@13: // after_for_L9
        let tmp%6#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%6#0 ? block@14 : block@15
    block@14: // if_body_L15
        let tmp%1#0: Encoded(uint64) = bytes_encode<uint64>(ahuh#1)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u
    block@15: // after_if_else_L14
        goto block@2

subroutine test_cases.regression_tests.leftover_branch.BranchElimination.umm2[routing]() -> void:
    block@0: // L18
        let ahuh#0: uint64 = 0u
        goto block@2
    block@2: // while_top_L21
        let ahuh#1: uint64 = φ(ahuh#0 <- block@0, ahuh#3 <- block@11)
        let tmp%0#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%0#0 ? block@4 : block@9
    block@4: // if_body_L23
        let tmp%1#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%1#0 ? block@5 : block@8
    block@5: // if_body_L24
        let tmp%2#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%2#0 ? block@6 : block@7
    block@6: // if_body_L25
        let tmp%3#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#2: uint64 = (+ ahuh#1 tmp%3#0)
        goto block@7
    block@7: // after_if_else_L24
        let ahuh#5: uint64 = φ(ahuh#1 <- block@5, ahuh#2 <- block@6)
        goto block@8
    block@8: // after_if_else_L23
        let ahuh#4: uint64 = φ(ahuh#1 <- block@4, ahuh#5 <- block@7)
        goto block@9
    block@9: // after_if_else_L22
        let ahuh#3: uint64 = φ(ahuh#1 <- block@2, ahuh#4 <- block@8)
        let tmp%5#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%5#0 ? block@10 : block@11
    block@10: // if_body_L27
        exit 1u
    block@11: // after_if_else_L26
        goto block@2

subroutine test_cases.regression_tests.leftover_branch.BranchElimination.calculate[routing]() -> void:
    block@0: // L29
        let nested_list#0: Encoded(len+(len+uint64[])[]) = (txna ApplicationArgs 1)
        let threshold#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let total#0: uint64 = 0u
        let num_boosts#0: uint64 = 0u
        let tmp%0#0: uint64 = array_len(nested_list#0)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L38
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@13)
        let total#4: uint64 = φ(total#0 <- block@0, total#1 <- block@13)
        let num_boosts#3: uint64 = φ(num_boosts#0 <- block@0, num_boosts#1 <- block@13)
        let continue_looping%0#0: bool = (< i#1 tmp%0#0)
        goto continue_looping%0#0 ? block@3 : block@15
    block@3: // for_body_L39
        let inner_list#0: Encoded(len+uint64[]) = extract_value(nested_list#0, i#1)
        let tmp%1#0: uint64 = array_len(inner_list#0)
        let last_inner_list_index#0: uint64 = (- tmp%1#0 1u)
        let tmp%3#0: uint64 = array_len(inner_list#0)
        let j#0: uint64 = 0u
        goto block@4
    block@4: // for_header_L41
        let j#1: uint64 = φ(j#0 <- block@3, j#2 <- block@11)
        let total#1: uint64 = φ(total#4 <- block@3, total#5 <- block@11)
        let num_boosts#1: uint64 = φ(num_boosts#3 <- block@3, num_boosts#4 <- block@11)
        let continue_looping%1#0: bool = (< j#1 tmp%3#0)
        goto continue_looping%1#0 ? block@5 : block@13
    block@5: // for_body_L42
        let value#0: Encoded(uint64) = extract_value(nested_list#0, i#1, j#1)
        let tmp%4#0: bool = (b>= value#0 threshold#0)
        goto tmp%4#0 ? block@6 : block@11
    block@6: // if_body_L44
        let has_next#0: bool = (< j#1 last_inner_list_index#0)
        goto has_next#0 ? block@7 : block@10
    block@7: // if_body_L46
        let total#2: uint64 = (+ total#1 1u)
        let tmp%7#0: uint64 = (+ j#1 1u)
        let next_value#0: Encoded(uint64) = extract_value(nested_list#0, i#1, tmp%7#0)
        let tmp%8#0: bool = (b< value#0 next_value#0)
        goto tmp%8#0 ? block@8 : block@9
    block@8: // if_body_L49
        let total#3: uint64 = (* total#2 2u)
        let num_boosts#2: uint64 = (+ num_boosts#1 1u)
        goto block@9
    block@9: // after_if_else_L48
        let total#7: uint64 = φ(total#2 <- block@7, total#3 <- block@8)
        let num_boosts#6: uint64 = φ(num_boosts#1 <- block@7, num_boosts#2 <- block@8)
        goto block@10
    block@10: // after_if_else_L45
        let total#6: uint64 = φ(total#1 <- block@6, total#7 <- block@9)
        let num_boosts#5: uint64 = φ(num_boosts#1 <- block@6, num_boosts#6 <- block@9)
        goto block@11
    block@11: // after_if_else_L43
        let total#5: uint64 = φ(total#1 <- block@5, total#6 <- block@10)
        let num_boosts#4: uint64 = φ(num_boosts#1 <- block@5, num_boosts#5 <- block@10)
        let j#2: uint64 = (+ j#1 1u)
        goto block@4
    block@13: // after_for_L41
        let i#2: uint64 = (+ i#1 1u)
        goto block@2
    block@15: // after_for_L38
        exit 1u