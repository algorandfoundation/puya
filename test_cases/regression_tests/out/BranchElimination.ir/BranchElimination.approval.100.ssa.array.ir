main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "umm()uint64" => block@4, method "umm2()void" => block@5, method "calculate(uint64[][],uint64)void" => block@6, * => block@9}
    block@4: // umm_route_L5
        test_cases.regression_tests.leftover_branch.BranchElimination.umm[routing]()
        goto block@9
    block@5: // umm2_route_L18
        test_cases.regression_tests.leftover_branch.BranchElimination.umm2[routing]()
        goto block@9
    block@6: // calculate_route_L29
        test_cases.regression_tests.leftover_branch.BranchElimination.calculate[routing]()
        goto block@9
    block@9: // after_if_else_L4
        fail
    block@10: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.regression_tests.leftover_branch.hmm() -> bool:
    block@0: // L53
        return 0u

subroutine test_cases.regression_tests.leftover_branch.hmm_uint64() -> uint64:
    block@0: // L58
        return 0u

subroutine test_cases.regression_tests.leftover_branch.BranchElimination.umm[routing]() -> void:
    block@0: // L5
        let ahuh#0: uint64 = 0u
        goto block@2
    block@2: // while_top_L8
        let ahuh#3: uint64 = φ(ahuh#0 <- block@0, ahuh#1 <- block@15)
        let tmp%0#1: uint64 = test_cases.regression_tests.leftover_branch.hmm_uint64()
        let value_internal%0#0: uint64 = 0u
        goto block@4
    block@4: // for_header_L9
        let _i#0: uint64 = φ(value_internal%0#0 <- block@2, value_internal%0#2 <- block@11)
        let ahuh#1: uint64 = φ(ahuh#3 <- block@2, ahuh#4 <- block@11)
        let continue_looping%0#0: bool = (< _i#0 tmp%0#1)
        goto continue_looping%0#0 ? block@5 : block@13
    block@5: // for_body_L10
        let tmp%1#1: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%1#1 ? block@6 : block@11
    block@6: // if_body_L11
        let tmp%2#1: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%2#1 ? block@7 : block@10
    block@7: // if_body_L12
        let tmp%3#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%3#0 ? block@8 : block@9
    block@8: // if_body_L13
        let tmp%4#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#2: uint64 = (+ ahuh#1 tmp%4#0)
        goto block@9
    block@9: // after_if_else_L12
        let ahuh#6: uint64 = φ(ahuh#1 <- block@7, ahuh#2 <- block@8)
        goto block@10
    block@10: // after_if_else_L11
        let ahuh#5: uint64 = φ(ahuh#1 <- block@6, ahuh#6 <- block@9)
        goto block@11
    block@11: // after_if_else_L10
        let ahuh#4: uint64 = φ(ahuh#1 <- block@5, ahuh#5 <- block@10)
        let value_internal%0#2: uint64 = (+ _i#0 1u)
        goto block@4
    block@13: // after_for_L9
        let tmp%6#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%6#0 ? block@14 : block@15
    block@14: // if_body_L15
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob ahuh#1)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u
    block@15: // after_if_else_L14
        goto block@2

subroutine test_cases.regression_tests.leftover_branch.BranchElimination.umm2[routing]() -> void:
    block@0: // L18
        let ahuh#0: uint64 = 0u
        goto block@2
    block@2: // while_top_L21
        let ahuh#1: uint64 = φ(ahuh#0 <- block@0, ahuh#3 <- block@11)
        let tmp%0#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%0#0 ? block@4 : block@9
    block@4: // if_body_L23
        let tmp%1#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%1#0 ? block@5 : block@8
    block@5: // if_body_L24
        let tmp%2#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%2#0 ? block@6 : block@7
    block@6: // if_body_L25
        let tmp%3#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        let ahuh#2: uint64 = (+ ahuh#1 tmp%3#0)
        goto block@7
    block@7: // after_if_else_L24
        let ahuh#5: uint64 = φ(ahuh#1 <- block@5, ahuh#2 <- block@6)
        goto block@8
    block@8: // after_if_else_L23
        let ahuh#4: uint64 = φ(ahuh#1 <- block@4, ahuh#5 <- block@7)
        goto block@9
    block@9: // after_if_else_L22
        let ahuh#3: uint64 = φ(ahuh#1 <- block@2, ahuh#4 <- block@8)
        let tmp%5#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%5#0 ? block@10 : block@11
    block@10: // if_body_L27
        exit 1u
    block@11: // after_if_else_L26
        goto block@2

subroutine test_cases.regression_tests.leftover_branch.BranchElimination.calculate[routing]() -> void:
    block@0: // L29
        let nested_list#0: Encoded(len+(len+uint64[])[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 nested_list#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let num_bytes%0#0: uint64 = (* length%0#0 2u)
        let total_length%0#0: uint64 = (len nested_list#0)
        let array_data%0#0: bytes = ((extract 2 0) nested_list#0)
        let index%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L29
        let index%0#1: uint64 = φ(index%0#0 <- block@0, index%0#2 <- block@2)
        let num_bytes%0#1: uint64 = φ(num_bytes%0#0 <- block@0, num_bytes%0#2 <- block@2)
        let continue_looping%0#0: bool = (< index%0#1 length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L29
        let head_offset_bytes%0#0: uint64 = (* index%0#1 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_data%0#0 head_offset_bytes%0#0) // on error: invalid array encoding
        let offset_is_correct%0#0: bool = (== item_offset%0#0 num_bytes%0#1)
        (assert offset_is_correct%0#0) // invalid tail pointer for (len+(len+uint64[])[])
        let aggregate%total_length%0#0: uint64 = (len nested_list#0)
        let aggregate%array_head_and_tail%0#0: bytes = (substring3 nested_list#0 2u aggregate%total_length%0#0)
        let aggregate%item_offset_offset%0#0: uint64 = (* index%0#1 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%item_length%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0)
        let aggregate%item_length_in_bytes%0#0: uint64 = (* aggregate%item_length%0#0 8u)
        let aggregate%item_head_tail_length%0#0: uint64 = (+ aggregate%item_length_in_bytes%0#0 2u)
        let aggregate%item%0#0: bytes = (extract3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%item_head_tail_length%0#0)
        let tmp%1#0: Encoded(len+uint64[]) = aggregate%item%0#0
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%1#0 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%1#0
        let mul%0#0: uint64 = (* length%1#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let num_bytes%0#2: uint64 = (+ num_bytes%0#1 add%0#0)
        let index%0#2: uint64 = (+ index%0#1 1u)
        goto block@1
    block@4: // after_for_L29
        let num_bytes%1#0: uint64 = (+ num_bytes%0#1 2u)
        let eq%0#0: bool = (== total_length%0#0 num_bytes%1#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.dynamic_array<arc4.uint64>>
        let threshold#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len threshold#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let total#0: uint64 = 0u
        let num_boosts#0: uint64 = 0u
        let aggregate%array_length%2#0: uint64 = (extract_uint16 nested_list#0 0u) // on error: invalid array length header
        let tmp%0#1: uint64 = aggregate%array_length%2#0
        let value_internal%0#0: uint64 = 0u
        goto block@6
    block@6: // for_header_L38
        let i#0: uint64 = φ(value_internal%0#0 <- block@4, value_internal%0#2 <- block@17)
        let total#4: uint64 = φ(total#0 <- block@4, total#1 <- block@17)
        let num_boosts#3: uint64 = φ(num_boosts#0 <- block@4, num_boosts#1 <- block@17)
        let continue_looping%0#1: bool = (< i#0 tmp%0#1)
        goto continue_looping%0#1 ? block@7 : block@19
    block@7: // for_body_L39
        let aggregate%total_length%1#0: uint64 = (len nested_list#0)
        let aggregate%array_head_and_tail%1#0: bytes = (substring3 nested_list#0 2u aggregate%total_length%1#0)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 nested_list#0 0u) // on error: invalid array length header
        let aggregate%lt%0#0: bool = (< i#0 aggregate%array_length%3#0)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%item_offset_offset%1#0: uint64 = (* i#0 2u)
        let aggregate%item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%item_offset_offset%1#0)
        let aggregate%item_length%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%item_offset%1#0)
        let aggregate%item_length_in_bytes%1#0: uint64 = (* aggregate%item_length%1#0 8u)
        let aggregate%item_head_tail_length%1#0: uint64 = (+ aggregate%item_length_in_bytes%1#0 2u)
        let aggregate%item%1#0: bytes = (extract3 aggregate%array_head_and_tail%1#0 aggregate%item_offset%1#0 aggregate%item_head_tail_length%1#0)
        let inner_list#0: Encoded(len+uint64[]) = aggregate%item%1#0
        let aggregate%array_length%4#0: uint64 = (extract_uint16 inner_list#0 0u) // on error: invalid array length header
        let tmp%1#1: uint64 = aggregate%array_length%4#0
        let last_inner_list_index#0: uint64 = (- tmp%1#1 1u)
        let aggregate%array_length%5#0: uint64 = (extract_uint16 inner_list#0 0u) // on error: invalid array length header
        let tmp%3#0: uint64 = aggregate%array_length%5#0
        let value_internal%1#0: uint64 = 0u
        goto block@8
    block@8: // for_header_L41
        let j#0: uint64 = φ(value_internal%1#0 <- block@7, value_internal%1#2 <- block@15)
        let total#1: uint64 = φ(total#4 <- block@7, total#5 <- block@15)
        let num_boosts#1: uint64 = φ(num_boosts#3 <- block@7, num_boosts#4 <- block@15)
        let continue_looping%1#0: bool = (< j#0 tmp%3#0)
        goto continue_looping%1#0 ? block@9 : block@17
    block@9: // for_body_L42
        let aggregate%total_length%2#0: uint64 = (len nested_list#0)
        let aggregate%array_head_and_tail%2#0: bytes = (substring3 nested_list#0 2u aggregate%total_length%2#0)
        let aggregate%array_length%6#0: uint64 = (extract_uint16 nested_list#0 0u) // on error: invalid array length header
        let aggregate%lt%1#0: bool = (< i#0 aggregate%array_length%6#0)
        (assert aggregate%lt%1#0) // index access is out of bounds
        let aggregate%item_offset_offset%2#0: uint64 = (* i#0 2u)
        let aggregate%item_offset%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 aggregate%item_offset_offset%2#0)
        let aggregate%item_length%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 aggregate%item_offset%2#0)
        let aggregate%item_length_in_bytes%2#0: uint64 = (* aggregate%item_length%2#0 8u)
        let aggregate%item_head_tail_length%2#0: uint64 = (+ aggregate%item_length_in_bytes%2#0 2u)
        let aggregate%item%2#0: bytes = (extract3 aggregate%array_head_and_tail%2#0 aggregate%item_offset%2#0 aggregate%item_head_tail_length%2#0)
        let aggregate%total_length%3#0: uint64 = (len aggregate%item%2#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 aggregate%item%2#0 2u aggregate%total_length%3#0)
        let aggregate%bytes_offset%0#0: uint64 = (* j#0 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let value#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let tmp%4#0: bool = (b>= value#0 threshold#0)
        goto tmp%4#0 ? block@10 : block@15
    block@10: // if_body_L44
        let has_next#0: bool = (< j#0 last_inner_list_index#0)
        goto has_next#0 ? block@11 : block@14
    block@11: // if_body_L46
        let total#2: uint64 = (+ total#1 1u)
        let tmp%7#0: uint64 = (+ j#0 1u)
        let aggregate%total_length%4#0: uint64 = (len nested_list#0)
        let aggregate%array_head_and_tail%3#0: bytes = (substring3 nested_list#0 2u aggregate%total_length%4#0)
        let aggregate%array_length%7#0: uint64 = (extract_uint16 nested_list#0 0u) // on error: invalid array length header
        let aggregate%lt%2#0: bool = (< i#0 aggregate%array_length%7#0)
        (assert aggregate%lt%2#0) // index access is out of bounds
        let aggregate%item_offset_offset%3#0: uint64 = (* i#0 2u)
        let aggregate%item_offset%3#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%3#0 aggregate%item_offset_offset%3#0)
        let aggregate%item_length%3#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%3#0 aggregate%item_offset%3#0)
        let aggregate%item_length_in_bytes%3#0: uint64 = (* aggregate%item_length%3#0 8u)
        let aggregate%item_head_tail_length%3#0: uint64 = (+ aggregate%item_length_in_bytes%3#0 2u)
        let aggregate%item%3#0: bytes = (extract3 aggregate%array_head_and_tail%3#0 aggregate%item_offset%3#0 aggregate%item_head_tail_length%3#0)
        let aggregate%total_length%5#0: uint64 = (len aggregate%item%3#0)
        let aggregate%array_trimmed%1#0: bytes = (substring3 aggregate%item%3#0 2u aggregate%total_length%5#0)
        let aggregate%bytes_offset%1#0: uint64 = (* tmp%7#0 8u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let next_value#0: Encoded(uint64) = aggregate%encoded_element%1#0
        let tmp%8#0: bool = (b< value#0 next_value#0)
        goto tmp%8#0 ? block@12 : block@13
    block@12: // if_body_L49
        let total#3: uint64 = (* total#2 2u)
        let num_boosts#2: uint64 = (+ num_boosts#1 1u)
        goto block@13
    block@13: // after_if_else_L48
        let total#7: uint64 = φ(total#2 <- block@11, total#3 <- block@12)
        let num_boosts#6: uint64 = φ(num_boosts#1 <- block@11, num_boosts#2 <- block@12)
        goto block@14
    block@14: // after_if_else_L45
        let total#6: uint64 = φ(total#1 <- block@10, total#7 <- block@13)
        let num_boosts#5: uint64 = φ(num_boosts#1 <- block@10, num_boosts#6 <- block@13)
        goto block@15
    block@15: // after_if_else_L43
        let total#5: uint64 = φ(total#1 <- block@9, total#6 <- block@14)
        let num_boosts#4: uint64 = φ(num_boosts#1 <- block@9, num_boosts#5 <- block@14)
        let value_internal%1#2: uint64 = (+ j#0 1u)
        goto block@8
    block@17: // after_for_L41
        let value_internal%0#2: uint64 = (+ i#0 1u)
        goto block@6
    block@19: // after_for_L38
        exit 1u