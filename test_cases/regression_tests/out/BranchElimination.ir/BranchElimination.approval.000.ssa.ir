main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.regression_tests.leftover_branch.BranchElimination.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.regression_tests.leftover_branch.hmm() -> bool:
    block@0: // L53
        return 0u

subroutine test_cases.regression_tests.leftover_branch.hmm_uint64() -> uint64:
    block@0: // L58
        return 0u

subroutine test_cases.regression_tests.leftover_branch.BranchElimination.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@9
    block@1: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@2 : block@7
    block@2: // call_NoOp_L4
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "umm()uint64" => block@3, method "umm2()void" => block@4, method "calculate(uint64[][],uint64)void" => block@5, * => block@6}
    block@3: // umm_route_L5
        test_cases.regression_tests.leftover_branch.BranchElimination.umm[routing]()
        goto block@6
    block@4: // umm2_route_L18
        test_cases.regression_tests.leftover_branch.BranchElimination.umm2[routing]()
        goto block@6
    block@5: // calculate_route_L29
        test_cases.regression_tests.leftover_branch.BranchElimination.calculate[routing]()
        goto block@6
    block@6: // switch_case_next_L4
        goto block@8
    block@7: // create_NoOp_L4
        goto block@8
    block@8: // after_if_else_L4
        goto block@10
    block@9: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        test_cases.regression_tests.leftover_branch.BranchElimination.__algopy_default_create()
        exit 1u
    block@10: // after_if_else_L4
        exit 0u

subroutine test_cases.regression_tests.leftover_branch.BranchElimination.umm[routing]() -> void:
    block@0: // L5
        let tmp%0#0: uint64 = test_cases.regression_tests.leftover_branch.BranchElimination.umm()
        let tmp%1#0: Encoded(uint64) = bytes_encode<uint64>(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.regression_tests.leftover_branch.BranchElimination.umm2[routing]() -> void:
    block@0: // L18
        test_cases.regression_tests.leftover_branch.BranchElimination.umm2()
        exit 1u

subroutine test_cases.regression_tests.leftover_branch.BranchElimination.calculate[routing]() -> void:
    block@0: // L29
        let reinterpret_Encoded(len+(len+uint64[])[])%0#0: Encoded(len+(len+uint64[])[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        test_cases.regression_tests.leftover_branch.BranchElimination.calculate(reinterpret_Encoded(len+(len+uint64[])[])%0#0, reinterpret_Encoded(uint64)%0#0)
        exit 1u

subroutine test_cases.regression_tests.leftover_branch.BranchElimination.umm() -> uint64:
    block@0: // L5
        let ahuh#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L8
        let ahuh#3: uint64 = φ(ahuh#0 <- block@0, ahuh#1 <- block@14)
        goto 1u ? block@2 : block@15
    block@2: // while_body_L9
        let tmp%0#0: uint64 = test_cases.regression_tests.leftover_branch.hmm_uint64()
        (assert 1u) // Step cannot be zero
        let value_internal%0#0: uint64 = 0u
        goto block@3
    block@3: // for_header_L9
        let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@2, value_internal%0#2 <- block@11)
        let ahuh#1: uint64 = φ(ahuh#3 <- block@2, ahuh#4 <- block@11)
        let continue_looping%0#0: bool = (< value_internal%0#1 tmp%0#0)
        goto continue_looping%0#0 ? block@4 : block@12
    block@4: // for_body_L10
        let _i#0: uint64 = value_internal%0#1
        let tmp%1#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%1#0 ? block@5 : block@10
    block@5: // if_body_L11
        let tmp%2#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%2#0 ? block@6 : block@9
    block@6: // if_body_L12
        let tmp%3#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%3#0 ? block@7 : block@8
    block@7: // if_body_L13
        let tmp%4#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        let tmp%5#0: uint64 = (+ ahuh#1 tmp%4#0)
        let ahuh#2: uint64 = tmp%5#0
        goto block@8
    block@8: // after_if_else_L12
        let ahuh#6: uint64 = φ(ahuh#1 <- block@6, ahuh#2 <- block@7)
        goto block@9
    block@9: // after_if_else_L11
        let ahuh#5: uint64 = φ(ahuh#1 <- block@5, ahuh#6 <- block@8)
        goto block@10
    block@10: // after_if_else_L10
        let ahuh#4: uint64 = φ(ahuh#1 <- block@4, ahuh#5 <- block@9)
        goto block@11
    block@11: // for_footer_L9
        let value_internal%0#2: uint64 = (+ value_internal%0#1 1u)
        goto block@3
    block@12: // after_for_L9
        let tmp%6#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%6#0 ? block@13 : block@14
    block@13: // if_body_L15
        goto block@15
    block@14: // after_if_else_L14
        goto block@1
    block@15: // after_while_L8
        let ahuh#7: uint64 = φ(ahuh#3 <- block@1, ahuh#1 <- block@13)
        return ahuh#7

subroutine test_cases.regression_tests.leftover_branch.BranchElimination.umm2() -> void:
    block@0: // L18
        let ahuh#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L21
        let ahuh#1: uint64 = φ(ahuh#0 <- block@0, ahuh#3 <- block@10)
        goto 1u ? block@2 : block@11
    block@2: // while_body_L22
        let tmp%0#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%0#0 ? block@3 : block@8
    block@3: // if_body_L23
        let tmp%1#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%1#0 ? block@4 : block@7
    block@4: // if_body_L24
        let tmp%2#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%2#0 ? block@5 : block@6
    block@5: // if_body_L25
        let tmp%3#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        let tmp%4#0: uint64 = (+ ahuh#1 tmp%3#0)
        let ahuh#2: uint64 = tmp%4#0
        goto block@6
    block@6: // after_if_else_L24
        let ahuh#5: uint64 = φ(ahuh#1 <- block@4, ahuh#2 <- block@5)
        goto block@7
    block@7: // after_if_else_L23
        let ahuh#4: uint64 = φ(ahuh#1 <- block@3, ahuh#5 <- block@6)
        goto block@8
    block@8: // after_if_else_L22
        let ahuh#3: uint64 = φ(ahuh#1 <- block@2, ahuh#4 <- block@7)
        let tmp%5#0: bool = test_cases.regression_tests.leftover_branch.hmm()
        goto tmp%5#0 ? block@9 : block@10
    block@9: // if_body_L27
        goto block@11
    block@10: // after_if_else_L26
        goto block@1
    block@11: // after_while_L21
        return 

subroutine test_cases.regression_tests.leftover_branch.BranchElimination.calculate(nested_list: Encoded(len+(len+uint64[])[]), threshold: Encoded(uint64)) -> void:
    block@0: // L29
        let total#0: uint64 = 0u
        let num_boosts#0: uint64 = 0u
        let tmp%0#0: uint64 = array_len(nested_list#0)
        (assert 1u) // Step cannot be zero
        let value_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L38
        let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@13)
        let total#4: uint64 = φ(total#0 <- block@0, total#1 <- block@13)
        let num_boosts#3: uint64 = φ(num_boosts#0 <- block@0, num_boosts#1 <- block@13)
        let continue_looping%0#0: bool = (< value_internal%0#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@14
    block@2: // for_body_L39
        let i#0: uint64 = value_internal%0#1
        let array_item%0#0: Encoded(len+uint64[]) = extract_value(nested_list#0, i#0)
        let inner_list#0: Encoded(len+uint64[]) = array_item%0#0
        let tmp%1#0: uint64 = array_len(inner_list#0)
        let tmp%2#0: uint64 = (- tmp%1#0 1u)
        let last_inner_list_index#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = array_len(inner_list#0)
        (assert 1u) // Step cannot be zero
        let value_internal%1#0: uint64 = 0u
        goto block@3
    block@3: // for_header_L41
        let value_internal%1#1: uint64 = φ(value_internal%1#0 <- block@2, value_internal%1#2 <- block@11)
        let total#1: uint64 = φ(total#4 <- block@2, total#5 <- block@11)
        let num_boosts#1: uint64 = φ(num_boosts#3 <- block@2, num_boosts#4 <- block@11)
        let continue_looping%1#0: bool = (< value_internal%1#1 tmp%3#0)
        goto continue_looping%1#0 ? block@4 : block@12
    block@4: // for_body_L42
        let j#0: uint64 = value_internal%1#1
        let array_item%1#0: Encoded(uint64) = extract_value(inner_list#0, j#0)
        let value#0: Encoded(uint64) = array_item%1#0
        let reinterpret_biguint%0#0: biguint = value#0
        let reinterpret_biguint%1#0: biguint = threshold#0
        let tmp%4#0: bool = (b>= reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        goto tmp%4#0 ? block@5 : block@10
    block@5: // if_body_L44
        let tmp%5#0: bool = (< j#0 last_inner_list_index#0)
        let has_next#0: bool = tmp%5#0
        goto has_next#0 ? block@6 : block@9
    block@6: // if_body_L46
        let tmp%6#0: uint64 = (+ total#1 1u)
        let total#2: uint64 = tmp%6#0
        let tmp%7#0: uint64 = (+ j#0 1u)
        let array_item%2#0: Encoded(uint64) = extract_value(inner_list#0, tmp%7#0)
        let next_value#0: Encoded(uint64) = array_item%2#0
        let reinterpret_biguint%2#0: biguint = value#0
        let reinterpret_biguint%3#0: biguint = next_value#0
        let tmp%8#0: bool = (b< reinterpret_biguint%2#0 reinterpret_biguint%3#0)
        goto tmp%8#0 ? block@7 : block@8
    block@7: // if_body_L49
        let tmp%9#0: uint64 = (* total#2 2u)
        let total#3: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (+ num_boosts#1 1u)
        let num_boosts#2: uint64 = tmp%10#0
        goto block@8
    block@8: // after_if_else_L48
        let total#7: uint64 = φ(total#2 <- block@6, total#3 <- block@7)
        let num_boosts#6: uint64 = φ(num_boosts#1 <- block@6, num_boosts#2 <- block@7)
        goto block@9
    block@9: // after_if_else_L45
        let total#6: uint64 = φ(total#1 <- block@5, total#7 <- block@8)
        let num_boosts#5: uint64 = φ(num_boosts#1 <- block@5, num_boosts#6 <- block@8)
        goto block@10
    block@10: // after_if_else_L43
        let total#5: uint64 = φ(total#1 <- block@4, total#6 <- block@9)
        let num_boosts#4: uint64 = φ(num_boosts#1 <- block@4, num_boosts#5 <- block@9)
        goto block@11
    block@11: // for_footer_L41
        let value_internal%1#2: uint64 = (+ value_internal%1#1 1u)
        goto block@3
    block@12: // after_for_L41
        goto block@13
    block@13: // for_footer_L38
        let value_internal%0#2: uint64 = (+ value_internal%0#1 1u)
        goto block@1
    block@14: // after_for_L38
        return 

subroutine test_cases.regression_tests.leftover_branch.BranchElimination.__algopy_default_create() -> void:
    block@0: // L1
        return 