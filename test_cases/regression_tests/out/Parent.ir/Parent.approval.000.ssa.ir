main test_cases.regression_tests.issue_491.Parent.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.regression_tests.issue_491.Parent.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.regression_tests.issue_491.Parent.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@4
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {* => block@2}
    block@2: // switch_case_default_L4
        goto block@3
    block@3: // switch_case_next_L4
        goto block@8
    block@4: // bare_routing_L4
        let tmp%3#0: uint64 = (txn OnCompletion)
        switch tmp%3#0 {0u => block@5, * => block@6}
    block@5: // __algopy_default_create_L1
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (== tmp%4#0 0u)
        (assert tmp%5#0) // can only call when creating
        test_cases.regression_tests.issue_491.Parent.__algopy_default_create()
        exit 1u
    block@6: // switch_case_default_L4
        goto block@7
    block@7: // switch_case_next_L4
        goto block@8
    block@8: // after_if_else_L4
        exit 0u

subroutine test_cases.regression_tests.issue_491.Parent.__init__() -> void:
    block@0: // L5
        algopy._contract.Contract.__init__()
        (app_global_put "is_initialised" 0u)
        return 

subroutine test_cases.regression_tests.issue_491.Parent.__algopy_default_create() -> void:
    block@0: // L1
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        let tmp%0#0: bool = test_cases.regression_tests.issue_491.Parent.__puya_arc4_router__()
        return tmp%0#0

subroutine algopy._contract.Contract.__init__() -> void:
    block@0: // L1
        return 