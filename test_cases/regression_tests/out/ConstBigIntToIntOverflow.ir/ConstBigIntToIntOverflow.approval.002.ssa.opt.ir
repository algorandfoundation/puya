main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@16
    block@2: // abi_routing_L4
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%6#0: bool = (txn ApplicationID)
        (assert tmp%6#0)
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "get_abs_bound1(uint64)uint64" => block@6, method "get_abs_bound2()uint64" => block@7, * => block@8}
    block@6: // get_abs_bound1_route_L5
        test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1[routing]()
        fail
    block@7: // get_abs_bound2_route_L17
        test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2[routing]()
        fail
    block@8: // switch_case_default_L4
        fail
    block@16: // bare_routing_L4
        let tmp%9#0: uint64 = (txn OnCompletion)
        let not%tmp%9#0: bool = (! tmp%9#0)
        (assert not%tmp%9#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        exit 1u

subroutine test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1[routing]() -> void:
    block@0: // L5
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let upper_bound#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let abs_bound#0: uint64 = 0u
        goto upper_bound#0 ? block@2 : block@3
    block@2: // if_body_L13
        let abs_bound#1: uint64 = (btoi 18446744073709551616b)
        goto block@3
    block@3: // after_if_else_L8
        let abs_bound#2: uint64 = Ï†(abs_bound#0 <- block@0, abs_bound#1 <- block@2)
        let tmp%2#0: Encoded(uint64) = bytes_encode<uint64>(abs_bound#2)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2[routing]() -> void:
    block@0: // L17
        let abs_bound#0: uint64 = (btoi 18446744073709551616b)
        let tmp%1#0: Encoded(uint64) = bytes_encode<uint64>(abs_bound#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u