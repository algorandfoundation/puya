// Op                                                                                                            Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        // regression_tests/biguint_opt.py:4
        // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
        txn NumAppArgs                                                                                           tmp%0#1
        l-load tmp%0#1 0                                                                                         tmp%0#1
        bz main_bare_routing@7 ; b main_abi_routing@2

    main_abi_routing@2:
        // regression_tests/biguint_opt.py:4
        // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
        txna ApplicationArgs 0                                                                                   tmp%2#0
        method get_abs_bound1(uint64)uint64                                                                      tmp%2#0,Method(get_abs_bound1(uint64)uint64)
        method get_abs_bound2()uint64                                                                            tmp%2#0,Method(get_abs_bound1(uint64)uint64),Method(get_abs_bound2()uint64)
        l-load tmp%2#0 2                                                                                         Method(get_abs_bound1(uint64)uint64),Method(get_abs_bound2()uint64),tmp%2#0
        match main_get_abs_bound1_route@3 main_get_abs_bound2_route@4 ; b main_after_if_else@11 

    main_get_abs_bound1_route@3:
        // regression_tests/biguint_opt.py:5
        // @arc4.abimethod()
        txn OnCompletion                                                                                         tmp%3#0
        l-load tmp%3#0 0                                                                                         tmp%3#0
        !                                                                                                        tmp%4#0
        l-load tmp%4#0 0                                                                                         tmp%4#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                        tmp%5#0
        l-load tmp%5#0 0                                                                                         tmp%5#0
        assert // can only call when not creating
        // regression_tests/biguint_opt.py:4
        // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                                   reinterpret_Encoded(uint64)%0#0
        l-load reinterpret_Encoded(uint64)%0#0 0                                                                 reinterpret_Encoded(uint64)%0#0
        btoi                                                                                                     tmp%7#0
        // regression_tests/biguint_opt.py:5
        // @arc4.abimethod()
        l-load tmp%7#0 0                                                                                         tmp%7#0
        callsub get_abs_bound1                                                                                   tmp%8#0
        l-load tmp%8#0 0                                                                                         tmp%8#0
        itob                                                                                                     val_as_bytes%0#0
        byte 0x151f7c75                                                                                          val_as_bytes%0#0,0x151f7c75
        l-load val_as_bytes%0#0 1                                                                                0x151f7c75,val_as_bytes%0#0
        concat                                                                                                   tmp%9#0
        l-load tmp%9#0 0                                                                                         tmp%9#0
        log
        int 1                                                                                                    1
        l-store test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0 0 test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0
        l-load test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0 0 test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__@12 

    main_get_abs_bound2_route@4:
        // regression_tests/biguint_opt.py:17
        // @arc4.abimethod()
        txn OnCompletion                                                                                         tmp%10#0
        l-load tmp%10#0 0                                                                                        tmp%10#0
        !                                                                                                        tmp%11#0
        l-load tmp%11#0 0                                                                                        tmp%11#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                                        tmp%12#0
        l-load tmp%12#0 0                                                                                        tmp%12#0
        assert // can only call when not creating
        callsub get_abs_bound2                                                                                   tmp%14#0
        l-load tmp%14#0 0                                                                                        tmp%14#0
        itob                                                                                                     val_as_bytes%1#0
        byte 0x151f7c75                                                                                          val_as_bytes%1#0,0x151f7c75
        l-load val_as_bytes%1#0 1                                                                                0x151f7c75,val_as_bytes%1#0
        concat                                                                                                   tmp%15#0
        l-load tmp%15#0 0                                                                                        tmp%15#0
        log
        int 1                                                                                                    1
        l-store test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0 0 test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0
        l-load test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0 0 test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__@12 

    main_bare_routing@7:
        // regression_tests/biguint_opt.py:4
        // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
        txn OnCompletion                                                                                         tmp%16#0
        l-load tmp%16#0 0                                                                                        tmp%16#0
        bz main___algopy_default_create@8 ; b main_after_if_else@11

    main___algopy_default_create@8:
        txn ApplicationID                                                                                        tmp%17#0
        l-load tmp%17#0 0                                                                                        tmp%17#0
        !                                                                                                        tmp%18#0
        l-load tmp%18#0 0                                                                                        tmp%18#0
        assert // can only call when creating
        int 1                                                                                                    1
        l-store test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0 0 test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0
        l-load test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0 0 test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__@12 

    main_after_if_else@11:
        // regression_tests/biguint_opt.py:4
        // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
        int 0                                                                                                    0
        l-store test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0 0 test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0
        l-load test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0 0 test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__%0#0
        v-store tmp%0#0
        b main_after_inlined_test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__@12 

    main_after_inlined_test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__@12:
        v-load tmp%0#0                                                                                           tmp%0#0
        return


// test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1(upper_bound: uint64) -> uint64:
subroutine get_abs_bound1:
    get_abs_bound1_block@0:                                                                                      (𝕡) upper_bound#0 |
        // regression_tests/biguint_opt.py:7
        // abs_bound = lower_bound = UInt64(0)
        int 0                                                                                                    (𝕡) upper_bound#0 | 0
        v-store abs_bound#0                                                                                      (𝕡) upper_bound#0 |
        // regression_tests/biguint_opt.py:8
        // if upper_bound:
        p-load upper_bound#0                                                                                     (𝕡) upper_bound#0 | upper_bound#0 (copy)
        bz get_abs_bound1_after_if_else@2 ; b get_abs_bound1_if_body@1                                           (𝕡) upper_bound#0 |

    get_abs_bound1_if_body@1:                                                                                    (𝕡) upper_bound#0 |
        // regression_tests/biguint_opt.py:13
        // abs_bound = op.btoi((BigUInt(1 << 64) - lower_bound).bytes)
        byte 0x010000000000000000                                                                                (𝕡) upper_bound#0 | 0x010000000000000000
        btoi                                                                                                     (𝕡) upper_bound#0 | abs_bound#0
        v-store abs_bound#0                                                                                      (𝕡) upper_bound#0 |
        b get_abs_bound1_after_if_else@2                                                                         (𝕡) upper_bound#0 |

    get_abs_bound1_after_if_else@2:                                                                              (𝕡) upper_bound#0 |
        // regression_tests/biguint_opt.py:15
        // return abs_bound
        v-load abs_bound#0                                                                                       (𝕡) upper_bound#0 | abs_bound#0
        retsub                                                                                                   abs_bound#0


// test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2() -> uint64:
subroutine get_abs_bound2:
    get_abs_bound2_block@0:
        // regression_tests/biguint_opt.py:21
        // abs_bound = op.btoi((BigUInt(1 << 64) - 0).bytes)
        byte 0x010000000000000000                                                                                0x010000000000000000
        btoi                                                                                                     abs_bound#0
        // regression_tests/biguint_opt.py:23
        // return abs_bound
        l-load abs_bound#0 0                                                                                     abs_bound#0
        retsub                                                                                                   abs_bound#0


