main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@1, 1u => block@6, 2u => block@9, 3u => block@10, 4u => block@11, 5u => block@12, 6u => block@13, 7u => block@14, 8u => block@15, 9u => block@16, 10u => block@17, 11u => block@18, * => block@19}
    block@1: // switch_case_0_L4
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "get_abs_bound1(uint64)uint64" => block@2, method "get_abs_bound2()uint64" => block@3, * => block@4}
    block@2: // get_abs_bound1_route_L5
        test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1[routing]()
        goto block@5
    block@3: // get_abs_bound2_route_L17
        test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2[routing]()
        goto block@5
    block@4: // switch_case_default_L4
        goto block@5
    block@5: // switch_case_next_L4
        fail // this contract does not implement the given ABI method for call NoOp
    block@6: // switch_case_1_L4
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@7 : block@8
    block@7: // __algopy_default_create_L1
        test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__algopy_default_create()
        exit 1u
    block@8: // else_body_L4
        fail // this contract does not implement the given ABI method for create NoOp
    block@9: // switch_case_2_L4
        goto block@19
    block@10: // switch_case_3_L4
        goto block@19
    block@11: // switch_case_4_L4
        goto block@19
    block@12: // switch_case_5_L4
        goto block@19
    block@13: // switch_case_6_L4
        goto block@19
    block@14: // switch_case_7_L4
        goto block@19
    block@15: // switch_case_8_L4
        goto block@19
    block@16: // switch_case_9_L4
        goto block@19
    block@17: // switch_case_10_L4
        goto block@19
    block@18: // switch_case_11_L4
        goto block@19
    block@19: // switch_case_default_L4
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1[routing]() -> void:
    block@0: // L5
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let tmp%1#0: uint64 = test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1(tmp%0#0)
        let tmp%2#0: Encoded(uint64) = bytes_encode<uint64>(tmp%1#0)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2[routing]() -> void:
    block@0: // L17
        let tmp%0#0: uint64 = test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2()
        let tmp%1#0: Encoded(uint64) = bytes_encode<uint64>(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1(upper_bound: uint64) -> uint64:
    block@0: // L5
        let lower_bound#0: uint64 = 0u
        let abs_bound#0: uint64 = 0u
        let tmp%0#0: bool = (!= upper_bound#0 0u)
        goto tmp%0#0 ? block@1 : block@2
    block@1: // if_body_L13
        let tmp%1#0: biguint = (itob lower_bound#0)
        let tmp%2#0: biguint = (b- 18446744073709551616b tmp%1#0)
        let tmp%3#0: uint64 = (btoi tmp%2#0)
        let abs_bound#1: uint64 = tmp%3#0
        goto block@2
    block@2: // after_if_else_L8
        let abs_bound#2: uint64 = Ï†(abs_bound#0 <- block@0, abs_bound#1 <- block@1)
        return abs_bound#2

subroutine test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2() -> uint64:
    block@0: // L17
        let tmp%0#0: biguint = (b- 18446744073709551616b 0b)
        let tmp%1#0: uint64 = (btoi tmp%0#0)
        let abs_bound#0: uint64 = tmp%1#0
        return abs_bound#0

subroutine test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.__algopy_default_create() -> void:
    block@0: // L1
        return 