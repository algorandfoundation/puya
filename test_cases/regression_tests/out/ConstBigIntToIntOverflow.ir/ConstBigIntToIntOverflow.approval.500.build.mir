// Op                                                                      Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        // regression_tests/biguint_opt.py:4
        // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
        txn NumAppArgs                                                     tmp%0#1
        v-store tmp%0#1
        v-load tmp%0#1                                                     tmp%0#1
        bz main___algopy_default_create@10 ; b main_abi_routing@2

    main_abi_routing@2:
        // regression_tests/biguint_opt.py:4
        // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
        txn OnCompletion                                                   tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                     tmp%2#0
        !                                                                  tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                     tmp%3#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                  tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                     tmp%4#0
        assert
        txna ApplicationArgs 0                                             tmp%5#0
        v-store tmp%5#0
        method get_abs_bound1(uint64)uint64                                Method(get_abs_bound1(uint64)uint64)
        method get_abs_bound2()uint64                                      Method(get_abs_bound1(uint64)uint64),Method(get_abs_bound2()uint64)
        v-load tmp%5#0                                                     Method(get_abs_bound1(uint64)uint64),Method(get_abs_bound2()uint64),tmp%5#0
        match main_get_abs_bound1_route@4 main_get_abs_bound2_route@5 ; b main_after_if_else@9 

    main_get_abs_bound1_route@4:
        // regression_tests/biguint_opt.py:5
        // @arc4.abimethod()
        callsub get_abs_bound1
        b main_after_if_else@9

    main_get_abs_bound2_route@5:
        // regression_tests/biguint_opt.py:17
        // @arc4.abimethod()
        callsub get_abs_bound2
        b main_after_if_else@9

    main_after_if_else@9:
        // regression_tests/biguint_opt.py:4
        // class ConstBigIntToIntOverflow(arc4.ARC4Contract):
        err

    main___algopy_default_create@10:
        txn OnCompletion                                                   tmp%6#0
        v-store tmp%6#0
        v-load tmp%6#0                                                     tmp%6#0
        !                                                                  tmp%7#0
        v-store tmp%7#0
        txn ApplicationID                                                  tmp%8#0
        v-store tmp%8#0
        v-load tmp%8#0                                                     tmp%8#0
        !                                                                  tmp%9#0
        v-store tmp%9#0
        v-load tmp%7#0                                                     tmp%7#0
        v-load tmp%9#0                                                     tmp%7#0,tmp%9#0
        &&                                                                 tmp%10#0
        v-store tmp%10#0
        v-load tmp%10#0                                                    tmp%10#0
        assert // OnCompletion must be NoOp && can only call when creating
        int 1                                                              1
        return


// test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound1[routing]() -> void:
subroutine get_abs_bound1:
    get_abs_bound1_block@0:
        // regression_tests/biguint_opt.py:5
        // @arc4.abimethod()
        txna ApplicationArgs 1                                             reinterpret_Encoded(uint64)%0#0
        v-store reinterpret_Encoded(uint64)%0#0
        v-load reinterpret_Encoded(uint64)%0#0                             reinterpret_Encoded(uint64)%0#0
        btoi                                                               upper_bound#0
        v-store upper_bound#0
        // regression_tests/biguint_opt.py:7
        // abs_bound = lower_bound = UInt64(0)
        int 0                                                              0
        v-store abs_bound#0
        // regression_tests/biguint_opt.py:8
        // if upper_bound:
        v-load upper_bound#0                                               upper_bound#0
        bz get_abs_bound1_after_if_else@3 ; b get_abs_bound1_if_body@2

    get_abs_bound1_if_body@2:
        // regression_tests/biguint_opt.py:13
        // abs_bound = op.btoi((BigUInt(1 << 64) - lower_bound).bytes)
        byte 0x010000000000000000                                          0x010000000000000000
        btoi                                                               abs_bound#0
        v-store abs_bound#0
        b get_abs_bound1_after_if_else@3

    get_abs_bound1_after_if_else@3:
        // regression_tests/biguint_opt.py:5
        // @arc4.abimethod()
        v-load abs_bound#0                                                 abs_bound#0
        itob                                                               aggregate%val_as_bytes%0#0
        v-store aggregate%val_as_bytes%0#0
        byte 0x151f7c75                                                    0x151f7c75
        v-load aggregate%val_as_bytes%0#0                                  0x151f7c75,aggregate%val_as_bytes%0#0
        concat                                                             tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                     tmp%3#0
        log
        int 1                                                              1
        return


// test_cases.regression_tests.biguint_opt.ConstBigIntToIntOverflow.get_abs_bound2[routing]() -> void:
subroutine get_abs_bound2:
    get_abs_bound2_block@0:
        // regression_tests/biguint_opt.py:21
        // abs_bound = op.btoi((BigUInt(1 << 64) - 0).bytes)
        byte 0x010000000000000000                                          0x010000000000000000
        btoi                                                               abs_bound#0
        v-store abs_bound#0
        // regression_tests/biguint_opt.py:17
        // @arc4.abimethod()
        v-load abs_bound#0                                                 abs_bound#0
        itob                                                               aggregate%val_as_bytes%0#0
        v-store aggregate%val_as_bytes%0#0
        byte 0x151f7c75                                                    0x151f7c75
        v-load aggregate%val_as_bytes%0#0                                  0x151f7c75,aggregate%val_as_bytes%0#0
        concat                                                             tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                     tmp%2#0
        log
        int 1                                                              1
        return


