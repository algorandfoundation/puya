main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@6, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19][tmp%4#0] else goto block@19
    block@2: // switch_case_0_L16
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "method()uint64" => block@3, * => block@5}
    block@3: // method_route_L17
        test_cases.regression_tests.never_returns.NeverReturnsFStack.method[routing]()
        goto block@5
    block@5: // switch_case_next_L16
        fail // this contract does not implement the given ABI method for call NoOp
    block@6: // switch_case_1_L16
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@19: // switch_case_default_L16
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.regression_tests.never_returns.NeverReturnsFStack.method[routing]() -> void:
    block@0: // L17
        let x#0: uint64 = 1u
        let tmp%0#0: uint64 = (txn NumAppArgs)
        goto tmp%0#0 ? block@2 : block@3
    block@2: // if_body_L27
        let x#0: uint64 = 2u
        goto block@3
    block@3: // after_if_else_L26
        let one#0: uint64 = 0u
        let tmp%2#1: uint64 = (txn NumAppArgs)
        let idx#0: uint64 = 0u
        goto block@4
    block@4: // for_header_L30
        let continue_looping%0#0: bool = (< idx#0 tmp%2#1)
        goto continue_looping%0#0 ? block@5 : block@8
    block@5: // for_body_L31
        let x#0: uint64 = (+ x#0 idx#0)
        let one#9: uint64 = one#0
        goto idx#0 ? block@7 : block@6
    block@6: // if_body_L33
        let one#0: uint64 = (+ one#0 1u)
        let one#9: uint64 = one#0
        goto block@7
    block@7: // after_if_else_L32
        let one#0: uint64 = one#9
        let idx#0: uint64 = (+ idx#0 1u)
        goto block@4
    block@8: // after_for_L30
        let tmp%7#0: bytes = (itob one#0)
        let tmp%8#0: bytes = (concat "you won't see this" tmp%7#0)
        (log tmp%8#0)
        fail