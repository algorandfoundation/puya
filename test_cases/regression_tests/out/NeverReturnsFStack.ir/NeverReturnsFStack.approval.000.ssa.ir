main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.regression_tests.never_returns.NeverReturnsFStack.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.regression_tests.never_returns.invoke_with_fstack() -> uint64:
    block@0: // L23
        let x#0: uint64 = 1u
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (> tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@2
    block@1: // if_body_L27
        let x#1: uint64 = 2u
        goto block@2
    block@2: // after_if_else_L26
        let x#4: uint64 = φ(x#0 <- block@0, x#1 <- block@1)
        let one#0: uint64 = 0u
        let tmp%2#0: uint64 = (txn NumAppArgs)
        (assert 1u) // Step cannot be zero
        let idx#0: uint64 = 0u
        goto block@3
    block@3: // for_header_L30
        let idx#1: uint64 = φ(idx#0 <- block@2, idx#2 <- block@7)
        let x#2: uint64 = φ(x#4 <- block@2, x#3 <- block@7)
        let one#1: uint64 = φ(one#0 <- block@2, one#3 <- block@7)
        let continue_looping%0#0: bool = (< idx#1 tmp%2#0)
        goto continue_looping%0#0 ? block@4 : block@8
    block@4: // for_body_L31
        let tmp%3#0: uint64 = (+ x#2 idx#1)
        let x#3: uint64 = tmp%3#0
        let tmp%4#0: bool = (== idx#1 0u)
        goto tmp%4#0 ? block@5 : block@6
    block@5: // if_body_L33
        let tmp%5#0: uint64 = (+ one#1 1u)
        let one#2: uint64 = tmp%5#0
        goto block@6
    block@6: // after_if_else_L32
        let one#3: uint64 = φ(one#1 <- block@4, one#2 <- block@5)
        goto block@7
    block@7: // for_footer_L30
        let idx#2: uint64 = (+ idx#1 1u)
        goto block@3
    block@8: // after_for_L30
        let tmp%6#0: bytes = (concat "you won't see this" "")
        let tmp%7#0: bytes = (itob one#1)
        let tmp%8#0: bytes = (concat tmp%6#0 tmp%7#0)
        (log tmp%8#0)
        fail

subroutine test_cases.regression_tests.never_returns.NeverReturnsFStack.__puya_arc4_router__() -> bool:
    block@0: // L16
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L16
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "method()uint64" => block@2, * => block@3}
    block@2: // method_route_L17
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        test_cases.regression_tests.never_returns.NeverReturnsFStack.method[routing]()
        goto block@4
    block@3: // switch_case_default_L16
        goto block@4
    block@4: // switch_case_next_L16
        goto block@6
    block@5: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        test_cases.regression_tests.never_returns.NeverReturnsFStack.__algopy_default_create()
        exit 1u
    block@6: // after_if_else_L16
        exit 0u

subroutine test_cases.regression_tests.never_returns.NeverReturnsFStack.method[routing]() -> void:
    block@0: // L17
        let tmp%0#0: uint64 = test_cases.regression_tests.never_returns.NeverReturnsFStack.method()
        let tmp%1#0: Encoded(uint64) = bytes_encode<uint64>(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.regression_tests.never_returns.NeverReturnsFStack.method() -> uint64:
    block@0: // L17
        let tmp%0#0: uint64 = test_cases.regression_tests.never_returns.invoke_with_fstack()
        let result#0: uint64 = tmp%0#0
        return result#0

subroutine test_cases.regression_tests.never_returns.NeverReturnsFStack.__algopy_default_create() -> void:
    block@0: // L1
        return 