main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L16
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "method()uint64" => block@3, * => block@10}
    block@3: // method_route_L17
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%5#0) // can only call when not creating
        let tmp%7#0: uint64 = test_cases.regression_tests.never_returns.NeverReturnsFStack.method()
        let tmp%8#0: Encoded(uint64) = bytes_encode<uint64>(tmp%7#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        let test_cases.regression_tests.never_returns.NeverReturnsFStack.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L16
        let tmp%10#0: uint64 = (txn OnCompletion)
        goto tmp%10#0 ? block@10 : block@7
    block@7: // __algopy_default_create_L1
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // can only call when creating
        test_cases.regression_tests.never_returns.NeverReturnsFStack.__algopy_default_create()
        let test_cases.regression_tests.never_returns.NeverReturnsFStack.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L16
        let test_cases.regression_tests.never_returns.NeverReturnsFStack.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_test_cases.regression_tests.never_returns.NeverReturnsFStack.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(test_cases.regression_tests.never_returns.NeverReturnsFStack.__puya_arc4_router__%0#0 <- block@3, test_cases.regression_tests.never_returns.NeverReturnsFStack.__puya_arc4_router__%0#1 <- block@7, test_cases.regression_tests.never_returns.NeverReturnsFStack.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine test_cases.regression_tests.never_returns.NeverReturnsFStack.method() -> uint64:
    block@0: // L17
        let x#0: uint64 = 1u
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@3
    block@2: // if_body_L27
        let x#1: uint64 = 2u
        goto block@3
    block@3: // after_if_else_L26
        let x#4: uint64 = φ(x#0 <- block@0, x#1 <- block@2)
        let one#0: uint64 = 0u
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let idx#0: uint64 = 0u
        goto block@4
    block@4: // for_header_L30
        let idx#1: uint64 = φ(idx#0 <- block@3, idx#2 <- block@7)
        let x#2: uint64 = φ(x#4 <- block@3, x#3 <- block@7)
        let one#1: uint64 = φ(one#0 <- block@3, one#3 <- block@7)
        let continue_looping%0#0: bool = (< idx#1 tmp%2#0)
        goto continue_looping%0#0 ? block@5 : block@8
    block@5: // for_body_L31
        let x#3: uint64 = (+ x#2 idx#1)
        goto idx#1 ? block@7 : block@6
    block@6: // if_body_L33
        let one#2: uint64 = (+ one#1 1u)
        goto block@7
    block@7: // after_if_else_L32
        let one#3: uint64 = φ(one#1 <- block@5, one#2 <- block@6)
        let idx#2: uint64 = (+ idx#1 1u)
        goto block@4
    block@8: // after_for_L30
        let tmp%7#0: bytes = (itob one#1)
        let tmp%8#0: bytes = (concat "you won't see this" tmp%7#0)
        (log tmp%8#0)
        fail

subroutine test_cases.regression_tests.never_returns.NeverReturnsFStack.__algopy_default_create() -> void:
    block@0: // L1
        return 