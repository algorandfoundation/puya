{
    "name": "ConstBigIntToIntOverflow",
    "structs": {},
    "methods": [
        {
            "name": "get_abs_bound1",
            "args": [
                {
                    "type": "uint64",
                    "name": "upper_bound"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_abs_bound2",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        26
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        59
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGJ5dGVjYmxvY2sgMHgwMTAwMDAwMDAwMDAwMDAwMDAgMHgxNTFmN2M3NQogICAgLy8gcmVncmVzc2lvbl90ZXN0cy9iaWd1aW50X29wdC5weTo0CiAgICAvLyBjbGFzcyBDb25zdEJpZ0ludFRvSW50T3ZlcmZsb3coYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fX19hbGdvcHlfZGVmYXVsdF9jcmVhdGVAOQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBtdXN0IGJlIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQKICAgIHB1c2hieXRlc3MgMHg1OGRiN2NlOSAweGM5NWMwMWNhIC8vIG1ldGhvZCAiZ2V0X2Fic19ib3VuZDEodWludDY0KXVpbnQ2NCIsIG1ldGhvZCAiZ2V0X2Fic19ib3VuZDIoKXVpbnQ2NCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIGdldF9hYnNfYm91bmQxIGdldF9hYnNfYm91bmQyCiAgICBlcnIKCm1haW5fX19hbGdvcHlfZGVmYXVsdF9jcmVhdGVAOToKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICAmJgogICAgcmV0dXJuIC8vIG9uIGVycm9yOiBPbkNvbXBsZXRpb24gbXVzdCBiZSBOb09wICYmIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwoKCi8vIHRlc3RfY2FzZXMucmVncmVzc2lvbl90ZXN0cy5iaWd1aW50X29wdC5Db25zdEJpZ0ludFRvSW50T3ZlcmZsb3cuZ2V0X2Fic19ib3VuZDFbcm91dGluZ10oKSAtPiB2b2lkOgpnZXRfYWJzX2JvdW5kMToKICAgIC8vIHJlZ3Jlc3Npb25fdGVzdHMvYmlndWludF9vcHQucHk6NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIHJlZ3Jlc3Npb25fdGVzdHMvYmlndWludF9vcHQucHk6NwogICAgLy8gYWJzX2JvdW5kID0gbG93ZXJfYm91bmQgPSBVSW50NjQoMCkKICAgIHB1c2hpbnQgMCAvLyAwCiAgICBzd2FwCiAgICAvLyByZWdyZXNzaW9uX3Rlc3RzL2JpZ3VpbnRfb3B0LnB5OjgKICAgIC8vIGlmIHVwcGVyX2JvdW5kOgogICAgYnogZ2V0X2Fic19ib3VuZDFfYWZ0ZXJfaWZfZWxzZUAzCiAgICAvLyByZWdyZXNzaW9uX3Rlc3RzL2JpZ3VpbnRfb3B0LnB5OjktMTMKICAgIC8vICMgaWYgdXBwZXIgYm91bmQgaXMgdHJ1dGh5LCB0aGVuIHRoaXMgd2lsbCBlcnJvciBhdCBydW4gdGltZQogICAgLy8gIyBidXQgb3B0aW1pemVyIHNob3VsZCBub3QgcmVwbGFjZSB0aGlzIG9wIGluIHRoaXMgY2FzZSBzaW5jZSBpdCBpcyBndWFyZGVkCiAgICAvLyAjIFRPRE86IGl0IHdvdWxkIGJlIG5pY2UgaWYgdGhlIG9wdGltaXplciBjb3VsZCBqdXN0IHJlcGxhY2UgdGhpcyBmYWlsdXJlCiAgICAvLyAjICAgICAgIHdpdGggYW4gZXJyLCBidXQgdGhhdCB3b3VsZCByZXF1aXJlIHRlcm1pbmF0aW5nIHRoZSBibG9jayBhcyBwYXJ0IG9mIG9wdGltaXppbmcKICAgIC8vIGFic19ib3VuZCA9IG9wLmJ0b2koKEJpZ1VJbnQoMSA8PCA2NCkgLSBsb3dlcl9ib3VuZCkuYnl0ZXMpCiAgICBieXRlY18wIC8vIDB4MDEwMDAwMDAwMDAwMDAwMDAwCiAgICBidG9pCiAgICBidXJ5IDEKCmdldF9hYnNfYm91bmQxX2FmdGVyX2lmX2Vsc2VAMzoKICAgIC8vIHJlZ3Jlc3Npb25fdGVzdHMvYmlndWludF9vcHQucHk6NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGR1cAogICAgaXRvYgogICAgYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RfY2FzZXMucmVncmVzc2lvbl90ZXN0cy5iaWd1aW50X29wdC5Db25zdEJpZ0ludFRvSW50T3ZlcmZsb3cuZ2V0X2Fic19ib3VuZDJbcm91dGluZ10oKSAtPiB2b2lkOgpnZXRfYWJzX2JvdW5kMjoKICAgIC8vIHJlZ3Jlc3Npb25fdGVzdHMvYmlndWludF9vcHQucHk6MTktMjEKICAgIC8vICMgdGhpcyB2YXJpYW50IHJlc3VsdGVkIGluIHRoZSBvcHRpbWl6YXRpb24gYnVnIGFwcGVhcmluZyBpbiB0aGUgcm91dGVyIGFmdGVyIGlubGluaW5nCiAgICAvLyAjIHRoaXMgZnVuY3Rpb24KICAgIC8vIGFic19ib3VuZCA9IG9wLmJ0b2koKEJpZ1VJbnQoMSA8PCA2NCkgLSAwKS5ieXRlcykKICAgIGJ5dGVjXzAgLy8gMHgwMTAwMDAwMDAwMDAwMDAwMDAKICAgIGJ0b2kKICAgIC8vIHJlZ3Jlc3Npb25fdGVzdHMvYmlndWludF9vcHQucHk6MTcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBpdG9iCiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiYCCQEAAAAAAAAAAAQVH3x1MRtBAB0xGRREMRhEggIEWNt86QTJXAHKNhoAjgIACQAgADEZFDEYFBBDNhoBF4EATEEABCgXRQFJFilMULCBAUMoFxYpTFCwgQFD",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}