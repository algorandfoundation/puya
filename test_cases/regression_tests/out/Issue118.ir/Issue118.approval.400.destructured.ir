main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L5
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "verify(uint256[])(bool,string)" => block@3, * => block@10}
    block@3: // verify_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(len+uint256[])%0#0: Encoded(len+uint256[]) = (txna ApplicationArgs 1)
        let tmp%7#0: Encoded(bool1,(len+utf8[])) = test_cases.regression_tests.issue_118.Issue118.verify(reinterpret_Encoded(len+uint256[])%0#0)
        let tmp%8#0: bytes = (concat 0x151f7c75 tmp%7#0)
        (log tmp%8#0)
        let test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__%0#0
        goto block@11
    block@6: // bare_routing_L5
        let tmp%9#0: uint64 = (txn OnCompletion)
        goto tmp%9#0 ? block@10 : block@7
    block@7: // __algopy_default_create_L1
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        let test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__%0#0
        goto block@11
    block@10: // after_if_else_L5
        let test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router__%0#0
        goto block@11
    block@11: // after_inlined_test_cases.regression_tests.issue_118.Issue118.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.regression_tests.issue_118.Issue118.verify(values: Encoded(len+uint256[])) -> Encoded(bool1,(len+utf8[])):
    block@0: // L7
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let val1#0: Encoded(bool8) = (setbit 0x00 0u tmp%0#0)
        let array_length%0#0: uint64 = (extract_uint16 values#0 0u)
        let tmp%3#0: bool = (!= array_length%0#0 2u)
        goto tmp%3#0 ? block@1 : block@2
    block@1: // if_body_L13
        let aggregate%encoded%1#1: bytes = (concat val1#0 0x0003)
        let aggregate%encoded%2#1: Encoded(bool1,(len+utf8[])) = (concat aggregate%encoded%1#1 0x0000)
        return aggregate%encoded%2#1
    block@2: // after_if_else_L12
        let aggregate%encoded%4#1: bytes = (concat val1#0 0x0003)
        let aggregate%encoded%5#1: Encoded(bool1,(len+utf8[])) = (concat aggregate%encoded%4#1 0x0000)
        return aggregate%encoded%5#1