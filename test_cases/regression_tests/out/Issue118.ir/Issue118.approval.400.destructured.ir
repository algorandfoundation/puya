main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L5
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "verify(uint256[])(bool,string)" => block@3, * => block@4}
    block@3: // verify_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        test_cases.regression_tests.issue_118.Issue118.verify[routing]()
        goto block@4
    block@4: // switch_case_next_L5
        fail
    block@5: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.regression_tests.issue_118.Issue118.verify[routing]() -> void:
    block@0: // L7
        let values#0: Encoded(len+uint256[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 values#0 0u)
        let mul%0#0: uint64 = (* aggregate%array_length%0#0 32u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len values#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+uint256[])
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: bool = (!= tmp%0#1 0u)
        let val1#0: Encoded(bool8) = (setbit 0x00 0u tmp%1#1)
        let tmp%4#0: bool = (!= aggregate%array_length%0#0 2u)
        goto tmp%4#0 ? block@2 : block@3
    block@2: // if_body_L13
        let aggregate%concat%0#0: bytes = (concat val1#0 0x00030000)
        let tmp%1#0: Encoded(bool1,(len+utf8[])) = aggregate%concat%0#0
        goto block@4
    block@3: // after_if_else_L12
        let aggregate%concat%1#0: bytes = (concat val1#0 0x00030000)
        let tmp%1#0: Encoded(bool1,(len+utf8[])) = aggregate%concat%1#0
        goto block@4
    block@4: // after_inlined_test_cases.regression_tests.issue_118.Issue118.verify_L7
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u