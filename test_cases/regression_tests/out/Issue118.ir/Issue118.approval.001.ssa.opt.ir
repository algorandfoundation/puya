main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L5
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "verify(uint256[])(bool,string)" => block@3, * => block@10}
    block@3: // verify_route_L7
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%5#0) // can only call when not creating
        test_cases.regression_tests.issue_118.Issue118.verify[routing]()
        goto block@10
    block@6: // bare_routing_L5
        let tmp%7#0: uint64 = (txn OnCompletion)
        goto tmp%7#0 ? block@10 : block@7
    block@7: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        test_cases.regression_tests.issue_118.Issue118.__algopy_default_create()
        exit 1u
    block@10: // after_if_else_L5
        fail

subroutine test_cases.regression_tests.issue_118.Issue118.verify[routing]() -> void:
    block@0: // L7
        let values#0: Encoded(len+uint256[]) = (txna ApplicationArgs 1)
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: bool = (!= tmp%0#1 0u)
        let val1#0: Encoded(bool8) = bytes_encode<bool8>(tmp%1#1)
        let tmp%3#0: uint64 = array_len(values#0)
        let tmp%4#0: bool = (!= tmp%3#0 2u)
        goto tmp%4#0 ? block@2 : block@3
    block@2: // if_body_L13
        let tmp%5#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("")
        let tmp%6#0: Encoded(bool1,(len+utf8[])) = bytes_encode<(bool1,(len+utf8[]))>(val1#0, tmp%5#0)
        goto block@4
    block@3: // after_if_else_L12
        let tmp%7#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("")
        let tmp%8#0: Encoded(bool1,(len+utf8[])) = bytes_encode<(bool1,(len+utf8[]))>(val1#0, tmp%7#0)
        goto block@4
    block@4: // after_inlined_test_cases.regression_tests.issue_118.Issue118.verify_L7
        let tmp%0#0: Encoded(bool1,(len+utf8[])) = Ï†(tmp%6#0 <- block@2, tmp%8#0 <- block@3)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.regression_tests.issue_118.Issue118.__algopy_default_create() -> void:
    block@0: // L1
        return 