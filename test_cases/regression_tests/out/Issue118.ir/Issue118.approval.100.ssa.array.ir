main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@6, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19][tmp%4#0] else goto block@19
    block@2: // switch_case_0_L5
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "verify(uint256[])(bool,string)" => block@3, * => block@5}
    block@3: // verify_route_L7
        test_cases.regression_tests.issue_118.Issue118.verify[routing]()
        goto block@5
    block@5: // switch_case_next_L5
        fail // this contract does not implement the given ABI method for call NoOp
    block@6: // switch_case_1_L5
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@19: // switch_case_default_L5
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.regression_tests.issue_118.Issue118.verify[routing]() -> void:
    block@0: // L7
        let values#0: Encoded(len+uint256[]) = (txna ApplicationArgs 1)
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: bool = (!= tmp%0#1 0u)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%1#1)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let val1#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 values#0 0u)
        let tmp%3#0: uint64 = aggregate%array_length%0#0
        let tmp%4#0: bool = (!= tmp%3#0 2u)
        goto tmp%4#0 ? block@2 : block@3
    block@2: // if_body_L13
        let aggregate%length%0#0: uint64 = (len "")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%5#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let aggregate%head%0#0: bytes = (concat 0x val1#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len tmp%5#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 3u aggregate%data_length%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 tmp%5#0)
        let aggregate%as_Encoded(bool1,(len+utf8[]))%0#0: Encoded(bool1,(len+utf8[])) = aggregate%concat%0#0
        let tmp%6#0: Encoded(bool1,(len+utf8[])) = aggregate%as_Encoded(bool1,(len+utf8[]))%0#0
        goto block@4
    block@3: // after_if_else_L12
        let aggregate%length%1#0: uint64 = (len "")
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%7#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let aggregate%head%2#0: bytes = (concat 0x val1#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len tmp%7#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ 3u aggregate%data_length%1#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%3#0 tmp%7#0)
        let aggregate%as_Encoded(bool1,(len+utf8[]))%1#0: Encoded(bool1,(len+utf8[])) = aggregate%concat%1#0
        let tmp%8#0: Encoded(bool1,(len+utf8[])) = aggregate%as_Encoded(bool1,(len+utf8[]))%1#0
        goto block@4
    block@4: // after_inlined_test_cases.regression_tests.issue_118.Issue118.verify_L7
        let tmp%0#0: Encoded(bool1,(len+utf8[])) = Ï†(tmp%6#0 <- block@2, tmp%8#0 <- block@3)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u