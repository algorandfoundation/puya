main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.regression_tests.jira_142.Jira142.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.regression_tests.jira_142.Jira142.__puya_arc4_router__() -> bool:
    block@0: // L8
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L8
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "battle()void" => block@2, * => block@3}
    block@2: // battle_route_L13
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.regression_tests.jira_142.Jira142.battle()
        return 1u
    block@3: // switch_case_default_L8
        goto block@4
    block@4: // switch_case_next_L8
        goto block@9
    block@5: // bare_routing_L8
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {0u => block@6, * => block@7}
    block@6: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        test_cases.regression_tests.jira_142.Jira142.__algopy_default_create()
        return 1u
    block@7: // switch_case_default_L8
        goto block@8
    block@8: // switch_case_next_L8
        goto block@9
    block@9: // after_if_else_L8
        return 0u

subroutine test_cases.regression_tests.jira_142.Jira142.some_subroutine(char: Encoded((uint64))) -> Encoded((uint64)):
    block@0: // L9
        let char%is_original#0: bool = 1u
        let char%out#0: Encoded((uint64)) = char#0
        return char%out#0

subroutine test_cases.regression_tests.jira_142.Jira142.battle() -> void:
    block@0: // L13
        let encoded%0#0: Encoded((uint64)) = (concat 0x 0x00000000000000c8)
        let encoded%1#0: Encoded((uint64)) = (concat encoded%0#0 0x)
        let my_struct#0: Encoded((uint64)) = encoded%1#0
        let extract%0#0: bytes = (extract3 my_struct#0 0u 8u)
        let reinterpret_biguint%0#0: biguint = extract%0#0
        let reinterpret_biguint%1#0: biguint = 0x0000000000000064
        let tmp%0#0: bool = (b> reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        goto tmp%0#0 ? block@1 : block@2
    block@1: // if_body_L18
        let some_subroutine%0#0: Encoded((uint64)) = test_cases.regression_tests.jira_142.Jira142.some_subroutine(my_struct#0)
        let my_struct#1: Encoded((uint64)) = some_subroutine%0#0
        goto block@2
    block@2: // after_if_else_L17
        let my_struct#2: Encoded((uint64)) = Ï†(my_struct#0 <- block@0, my_struct#1 <- block@1)
        let copy%0#0: Encoded((uint64)) = my_struct#2
        (log copy%0#0)
        return 

subroutine test_cases.regression_tests.jira_142.Jira142.__algopy_default_create() -> void:
    block@0: // L1
        return 