main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L8
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "battle()void" => block@3, * => block@10}
    block@3: // battle_route_L13
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%5#0) // can only call when not creating
        test_cases.regression_tests.jira_142.Jira142.battle[routing]()
        goto block@10
    block@6: // bare_routing_L8
        let tmp%7#0: uint64 = (txn OnCompletion)
        goto tmp%7#0 ? block@10 : block@7
    block@7: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        test_cases.regression_tests.jira_142.Jira142.__algopy_default_create()
        exit 1u
    block@10: // after_if_else_L8
        fail

subroutine test_cases.regression_tests.jira_142.Jira142.battle[routing]() -> void:
    block@0: // L13
        let my_struct#0: Encoded(uint64) = bytes_encode<(uint64)>(0x00000000000000c8)
        let tuple_item%0#0: Encoded(uint64) = extract_value(my_struct#0, 0)
        let tmp%1#0: bool = (b> tuple_item%0#0 0x0000000000000064)
        goto tmp%1#0 ? block@2 : block@3
    block@2: // if_body_L18
        let my_struct#1: Encoded(uint64) = test_cases.regression_tests.jira_142.Jira142.some_subroutine(my_struct#0)
        goto block@3
    block@3: // after_if_else_L17
        let my_struct#2: Encoded(uint64) = Ï†(my_struct#0 <- block@0, my_struct#1 <- block@2)
        (log my_struct#2)
        exit 1u

subroutine test_cases.regression_tests.jira_142.Jira142.some_subroutine(char: Encoded(uint64)) -> Encoded(uint64):
    block@0: // L9
        return char#0

subroutine test_cases.regression_tests.jira_142.Jira142.__algopy_default_create() -> void:
    block@0: // L1
        return 