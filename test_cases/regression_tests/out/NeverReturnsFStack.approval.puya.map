{
  "version": 3,
  "sources": [
    "../never_returns.py"
  ],
  "mappings": ";;;;;AAeA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;AACK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AADL;;AAAA;;;;;;;;;;;;;AASQ;AACD;;AAAP;;;AACY;;AAAJ;;AAEE;AAAN;;AACkB;;AAAA;;AAAP;AAAP;;AAAO;;AAAA;;AAAA;AAAf;;;AACQ;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;AACR;;;AACY;;AAAO;AAAP;;;;;;;AAHG;;AAAA;AAAA;AAAA;;;;;AAKe;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAA1B;AACA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "10": {
      "op": "pushbytes 0x3f27f4a4 // method \"method()uint64\"",
      "defined_out": [
        "Method(method()uint64)"
      ],
      "stack_out": [
        "Method(method()uint64)"
      ]
    },
    "16": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(method()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(method()uint64)",
        "tmp%2#0"
      ]
    },
    "19": {
      "op": "match main_method_route@3",
      "stack_out": []
    },
    "23": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "24": {
      "op": "return",
      "stack_out": []
    },
    "25": {
      "block": "main_method_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "27": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "28": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "29": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "31": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "32": {
      "callsub": "test_cases.regression_tests.never_returns.NeverReturnsFStack.method",
      "op": "callsub method",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "35": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "36": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "42": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "43": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "44": {
      "op": "log",
      "stack_out": []
    },
    "45": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "46": {
      "op": "return",
      "stack_out": []
    },
    "47": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "49": {
      "op": "bnz main_after_if_else@10",
      "stack_out": []
    },
    "52": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "54": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "55": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "56": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "57": {
      "op": "return",
      "stack_out": []
    },
    "58": {
      "subroutine": "test_cases.regression_tests.never_returns.NeverReturnsFStack.method",
      "params": {},
      "block": "method",
      "stack_in": [],
      "op": "pushbytes \"\"",
      "stack_out": [
        "idx#0"
      ]
    },
    "60": {
      "op": "dupn 3",
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0"
      ]
    },
    "62": {
      "op": "intc_0 // 1"
    },
    "63": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1",
        "x#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "tmp%0#1"
      ]
    },
    "65": {
      "op": "bz method_after_if_else@3",
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0"
      ]
    },
    "68": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "x#0"
      ]
    },
    "70": {
      "op": "frame_bury 4",
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0"
      ]
    },
    "72": {
      "block": "method_after_if_else@3",
      "stack_in": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "one#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "one#0"
      ]
    },
    "73": {
      "op": "frame_bury 1",
      "defined_out": [
        "one#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0"
      ]
    },
    "75": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "one#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "tmp%2#0"
      ]
    },
    "77": {
      "op": "frame_bury 3",
      "defined_out": [
        "one#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0"
      ]
    },
    "79": {
      "op": "intc_1 // 0",
      "defined_out": [
        "idx#0",
        "one#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "idx#0"
      ]
    },
    "80": {
      "op": "frame_bury 0",
      "defined_out": [
        "idx#0",
        "one#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0"
      ]
    },
    "82": {
      "block": "method_for_header@4",
      "stack_in": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "idx#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "idx#0"
      ]
    },
    "84": {
      "op": "frame_dig 3",
      "defined_out": [
        "idx#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "idx#0",
        "tmp%2#0"
      ]
    },
    "86": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "idx#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "continue_looping%0#0"
      ]
    },
    "87": {
      "op": "bz method_after_for@8",
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0"
      ]
    },
    "90": {
      "op": "frame_dig 4",
      "defined_out": [
        "idx#0",
        "tmp%2#0",
        "x#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "x#0"
      ]
    },
    "92": {
      "op": "frame_dig 0",
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "x#0",
        "idx#0"
      ]
    },
    "94": {
      "op": "dup",
      "defined_out": [
        "idx#0",
        "idx#0 (copy)",
        "tmp%2#0",
        "x#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "x#0",
        "idx#0 (copy)",
        "idx#0 (copy)"
      ]
    },
    "95": {
      "op": "cover 2",
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "idx#0",
        "x#0",
        "idx#0 (copy)"
      ]
    },
    "97": {
      "op": "+",
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "idx#0",
        "x#0"
      ]
    },
    "98": {
      "op": "frame_bury 4",
      "defined_out": [
        "idx#0",
        "tmp%2#0",
        "x#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "idx#0"
      ]
    },
    "100": {
      "op": "frame_dig 1",
      "defined_out": [
        "idx#0",
        "one#9",
        "tmp%2#0",
        "x#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "idx#0",
        "one#9"
      ]
    },
    "102": {
      "op": "frame_bury 2",
      "defined_out": [
        "idx#0",
        "one#9",
        "tmp%2#0",
        "x#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "idx#0"
      ]
    },
    "104": {
      "op": "bnz method_after_if_else@7",
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0"
      ]
    },
    "107": {
      "op": "frame_dig 1",
      "defined_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "one#0"
      ]
    },
    "109": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "one#0",
        "1"
      ]
    },
    "110": {
      "op": "+",
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "one#9"
      ]
    },
    "111": {
      "op": "frame_bury 2",
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0"
      ]
    },
    "113": {
      "block": "method_after_if_else@7",
      "stack_in": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "one#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "one#0"
      ]
    },
    "115": {
      "op": "frame_bury 1",
      "defined_out": [
        "one#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0"
      ]
    },
    "117": {
      "op": "frame_dig 0",
      "defined_out": [
        "idx#0",
        "one#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "idx#0"
      ]
    },
    "119": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "idx#0",
        "one#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "idx#0",
        "1"
      ]
    },
    "120": {
      "op": "+",
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "idx#0"
      ]
    },
    "121": {
      "op": "frame_bury 0",
      "defined_out": [
        "idx#0",
        "one#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0"
      ]
    },
    "123": {
      "op": "b method_for_header@4"
    },
    "126": {
      "block": "method_after_for@8",
      "stack_in": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "one#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "one#0"
      ]
    },
    "128": {
      "op": "itob",
      "defined_out": [
        "one#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "tmp%7#0"
      ]
    },
    "129": {
      "op": "pushbytes \"you won't see this\"",
      "defined_out": [
        "\"you won't see this\"",
        "one#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "tmp%7#0",
        "\"you won't see this\""
      ]
    },
    "149": {
      "op": "swap",
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "\"you won't see this\"",
        "tmp%7#0"
      ]
    },
    "150": {
      "op": "concat",
      "defined_out": [
        "one#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0",
        "tmp%8#0"
      ]
    },
    "151": {
      "op": "log",
      "stack_out": [
        "idx#0",
        "one#0",
        "one#9",
        "tmp%2#0",
        "x#0"
      ]
    },
    "152": {
      "op": "err"
    }
  }
}