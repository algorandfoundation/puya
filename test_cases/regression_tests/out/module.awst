contract TealSwitchInlining
{
  method_resolution_order: (
  )
  
  subroutine test_cases.regression_tests.teal_switch_inlining.TealSwitchInlining.approval_program(): bool
  {
    switch (txn<NumAppArgs>()) {
      case 0u: {
        return true
      }
      case 1u: {
        return false
      }
      case _: {
        return true
      }
    }
  }
  
  subroutine test_cases.regression_tests.teal_switch_inlining.TealSwitchInlining.clear_state_program(): bool
  {
    return true
  }
}

contract Issue194
{
  method_resolution_order: (
  )
  
  subroutine test_cases.regression_tests.issue_194.Issue194.approval_program(): bool
  {
    assert(1u != 0u == 2u != 0u)
    two: uint64 = 2u
    switch (two != 0u) {
      case true: {
        return true
      }
      case _: {
        return false
      }
    }
  }
  
  subroutine test_cases.regression_tests.issue_194.Issue194.clear_state_program(): bool
  {
    return true
  }
}

contract Issue118
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
  )
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  abimethod test_cases.regression_tests.issue_118.Issue118.verify(values: arc4.dynamic_array<arc4.uint256>): arc4.tuple<arc4.bool,arc4.dynamic_array<arc4.uint8>>
  {
    val1: arc4.bool = arc4_encode(txn<NumAppArgs>() != 0u, arc4.bool)
    if (values.length != 2u) {
      return arc4_encode((val1, ''), arc4.tuple<arc4.bool,arc4.dynamic_array<arc4.uint8>>)
    }
    return arc4_encode((val1, ''), arc4.tuple<arc4.bool,arc4.dynamic_array<arc4.uint8>>)
  }
  
  baremethod test_cases.regression_tests.issue_118.Issue118.__algopy_default_create(): void
  {
  }
}

contract VRFVerifier
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
  )
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  abimethod test_cases.regression_tests.branch_to_proto.VRFVerifier.verify(message: bytes, proof: bytes, pk: bytes): tuple<bytes,bool>
  {
    _puya_lib.util.ensure_budget(required_budget=10000u, fee_source=1u)
    return vrf_verify<VrfAlgorand>(message, proof, pk)
  }
  
  baremethod test_cases.regression_tests.branch_to_proto.VRFVerifier.__algopy_default_create(): void
  {
  }
}