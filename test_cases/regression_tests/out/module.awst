contract TealSwitchInlining
{
  method_resolution_order: (
  )
  
  subroutine test_cases.regression_tests.teal_switch_inlining.TealSwitchInlining.approval_program(): bool
  {
    switch (txn<NumAppArgs>()) {
      case 0u: {
        return true
      }
      case 1u: {
        return false
      }
      case _: {
        return true
      }
    }
  }
  
  subroutine test_cases.regression_tests.teal_switch_inlining.TealSwitchInlining.clear_state_program(): bool
  {
    return true
  }
}

contract SlotAllocationInlining
{
  method_resolution_order: (
  )
  
  subroutine test_cases.regression_tests.slot_allocation_inlining.SlotAllocationInlining.approval_program(): bool
  {
    _puya_lib.util.ensure_budget(required_budget=800u, fee_source=0u)
    test_cases.regression_tests.slot_allocation_inlining.do_something_with_array()
    return true
  }
  
  subroutine test_cases.regression_tests.slot_allocation_inlining.SlotAllocationInlining.clear_state_program(): bool
  {
    return true
  }
}

subroutine do_something_with_array(): void
{
  arr: ref_array<uint64> = new ref_array<uint64>()
  test_cases.regression_tests.slot_allocation_inlining.append_to_array(arr)
  assert(arr.length == 32u, comment="expected array of length 32")
}

subroutine append_to_array(arr: ref_array<uint64>): void
{
  for b in reinterpret_cast<bytes>(txn<Sender>()) {
    arr.extend((btoi(b)))
  }
}

contract BranchElimination
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
  )
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  abimethod test_cases.regression_tests.leftover_branch.BranchElimination.umm(): uint64
  {
    ahuh: uint64 = 0u
    while (true) {
      for _i in range(0u, test_cases.regression_tests.leftover_branch.hmm_uint64(), 1u) {
        if (test_cases.regression_tests.leftover_branch.hmm()) {
          if (test_cases.regression_tests.leftover_branch.hmm()) {
            if (test_cases.regression_tests.leftover_branch.hmm()) {
              ahuh += reinterpret_cast<uint64>(test_cases.regression_tests.leftover_branch.hmm())
            }
          }
        }
      }
      if (test_cases.regression_tests.leftover_branch.hmm()) {
        break
      }
    }
    return ahuh
  }
  
  abimethod test_cases.regression_tests.leftover_branch.BranchElimination.umm2(): void
  {
    ahuh: uint64 = 0u
    while (true) {
      if (test_cases.regression_tests.leftover_branch.hmm()) {
        if (test_cases.regression_tests.leftover_branch.hmm()) {
          if (test_cases.regression_tests.leftover_branch.hmm()) {
            ahuh += reinterpret_cast<uint64>(test_cases.regression_tests.leftover_branch.hmm())
          }
        }
      }
      if (test_cases.regression_tests.leftover_branch.hmm()) {
        break
      }
    }
  }
  
  abimethod test_cases.regression_tests.leftover_branch.BranchElimination.calculate(nested_list: arc4.dynamic_array<arc4.dynamic_array<arc4.uint64>>, threshold: arc4.uint64): void
  {
    total: uint64 = 0u
    num_boosts: uint64 = 0u
    for i in range(0u, nested_list.length, 1u) {
      inner_list: arc4.dynamic_array<arc4.uint64> = nested_list[i].copy()
      last_inner_list_index: uint64 = inner_list.length - 1u
      for j in range(0u, inner_list.length, 1u) {
        value: arc4.uint64 = inner_list[j]
        if (reinterpret_cast<biguint>(value) >= reinterpret_cast<biguint>(threshold)) {
          has_next: bool = j < last_inner_list_index
          if (has_next) {
            total += 1u
            next_value: arc4.uint64 = inner_list[j + 1u]
            if (reinterpret_cast<biguint>(value) < reinterpret_cast<biguint>(next_value)) {
              total *= 2u
              num_boosts += 1u
            }
          }
        }
      }
    }
  }
  
  baremethod test_cases.regression_tests.leftover_branch.BranchElimination.__algopy_default_create(): void
  {
  }
}

subroutine hmm(): bool
{
  return false
}

subroutine hmm_uint64(): uint64
{
  return 0u
}

contract Jira142
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
  )
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_cases.regression_tests.jira_142.Jira142.some_subroutine(char: test_cases.regression_tests.jira_142.MyStruct): void
  {
  }
  
  abimethod test_cases.regression_tests.jira_142.Jira142.battle(): void
  {
    my_struct: test_cases.regression_tests.jira_142.MyStruct = new test_cases.regression_tests.jira_142.MyStruct(foo=200_arc4u64)
    if (reinterpret_cast<biguint>(my_struct.foo) > reinterpret_cast<biguint>(100_arc4u64)) {
      this::some_subroutine(my_struct)
    }
    log(reinterpret_cast<bytes>(my_struct.copy()))
  }
  
  baremethod test_cases.regression_tests.jira_142.Jira142.__algopy_default_create(): void
  {
  }
}

contract Issue434
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
  )
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  abimethod test_cases.regression_tests.issue_434.Issue434.method(c: uint64): void
  {
    while (global<OpcodeBudget>() > 350u) {
      assert(sha3_256(reinterpret_cast<bytes>(txn<Sender>())) != reinterpret_cast<bytes>(txn<Sender>()))
    }
    if (c > 0u) {
      x: uint64 = c + 2u
    } else {
      x: uint64 = c + 2u
    }
    assert(x - 2u == c)
  }
  
  baremethod test_cases.regression_tests.issue_434.Issue434.__algopy_default_create(): void
  {
  }
}

contract Issue194
{
  method_resolution_order: (
  )
  
  subroutine test_cases.regression_tests.issue_194.Issue194.approval_program(): bool
  {
    assert(1u != 0u == 2u != 0u)
    two: uint64 = 2u
    switch (two != 0u) {
      case true: {
        return true
      }
      case _: {
        return false
      }
    }
  }
  
  subroutine test_cases.regression_tests.issue_194.Issue194.clear_state_program(): bool
  {
    return true
  }
}

contract Issue118
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
  )
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  abimethod test_cases.regression_tests.issue_118.Issue118.verify(values: arc4.dynamic_array<arc4.uint256>): arc4.tuple<arc4.bool,arc4.dynamic_array<arc4.uint8>>
  {
    val1: arc4.bool = arc4_encode(txn<NumAppArgs>() != 0u, arc4.bool)
    if (values.length != 2u) {
      return arc4_encode((val1, ''), arc4.tuple<arc4.bool,arc4.dynamic_array<arc4.uint8>>)
    }
    return arc4_encode((val1, ''), arc4.tuple<arc4.bool,arc4.dynamic_array<arc4.uint8>>)
  }
  
  baremethod test_cases.regression_tests.issue_118.Issue118.__algopy_default_create(): void
  {
  }
}

contract VRFVerifier
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
  )
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  abimethod test_cases.regression_tests.branch_to_proto.VRFVerifier.verify(message: bytes, proof: bytes, pk: bytes): tuple<bytes,bool>
  {
    _puya_lib.util.ensure_budget(required_budget=10000u, fee_source=1u)
    return vrf_verify<VrfAlgorand>(message, proof, pk)
  }
  
  baremethod test_cases.regression_tests.branch_to_proto.VRFVerifier.__algopy_default_create(): void
  {
  }
}