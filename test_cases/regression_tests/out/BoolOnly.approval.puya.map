{
  "version": 3,
  "sources": [
    "../bool_only.py"
  ],
  "mappings": ";;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;AASK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AALL;;;AAAA;;;AAKK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;;;AACK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADL;;AAAA;;;;;;;;;AACA;;;AAE4C;;AAAL;AAAA;AAAxB;;AAAqB;AAArB;;AAAA;AAAP;AAER;;;AAEuC;;AAAmB;AAAnB;AAAxB;;AAAqB;AAArB;;AAAA;AAAP;AAIA;AAC4B;;AAA5B;;AACmD;;AAAL;AAAA;AAA9C;;AACA;AAEA;AACsB;;;AADtB;;;;AAAA;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x151f7c75"
    },
    "12": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "14": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "17": {
      "op": "pushbytess 0xa85bff00 0xc4af225c 0x83589f2d // method \"set_0_convert(byte[])byte[]\", method \"set_0_compare(byte[])byte[]\", method \"bool_only_properties()void\"",
      "defined_out": [
        "Method(bool_only_properties()void)",
        "Method(set_0_compare(byte[])byte[])",
        "Method(set_0_convert(byte[])byte[])"
      ],
      "stack_out": [
        "Method(set_0_convert(byte[])byte[])",
        "Method(set_0_compare(byte[])byte[])",
        "Method(bool_only_properties()void)"
      ]
    },
    "34": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(bool_only_properties()void)",
        "Method(set_0_compare(byte[])byte[])",
        "Method(set_0_convert(byte[])byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(set_0_convert(byte[])byte[])",
        "Method(set_0_compare(byte[])byte[])",
        "Method(bool_only_properties()void)",
        "tmp%2#0"
      ]
    },
    "37": {
      "op": "match main_set_0_convert_route@3 main_set_0_compare_route@4 main_bool_only_properties_route@5",
      "stack_out": []
    },
    "45": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "46": {
      "block": "main_bool_only_properties_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "48": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "49": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "50": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "52": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "53": {
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties",
      "op": "callsub bool_only_properties"
    },
    "56": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "57": {
      "op": "return",
      "stack_out": []
    },
    "58": {
      "block": "main_set_0_compare_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "60": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "61": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "62": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "64": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "65": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "68": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "71": {
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare",
      "op": "callsub set_0_compare",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "74": {
      "op": "dup",
      "defined_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "75": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "aggregate%length%1#0"
      ]
    },
    "76": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "77": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "80": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%1#0",
        "tmp%16#0"
      ]
    },
    "81": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%1#0"
      ]
    },
    "82": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "83": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%1#0"
      ]
    },
    "84": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "85": {
      "op": "log",
      "stack_out": []
    },
    "86": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "87": {
      "op": "return",
      "stack_out": []
    },
    "88": {
      "block": "main_set_0_convert_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "90": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "91": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "92": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "94": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "95": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "98": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "101": {
      "callsub": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert",
      "op": "callsub set_0_convert",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "104": {
      "op": "dup",
      "defined_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "105": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%length%0#0"
      ]
    },
    "106": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "107": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "110": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%8#0"
      ]
    },
    "111": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "112": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "113": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "114": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "115": {
      "op": "log",
      "stack_out": []
    },
    "116": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "117": {
      "op": "return",
      "stack_out": []
    },
    "118": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "120": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "123": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "125": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "126": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "127": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "128": {
      "op": "return",
      "stack_out": []
    },
    "129": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert",
      "params": {
        "inp#0": "bytes"
      },
      "block": "set_0_convert",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "132": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "134": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "135": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "136": {
      "op": "frame_dig -1",
      "defined_out": [
        "inp#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)"
      ]
    },
    "138": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)",
        "0"
      ]
    },
    "139": {
      "op": "uncover 2",
      "stack_out": [
        "inp#0 (copy)",
        "0",
        "tmp%1#0"
      ]
    },
    "141": {
      "op": "setbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "142": {
      "retsub": true,
      "op": "retsub"
    },
    "143": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare",
      "params": {
        "inp#0": "bytes"
      },
      "block": "set_0_compare",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "146": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "148": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "149": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "150": {
      "op": "frame_dig -1",
      "defined_out": [
        "inp#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)"
      ]
    },
    "152": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "inp#0 (copy)",
        "0"
      ]
    },
    "153": {
      "op": "uncover 2",
      "stack_out": [
        "inp#0 (copy)",
        "0",
        "tmp%1#0"
      ]
    },
    "155": {
      "op": "setbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "156": {
      "retsub": true,
      "op": "retsub"
    },
    "157": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties",
      "params": {},
      "block": "bool_only_properties",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "158": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "160": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "162": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "164": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "165": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "166": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": []
    },
    "168": {
      "op": "itxn_submit"
    },
    "169": {
      "op": "itxn_begin"
    },
    "170": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "171": {
      "op": "itxn_field Nonparticipation",
      "stack_out": []
    },
    "173": {
      "op": "pushint 2 // keyreg",
      "defined_out": [
        "keyreg"
      ],
      "stack_out": [
        "keyreg"
      ]
    },
    "175": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "177": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "178": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "180": {
      "op": "itxn_submit"
    },
    "181": {
      "retsub": true,
      "op": "retsub"
    }
  }
}