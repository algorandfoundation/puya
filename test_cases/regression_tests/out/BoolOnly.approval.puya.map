{
  "version": 3,
  "sources": [
    "../bool_only.py"
  ],
  "mappings": ";;;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;;;;;;;;;;AACK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAEuC;;AAAL;AAAA;AAAH;AAArB;AAAA;AAFV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAEkC;;AAAmB;AAAnB;AAAH;AAArB;AAAA;AAFV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMG;AAC4B;;AAA5B;;AACmD;;AAAL;AAAA;AAA9C;;AACA;AAEA;AACsB;;;AADtB;;;AAAA;;;AAAA;AAPH;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2"
    },
    "6": {
      "op": "bytecblock 0x151f7c75"
    },
    "13": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "15": {
      "op": "bz main___algopy_default_create@10",
      "stack_out": []
    },
    "18": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "20": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "21": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "22": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "24": {
      "op": "assert",
      "stack_out": []
    },
    "25": {
      "op": "pushbytess 0xa85bff00 0xc4af225c 0x83589f2d // method \"set_0_convert(byte[])byte[]\", method \"set_0_compare(byte[])byte[]\", method \"bool_only_properties()void\"",
      "defined_out": [
        "Method(bool_only_properties()void)",
        "Method(set_0_compare(byte[])byte[])",
        "Method(set_0_convert(byte[])byte[])"
      ],
      "stack_out": [
        "Method(set_0_convert(byte[])byte[])",
        "Method(set_0_compare(byte[])byte[])",
        "Method(bool_only_properties()void)"
      ]
    },
    "42": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(bool_only_properties()void)",
        "Method(set_0_compare(byte[])byte[])",
        "Method(set_0_convert(byte[])byte[])",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(set_0_convert(byte[])byte[])",
        "Method(set_0_compare(byte[])byte[])",
        "Method(bool_only_properties()void)",
        "tmp%6#0"
      ]
    },
    "45": {
      "op": "match set_0_convert set_0_compare bool_only_properties",
      "stack_out": []
    },
    "53": {
      "op": "err"
    },
    "54": {
      "block": "main___algopy_default_create@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "56": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "57": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "59": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "60": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "61": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "62": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "63": {
      "op": "return",
      "stack_out": []
    },
    "64": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert[routing]",
      "params": {},
      "block": "set_0_convert",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "67": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "68": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "69": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "70": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "71": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "72": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "74": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "75": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "76": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "77": {
      "op": "extract 2 0",
      "defined_out": [
        "inp#0"
      ],
      "stack_out": [
        "inp#0"
      ]
    },
    "80": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "inp#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "inp#0",
        "tmp%0#1"
      ]
    },
    "82": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inp#0",
        "tmp%0#1",
        "0"
      ]
    },
    "83": {
      "op": "!=",
      "defined_out": [
        "inp#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "inp#0",
        "tmp%1#1"
      ]
    },
    "84": {
      "op": "intc_0 // 0"
    },
    "85": {
      "op": "swap",
      "stack_out": [
        "inp#0",
        "0",
        "tmp%1#1"
      ]
    },
    "86": {
      "op": "setbit",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "87": {
      "op": "dup",
      "defined_out": [
        "tmp%2#1",
        "tmp%2#1 (copy)"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%2#1 (copy)"
      ]
    },
    "88": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%length%0#0"
      ]
    },
    "89": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%as_bytes%0#0"
      ]
    },
    "90": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%length_uint16%0#0"
      ]
    },
    "93": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%2#1"
      ]
    },
    "94": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "95": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "96": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "97": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "98": {
      "op": "log",
      "stack_out": []
    },
    "99": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "100": {
      "op": "return",
      "stack_out": []
    },
    "101": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare[routing]",
      "params": {},
      "block": "set_0_compare",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "104": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "105": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "106": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "107": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "108": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "109": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "111": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "112": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "113": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "114": {
      "op": "extract 2 0",
      "defined_out": [
        "inp#0"
      ],
      "stack_out": [
        "inp#0"
      ]
    },
    "117": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "inp#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "inp#0",
        "tmp%0#1"
      ]
    },
    "119": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inp#0",
        "tmp%0#1",
        "0"
      ]
    },
    "120": {
      "op": ">",
      "defined_out": [
        "inp#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "inp#0",
        "tmp%1#1"
      ]
    },
    "121": {
      "op": "intc_0 // 0"
    },
    "122": {
      "op": "swap",
      "stack_out": [
        "inp#0",
        "0",
        "tmp%1#1"
      ]
    },
    "123": {
      "op": "setbit",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "124": {
      "op": "dup",
      "defined_out": [
        "tmp%2#1",
        "tmp%2#1 (copy)"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%2#1 (copy)"
      ]
    },
    "125": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%length%0#0"
      ]
    },
    "126": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%as_bytes%0#0"
      ]
    },
    "127": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%length_uint16%0#0"
      ]
    },
    "130": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%2#1"
      ]
    },
    "131": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "132": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "133": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "134": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "135": {
      "op": "log",
      "stack_out": []
    },
    "136": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "137": {
      "op": "return",
      "stack_out": []
    },
    "138": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties[routing]",
      "params": {},
      "block": "bool_only_properties",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "139": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "141": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "143": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "145": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "146": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "147": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": []
    },
    "149": {
      "op": "itxn_submit"
    },
    "150": {
      "op": "itxn_begin"
    },
    "151": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "152": {
      "op": "itxn_field Nonparticipation",
      "stack_out": []
    },
    "154": {
      "op": "intc_2 // keyreg",
      "defined_out": [
        "keyreg"
      ],
      "stack_out": [
        "keyreg"
      ]
    },
    "155": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "157": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "158": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "160": {
      "op": "itxn_submit"
    },
    "161": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "162": {
      "op": "return",
      "stack_out": []
    }
  }
}