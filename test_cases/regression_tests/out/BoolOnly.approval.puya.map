{
  "version": 3,
  "sources": [
    "../bool_only.py"
  ],
  "mappings": ";;;;;;;;;;;;AAGA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;AACK;;;AAAA;;;AAEuC;;AAAL;AAAA;AAAH;AAArB;AAAA;AAFV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;;;AAEkC;;AAAmB;AAAnB;AAAH;AAArB;AAAA;AAFV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMG;AAC4B;;AAA5B;;AACmD;;AAAL;AAAA;AAA9C;;AACA;AAEA;AACsB;;;AADtB;;;;AAAA;;;AAAA;AAPH;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x151f7c75"
    },
    "12": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "14": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "15": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "17": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "18": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "19": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "20": {
      "op": "switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED",
      "stack_out": []
    },
    "46": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "47": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "49": {
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "50": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "op": "return // on error: this contract does not implement the given ABI method for create NoOp",
      "defined_out": [],
      "stack_out": []
    },
    "51": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "pushbytess 0xa85bff00 0xc4af225c 0x83589f2d // method \"set_0_convert(byte[])byte[]\", method \"set_0_compare(byte[])byte[]\", method \"bool_only_properties()void\"",
      "defined_out": [
        "Method(bool_only_properties()void)",
        "Method(set_0_compare(byte[])byte[])",
        "Method(set_0_convert(byte[])byte[])"
      ],
      "stack_out": [
        "Method(set_0_convert(byte[])byte[])",
        "Method(set_0_compare(byte[])byte[])",
        "Method(bool_only_properties()void)"
      ]
    },
    "68": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(bool_only_properties()void)",
        "Method(set_0_compare(byte[])byte[])",
        "Method(set_0_convert(byte[])byte[])",
        "tmp%5#0"
      ],
      "stack_out": [
        "Method(set_0_convert(byte[])byte[])",
        "Method(set_0_compare(byte[])byte[])",
        "Method(bool_only_properties()void)",
        "tmp%5#0"
      ]
    },
    "71": {
      "op": "match set_0_convert set_0_compare bool_only_properties",
      "stack_out": []
    },
    "79": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "80": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_convert[routing]",
      "params": {},
      "block": "set_0_convert",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "83": {
      "op": "extract 2 0",
      "defined_out": [
        "inp#0"
      ],
      "stack_out": [
        "inp#0"
      ]
    },
    "86": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "inp#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "inp#0",
        "tmp%0#1"
      ]
    },
    "88": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inp#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "inp#0",
        "tmp%0#1",
        "0"
      ]
    },
    "89": {
      "op": "!=",
      "defined_out": [
        "inp#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "inp#0",
        "tmp%1#1"
      ]
    },
    "90": {
      "op": "intc_0 // 0"
    },
    "91": {
      "op": "swap",
      "stack_out": [
        "inp#0",
        "0",
        "tmp%1#1"
      ]
    },
    "92": {
      "op": "setbit",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "93": {
      "op": "dup",
      "defined_out": [
        "tmp%2#1",
        "tmp%2#1 (copy)"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%2#1 (copy)"
      ]
    },
    "94": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%length%0#0"
      ]
    },
    "95": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%as_bytes%0#0"
      ]
    },
    "96": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%length_uint16%0#0"
      ]
    },
    "99": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%2#1"
      ]
    },
    "100": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "101": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "102": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "103": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "104": {
      "op": "log",
      "stack_out": []
    },
    "105": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "106": {
      "op": "return",
      "stack_out": []
    },
    "107": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.set_0_compare[routing]",
      "params": {},
      "block": "set_0_compare",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "110": {
      "op": "extract 2 0",
      "defined_out": [
        "inp#0"
      ],
      "stack_out": [
        "inp#0"
      ]
    },
    "113": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "inp#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "inp#0",
        "tmp%0#1"
      ]
    },
    "115": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inp#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "inp#0",
        "tmp%0#1",
        "0"
      ]
    },
    "116": {
      "op": ">",
      "defined_out": [
        "inp#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "inp#0",
        "tmp%1#1"
      ]
    },
    "117": {
      "op": "intc_0 // 0"
    },
    "118": {
      "op": "swap",
      "stack_out": [
        "inp#0",
        "0",
        "tmp%1#1"
      ]
    },
    "119": {
      "op": "setbit",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "120": {
      "op": "dup",
      "defined_out": [
        "tmp%2#1",
        "tmp%2#1 (copy)"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%2#1 (copy)"
      ]
    },
    "121": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%length%0#0"
      ]
    },
    "122": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%as_bytes%0#0"
      ]
    },
    "123": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%length_uint16%0#0"
      ]
    },
    "126": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%2#1"
      ]
    },
    "127": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "128": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "129": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "130": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "131": {
      "op": "log",
      "stack_out": []
    },
    "132": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "133": {
      "op": "return",
      "stack_out": []
    },
    "134": {
      "subroutine": "test_cases.regression_tests.bool_only.BoolOnly.bool_only_properties[routing]",
      "params": {},
      "block": "bool_only_properties",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "135": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "137": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "139": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "141": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "142": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "143": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": []
    },
    "145": {
      "op": "itxn_submit"
    },
    "146": {
      "op": "itxn_begin"
    },
    "147": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "148": {
      "op": "itxn_field Nonparticipation",
      "stack_out": []
    },
    "150": {
      "op": "pushint 2 // keyreg",
      "defined_out": [
        "keyreg"
      ],
      "stack_out": [
        "keyreg"
      ]
    },
    "152": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "154": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "155": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "157": {
      "op": "itxn_submit"
    },
    "158": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "159": {
      "op": "return",
      "stack_out": []
    }
  }
}