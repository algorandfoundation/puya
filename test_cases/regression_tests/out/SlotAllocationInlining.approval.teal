#pragma version 11
#pragma typetrack false

// test_cases.regression_tests.slot_allocation_inlining.SlotAllocationInlining.approval_program() -> uint64:
main:
    intcblock 0 32 1
    bytecblock 0x068101
    pushbytes 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    store 0

main_while_top@2:
    pushint 810 // 810
    global OpcodeBudget
    >
    bz main_after_while@7
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec_0 // 0x068101
    itxn_field ApprovalProgram
    bytec_0 // 0x068101
    itxn_field ClearStateProgram
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    b main_while_top@2

main_after_while@7:
    // regression_tests/slot_allocation_inlining.py:24-25
    // # create pseudo random array from sender address
    // arr = ReferenceArray[UInt64]()
    callsub _puya_lib.mem.new_slot
    dup
    pushbytes 0x
    stores
    // regression_tests/slot_allocation_inlining.py:26
    // append_to_array(arr)
    dup
    callsub append_to_array
    // regression_tests/slot_allocation_inlining.py:27
    // assert arr.length == 32, "expected array of length 32"
    loads
    len
    pushint 8 // 8
    /
    intc_1 // 32
    ==
    assert // expected array of length 32
    // regression_tests/slot_allocation_inlining.py:16
    // return True
    intc_2 // 1
    return


// test_cases.regression_tests.slot_allocation_inlining.append_to_array(arr: uint64) -> void:
append_to_array:
    // regression_tests/slot_allocation_inlining.py:30-31
    // @subroutine(inline=False)
    // def append_to_array(arr: ReferenceArray[UInt64]) -> None:
    proto 1 0
    // regression_tests/slot_allocation_inlining.py:32
    // for b in Txn.sender.bytes:
    txn Sender
    intc_0 // 0

append_to_array_for_header@1:
    // regression_tests/slot_allocation_inlining.py:32
    // for b in Txn.sender.bytes:
    frame_dig 1
    intc_1 // 32
    <
    bz append_to_array_after_for@4
    // regression_tests/slot_allocation_inlining.py:33
    // arr.append(op.btoi(b))
    frame_dig 0
    frame_dig 1
    dup
    cover 2
    getbyte
    frame_dig -1
    loads
    swap
    itob
    concat // on error: max array length exceeded
    frame_dig -1
    swap
    stores
    intc_2 // 1
    +
    frame_bury 1
    b append_to_array_for_header@1

append_to_array_after_for@4:
    retsub


// _puya_lib.mem.new_slot() -> uint64:
_puya_lib.mem.new_slot:
    load 0
    bitlen
    load 0
    pushint 256 // 256
    dig 2
    -
    intc_0 // 0
    setbit // on error: no available slots
    store 0
    retsub
