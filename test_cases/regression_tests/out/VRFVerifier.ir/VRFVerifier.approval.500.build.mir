// Op                                                                          Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        // regression_tests/branch_to_proto.py:4
        // class VRFVerifier(ARC4Contract):
        txn NumAppArgs                                                         tmp%0#1
        v-store tmp%0#1
        v-load tmp%0#1                                                         tmp%0#1
        bz main___algopy_default_create@5 ; b main_abi_routing@2

    main_abi_routing@2:
        // regression_tests/branch_to_proto.py:4
        // class VRFVerifier(ARC4Contract):
        txna ApplicationArgs 0                                                 tmp%2#0
        v-store tmp%2#0
        method verify(byte[],byte[],byte[])(byte[],bool)                       Method(verify(byte[],byte[],byte[])(byte[],bool))
        v-load tmp%2#0                                                         Method(verify(byte[],byte[],byte[])(byte[],bool)),tmp%2#0
        match main_verify_route@3 ; b main_switch_case_next@4

    main_verify_route@3:
        // regression_tests/branch_to_proto.py:5
        // @arc4.abimethod
        txn OnCompletion                                                       tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                         tmp%3#0
        !                                                                      tmp%4#0
        v-store tmp%4#0
        txn ApplicationID                                                      tmp%5#0
        v-store tmp%5#0
        v-load tmp%4#0                                                         tmp%4#0
        v-load tmp%5#0                                                         tmp%4#0,tmp%5#0
        &&                                                                     tmp%7#0
        v-store tmp%7#0
        v-load tmp%7#0                                                         tmp%7#0
        assert // OnCompletion must be NoOp && can only call when not creating
        callsub verify
        b main_switch_case_next@4

    main_switch_case_next@4:
        // regression_tests/branch_to_proto.py:4
        // class VRFVerifier(ARC4Contract):
        err

    main___algopy_default_create@5:
        txn OnCompletion                                                       tmp%8#0
        v-store tmp%8#0
        v-load tmp%8#0                                                         tmp%8#0
        !                                                                      tmp%9#0
        v-store tmp%9#0
        txn ApplicationID                                                      tmp%10#0
        v-store tmp%10#0
        v-load tmp%10#0                                                        tmp%10#0
        !                                                                      tmp%11#0
        v-store tmp%11#0
        v-load tmp%9#0                                                         tmp%9#0
        v-load tmp%11#0                                                        tmp%9#0,tmp%11#0
        &&                                                                     tmp%12#0
        v-store tmp%12#0
        v-load tmp%12#0                                                        tmp%12#0
        assert // OnCompletion must be NoOp && can only call when creating
        int 1                                                                  1
        return


// test_cases.regression_tests.branch_to_proto.VRFVerifier.verify[routing]() -> void:
subroutine verify:
    verify_block@0:
        // regression_tests/branch_to_proto.py:5
        // @arc4.abimethod
        txna ApplicationArgs 1                                                 tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                         tmp%0#0
        int 0                                                                  tmp%0#0,0
        extract_uint16 // on error: invalid array length header                aggregate%array_length%0#0
        v-store aggregate%array_length%0#0
        v-load aggregate%array_length%0#0                                      aggregate%array_length%0#0
        int 2                                                                  aggregate%array_length%0#0,2
        +                                                                      add%0#0
        v-store add%0#0
        v-load tmp%0#0                                                         tmp%0#0
        len                                                                    len%0#0
        v-store len%0#0
        v-load len%0#0                                                         len%0#0
        v-load add%0#0                                                         len%0#0,add%0#0
        ==                                                                     eq%0#0
        v-store eq%0#0
        v-load eq%0#0                                                          eq%0#0
        assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        v-load tmp%0#0                                                         tmp%0#0
        extract 2 0                                                            message#0
        v-store message#0
        txna ApplicationArgs 2                                                 tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                         tmp%2#0
        int 0                                                                  tmp%2#0,0
        extract_uint16 // on error: invalid array length header                aggregate%array_length%1#0
        v-store aggregate%array_length%1#0
        v-load aggregate%array_length%1#0                                      aggregate%array_length%1#0
        int 2                                                                  aggregate%array_length%1#0,2
        +                                                                      add%1#0
        v-store add%1#0
        v-load tmp%2#0                                                         tmp%2#0
        len                                                                    len%1#0
        v-store len%1#0
        v-load len%1#0                                                         len%1#0
        v-load add%1#0                                                         len%1#0,add%1#0
        ==                                                                     eq%1#0
        v-store eq%1#0
        v-load eq%1#0                                                          eq%1#0
        assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        v-load tmp%2#0                                                         tmp%2#0
        extract 2 0                                                            proof#0
        v-store proof#0
        txna ApplicationArgs 3                                                 tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                         tmp%4#0
        int 0                                                                  tmp%4#0,0
        extract_uint16 // on error: invalid array length header                aggregate%array_length%2#0
        v-store aggregate%array_length%2#0
        v-load aggregate%array_length%2#0                                      aggregate%array_length%2#0
        int 2                                                                  aggregate%array_length%2#0,2
        +                                                                      add%2#0
        v-store add%2#0
        v-load tmp%4#0                                                         tmp%4#0
        len                                                                    len%2#0
        v-store len%2#0
        v-load len%2#0                                                         len%2#0
        v-load add%2#0                                                         len%2#0,add%2#0
        ==                                                                     eq%2#0
        v-store eq%2#0
        v-load eq%2#0                                                          eq%2#0
        assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        v-load tmp%4#0                                                         tmp%4#0
        extract 2 0                                                            pk#0
        v-store pk#0
        b verify_while_top@2

    verify_while_top@2:
        global OpcodeBudget                                                    tmp%1#2
        v-store tmp%1#2
        int 10010                                                              10010
        v-load tmp%1#2                                                         10010,tmp%1#2
        >                                                                      tmp%2#1
        v-store tmp%2#1
        v-load tmp%2#1                                                         tmp%2#1
        bz verify_after_while@7 ; b verify_while_body@3

    verify_while_body@3:
        itxn_begin
        int appl                                                               appl
        itxn_field TypeEnum
        int DeleteApplication                                                  DeleteApplication
        itxn_field OnCompletion
        byte 0x068101                                                          0x068101
        itxn_field ApprovalProgram
        byte 0x068101                                                          0x068101
        itxn_field ClearStateProgram
        global MinTxnFee                                                       tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                         tmp%3#0
        itxn_field Fee
        itxn_submit
        b verify_while_top@2

    verify_after_while@7:
        // regression_tests/branch_to_proto.py:8
        // return op.vrf_verify(op.VrfVerify.VrfAlgorand, message, proof, pk)
        v-load message#0                                                       message#0
        v-load proof#0                                                         message#0,proof#0
        v-load pk#0                                                            message#0,proof#0,pk#0
        vrf_verify VrfAlgorand                                                 tmp%0#0,tmp%1#1
        v-store tmp%1#1                                                        tmp%0#0
        v-store tmp%0#0
        // regression_tests/branch_to_proto.py:5
        // @arc4.abimethod
        v-load tmp%0#0                                                         tmp%0#0
        len                                                                    aggregate%length%0#0
        v-store aggregate%length%0#0
        v-load aggregate%length%0#0                                            aggregate%length%0#0
        itob                                                                   aggregate%as_bytes%0#0
        v-store aggregate%as_bytes%0#0
        v-load aggregate%as_bytes%0#0                                          aggregate%as_bytes%0#0
        extract 6 2                                                            aggregate%length_uint16%0#0
        v-store aggregate%length_uint16%0#0
        v-load aggregate%length_uint16%0#0                                     aggregate%length_uint16%0#0
        v-load tmp%0#0                                                         aggregate%length_uint16%0#0,tmp%0#0
        concat                                                                 aggregate%encoded_value%0#0
        v-store aggregate%encoded_value%0#0
        byte 0x00                                                              0x00
        int 0                                                                  0x00,0
        v-load tmp%1#1                                                         0x00,0,tmp%1#1
        setbit                                                                 aggregate%encoded_bool%0#0
        v-store aggregate%encoded_bool%0#0
        byte 0x0003                                                            0x0003
        v-load aggregate%encoded_bool%0#0                                      0x0003,aggregate%encoded_bool%0#0
        concat                                                                 aggregate%head%1#0
        v-store aggregate%head%1#0
        v-load aggregate%head%1#0                                              aggregate%head%1#0
        v-load aggregate%encoded_value%0#0                                     aggregate%head%1#0,aggregate%encoded_value%0#0
        concat                                                                 aggregate%concat%0#0
        v-store aggregate%concat%0#0
        byte 0x151f7c75                                                        0x151f7c75
        v-load aggregate%concat%0#0                                            0x151f7c75,aggregate%concat%0#0
        concat                                                                 tmp%9#0
        v-store tmp%9#0
        v-load tmp%9#0                                                         tmp%9#0
        log
        int 1                                                                  1
        return


