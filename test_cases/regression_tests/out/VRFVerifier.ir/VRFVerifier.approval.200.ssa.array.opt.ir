main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "verify(byte[],byte[],byte[])(byte[],bool)" => block@3, * => block@10}
    block@3: // verify_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        test_cases.regression_tests.branch_to_proto.VRFVerifier.verify[routing]()
        goto block@10
    block@6: // bare_routing_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        let not%tmp%7#0: bool = (! tmp%7#0)
        (assert not%tmp%7#0)
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        exit 1u
    block@10: // after_if_else_L4
        fail

subroutine test_cases.regression_tests.branch_to_proto.VRFVerifier.verify[routing]() -> void:
    block@0: // L5
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let message#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let proof#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let reinterpret_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = (txna ApplicationArgs 3)
        let pk#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%2#0)
        goto block@2
    block@2: // while_top_L20
        let tmp%1#2: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> 10010u tmp%1#2)
        goto tmp%2#0 ? block@3 : block@7
    block@3: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        itxn_submit
        goto block@2
    block@7: // after_while_L20
        let (tmp%0#1: bytes, tmp%1#1: bool) = ((vrf_verify VrfAlgorand) message#0 proof#0 pk#0)
        let aggregate%length%0#0: uint64 = (len tmp%0#1)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%0#1)
        let aggregate%as_bytes%1#0: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%0#0: bytes = 0x0003
        let aggregate%head%0#0: bytes = 0x0003
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%1#1)
        let aggregate%head%1#0: bytes = (concat 0x0003 aggregate%encoded_bool%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 aggregate%encoded_value%0#0)
        let tmp%6#0: bytes = (concat 0x151f7c75 aggregate%concat%0#0)
        (log tmp%6#0)
        exit 1u