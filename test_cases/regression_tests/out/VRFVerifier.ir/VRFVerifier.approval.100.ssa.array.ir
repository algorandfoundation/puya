main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@6, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19][tmp%4#0] else goto block@19
    block@2: // switch_case_0_L4
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "verify(byte[],byte[],byte[])(byte[],bool)" => block@3, * => block@5}
    block@3: // verify_route_L5
        test_cases.regression_tests.branch_to_proto.VRFVerifier.verify[routing]()
        goto block@5
    block@5: // switch_case_next_L4
        fail // this contract does not implement the given ABI method for call NoOp
    block@6: // switch_case_1_L4
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@19: // switch_case_default_L4
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.regression_tests.branch_to_proto.VRFVerifier.verify[routing]() -> void:
    block@0: // L5
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let message#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let proof#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let reinterpret_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = (txna ApplicationArgs 3)
        let pk#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%2#0)
        goto block@2
    block@2: // while_top_L20
        let tmp%1#2: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> 10010u tmp%1#2)
        goto tmp%2#0 ? block@3 : block@7
    block@3: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        itxn_submit
        goto block@2
    block@7: // after_while_L20
        let (tmp%0#1: bytes, tmp%1#1: bool) = ((vrf_verify VrfAlgorand) message#0 proof#0 pk#0)
        let aggregate%length%0#0: uint64 = (len tmp%0#1)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%0#1)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 3u aggregate%data_length%0#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%1#1)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%encoded_bool%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%as_Encoded((len+uint8[]),bool1)%0#0: Encoded((len+uint8[]),bool1) = aggregate%concat%0#0
        let tmp%5#0: Encoded((len+uint8[]),bool1) = aggregate%as_Encoded((len+uint8[]),bool1)%0#0
        let tmp%6#0: bytes = (concat 0x151f7c75 tmp%5#0)
        (log tmp%6#0)
        exit 1u