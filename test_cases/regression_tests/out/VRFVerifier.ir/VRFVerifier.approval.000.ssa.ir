main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.regression_tests.branch_to_proto.VRFVerifier.__puya_arc4_router__()
        return tmp%0#0

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let tmp%0#0: uint64 = (+ required_budget#0 10u)
        let required_budget_with_buffer#0: uint64 = tmp%0#0
        goto block@1
    block@1: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> required_budget_with_buffer#0 tmp%1#0)
        goto tmp%2#0 ? block@2 : block@7
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        switch fee_source#0 {0u => block@3, 1u => block@4, * => block@5}
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@6
    block@4: // switch_case_1_L30
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@6
    block@5: // switch_case_default_L26
        goto block@6
    block@6: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@7: // after_while_L20
        return 

subroutine test_cases.regression_tests.branch_to_proto.VRFVerifier.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@1, 1u => block@5, 2u => block@8, 3u => block@9, 4u => block@10, 5u => block@11, 6u => block@12, 7u => block@13, 8u => block@14, 9u => block@15, 10u => block@16, 11u => block@17, * => block@18}
    block@1: // switch_case_0_L4
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "verify(byte[],byte[],byte[])(byte[],bool)" => block@2, * => block@3}
    block@2: // verify_route_L5
        test_cases.regression_tests.branch_to_proto.VRFVerifier.verify[routing]()
        goto block@4
    block@3: // switch_case_default_L4
        goto block@4
    block@4: // switch_case_next_L4
        fail // this contract does not implement the given ABI method for call NoOp
    block@5: // switch_case_1_L4
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@6 : block@7
    block@6: // __algopy_default_create_L1
        test_cases.regression_tests.branch_to_proto.VRFVerifier.__algopy_default_create()
        exit 1u
    block@7: // else_body_L4
        fail // this contract does not implement the given ABI method for create NoOp
    block@8: // switch_case_2_L4
        goto block@18
    block@9: // switch_case_3_L4
        goto block@18
    block@10: // switch_case_4_L4
        goto block@18
    block@11: // switch_case_5_L4
        goto block@18
    block@12: // switch_case_6_L4
        goto block@18
    block@13: // switch_case_7_L4
        goto block@18
    block@14: // switch_case_8_L4
        goto block@18
    block@15: // switch_case_9_L4
        goto block@18
    block@16: // switch_case_10_L4
        goto block@18
    block@17: // switch_case_11_L4
        goto block@18
    block@18: // switch_case_default_L4
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.regression_tests.branch_to_proto.VRFVerifier.verify[routing]() -> void:
    block@0: // L5
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%1#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%1#0)
        let reinterpret_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = (txna ApplicationArgs 3)
        let tmp%2#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%2#0)
        let (tmp%3#0: bytes, tmp%4#0: bool) = test_cases.regression_tests.branch_to_proto.VRFVerifier.verify(tmp%0#0, tmp%1#0, tmp%2#0)
        let tmp%5#0: Encoded((len+uint8[]),bool1) = bytes_encode<((len+uint8[]),bool1)>(tmp%3#0, tmp%4#0)
        let tmp%6#0: bytes = (concat 0x151f7c75 tmp%5#0)
        (log tmp%6#0)
        exit 1u

subroutine test_cases.regression_tests.branch_to_proto.VRFVerifier.verify(message: bytes, proof: bytes, pk: bytes) -> <bytes, bool>:
    block@0: // L5
        _puya_lib.util.ensure_budget(10000u, 1u)
        let (tmp%0#0: bytes, tmp%1#0: bool) = ((vrf_verify VrfAlgorand) message#0 proof#0 pk#0)
        return tmp%0#0 tmp%1#0

subroutine test_cases.regression_tests.branch_to_proto.VRFVerifier.__algopy_default_create() -> void:
    block@0: // L1
        return 