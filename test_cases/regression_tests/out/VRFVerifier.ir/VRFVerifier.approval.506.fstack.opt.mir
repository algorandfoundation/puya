// Op                                                                          Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        // regression_tests/branch_to_proto.py:4
        // class VRFVerifier(ARC4Contract):
        txn NumAppArgs                                                         tmp%0#1
        bz main___algopy_default_create@5 ; b main_abi_routing@2

    main_abi_routing@2:
        // regression_tests/branch_to_proto.py:4
        // class VRFVerifier(ARC4Contract):
        txna ApplicationArgs 0                                                 tmp%2#0
        method verify(byte[],byte[],byte[])(byte[],bool)                       tmp%2#0,Method(verify(byte[],byte[],byte[])(byte[],bool))
        l-load tmp%2#0 1                                                       Method(verify(byte[],byte[],byte[])(byte[],bool)),tmp%2#0
        match main_verify_route@3 ; b main_switch_case_next@4

    main_verify_route@3:
        // regression_tests/branch_to_proto.py:5
        // @arc4.abimethod
        txn OnCompletion                                                       tmp%3#0
        !                                                                      tmp%4#0
        txn ApplicationID                                                      tmp%4#0,tmp%5#0
        l-load tmp%4#0 1                                                       tmp%5#0,tmp%4#0
        l-load tmp%5#0 1                                                       tmp%4#0,tmp%5#0
        &&                                                                     tmp%7#0
        assert // OnCompletion must be NoOp && can only call when not creating
        callsub verify
        b main_switch_case_next@4

    main_switch_case_next@4:
        // regression_tests/branch_to_proto.py:4
        // class VRFVerifier(ARC4Contract):
        err

    main___algopy_default_create@5:
        txn OnCompletion                                                       tmp%8#0
        !                                                                      tmp%9#0
        txn ApplicationID                                                      tmp%9#0,tmp%10#0
        !                                                                      tmp%9#0,tmp%11#0
        l-load tmp%9#0 1                                                       tmp%11#0,tmp%9#0
        l-load tmp%11#0 1                                                      tmp%9#0,tmp%11#0
        &&                                                                     tmp%12#0
        assert // OnCompletion must be NoOp && can only call when creating
        int 1                                                                  1
        return


// test_cases.regression_tests.branch_to_proto.VRFVerifier.verify[routing]() -> void:
subroutine verify:
    verify_block@0:
        // regression_tests/branch_to_proto.py:5
        // @arc4.abimethod
        txna ApplicationArgs 1                                                 tmp%0#0
        l-load-copy tmp%0#0 0                                                  tmp%0#0,tmp%0#0 (copy)
        int 0                                                                  tmp%0#0,tmp%0#0 (copy),0
        extract_uint16                                                         tmp%0#0,aggregate%array_length%0#0
        int 2                                                                  tmp%0#0,aggregate%array_length%0#0,2
        +                                                                      tmp%0#0,add%0#0
        l-load-copy tmp%0#0 1                                                  tmp%0#0,add%0#0,tmp%0#0 (copy)
        len                                                                    tmp%0#0,add%0#0,len%0#0
        l-load add%0#0 1                                                       tmp%0#0,len%0#0,add%0#0
        ==                                                                     tmp%0#0,eq%0#0
        assert // invalid number of bytes for (len+uint8[])                    tmp%0#0
        l-load tmp%0#0 0                                                       tmp%0#0
        extract 2 0                                                            message#0
        f-store message#0                                                      (𝕗) message#0 |
        txna ApplicationArgs 2                                                 (𝕗) message#0 | tmp%2#0
        l-load-copy tmp%2#0 0                                                  (𝕗) message#0 | tmp%2#0,tmp%2#0 (copy)
        int 0                                                                  (𝕗) message#0 | tmp%2#0,tmp%2#0 (copy),0
        extract_uint16                                                         (𝕗) message#0 | tmp%2#0,aggregate%array_length%1#0
        int 2                                                                  (𝕗) message#0 | tmp%2#0,aggregate%array_length%1#0,2
        +                                                                      (𝕗) message#0 | tmp%2#0,add%1#0
        l-load-copy tmp%2#0 1                                                  (𝕗) message#0 | tmp%2#0,add%1#0,tmp%2#0 (copy)
        len                                                                    (𝕗) message#0 | tmp%2#0,add%1#0,len%1#0
        l-load add%1#0 1                                                       (𝕗) message#0 | tmp%2#0,len%1#0,add%1#0
        ==                                                                     (𝕗) message#0 | tmp%2#0,eq%1#0
        assert // invalid number of bytes for (len+uint8[])                    (𝕗) message#0 | tmp%2#0
        l-load tmp%2#0 0                                                       (𝕗) message#0 | tmp%2#0
        extract 2 0                                                            (𝕗) message#0 | proof#0
        f-store proof#0                                                        (𝕗) message#0,proof#0 |
        txna ApplicationArgs 3                                                 (𝕗) message#0,proof#0 | tmp%4#0
        l-load-copy tmp%4#0 0                                                  (𝕗) message#0,proof#0 | tmp%4#0,tmp%4#0 (copy)
        int 0                                                                  (𝕗) message#0,proof#0 | tmp%4#0,tmp%4#0 (copy),0
        extract_uint16                                                         (𝕗) message#0,proof#0 | tmp%4#0,aggregate%array_length%2#0
        int 2                                                                  (𝕗) message#0,proof#0 | tmp%4#0,aggregate%array_length%2#0,2
        +                                                                      (𝕗) message#0,proof#0 | tmp%4#0,add%2#0
        l-load-copy tmp%4#0 1                                                  (𝕗) message#0,proof#0 | tmp%4#0,add%2#0,tmp%4#0 (copy)
        len                                                                    (𝕗) message#0,proof#0 | tmp%4#0,add%2#0,len%2#0
        l-load add%2#0 1                                                       (𝕗) message#0,proof#0 | tmp%4#0,len%2#0,add%2#0
        ==                                                                     (𝕗) message#0,proof#0 | tmp%4#0,eq%2#0
        assert // invalid number of bytes for (len+uint8[])                    (𝕗) message#0,proof#0 | tmp%4#0
        l-load tmp%4#0 0                                                       (𝕗) message#0,proof#0 | tmp%4#0
        extract 2 0                                                            (𝕗) message#0,proof#0 | pk#0
        f-store pk#0                                                           (𝕗) message#0,proof#0,pk#0 |
        b verify_while_top@2                                                   (𝕗) message#0,proof#0,pk#0 |

    verify_while_top@2:                                                        (𝕗) message#0,proof#0,pk#0 |
        global OpcodeBudget                                                    (𝕗) message#0,proof#0,pk#0 | tmp%1#2
        int 10010                                                              (𝕗) message#0,proof#0,pk#0 | tmp%1#2,10010
        l-load tmp%1#2 1                                                       (𝕗) message#0,proof#0,pk#0 | 10010,tmp%1#2
        >                                                                      (𝕗) message#0,proof#0,pk#0 | tmp%2#1
        bz verify_after_while@7 ; b verify_while_body@3                        (𝕗) message#0,proof#0,pk#0 |

    verify_while_body@3:                                                       (𝕗) message#0,proof#0,pk#0 |
        itxn_begin                                                             (𝕗) message#0,proof#0,pk#0 |
        int appl                                                               (𝕗) message#0,proof#0,pk#0 | appl
        itxn_field TypeEnum                                                    (𝕗) message#0,proof#0,pk#0 |
        int DeleteApplication                                                  (𝕗) message#0,proof#0,pk#0 | DeleteApplication
        itxn_field OnCompletion                                                (𝕗) message#0,proof#0,pk#0 |
        byte 0x068101                                                          (𝕗) message#0,proof#0,pk#0 | 0x068101
        itxn_field ApprovalProgram                                             (𝕗) message#0,proof#0,pk#0 |
        byte 0x068101                                                          (𝕗) message#0,proof#0,pk#0 | 0x068101
        itxn_field ClearStateProgram                                           (𝕗) message#0,proof#0,pk#0 |
        global MinTxnFee                                                       (𝕗) message#0,proof#0,pk#0 | tmp%3#0
        itxn_field Fee                                                         (𝕗) message#0,proof#0,pk#0 |
        itxn_submit                                                            (𝕗) message#0,proof#0,pk#0 |
        b verify_while_top@2                                                   (𝕗) message#0,proof#0,pk#0 |

    verify_after_while@7:                                                      (𝕗) message#0,proof#0,pk#0 |
        // regression_tests/branch_to_proto.py:8
        // return op.vrf_verify(op.VrfVerify.VrfAlgorand, message, proof, pk)
        f-load message#0                                                       (𝕗) message#0,proof#0,pk#0 | message#0
        f-load proof#0                                                         (𝕗) message#0,proof#0,pk#0 | message#0,proof#0
        f-load pk#0                                                            (𝕗) message#0,proof#0,pk#0 | message#0,proof#0,pk#0
        vrf_verify VrfAlgorand                                                 (𝕗) message#0,proof#0,pk#0 | tmp%0#0,tmp%1#1
        // regression_tests/branch_to_proto.py:5
        // @arc4.abimethod
        l-load-copy tmp%0#0 1                                                  (𝕗) message#0,proof#0,pk#0 | tmp%0#0,tmp%1#1,tmp%0#0 (copy)
        len                                                                    (𝕗) message#0,proof#0,pk#0 | tmp%0#0,tmp%1#1,aggregate%length%0#0
        itob                                                                   (𝕗) message#0,proof#0,pk#0 | tmp%0#0,tmp%1#1,aggregate%as_bytes%0#0
        extract 6 2                                                            (𝕗) message#0,proof#0,pk#0 | tmp%0#0,tmp%1#1,aggregate%length_uint16%0#0
        l-load tmp%0#0 2                                                       (𝕗) message#0,proof#0,pk#0 | tmp%1#1,aggregate%length_uint16%0#0,tmp%0#0
        concat                                                                 (𝕗) message#0,proof#0,pk#0 | tmp%1#1,aggregate%encoded_value%0#0
        byte 0x00                                                              (𝕗) message#0,proof#0,pk#0 | tmp%1#1,aggregate%encoded_value%0#0,0x00
        int 0                                                                  (𝕗) message#0,proof#0,pk#0 | tmp%1#1,aggregate%encoded_value%0#0,0x00,0
        l-load tmp%1#1 3                                                       (𝕗) message#0,proof#0,pk#0 | aggregate%encoded_value%0#0,0x00,0,tmp%1#1
        setbit                                                                 (𝕗) message#0,proof#0,pk#0 | aggregate%encoded_value%0#0,aggregate%encoded_bool%0#0
        byte 0x0003                                                            (𝕗) message#0,proof#0,pk#0 | aggregate%encoded_value%0#0,aggregate%encoded_bool%0#0,0x0003
        l-load aggregate%encoded_bool%0#0 1                                    (𝕗) message#0,proof#0,pk#0 | aggregate%encoded_value%0#0,0x0003,aggregate%encoded_bool%0#0
        concat                                                                 (𝕗) message#0,proof#0,pk#0 | aggregate%encoded_value%0#0,aggregate%head%1#0
        l-load aggregate%encoded_value%0#0 1                                   (𝕗) message#0,proof#0,pk#0 | aggregate%head%1#0,aggregate%encoded_value%0#0
        concat                                                                 (𝕗) message#0,proof#0,pk#0 | aggregate%concat%0#0
        byte 0x151f7c75                                                        (𝕗) message#0,proof#0,pk#0 | aggregate%concat%0#0,0x151f7c75
        l-load aggregate%concat%0#0 1                                          (𝕗) message#0,proof#0,pk#0 | 0x151f7c75,aggregate%concat%0#0
        concat                                                                 (𝕗) message#0,proof#0,pk#0 | tmp%9#0
        log                                                                    (𝕗) message#0,proof#0,pk#0 |
        int 1                                                                  (𝕗) message#0,proof#0,pk#0 | 1
        return                                                                 (𝕗) message#0,proof#0,pk#0 |


