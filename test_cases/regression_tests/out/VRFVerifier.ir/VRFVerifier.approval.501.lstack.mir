// Op                                                                         Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        // regression_tests/branch_to_proto.py:4
        // class VRFVerifier(ARC4Contract):
        txn NumAppArgs                                                        tmp%0#1
        l-load tmp%0#1 0                                                      tmp%0#1
        bz main_bare_routing@6 ; b main_abi_routing@2

    main_abi_routing@2:
        // regression_tests/branch_to_proto.py:4
        // class VRFVerifier(ARC4Contract):
        txna ApplicationArgs 0                                                tmp%2#0
        l-load tmp%2#0 0                                                      tmp%2#0
        method verify(byte[],byte[],byte[])(byte[],bool)                      tmp%2#0,Method(verify(byte[],byte[],byte[])(byte[],bool))
        ==                                                                    eq%tmp%2#0
        l-load eq%tmp%2#0 0                                                   eq%tmp%2#0
        assert
        // regression_tests/branch_to_proto.py:5
        // @arc4.abimethod
        txn OnCompletion                                                      tmp%3#0
        l-load tmp%3#0 0                                                      tmp%3#0
        !                                                                     tmp%4#0
        l-load tmp%4#0 0                                                      tmp%4#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                     tmp%5#0
        l-load tmp%5#0 0                                                      tmp%5#0
        assert // can only call when not creating
        callsub verify
        // regression_tests/branch_to_proto.py:4
        // class VRFVerifier(ARC4Contract):
        err

    main_bare_routing@6:
        // regression_tests/branch_to_proto.py:4
        // class VRFVerifier(ARC4Contract):
        txn OnCompletion                                                      tmp%7#0
        l-load tmp%7#0 0                                                      tmp%7#0
        !                                                                     not%tmp%7#0
        l-load not%tmp%7#0 0                                                  not%tmp%7#0
        assert
        txn ApplicationID                                                     tmp%8#0
        l-load tmp%8#0 0                                                      tmp%8#0
        !                                                                     tmp%9#0
        l-load tmp%9#0 0                                                      tmp%9#0
        assert // can only call when creating
        int 1                                                                 1
        return


// test_cases.regression_tests.branch_to_proto.VRFVerifier.verify[routing]() -> void:
subroutine verify:
    verify_block@0:
        // regression_tests/branch_to_proto.py:5
        // @arc4.abimethod
        txna ApplicationArgs 1                                                reinterpret_Encoded(len+uint8[])%0#0
        l-load reinterpret_Encoded(len+uint8[])%0#0 0                         reinterpret_Encoded(len+uint8[])%0#0
        extract 2 0                                                           message#0
        v-store message#0
        txna ApplicationArgs 2                                                reinterpret_Encoded(len+uint8[])%1#0
        l-load reinterpret_Encoded(len+uint8[])%1#0 0                         reinterpret_Encoded(len+uint8[])%1#0
        extract 2 0                                                           proof#0
        v-store proof#0
        txna ApplicationArgs 3                                                reinterpret_Encoded(len+uint8[])%2#0
        l-load reinterpret_Encoded(len+uint8[])%2#0 0                         reinterpret_Encoded(len+uint8[])%2#0
        extract 2 0                                                           pk#0
        v-store pk#0
        b verify_while_top@2

    verify_while_top@2:
        global OpcodeBudget                                                   tmp%1#2
        int 10010                                                             tmp%1#2,10010
        l-load tmp%1#2 1                                                      10010,tmp%1#2
        >                                                                     tmp%2#0
        l-load tmp%2#0 0                                                      tmp%2#0
        bz verify_after_while@7 ; b verify_while_body@3

    verify_while_body@3:
        itxn_begin
        int appl                                                              appl
        itxn_field TypeEnum
        int DeleteApplication                                                 DeleteApplication
        itxn_field OnCompletion
        byte 0x068101                                                         0x068101
        itxn_field ApprovalProgram
        byte 0x068101                                                         0x068101
        itxn_field ClearStateProgram
        global MinTxnFee                                                      tmp%3#0
        l-load tmp%3#0 0                                                      tmp%3#0
        itxn_field Fee
        itxn_submit
        b verify_while_top@2

    verify_after_while@7:
        // regression_tests/branch_to_proto.py:8
        // return op.vrf_verify(op.VrfVerify.VrfAlgorand, message, proof, pk)
        v-load message#0                                                      message#0
        v-load proof#0                                                        message#0,proof#0
        v-load pk#0                                                           message#0,proof#0,pk#0
        vrf_verify VrfAlgorand                                                tmp%0#1,tmp%1#1
        // regression_tests/branch_to_proto.py:5
        // @arc4.abimethod
        l-load-copy tmp%0#1 1                                                 tmp%0#1,tmp%1#1,tmp%0#1 (copy)
        len                                                                   tmp%0#1,tmp%1#1,aggregate%length%0#0
        l-load aggregate%length%0#0 0                                         tmp%0#1,tmp%1#1,aggregate%length%0#0
        itob                                                                  tmp%0#1,tmp%1#1,aggregate%as_bytes%0#0
        l-load aggregate%as_bytes%0#0 0                                       tmp%0#1,tmp%1#1,aggregate%as_bytes%0#0
        extract 6 2                                                           tmp%0#1,tmp%1#1,aggregate%length_uint16%0#0
        l-load aggregate%length_uint16%0#0 0                                  tmp%0#1,tmp%1#1,aggregate%length_uint16%0#0
        l-load tmp%0#1 2                                                      tmp%1#1,aggregate%length_uint16%0#0,tmp%0#1
        concat                                                                tmp%1#1,aggregate%encoded_value%0#0
        byte 0x00                                                             tmp%1#1,aggregate%encoded_value%0#0,0x00
        int 0                                                                 tmp%1#1,aggregate%encoded_value%0#0,0x00,0
        l-load tmp%1#1 3                                                      aggregate%encoded_value%0#0,0x00,0,tmp%1#1
        setbit                                                                aggregate%encoded_value%0#0,aggregate%encoded_bool%0#0
        byte 0x0003                                                           aggregate%encoded_value%0#0,aggregate%encoded_bool%0#0,0x0003
        l-load aggregate%encoded_bool%0#0 1                                   aggregate%encoded_value%0#0,0x0003,aggregate%encoded_bool%0#0
        concat                                                                aggregate%encoded_value%0#0,aggregate%head%1#0
        l-load aggregate%head%1#0 0                                           aggregate%encoded_value%0#0,aggregate%head%1#0
        l-load aggregate%encoded_value%0#0 1                                  aggregate%head%1#0,aggregate%encoded_value%0#0
        concat                                                                aggregate%concat%0#0
        byte 0x151f7c75                                                       aggregate%concat%0#0,0x151f7c75
        l-load aggregate%concat%0#0 1                                         0x151f7c75,aggregate%concat%0#0
        concat                                                                tmp%6#0
        l-load tmp%6#0 0                                                      tmp%6#0
        log
        int 1                                                                 1
        return


