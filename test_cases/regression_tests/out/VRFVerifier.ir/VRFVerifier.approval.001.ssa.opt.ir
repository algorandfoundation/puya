main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "verify(byte[],byte[],byte[])(byte[],bool)" => block@3, * => block@10}
    block@3: // verify_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%7#0: bytes = decode<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%8#0: bytes = decode<bytes>(reinterpret_Encoded(len+uint8[])%1#0)
        let reinterpret_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = (txna ApplicationArgs 3)
        let tmp%9#0: bytes = decode<bytes>(reinterpret_Encoded(len+uint8[])%2#0)
        let (tmp%10#0: bytes, tmp%11#0: bool) = test_cases.regression_tests.branch_to_proto.VRFVerifier.verify(tmp%7#0, tmp%8#0, tmp%9#0)
        let tmp%12#0: Encoded((len+uint8[]),bool1) = encode<((len+uint8[]),bool1)>(tmp%10#0, tmp%11#0)
        let tmp%13#0: bytes = (concat 0x151f7c75 tmp%12#0)
        (log tmp%13#0)
        let test_cases.regression_tests.branch_to_proto.VRFVerifier.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L4
        let tmp%14#0: uint64 = (txn OnCompletion)
        goto tmp%14#0 ? block@10 : block@7
    block@7: // __algopy_default_create_L1
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // can only call when creating
        test_cases.regression_tests.branch_to_proto.VRFVerifier.__algopy_default_create()
        let test_cases.regression_tests.branch_to_proto.VRFVerifier.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L4
        let test_cases.regression_tests.branch_to_proto.VRFVerifier.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_test_cases.regression_tests.branch_to_proto.VRFVerifier.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(test_cases.regression_tests.branch_to_proto.VRFVerifier.__puya_arc4_router__%0#0 <- block@3, test_cases.regression_tests.branch_to_proto.VRFVerifier.__puya_arc4_router__%0#1 <- block@7, test_cases.regression_tests.branch_to_proto.VRFVerifier.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine test_cases.regression_tests.branch_to_proto.VRFVerifier.verify(message: bytes, proof: bytes, pk: bytes) -> <bytes, bool>:
    block@0: // L5
        let required_budget_with_buffer#0: uint64 = 10010u
        goto block@2
    block@2: // while_top_L20
        let tmp%1#1: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> 10010u tmp%1#1)
        goto tmp%2#0 ? block@3 : block@7
    block@3: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@6
    block@6: // switch_case_next_L26
        itxn_submit
        goto block@2
    block@7: // after_while_L20
        let (tmp%0#0: bytes, tmp%1#0: bool) = ((vrf_verify VrfAlgorand) message#0 proof#0 pk#0)
        return tmp%0#0 tmp%1#0

subroutine test_cases.regression_tests.branch_to_proto.VRFVerifier.__algopy_default_create() -> void:
    block@0: // L1
        return 