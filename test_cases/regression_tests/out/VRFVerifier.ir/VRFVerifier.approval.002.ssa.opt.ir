main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "verify(byte[],byte[],byte[])(byte[],bool)" => block@3, * => block@4}
    block@3: // verify_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        test_cases.regression_tests.branch_to_proto.VRFVerifier.verify[routing]()
        goto block@4
    block@4: // switch_case_next_L4
        fail
    block@5: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.regression_tests.branch_to_proto.VRFVerifier.verify[routing]() -> void:
    block@0: // L5
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(tmp%0#0)
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let message#0: bytes = decode_bytes<bytes>(tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let length%1#0: uint64 = array_len(tmp%2#0)
        let add%1#0: uint64 = (+ length%1#0 2u)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let proof#0: bytes = decode_bytes<bytes>(tmp%2#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let length%2#0: uint64 = array_len(tmp%4#0)
        let add%2#0: uint64 = (+ length%2#0 2u)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 add%2#0)
        (assert eq%2#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let pk#0: bytes = decode_bytes<bytes>(tmp%4#0)
        let required_budget_with_buffer#0: uint64 = 10010u
        goto block@2
    block@2: // while_top_L20
        let tmp%1#2: uint64 = (global OpcodeBudget)
        let tmp%2#1: bool = (> 10010u tmp%1#2)
        goto tmp%2#1 ? block@3 : block@7
    block@3: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@6
    block@6: // switch_case_next_L26
        itxn_submit
        goto block@2
    block@7: // after_while_L20
        let (tmp%0#1: bytes, tmp%1#1: bool) = ((vrf_verify VrfAlgorand) message#0 proof#0 pk#0)
        let tmp%8#0: Encoded((len+uint8[]),bool1) = bytes_encode<((len+uint8[]),bool1)>(tmp%0#1, tmp%1#1)
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        exit 1u