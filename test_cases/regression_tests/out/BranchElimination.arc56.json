{
    "name": "BranchElimination",
    "structs": {},
    "methods": [
        {
            "name": "umm",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "umm2",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculate",
            "args": [
                {
                    "type": "uint64[][]",
                    "name": "nested_list"
                },
                {
                    "type": "uint64",
                    "name": "threshold"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        44,
                        62,
                        74
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        101
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        47,
                        65,
                        77
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        284,
                        336,
                        387
                    ],
                    "errorMessage": "index access is out of bounds"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQAIAjEbQQBRggMErsJQ7wS9SyI/BIR/d182GgCOAwAfABMAAQAxGRREMRhENhoBNhoCiADAIkMxGRREMRhEiAB9IkMxGRREMRhEiAAbFoAEFR98dUxQsCJDMRlA/8YxGBREIkMjiSOJigABgABHAiOI//OMAiOMAIsAiwIMQQAziP/hiwOMAUEAHIj/14sDjAFBABKI/82LA4wBQQAIiP/DiwMIjAGLAYwDiwAiCIwAQv/FiP+uQf+3iwOMAImKAACAACOI/52LAYwAQQAciP+TiwGMAEEAEoj/iYsBjABBAAiI/3+LAQiMAIsAjAGI/3NB/9CJigIAI0cCgABHBSNJi/4jWSOLDIsLDEmMBEEAqIv+VwIAiwREiwwlC0sBTFlKWSQLJQhYSYwBI1lJjAMiCYwGI4wFiwWLAwxBAHGLAVcCAEmMAIsFJAskWEmMAov/p4sKjAeLCYwIQQBBiwWLBgyLCowHiwmMCEEALosJIghJjAmLBSIIJAuLAEwkWIsCpYsKjAdMjAhBAAyLCSULiwoiCIwHjAhCAABCAACLB4wKiwiMCYsFIgiMBUL/h4sMIgiMDEL/TYk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}