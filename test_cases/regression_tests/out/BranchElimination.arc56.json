{
    "name": "BranchElimination",
    "structs": {},
    "methods": [
        {
            "name": "umm",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "umm2",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculate",
            "args": [
                {
                    "type": "uint64[][]",
                    "name": "nested_list"
                },
                {
                    "type": "uint64",
                    "name": "threshold"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        15
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        55
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        285,
                        339,
                        373
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        213
                    ],
                    "errorMessage": "invalid array encoding"
                },
                {
                    "pc": [
                        183,
                        230,
                        307
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        252
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.dynamic_array<arc4.uint64>>"
                },
                {
                    "pc": [
                        262
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        221
                    ],
                    "errorMessage": "invalid tail pointer for (len+(len+uint64[])[])"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAECCDEbQQAkMRkURDEYRIIDBK7CUO8EvUsiPwSEf3dfNhoAjgMADwBZAHwAMRkUMRgUEEQjQyKJIomAAEkiiP/3RQIiRQNLAksCDEEAI4j/5UEAFIj/30EADoj/2UEACIj/00sBCEUBSwIjCEUDQv/ViP/CQf/HSRaABBUffHVMULAjQyKI/65BABSI/6hBAA6I/6JBAAiI/5xLAQhFAYj/lEH/4CNDIkcDgABHBjYaAUkiWUlOAiQLTEkVTFcCACJJSwUMQQApRwIkC0sDSU8CWUlLB0lOBBJESlklCyQIWCJZJQskCAhFBSMIRQFC/9BLAyQISwMSRDYaAklFDxUlEkQiRQYiRQciRQpLCUsFDElFDEEAf0sKREsJJAtLAklPAllKWSULJAhYSUUQIllJRQ0jCUUIIkUJSwhLDAxBAEtLDlcCAElFEUsJJQslWElFDksOp0EAK0sISwgMQQAjSwUjCEUGSwgjCCULSxBMJVhLDaVBAAxLBSQLRQZLBiMIRQdLCCMIRQlC/61LCSMIRQpC/3YjQw==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}