{
  "version": 3,
  "sources": [
    "../issue_118.py"
  ],
  "mappings": ";;;;;;;;;;;;;AAIA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;AAEK;;AAAA;AAAA;AAAA;;AAAA;AAFL;;;AAEK;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAFL;;AAAA;;;;;;;;;AAEA;;;AAEe;;;AAAA;AACE;;AADF;AAGJ;;AAAA;AAAA;AAAiB;;AAAjB;AAAX;;;AACmB;AAAA;AAAa;AAAb;AAAP;AACG;AAAA;AAAa;AAAb;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x0003 0x0000"
    },
    "13": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "15": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "18": {
      "op": "pushbytes 0xbc66eb62 // method \"verify(uint256[])(bool,string)\"",
      "defined_out": [
        "Method(verify(uint256[])(bool,string))"
      ],
      "stack_out": [
        "Method(verify(uint256[])(bool,string))"
      ]
    },
    "24": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(verify(uint256[])(bool,string))",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(verify(uint256[])(bool,string))",
        "tmp%2#0"
      ]
    },
    "27": {
      "op": "match main_verify_route@3",
      "stack_out": []
    },
    "31": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "32": {
      "op": "return",
      "stack_out": []
    },
    "33": {
      "block": "main_verify_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "35": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "36": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "37": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "39": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "40": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint256[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint256[])%0#0"
      ]
    },
    "43": {
      "callsub": "test_cases.regression_tests.issue_118.Issue118.verify",
      "op": "callsub verify",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "46": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x151f7c75"
      ]
    },
    "52": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%7#0"
      ]
    },
    "53": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "54": {
      "op": "log",
      "stack_out": []
    },
    "55": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "56": {
      "op": "return",
      "stack_out": []
    },
    "57": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "59": {
      "op": "bnz main_after_if_else@10",
      "stack_out": []
    },
    "62": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "64": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "65": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "66": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "67": {
      "op": "return",
      "stack_out": []
    },
    "68": {
      "subroutine": "test_cases.regression_tests.issue_118.Issue118.verify",
      "params": {
        "values#0": "bytes"
      },
      "block": "verify",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "71": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "74": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00"
      ],
      "stack_out": [
        "0x00",
        "0"
      ]
    },
    "75": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "0",
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "0x00",
        "0",
        "tmp%0#0"
      ]
    },
    "77": {
      "op": "setbit",
      "defined_out": [
        "val1#0"
      ],
      "stack_out": [
        "val1#0"
      ]
    },
    "78": {
      "op": "frame_dig -1",
      "defined_out": [
        "val1#0",
        "values#0 (copy)"
      ],
      "stack_out": [
        "val1#0",
        "values#0 (copy)"
      ]
    },
    "80": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val1#0",
        "values#0 (copy)",
        "0"
      ]
    },
    "81": {
      "op": "extract_uint16",
      "defined_out": [
        "array%array_length%0#1",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "array%array_length%0#1"
      ]
    },
    "82": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "array%array_length%0#1",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "array%array_length%0#1",
        "2"
      ]
    },
    "84": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "tmp%2#0"
      ]
    },
    "85": {
      "op": "bz verify_after_if_else@2",
      "stack_out": [
        "val1#0"
      ]
    },
    "88": {
      "op": "bytec_0 // 0x0003",
      "defined_out": [
        "0x0003",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "0x0003"
      ]
    },
    "89": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0"
      ],
      "stack_out": [
        "encoded%1#0"
      ]
    },
    "90": {
      "op": "bytec_1 // 0x0000",
      "defined_out": [
        "0x0000",
        "encoded%1#0"
      ],
      "stack_out": [
        "encoded%1#0",
        "0x0000"
      ]
    },
    "91": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0"
      ],
      "stack_out": [
        "encoded%2#0"
      ]
    },
    "92": {
      "retsub": true,
      "op": "retsub"
    },
    "93": {
      "block": "verify_after_if_else@2",
      "stack_in": [
        "val1#0"
      ],
      "op": "bytec_0 // 0x0003",
      "defined_out": [
        "0x0003",
        "val1#0"
      ],
      "stack_out": [
        "val1#0",
        "0x0003"
      ]
    },
    "94": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0"
      ],
      "stack_out": [
        "encoded%4#0"
      ]
    },
    "95": {
      "op": "bytec_1 // 0x0000",
      "defined_out": [
        "0x0000",
        "encoded%4#0"
      ],
      "stack_out": [
        "encoded%4#0",
        "0x0000"
      ]
    },
    "96": {
      "op": "concat",
      "defined_out": [
        "encoded%5#0"
      ],
      "stack_out": [
        "encoded%5#0"
      ]
    },
    "97": {
      "retsub": true,
      "op": "retsub"
    }
  }
}