{
  "version": 3,
  "sources": [
    "../branch_to_proto.py"
  ],
  "mappings": ";;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AACK;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGU;;AAAA;;AAAA;;AAAA;;AAHV;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 2"
    },
    "5": {
      "op": "bytecblock 0x068101"
    },
    "11": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "13": {
      "op": "bz main___algopy_default_create@5",
      "stack_out": []
    },
    "16": {
      "op": "pushbytes 0x6e50bd99 // method \"verify(byte[],byte[],byte[])(byte[],bool)\"",
      "defined_out": [
        "Method(verify(byte[],byte[],byte[])(byte[],bool))"
      ],
      "stack_out": [
        "Method(verify(byte[],byte[],byte[])(byte[],bool))"
      ]
    },
    "22": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(verify(byte[],byte[],byte[])(byte[],bool))",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(verify(byte[],byte[],byte[])(byte[],bool))",
        "tmp%2#0"
      ]
    },
    "25": {
      "op": "match main_verify_route@3",
      "stack_out": []
    },
    "29": {
      "op": "err"
    },
    "30": {
      "block": "main_verify_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "32": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "33": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "35": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "36": {
      "error": "OnCompletion must be NoOp && can only call when not creating",
      "op": "assert // OnCompletion must be NoOp && can only call when not creating",
      "stack_out": []
    },
    "37": {
      "op": "b verify"
    },
    "40": {
      "block": "main___algopy_default_create@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "42": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "43": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "45": {
      "op": "!",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "46": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "47": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "48": {
      "subroutine": "test_cases.regression_tests.branch_to_proto.VRFVerifier.verify[routing]",
      "params": {},
      "block": "verify",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "51": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "52": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "53": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "54": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "55": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "56": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "58": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "59": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "60": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "61": {
      "op": "extract 2 0",
      "defined_out": [
        "message#0"
      ],
      "stack_out": [
        "message#0"
      ]
    },
    "64": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "message#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "message#0",
        "tmp%2#0"
      ]
    },
    "67": {
      "op": "dup",
      "defined_out": [
        "message#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "message#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "68": {
      "op": "intc_0 // 0",
      "stack_out": [
        "message#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "69": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#0",
        "message#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "message#0",
        "tmp%2#0",
        "aggregate%array_length%1#0"
      ]
    },
    "70": {
      "op": "intc_1 // 2",
      "stack_out": [
        "message#0",
        "tmp%2#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "71": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "message#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "message#0",
        "tmp%2#0",
        "add%1#0"
      ]
    },
    "72": {
      "op": "dig 1",
      "stack_out": [
        "message#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "74": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%1#0",
        "message#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "message#0",
        "tmp%2#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "75": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "message#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "message#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "76": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "message#0",
        "tmp%2#0"
      ]
    },
    "77": {
      "op": "extract 2 0",
      "defined_out": [
        "message#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0"
      ]
    },
    "80": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "message#0",
        "proof#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "tmp%4#0"
      ]
    },
    "83": {
      "op": "dup",
      "defined_out": [
        "message#0",
        "proof#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "84": {
      "op": "intc_0 // 0",
      "stack_out": [
        "message#0",
        "proof#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "0"
      ]
    },
    "85": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%2#0",
        "message#0",
        "proof#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "tmp%4#0",
        "aggregate%array_length%2#0"
      ]
    },
    "86": {
      "op": "intc_1 // 2",
      "stack_out": [
        "message#0",
        "proof#0",
        "tmp%4#0",
        "aggregate%array_length%2#0",
        "2"
      ]
    },
    "87": {
      "op": "+",
      "defined_out": [
        "add%2#0",
        "message#0",
        "proof#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "tmp%4#0",
        "add%2#0"
      ]
    },
    "88": {
      "op": "dig 1",
      "stack_out": [
        "message#0",
        "proof#0",
        "tmp%4#0",
        "add%2#0",
        "tmp%4#0 (copy)"
      ]
    },
    "90": {
      "op": "len",
      "defined_out": [
        "add%2#0",
        "len%2#0",
        "message#0",
        "proof#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "tmp%4#0",
        "add%2#0",
        "len%2#0"
      ]
    },
    "91": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "message#0",
        "proof#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "tmp%4#0",
        "eq%2#0"
      ]
    },
    "92": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "message#0",
        "proof#0",
        "tmp%4#0"
      ]
    },
    "93": {
      "op": "extract 2 0",
      "defined_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0"
      ]
    },
    "96": {
      "block": "verify_while_top@2",
      "stack_in": [
        "message#0",
        "proof#0",
        "pk#0"
      ],
      "op": "pushint 10010 // 10010",
      "defined_out": [
        "10010"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "10010"
      ]
    },
    "99": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "10010",
        "tmp%1#2"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "10010",
        "tmp%1#2"
      ]
    },
    "101": {
      "op": ">",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%2#1"
      ]
    },
    "102": {
      "op": "bz verify_after_while@7",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0"
      ]
    },
    "105": {
      "op": "itxn_begin"
    },
    "106": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "appl"
      ]
    },
    "108": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0"
      ]
    },
    "110": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "DeleteApplication"
      ]
    },
    "112": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0"
      ]
    },
    "114": {
      "op": "bytec_0 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "0x068101"
      ]
    },
    "115": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0"
      ]
    },
    "117": {
      "op": "bytec_0 // 0x068101",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "0x068101"
      ]
    },
    "118": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0"
      ]
    },
    "120": {
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%3#0"
      ]
    },
    "122": {
      "op": "itxn_field Fee",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0"
      ]
    },
    "124": {
      "op": "itxn_submit"
    },
    "125": {
      "op": "b verify_while_top@2"
    },
    "128": {
      "block": "verify_after_while@7",
      "stack_in": [
        "message#0",
        "proof#0",
        "pk#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "message#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "message#0"
      ]
    },
    "130": {
      "op": "dig 2",
      "defined_out": [
        "message#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "message#0",
        "proof#0"
      ]
    },
    "132": {
      "op": "dig 2",
      "defined_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "message#0",
        "proof#0",
        "pk#0"
      ]
    },
    "134": {
      "op": "vrf_verify VrfAlgorand",
      "defined_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%0#0",
        "tmp%1#1"
      ]
    },
    "136": {
      "op": "dig 1",
      "defined_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%0#0",
        "tmp%1#1",
        "tmp%0#0 (copy)"
      ]
    },
    "138": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%0#0",
        "tmp%1#1",
        "aggregate%length%0#0"
      ]
    },
    "139": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%0#0",
        "tmp%1#1",
        "aggregate%as_bytes%0#0"
      ]
    },
    "140": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%0#0",
        "tmp%1#1",
        "aggregate%length_uint16%0#0"
      ]
    },
    "143": {
      "op": "uncover 2",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%1#1",
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "145": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%1#1",
        "aggregate%encoded_value%0#0"
      ]
    },
    "146": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "aggregate%encoded_value%0#0",
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%1#1",
        "aggregate%encoded_value%0#0",
        "0x00"
      ]
    },
    "149": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "aggregate%encoded_value%0#0",
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%1#1",
        "aggregate%encoded_value%0#0",
        "0x00",
        "0"
      ]
    },
    "150": {
      "op": "uncover 3",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "aggregate%encoded_value%0#0",
        "0x00",
        "0",
        "tmp%1#1"
      ]
    },
    "152": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "aggregate%encoded_value%0#0",
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "153": {
      "op": "pushbytes 0x0003",
      "defined_out": [
        "0x0003",
        "aggregate%encoded_bool%0#0",
        "aggregate%encoded_value%0#0",
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_bool%0#0",
        "0x0003"
      ]
    },
    "157": {
      "op": "swap",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "aggregate%encoded_value%0#0",
        "0x0003",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "158": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0"
      ]
    },
    "159": {
      "op": "swap",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "160": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "aggregate%concat%0#0"
      ]
    },
    "161": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%0#0",
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "aggregate%concat%0#0",
        "0x151f7c75"
      ]
    },
    "167": {
      "op": "swap",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "0x151f7c75",
        "aggregate%concat%0#0"
      ]
    },
    "168": {
      "op": "concat",
      "defined_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%9#0"
      ]
    },
    "169": {
      "op": "log",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0"
      ]
    },
    "170": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1",
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "1"
      ]
    },
    "172": {
      "op": "return",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0"
      ]
    }
  }
}