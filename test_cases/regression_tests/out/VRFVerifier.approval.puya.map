{
  "version": 3,
  "sources": [
    "../branch_to_proto.py"
  ],
  "mappings": ";;;;;;;AAGA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AACK;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGU;;AAAA;;AAAA;;AAAA;;AAHV;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "bytecblock 0x068101"
    },
    "7": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "9": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "10": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "12": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "14": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "15": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "16": {
      "op": "switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED",
      "stack_out": []
    },
    "42": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "43": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "45": {
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "46": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "op": "return // on error: this contract does not implement the given ABI method for create NoOp",
      "defined_out": [],
      "stack_out": []
    },
    "47": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "pushbytes 0x6e50bd99 // method \"verify(byte[],byte[],byte[])(byte[],bool)\"",
      "defined_out": [
        "Method(verify(byte[],byte[],byte[])(byte[],bool))"
      ],
      "stack_out": [
        "Method(verify(byte[],byte[],byte[])(byte[],bool))"
      ]
    },
    "53": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(verify(byte[],byte[],byte[])(byte[],bool))",
        "tmp%5#0"
      ],
      "stack_out": [
        "Method(verify(byte[],byte[],byte[])(byte[],bool))",
        "tmp%5#0"
      ]
    },
    "56": {
      "op": "match verify",
      "stack_out": []
    },
    "60": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "61": {
      "subroutine": "test_cases.regression_tests.branch_to_proto.VRFVerifier.verify[routing]",
      "params": {},
      "block": "verify",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "64": {
      "op": "extract 2 0",
      "defined_out": [
        "message#0"
      ],
      "stack_out": [
        "message#0"
      ]
    },
    "67": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "message#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "message#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "70": {
      "op": "extract 2 0",
      "defined_out": [
        "message#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0"
      ]
    },
    "73": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "message#0",
        "proof#0",
        "reinterpret_Encoded(len+uint8[])%2#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "reinterpret_Encoded(len+uint8[])%2#0"
      ]
    },
    "76": {
      "op": "extract 2 0",
      "defined_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0"
      ]
    },
    "79": {
      "block": "verify_while_top@2",
      "stack_in": [
        "message#0",
        "proof#0",
        "pk#0"
      ],
      "op": "pushint 10010 // 10010",
      "defined_out": [
        "10010"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "10010"
      ]
    },
    "82": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "10010",
        "tmp%1#2"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "10010",
        "tmp%1#2"
      ]
    },
    "84": {
      "op": ">",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%2#0"
      ]
    },
    "85": {
      "op": "bz verify_after_while@7",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0"
      ]
    },
    "88": {
      "op": "itxn_begin"
    },
    "89": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "appl"
      ]
    },
    "91": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0"
      ]
    },
    "93": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "DeleteApplication"
      ]
    },
    "95": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0"
      ]
    },
    "97": {
      "op": "bytec_0 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "0x068101"
      ]
    },
    "98": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0"
      ]
    },
    "100": {
      "op": "bytec_0 // 0x068101",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "0x068101"
      ]
    },
    "101": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0"
      ]
    },
    "103": {
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%3#0"
      ]
    },
    "105": {
      "op": "itxn_field Fee",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0"
      ]
    },
    "107": {
      "op": "itxn_submit"
    },
    "108": {
      "op": "b verify_while_top@2"
    },
    "111": {
      "block": "verify_after_while@7",
      "stack_in": [
        "message#0",
        "proof#0",
        "pk#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "message#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "message#0"
      ]
    },
    "113": {
      "op": "dig 2",
      "defined_out": [
        "message#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "message#0",
        "proof#0"
      ]
    },
    "115": {
      "op": "dig 2",
      "defined_out": [
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "message#0",
        "proof#0",
        "pk#0"
      ]
    },
    "117": {
      "op": "vrf_verify VrfAlgorand",
      "defined_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "119": {
      "op": "dig 1",
      "defined_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#1",
        "tmp%0#1 (copy)",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#1 (copy)"
      ]
    },
    "121": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%0#1",
        "tmp%1#1",
        "aggregate%length%0#0"
      ]
    },
    "122": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%0#1",
        "tmp%1#1",
        "aggregate%as_bytes%0#0"
      ]
    },
    "123": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%0#1",
        "tmp%1#1",
        "aggregate%length_uint16%0#0"
      ]
    },
    "126": {
      "op": "uncover 2",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%1#1",
        "aggregate%length_uint16%0#0",
        "tmp%0#1"
      ]
    },
    "128": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%1#1",
        "aggregate%encoded_value%0#0"
      ]
    },
    "129": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "aggregate%encoded_value%0#0",
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%1#1",
        "aggregate%encoded_value%0#0",
        "0x00"
      ]
    },
    "132": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "aggregate%encoded_value%0#0",
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%1#1",
        "aggregate%encoded_value%0#0",
        "0x00",
        "0"
      ]
    },
    "134": {
      "op": "uncover 3",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "aggregate%encoded_value%0#0",
        "0x00",
        "0",
        "tmp%1#1"
      ]
    },
    "136": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "aggregate%encoded_value%0#0",
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "137": {
      "op": "pushbytes 0x0003",
      "defined_out": [
        "0x0003",
        "aggregate%encoded_bool%0#0",
        "aggregate%encoded_value%0#0",
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_bool%0#0",
        "0x0003"
      ]
    },
    "141": {
      "op": "swap",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "aggregate%encoded_value%0#0",
        "0x0003",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "142": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0"
      ]
    },
    "143": {
      "op": "swap",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "144": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "aggregate%concat%0#0"
      ]
    },
    "145": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%0#0",
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "aggregate%concat%0#0",
        "0x151f7c75"
      ]
    },
    "151": {
      "op": "swap",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "0x151f7c75",
        "aggregate%concat%0#0"
      ]
    },
    "152": {
      "op": "concat",
      "defined_out": [
        "message#0",
        "pk#0",
        "proof#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "tmp%6#0"
      ]
    },
    "153": {
      "op": "log",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0"
      ]
    },
    "154": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1",
        "message#0",
        "pk#0",
        "proof#0"
      ],
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0",
        "1"
      ]
    },
    "156": {
      "op": "return",
      "stack_out": [
        "message#0",
        "proof#0",
        "pk#0"
      ]
    }
  }
}