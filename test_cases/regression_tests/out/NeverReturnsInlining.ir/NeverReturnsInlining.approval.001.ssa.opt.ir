main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        let eq%tmp%2#0: bool = (== tmp%2#0 method "method()uint64")
        (assert eq%tmp%2#0)
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%5#0) // can only call when not creating
        test_cases.regression_tests.never_returns.NeverReturnsInlining.method[routing]()
        fail
    block@6: // bare_routing_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        let not%tmp%7#0: bool = (! tmp%7#0)
        (assert not%tmp%7#0)
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        test_cases.regression_tests.never_returns.NeverReturnsInlining.__algopy_default_create()
        exit 1u

subroutine test_cases.regression_tests.never_returns.invoke() -> uint64:
    block@0: // L11
        fail

subroutine test_cases.regression_tests.never_returns.NeverReturnsInlining.method[routing]() -> void:
    block@0: // L5
        let result#0: uint64 = test_cases.regression_tests.never_returns.invoke()
        let tmp%1#0: Encoded(uint64) = bytes_encode<uint64>(result#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.regression_tests.never_returns.NeverReturnsInlining.__algopy_default_create() -> void:
    block@0: // L1
        return 