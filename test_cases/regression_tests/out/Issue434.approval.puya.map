{
  "version": 3,
  "sources": [
    "../issue_434.py"
  ],
  "mappings": ";;;;;AAGA;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;AAEK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAFL;;AAAA;AAAA;;;;;;;AAEK;;;AAAA;AAES;;AAAyB;;;AAAzB;AAAd;;;AAC+B;;AAAZ;AAAiC;;AAAjC;AAAP;;;;AAEZ;AAAA;;;AACgB;AAAI;AAAJ;AAIG;AAAJ;AAAA;;AAAA;AAAP;AAVH;AAAA;AAQW;AAAI;AAAJ;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 2 1"
    },
    "5": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "10": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "13": {
      "op": "pushbytes 0xd3ad7a55 // method \"method(uint64)void\"",
      "defined_out": [
        "Method(method(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(method(uint64)void)"
      ]
    },
    "19": {
      "op": "==",
      "defined_out": [
        "eq%tmp%2#0"
      ],
      "stack_out": [
        "eq%tmp%2#0"
      ]
    },
    "20": {
      "op": "assert",
      "stack_out": []
    },
    "21": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "23": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "24": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "25": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "27": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "28": {
      "op": "b method"
    },
    "31": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "33": {
      "op": "!",
      "defined_out": [
        "not%tmp%7#0"
      ],
      "stack_out": [
        "not%tmp%7#0"
      ]
    },
    "34": {
      "op": "assert",
      "stack_out": []
    },
    "35": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "37": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "38": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "39": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "40": {
      "op": "return",
      "stack_out": []
    },
    "41": {
      "subroutine": "test_cases.regression_tests.issue_434.Issue434.method[routing]",
      "params": {},
      "block": "method",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "44": {
      "op": "btoi",
      "defined_out": [
        "c#0"
      ],
      "stack_out": [
        "c#0"
      ]
    },
    "45": {
      "block": "method_while_top@2",
      "stack_in": [
        "c#0"
      ],
      "op": "global OpcodeBudget",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "c#0",
        "tmp%0#1"
      ]
    },
    "47": {
      "op": "pushint 350 // 350",
      "defined_out": [
        "350",
        "tmp%0#1"
      ],
      "stack_out": [
        "c#0",
        "tmp%0#1",
        "350"
      ]
    },
    "50": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "c#0",
        "tmp%1#0"
      ]
    },
    "51": {
      "op": "bz method_after_while@4",
      "stack_out": [
        "c#0"
      ]
    },
    "54": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "c#0",
        "tmp%2#0"
      ]
    },
    "56": {
      "op": "sha3_256",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "c#0",
        "tmp%3#0"
      ]
    },
    "57": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "c#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "59": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "c#0",
        "tmp%5#0"
      ]
    },
    "60": {
      "op": "assert",
      "stack_out": [
        "c#0"
      ]
    },
    "61": {
      "op": "b method_while_top@2"
    },
    "64": {
      "block": "method_after_while@4",
      "stack_in": [
        "c#0"
      ],
      "op": "dup",
      "defined_out": [
        "c#0"
      ],
      "stack_out": [
        "c#0",
        "c#0"
      ]
    },
    "65": {
      "op": "bz method_else_body@6",
      "stack_out": [
        "c#0"
      ]
    },
    "68": {
      "op": "dup",
      "stack_out": [
        "c#0",
        "c#0"
      ]
    },
    "69": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "c#0"
      ],
      "stack_out": [
        "c#0",
        "c#0",
        "2"
      ]
    },
    "70": {
      "op": "+",
      "defined_out": [
        "c#0",
        "x#0"
      ],
      "stack_out": [
        "c#0",
        "x#0"
      ]
    },
    "71": {
      "block": "method_after_if_else@7",
      "stack_in": [
        "c#0",
        "x#0"
      ],
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "x#0"
      ],
      "stack_out": [
        "c#0",
        "x#0",
        "2"
      ]
    },
    "72": {
      "op": "-",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "c#0",
        "tmp%9#0"
      ]
    },
    "73": {
      "op": "dig 1",
      "defined_out": [
        "c#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "c#0",
        "tmp%9#0",
        "c#0"
      ]
    },
    "75": {
      "op": "==",
      "defined_out": [
        "c#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "c#0",
        "tmp%10#0"
      ]
    },
    "76": {
      "op": "assert",
      "stack_out": [
        "c#0"
      ]
    },
    "77": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "c#0"
      ],
      "stack_out": [
        "c#0",
        "1"
      ]
    },
    "78": {
      "op": "return",
      "stack_out": [
        "c#0"
      ]
    },
    "79": {
      "block": "method_else_body@6",
      "stack_in": [
        "c#0"
      ],
      "op": "dup",
      "defined_out": [
        "c#0"
      ],
      "stack_out": [
        "c#0",
        "c#0"
      ]
    },
    "80": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "c#0"
      ],
      "stack_out": [
        "c#0",
        "c#0",
        "2"
      ]
    },
    "81": {
      "op": "+",
      "defined_out": [
        "c#0",
        "x#0"
      ],
      "stack_out": [
        "c#0",
        "x#0"
      ]
    },
    "82": {
      "op": "b method_after_if_else@7"
    }
  }
}