{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUoB;AAAZ;;;AAAA;;;AAAA;;;AAAiC;AAAZ;;;AAArB;;;AAAA;;;;;;AAEI;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAA2B;AAAA;AAAA;AAAA;AAAJ;;;AAAA;;;;;;;;;AAD3B;;AAAA;;;AAKY;AAAZ;;;AAAA;;;AAAA;;;AAAkC;AAAZ;;;AAAtB;;;AAAA;;;;;;AAEI;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAuB;AAAA;AAAA;AAAA;AAAvB;;;AAAA;;;;;;;;;AADJ;;AAAA;;;AAKY;AAAZ;;;AAAA;;;AAAA;;;AAAmC;AAAZ;;;AAAvB;;;AAAA;;;;;;AAEI;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAA2B;AAAA;AAAA;AAAA;AAAJ;;;AAAA;;;;;;;;;AAD3B;;AAAA;;;AAKY;AAAZ;;;AAAA;;;AAAA;;;AAAkC;AAAZ;;;AAAtB;;;AAAA;;;;;;AAEI;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAuB;AAAA;AAAA;AAAA;AAAvB;;;AAAA;;;;;;;;;AADJ;;AAAA;;;AAKa;AAAZ;;;AAAA;;AAA+B;AAAZ;;;AAAA;;AAEhB;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAuB;AAAA;AAAA;AAAA;AAAvB;;;AAAA;;;;;;;;;AADJ;;AAAA;;;AAKiC;AAAZ;;;AAArB;;;AAAA;;;AAAY;AAAZ;;;AAAA;;;;;AAEI;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAA2B;AAAA;AAAA;AAAA;AAAJ;;;AAAA;;;;;;;;;AAD3B;;AAAA;;;AAKiC;AAAZ;;;AAArB;;;AAAA;;;AAAY;AAAZ;;;AAAA;;;;;AAEQ;AAAA;AAAA;AAAA;AAAJ;;;AAAA;;;AAA2B;AAAA;AAAA;AAAA;AAA3B;;;AAAA;;;;;;;;;AADJ;;AAAA;;;AAIO;AAAP;;;;;;;AALyD;AAAZ;;;AAAA;;;;;;;;;;;AANW;AAAZ;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAnC5C;AAAqB;AAArB;AACA;AAAqB;AAArB;;AAkDR;;;;;;AAEQ;;AAAA;AACA;AAAqB;AAArB;AACA;AAAqB;AAArB;;AAER;;;;;;AAEQ;AAAqB;AAArB;AACA;;AAAA;AAER;;;;;;AAEQ;AAAqB;AAArB;AACA;;AAAA;AAER;;;;;;AAEQ;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"\" \"did_execute_a\" \"did_execute_b\""
    },
    "36": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "37": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0"
      ]
    },
    "38": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0"
      ]
    },
    "39": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0"
      ]
    },
    "40": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0"
      ]
    },
    "41": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0"
      ]
    },
    "42": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0"
      ]
    },
    "43": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0"
      ]
    },
    "44": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0"
      ]
    },
    "45": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0"
      ]
    },
    "46": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "47": {
      "op": "b main_block@0"
    },
    "50": {
      "block": "main_block@0",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%0#0"
      ]
    },
    "52": {
      "op": "bnz main_after_if_else@2",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "55": {
      "op": "b main_call___init__@1"
    },
    "58": {
      "block": "main_call___init__@1",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__",
      "op": "callsub __init__"
    },
    "61": {
      "op": "b main_after_if_else@2"
    },
    "64": {
      "block": "main_after_if_else@2",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "65": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a",
      "op": "callsub func_a",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%1#0"
      ]
    },
    "68": {
      "op": "bnz main_bool_true@4",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "71": {
      "op": "b main_or_contd@3"
    },
    "74": {
      "block": "main_or_contd@3",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "75": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b",
      "op": "callsub func_b",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%2#0"
      ]
    },
    "78": {
      "op": "bz main_bool_false@5",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "81": {
      "op": "b main_bool_true@4"
    },
    "84": {
      "block": "main_bool_true@4",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "b main_bool_merge@6"
    },
    "87": {
      "block": "main_bool_merge@6",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "88": {
      "op": "bytec_1 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\"",
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0",
        "\"did_execute_a\""
      ]
    },
    "89": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "90": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%0#0"
      ]
    },
    "91": {
      "op": "bz main_bool_false@9",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "94": {
      "op": "b main_and_contd@7"
    },
    "97": {
      "block": "main_and_contd@7",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "98": {
      "op": "bytec_2 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0",
        "\"did_execute_b\""
      ]
    },
    "99": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "100": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%1#0"
      ]
    },
    "101": {
      "op": "bnz main_bool_false@9",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "104": {
      "op": "b main_bool_true@8"
    },
    "107": {
      "block": "main_bool_true@8",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "108": {
      "op": "bury 11",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "110": {
      "op": "b main_bool_merge@10"
    },
    "113": {
      "block": "main_bool_merge@10",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "dig 10",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "and_result%0#0"
      ]
    },
    "115": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset",
      "op": "callsub assert_and_reset",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "118": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "119": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a",
      "op": "callsub func_a",
      "defined_out": [
        "and_result%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%3#0"
      ]
    },
    "122": {
      "op": "bnz main_bool_true@12",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "125": {
      "op": "b main_or_contd@11"
    },
    "128": {
      "block": "main_or_contd@11",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "129": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b",
      "op": "callsub func_b",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%4#0"
      ]
    },
    "132": {
      "op": "bz main_bool_false@13",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "135": {
      "op": "b main_bool_true@12"
    },
    "138": {
      "block": "main_bool_true@12",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "b main_bool_merge@14"
    },
    "141": {
      "block": "main_bool_merge@14",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "142": {
      "op": "bytec_1 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\"",
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0",
        "\"did_execute_a\""
      ]
    },
    "143": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "144": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%2#0"
      ]
    },
    "145": {
      "op": "bz main_bool_false@17",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "148": {
      "op": "b main_and_contd@15"
    },
    "151": {
      "block": "main_and_contd@15",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "152": {
      "op": "bytec_2 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0",
        "\"did_execute_b\""
      ]
    },
    "153": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "154": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%3#0"
      ]
    },
    "155": {
      "op": "bz main_bool_false@17",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "158": {
      "op": "b main_bool_true@16"
    },
    "161": {
      "block": "main_bool_true@16",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "162": {
      "op": "bury 10",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "164": {
      "op": "b main_bool_merge@18"
    },
    "167": {
      "block": "main_bool_merge@18",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "dig 9",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "and_result%1#0"
      ]
    },
    "169": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset",
      "op": "callsub assert_and_reset",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "172": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "173": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a",
      "op": "callsub func_a",
      "defined_out": [
        "and_result%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%5#0"
      ]
    },
    "176": {
      "op": "bz main_bool_false@21",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "179": {
      "op": "b main_and_contd@19"
    },
    "182": {
      "block": "main_and_contd@19",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "183": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b",
      "op": "callsub func_b",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%6#0"
      ]
    },
    "186": {
      "op": "bz main_bool_false@21",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "189": {
      "op": "b main_bool_true@20"
    },
    "192": {
      "block": "main_bool_true@20",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "b main_bool_merge@22"
    },
    "195": {
      "block": "main_bool_merge@22",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "196": {
      "op": "bytec_1 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\"",
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0",
        "\"did_execute_a\""
      ]
    },
    "197": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "198": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%4#0"
      ]
    },
    "199": {
      "op": "bz main_bool_false@25",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "202": {
      "op": "b main_and_contd@23"
    },
    "205": {
      "block": "main_and_contd@23",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "206": {
      "op": "bytec_2 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0",
        "\"did_execute_b\""
      ]
    },
    "207": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "208": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%5#0"
      ]
    },
    "209": {
      "op": "bnz main_bool_false@25",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "212": {
      "op": "b main_bool_true@24"
    },
    "215": {
      "block": "main_bool_true@24",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "216": {
      "op": "bury 9",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "218": {
      "op": "b main_bool_merge@26"
    },
    "221": {
      "block": "main_bool_merge@26",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "dig 8",
      "defined_out": [
        "and_result%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "and_result%3#0"
      ]
    },
    "223": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset",
      "op": "callsub assert_and_reset",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "226": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "and_result%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "227": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a",
      "op": "callsub func_a",
      "defined_out": [
        "and_result%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%7#0"
      ]
    },
    "230": {
      "op": "bz main_bool_false@29",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "233": {
      "op": "b main_and_contd@27"
    },
    "236": {
      "block": "main_and_contd@27",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "237": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b",
      "op": "callsub func_b",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0"
      ]
    },
    "240": {
      "op": "bz main_bool_false@29",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "243": {
      "op": "b main_bool_true@28"
    },
    "246": {
      "block": "main_bool_true@28",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "b main_bool_merge@30"
    },
    "249": {
      "block": "main_bool_merge@30",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "250": {
      "op": "bytec_1 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\"",
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0",
        "\"did_execute_a\""
      ]
    },
    "251": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "252": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%6#0"
      ]
    },
    "253": {
      "op": "bz main_bool_false@33",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "256": {
      "op": "b main_and_contd@31"
    },
    "259": {
      "block": "main_and_contd@31",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "260": {
      "op": "bytec_2 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0",
        "\"did_execute_b\""
      ]
    },
    "261": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "262": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%7#0"
      ]
    },
    "263": {
      "op": "bz main_bool_false@33",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "266": {
      "op": "b main_bool_true@32"
    },
    "269": {
      "block": "main_bool_true@32",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "270": {
      "op": "bury 8",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "272": {
      "op": "b main_bool_merge@34"
    },
    "275": {
      "block": "main_bool_merge@34",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "dig 7",
      "defined_out": [
        "and_result%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "and_result%5#0"
      ]
    },
    "277": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset",
      "op": "callsub assert_and_reset",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "280": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "and_result%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "281": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a",
      "op": "callsub func_a",
      "defined_out": [
        "and_result%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "284": {
      "op": "bury 1",
      "defined_out": [
        "and_result%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "286": {
      "op": "intc_1 // 1",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "287": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b",
      "op": "callsub func_b",
      "defined_out": [
        "and_result%5#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "290": {
      "op": "bury 2",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "292": {
      "op": "intc_0 // 0",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "293": {
      "op": "bytec_1 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\"",
        "0",
        "and_result%5#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0",
        "\"did_execute_a\""
      ]
    },
    "294": {
      "op": "app_global_get_ex",
      "defined_out": [
        "and_result%5#0",
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "295": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%8#0"
      ]
    },
    "296": {
      "op": "bz main_bool_false@37",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "299": {
      "op": "b main_and_contd@35"
    },
    "302": {
      "block": "main_and_contd@35",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "303": {
      "op": "bytec_2 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0",
        "\"did_execute_b\""
      ]
    },
    "304": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "305": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%9#0"
      ]
    },
    "306": {
      "op": "bz main_bool_false@37",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "309": {
      "op": "b main_bool_true@36"
    },
    "312": {
      "block": "main_bool_true@36",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "313": {
      "op": "bury 7",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "315": {
      "op": "b main_bool_merge@38"
    },
    "318": {
      "block": "main_bool_merge@38",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "dig 6",
      "defined_out": [
        "and_result%6#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "and_result%6#0"
      ]
    },
    "320": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset",
      "op": "callsub assert_and_reset",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "323": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "and_result%6#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "324": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c",
      "op": "callsub func_c",
      "defined_out": [
        "and_result%6#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "327": {
      "op": "bz main_ternary_false@40",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "330": {
      "op": "b main_ternary_true@39"
    },
    "333": {
      "block": "main_ternary_true@39",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "334": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a",
      "op": "callsub func_a",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "ternary_result%0#0"
      ]
    },
    "337": {
      "op": "bury 4",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "339": {
      "op": "b main_ternary_merge@41"
    },
    "342": {
      "block": "main_ternary_merge@41",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "343": {
      "op": "bytec_1 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\"",
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0",
        "\"did_execute_a\""
      ]
    },
    "344": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "345": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%10#0"
      ]
    },
    "346": {
      "op": "bz main_bool_false@44",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "349": {
      "op": "b main_and_contd@42"
    },
    "352": {
      "block": "main_and_contd@42",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "353": {
      "op": "bytec_2 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0",
        "\"did_execute_b\""
      ]
    },
    "354": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value%11#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "355": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%11#0"
      ]
    },
    "356": {
      "op": "bnz main_bool_false@44",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "359": {
      "op": "b main_bool_true@43"
    },
    "362": {
      "block": "main_bool_true@43",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "363": {
      "op": "bury 6",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "365": {
      "op": "b main_bool_merge@45"
    },
    "368": {
      "block": "main_bool_merge@45",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "dig 5",
      "defined_out": [
        "and_result%7#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "and_result%7#0"
      ]
    },
    "370": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset",
      "op": "callsub assert_and_reset",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "373": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "and_result%7#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "374": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c",
      "op": "callsub func_c",
      "defined_out": [
        "and_result%7#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%12#0"
      ]
    },
    "377": {
      "op": "bz main_ternary_false@47",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "380": {
      "op": "b main_ternary_true@46"
    },
    "383": {
      "block": "main_ternary_true@46",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "384": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a",
      "op": "callsub func_a",
      "defined_out": [
        "ternary_result%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "ternary_result%1#0"
      ]
    },
    "387": {
      "op": "bury 3",
      "defined_out": [
        "ternary_result%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "389": {
      "op": "b main_ternary_merge@48"
    },
    "392": {
      "block": "main_ternary_merge@48",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "393": {
      "op": "bytec_1 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\"",
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0",
        "\"did_execute_a\""
      ]
    },
    "394": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%12#0",
        "maybe_value%12#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "395": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%12#0"
      ]
    },
    "396": {
      "op": "bnz main_bool_false@51",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "399": {
      "op": "b main_and_contd@49"
    },
    "402": {
      "block": "main_and_contd@49",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "403": {
      "op": "bytec_2 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0",
        "\"did_execute_b\""
      ]
    },
    "404": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%13#0",
        "maybe_value%13#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%13#0",
        "maybe_exists%13#0"
      ]
    },
    "405": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "maybe_value%13#0"
      ]
    },
    "406": {
      "op": "bz main_bool_false@51",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "409": {
      "op": "b main_bool_true@50"
    },
    "412": {
      "block": "main_bool_true@50",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "413": {
      "op": "bury 5",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "415": {
      "op": "b main_bool_merge@52"
    },
    "418": {
      "block": "main_bool_merge@52",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "dig 4",
      "defined_out": [
        "and_result%8#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "and_result%8#0"
      ]
    },
    "420": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset",
      "op": "callsub assert_and_reset",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "423": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "and_result%8#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "424": {
      "op": "return",
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "425": {
      "block": "main_bool_false@51",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "426": {
      "op": "bury 5",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "428": {
      "op": "b main_bool_merge@52"
    },
    "431": {
      "block": "main_ternary_false@47",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "432": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b",
      "op": "callsub func_b",
      "defined_out": [
        "ternary_result%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "ternary_result%1#0"
      ]
    },
    "435": {
      "op": "bury 3",
      "defined_out": [
        "ternary_result%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "437": {
      "op": "b main_ternary_merge@48"
    },
    "440": {
      "block": "main_bool_false@44",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "441": {
      "op": "bury 6",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "443": {
      "op": "b main_bool_merge@45"
    },
    "446": {
      "block": "main_ternary_false@40",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "1"
      ]
    },
    "447": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b",
      "op": "callsub func_b",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "ternary_result%0#0"
      ]
    },
    "450": {
      "op": "bury 4",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "452": {
      "op": "b main_ternary_merge@41"
    },
    "455": {
      "block": "main_bool_false@37",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "456": {
      "op": "bury 7",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "458": {
      "op": "b main_bool_merge@38"
    },
    "461": {
      "block": "main_bool_false@33",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "462": {
      "op": "bury 8",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "464": {
      "op": "b main_bool_merge@34"
    },
    "467": {
      "block": "main_bool_false@29",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "b main_bool_merge@30"
    },
    "470": {
      "block": "main_bool_false@25",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "471": {
      "op": "bury 9",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "473": {
      "op": "b main_bool_merge@26"
    },
    "476": {
      "block": "main_bool_false@21",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "b main_bool_merge@22"
    },
    "479": {
      "block": "main_bool_false@17",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "480": {
      "op": "bury 10",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "482": {
      "op": "b main_bool_merge@18"
    },
    "485": {
      "block": "main_bool_false@13",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "b main_bool_merge@14"
    },
    "488": {
      "block": "main_bool_false@9",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "0"
      ]
    },
    "489": {
      "op": "bury 11",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "491": {
      "op": "b main_bool_merge@10"
    },
    "494": {
      "block": "main_bool_false@5",
      "stack_in": [
        "and_result%0#0",
        "and_result%1#0",
        "and_result%3#0",
        "and_result%5#0",
        "and_result%6#0",
        "and_result%7#0",
        "and_result%8#0",
        "ternary_result%0#0",
        "ternary_result%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "op": "b main_bool_merge@6"
    },
    "497": {
      "subroutine": "test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "500": {
      "block": "__init___block@0",
      "stack_in": [],
      "op": "bytec_1 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\""
      ],
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "501": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"did_execute_a\"",
        "0"
      ],
      "stack_out": [
        "\"did_execute_a\"",
        "0"
      ]
    },
    "502": {
      "op": "app_global_put",
      "stack_out": []
    },
    "503": {
      "op": "bytec_2 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\""
      ],
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "504": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"did_execute_b\"",
        "0"
      ]
    },
    "505": {
      "op": "app_global_put",
      "stack_out": []
    },
    "506": {
      "retsub": true,
      "op": "retsub"
    },
    "507": {
      "subroutine": "test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset",
      "params": {
        "condition#0": "uint64"
      },
      "block": "assert_and_reset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "510": {
      "op": "b assert_and_reset_block@0"
    },
    "513": {
      "block": "assert_and_reset_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "condition#0 (copy)"
      ],
      "stack_out": [
        "condition#0 (copy)"
      ]
    },
    "515": {
      "op": "assert",
      "stack_out": []
    },
    "516": {
      "op": "bytec_2 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\""
      ],
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "517": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "\"did_execute_b\"",
        "0"
      ]
    },
    "518": {
      "op": "app_global_put",
      "stack_out": []
    },
    "519": {
      "op": "bytec_1 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\""
      ],
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "520": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"did_execute_a\"",
        "0"
      ]
    },
    "521": {
      "op": "app_global_put",
      "stack_out": []
    },
    "522": {
      "retsub": true,
      "op": "retsub"
    },
    "523": {
      "subroutine": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a",
      "params": {
        "ret_val#0": "uint64"
      },
      "block": "func_a",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "526": {
      "op": "b func_a_block@0"
    },
    "529": {
      "block": "func_a_block@0",
      "stack_in": [],
      "op": "bytec_1 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\""
      ],
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "530": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"did_execute_a\"",
        "1"
      ],
      "stack_out": [
        "\"did_execute_a\"",
        "1"
      ]
    },
    "531": {
      "op": "app_global_put",
      "stack_out": []
    },
    "532": {
      "op": "frame_dig -1",
      "defined_out": [
        "ret_val#0 (copy)"
      ],
      "stack_out": [
        "ret_val#0 (copy)"
      ]
    },
    "534": {
      "retsub": true,
      "op": "retsub"
    },
    "535": {
      "subroutine": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b",
      "params": {
        "ret_val#0": "uint64"
      },
      "block": "func_b",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "538": {
      "op": "b func_b_block@0"
    },
    "541": {
      "block": "func_b_block@0",
      "stack_in": [],
      "op": "bytec_2 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\""
      ],
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "542": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"did_execute_b\"",
        "1"
      ],
      "stack_out": [
        "\"did_execute_b\"",
        "1"
      ]
    },
    "543": {
      "op": "app_global_put",
      "stack_out": []
    },
    "544": {
      "op": "frame_dig -1",
      "defined_out": [
        "ret_val#0 (copy)"
      ],
      "stack_out": [
        "ret_val#0 (copy)"
      ]
    },
    "546": {
      "retsub": true,
      "op": "retsub"
    },
    "547": {
      "subroutine": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c",
      "params": {
        "ret_val#0": "uint64"
      },
      "block": "func_c",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "550": {
      "op": "b func_c_block@0"
    },
    "553": {
      "block": "func_c_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "ret_val#0 (copy)"
      ],
      "stack_out": [
        "ret_val#0 (copy)"
      ]
    },
    "555": {
      "retsub": true,
      "op": "retsub"
    }
  }
}