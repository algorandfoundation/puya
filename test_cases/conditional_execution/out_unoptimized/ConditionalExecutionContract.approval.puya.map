{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;AACQ;AAAqB;AAArB;AACA;AAAqB;AAArB;;AAER;;;AAEoB;AAAZ;;;AAAA;;;AAAiC;AAAZ;;;AAArB;;;AAEI;AAAA;AAAA;AAAA;AAAA;;;AAA2B;AAAA;AAAA;AAAA;AAAJ;;;;AAD3B;;;AAKY;AAAZ;;;AAAA;;;AAAkC;AAAZ;;;AAAtB;;;AAEI;AAAA;AAAA;AAAA;AAAA;;;AAAuB;AAAA;AAAA;AAAA;AAAvB;;;;AADJ;;;AAKY;AAAZ;;;AAAA;;;AAAmC;AAAZ;;;AAAvB;;;AAEI;AAAA;AAAA;AAAA;AAAA;;;AAA2B;AAAA;AAAA;AAAA;AAAJ;;;;AAD3B;;;AAKY;AAAZ;;;AAAA;;;AAAkC;AAAZ;;;AAAtB;;;AAEI;AAAA;AAAA;AAAA;AAAA;;;AAAuB;AAAA;AAAA;AAAA;AAAvB;;;;AADJ;;;AAKa;AAAZ;;;AAAA;AAA+B;AAAZ;;;AAAA;AAEhB;AAAA;AAAA;AAAA;AAAA;;;AAAuB;AAAA;AAAA;AAAA;AAAvB;;;;AADJ;;;AAKiC;AAAZ;;;AAArB;;;AAAY;AAAZ;;;AAAA;AAEI;AAAA;AAAA;AAAA;AAAA;;;AAA2B;AAAA;AAAA;AAAA;AAAJ;;;;AAD3B;;;AAKiC;AAAZ;;;AAArB;;;AAAY;AAAZ;;;AAAA;AAEQ;AAAA;AAAA;AAAA;AAAJ;;;AAA2B;AAAA;AAAA;AAAA;AAA3B;;;;AADJ;;;AAIO;AAAP;;;;;AALyD;AAAZ;;;AAAA;;;;;;;;AANW;AAAZ;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBpD;;;AAEQ;;AAAA;AACA;AAAqB;AAArB;AACA;AAAqB;AAArB;;AAER;;;AAEQ;AAAqB;AAArB;AACA;;AAAA;AAER;;;AAEQ;AAAqB;AAArB;AACA;;AAAA;AAER;;;AAEQ;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.conditional_execution.contract.ConditionalExecutionContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"did_execute_a\" \"did_execute_b\""
    },
    "35": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "37": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "40": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__",
      "op": "callsub __init__"
    },
    "43": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "46": {
      "op": "return",
      "stack_out": []
    },
    "47": {
      "subroutine": "test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "50": {
      "op": "bytec_0 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\""
      ],
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "51": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"did_execute_a\"",
        "0"
      ],
      "stack_out": [
        "\"did_execute_a\"",
        "0"
      ]
    },
    "52": {
      "op": "app_global_put",
      "stack_out": []
    },
    "53": {
      "op": "bytec_1 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\""
      ],
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "54": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"did_execute_b\"",
        "0"
      ]
    },
    "55": {
      "op": "app_global_put",
      "stack_out": []
    },
    "56": {
      "retsub": true,
      "op": "retsub"
    },
    "57": {
      "subroutine": "test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program",
      "params": {},
      "block": "approval_program",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "60": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "61": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a",
      "op": "callsub func_a",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "64": {
      "op": "bnz approval_program_bool_true@2",
      "stack_out": []
    },
    "67": {
      "block": "approval_program_or_contd@1",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "68": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b",
      "op": "callsub func_b",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "71": {
      "op": "bz approval_program_bool_false@3",
      "stack_out": []
    },
    "74": {
      "block": "approval_program_bool_merge@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "75": {
      "op": "bytec_0 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"did_execute_a\""
      ]
    },
    "76": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "77": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "78": {
      "op": "bz approval_program_bool_false@7",
      "stack_out": []
    },
    "81": {
      "block": "approval_program_and_contd@5",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "82": {
      "op": "bytec_1 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"did_execute_b\""
      ]
    },
    "83": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "84": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "85": {
      "op": "bnz approval_program_bool_false@7",
      "stack_out": []
    },
    "88": {
      "block": "approval_program_bool_true@6",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "89": {
      "block": "approval_program_bool_merge@8",
      "stack_in": [
        "and_result%0#0"
      ],
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset",
      "op": "callsub assert_and_reset",
      "defined_out": [],
      "stack_out": []
    },
    "92": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "93": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a",
      "op": "callsub func_a",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "96": {
      "op": "bnz approval_program_bool_true@10",
      "stack_out": []
    },
    "99": {
      "block": "approval_program_or_contd@9",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "100": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b",
      "op": "callsub func_b",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "103": {
      "op": "bz approval_program_bool_false@11",
      "stack_out": []
    },
    "106": {
      "block": "approval_program_bool_merge@12",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "107": {
      "op": "bytec_0 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"did_execute_a\""
      ]
    },
    "108": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "109": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "110": {
      "op": "bz approval_program_bool_false@15",
      "stack_out": []
    },
    "113": {
      "block": "approval_program_and_contd@13",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "114": {
      "op": "bytec_1 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"did_execute_b\""
      ]
    },
    "115": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "116": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "117": {
      "op": "bz approval_program_bool_false@15",
      "stack_out": []
    },
    "120": {
      "block": "approval_program_bool_true@14",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "121": {
      "block": "approval_program_bool_merge@16",
      "stack_in": [
        "and_result%1#0"
      ],
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset",
      "op": "callsub assert_and_reset",
      "defined_out": [],
      "stack_out": []
    },
    "124": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "125": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a",
      "op": "callsub func_a",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "128": {
      "op": "bz approval_program_bool_false@19",
      "stack_out": []
    },
    "131": {
      "block": "approval_program_and_contd@17",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "132": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b",
      "op": "callsub func_b",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "135": {
      "op": "bz approval_program_bool_false@19",
      "stack_out": []
    },
    "138": {
      "block": "approval_program_bool_merge@20",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "139": {
      "op": "bytec_0 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"did_execute_a\""
      ]
    },
    "140": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "141": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "142": {
      "op": "bz approval_program_bool_false@23",
      "stack_out": []
    },
    "145": {
      "block": "approval_program_and_contd@21",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "146": {
      "op": "bytec_1 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"did_execute_b\""
      ]
    },
    "147": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "148": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "149": {
      "op": "bnz approval_program_bool_false@23",
      "stack_out": []
    },
    "152": {
      "block": "approval_program_bool_true@22",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%3#0"
      ],
      "stack_out": [
        "and_result%3#0"
      ]
    },
    "153": {
      "block": "approval_program_bool_merge@24",
      "stack_in": [
        "and_result%3#0"
      ],
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset",
      "op": "callsub assert_and_reset",
      "defined_out": [],
      "stack_out": []
    },
    "156": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "157": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a",
      "op": "callsub func_a",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "160": {
      "op": "bz approval_program_bool_false@27",
      "stack_out": []
    },
    "163": {
      "block": "approval_program_and_contd@25",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "164": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b",
      "op": "callsub func_b",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "167": {
      "op": "bz approval_program_bool_false@27",
      "stack_out": []
    },
    "170": {
      "block": "approval_program_bool_merge@28",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "171": {
      "op": "bytec_0 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"did_execute_a\""
      ]
    },
    "172": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "173": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "maybe_value%6#0"
      ]
    },
    "174": {
      "op": "bz approval_program_bool_false@31",
      "stack_out": []
    },
    "177": {
      "block": "approval_program_and_contd@29",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "178": {
      "op": "bytec_1 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"did_execute_b\""
      ]
    },
    "179": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "180": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists",
      "stack_out": [
        "maybe_value%7#0"
      ]
    },
    "181": {
      "op": "bz approval_program_bool_false@31",
      "stack_out": []
    },
    "184": {
      "block": "approval_program_bool_true@30",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%5#0"
      ],
      "stack_out": [
        "and_result%5#0"
      ]
    },
    "185": {
      "block": "approval_program_bool_merge@32",
      "stack_in": [
        "and_result%5#0"
      ],
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset",
      "op": "callsub assert_and_reset",
      "defined_out": [],
      "stack_out": []
    },
    "188": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "189": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a",
      "op": "callsub func_a",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "192": {
      "op": "pop",
      "stack_out": []
    },
    "193": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "194": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b",
      "op": "callsub func_b",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "197": {
      "op": "pop",
      "stack_out": []
    },
    "198": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "199": {
      "op": "bytec_0 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"did_execute_a\""
      ]
    },
    "200": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "201": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "maybe_value%8#0"
      ]
    },
    "202": {
      "op": "bz approval_program_bool_false@35",
      "stack_out": []
    },
    "205": {
      "block": "approval_program_and_contd@33",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "206": {
      "op": "bytec_1 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"did_execute_b\""
      ]
    },
    "207": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "208": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists",
      "stack_out": [
        "maybe_value%9#0"
      ]
    },
    "209": {
      "op": "bz approval_program_bool_false@35",
      "stack_out": []
    },
    "212": {
      "block": "approval_program_bool_true@34",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%6#0"
      ],
      "stack_out": [
        "and_result%6#0"
      ]
    },
    "213": {
      "block": "approval_program_bool_merge@36",
      "stack_in": [
        "and_result%6#0"
      ],
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset",
      "op": "callsub assert_and_reset",
      "defined_out": [],
      "stack_out": []
    },
    "216": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "217": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c",
      "op": "callsub func_c",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "220": {
      "op": "bz approval_program_ternary_false@38",
      "stack_out": []
    },
    "223": {
      "block": "approval_program_ternary_true@37",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "224": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a",
      "op": "callsub func_a",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0"
      ]
    },
    "227": {
      "op": "pop",
      "stack_out": []
    },
    "228": {
      "block": "approval_program_ternary_merge@39",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "229": {
      "op": "bytec_0 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"did_execute_a\""
      ]
    },
    "230": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0"
      ],
      "stack_out": [
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "231": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "maybe_value%10#0"
      ]
    },
    "232": {
      "op": "bz approval_program_bool_false@42",
      "stack_out": []
    },
    "235": {
      "block": "approval_program_and_contd@40",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "236": {
      "op": "bytec_1 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"did_execute_b\""
      ]
    },
    "237": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value%11#0"
      ],
      "stack_out": [
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "238": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists",
      "stack_out": [
        "maybe_value%11#0"
      ]
    },
    "239": {
      "op": "bnz approval_program_bool_false@42",
      "stack_out": []
    },
    "242": {
      "block": "approval_program_bool_true@41",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%7#0"
      ],
      "stack_out": [
        "and_result%7#0"
      ]
    },
    "243": {
      "block": "approval_program_bool_merge@43",
      "stack_in": [
        "and_result%7#0"
      ],
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset",
      "op": "callsub assert_and_reset",
      "defined_out": [],
      "stack_out": []
    },
    "246": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "247": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c",
      "op": "callsub func_c",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "250": {
      "op": "bz approval_program_ternary_false@45",
      "stack_out": []
    },
    "253": {
      "block": "approval_program_ternary_true@44",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "254": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a",
      "op": "callsub func_a",
      "defined_out": [
        "ternary_result%1#0"
      ],
      "stack_out": [
        "ternary_result%1#0"
      ]
    },
    "257": {
      "op": "pop",
      "stack_out": []
    },
    "258": {
      "block": "approval_program_ternary_merge@46",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "259": {
      "op": "bytec_0 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"did_execute_a\""
      ]
    },
    "260": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%12#0",
        "maybe_value%12#0"
      ],
      "stack_out": [
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "261": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "maybe_value%12#0"
      ]
    },
    "262": {
      "op": "bnz approval_program_bool_false@49",
      "stack_out": []
    },
    "265": {
      "block": "approval_program_and_contd@47",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "266": {
      "op": "bytec_1 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"did_execute_b\""
      ]
    },
    "267": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%13#0",
        "maybe_value%13#0"
      ],
      "stack_out": [
        "maybe_value%13#0",
        "maybe_exists%13#0"
      ]
    },
    "268": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists",
      "stack_out": [
        "maybe_value%13#0"
      ]
    },
    "269": {
      "op": "bz approval_program_bool_false@49",
      "stack_out": []
    },
    "272": {
      "block": "approval_program_bool_true@48",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%8#0"
      ],
      "stack_out": [
        "and_result%8#0"
      ]
    },
    "273": {
      "block": "approval_program_bool_merge@50",
      "stack_in": [
        "and_result%8#0"
      ],
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset",
      "op": "callsub assert_and_reset",
      "defined_out": [],
      "stack_out": []
    },
    "276": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "277": {
      "retsub": true,
      "op": "retsub"
    },
    "278": {
      "block": "approval_program_bool_false@49",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%8#0"
      ],
      "stack_out": [
        "and_result%8#0"
      ]
    },
    "279": {
      "op": "b approval_program_bool_merge@50"
    },
    "282": {
      "block": "approval_program_ternary_false@45",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "283": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b",
      "op": "callsub func_b",
      "defined_out": [
        "ternary_result%1#0"
      ],
      "stack_out": [
        "ternary_result%1#0"
      ]
    },
    "286": {
      "op": "pop",
      "stack_out": []
    },
    "287": {
      "op": "b approval_program_ternary_merge@46"
    },
    "290": {
      "block": "approval_program_bool_false@42",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%7#0"
      ],
      "stack_out": [
        "and_result%7#0"
      ]
    },
    "291": {
      "op": "b approval_program_bool_merge@43"
    },
    "294": {
      "block": "approval_program_ternary_false@38",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "295": {
      "callsub": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b",
      "op": "callsub func_b",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0"
      ]
    },
    "298": {
      "op": "pop",
      "stack_out": []
    },
    "299": {
      "op": "b approval_program_ternary_merge@39"
    },
    "302": {
      "block": "approval_program_bool_false@35",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%6#0"
      ],
      "stack_out": [
        "and_result%6#0"
      ]
    },
    "303": {
      "op": "b approval_program_bool_merge@36"
    },
    "306": {
      "block": "approval_program_bool_false@31",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%5#0"
      ],
      "stack_out": [
        "and_result%5#0"
      ]
    },
    "307": {
      "op": "b approval_program_bool_merge@32"
    },
    "310": {
      "block": "approval_program_bool_false@27",
      "stack_in": [],
      "op": "b approval_program_bool_merge@28"
    },
    "313": {
      "block": "approval_program_bool_false@23",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%3#0"
      ],
      "stack_out": [
        "and_result%3#0"
      ]
    },
    "314": {
      "op": "b approval_program_bool_merge@24"
    },
    "317": {
      "block": "approval_program_bool_false@19",
      "stack_in": [],
      "op": "b approval_program_bool_merge@20"
    },
    "320": {
      "block": "approval_program_bool_false@15",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "321": {
      "op": "b approval_program_bool_merge@16"
    },
    "324": {
      "block": "approval_program_bool_false@11",
      "stack_in": [],
      "op": "b approval_program_bool_merge@12"
    },
    "327": {
      "block": "approval_program_bool_false@7",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "328": {
      "op": "b approval_program_bool_merge@8"
    },
    "331": {
      "block": "approval_program_bool_false@3",
      "stack_in": [],
      "op": "b approval_program_bool_merge@4"
    },
    "334": {
      "subroutine": "test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset",
      "params": {
        "condition#0": "uint64"
      },
      "block": "assert_and_reset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "337": {
      "op": "frame_dig -1",
      "defined_out": [
        "condition#0 (copy)"
      ],
      "stack_out": [
        "condition#0 (copy)"
      ]
    },
    "339": {
      "op": "assert",
      "stack_out": []
    },
    "340": {
      "op": "bytec_1 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\""
      ],
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "341": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "\"did_execute_b\"",
        "0"
      ]
    },
    "342": {
      "op": "app_global_put",
      "stack_out": []
    },
    "343": {
      "op": "bytec_0 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\""
      ],
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "344": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"did_execute_a\"",
        "0"
      ]
    },
    "345": {
      "op": "app_global_put",
      "stack_out": []
    },
    "346": {
      "retsub": true,
      "op": "retsub"
    },
    "347": {
      "subroutine": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a",
      "params": {
        "ret_val#0": "uint64"
      },
      "block": "func_a",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "350": {
      "op": "bytec_0 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\""
      ],
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "351": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"did_execute_a\"",
        "1"
      ],
      "stack_out": [
        "\"did_execute_a\"",
        "1"
      ]
    },
    "352": {
      "op": "app_global_put",
      "stack_out": []
    },
    "353": {
      "op": "frame_dig -1",
      "defined_out": [
        "ret_val#0 (copy)"
      ],
      "stack_out": [
        "ret_val#0 (copy)"
      ]
    },
    "355": {
      "retsub": true,
      "op": "retsub"
    },
    "356": {
      "subroutine": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b",
      "params": {
        "ret_val#0": "uint64"
      },
      "block": "func_b",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "359": {
      "op": "bytec_1 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\""
      ],
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "360": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"did_execute_b\"",
        "1"
      ],
      "stack_out": [
        "\"did_execute_b\"",
        "1"
      ]
    },
    "361": {
      "op": "app_global_put",
      "stack_out": []
    },
    "362": {
      "op": "frame_dig -1",
      "defined_out": [
        "ret_val#0 (copy)"
      ],
      "stack_out": [
        "ret_val#0 (copy)"
      ]
    },
    "364": {
      "retsub": true,
      "op": "retsub"
    },
    "365": {
      "subroutine": "test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c",
      "params": {
        "ret_val#0": "uint64"
      },
      "block": "func_c",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "368": {
      "op": "frame_dig -1",
      "defined_out": [
        "ret_val#0 (copy)"
      ],
      "stack_out": [
        "ret_val#0 (copy)"
      ]
    },
    "370": {
      "retsub": true,
      "op": "retsub"
    }
  }
}