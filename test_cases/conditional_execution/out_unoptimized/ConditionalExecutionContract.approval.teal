#pragma version 10
#pragma typetrack false

// test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program() -> uint64:
main:
    intcblock 0 1
    bytecblock "" "did_execute_a" "did_execute_b"
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    b main_block@0

main_block@0:
    txn ApplicationID
    bnz main_after_if_else@2
    b main_call___init__@1

main_call___init__@1:
    callsub __init__
    b main_after_if_else@2

main_after_if_else@2:
    // conditional_execution/contract.py:10-11
    // # 'or' won't execute rhs if lhs is True
    // self.func_a(True) or self.func_b(True)
    intc_1 // 1
    callsub func_a
    bnz main_bool_true@4
    b main_or_contd@3

main_or_contd@3:
    // conditional_execution/contract.py:10-11
    // # 'or' won't execute rhs if lhs is True
    // self.func_a(True) or self.func_b(True)
    intc_1 // 1
    callsub func_b
    bz main_bool_false@5
    b main_bool_true@4

main_bool_true@4:
    b main_bool_merge@6

main_bool_merge@6:
    // conditional_execution/contract.py:13
    // self.did_execute_a and not self.did_execute_b,
    intc_0 // 0
    bytec_1 // "did_execute_a"
    app_global_get_ex
    assert // check self.did_execute_a exists
    bz main_bool_false@9
    b main_and_contd@7

main_and_contd@7:
    // conditional_execution/contract.py:13
    // self.did_execute_a and not self.did_execute_b,
    intc_0 // 0
    bytec_2 // "did_execute_b"
    app_global_get_ex
    assert // check self.did_execute_b exists
    bnz main_bool_false@9
    b main_bool_true@8

main_bool_true@8:
    intc_1 // 1
    bury 11
    b main_bool_merge@10

main_bool_merge@10:
    // conditional_execution/contract.py:12-14
    // self.assert_and_reset(
    //     self.did_execute_a and not self.did_execute_b,
    // )
    dig 10
    callsub assert_and_reset
    // conditional_execution/contract.py:16-17
    // # 'or' executes rhs if lhs is False
    // self.func_a(False) or self.func_b(True)
    intc_0 // 0
    callsub func_a
    bnz main_bool_true@12
    b main_or_contd@11

main_or_contd@11:
    // conditional_execution/contract.py:16-17
    // # 'or' executes rhs if lhs is False
    // self.func_a(False) or self.func_b(True)
    intc_1 // 1
    callsub func_b
    bz main_bool_false@13
    b main_bool_true@12

main_bool_true@12:
    b main_bool_merge@14

main_bool_merge@14:
    // conditional_execution/contract.py:19
    // self.did_execute_a and self.did_execute_b,
    intc_0 // 0
    bytec_1 // "did_execute_a"
    app_global_get_ex
    assert // check self.did_execute_a exists
    bz main_bool_false@17
    b main_and_contd@15

main_and_contd@15:
    // conditional_execution/contract.py:19
    // self.did_execute_a and self.did_execute_b,
    intc_0 // 0
    bytec_2 // "did_execute_b"
    app_global_get_ex
    assert // check self.did_execute_b exists
    bz main_bool_false@17
    b main_bool_true@16

main_bool_true@16:
    intc_1 // 1
    bury 10
    b main_bool_merge@18

main_bool_merge@18:
    // conditional_execution/contract.py:18-20
    // self.assert_and_reset(
    //     self.did_execute_a and self.did_execute_b,
    // )
    dig 9
    callsub assert_and_reset
    // conditional_execution/contract.py:22-23
    // # 'and' won't execute rhs if lhs is False
    // self.func_a(False) and self.func_b(True)
    intc_0 // 0
    callsub func_a
    bz main_bool_false@21
    b main_and_contd@19

main_and_contd@19:
    // conditional_execution/contract.py:22-23
    // # 'and' won't execute rhs if lhs is False
    // self.func_a(False) and self.func_b(True)
    intc_1 // 1
    callsub func_b
    bz main_bool_false@21
    b main_bool_true@20

main_bool_true@20:
    b main_bool_merge@22

main_bool_merge@22:
    // conditional_execution/contract.py:25
    // self.did_execute_a and not self.did_execute_b,
    intc_0 // 0
    bytec_1 // "did_execute_a"
    app_global_get_ex
    assert // check self.did_execute_a exists
    bz main_bool_false@25
    b main_and_contd@23

main_and_contd@23:
    // conditional_execution/contract.py:25
    // self.did_execute_a and not self.did_execute_b,
    intc_0 // 0
    bytec_2 // "did_execute_b"
    app_global_get_ex
    assert // check self.did_execute_b exists
    bnz main_bool_false@25
    b main_bool_true@24

main_bool_true@24:
    intc_1 // 1
    bury 9
    b main_bool_merge@26

main_bool_merge@26:
    // conditional_execution/contract.py:24-26
    // self.assert_and_reset(
    //     self.did_execute_a and not self.did_execute_b,
    // )
    dig 8
    callsub assert_and_reset
    // conditional_execution/contract.py:28-29
    // # 'and' executes rhs if lhs is True
    // self.func_a(True) and self.func_b(True)
    intc_1 // 1
    callsub func_a
    bz main_bool_false@29
    b main_and_contd@27

main_and_contd@27:
    // conditional_execution/contract.py:28-29
    // # 'and' executes rhs if lhs is True
    // self.func_a(True) and self.func_b(True)
    intc_1 // 1
    callsub func_b
    bz main_bool_false@29
    b main_bool_true@28

main_bool_true@28:
    b main_bool_merge@30

main_bool_merge@30:
    // conditional_execution/contract.py:31
    // self.did_execute_a and self.did_execute_b,
    intc_0 // 0
    bytec_1 // "did_execute_a"
    app_global_get_ex
    assert // check self.did_execute_a exists
    bz main_bool_false@33
    b main_and_contd@31

main_and_contd@31:
    // conditional_execution/contract.py:31
    // self.did_execute_a and self.did_execute_b,
    intc_0 // 0
    bytec_2 // "did_execute_b"
    app_global_get_ex
    assert // check self.did_execute_b exists
    bz main_bool_false@33
    b main_bool_true@32

main_bool_true@32:
    intc_1 // 1
    bury 8
    b main_bool_merge@34

main_bool_merge@34:
    // conditional_execution/contract.py:30-32
    // self.assert_and_reset(
    //     self.did_execute_a and self.did_execute_b,
    // )
    dig 7
    callsub assert_and_reset
    // conditional_execution/contract.py:34-35
    // # Tuples are fully evaluated before indexing is done
    // (self.func_a(True), self.func_b(True))[0]
    intc_1 // 1
    callsub func_a
    bury 1
    intc_1 // 1
    callsub func_b
    bury 2
    // conditional_execution/contract.py:37
    // self.did_execute_a and self.did_execute_b,
    intc_0 // 0
    bytec_1 // "did_execute_a"
    app_global_get_ex
    assert // check self.did_execute_a exists
    bz main_bool_false@37
    b main_and_contd@35

main_and_contd@35:
    // conditional_execution/contract.py:37
    // self.did_execute_a and self.did_execute_b,
    intc_0 // 0
    bytec_2 // "did_execute_b"
    app_global_get_ex
    assert // check self.did_execute_b exists
    bz main_bool_false@37
    b main_bool_true@36

main_bool_true@36:
    intc_1 // 1
    bury 7
    b main_bool_merge@38

main_bool_merge@38:
    // conditional_execution/contract.py:36-38
    // self.assert_and_reset(
    //     self.did_execute_a and self.did_execute_b,
    // )
    dig 6
    callsub assert_and_reset
    // conditional_execution/contract.py:40-41
    // # Ternary condition won't execute <false expr> if condition is True
    // self.func_a(True) if self.func_c(True) else self.func_b(True)
    intc_1 // 1
    callsub func_c
    bz main_ternary_false@40
    b main_ternary_true@39

main_ternary_true@39:
    // conditional_execution/contract.py:40-41
    // # Ternary condition won't execute <false expr> if condition is True
    // self.func_a(True) if self.func_c(True) else self.func_b(True)
    intc_1 // 1
    callsub func_a
    bury 4
    b main_ternary_merge@41

main_ternary_merge@41:
    // conditional_execution/contract.py:43
    // self.did_execute_a and not self.did_execute_b,
    intc_0 // 0
    bytec_1 // "did_execute_a"
    app_global_get_ex
    assert // check self.did_execute_a exists
    bz main_bool_false@44
    b main_and_contd@42

main_and_contd@42:
    // conditional_execution/contract.py:43
    // self.did_execute_a and not self.did_execute_b,
    intc_0 // 0
    bytec_2 // "did_execute_b"
    app_global_get_ex
    assert // check self.did_execute_b exists
    bnz main_bool_false@44
    b main_bool_true@43

main_bool_true@43:
    intc_1 // 1
    bury 6
    b main_bool_merge@45

main_bool_merge@45:
    // conditional_execution/contract.py:42-44
    // self.assert_and_reset(
    //     self.did_execute_a and not self.did_execute_b,
    // )
    dig 5
    callsub assert_and_reset
    // conditional_execution/contract.py:46-47
    // # Ternary condition won't execute <true expr> if condition is False
    // self.func_a(True) if self.func_c(False) else self.func_b(True)
    intc_0 // 0
    callsub func_c
    bz main_ternary_false@47
    b main_ternary_true@46

main_ternary_true@46:
    // conditional_execution/contract.py:46-47
    // # Ternary condition won't execute <true expr> if condition is False
    // self.func_a(True) if self.func_c(False) else self.func_b(True)
    intc_1 // 1
    callsub func_a
    bury 3
    b main_ternary_merge@48

main_ternary_merge@48:
    // conditional_execution/contract.py:49
    // not self.did_execute_a and self.did_execute_b,
    intc_0 // 0
    bytec_1 // "did_execute_a"
    app_global_get_ex
    assert // check self.did_execute_a exists
    bnz main_bool_false@51
    b main_and_contd@49

main_and_contd@49:
    // conditional_execution/contract.py:49
    // not self.did_execute_a and self.did_execute_b,
    intc_0 // 0
    bytec_2 // "did_execute_b"
    app_global_get_ex
    assert // check self.did_execute_b exists
    bz main_bool_false@51
    b main_bool_true@50

main_bool_true@50:
    intc_1 // 1
    bury 5
    b main_bool_merge@52

main_bool_merge@52:
    // conditional_execution/contract.py:48-50
    // self.assert_and_reset(
    //     not self.did_execute_a and self.did_execute_b,
    // )
    dig 4
    callsub assert_and_reset
    // conditional_execution/contract.py:52
    // return True
    intc_1 // 1
    return

main_bool_false@51:
    intc_0 // 0
    bury 5
    b main_bool_merge@52

main_ternary_false@47:
    // conditional_execution/contract.py:46-47
    // # Ternary condition won't execute <true expr> if condition is False
    // self.func_a(True) if self.func_c(False) else self.func_b(True)
    intc_1 // 1
    callsub func_b
    bury 3
    b main_ternary_merge@48

main_bool_false@44:
    intc_0 // 0
    bury 6
    b main_bool_merge@45

main_ternary_false@40:
    // conditional_execution/contract.py:40-41
    // # Ternary condition won't execute <false expr> if condition is True
    // self.func_a(True) if self.func_c(True) else self.func_b(True)
    intc_1 // 1
    callsub func_b
    bury 4
    b main_ternary_merge@41

main_bool_false@37:
    intc_0 // 0
    bury 7
    b main_bool_merge@38

main_bool_false@33:
    intc_0 // 0
    bury 8
    b main_bool_merge@34

main_bool_false@29:
    b main_bool_merge@30

main_bool_false@25:
    intc_0 // 0
    bury 9
    b main_bool_merge@26

main_bool_false@21:
    b main_bool_merge@22

main_bool_false@17:
    intc_0 // 0
    bury 10
    b main_bool_merge@18

main_bool_false@13:
    b main_bool_merge@14

main_bool_false@9:
    intc_0 // 0
    bury 11
    b main_bool_merge@10

main_bool_false@5:
    b main_bool_merge@6


// test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__() -> void:
__init__:
    b __init___block@0

__init___block@0:
    // conditional_execution/contract.py:6
    // self.did_execute_a = False
    bytec_1 // "did_execute_a"
    intc_0 // 0
    app_global_put
    // conditional_execution/contract.py:7
    // self.did_execute_b = False
    bytec_2 // "did_execute_b"
    intc_0 // 0
    app_global_put
    retsub


// test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset(condition: uint64) -> void:
assert_and_reset:
    // conditional_execution/contract.py:57-58
    // @subroutine
    // def assert_and_reset(self, condition: bool) -> None:
    proto 1 0
    b assert_and_reset_block@0

assert_and_reset_block@0:
    // conditional_execution/contract.py:59
    // assert condition
    frame_dig -1
    assert
    // conditional_execution/contract.py:60
    // self.did_execute_b = False
    bytec_2 // "did_execute_b"
    intc_0 // 0
    app_global_put
    // conditional_execution/contract.py:61
    // self.did_execute_a = False
    bytec_1 // "did_execute_a"
    intc_0 // 0
    app_global_put
    retsub


// test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(ret_val: uint64) -> uint64:
func_a:
    // conditional_execution/contract.py:63-64
    // @subroutine
    // def func_a(self, ret_val: bool) -> bool:
    proto 1 1
    b func_a_block@0

func_a_block@0:
    // conditional_execution/contract.py:65
    // self.did_execute_a = True
    bytec_1 // "did_execute_a"
    intc_1 // 1
    app_global_put
    // conditional_execution/contract.py:66
    // return ret_val
    frame_dig -1
    retsub


// test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(ret_val: uint64) -> uint64:
func_b:
    // conditional_execution/contract.py:68-69
    // @subroutine
    // def func_b(self, ret_val: bool) -> bool:
    proto 1 1
    b func_b_block@0

func_b_block@0:
    // conditional_execution/contract.py:70
    // self.did_execute_b = True
    bytec_2 // "did_execute_b"
    intc_1 // 1
    app_global_put
    // conditional_execution/contract.py:71
    // return ret_val
    frame_dig -1
    retsub


// test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c(ret_val: uint64) -> uint64:
func_c:
    // conditional_execution/contract.py:73-74
    // @subroutine
    // def func_c(self, ret_val: bool) -> bool:
    proto 1 1
    b func_c_block@0

func_c_block@0:
    // conditional_execution/contract.py:75
    // return ret_val
    frame_dig -1
    retsub
