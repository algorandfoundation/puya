#pragma version 10
#pragma typetrack false

// test_cases.conditional_execution.contract.ConditionalExecutionContract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1
    bytecblock "" "did_execute_a" "did_execute_b"
    b block@0

block@0:
    txn ApplicationID
    bnz after_if_else@2
    b call___init__@1

call___init__@1:
    callsub __init__
    b after_if_else@2

after_if_else@2:
    callsub approval_program
    return


// test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__() -> void:
__init__:
    b __init___block@0

__init___block@0:
    // conditional_execution/contract.py:6
    // self.did_execute_a = False
    bytec_1 // "did_execute_a"
    intc_0 // 0
    app_global_put
    // conditional_execution/contract.py:7
    // self.did_execute_b = False
    bytec_2 // "did_execute_b"
    intc_0 // 0
    app_global_put
    retsub


// test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program() -> uint64:
approval_program:
    // conditional_execution/contract.py:9
    // def approval_program(self) -> bool:
    proto 0 1
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    b approval_program_block@0

approval_program_block@0:
    // conditional_execution/contract.py:10-11
    // # 'or' won't execute rhs if lhs is True
    // self.func_a(True) or self.func_b(True)
    intc_1 // 1
    callsub func_a
    bnz approval_program_bool_true@2
    b approval_program_or_contd@1

approval_program_or_contd@1:
    // conditional_execution/contract.py:10-11
    // # 'or' won't execute rhs if lhs is True
    // self.func_a(True) or self.func_b(True)
    intc_1 // 1
    callsub func_b
    bz approval_program_bool_false@3
    b approval_program_bool_true@2

approval_program_bool_true@2:
    b approval_program_bool_merge@4

approval_program_bool_merge@4:
    // conditional_execution/contract.py:13
    // self.did_execute_a and not self.did_execute_b,
    intc_0 // 0
    bytec_1 // "did_execute_a"
    app_global_get_ex
    assert // check self.did_execute_a exists
    bz approval_program_bool_false@7
    b approval_program_and_contd@5

approval_program_and_contd@5:
    // conditional_execution/contract.py:13
    // self.did_execute_a and not self.did_execute_b,
    intc_0 // 0
    bytec_2 // "did_execute_b"
    app_global_get_ex
    assert // check self.did_execute_b exists
    bnz approval_program_bool_false@7
    b approval_program_bool_true@6

approval_program_bool_true@6:
    intc_1 // 1
    frame_bury 0
    b approval_program_bool_merge@8

approval_program_bool_merge@8:
    // conditional_execution/contract.py:12-14
    // self.assert_and_reset(
    //     self.did_execute_a and not self.did_execute_b,
    // )
    frame_dig 0
    callsub assert_and_reset
    // conditional_execution/contract.py:16-17
    // # 'or' executes rhs if lhs is False
    // self.func_a(False) or self.func_b(True)
    intc_0 // 0
    callsub func_a
    bnz approval_program_bool_true@10
    b approval_program_or_contd@9

approval_program_or_contd@9:
    // conditional_execution/contract.py:16-17
    // # 'or' executes rhs if lhs is False
    // self.func_a(False) or self.func_b(True)
    intc_1 // 1
    callsub func_b
    bz approval_program_bool_false@11
    b approval_program_bool_true@10

approval_program_bool_true@10:
    b approval_program_bool_merge@12

approval_program_bool_merge@12:
    // conditional_execution/contract.py:19
    // self.did_execute_a and self.did_execute_b,
    intc_0 // 0
    bytec_1 // "did_execute_a"
    app_global_get_ex
    assert // check self.did_execute_a exists
    bz approval_program_bool_false@15
    b approval_program_and_contd@13

approval_program_and_contd@13:
    // conditional_execution/contract.py:19
    // self.did_execute_a and self.did_execute_b,
    intc_0 // 0
    bytec_2 // "did_execute_b"
    app_global_get_ex
    assert // check self.did_execute_b exists
    bz approval_program_bool_false@15
    b approval_program_bool_true@14

approval_program_bool_true@14:
    intc_1 // 1
    frame_bury 1
    b approval_program_bool_merge@16

approval_program_bool_merge@16:
    // conditional_execution/contract.py:18-20
    // self.assert_and_reset(
    //     self.did_execute_a and self.did_execute_b,
    // )
    frame_dig 1
    callsub assert_and_reset
    // conditional_execution/contract.py:22-23
    // # 'and' won't execute rhs if lhs is False
    // self.func_a(False) and self.func_b(True)
    intc_0 // 0
    callsub func_a
    bz approval_program_bool_false@19
    b approval_program_and_contd@17

approval_program_and_contd@17:
    // conditional_execution/contract.py:22-23
    // # 'and' won't execute rhs if lhs is False
    // self.func_a(False) and self.func_b(True)
    intc_1 // 1
    callsub func_b
    bz approval_program_bool_false@19
    b approval_program_bool_true@18

approval_program_bool_true@18:
    b approval_program_bool_merge@20

approval_program_bool_merge@20:
    // conditional_execution/contract.py:25
    // self.did_execute_a and not self.did_execute_b,
    intc_0 // 0
    bytec_1 // "did_execute_a"
    app_global_get_ex
    assert // check self.did_execute_a exists
    bz approval_program_bool_false@23
    b approval_program_and_contd@21

approval_program_and_contd@21:
    // conditional_execution/contract.py:25
    // self.did_execute_a and not self.did_execute_b,
    intc_0 // 0
    bytec_2 // "did_execute_b"
    app_global_get_ex
    assert // check self.did_execute_b exists
    bnz approval_program_bool_false@23
    b approval_program_bool_true@22

approval_program_bool_true@22:
    intc_1 // 1
    frame_bury 2
    b approval_program_bool_merge@24

approval_program_bool_merge@24:
    // conditional_execution/contract.py:24-26
    // self.assert_and_reset(
    //     self.did_execute_a and not self.did_execute_b,
    // )
    frame_dig 2
    callsub assert_and_reset
    // conditional_execution/contract.py:28-29
    // # 'and' executes rhs if lhs is True
    // self.func_a(True) and self.func_b(True)
    intc_1 // 1
    callsub func_a
    bz approval_program_bool_false@27
    b approval_program_and_contd@25

approval_program_and_contd@25:
    // conditional_execution/contract.py:28-29
    // # 'and' executes rhs if lhs is True
    // self.func_a(True) and self.func_b(True)
    intc_1 // 1
    callsub func_b
    bz approval_program_bool_false@27
    b approval_program_bool_true@26

approval_program_bool_true@26:
    b approval_program_bool_merge@28

approval_program_bool_merge@28:
    // conditional_execution/contract.py:31
    // self.did_execute_a and self.did_execute_b,
    intc_0 // 0
    bytec_1 // "did_execute_a"
    app_global_get_ex
    assert // check self.did_execute_a exists
    bz approval_program_bool_false@31
    b approval_program_and_contd@29

approval_program_and_contd@29:
    // conditional_execution/contract.py:31
    // self.did_execute_a and self.did_execute_b,
    intc_0 // 0
    bytec_2 // "did_execute_b"
    app_global_get_ex
    assert // check self.did_execute_b exists
    bz approval_program_bool_false@31
    b approval_program_bool_true@30

approval_program_bool_true@30:
    intc_1 // 1
    frame_bury 3
    b approval_program_bool_merge@32

approval_program_bool_merge@32:
    // conditional_execution/contract.py:30-32
    // self.assert_and_reset(
    //     self.did_execute_a and self.did_execute_b,
    // )
    frame_dig 3
    callsub assert_and_reset
    // conditional_execution/contract.py:34-35
    // # Tuples are fully evaluated before indexing is done
    // (self.func_a(True), self.func_b(True))[0]
    intc_1 // 1
    callsub func_a
    frame_bury 9
    intc_1 // 1
    callsub func_b
    frame_bury 10
    // conditional_execution/contract.py:37
    // self.did_execute_a and self.did_execute_b,
    intc_0 // 0
    bytec_1 // "did_execute_a"
    app_global_get_ex
    assert // check self.did_execute_a exists
    bz approval_program_bool_false@35
    b approval_program_and_contd@33

approval_program_and_contd@33:
    // conditional_execution/contract.py:37
    // self.did_execute_a and self.did_execute_b,
    intc_0 // 0
    bytec_2 // "did_execute_b"
    app_global_get_ex
    assert // check self.did_execute_b exists
    bz approval_program_bool_false@35
    b approval_program_bool_true@34

approval_program_bool_true@34:
    intc_1 // 1
    frame_bury 4
    b approval_program_bool_merge@36

approval_program_bool_merge@36:
    // conditional_execution/contract.py:36-38
    // self.assert_and_reset(
    //     self.did_execute_a and self.did_execute_b,
    // )
    frame_dig 4
    callsub assert_and_reset
    // conditional_execution/contract.py:40-41
    // # Ternary condition won't execute <false expr> if condition is True
    // self.func_a(True) if self.func_c(True) else self.func_b(True)
    intc_1 // 1
    callsub func_c
    bz approval_program_ternary_false@38
    b approval_program_ternary_true@37

approval_program_ternary_true@37:
    // conditional_execution/contract.py:40-41
    // # Ternary condition won't execute <false expr> if condition is True
    // self.func_a(True) if self.func_c(True) else self.func_b(True)
    intc_1 // 1
    callsub func_a
    frame_bury 7
    b approval_program_ternary_merge@39

approval_program_ternary_merge@39:
    // conditional_execution/contract.py:43
    // self.did_execute_a and not self.did_execute_b,
    intc_0 // 0
    bytec_1 // "did_execute_a"
    app_global_get_ex
    assert // check self.did_execute_a exists
    bz approval_program_bool_false@42
    b approval_program_and_contd@40

approval_program_and_contd@40:
    // conditional_execution/contract.py:43
    // self.did_execute_a and not self.did_execute_b,
    intc_0 // 0
    bytec_2 // "did_execute_b"
    app_global_get_ex
    assert // check self.did_execute_b exists
    bnz approval_program_bool_false@42
    b approval_program_bool_true@41

approval_program_bool_true@41:
    intc_1 // 1
    frame_bury 5
    b approval_program_bool_merge@43

approval_program_bool_merge@43:
    // conditional_execution/contract.py:42-44
    // self.assert_and_reset(
    //     self.did_execute_a and not self.did_execute_b,
    // )
    frame_dig 5
    callsub assert_and_reset
    // conditional_execution/contract.py:46-47
    // # Ternary condition won't execute <true expr> if condition is False
    // self.func_a(True) if self.func_c(False) else self.func_b(True)
    intc_0 // 0
    callsub func_c
    bz approval_program_ternary_false@45
    b approval_program_ternary_true@44

approval_program_ternary_true@44:
    // conditional_execution/contract.py:46-47
    // # Ternary condition won't execute <true expr> if condition is False
    // self.func_a(True) if self.func_c(False) else self.func_b(True)
    intc_1 // 1
    callsub func_a
    frame_bury 8
    b approval_program_ternary_merge@46

approval_program_ternary_merge@46:
    // conditional_execution/contract.py:49
    // not self.did_execute_a and self.did_execute_b,
    intc_0 // 0
    bytec_1 // "did_execute_a"
    app_global_get_ex
    assert // check self.did_execute_a exists
    bnz approval_program_bool_false@49
    b approval_program_and_contd@47

approval_program_and_contd@47:
    // conditional_execution/contract.py:49
    // not self.did_execute_a and self.did_execute_b,
    intc_0 // 0
    bytec_2 // "did_execute_b"
    app_global_get_ex
    assert // check self.did_execute_b exists
    bz approval_program_bool_false@49
    b approval_program_bool_true@48

approval_program_bool_true@48:
    intc_1 // 1
    frame_bury 6
    b approval_program_bool_merge@50

approval_program_bool_merge@50:
    // conditional_execution/contract.py:48-50
    // self.assert_and_reset(
    //     not self.did_execute_a and self.did_execute_b,
    // )
    frame_dig 6
    callsub assert_and_reset
    // conditional_execution/contract.py:52
    // return True
    intc_1 // 1
    frame_bury 0
    retsub

approval_program_bool_false@49:
    intc_0 // 0
    frame_bury 6
    b approval_program_bool_merge@50

approval_program_ternary_false@45:
    // conditional_execution/contract.py:46-47
    // # Ternary condition won't execute <true expr> if condition is False
    // self.func_a(True) if self.func_c(False) else self.func_b(True)
    intc_1 // 1
    callsub func_b
    frame_bury 8
    b approval_program_ternary_merge@46

approval_program_bool_false@42:
    intc_0 // 0
    frame_bury 5
    b approval_program_bool_merge@43

approval_program_ternary_false@38:
    // conditional_execution/contract.py:40-41
    // # Ternary condition won't execute <false expr> if condition is True
    // self.func_a(True) if self.func_c(True) else self.func_b(True)
    intc_1 // 1
    callsub func_b
    frame_bury 7
    b approval_program_ternary_merge@39

approval_program_bool_false@35:
    intc_0 // 0
    frame_bury 4
    b approval_program_bool_merge@36

approval_program_bool_false@31:
    intc_0 // 0
    frame_bury 3
    b approval_program_bool_merge@32

approval_program_bool_false@27:
    b approval_program_bool_merge@28

approval_program_bool_false@23:
    intc_0 // 0
    frame_bury 2
    b approval_program_bool_merge@24

approval_program_bool_false@19:
    b approval_program_bool_merge@20

approval_program_bool_false@15:
    intc_0 // 0
    frame_bury 1
    b approval_program_bool_merge@16

approval_program_bool_false@11:
    b approval_program_bool_merge@12

approval_program_bool_false@7:
    intc_0 // 0
    frame_bury 0
    b approval_program_bool_merge@8

approval_program_bool_false@3:
    b approval_program_bool_merge@4


// test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset(condition: uint64) -> void:
assert_and_reset:
    // conditional_execution/contract.py:57-58
    // @subroutine
    // def assert_and_reset(self, condition: bool) -> None:
    proto 1 0
    b assert_and_reset_block@0

assert_and_reset_block@0:
    // conditional_execution/contract.py:59
    // assert condition
    frame_dig -1
    assert
    // conditional_execution/contract.py:60
    // self.did_execute_b = False
    bytec_2 // "did_execute_b"
    intc_0 // 0
    app_global_put
    // conditional_execution/contract.py:61
    // self.did_execute_a = False
    bytec_1 // "did_execute_a"
    intc_0 // 0
    app_global_put
    retsub


// test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(ret_val: uint64) -> uint64:
func_a:
    // conditional_execution/contract.py:63-64
    // @subroutine
    // def func_a(self, ret_val: bool) -> bool:
    proto 1 1
    b func_a_block@0

func_a_block@0:
    // conditional_execution/contract.py:65
    // self.did_execute_a = True
    bytec_1 // "did_execute_a"
    intc_1 // 1
    app_global_put
    // conditional_execution/contract.py:66
    // return ret_val
    frame_dig -1
    retsub


// test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(ret_val: uint64) -> uint64:
func_b:
    // conditional_execution/contract.py:68-69
    // @subroutine
    // def func_b(self, ret_val: bool) -> bool:
    proto 1 1
    b func_b_block@0

func_b_block@0:
    // conditional_execution/contract.py:70
    // self.did_execute_b = True
    bytec_2 // "did_execute_b"
    intc_1 // 1
    app_global_put
    // conditional_execution/contract.py:71
    // return ret_val
    frame_dig -1
    retsub


// test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c(ret_val: uint64) -> uint64:
func_c:
    // conditional_execution/contract.py:73-74
    // @subroutine
    // def func_c(self, ret_val: bool) -> bool:
    proto 1 1
    b func_c_block@0

func_c_block@0:
    // conditional_execution/contract.py:75
    // return ret_val
    frame_dig -1
    retsub
