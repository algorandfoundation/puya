debug: PuyaOptions(paths=['conditional_execution'], output_teal=True, output_arc32=True, output_client=True, output_awst=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, output_bytecode=True, match_algod_bytecode=False, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10, cli_template_definitions=[], template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>)
info: Found python prefix: <git root>/.venv
conditional_execution/contract.py:10:9 warning: expression result is ignored
conditional_execution/contract.py:16:9 warning: expression result is ignored
conditional_execution/contract.py:22:9 warning: expression result is ignored
conditional_execution/contract.py:28:9 warning: expression result is ignored
conditional_execution/contract.py:34:9 warning: expression result is ignored
conditional_execution/contract.py:40:9 warning: expression result is ignored
conditional_execution/contract.py:46:9 warning: expression result is ignored
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L19
debug: Terminated block@1: // while_top_L19
debug: Sealing block@2: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L19
debug: Terminated block@2: // while_body_L20
debug: Sealing block@3: // switch_case_0_L27
debug: Terminated block@3: // switch_case_0_L27
debug: Sealing block@4: // switch_case_1_L29
debug: Terminated block@4: // switch_case_1_L29
debug: Sealing block@5: // switch_case_default_L25
debug: Terminated block@5: // switch_case_default_L25
debug: Sealing block@6: // switch_case_next_L25
debug: Terminated block@6: // switch_case_next_L25
debug: Sealing block@1: // while_top_L19
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L25
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L25
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7: // after_while_L19
debug: Terminated block@7: // after_while_L19
debug: Sealing block@0: // L25
debug: Terminated block@0: // L25
debug: Sealing block@0: // L44
debug: Terminated block@0: // L44
debug: Sealing block@0: // L62
debug: Terminated block@0: // L62
debug: Sealing block@0: // L92
debug: Terminated block@0: // L92
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L110
debug: Terminated block@1: // for_header_L110
debug: Sealing block@2: // for_body_L111
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1: // for_header_L110
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L110
debug: Terminated block@2: // for_body_L111
debug: Sealing block@3: // for_footer_L110
debug: Terminated block@3: // for_footer_L110
debug: Sealing block@1: // for_header_L110
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L92
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L110
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0: // L92
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0: // L92
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3: // for_footer_L110
debug: Sealing block@4: // after_for_L110
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1: // for_header_L110
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0: // L92
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1: // for_header_L110
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0: // L92
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1: // for_header_L110
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0: // L92
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1: // for_header_L110
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0: // L92
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L110
debug: Sealing block@0: // L124
debug: Terminated block@0: // L124
debug: Sealing block@1: // if_body_L147
debug: Terminated block@1: // if_body_L147
debug: Sealing block@2: // after_if_else_L146
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L146
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L124
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L146
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0: // L124
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L146
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L124
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L146
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@3: // for_header_L150
debug: Terminated block@3: // for_header_L150
debug: Sealing block@4: // for_body_L151
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3: // for_header_L150
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3: // for_header_L150
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3: // for_header_L150
debug: Terminated block@4: // for_body_L151
debug: Sealing block@5: // for_footer_L150
debug: Terminated block@5: // for_footer_L150
debug: Sealing block@3: // for_header_L150
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@2) in block@2: // after_if_else_L146
debug: Added i#2 to Phi node: let i#1: uint64 = φ(i#0 <- block@2, i#2 <- block@5) in block@5: // for_footer_L150
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L146
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0: // L124
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L147
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2: // after_if_else_L146
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@5) in block@5: // for_footer_L150
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2: // after_if_else_L146
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@5) in block@5: // for_footer_L150
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L146
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L124
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2: // after_if_else_L146
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) in block@5: // for_footer_L150
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0 in current definition for 3 blocks
debug: Sealing block@6: // after_for_L150
debug: Terminated block@6: // after_for_L150
debug: Sealing block@0: // L157
debug: Terminated block@0: // L157
debug: Sealing block@0: // L189
debug: Terminated block@0: // L189
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L199
debug: Terminated block@1: // for_header_L199
debug: Sealing block@2: // for_body_L200
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L199
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L199
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1: // for_header_L199
debug: Terminated block@2: // for_body_L200
debug: Sealing block@3: // for_footer_L199
debug: Terminated block@3: // for_footer_L199
debug: Sealing block@1: // for_header_L199
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L189
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L199
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0: // L189
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3: // for_footer_L199
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0: // L189
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4: // after_for_L199
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1: // for_header_L199
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L189
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L199
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5: // for_header_L204
debug: Terminated block@5: // for_header_L204
debug: Sealing block@6: // for_body_L205
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5: // for_header_L204
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5: // for_header_L204
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5: // for_header_L204
debug: Terminated block@6: // for_body_L205
debug: Sealing block@7: // for_footer_L204
debug: Terminated block@7: // for_footer_L204
debug: Sealing block@5: // for_header_L204
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4: // after_for_L199
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7: // for_footer_L204
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L199
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4: // after_for_L199
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4: // after_for_L199
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7: // for_footer_L204
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4: // after_for_L199
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8: // after_for_L204
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5: // for_header_L204
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1: // for_header_L199
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0: // L189
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4: // after_for_L199
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // for_header_L204
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4: // after_for_L199
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5: // for_header_L204
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4: // after_for_L199
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8: // after_for_L204
debug: Sealing block@0: // L217
debug: Terminated block@0: // L217
debug: Sealing block@0: // L240
debug: Terminated block@0: // L240
debug: Sealing block@0: // L252
debug: Terminated block@0: // L252
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L269
debug: Terminated block@1: // for_header_L269
debug: Sealing block@2: // for_body_L270
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L269
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1: // for_header_L269
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1: // for_header_L269
debug: Terminated block@2: // for_body_L270
debug: Sealing block@3: // for_footer_L269
debug: Terminated block@3: // for_footer_L269
debug: Sealing block@1: // for_header_L269
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L252
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L269
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L252
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3: // for_footer_L269
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0: // L252
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3: // for_footer_L269
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0: // L252
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3: // for_footer_L269
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4: // after_for_L269
debug: Terminated block@4: // after_for_L269
debug: Sealing block@0: // L278
debug: Terminated block@0: // L278
debug: Sealing block@0: // L306
debug: Terminated block@0: // L306
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L327
debug: Terminated block@1: // for_header_L327
debug: Sealing block@2: // for_body_L328
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1: // for_header_L327
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L327
debug: Terminated block@2: // for_body_L328
debug: Sealing block@3: // for_footer_L327
debug: Terminated block@3: // for_footer_L327
debug: Sealing block@1: // for_header_L327
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L306
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3: // for_footer_L327
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0: // L306
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3: // for_footer_L327
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L306
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3: // for_footer_L327
debug: Sealing block@4: // after_for_L327
debug: Terminated block@4: // after_for_L327
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@2: // while_body_L12
debug: Terminated block@2: // while_body_L12
debug: Sealing block@3: // if_body_L13
debug: Terminated block@3: // if_body_L13
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L63
debug: Terminated block@0: // L63
debug: Sealing block@0: // L68
debug: Terminated block@0: // L68
debug: Sealing block@0: // L57
debug: Terminated block@0: // L57
debug: Sealing block@0: // L73
debug: Terminated block@0: // L73
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@0: // L9
debug: Terminated block@0: // L9
debug: Sealing block@1: // on_create_L5
debug: Terminated block@1: // on_create_L5
debug: Sealing block@2: // entrypoint_L5
debug: Terminated block@2: // entrypoint_L5
debug: Sealing block@3: // or_contd_L10
debug: Terminated block@3: // or_contd_L10
debug: Sealing block@4: // bool_true_L10
debug: Terminated block@4: // bool_true_L10
debug: Sealing block@5: // bool_false_L10
debug: Terminated block@5: // bool_false_L10
debug: Sealing block@6: // bool_merge_L10
debug: Created Phi assignment: let or_result%0#2: bool = undefined while trying to resolve 'or_result%0' in block@6: // bool_merge_L10
debug: Added or_result%0#0 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@4) in block@4: // bool_true_L10
debug: Added or_result%0#1 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@4, or_result%0#1 <- block@5) in block@5: // bool_false_L10
debug: Terminated block@6: // bool_merge_L10
debug: Sealing block@7: // and_contd_L13
debug: Terminated block@7: // and_contd_L13
debug: Sealing block@8: // bool_true_L13
debug: Terminated block@8: // bool_true_L13
debug: Sealing block@9: // bool_false_L13
debug: Terminated block@9: // bool_false_L13
debug: Sealing block@10: // bool_merge_L13
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@10: // bool_merge_L13
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@8) in block@8: // bool_true_L13
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@8, and_result%0#1 <- block@9) in block@9: // bool_false_L13
debug: Terminated block@10: // bool_merge_L13
debug: Sealing block@11: // or_contd_L16
debug: Terminated block@11: // or_contd_L16
debug: Sealing block@12: // bool_true_L16
debug: Terminated block@12: // bool_true_L16
debug: Sealing block@13: // bool_false_L16
debug: Terminated block@13: // bool_false_L16
debug: Sealing block@14: // bool_merge_L16
debug: Created Phi assignment: let or_result%1#2: bool = undefined while trying to resolve 'or_result%1' in block@14: // bool_merge_L16
debug: Added or_result%1#0 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@12) in block@12: // bool_true_L16
debug: Added or_result%1#1 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@12, or_result%1#1 <- block@13) in block@13: // bool_false_L16
debug: Terminated block@14: // bool_merge_L16
debug: Sealing block@15: // and_contd_L19
debug: Terminated block@15: // and_contd_L19
debug: Sealing block@16: // bool_true_L19
debug: Terminated block@16: // bool_true_L19
debug: Sealing block@17: // bool_false_L19
debug: Terminated block@17: // bool_false_L19
debug: Sealing block@18: // bool_merge_L19
debug: Created Phi assignment: let and_result%1#2: bool = undefined while trying to resolve 'and_result%1' in block@18: // bool_merge_L19
debug: Added and_result%1#0 to Phi node: let and_result%1#2: bool = φ(and_result%1#0 <- block@16) in block@16: // bool_true_L19
debug: Added and_result%1#1 to Phi node: let and_result%1#2: bool = φ(and_result%1#0 <- block@16, and_result%1#1 <- block@17) in block@17: // bool_false_L19
debug: Terminated block@18: // bool_merge_L19
debug: Sealing block@19: // and_contd_L22
debug: Terminated block@19: // and_contd_L22
debug: Sealing block@20: // bool_true_L22
debug: Terminated block@20: // bool_true_L22
debug: Sealing block@21: // bool_false_L22
debug: Terminated block@21: // bool_false_L22
debug: Sealing block@22: // bool_merge_L22
debug: Created Phi assignment: let and_result%2#2: bool = undefined while trying to resolve 'and_result%2' in block@22: // bool_merge_L22
debug: Added and_result%2#0 to Phi node: let and_result%2#2: bool = φ(and_result%2#0 <- block@20) in block@20: // bool_true_L22
debug: Added and_result%2#1 to Phi node: let and_result%2#2: bool = φ(and_result%2#0 <- block@20, and_result%2#1 <- block@21) in block@21: // bool_false_L22
debug: Terminated block@22: // bool_merge_L22
debug: Sealing block@23: // and_contd_L25
debug: Terminated block@23: // and_contd_L25
debug: Sealing block@24: // bool_true_L25
debug: Terminated block@24: // bool_true_L25
debug: Sealing block@25: // bool_false_L25
debug: Terminated block@25: // bool_false_L25
debug: Sealing block@26: // bool_merge_L25
debug: Created Phi assignment: let and_result%3#2: bool = undefined while trying to resolve 'and_result%3' in block@26: // bool_merge_L25
debug: Added and_result%3#0 to Phi node: let and_result%3#2: bool = φ(and_result%3#0 <- block@24) in block@24: // bool_true_L25
debug: Added and_result%3#1 to Phi node: let and_result%3#2: bool = φ(and_result%3#0 <- block@24, and_result%3#1 <- block@25) in block@25: // bool_false_L25
debug: Terminated block@26: // bool_merge_L25
debug: Sealing block@27: // and_contd_L28
debug: Terminated block@27: // and_contd_L28
debug: Sealing block@28: // bool_true_L28
debug: Terminated block@28: // bool_true_L28
debug: Sealing block@29: // bool_false_L28
debug: Terminated block@29: // bool_false_L28
debug: Sealing block@30: // bool_merge_L28
debug: Created Phi assignment: let and_result%4#2: bool = undefined while trying to resolve 'and_result%4' in block@30: // bool_merge_L28
debug: Added and_result%4#0 to Phi node: let and_result%4#2: bool = φ(and_result%4#0 <- block@28) in block@28: // bool_true_L28
debug: Added and_result%4#1 to Phi node: let and_result%4#2: bool = φ(and_result%4#0 <- block@28, and_result%4#1 <- block@29) in block@29: // bool_false_L28
debug: Terminated block@30: // bool_merge_L28
debug: Sealing block@31: // and_contd_L31
debug: Terminated block@31: // and_contd_L31
debug: Sealing block@32: // bool_true_L31
debug: Terminated block@32: // bool_true_L31
debug: Sealing block@33: // bool_false_L31
debug: Terminated block@33: // bool_false_L31
debug: Sealing block@34: // bool_merge_L31
debug: Created Phi assignment: let and_result%5#2: bool = undefined while trying to resolve 'and_result%5' in block@34: // bool_merge_L31
debug: Added and_result%5#0 to Phi node: let and_result%5#2: bool = φ(and_result%5#0 <- block@32) in block@32: // bool_true_L31
debug: Added and_result%5#1 to Phi node: let and_result%5#2: bool = φ(and_result%5#0 <- block@32, and_result%5#1 <- block@33) in block@33: // bool_false_L31
debug: Terminated block@34: // bool_merge_L31
debug: Sealing block@35: // and_contd_L37
debug: Terminated block@35: // and_contd_L37
debug: Sealing block@36: // bool_true_L37
debug: Terminated block@36: // bool_true_L37
debug: Sealing block@37: // bool_false_L37
debug: Terminated block@37: // bool_false_L37
debug: Sealing block@38: // bool_merge_L37
debug: Created Phi assignment: let and_result%6#2: bool = undefined while trying to resolve 'and_result%6' in block@38: // bool_merge_L37
debug: Added and_result%6#0 to Phi node: let and_result%6#2: bool = φ(and_result%6#0 <- block@36) in block@36: // bool_true_L37
debug: Added and_result%6#1 to Phi node: let and_result%6#2: bool = φ(and_result%6#0 <- block@36, and_result%6#1 <- block@37) in block@37: // bool_false_L37
debug: Terminated block@38: // bool_merge_L37
debug: Sealing block@39: // ternary_true_L40
debug: Terminated block@39: // ternary_true_L40
debug: Sealing block@40: // ternary_false_L40
debug: Terminated block@40: // ternary_false_L40
debug: Sealing block@41: // ternary_merge_L40
debug: Created Phi assignment: let ternary_result%0#2: bool = undefined while trying to resolve 'ternary_result%0' in block@41: // ternary_merge_L40
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@39) in block@39: // ternary_true_L40
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@39, ternary_result%0#1 <- block@40) in block@40: // ternary_false_L40
debug: Terminated block@41: // ternary_merge_L40
debug: Sealing block@42: // and_contd_L43
debug: Terminated block@42: // and_contd_L43
debug: Sealing block@43: // bool_true_L43
debug: Terminated block@43: // bool_true_L43
debug: Sealing block@44: // bool_false_L43
debug: Terminated block@44: // bool_false_L43
debug: Sealing block@45: // bool_merge_L43
debug: Created Phi assignment: let and_result%7#2: bool = undefined while trying to resolve 'and_result%7' in block@45: // bool_merge_L43
debug: Added and_result%7#0 to Phi node: let and_result%7#2: bool = φ(and_result%7#0 <- block@43) in block@43: // bool_true_L43
debug: Added and_result%7#1 to Phi node: let and_result%7#2: bool = φ(and_result%7#0 <- block@43, and_result%7#1 <- block@44) in block@44: // bool_false_L43
debug: Terminated block@45: // bool_merge_L43
debug: Sealing block@46: // ternary_true_L46
debug: Terminated block@46: // ternary_true_L46
debug: Sealing block@47: // ternary_false_L46
debug: Terminated block@47: // ternary_false_L46
debug: Sealing block@48: // ternary_merge_L46
debug: Created Phi assignment: let ternary_result%1#2: bool = undefined while trying to resolve 'ternary_result%1' in block@48: // ternary_merge_L46
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: bool = φ(ternary_result%1#0 <- block@46) in block@46: // ternary_true_L46
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: bool = φ(ternary_result%1#0 <- block@46, ternary_result%1#1 <- block@47) in block@47: // ternary_false_L46
debug: Terminated block@48: // ternary_merge_L46
debug: Sealing block@49: // and_contd_L49
debug: Terminated block@49: // and_contd_L49
debug: Sealing block@50: // bool_true_L49
debug: Terminated block@50: // bool_true_L49
debug: Sealing block@51: // bool_false_L49
debug: Terminated block@51: // bool_false_L49
debug: Sealing block@52: // bool_merge_L49
debug: Created Phi assignment: let and_result%8#2: bool = undefined while trying to resolve 'and_result%8' in block@52: // bool_merge_L49
debug: Added and_result%8#0 to Phi node: let and_result%8#2: bool = φ(and_result%8#0 <- block@50) in block@50: // bool_true_L49
debug: Added and_result%8#1 to Phi node: let and_result%8#2: bool = φ(and_result%8#0 <- block@50, and_result%8#1 <- block@51) in block@51: // bool_false_L49
debug: Terminated block@52: // bool_merge_L49
debug: Sealing block@0: // L54
debug: Terminated block@0: // L54
debug: Output IR to conditional_execution/out/ConditionalExecutionContract.ssa.ir
info: Optimizing test_cases.conditional_execution.contract.ConditionalExecutionContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable or_result%0#2
debug: Removing unused variable or_result%1#2
debug: Removing unused variable and_result%2#2
debug: Removing unused variable and_result%4#2
debug: Removing unused variable ternary_result%0#2
debug: Removing unused variable ternary_result%1#2
debug: Not removing unused assignment since source is not marked as pure: let tmp%8#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let tmp%9#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to conditional_execution/out/ConditionalExecutionContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable or_result%0#0
debug: Removing unused variable or_result%0#1
debug: Removing unused variable or_result%1#0
debug: Removing unused variable or_result%1#1
debug: Removing unused variable and_result%2#0
debug: Removing unused variable and_result%2#1
debug: Removing unused variable and_result%4#0
debug: Removing unused variable and_result%4#1
debug: Not removing unused assignment since source is not marked as pure: let tmp%8#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let tmp%9#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%0#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%0#1: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%1#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%1#1: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@4: // bool_true_L10
debug: replaced goto tmp%1#0 ? block@6 : block@6 with goto block@6
debug: Removed empty block: block@5: // bool_false_L10
debug: Removed empty block: block@12: // bool_true_L16
debug: replaced goto tmp%3#0 ? block@14 : block@14 with goto block@14
debug: Removed empty block: block@13: // bool_false_L16
debug: Removed empty block: block@20: // bool_true_L22
debug: replaced goto tmp%5#0 ? block@22 : block@22 with goto block@22
debug: Removed empty block: block@21: // bool_false_L22
debug: Removed empty block: block@28: // bool_true_L28
debug: replaced goto tmp%7#0 ? block@30 : block@30 with goto block@30
debug: Removed empty block: block@29: // bool_false_L28
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to conditional_execution/out/ConditionalExecutionContract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let tmp%1#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Not removing unused assignment since source is not marked as pure: let tmp%3#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Not removing unused assignment since source is not marked as pure: let tmp%5#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Not removing unused assignment since source is not marked as pure: let tmp%7#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Not removing unused assignment since source is not marked as pure: let tmp%8#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let tmp%9#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%0#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%0#1: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%1#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%1#1: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: No optimizations performed in pass 3, ending loop
debug: Removing Phis from test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Removing Phis from test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a
debug: Removing Phis from test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b
debug: Removing Phis from test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset
debug: Removing Phis from test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c
debug: Removing Phis from test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__
debug: Removing Phis from test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: Coalescing local variables in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program using strategy RootOperandGrouping
debug: Coalescing and_result%0#0 with [and_result%0#5, and_result%0#1, and_result%0#2]
debug: Coalescing and_result%1#0 with [and_result%1#5, and_result%1#1, and_result%1#2]
debug: Coalescing and_result%3#0 with [and_result%3#5, and_result%3#1, and_result%3#2]
debug: Coalescing and_result%5#0 with [and_result%5#5, and_result%5#1, and_result%5#2]
debug: Coalescing and_result%6#0 with [and_result%6#5, and_result%6#1, and_result%6#2]
debug: Coalescing ternary_result%0#0 with [ternary_result%0#1]
debug: Coalescing and_result%7#0 with [and_result%7#5, and_result%7#1, and_result%7#2]
debug: Coalescing ternary_result%1#0 with [ternary_result%1#1]
debug: Coalescing and_result%8#0 with [and_result%8#5, and_result%8#1, and_result%8#2]
debug: Coalescing resulted in 51 replacement/s
debug: Coalescing local variables in test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__ using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Sequentializing parallel copies in test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a
debug: Sequentializing parallel copies in test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b
debug: Sequentializing parallel copies in test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset
debug: Sequentializing parallel copies in test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c
debug: Sequentializing parallel copies in test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__
debug: Sequentializing parallel copies in test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to conditional_execution/out/ConditionalExecutionContract.destructured.ir
debug: Inserted main_block@0.ops[1]: 'store app_id%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[3]: 'load app_id%0#0' with 'load app_id%0#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@6.ops[3]: 'store maybe_exists%0#0 to l-stack (copy)'
debug: Replaced main_bool_merge@6.ops[6]: 'load maybe_exists%0#0' with 'load maybe_exists%0#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@6.ops[5]: 'store maybe_value%0#0 to l-stack (copy)'
debug: Replaced main_bool_merge@6.ops[9]: 'load maybe_value%0#0' with 'load maybe_value%0#0 from l-stack (no copy)'
debug: Inserted main_and_contd@7.ops[3]: 'store maybe_exists%1#0 to l-stack (copy)'
debug: Replaced main_and_contd@7.ops[6]: 'load maybe_exists%1#0' with 'load maybe_exists%1#0 from l-stack (no copy)'
debug: Inserted main_and_contd@7.ops[5]: 'store maybe_value%1#0 to l-stack (copy)'
debug: Replaced main_and_contd@7.ops[9]: 'load maybe_value%1#0' with 'load maybe_value%1#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@10.ops[4]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_bool_merge@10.ops[6]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@14.ops[3]: 'store maybe_exists%2#0 to l-stack (copy)'
debug: Replaced main_bool_merge@14.ops[6]: 'load maybe_exists%2#0' with 'load maybe_exists%2#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@14.ops[5]: 'store maybe_value%2#0 to l-stack (copy)'
debug: Replaced main_bool_merge@14.ops[9]: 'load maybe_value%2#0' with 'load maybe_value%2#0 from l-stack (no copy)'
debug: Inserted main_and_contd@15.ops[3]: 'store maybe_exists%3#0 to l-stack (copy)'
debug: Replaced main_and_contd@15.ops[6]: 'load maybe_exists%3#0' with 'load maybe_exists%3#0 from l-stack (no copy)'
debug: Inserted main_and_contd@15.ops[5]: 'store maybe_value%3#0 to l-stack (copy)'
debug: Replaced main_and_contd@15.ops[9]: 'load maybe_value%3#0' with 'load maybe_value%3#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@18.ops[4]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_bool_merge@18.ops[6]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@22.ops[3]: 'store maybe_exists%4#0 to l-stack (copy)'
debug: Replaced main_bool_merge@22.ops[6]: 'load maybe_exists%4#0' with 'load maybe_exists%4#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@22.ops[5]: 'store maybe_value%4#0 to l-stack (copy)'
debug: Replaced main_bool_merge@22.ops[9]: 'load maybe_value%4#0' with 'load maybe_value%4#0 from l-stack (no copy)'
debug: Inserted main_and_contd@23.ops[3]: 'store maybe_exists%5#0 to l-stack (copy)'
debug: Replaced main_and_contd@23.ops[6]: 'load maybe_exists%5#0' with 'load maybe_exists%5#0 from l-stack (no copy)'
debug: Inserted main_and_contd@23.ops[5]: 'store maybe_value%5#0 to l-stack (copy)'
debug: Replaced main_and_contd@23.ops[9]: 'load maybe_value%5#0' with 'load maybe_value%5#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@26.ops[4]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_bool_merge@26.ops[6]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@30.ops[3]: 'store maybe_exists%6#0 to l-stack (copy)'
debug: Replaced main_bool_merge@30.ops[6]: 'load maybe_exists%6#0' with 'load maybe_exists%6#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@30.ops[5]: 'store maybe_value%6#0 to l-stack (copy)'
debug: Replaced main_bool_merge@30.ops[9]: 'load maybe_value%6#0' with 'load maybe_value%6#0 from l-stack (no copy)'
debug: Inserted main_and_contd@31.ops[3]: 'store maybe_exists%7#0 to l-stack (copy)'
debug: Replaced main_and_contd@31.ops[6]: 'load maybe_exists%7#0' with 'load maybe_exists%7#0 from l-stack (no copy)'
debug: Inserted main_and_contd@31.ops[5]: 'store maybe_value%7#0 to l-stack (copy)'
debug: Replaced main_and_contd@31.ops[9]: 'load maybe_value%7#0' with 'load maybe_value%7#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@34.ops[11]: 'store maybe_exists%8#0 to l-stack (copy)'
debug: Replaced main_bool_merge@34.ops[14]: 'load maybe_exists%8#0' with 'load maybe_exists%8#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@34.ops[13]: 'store maybe_value%8#0 to l-stack (copy)'
debug: Replaced main_bool_merge@34.ops[17]: 'load maybe_value%8#0' with 'load maybe_value%8#0 from l-stack (no copy)'
debug: Inserted main_and_contd@35.ops[3]: 'store maybe_exists%9#0 to l-stack (copy)'
debug: Replaced main_and_contd@35.ops[6]: 'load maybe_exists%9#0' with 'load maybe_exists%9#0 from l-stack (no copy)'
debug: Inserted main_and_contd@35.ops[5]: 'store maybe_value%9#0 to l-stack (copy)'
debug: Replaced main_and_contd@35.ops[9]: 'load maybe_value%9#0' with 'load maybe_value%9#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@38.ops[4]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_bool_merge@38.ops[6]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_ternary_merge@41.ops[3]: 'store maybe_exists%10#0 to l-stack (copy)'
debug: Replaced main_ternary_merge@41.ops[6]: 'load maybe_exists%10#0' with 'load maybe_exists%10#0 from l-stack (no copy)'
debug: Inserted main_ternary_merge@41.ops[5]: 'store maybe_value%10#0 to l-stack (copy)'
debug: Replaced main_ternary_merge@41.ops[9]: 'load maybe_value%10#0' with 'load maybe_value%10#0 from l-stack (no copy)'
debug: Inserted main_and_contd@42.ops[3]: 'store maybe_exists%11#0 to l-stack (copy)'
debug: Replaced main_and_contd@42.ops[6]: 'load maybe_exists%11#0' with 'load maybe_exists%11#0 from l-stack (no copy)'
debug: Inserted main_and_contd@42.ops[5]: 'store maybe_value%11#0 to l-stack (copy)'
debug: Replaced main_and_contd@42.ops[9]: 'load maybe_value%11#0' with 'load maybe_value%11#0 from l-stack (no copy)'
debug: Inserted main_bool_merge@45.ops[4]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_bool_merge@45.ops[6]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_ternary_merge@48.ops[3]: 'store maybe_exists%12#0 to l-stack (copy)'
debug: Replaced main_ternary_merge@48.ops[6]: 'load maybe_exists%12#0' with 'load maybe_exists%12#0 from l-stack (no copy)'
debug: Inserted main_ternary_merge@48.ops[5]: 'store maybe_value%12#0 to l-stack (copy)'
debug: Replaced main_ternary_merge@48.ops[9]: 'load maybe_value%12#0' with 'load maybe_value%12#0 from l-stack (no copy)'
debug: Inserted main_and_contd@49.ops[3]: 'store maybe_exists%13#0 to l-stack (copy)'
debug: Replaced main_and_contd@49.ops[6]: 'load maybe_exists%13#0' with 'load maybe_exists%13#0 from l-stack (no copy)'
debug: Inserted main_and_contd@49.ops[5]: 'store maybe_value%13#0 to l-stack (copy)'
debug: Replaced main_and_contd@49.ops[9]: 'load maybe_value%13#0' with 'load maybe_value%13#0 from l-stack (no copy)'
debug: Found 23 edge set/s for test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Allocated 7 variable/s to x-stack: and_result%0#0, and_result%1#0, and_result%3#0, and_result%5#0, and_result%6#0, and_result%7#0, and_result%8#0
debug: shared x-stack for main_bool_true@8 -> main_bool_merge@10: and_result%0#0
debug: shared x-stack for main_bool_false@9 -> main_bool_merge@10: and_result%0#0
debug: shared x-stack for main_bool_true@16 -> main_bool_merge@18: and_result%1#0
debug: shared x-stack for main_bool_false@17 -> main_bool_merge@18: and_result%1#0
debug: shared x-stack for main_bool_true@24 -> main_bool_merge@26: and_result%3#0
debug: shared x-stack for main_bool_false@25 -> main_bool_merge@26: and_result%3#0
debug: shared x-stack for main_bool_true@32 -> main_bool_merge@34: and_result%5#0
debug: shared x-stack for main_bool_false@33 -> main_bool_merge@34: and_result%5#0
debug: shared x-stack for main_bool_true@36 -> main_bool_merge@38: and_result%6#0
debug: shared x-stack for main_bool_false@37 -> main_bool_merge@38: and_result%6#0
debug: shared x-stack for main_bool_true@43 -> main_bool_merge@45: and_result%7#0
debug: shared x-stack for main_bool_false@44 -> main_bool_merge@45: and_result%7#0
debug: shared x-stack for main_bool_true@50 -> main_bool_merge@52: and_result%8#0
debug: shared x-stack for main_bool_false@51 -> main_bool_merge@52: and_result%8#0
info: Writing conditional_execution/out/ConditionalExecutionContract.approval.teal
info: Writing conditional_execution/out/ConditionalExecutionContract.clear.teal
info: Writing conditional_execution/out/ConditionalExecutionContract.approval.bin
info: Writing conditional_execution/out/ConditionalExecutionContract.clear.bin