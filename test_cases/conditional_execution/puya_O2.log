debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=False, output_arc56=False, output_ssa_ir=False, output_optimization_ir=False, output_destructured_ir=True, output_memory_ir=False, output_bytecode=True, output_teal_intermediates=False, output_op_statistics=True, debug_level=0, optimization_level=2, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, optimizations_override=immutabledict({}), expand_all_bytes=False, paths=['conditional_execution'], resource_encoding='value', output_awst=False, output_awst_json=False, output_source_annotations_json=False, output_client=False, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
conditional_execution/contract.py:11:9 warning: expression result is ignored
conditional_execution/contract.py:17:9 warning: expression result is ignored
conditional_execution/contract.py:23:9 warning: expression result is ignored
conditional_execution/contract.py:29:9 warning: expression result is ignored
conditional_execution/contract.py:35:9 warning: expression result is ignored
conditional_execution/contract.py:41:9 warning: expression result is ignored
conditional_execution/contract.py:47:9 warning: expression result is ignored
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Terminated block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@5
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@2) in block@2
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let required_budget_with_buffer#3: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@3
debug: Added required_budget_with_buffer#3 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@2, required_budget_with_buffer#3 <- block@3) in block@3
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@4
debug: Created Phi assignment: let required_budget_with_buffer#4: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@4
debug: Added required_budget_with_buffer#4 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@2, required_budget_with_buffer#3 <- block@3, required_budget_with_buffer#4 <- block@4) in block@4
debug: Added required_budget_with_buffer#2 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#2 <- block@5) in block@5
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@5
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@2) in block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let fee_source#3: uint64 = undefined while trying to resolve 'fee_source' in block@3
debug: Added fee_source#3 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@2, fee_source#3 <- block@3) in block@3
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@4
debug: Created Phi assignment: let fee_source#4: uint64 = undefined while trying to resolve 'fee_source' in block@4
debug: Added fee_source#4 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@2, fee_source#3 <- block@3, fee_source#4 <- block@4) in block@4
debug: Added fee_source#2 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#2 <- block@5) in block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#3: uint64 = φ(required_budget_with_buffer#1 <- block@2) in block@2
debug: Replacing trivial Phi node: let required_budget_with_buffer#3: uint64 = φ(required_budget_with_buffer#1 <- block@2) (required_budget_with_buffer#3) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#3: uint64 = φ(required_budget_with_buffer#1 <- block@2)
debug: Replaced trivial Phi node: let required_budget_with_buffer#3: uint64 = φ(required_budget_with_buffer#1 <- block@2) (required_budget_with_buffer#3) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#3: uint64 = φ(fee_source#1 <- block@2) in block@2
debug: Replacing trivial Phi node: let fee_source#3: uint64 = φ(fee_source#1 <- block@2) (fee_source#3) with fee_source#1
debug: Deleting Phi assignment: let fee_source#3: uint64 = φ(fee_source#1 <- block@2)
debug: Replaced trivial Phi node: let fee_source#3: uint64 = φ(fee_source#1 <- block@2) (fee_source#3) with fee_source#1 in current definition for 1 blocks
debug: Sealing block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#4: uint64 = φ(required_budget_with_buffer#1 <- block@2) in block@2
debug: Replacing trivial Phi node: let required_budget_with_buffer#4: uint64 = φ(required_budget_with_buffer#1 <- block@2) (required_budget_with_buffer#4) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#4: uint64 = φ(required_budget_with_buffer#1 <- block@2)
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@2, required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@2, required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4)
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#4: uint64 = φ(required_budget_with_buffer#1 <- block@2) (required_budget_with_buffer#4) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@2, required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 5 blocks
debug: Added fee_source#1 to Phi node: let fee_source#4: uint64 = φ(fee_source#1 <- block@2) in block@2
debug: Replacing trivial Phi node: let fee_source#4: uint64 = φ(fee_source#1 <- block@2) (fee_source#4) with fee_source#1
debug: Deleting Phi assignment: let fee_source#4: uint64 = φ(fee_source#1 <- block@2)
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@2, fee_source#1 <- block@3, fee_source#1 <- block@4) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@2, fee_source#1 <- block@3, fee_source#1 <- block@4)
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@5) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#4: uint64 = φ(fee_source#1 <- block@2) (fee_source#4) with fee_source#1 in current definition for 1 blocks
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@2, fee_source#1 <- block@3, fee_source#1 <- block@4) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@5) (fee_source#1) with fee_source#0 in current definition for 5 blocks
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'value_internal%0' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let value_internal%0#1: uint64 = undefined while trying to resolve 'value_internal%0' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added value_internal%0#0 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0) in block@0
debug: Added value_internal%0#2 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'write_end' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_end#1: uint64 = undefined while trying to resolve 'write_end' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Looking for 'read_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_offset#1: uint64 = undefined while trying to resolve 'read_offset' in block@3
debug: Looking for 'read_step' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_step#1: uint64 = undefined while trying to resolve 'read_step' in block@3
debug: Terminated block@4
debug: Sealing block@3
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4) in block@4
debug: Added write_end#0 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2) in block@2
debug: Added write_end#1 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0
debug: Deleting Phi assignment: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4)
debug: Replaced trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4) in block@4
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0 in current definition for 2 blocks
debug: Added read_offset#0 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2) in block@2
debug: Added read_offset#2 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4) in block@4
debug: Created Phi assignment: let read_step#2: uint64 = undefined while trying to resolve 'read_step' in block@2
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0) in block@0
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0
debug: Deleting Phi assignment: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1)
debug: Replaced trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0 in current definition for 1 blocks
debug: Added read_step#0 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2) in block@2
debug: Added read_step#1 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0
debug: Deleting Phi assignment: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4)
debug: Replaced trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0 in current definition for 2 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'value_internal%0' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let value_internal%0#1: uint64 = undefined while trying to resolve 'value_internal%0' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added value_internal%0#0 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0) in block@0
debug: Added value_internal%0#2 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'value_internal%1' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let value_internal%1#1: uint64 = undefined while trying to resolve 'value_internal%1' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'head_and_tail_length' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_and_tail_length#1: uint64 = undefined while trying to resolve 'head_and_tail_length' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added value_internal%1#0 to Phi node: let value_internal%1#1: uint64 = φ(value_internal%1#0 <- block@4) in block@4
debug: Added value_internal%1#2 to Phi node: let value_internal%1#1: uint64 = φ(value_internal%1#0 <- block@4, value_internal%1#2 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added head_and_tail_length#0 to Phi node: let head_and_tail_length#1: uint64 = φ(head_and_tail_length#0 <- block@4) in block@4
debug: Added head_and_tail_length#1 to Phi node: let head_and_tail_length#1: uint64 = φ(head_and_tail_length#0 <- block@4, head_and_tail_length#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let head_and_tail_length#1: uint64 = φ(head_and_tail_length#0 <- block@4, head_and_tail_length#1 <- block@7) (head_and_tail_length#1) with head_and_tail_length#0
debug: Deleting Phi assignment: let head_and_tail_length#1: uint64 = φ(head_and_tail_length#0 <- block@4, head_and_tail_length#1 <- block@7)
debug: Replaced trivial Phi node: let head_and_tail_length#1: uint64 = φ(head_and_tail_length#0 <- block@4, head_and_tail_length#1 <- block@7) (head_and_tail_length#1) with head_and_tail_length#0 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'value_internal%0' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let value_internal%0#1: uint64 = undefined while trying to resolve 'value_internal%0' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added value_internal%0#0 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0) in block@0
debug: Added value_internal%0#2 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'value_internal%0' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let value_internal%0#1: uint64 = undefined while trying to resolve 'value_internal%0' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added value_internal%0#0 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0) in block@0
debug: Added value_internal%0#2 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Created Phi assignment: let or_result%0#2: bool = undefined while trying to resolve 'or_result%0' in block@6
debug: Added or_result%0#0 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@4) in block@4
debug: Added or_result%0#1 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@4, or_result%0#1 <- block@5) in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@10
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@8) in block@8
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@8, and_result%0#1 <- block@9) in block@9
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@14
debug: Created Phi assignment: let or_result%1#2: bool = undefined while trying to resolve 'or_result%1' in block@14
debug: Added or_result%1#0 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@12) in block@12
debug: Added or_result%1#1 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@12, or_result%1#1 <- block@13) in block@13
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@16
debug: Terminated block@16
debug: Sealing block@17
debug: Terminated block@17
debug: Sealing block@18
debug: Created Phi assignment: let and_result%1#2: bool = undefined while trying to resolve 'and_result%1' in block@18
debug: Added and_result%1#0 to Phi node: let and_result%1#2: bool = φ(and_result%1#0 <- block@16) in block@16
debug: Added and_result%1#1 to Phi node: let and_result%1#2: bool = φ(and_result%1#0 <- block@16, and_result%1#1 <- block@17) in block@17
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: Sealing block@20
debug: Terminated block@20
debug: Sealing block@21
debug: Terminated block@21
debug: Sealing block@22
debug: Created Phi assignment: let and_result%2#2: bool = undefined while trying to resolve 'and_result%2' in block@22
debug: Added and_result%2#0 to Phi node: let and_result%2#2: bool = φ(and_result%2#0 <- block@20) in block@20
debug: Added and_result%2#1 to Phi node: let and_result%2#2: bool = φ(and_result%2#0 <- block@20, and_result%2#1 <- block@21) in block@21
debug: Terminated block@22
debug: Sealing block@23
debug: Terminated block@23
debug: Sealing block@24
debug: Terminated block@24
debug: Sealing block@25
debug: Terminated block@25
debug: Sealing block@26
debug: Created Phi assignment: let and_result%3#2: bool = undefined while trying to resolve 'and_result%3' in block@26
debug: Added and_result%3#0 to Phi node: let and_result%3#2: bool = φ(and_result%3#0 <- block@24) in block@24
debug: Added and_result%3#1 to Phi node: let and_result%3#2: bool = φ(and_result%3#0 <- block@24, and_result%3#1 <- block@25) in block@25
debug: Terminated block@26
debug: Sealing block@27
debug: Terminated block@27
debug: Sealing block@28
debug: Terminated block@28
debug: Sealing block@29
debug: Terminated block@29
debug: Sealing block@30
debug: Created Phi assignment: let and_result%4#2: bool = undefined while trying to resolve 'and_result%4' in block@30
debug: Added and_result%4#0 to Phi node: let and_result%4#2: bool = φ(and_result%4#0 <- block@28) in block@28
debug: Added and_result%4#1 to Phi node: let and_result%4#2: bool = φ(and_result%4#0 <- block@28, and_result%4#1 <- block@29) in block@29
debug: Terminated block@30
debug: Sealing block@31
debug: Terminated block@31
debug: Sealing block@32
debug: Terminated block@32
debug: Sealing block@33
debug: Terminated block@33
debug: Sealing block@34
debug: Created Phi assignment: let and_result%5#2: bool = undefined while trying to resolve 'and_result%5' in block@34
debug: Added and_result%5#0 to Phi node: let and_result%5#2: bool = φ(and_result%5#0 <- block@32) in block@32
debug: Added and_result%5#1 to Phi node: let and_result%5#2: bool = φ(and_result%5#0 <- block@32, and_result%5#1 <- block@33) in block@33
debug: Terminated block@34
debug: Sealing block@35
debug: Terminated block@35
debug: Sealing block@36
debug: Terminated block@36
debug: Sealing block@37
debug: Terminated block@37
debug: Sealing block@38
debug: Created Phi assignment: let and_result%6#2: bool = undefined while trying to resolve 'and_result%6' in block@38
debug: Added and_result%6#0 to Phi node: let and_result%6#2: bool = φ(and_result%6#0 <- block@36) in block@36
debug: Added and_result%6#1 to Phi node: let and_result%6#2: bool = φ(and_result%6#0 <- block@36, and_result%6#1 <- block@37) in block@37
debug: Terminated block@38
debug: Sealing block@39
debug: Terminated block@39
debug: Sealing block@40
debug: Terminated block@40
debug: Sealing block@41
debug: Created Phi assignment: let ternary_result%0#2: bool = undefined while trying to resolve 'ternary_result%0' in block@41
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@39) in block@39
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@39, ternary_result%0#1 <- block@40) in block@40
debug: Terminated block@41
debug: Sealing block@42
debug: Terminated block@42
debug: Sealing block@43
debug: Terminated block@43
debug: Sealing block@44
debug: Terminated block@44
debug: Sealing block@45
debug: Created Phi assignment: let and_result%7#2: bool = undefined while trying to resolve 'and_result%7' in block@45
debug: Added and_result%7#0 to Phi node: let and_result%7#2: bool = φ(and_result%7#0 <- block@43) in block@43
debug: Added and_result%7#1 to Phi node: let and_result%7#2: bool = φ(and_result%7#0 <- block@43, and_result%7#1 <- block@44) in block@44
debug: Terminated block@45
debug: Sealing block@46
debug: Terminated block@46
debug: Sealing block@47
debug: Terminated block@47
debug: Sealing block@48
debug: Created Phi assignment: let ternary_result%1#2: bool = undefined while trying to resolve 'ternary_result%1' in block@48
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: bool = φ(ternary_result%1#0 <- block@46) in block@46
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: bool = φ(ternary_result%1#0 <- block@46, ternary_result%1#1 <- block@47) in block@47
debug: Terminated block@48
debug: Sealing block@49
debug: Terminated block@49
debug: Sealing block@50
debug: Terminated block@50
debug: Sealing block@51
debug: Terminated block@51
debug: Sealing block@52
debug: Created Phi assignment: let and_result%8#2: bool = undefined while trying to resolve 'and_result%8' in block@52
debug: Added and_result%8#0 to Phi node: let and_result%8#2: bool = φ(and_result%8#0 <- block@50) in block@50
debug: Added and_result%8#1 to Phi node: let and_result%8#2: bool = φ(and_result%8#0 <- block@50, and_result%8#1 <- block@51) in block@51
debug: Terminated block@52
debug: Building IR for function test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function algopy._contract.Contract.__init__
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Created Phi assignment: let or_result%0#2: bool = undefined while trying to resolve 'or_result%0' in block@6
debug: Added or_result%0#0 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@4) in block@4
debug: Added or_result%0#1 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@4, or_result%0#1 <- block@5) in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@10
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@8) in block@8
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@8, and_result%0#1 <- block@9) in block@9
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@14
debug: Created Phi assignment: let or_result%1#2: bool = undefined while trying to resolve 'or_result%1' in block@14
debug: Added or_result%1#0 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@12) in block@12
debug: Added or_result%1#1 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@12, or_result%1#1 <- block@13) in block@13
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@16
debug: Terminated block@16
debug: Sealing block@17
debug: Terminated block@17
debug: Sealing block@18
debug: Created Phi assignment: let and_result%1#2: bool = undefined while trying to resolve 'and_result%1' in block@18
debug: Added and_result%1#0 to Phi node: let and_result%1#2: bool = φ(and_result%1#0 <- block@16) in block@16
debug: Added and_result%1#1 to Phi node: let and_result%1#2: bool = φ(and_result%1#0 <- block@16, and_result%1#1 <- block@17) in block@17
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: Sealing block@20
debug: Terminated block@20
debug: Sealing block@21
debug: Terminated block@21
debug: Sealing block@22
debug: Created Phi assignment: let and_result%2#2: bool = undefined while trying to resolve 'and_result%2' in block@22
debug: Added and_result%2#0 to Phi node: let and_result%2#2: bool = φ(and_result%2#0 <- block@20) in block@20
debug: Added and_result%2#1 to Phi node: let and_result%2#2: bool = φ(and_result%2#0 <- block@20, and_result%2#1 <- block@21) in block@21
debug: Terminated block@22
debug: Sealing block@23
debug: Terminated block@23
debug: Sealing block@24
debug: Terminated block@24
debug: Sealing block@25
debug: Terminated block@25
debug: Sealing block@26
debug: Created Phi assignment: let and_result%3#2: bool = undefined while trying to resolve 'and_result%3' in block@26
debug: Added and_result%3#0 to Phi node: let and_result%3#2: bool = φ(and_result%3#0 <- block@24) in block@24
debug: Added and_result%3#1 to Phi node: let and_result%3#2: bool = φ(and_result%3#0 <- block@24, and_result%3#1 <- block@25) in block@25
debug: Terminated block@26
debug: Sealing block@27
debug: Terminated block@27
debug: Sealing block@28
debug: Terminated block@28
debug: Sealing block@29
debug: Terminated block@29
debug: Sealing block@30
debug: Created Phi assignment: let and_result%4#2: bool = undefined while trying to resolve 'and_result%4' in block@30
debug: Added and_result%4#0 to Phi node: let and_result%4#2: bool = φ(and_result%4#0 <- block@28) in block@28
debug: Added and_result%4#1 to Phi node: let and_result%4#2: bool = φ(and_result%4#0 <- block@28, and_result%4#1 <- block@29) in block@29
debug: Terminated block@30
debug: Sealing block@31
debug: Terminated block@31
debug: Sealing block@32
debug: Terminated block@32
debug: Sealing block@33
debug: Terminated block@33
debug: Sealing block@34
debug: Created Phi assignment: let and_result%5#2: bool = undefined while trying to resolve 'and_result%5' in block@34
debug: Added and_result%5#0 to Phi node: let and_result%5#2: bool = φ(and_result%5#0 <- block@32) in block@32
debug: Added and_result%5#1 to Phi node: let and_result%5#2: bool = φ(and_result%5#0 <- block@32, and_result%5#1 <- block@33) in block@33
debug: Terminated block@34
debug: Sealing block@35
debug: Terminated block@35
debug: Sealing block@36
debug: Terminated block@36
debug: Sealing block@37
debug: Terminated block@37
debug: Sealing block@38
debug: Created Phi assignment: let and_result%6#2: bool = undefined while trying to resolve 'and_result%6' in block@38
debug: Added and_result%6#0 to Phi node: let and_result%6#2: bool = φ(and_result%6#0 <- block@36) in block@36
debug: Added and_result%6#1 to Phi node: let and_result%6#2: bool = φ(and_result%6#0 <- block@36, and_result%6#1 <- block@37) in block@37
debug: Terminated block@38
debug: Sealing block@39
debug: Terminated block@39
debug: Sealing block@40
debug: Terminated block@40
debug: Sealing block@41
debug: Created Phi assignment: let ternary_result%0#2: bool = undefined while trying to resolve 'ternary_result%0' in block@41
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@39) in block@39
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@39, ternary_result%0#1 <- block@40) in block@40
debug: Terminated block@41
debug: Sealing block@42
debug: Terminated block@42
debug: Sealing block@43
debug: Terminated block@43
debug: Sealing block@44
debug: Terminated block@44
debug: Sealing block@45
debug: Created Phi assignment: let and_result%7#2: bool = undefined while trying to resolve 'and_result%7' in block@45
debug: Added and_result%7#0 to Phi node: let and_result%7#2: bool = φ(and_result%7#0 <- block@43) in block@43
debug: Added and_result%7#1 to Phi node: let and_result%7#2: bool = φ(and_result%7#0 <- block@43, and_result%7#1 <- block@44) in block@44
debug: Terminated block@45
debug: Sealing block@46
debug: Terminated block@46
debug: Sealing block@47
debug: Terminated block@47
debug: Sealing block@48
debug: Created Phi assignment: let ternary_result%1#2: bool = undefined while trying to resolve 'ternary_result%1' in block@48
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: bool = φ(ternary_result%1#0 <- block@46) in block@46
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: bool = φ(ternary_result%1#0 <- block@46, ternary_result%1#1 <- block@47) in block@47
debug: Terminated block@48
debug: Sealing block@49
debug: Terminated block@49
debug: Sealing block@50
debug: Terminated block@50
debug: Sealing block@51
debug: Terminated block@51
debug: Sealing block@52
debug: Created Phi assignment: let and_result%8#2: bool = undefined while trying to resolve 'and_result%8' in block@52
debug: Added and_result%8#0 to Phi node: let and_result%8#2: bool = φ(and_result%8#0 <- block@50) in block@50
debug: Added and_result%8#1 to Phi node: let and_result%8#2: bool = φ(and_result%8#0 <- block@50, and_result%8#1 <- block@51) in block@51
debug: Terminated block@52
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: removing unused subroutine algopy._contract.Contract.__init__
debug: Building IR for function test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c
debug: removing unused subroutine algopy._contract.Contract.__init__
debug: optimizing approval program of test_cases.conditional_execution.contract.ConditionalExecutionContract at level 2
debug: Begin optimization pass 1/100
debug: marking single-use function test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__ for inlining
debug: marking trivial method test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a as inlineable
debug: marking trivial method test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b as inlineable
debug: marking trivial method test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c as inlineable
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
conditional_execution/contract.py:47:54 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:47:9 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:47:30 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:41:53 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:41:9 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:41:30 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:35:10 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:35:29 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:29:31 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:29:9 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:23:32 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:23:9 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:17:31 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:17:9 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:11:30 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:11:9 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__ in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable or_result%0#2
debug: Removing unused variable or_result%1#2
debug: Removing unused variable and_result%2#2
debug: Removing unused variable and_result%4#2
debug: Removing unused variable ternary_result%0#2
debug: Removing unused variable ternary_result%1#2
debug: Removing unused variable ret_val#15
debug: Removing unused variable tmp%1#0
debug: Removing unused variable ret_val#14
debug: Removing unused variable tmp%2#0
debug: Removing unused variable ret_val#13
debug: Removing unused variable tmp%3#0
debug: Removing unused variable ret_val#12
debug: Removing unused variable tmp%4#0
debug: Removing unused variable ret_val#11
debug: Removing unused variable tmp%5#0
debug: Removing unused variable ret_val#10
debug: Removing unused variable tmp%6#0
debug: Removing unused variable ret_val#9
debug: Removing unused variable tmp%7#0
debug: Removing unused variable ret_val#8
debug: Removing unused variable tmp%8#0
debug: Removing unused variable ret_val#6
debug: Removing unused variable tmp%9#0
debug: Removing unused variable ret_val#7
debug: Removing unused variable tmp%10#0
debug: Removing unused variable ret_val#5
debug: Removing unused variable tmp%11#0
debug: Removing unused variable ret_val#4
debug: Removing unused variable ret_val#3
debug: Removing unused variable ret_val#2
debug: Removing unused variable tmp%12#0
debug: Removing unused variable ret_val#1
debug: Removing unused variable ret_val#0
debug: Removing unused variable or_result%0#0
debug: Removing unused variable or_result%0#1
debug: Removing unused variable or_result%1#0
debug: Removing unused variable or_result%1#1
debug: Removing unused variable and_result%2#0
debug: Removing unused variable and_result%2#1
debug: Removing unused variable and_result%4#0
debug: Removing unused variable and_result%4#1
debug: Removing unused variable ternary_result%0#0
debug: Removing unused variable ternary_result%0#1
debug: Removing unused variable ternary_result%1#0
debug: Removing unused variable ternary_result%1#1
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@84 from goto 1u ? block@4 : block@3 to goto block@4
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@82 from goto 1u ? block@4 : block@5 to goto block@4
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@80 from goto 0u ? block@12 : block@11 to goto block@11
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@78 from goto 1u ? block@12 : block@13 to goto block@12
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@76 from goto 0u ? block@19 : block@21 to goto block@21
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@74 from goto 1u ? block@20 : block@21 to goto block@20
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@72 from goto 1u ? block@27 : block@29 to goto block@27
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@70 from goto 1u ? block@28 : block@29 to goto block@28
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@64 from goto 1u ? block@39 : block@40 to goto block@39
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@58 from goto 0u ? block@46 : block@47 to goto block@47
debug: Optimizer: Merge Blocks
debug: Replaced predecessor block@85 with block@1 in block@86
debug: Merged linear block@85 into block@1
debug: Replaced predecessor block@86 with block@1 in block@2
debug: Merged linear block@86 into block@1
debug: Replaced predecessor block@83 with block@2 in block@84
debug: Merged linear block@83 into block@2
debug: Replaced predecessor block@84 with block@2 in block@4
debug: Merged linear block@84 into block@2
debug: Replaced predecessor block@81 with block@3 in block@82
debug: Merged linear block@81 into block@3
debug: Replaced predecessor block@82 with block@3 in block@4
debug: Merged linear block@82 into block@3
debug: Replaced predecessor block@79 with block@10 in block@80
debug: Merged linear block@79 into block@10
debug: Replaced predecessor block@80 with block@10 in block@11
debug: Merged linear block@80 into block@10
debug: Replaced predecessor block@11 with block@10 in block@77
debug: Merged linear block@11 into block@10
debug: Replaced predecessor block@77 with block@10 in block@78
debug: Merged linear block@77 into block@10
debug: Replaced predecessor block@78 with block@10 in block@12
debug: Merged linear block@78 into block@10
debug: Replaced predecessor block@12 with block@10 in block@14
debug: Merged linear block@12 into block@10
debug: Replaced predecessor block@75 with block@18 in block@76
debug: Merged linear block@75 into block@18
debug: Replaced predecessor block@76 with block@18 in block@21
debug: Merged linear block@76 into block@18
debug: Replaced predecessor block@73 with block@19 in block@74
debug: Merged linear block@73 into block@19
debug: Replaced predecessor block@74 with block@19 in block@20
debug: Merged linear block@74 into block@19
debug: Replaced predecessor block@20 with block@19 in block@22
debug: Merged linear block@20 into block@19
debug: Replaced predecessor block@21 with block@18 in block@22
debug: Merged linear block@21 into block@18
debug: Replaced predecessor block@71 with block@26 in block@72
debug: Merged linear block@71 into block@26
debug: Replaced predecessor block@72 with block@26 in block@27
debug: Merged linear block@72 into block@26
debug: Replaced predecessor block@27 with block@26 in block@69
debug: Merged linear block@27 into block@26
debug: Replaced predecessor block@69 with block@26 in block@70
debug: Merged linear block@69 into block@26
debug: Replaced predecessor block@70 with block@26 in block@28
debug: Merged linear block@70 into block@26
debug: Replaced predecessor block@28 with block@26 in block@30
debug: Merged linear block@28 into block@26
debug: Replaced predecessor block@65 with block@34 in block@66
debug: Merged linear block@65 into block@34
debug: Replaced predecessor block@66 with block@34 in block@67
debug: Merged linear block@66 into block@34
debug: Replaced predecessor block@67 with block@34 in block@68
debug: Merged linear block@67 into block@34
debug: Replaced predecessor block@68 with block@34 in block@37
debug: Replaced predecessor block@68 with block@34 in block@35
debug: Merged linear block@68 into block@34
debug: Replaced predecessor block@63 with block@38 in block@64
debug: Merged linear block@63 into block@38
debug: Replaced predecessor block@64 with block@38 in block@39
debug: Merged linear block@64 into block@38
debug: Replaced predecessor block@39 with block@38 in block@61
debug: Merged linear block@39 into block@38
debug: Replaced predecessor block@61 with block@38 in block@62
debug: Merged linear block@61 into block@38
debug: Replaced predecessor block@62 with block@38 in block@41
debug: Merged linear block@62 into block@38
debug: Replaced predecessor block@59 with block@40 in block@60
debug: Merged linear block@59 into block@40
debug: Replaced predecessor block@60 with block@40 in block@41
debug: Merged linear block@60 into block@40
debug: Replaced predecessor block@57 with block@45 in block@58
debug: Merged linear block@57 into block@45
debug: Replaced predecessor block@58 with block@45 in block@47
debug: Merged linear block@58 into block@45
debug: Replaced predecessor block@55 with block@46 in block@56
debug: Merged linear block@55 into block@46
debug: Replaced predecessor block@56 with block@46 in block@48
debug: Merged linear block@56 into block@46
debug: Replaced predecessor block@47 with block@45 in block@53
debug: Merged linear block@47 into block@45
debug: Replaced predecessor block@53 with block@45 in block@54
debug: Merged linear block@53 into block@45
debug: Replaced predecessor block@54 with block@45 in block@48
debug: Merged linear block@54 into block@45
debug: Optimizer: Remove Linear Jumps
debug: Removing jump block block@4
debug: Removing jump block block@5
debug: Removing jump block block@13
debug: Removing jump block block@29
debug: branching to block@4 will be replaced with block@6
debug: branching to block@5 will be replaced with block@6
debug: branching to block@13 will be replaced with block@14
debug: branching to block@29 will be replaced with block@30
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable block: block@3
debug: Removing unreachable block: block@19
debug: Removing unreachable block: block@40
debug: Removing unreachable block: block@46
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c
debug: Unused subroutines removed
debug: Begin optimization pass 2/100
debug: marking simple function test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset for inlining (complexity=3 <= threshold=3)
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
conditional_execution/contract.py:48:9 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:42:9 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:36:9 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:30:9 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:24:9 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:18:9 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
conditional_execution/contract.py:12:9 debug: inlining call to test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: and_result%0#2, condition#6
debug: selected condition#6 from equivalence set
debug: Found equivalence set: and_result%1#2, condition#5
debug: selected condition#5 from equivalence set
debug: Found equivalence set: and_result%3#2, condition#4
debug: selected condition#4 from equivalence set
debug: Found equivalence set: and_result%5#2, condition#3
debug: selected condition#3 from equivalence set
debug: Found equivalence set: and_result%6#2, condition#2
debug: selected condition#2 from equivalence set
debug: Found equivalence set: and_result%7#2, condition#1
debug: selected condition#1 from equivalence set
debug: Found equivalence set: and_result%8#2, condition#0
debug: selected condition#0 from equivalence set
debug: Copy propagation made 7 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Replaced predecessor block@6 with block@2 in block@9
debug: Replaced predecessor block@6 with block@2 in block@7
debug: Merged linear block@6 into block@2
debug: Replaced predecessor block@65 with block@10 in block@66
debug: Merged linear block@65 into block@10
debug: Replaced predecessor block@66 with block@10 in block@14
debug: Merged linear block@66 into block@10
debug: Replaced predecessor block@14 with block@10 in block@17
debug: Replaced predecessor block@14 with block@10 in block@15
debug: Merged linear block@14 into block@10
debug: Replaced predecessor block@63 with block@18 in block@64
debug: Merged linear block@63 into block@18
debug: Replaced predecessor block@64 with block@18 in block@22
debug: Merged linear block@64 into block@18
debug: Replaced predecessor block@22 with block@18 in block@25
debug: Replaced predecessor block@22 with block@18 in block@23
debug: Merged linear block@22 into block@18
debug: Replaced predecessor block@61 with block@26 in block@62
debug: Merged linear block@61 into block@26
debug: Replaced predecessor block@62 with block@26 in block@30
debug: Merged linear block@62 into block@26
debug: Replaced predecessor block@30 with block@26 in block@33
debug: Replaced predecessor block@30 with block@26 in block@31
debug: Merged linear block@30 into block@26
debug: Replaced predecessor block@59 with block@34 in block@60
debug: Merged linear block@59 into block@34
debug: Replaced predecessor block@60 with block@34 in block@37
debug: Replaced predecessor block@60 with block@34 in block@35
debug: Merged linear block@60 into block@34
debug: Replaced predecessor block@57 with block@38 in block@58
debug: Merged linear block@57 into block@38
debug: Replaced predecessor block@58 with block@38 in block@41
debug: Merged linear block@58 into block@38
debug: Replaced predecessor block@41 with block@38 in block@44
debug: Replaced predecessor block@41 with block@38 in block@42
debug: Merged linear block@41 into block@38
debug: Replaced predecessor block@55 with block@45 in block@56
debug: Merged linear block@55 into block@45
debug: Replaced predecessor block@56 with block@45 in block@48
debug: Merged linear block@56 into block@45
debug: Replaced predecessor block@48 with block@45 in block@49
debug: Replaced predecessor block@48 with block@45 in block@51
debug: Merged linear block@48 into block@45
debug: Replaced predecessor block@53 with block@52 in block@54
debug: Merged linear block@53 into block@52
debug: Merged linear block@54 into block@52
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
conditional_execution/contract.py:13:13 debug: replacing app_global read with cached value for key: "did_execute_a"
conditional_execution/contract.py:61:9 debug: removing unobserved app_global write to key: "did_execute_a"
conditional_execution/contract.py:19:13 debug: replacing app_global read with cached value for key: "did_execute_a"
conditional_execution/contract.py:61:9 debug: removing unobserved app_global write to key: "did_execute_a"
conditional_execution/contract.py:25:13 debug: replacing app_global read with cached value for key: "did_execute_a"
conditional_execution/contract.py:61:9 debug: removing unobserved app_global write to key: "did_execute_a"
conditional_execution/contract.py:31:13 debug: replacing app_global read with cached value for key: "did_execute_a"
conditional_execution/contract.py:61:9 debug: removing unobserved app_global write to key: "did_execute_a"
conditional_execution/contract.py:37:13 debug: replacing app_global read with cached value for key: "did_execute_a"
conditional_execution/contract.py:61:9 debug: removing unobserved app_global write to key: "did_execute_a"
conditional_execution/contract.py:43:13 debug: replacing app_global read with cached value for key: "did_execute_a"
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset
debug: Unused subroutines removed
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable maybe_value%0#0
debug: Removing unused variable maybe_exists%0#0
debug: Removing unused variable maybe_value%2#0
debug: Removing unused variable maybe_exists%2#0
debug: Removing unused variable maybe_value%4#0
debug: Removing unused variable maybe_exists%4#0
debug: Removing unused variable maybe_value%6#0
debug: Removing unused variable maybe_exists%6#0
debug: Removing unused variable maybe_value%8#0
debug: Removing unused variable maybe_exists%8#0
debug: Removing unused variable maybe_value%10#0
debug: Removing unused variable maybe_exists%10#0
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@2 from goto 1u ? block@7 : block@9 to goto block@7
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@10 from goto 1u ? block@15 : block@17 to goto block@15
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@18 from goto 1u ? block@23 : block@25 to goto block@23
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@26 from goto 1u ? block@31 : block@33 to goto block@31
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@34 from goto 1u ? block@35 : block@37 to goto block@35
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@38 from goto 1u ? block@42 : block@44 to goto block@42
debug: Optimizer: Merge Blocks
debug: Replaced predecessor block@7 with block@2 in block@8
debug: Replaced predecessor block@7 with block@2 in block@9
debug: Merged linear block@7 into block@2
debug: Replaced predecessor block@15 with block@10 in block@17
debug: Replaced predecessor block@15 with block@10 in block@16
debug: Merged linear block@15 into block@10
debug: Replaced predecessor block@23 with block@18 in block@24
debug: Replaced predecessor block@23 with block@18 in block@25
debug: Merged linear block@23 into block@18
debug: Replaced predecessor block@31 with block@26 in block@33
debug: Replaced predecessor block@31 with block@26 in block@32
debug: Merged linear block@31 into block@26
debug: Replaced predecessor block@35 with block@34 in block@37
debug: Replaced predecessor block@35 with block@34 in block@36
debug: Merged linear block@35 into block@34
debug: Replaced predecessor block@42 with block@38 in block@43
debug: Replaced predecessor block@42 with block@38 in block@44
debug: Merged linear block@42 into block@38
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
conditional_execution/contract.py:19:36 debug: replacing app_global read with cached value for key: "did_execute_b"
conditional_execution/contract.py:31:36 debug: replacing app_global read with cached value for key: "did_execute_b"
conditional_execution/contract.py:37:36 debug: replacing app_global read with cached value for key: "did_execute_b"
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable maybe_value%3#0
debug: Removing unused variable maybe_exists%3#0
debug: Removing unused variable maybe_value%7#0
debug: Removing unused variable maybe_exists%7#0
debug: Removing unused variable maybe_value%9#0
debug: Removing unused variable maybe_exists%9#0
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@10 from goto 1u ? block@16 : block@17 to goto block@16
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@26 from goto 1u ? block@32 : block@33 to goto block@32
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@34 from goto 1u ? block@36 : block@37 to goto block@36
debug: Optimizer: Merge Blocks
debug: Replaced predecessor block@16 with block@10 in block@18
debug: Merged linear block@16 into block@10
debug: Replaced predecessor block@32 with block@26 in block@34
debug: Merged linear block@32 into block@26
debug: Replaced predecessor block@36 with block@34 in block@38
debug: Merged linear block@36 into block@34
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable block: block@17
debug: Removing unreachable block: block@33
debug: Removing unreachable block: block@37
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Begin optimization pass 5/100
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable and_result%1#0
debug: Removing unused variable condition#5
debug: Removing unused variable and_result%5#0
debug: Removing unused variable condition#3
debug: Removing unused variable and_result%6#0
debug: Removing unused variable condition#2
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Replaced predecessor block@18 with block@10 in block@24
debug: Replaced predecessor block@18 with block@10 in block@25
debug: Merged linear block@18 into block@10
debug: Replaced predecessor block@34 with block@26 in block@38
debug: Merged linear block@34 into block@26
debug: Replaced predecessor block@38 with block@26 in block@43
debug: Replaced predecessor block@38 with block@26 in block@44
debug: Merged linear block@38 into block@26
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
conditional_execution/contract.py:70:9 debug: removing unobserved app_global write to key: "did_execute_b"
conditional_execution/contract.py:25:40 debug: replacing app_global read with cached value for key: "did_execute_b"
conditional_execution/contract.py:70:9 debug: removing unobserved app_global write to key: "did_execute_b"
conditional_execution/contract.py:60:9 debug: removing unobserved app_global write to key: "did_execute_b"
conditional_execution/contract.py:65:9 debug: removing unobserved app_global write to key: "did_execute_a"
conditional_execution/contract.py:70:9 debug: removing unobserved app_global write to key: "did_execute_b"
conditional_execution/contract.py:43:40 debug: replacing app_global read with cached value for key: "did_execute_b"
debug: Begin optimization pass 6/100
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable maybe_value%5#0
debug: Removing unused variable maybe_exists%5#0
debug: Removing unused variable maybe_value%11#0
debug: Removing unused variable maybe_exists%11#0
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@10 from goto 0u ? block@25 : block@24 to goto block@24
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@26 from goto 0u ? block@44 : block@43 to goto block@43
debug: Optimizer: Merge Blocks
debug: Replaced predecessor block@24 with block@10 in block@26
debug: Merged linear block@24 into block@10
debug: Replaced predecessor block@43 with block@26 in block@45
debug: Merged linear block@43 into block@26
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable block: block@25
debug: Removing unreachable block: block@44
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Begin optimization pass 7/100
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable and_result%3#0
debug: Removing unused variable condition#4
debug: Removing unused variable and_result%7#0
debug: Removing unused variable condition#1
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Replaced predecessor block@26 with block@10 in block@45
debug: Merged linear block@26 into block@10
debug: Replaced predecessor block@45 with block@10 in block@49
debug: Replaced predecessor block@45 with block@10 in block@51
debug: Merged linear block@45 into block@10
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Begin optimization pass 8/100
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 8, ending loop
debug: optimizing clear program of test_cases.conditional_execution.contract.ConditionalExecutionContract at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: lowering array IR nodes in approval program of test_cases.conditional_execution.contract.ConditionalExecutionContract
debug: lowering array IR nodes in clear program of test_cases.conditional_execution.contract.ConditionalExecutionContract
debug: optimizing approval program of test_cases.conditional_execution.contract.ConditionalExecutionContract at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: optimizing clear program of test_cases.conditional_execution.contract.ConditionalExecutionContract at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: removing local static slots in approval program of test_cases.conditional_execution.contract.ConditionalExecutionContract
conditional_execution/contract.py:9 debug: auto reserving slots in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program, []
debug: Slot allocation not required
debug: removing local static slots in clear program of test_cases.conditional_execution.contract.ConditionalExecutionContract
conditional_execution/contract.py:54 debug: auto reserving slots in test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program, []
debug: Slot allocation not required
debug: Performing SSA IR destructuring for test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: splitting critical edge block@0->block@2
debug: Replaced predecessor block@0 with block@53 in block@2
debug: splitting critical edge block@10->block@51
debug: Replaced predecessor block@10 with block@54 in block@51
debug: splitting critical edge block@49->block@51
debug: Replaced predecessor block@49 with block@55 in block@51
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program using strategy 'root_operand'
debug: Coalescing and_result%0#0 with [and_result%0#1]
debug: Coalescing condition#0 with [condition#6]
debug: Coalescing and_result%8#0 with [and_result%8#1]
debug: Coalescing resulted in 7 replacement/s
debug: Sequentializing parallel copies in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Performing post-SSA optimizations at level 2
debug: Removing jump block block@53
debug: Removing jump block block@54
debug: Removing jump block block@55
debug: branching to block@53 will be replaced with block@2
debug: branching to block@54 will be replaced with block@51
debug: branching to block@55 will be replaced with block@51
debug: Output IR to conditional_execution/out_O2/ConditionalExecutionContract.ir/ConditionalExecutionContract.approval.400.destructured.ir
debug: Performing SSA IR destructuring for test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program using strategy 'root_operand'
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: Performing post-SSA optimizations at level 2
debug: Output IR to conditional_execution/out_O2/ConditionalExecutionContract.ir/ConditionalExecutionContract.clear.400.destructured.ir
debug: Inserted main_block@0.ops[1]: 'l-store-copy tmp%0#0 0'
debug: Replaced main_block@0.ops[3]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main_after_if_else@2.ops[6]: 'l-store-copy maybe_exists%1#0 1'
debug: Replaced main_after_if_else@2.ops[9]: 'v-load maybe_exists%1#0' with 'l-load maybe_exists%1#0'
debug: Inserted main_after_if_else@2.ops[8]: 'l-store-copy maybe_value%1#0 1'
debug: Replaced main_after_if_else@2.ops[12]: 'v-load maybe_value%1#0' with 'l-load maybe_value%1#0'
debug: Inserted main_bool_true@8.ops[1]: 'l-store-copy and_result%0#0 0'
debug: Replaced main_bool_true@8.ops[3]: 'v-load and_result%0#0' with 'l-load and_result%0#0'
debug: Inserted main_bool_false@9.ops[1]: 'l-store-copy and_result%0#0 0'
debug: Replaced main_bool_false@9.ops[3]: 'v-load and_result%0#0' with 'l-load and_result%0#0'
debug: Inserted main_bool_merge@10.ops[38]: 'l-store-copy maybe_exists%12#0 1'
debug: Replaced main_bool_merge@10.ops[41]: 'v-load maybe_exists%12#0' with 'l-load maybe_exists%12#0'
debug: Inserted main_bool_merge@10.ops[40]: 'l-store-copy maybe_value%12#0 1'
debug: Replaced main_bool_merge@10.ops[44]: 'v-load maybe_value%12#0' with 'l-load maybe_value%12#0'
debug: Inserted main_and_contd@49.ops[3]: 'l-store-copy maybe_exists%13#0 1'
debug: Replaced main_and_contd@49.ops[6]: 'v-load maybe_exists%13#0' with 'l-load maybe_exists%13#0'
debug: Inserted main_and_contd@49.ops[5]: 'l-store-copy maybe_value%13#0 1'
debug: Replaced main_and_contd@49.ops[9]: 'v-load maybe_value%13#0' with 'l-load maybe_value%13#0'
debug: Inserted main_bool_true@50.ops[1]: 'l-store-copy and_result%8#0 0'
debug: Replaced main_bool_true@50.ops[3]: 'v-load and_result%8#0' with 'l-load and_result%8#0'
debug: Inserted main_bool_false@51.ops[1]: 'l-store-copy and_result%8#0 0'
debug: Replaced main_bool_false@51.ops[3]: 'v-load and_result%8#0' with 'l-load and_result%8#0'
debug: Found 5 edge set/s for test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Allocated 1 variable/s to x-stack: condition#0
debug: shared x-stack for main_bool_true@8 -> main_bool_merge@10: condition#0
debug: shared x-stack for main_bool_false@9 -> main_bool_merge@10: condition#0
debug: shared x-stack for main_bool_true@50 -> main_bool_merge@52: condition#0
debug: shared x-stack for main_bool_false@51 -> main_bool_merge@52: condition#0
conditional_execution/contract.py:9 debug: optimizing TEAL subroutine ops test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program() -> uint64:
conditional_execution/contract.py:9 debug: optimizing TEAL subroutine blocks test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program() -> uint64:
debug: inlining single reference block main_block@0 into main
debug: inlining single reference block main_call___init__@1 into main
debug: inlining single reference block main_bool_true@8 into main_after_if_else@2
debug: inlining single reference block main_and_contd@49 into main_bool_merge@10
debug: inlining single reference block main_bool_true@50 into main_bool_merge@10
debug: removing explicit jump to fall-through block main_after_if_else@2
debug: removing explicit jump to fall-through block main_bool_merge@10
debug: removing explicit jump to fall-through block main_bool_merge@52
conditional_execution/contract.py:54 debug: optimizing TEAL subroutine ops test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program() -> uint64:
conditional_execution/contract.py:54 debug: optimizing TEAL subroutine blocks test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program() -> uint64:
debug: inlining single reference block main_block@0 into main
info: Writing conditional_execution/out_O2/ConditionalExecutionContract.approval.teal
info: Writing conditional_execution/out_O2/ConditionalExecutionContract.clear.teal
info: Writing conditional_execution/out_O2/ConditionalExecutionContract.approval.bin
info: Writing conditional_execution/out_O2/ConditionalExecutionContract.clear.bin
info: Writing conditional_execution/out_O2/ConditionalExecutionContract.approval.stats.txt
info: Writing conditional_execution/out_O2/ConditionalExecutionContract.clear.stats.txt
info: Writing conditional_execution/out_O2/ConditionalExecutionContract.approval.puya.map
info: Writing conditional_execution/out_O2/ConditionalExecutionContract.clear.puya.map