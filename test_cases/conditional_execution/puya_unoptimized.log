debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=False, output_arc56=False, output_ssa_ir=False, output_optimization_ir=False, output_destructured_ir=True, output_memory_ir=False, output_bytecode=True, output_teal_intermediates=False, output_op_statistics=True, debug_level=1, optimization_level=0, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, optimizations_override=immutabledict({}), expand_all_bytes=False, paths=['conditional_execution'], resource_encoding='value', output_awst=False, output_awst_json=False, output_source_annotations_json=False, output_client=False, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
conditional_execution/contract.py:11:9 warning: expression result is ignored
conditional_execution/contract.py:17:9 warning: expression result is ignored
conditional_execution/contract.py:23:9 warning: expression result is ignored
conditional_execution/contract.py:29:9 warning: expression result is ignored
conditional_execution/contract.py:35:9 warning: expression result is ignored
conditional_execution/contract.py:41:9 warning: expression result is ignored
conditional_execution/contract.py:47:9 warning: expression result is ignored
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7
debug: Terminated block@7
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'write_end' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_end#1: uint64 = undefined while trying to resolve 'write_end' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Looking for 'read_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_offset#1: uint64 = undefined while trying to resolve 'read_offset' in block@3
debug: Looking for 'read_step' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_step#1: uint64 = undefined while trying to resolve 'read_step' in block@3
debug: Terminated block@4
debug: Sealing block@3
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4) in block@4
debug: Added write_end#0 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2) in block@2
debug: Added write_end#1 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0
debug: Deleting Phi assignment: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4)
debug: Replaced trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4) in block@4
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0 in current definition for 2 blocks
debug: Added read_offset#0 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2) in block@2
debug: Added read_offset#2 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4) in block@4
debug: Created Phi assignment: let read_step#2: uint64 = undefined while trying to resolve 'read_step' in block@2
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0) in block@0
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0
debug: Deleting Phi assignment: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1)
debug: Replaced trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0 in current definition for 1 blocks
debug: Added read_step#0 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2) in block@2
debug: Added read_step#1 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0
debug: Deleting Phi assignment: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4)
debug: Replaced trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0 in current definition for 2 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.conditional_execution.contract.ConditionalExecutionContract.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Created Phi assignment: let or_result%0#2: bool = undefined while trying to resolve 'or_result%0' in block@4
debug: Added or_result%0#0 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2) in block@2
debug: Added or_result%0#1 to Phi node: let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3) in block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@8
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@6) in block@6
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@6, and_result%0#1 <- block@7) in block@7
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Created Phi assignment: let or_result%1#2: bool = undefined while trying to resolve 'or_result%1' in block@12
debug: Added or_result%1#0 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@10) in block@10
debug: Added or_result%1#1 to Phi node: let or_result%1#2: bool = φ(or_result%1#0 <- block@10, or_result%1#1 <- block@11) in block@11
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@14
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@16
debug: Created Phi assignment: let and_result%1#2: bool = undefined while trying to resolve 'and_result%1' in block@16
debug: Added and_result%1#0 to Phi node: let and_result%1#2: bool = φ(and_result%1#0 <- block@14) in block@14
debug: Added and_result%1#1 to Phi node: let and_result%1#2: bool = φ(and_result%1#0 <- block@14, and_result%1#1 <- block@15) in block@15
debug: Terminated block@16
debug: Sealing block@17
debug: Terminated block@17
debug: Sealing block@18
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: Sealing block@20
debug: Created Phi assignment: let and_result%2#2: bool = undefined while trying to resolve 'and_result%2' in block@20
debug: Added and_result%2#0 to Phi node: let and_result%2#2: bool = φ(and_result%2#0 <- block@18) in block@18
debug: Added and_result%2#1 to Phi node: let and_result%2#2: bool = φ(and_result%2#0 <- block@18, and_result%2#1 <- block@19) in block@19
debug: Terminated block@20
debug: Sealing block@21
debug: Terminated block@21
debug: Sealing block@22
debug: Terminated block@22
debug: Sealing block@23
debug: Terminated block@23
debug: Sealing block@24
debug: Created Phi assignment: let and_result%3#2: bool = undefined while trying to resolve 'and_result%3' in block@24
debug: Added and_result%3#0 to Phi node: let and_result%3#2: bool = φ(and_result%3#0 <- block@22) in block@22
debug: Added and_result%3#1 to Phi node: let and_result%3#2: bool = φ(and_result%3#0 <- block@22, and_result%3#1 <- block@23) in block@23
debug: Terminated block@24
debug: Sealing block@25
debug: Terminated block@25
debug: Sealing block@26
debug: Terminated block@26
debug: Sealing block@27
debug: Terminated block@27
debug: Sealing block@28
debug: Created Phi assignment: let and_result%4#2: bool = undefined while trying to resolve 'and_result%4' in block@28
debug: Added and_result%4#0 to Phi node: let and_result%4#2: bool = φ(and_result%4#0 <- block@26) in block@26
debug: Added and_result%4#1 to Phi node: let and_result%4#2: bool = φ(and_result%4#0 <- block@26, and_result%4#1 <- block@27) in block@27
debug: Terminated block@28
debug: Sealing block@29
debug: Terminated block@29
debug: Sealing block@30
debug: Terminated block@30
debug: Sealing block@31
debug: Terminated block@31
debug: Sealing block@32
debug: Created Phi assignment: let and_result%5#2: bool = undefined while trying to resolve 'and_result%5' in block@32
debug: Added and_result%5#0 to Phi node: let and_result%5#2: bool = φ(and_result%5#0 <- block@30) in block@30
debug: Added and_result%5#1 to Phi node: let and_result%5#2: bool = φ(and_result%5#0 <- block@30, and_result%5#1 <- block@31) in block@31
debug: Terminated block@32
debug: Sealing block@33
debug: Terminated block@33
debug: Sealing block@34
debug: Terminated block@34
debug: Sealing block@35
debug: Terminated block@35
debug: Sealing block@36
debug: Created Phi assignment: let and_result%6#2: bool = undefined while trying to resolve 'and_result%6' in block@36
debug: Added and_result%6#0 to Phi node: let and_result%6#2: bool = φ(and_result%6#0 <- block@34) in block@34
debug: Added and_result%6#1 to Phi node: let and_result%6#2: bool = φ(and_result%6#0 <- block@34, and_result%6#1 <- block@35) in block@35
debug: Terminated block@36
debug: Sealing block@37
debug: Terminated block@37
debug: Sealing block@38
debug: Terminated block@38
debug: Sealing block@39
debug: Created Phi assignment: let ternary_result%0#2: bool = undefined while trying to resolve 'ternary_result%0' in block@39
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@37) in block@37
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@37, ternary_result%0#1 <- block@38) in block@38
debug: Terminated block@39
debug: Sealing block@40
debug: Terminated block@40
debug: Sealing block@41
debug: Terminated block@41
debug: Sealing block@42
debug: Terminated block@42
debug: Sealing block@43
debug: Created Phi assignment: let and_result%7#2: bool = undefined while trying to resolve 'and_result%7' in block@43
debug: Added and_result%7#0 to Phi node: let and_result%7#2: bool = φ(and_result%7#0 <- block@41) in block@41
debug: Added and_result%7#1 to Phi node: let and_result%7#2: bool = φ(and_result%7#0 <- block@41, and_result%7#1 <- block@42) in block@42
debug: Terminated block@43
debug: Sealing block@44
debug: Terminated block@44
debug: Sealing block@45
debug: Terminated block@45
debug: Sealing block@46
debug: Created Phi assignment: let ternary_result%1#2: bool = undefined while trying to resolve 'ternary_result%1' in block@46
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: bool = φ(ternary_result%1#0 <- block@44) in block@44
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: bool = φ(ternary_result%1#0 <- block@44, ternary_result%1#1 <- block@45) in block@45
debug: Terminated block@46
debug: Sealing block@47
debug: Terminated block@47
debug: Sealing block@48
debug: Terminated block@48
debug: Sealing block@49
debug: Terminated block@49
debug: Sealing block@50
debug: Created Phi assignment: let and_result%8#2: bool = undefined while trying to resolve 'and_result%8' in block@50
debug: Added and_result%8#0 to Phi node: let and_result%8#2: bool = φ(and_result%8#0 <- block@48) in block@48
debug: Added and_result%8#1 to Phi node: let and_result%8#2: bool = φ(and_result%8#0 <- block@48, and_result%8#1 <- block@49) in block@49
debug: Terminated block@50
debug: Building IR for function test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function algopy._contract.Contract.__init__
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.conditional_execution.contract.ConditionalExecutionContract.__algopy_entrypoint_with_init
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.__puya_arc4_router__
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: removing unused subroutine algopy._contract.Contract.__init__
debug: Building IR for function test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.__puya_arc4_router__
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b
debug: removing unused subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c
debug: removing unused subroutine algopy._contract.Contract.__init__
debug: optimizing approval program of test_cases.conditional_execution.contract.ConditionalExecutionContract at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.__algopy_entrypoint_with_init
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable or_result%0#2
debug: Removing unused variable or_result%1#2
debug: Removing unused variable and_result%2#2
debug: Removing unused variable and_result%4#2
debug: Removing unused variable ternary_result%0#2
debug: Removing unused variable ternary_result%1#2
debug: Not removing unused assignment since source is not marked as pure: let tmp%8#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let tmp%9#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Removing unused variable or_result%0#0
debug: Removing unused variable or_result%0#1
debug: Removing unused variable or_result%1#0
debug: Removing unused variable or_result%1#1
debug: Removing unused variable and_result%2#0
debug: Removing unused variable and_result%2#1
debug: Removing unused variable and_result%4#0
debug: Removing unused variable and_result%4#1
debug: Not removing unused assignment since source is not marked as pure: let tmp%8#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let tmp%9#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%0#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%0#1: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%1#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%1#1: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Not removing unused assignment since source is not marked as pure: let tmp%8#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let tmp%9#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%0#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%0#1: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%1#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%1#1: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.__algopy_entrypoint_with_init
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let tmp%8#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let tmp%9#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%0#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%0#1: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%1#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%1#1: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 2, ending loop
debug: optimizing clear program of test_cases.conditional_execution.contract.ConditionalExecutionContract at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 1, ending loop
debug: lowering array IR nodes in approval program of test_cases.conditional_execution.contract.ConditionalExecutionContract
debug: lowering array IR nodes in clear program of test_cases.conditional_execution.contract.ConditionalExecutionContract
debug: optimizing approval program of test_cases.conditional_execution.contract.ConditionalExecutionContract at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.__algopy_entrypoint_with_init
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let tmp%8#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let tmp%9#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%0#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%0#1: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%1#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
debug: Not removing unused assignment since source is not marked as pure: let ternary_result%1#1: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 1, ending loop
debug: optimizing clear program of test_cases.conditional_execution.contract.ConditionalExecutionContract at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 1, ending loop
debug: removing local static slots in approval program of test_cases.conditional_execution.contract.ConditionalExecutionContract
debug: auto reserving slots in test_cases.conditional_execution.contract.ConditionalExecutionContract.__algopy_entrypoint_with_init, []
conditional_execution/contract.py:5 debug: auto reserving slots in test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__, []
conditional_execution/contract.py:9 debug: auto reserving slots in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program, []
conditional_execution/contract.py:57 debug: auto reserving slots in test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset, []
conditional_execution/contract.py:63 debug: auto reserving slots in test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a, []
conditional_execution/contract.py:68 debug: auto reserving slots in test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b, []
conditional_execution/contract.py:73 debug: auto reserving slots in test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c, []
debug: Slot allocation not required
debug: removing local static slots in clear program of test_cases.conditional_execution.contract.ConditionalExecutionContract
conditional_execution/contract.py:54 debug: auto reserving slots in test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program, []
debug: Slot allocation not required
debug: Performing SSA IR destructuring for test_cases.conditional_execution.contract.ConditionalExecutionContract.__algopy_entrypoint_with_init
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.conditional_execution.contract.ConditionalExecutionContract.__algopy_entrypoint_with_init using strategy 'root_operand'
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.conditional_execution.contract.ConditionalExecutionContract.__algopy_entrypoint_with_init
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__ using strategy 'root_operand'
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program using strategy 'root_operand'
debug: Coalescing and_result%0#0 with [and_result%0#5, and_result%0#1, and_result%0#2]
debug: Coalescing and_result%1#0 with [and_result%1#5, and_result%1#1, and_result%1#2]
debug: Coalescing and_result%3#0 with [and_result%3#5, and_result%3#1, and_result%3#2]
debug: Coalescing and_result%5#0 with [and_result%5#5, and_result%5#1, and_result%5#2]
debug: Coalescing and_result%6#0 with [and_result%6#5, and_result%6#1, and_result%6#2]
debug: Coalescing ternary_result%0#0 with [ternary_result%0#1]
debug: Coalescing and_result%7#0 with [and_result%7#5, and_result%7#1, and_result%7#2]
debug: Coalescing ternary_result%1#0 with [ternary_result%1#1]
debug: Coalescing and_result%8#0 with [and_result%8#5, and_result%8#1, and_result%8#2]
debug: Coalescing resulted in 51 replacement/s
debug: Sequentializing parallel copies in test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset using strategy 'root_operand'
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a using strategy 'root_operand'
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b using strategy 'root_operand'
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c using strategy 'root_operand'
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c
debug: Performing post-SSA optimizations at level 0
debug: Output IR to conditional_execution/out_unoptimized/ConditionalExecutionContract.ir/ConditionalExecutionContract.approval.400.destructured.ir
debug: Performing SSA IR destructuring for test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program using strategy 'root_operand'
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program
debug: Performing post-SSA optimizations at level 0
debug: Output IR to conditional_execution/out_unoptimized/ConditionalExecutionContract.ir/ConditionalExecutionContract.clear.400.destructured.ir
debug: Inserted main_block@0.ops[1]: 'l-store-copy tmp%0#0 0'
debug: Replaced main_block@0.ops[3]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main_after_if_else@2.ops[1]: 'l-store-copy tmp%1#0 0'
debug: Replaced main_after_if_else@2.ops[3]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted approval_program_block@0.ops[2]: 'l-store-copy tmp%0#0 0'
debug: Replaced approval_program_block@0.ops[4]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted approval_program_or_contd@1.ops[2]: 'l-store-copy tmp%1#0 0'
debug: Replaced approval_program_or_contd@1.ops[4]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted approval_program_bool_merge@4.ops[3]: 'l-store-copy maybe_exists%0#0 1'
debug: Replaced approval_program_bool_merge@4.ops[6]: 'v-load maybe_exists%0#0' with 'l-load maybe_exists%0#0'
debug: Inserted approval_program_bool_merge@4.ops[5]: 'l-store-copy maybe_value%0#0 1'
debug: Replaced approval_program_bool_merge@4.ops[9]: 'v-load maybe_value%0#0' with 'l-load maybe_value%0#0'
debug: Inserted approval_program_and_contd@5.ops[3]: 'l-store-copy maybe_exists%1#0 1'
debug: Replaced approval_program_and_contd@5.ops[6]: 'v-load maybe_exists%1#0' with 'l-load maybe_exists%1#0'
debug: Inserted approval_program_and_contd@5.ops[5]: 'l-store-copy maybe_value%1#0 1'
debug: Replaced approval_program_and_contd@5.ops[9]: 'v-load maybe_value%1#0' with 'l-load maybe_value%1#0'
debug: Inserted approval_program_bool_merge@8.ops[4]: 'l-store-copy tmp%2#0 0'
debug: Replaced approval_program_bool_merge@8.ops[6]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted approval_program_or_contd@9.ops[2]: 'l-store-copy tmp%3#0 0'
debug: Replaced approval_program_or_contd@9.ops[4]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted approval_program_bool_merge@12.ops[3]: 'l-store-copy maybe_exists%2#0 1'
debug: Replaced approval_program_bool_merge@12.ops[6]: 'v-load maybe_exists%2#0' with 'l-load maybe_exists%2#0'
debug: Inserted approval_program_bool_merge@12.ops[5]: 'l-store-copy maybe_value%2#0 1'
debug: Replaced approval_program_bool_merge@12.ops[9]: 'v-load maybe_value%2#0' with 'l-load maybe_value%2#0'
debug: Inserted approval_program_and_contd@13.ops[3]: 'l-store-copy maybe_exists%3#0 1'
debug: Replaced approval_program_and_contd@13.ops[6]: 'v-load maybe_exists%3#0' with 'l-load maybe_exists%3#0'
debug: Inserted approval_program_and_contd@13.ops[5]: 'l-store-copy maybe_value%3#0 1'
debug: Replaced approval_program_and_contd@13.ops[9]: 'v-load maybe_value%3#0' with 'l-load maybe_value%3#0'
debug: Inserted approval_program_bool_merge@16.ops[4]: 'l-store-copy tmp%4#0 0'
debug: Replaced approval_program_bool_merge@16.ops[6]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted approval_program_and_contd@17.ops[2]: 'l-store-copy tmp%5#0 0'
debug: Replaced approval_program_and_contd@17.ops[4]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted approval_program_bool_merge@20.ops[3]: 'l-store-copy maybe_exists%4#0 1'
debug: Replaced approval_program_bool_merge@20.ops[6]: 'v-load maybe_exists%4#0' with 'l-load maybe_exists%4#0'
debug: Inserted approval_program_bool_merge@20.ops[5]: 'l-store-copy maybe_value%4#0 1'
debug: Replaced approval_program_bool_merge@20.ops[9]: 'v-load maybe_value%4#0' with 'l-load maybe_value%4#0'
debug: Inserted approval_program_and_contd@21.ops[3]: 'l-store-copy maybe_exists%5#0 1'
debug: Replaced approval_program_and_contd@21.ops[6]: 'v-load maybe_exists%5#0' with 'l-load maybe_exists%5#0'
debug: Inserted approval_program_and_contd@21.ops[5]: 'l-store-copy maybe_value%5#0 1'
debug: Replaced approval_program_and_contd@21.ops[9]: 'v-load maybe_value%5#0' with 'l-load maybe_value%5#0'
debug: Inserted approval_program_bool_merge@24.ops[4]: 'l-store-copy tmp%6#0 0'
debug: Replaced approval_program_bool_merge@24.ops[6]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted approval_program_and_contd@25.ops[2]: 'l-store-copy tmp%7#0 0'
debug: Replaced approval_program_and_contd@25.ops[4]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted approval_program_bool_merge@28.ops[3]: 'l-store-copy maybe_exists%6#0 1'
debug: Replaced approval_program_bool_merge@28.ops[6]: 'v-load maybe_exists%6#0' with 'l-load maybe_exists%6#0'
debug: Inserted approval_program_bool_merge@28.ops[5]: 'l-store-copy maybe_value%6#0 1'
debug: Replaced approval_program_bool_merge@28.ops[9]: 'v-load maybe_value%6#0' with 'l-load maybe_value%6#0'
debug: Inserted approval_program_and_contd@29.ops[3]: 'l-store-copy maybe_exists%7#0 1'
debug: Replaced approval_program_and_contd@29.ops[6]: 'v-load maybe_exists%7#0' with 'l-load maybe_exists%7#0'
debug: Inserted approval_program_and_contd@29.ops[5]: 'l-store-copy maybe_value%7#0 1'
debug: Replaced approval_program_and_contd@29.ops[9]: 'v-load maybe_value%7#0' with 'l-load maybe_value%7#0'
debug: Inserted approval_program_bool_merge@32.ops[11]: 'l-store-copy maybe_exists%8#0 1'
debug: Replaced approval_program_bool_merge@32.ops[14]: 'v-load maybe_exists%8#0' with 'l-load maybe_exists%8#0'
debug: Inserted approval_program_bool_merge@32.ops[13]: 'l-store-copy maybe_value%8#0 1'
debug: Replaced approval_program_bool_merge@32.ops[17]: 'v-load maybe_value%8#0' with 'l-load maybe_value%8#0'
debug: Inserted approval_program_and_contd@33.ops[3]: 'l-store-copy maybe_exists%9#0 1'
debug: Replaced approval_program_and_contd@33.ops[6]: 'v-load maybe_exists%9#0' with 'l-load maybe_exists%9#0'
debug: Inserted approval_program_and_contd@33.ops[5]: 'l-store-copy maybe_value%9#0 1'
debug: Replaced approval_program_and_contd@33.ops[9]: 'v-load maybe_value%9#0' with 'l-load maybe_value%9#0'
debug: Inserted approval_program_bool_merge@36.ops[4]: 'l-store-copy tmp%10#0 0'
debug: Replaced approval_program_bool_merge@36.ops[6]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted approval_program_ternary_merge@39.ops[3]: 'l-store-copy maybe_exists%10#0 1'
debug: Replaced approval_program_ternary_merge@39.ops[6]: 'v-load maybe_exists%10#0' with 'l-load maybe_exists%10#0'
debug: Inserted approval_program_ternary_merge@39.ops[5]: 'l-store-copy maybe_value%10#0 1'
debug: Replaced approval_program_ternary_merge@39.ops[9]: 'v-load maybe_value%10#0' with 'l-load maybe_value%10#0'
debug: Inserted approval_program_and_contd@40.ops[3]: 'l-store-copy maybe_exists%11#0 1'
debug: Replaced approval_program_and_contd@40.ops[6]: 'v-load maybe_exists%11#0' with 'l-load maybe_exists%11#0'
debug: Inserted approval_program_and_contd@40.ops[5]: 'l-store-copy maybe_value%11#0 1'
debug: Replaced approval_program_and_contd@40.ops[9]: 'v-load maybe_value%11#0' with 'l-load maybe_value%11#0'
debug: Inserted approval_program_bool_merge@43.ops[4]: 'l-store-copy tmp%11#0 0'
debug: Replaced approval_program_bool_merge@43.ops[6]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted approval_program_ternary_merge@46.ops[3]: 'l-store-copy maybe_exists%12#0 1'
debug: Replaced approval_program_ternary_merge@46.ops[6]: 'v-load maybe_exists%12#0' with 'l-load maybe_exists%12#0'
debug: Inserted approval_program_ternary_merge@46.ops[5]: 'l-store-copy maybe_value%12#0 1'
debug: Replaced approval_program_ternary_merge@46.ops[9]: 'v-load maybe_value%12#0' with 'l-load maybe_value%12#0'
debug: Inserted approval_program_and_contd@47.ops[3]: 'l-store-copy maybe_exists%13#0 1'
debug: Replaced approval_program_and_contd@47.ops[6]: 'v-load maybe_exists%13#0' with 'l-load maybe_exists%13#0'
debug: Inserted approval_program_and_contd@47.ops[5]: 'l-store-copy maybe_value%13#0 1'
debug: Replaced approval_program_and_contd@47.ops[9]: 'v-load maybe_value%13#0' with 'l-load maybe_value%13#0'
debug: test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program f-stack entry: ['and_result%0#0', 'and_result%1#0', 'and_result%3#0', 'and_result%5#0', 'and_result%6#0', 'and_result%7#0', 'and_result%8#0', 'ternary_result%0#0', 'ternary_result%1#0', 'tmp%8#0', 'tmp%9#0']
debug: test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program f-stack on first store: []
debug: optimizing TEAL subroutine ops test_cases.conditional_execution.contract.ConditionalExecutionContract.__algopy_entrypoint_with_init() -> uint64:
conditional_execution/contract.py:5 debug: optimizing TEAL subroutine ops test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__() -> void:
conditional_execution/contract.py:9 debug: optimizing TEAL subroutine ops test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program() -> uint64:
conditional_execution/contract.py:57 debug: optimizing TEAL subroutine ops test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset(condition: uint64) -> void:
conditional_execution/contract.py:63 debug: optimizing TEAL subroutine ops test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(ret_val: uint64) -> uint64:
conditional_execution/contract.py:68 debug: optimizing TEAL subroutine ops test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(ret_val: uint64) -> uint64:
conditional_execution/contract.py:73 debug: optimizing TEAL subroutine ops test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c(ret_val: uint64) -> uint64:
conditional_execution/contract.py:54 debug: optimizing TEAL subroutine ops test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program() -> uint64:
info: Writing conditional_execution/out_unoptimized/ConditionalExecutionContract.approval.teal
info: Writing conditional_execution/out_unoptimized/ConditionalExecutionContract.clear.teal
info: Writing conditional_execution/out_unoptimized/ConditionalExecutionContract.approval.bin
info: Writing conditional_execution/out_unoptimized/ConditionalExecutionContract.clear.bin
info: Writing conditional_execution/out_unoptimized/ConditionalExecutionContract.approval.stats.txt
info: Writing conditional_execution/out_unoptimized/ConditionalExecutionContract.clear.stats.txt
info: Writing conditional_execution/out_unoptimized/ConditionalExecutionContract.approval.puya.map
info: Writing conditional_execution/out_unoptimized/ConditionalExecutionContract.clear.puya.map