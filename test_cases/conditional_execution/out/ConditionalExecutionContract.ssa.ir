contract test_cases.conditional_execution.contract.ConditionalExecutionContract:
    program approval:
        subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program() -> bool:
            block@0: // L9
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L5
                test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__()
                goto block@2
            block@2: // after_if_else_L5
                let tmp%0#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
                goto tmp%0#0 ? block@4 : block@3
            block@3: // or_contd_L11
                let tmp%1#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
                goto tmp%1#0 ? block@4 : block@5
            block@4: // bool_true_L11
                let or_result%0#0: bool = 1u
                goto block@6
            block@5: // bool_false_L11
                let or_result%0#1: bool = 0u
                goto block@6
            block@6: // bool_merge_L11
                let or_result%0#2: bool = φ(or_result%0#0 <- block@4, or_result%0#1 <- block@5)
                let (maybe_value%0#0: bool, maybe_exists%0#0: bool) = (app_global_get_ex 0u "did_execute_a")
                (assert maybe_exists%0#0) // check self.did_execute_a exists
                goto maybe_value%0#0 ? block@7 : block@9
            block@7: // and_contd_L13
                let (maybe_value%1#0: bool, maybe_exists%1#0: bool) = (app_global_get_ex 0u "did_execute_b")
                (assert maybe_exists%1#0) // check self.did_execute_b exists
                goto maybe_value%1#0 ? block@9 : block@8
            block@8: // bool_true_L13
                let and_result%0#0: bool = 1u
                goto block@10
            block@9: // bool_false_L13
                let and_result%0#1: bool = 0u
                goto block@10
            block@10: // bool_merge_L13
                let and_result%0#2: bool = φ(and_result%0#0 <- block@8, and_result%0#1 <- block@9)
                test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset(and_result%0#2)
                let tmp%2#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(0u)
                goto tmp%2#0 ? block@12 : block@11
            block@11: // or_contd_L17
                let tmp%3#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
                goto tmp%3#0 ? block@12 : block@13
            block@12: // bool_true_L17
                let or_result%1#0: bool = 1u
                goto block@14
            block@13: // bool_false_L17
                let or_result%1#1: bool = 0u
                goto block@14
            block@14: // bool_merge_L17
                let or_result%1#2: bool = φ(or_result%1#0 <- block@12, or_result%1#1 <- block@13)
                let (maybe_value%2#0: bool, maybe_exists%2#0: bool) = (app_global_get_ex 0u "did_execute_a")
                (assert maybe_exists%2#0) // check self.did_execute_a exists
                goto maybe_value%2#0 ? block@15 : block@17
            block@15: // and_contd_L19
                let (maybe_value%3#0: bool, maybe_exists%3#0: bool) = (app_global_get_ex 0u "did_execute_b")
                (assert maybe_exists%3#0) // check self.did_execute_b exists
                goto maybe_value%3#0 ? block@16 : block@17
            block@16: // bool_true_L19
                let and_result%1#0: bool = 1u
                goto block@18
            block@17: // bool_false_L19
                let and_result%1#1: bool = 0u
                goto block@18
            block@18: // bool_merge_L19
                let and_result%1#2: bool = φ(and_result%1#0 <- block@16, and_result%1#1 <- block@17)
                test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset(and_result%1#2)
                let tmp%4#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(0u)
                goto tmp%4#0 ? block@19 : block@21
            block@19: // and_contd_L23
                let tmp%5#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
                goto tmp%5#0 ? block@20 : block@21
            block@20: // bool_true_L23
                let and_result%2#0: bool = 1u
                goto block@22
            block@21: // bool_false_L23
                let and_result%2#1: bool = 0u
                goto block@22
            block@22: // bool_merge_L23
                let and_result%2#2: bool = φ(and_result%2#0 <- block@20, and_result%2#1 <- block@21)
                let (maybe_value%4#0: bool, maybe_exists%4#0: bool) = (app_global_get_ex 0u "did_execute_a")
                (assert maybe_exists%4#0) // check self.did_execute_a exists
                goto maybe_value%4#0 ? block@23 : block@25
            block@23: // and_contd_L25
                let (maybe_value%5#0: bool, maybe_exists%5#0: bool) = (app_global_get_ex 0u "did_execute_b")
                (assert maybe_exists%5#0) // check self.did_execute_b exists
                goto maybe_value%5#0 ? block@25 : block@24
            block@24: // bool_true_L25
                let and_result%3#0: bool = 1u
                goto block@26
            block@25: // bool_false_L25
                let and_result%3#1: bool = 0u
                goto block@26
            block@26: // bool_merge_L25
                let and_result%3#2: bool = φ(and_result%3#0 <- block@24, and_result%3#1 <- block@25)
                test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset(and_result%3#2)
                let tmp%6#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
                goto tmp%6#0 ? block@27 : block@29
            block@27: // and_contd_L29
                let tmp%7#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
                goto tmp%7#0 ? block@28 : block@29
            block@28: // bool_true_L29
                let and_result%4#0: bool = 1u
                goto block@30
            block@29: // bool_false_L29
                let and_result%4#1: bool = 0u
                goto block@30
            block@30: // bool_merge_L29
                let and_result%4#2: bool = φ(and_result%4#0 <- block@28, and_result%4#1 <- block@29)
                let (maybe_value%6#0: bool, maybe_exists%6#0: bool) = (app_global_get_ex 0u "did_execute_a")
                (assert maybe_exists%6#0) // check self.did_execute_a exists
                goto maybe_value%6#0 ? block@31 : block@33
            block@31: // and_contd_L31
                let (maybe_value%7#0: bool, maybe_exists%7#0: bool) = (app_global_get_ex 0u "did_execute_b")
                (assert maybe_exists%7#0) // check self.did_execute_b exists
                goto maybe_value%7#0 ? block@32 : block@33
            block@32: // bool_true_L31
                let and_result%5#0: bool = 1u
                goto block@34
            block@33: // bool_false_L31
                let and_result%5#1: bool = 0u
                goto block@34
            block@34: // bool_merge_L31
                let and_result%5#2: bool = φ(and_result%5#0 <- block@32, and_result%5#1 <- block@33)
                test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset(and_result%5#2)
                let tmp%8#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
                let tmp%9#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
                let (maybe_value%8#0: bool, maybe_exists%8#0: bool) = (app_global_get_ex 0u "did_execute_a")
                (assert maybe_exists%8#0) // check self.did_execute_a exists
                goto maybe_value%8#0 ? block@35 : block@37
            block@35: // and_contd_L37
                let (maybe_value%9#0: bool, maybe_exists%9#0: bool) = (app_global_get_ex 0u "did_execute_b")
                (assert maybe_exists%9#0) // check self.did_execute_b exists
                goto maybe_value%9#0 ? block@36 : block@37
            block@36: // bool_true_L37
                let and_result%6#0: bool = 1u
                goto block@38
            block@37: // bool_false_L37
                let and_result%6#1: bool = 0u
                goto block@38
            block@38: // bool_merge_L37
                let and_result%6#2: bool = φ(and_result%6#0 <- block@36, and_result%6#1 <- block@37)
                test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset(and_result%6#2)
                let tmp%10#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c(1u)
                goto tmp%10#0 ? block@39 : block@40
            block@39: // ternary_true_L41
                let ternary_result%0#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
                goto block@41
            block@40: // ternary_false_L41
                let ternary_result%0#1: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
                goto block@41
            block@41: // ternary_merge_L41
                let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@39, ternary_result%0#1 <- block@40)
                let (maybe_value%10#0: bool, maybe_exists%10#0: bool) = (app_global_get_ex 0u "did_execute_a")
                (assert maybe_exists%10#0) // check self.did_execute_a exists
                goto maybe_value%10#0 ? block@42 : block@44
            block@42: // and_contd_L43
                let (maybe_value%11#0: bool, maybe_exists%11#0: bool) = (app_global_get_ex 0u "did_execute_b")
                (assert maybe_exists%11#0) // check self.did_execute_b exists
                goto maybe_value%11#0 ? block@44 : block@43
            block@43: // bool_true_L43
                let and_result%7#0: bool = 1u
                goto block@45
            block@44: // bool_false_L43
                let and_result%7#1: bool = 0u
                goto block@45
            block@45: // bool_merge_L43
                let and_result%7#2: bool = φ(and_result%7#0 <- block@43, and_result%7#1 <- block@44)
                test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset(and_result%7#2)
                let tmp%11#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c(0u)
                goto tmp%11#0 ? block@46 : block@47
            block@46: // ternary_true_L47
                let ternary_result%1#0: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(1u)
                goto block@48
            block@47: // ternary_false_L47
                let ternary_result%1#1: bool = test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(1u)
                goto block@48
            block@48: // ternary_merge_L47
                let ternary_result%1#2: bool = φ(ternary_result%1#0 <- block@46, ternary_result%1#1 <- block@47)
                let (maybe_value%12#0: bool, maybe_exists%12#0: bool) = (app_global_get_ex 0u "did_execute_a")
                (assert maybe_exists%12#0) // check self.did_execute_a exists
                goto maybe_value%12#0 ? block@51 : block@49
            block@49: // and_contd_L49
                let (maybe_value%13#0: bool, maybe_exists%13#0: bool) = (app_global_get_ex 0u "did_execute_b")
                (assert maybe_exists%13#0) // check self.did_execute_b exists
                goto maybe_value%13#0 ? block@50 : block@51
            block@50: // bool_true_L49
                let and_result%8#0: bool = 1u
                goto block@52
            block@51: // bool_false_L49
                let and_result%8#1: bool = 0u
                goto block@52
            block@52: // bool_merge_L49
                let and_result%8#2: bool = φ(and_result%8#0 <- block@50, and_result%8#1 <- block@51)
                test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset(and_result%8#2)
                return 1u
        
        subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(ret_val: bool) -> bool:
            block@0: // L63
                (app_global_put "did_execute_a" 1u)
                return ret_val#0
        
        subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(ret_val: bool) -> bool:
            block@0: // L68
                (app_global_put "did_execute_b" 1u)
                return ret_val#0
        
        subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset(condition: bool) -> void:
            block@0: // L57
                (assert condition#0)
                (app_global_put "did_execute_b" 0u)
                (app_global_put "did_execute_a" 0u)
                return 
        
        subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c(ret_val: bool) -> bool:
            block@0: // L73
                return ret_val#0
        
        subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__() -> void:
            block@0: // L5
                (app_global_put "did_execute_a" 0u)
                (app_global_put "did_execute_b" 0u)
                return 
    
    program clear-state:
        subroutine test_cases.conditional_execution.contract.ConditionalExecutionContract.clear_state_program() -> bool:
            block@0: // L54
                return 1u