// Op                                                                 Stack (out)
// test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program() -> uint64:
main_block@0:
    txn ApplicationID                                                 tmp%0#0
    bnz main_after_if_else@2
    // Implicit fall through to main_call___init__@1

main_call___init__@1:
    callsub __init__
    // Implicit fall through to main_after_if_else@2

main_after_if_else@2:
    // conditional_execution/contract.py:11
    // self.func_a(True) or self.func_b(True)
    int 1                                                             1
    callsub func_a                                                    tmp%1#0
    bnz main_bool_merge@6
    // Implicit fall through to main_or_contd@3

main_or_contd@3:
    // conditional_execution/contract.py:11
    // self.func_a(True) or self.func_b(True)
    int 1                                                             1
    callsub func_b                                                    tmp%2#0
    pop 1
    // Implicit fall through to main_bool_merge@6

main_bool_merge@6:
    // conditional_execution/contract.py:13
    // self.did_execute_a and not self.did_execute_b,
    int 0                                                             0
    byte "did_execute_a"                                              0,"did_execute_a"
    app_global_get_ex                                                 maybe_value%0#0,maybe_exists%0#0
    assert // check self.did_execute_a exists                         maybe_value%0#0
    l-load maybe_value%0#0 0                                          maybe_value%0#0
    bz main_bool_false@9
    // Implicit fall through to main_and_contd@7

main_and_contd@7:
    // conditional_execution/contract.py:13
    // self.did_execute_a and not self.did_execute_b,
    int 0                                                             0
    byte "did_execute_b"                                              0,"did_execute_b"
    app_global_get_ex                                                 maybe_value%1#0,maybe_exists%1#0
    assert // check self.did_execute_b exists                         maybe_value%1#0
    l-load maybe_value%1#0 0                                          maybe_value%1#0
    bnz main_bool_false@9
    // Implicit fall through to main_bool_true@8

main_bool_true@8:
    int 1                                                             and_result%0#0
    x-store and_result%0#0                                            (ùïè) and_result%0#0 |
    b main_bool_merge@10                                              (ùïè) and_result%0#0 |

main_bool_false@9:
    int 0                                                             and_result%0#0
    x-store and_result%0#0                                            (ùïè) and_result%0#0 |
    // Implicit fall through to main_bool_merge@10                    (ùïè) and_result%0#0 |

main_bool_merge@10:                                                   (ùïè) and_result%0#0 |
    // conditional_execution/contract.py:12-14
    // self.assert_and_reset(
    //     self.did_execute_a and not self.did_execute_b,
    // )
    x-load and_result%0#0                                             and_result%0#0
    callsub assert_and_reset
    // conditional_execution/contract.py:17
    // self.func_a(False) or self.func_b(True)
    int 0                                                             0
    callsub func_a                                                    tmp%3#0
    bnz main_bool_merge@14
    // Implicit fall through to main_or_contd@11

main_or_contd@11:
    // conditional_execution/contract.py:17
    // self.func_a(False) or self.func_b(True)
    int 1                                                             1
    callsub func_b                                                    tmp%4#0
    pop 1
    // Implicit fall through to main_bool_merge@14

main_bool_merge@14:
    // conditional_execution/contract.py:19
    // self.did_execute_a and self.did_execute_b,
    int 0                                                             0
    byte "did_execute_a"                                              0,"did_execute_a"
    app_global_get_ex                                                 maybe_value%2#0,maybe_exists%2#0
    assert // check self.did_execute_a exists                         maybe_value%2#0
    l-load maybe_value%2#0 0                                          maybe_value%2#0
    bz main_bool_false@17
    // Implicit fall through to main_and_contd@15

main_and_contd@15:
    // conditional_execution/contract.py:19
    // self.did_execute_a and self.did_execute_b,
    int 0                                                             0
    byte "did_execute_b"                                              0,"did_execute_b"
    app_global_get_ex                                                 maybe_value%3#0,maybe_exists%3#0
    assert // check self.did_execute_b exists                         maybe_value%3#0
    l-load maybe_value%3#0 0                                          maybe_value%3#0
    bz main_bool_false@17
    // Implicit fall through to main_bool_true@16

main_bool_true@16:
    int 1                                                             and_result%1#0
    x-store and_result%1#0                                            (ùïè) and_result%1#0 |
    b main_bool_merge@18                                              (ùïè) and_result%1#0 |

main_bool_false@17:
    int 0                                                             and_result%1#0
    x-store and_result%1#0                                            (ùïè) and_result%1#0 |
    // Implicit fall through to main_bool_merge@18                    (ùïè) and_result%1#0 |

main_bool_merge@18:                                                   (ùïè) and_result%1#0 |
    // conditional_execution/contract.py:18-20
    // self.assert_and_reset(
    //     self.did_execute_a and self.did_execute_b,
    // )
    x-load and_result%1#0                                             and_result%1#0
    callsub assert_and_reset
    // conditional_execution/contract.py:23
    // self.func_a(False) and self.func_b(True)
    int 0                                                             0
    callsub func_a                                                    tmp%5#0
    bz main_bool_merge@22
    // Implicit fall through to main_and_contd@19

main_and_contd@19:
    // conditional_execution/contract.py:23
    // self.func_a(False) and self.func_b(True)
    int 1                                                             1
    callsub func_b                                                    tmp%6#0
    pop 1
    // Implicit fall through to main_bool_merge@22

main_bool_merge@22:
    // conditional_execution/contract.py:25
    // self.did_execute_a and not self.did_execute_b,
    int 0                                                             0
    byte "did_execute_a"                                              0,"did_execute_a"
    app_global_get_ex                                                 maybe_value%4#0,maybe_exists%4#0
    assert // check self.did_execute_a exists                         maybe_value%4#0
    l-load maybe_value%4#0 0                                          maybe_value%4#0
    bz main_bool_false@25
    // Implicit fall through to main_and_contd@23

main_and_contd@23:
    // conditional_execution/contract.py:25
    // self.did_execute_a and not self.did_execute_b,
    int 0                                                             0
    byte "did_execute_b"                                              0,"did_execute_b"
    app_global_get_ex                                                 maybe_value%5#0,maybe_exists%5#0
    assert // check self.did_execute_b exists                         maybe_value%5#0
    l-load maybe_value%5#0 0                                          maybe_value%5#0
    bnz main_bool_false@25
    // Implicit fall through to main_bool_true@24

main_bool_true@24:
    int 1                                                             and_result%3#0
    x-store and_result%3#0                                            (ùïè) and_result%3#0 |
    b main_bool_merge@26                                              (ùïè) and_result%3#0 |

main_bool_false@25:
    int 0                                                             and_result%3#0
    x-store and_result%3#0                                            (ùïè) and_result%3#0 |
    // Implicit fall through to main_bool_merge@26                    (ùïè) and_result%3#0 |

main_bool_merge@26:                                                   (ùïè) and_result%3#0 |
    // conditional_execution/contract.py:24-26
    // self.assert_and_reset(
    //     self.did_execute_a and not self.did_execute_b,
    // )
    x-load and_result%3#0                                             and_result%3#0
    callsub assert_and_reset
    // conditional_execution/contract.py:29
    // self.func_a(True) and self.func_b(True)
    int 1                                                             1
    callsub func_a                                                    tmp%7#0
    bz main_bool_merge@30
    // Implicit fall through to main_and_contd@27

main_and_contd@27:
    // conditional_execution/contract.py:29
    // self.func_a(True) and self.func_b(True)
    int 1                                                             1
    callsub func_b                                                    tmp%8#0
    pop 1
    // Implicit fall through to main_bool_merge@30

main_bool_merge@30:
    // conditional_execution/contract.py:31
    // self.did_execute_a and self.did_execute_b,
    int 0                                                             0
    byte "did_execute_a"                                              0,"did_execute_a"
    app_global_get_ex                                                 maybe_value%6#0,maybe_exists%6#0
    assert // check self.did_execute_a exists                         maybe_value%6#0
    l-load maybe_value%6#0 0                                          maybe_value%6#0
    bz main_bool_false@33
    // Implicit fall through to main_and_contd@31

main_and_contd@31:
    // conditional_execution/contract.py:31
    // self.did_execute_a and self.did_execute_b,
    int 0                                                             0
    byte "did_execute_b"                                              0,"did_execute_b"
    app_global_get_ex                                                 maybe_value%7#0,maybe_exists%7#0
    assert // check self.did_execute_b exists                         maybe_value%7#0
    l-load maybe_value%7#0 0                                          maybe_value%7#0
    bz main_bool_false@33
    // Implicit fall through to main_bool_true@32

main_bool_true@32:
    int 1                                                             and_result%5#0
    x-store and_result%5#0                                            (ùïè) and_result%5#0 |
    b main_bool_merge@34                                              (ùïè) and_result%5#0 |

main_bool_false@33:
    int 0                                                             and_result%5#0
    x-store and_result%5#0                                            (ùïè) and_result%5#0 |
    // Implicit fall through to main_bool_merge@34                    (ùïè) and_result%5#0 |

main_bool_merge@34:                                                   (ùïè) and_result%5#0 |
    // conditional_execution/contract.py:30-32
    // self.assert_and_reset(
    //     self.did_execute_a and self.did_execute_b,
    // )
    x-load and_result%5#0                                             and_result%5#0
    callsub assert_and_reset
    // conditional_execution/contract.py:35
    // (self.func_a(True), self.func_b(True))[0]
    int 1                                                             1
    callsub func_a                                                    tmp%9#0
    pop 1
    int 1                                                             1
    callsub func_b                                                    tmp%10#0
    pop 1
    // conditional_execution/contract.py:37
    // self.did_execute_a and self.did_execute_b,
    int 0                                                             0
    byte "did_execute_a"                                              0,"did_execute_a"
    app_global_get_ex                                                 maybe_value%8#0,maybe_exists%8#0
    assert // check self.did_execute_a exists                         maybe_value%8#0
    l-load maybe_value%8#0 0                                          maybe_value%8#0
    bz main_bool_false@37
    // Implicit fall through to main_and_contd@35

main_and_contd@35:
    // conditional_execution/contract.py:37
    // self.did_execute_a and self.did_execute_b,
    int 0                                                             0
    byte "did_execute_b"                                              0,"did_execute_b"
    app_global_get_ex                                                 maybe_value%9#0,maybe_exists%9#0
    assert // check self.did_execute_b exists                         maybe_value%9#0
    l-load maybe_value%9#0 0                                          maybe_value%9#0
    bz main_bool_false@37
    // Implicit fall through to main_bool_true@36

main_bool_true@36:
    int 1                                                             and_result%6#0
    x-store and_result%6#0                                            (ùïè) and_result%6#0 |
    b main_bool_merge@38                                              (ùïè) and_result%6#0 |

main_bool_false@37:
    int 0                                                             and_result%6#0
    x-store and_result%6#0                                            (ùïè) and_result%6#0 |
    // Implicit fall through to main_bool_merge@38                    (ùïè) and_result%6#0 |

main_bool_merge@38:                                                   (ùïè) and_result%6#0 |
    // conditional_execution/contract.py:36-38
    // self.assert_and_reset(
    //     self.did_execute_a and self.did_execute_b,
    // )
    x-load and_result%6#0                                             and_result%6#0
    callsub assert_and_reset
    // conditional_execution/contract.py:41
    // self.func_a(True) if self.func_c(True) else self.func_b(True)
    int 1                                                             1
    callsub func_c                                                    tmp%11#0
    bz main_ternary_false@40
    // Implicit fall through to main_ternary_true@39

main_ternary_true@39:
    // conditional_execution/contract.py:41
    // self.func_a(True) if self.func_c(True) else self.func_b(True)
    int 1                                                             1
    callsub func_a                                                    ternary_result%0#0
    pop 1
    b main_ternary_merge@41

main_ternary_false@40:
    // conditional_execution/contract.py:41
    // self.func_a(True) if self.func_c(True) else self.func_b(True)
    int 1                                                             1
    callsub func_b                                                    ternary_result%0#0
    pop 1
    // Implicit fall through to main_ternary_merge@41

main_ternary_merge@41:
    // conditional_execution/contract.py:43
    // self.did_execute_a and not self.did_execute_b,
    int 0                                                             0
    byte "did_execute_a"                                              0,"did_execute_a"
    app_global_get_ex                                                 maybe_value%10#0,maybe_exists%10#0
    assert // check self.did_execute_a exists                         maybe_value%10#0
    l-load maybe_value%10#0 0                                         maybe_value%10#0
    bz main_bool_false@44
    // Implicit fall through to main_and_contd@42

main_and_contd@42:
    // conditional_execution/contract.py:43
    // self.did_execute_a and not self.did_execute_b,
    int 0                                                             0
    byte "did_execute_b"                                              0,"did_execute_b"
    app_global_get_ex                                                 maybe_value%11#0,maybe_exists%11#0
    assert // check self.did_execute_b exists                         maybe_value%11#0
    l-load maybe_value%11#0 0                                         maybe_value%11#0
    bnz main_bool_false@44
    // Implicit fall through to main_bool_true@43

main_bool_true@43:
    int 1                                                             and_result%7#0
    x-store and_result%7#0                                            (ùïè) and_result%7#0 |
    b main_bool_merge@45                                              (ùïè) and_result%7#0 |

main_bool_false@44:
    int 0                                                             and_result%7#0
    x-store and_result%7#0                                            (ùïè) and_result%7#0 |
    // Implicit fall through to main_bool_merge@45                    (ùïè) and_result%7#0 |

main_bool_merge@45:                                                   (ùïè) and_result%7#0 |
    // conditional_execution/contract.py:42-44
    // self.assert_and_reset(
    //     self.did_execute_a and not self.did_execute_b,
    // )
    x-load and_result%7#0                                             and_result%7#0
    callsub assert_and_reset
    // conditional_execution/contract.py:47
    // self.func_a(True) if self.func_c(False) else self.func_b(True)
    int 0                                                             0
    callsub func_c                                                    tmp%12#0
    bz main_ternary_false@47
    // Implicit fall through to main_ternary_true@46

main_ternary_true@46:
    // conditional_execution/contract.py:47
    // self.func_a(True) if self.func_c(False) else self.func_b(True)
    int 1                                                             1
    callsub func_a                                                    ternary_result%1#0
    pop 1
    b main_ternary_merge@48

main_ternary_false@47:
    // conditional_execution/contract.py:47
    // self.func_a(True) if self.func_c(False) else self.func_b(True)
    int 1                                                             1
    callsub func_b                                                    ternary_result%1#0
    pop 1
    // Implicit fall through to main_ternary_merge@48

main_ternary_merge@48:
    // conditional_execution/contract.py:49
    // not self.did_execute_a and self.did_execute_b,
    int 0                                                             0
    byte "did_execute_a"                                              0,"did_execute_a"
    app_global_get_ex                                                 maybe_value%12#0,maybe_exists%12#0
    assert // check self.did_execute_a exists                         maybe_value%12#0
    l-load maybe_value%12#0 0                                         maybe_value%12#0
    bnz main_bool_false@51
    // Implicit fall through to main_and_contd@49

main_and_contd@49:
    // conditional_execution/contract.py:49
    // not self.did_execute_a and self.did_execute_b,
    int 0                                                             0
    byte "did_execute_b"                                              0,"did_execute_b"
    app_global_get_ex                                                 maybe_value%13#0,maybe_exists%13#0
    assert // check self.did_execute_b exists                         maybe_value%13#0
    l-load maybe_value%13#0 0                                         maybe_value%13#0
    bz main_bool_false@51
    // Implicit fall through to main_bool_true@50

main_bool_true@50:
    int 1                                                             and_result%8#0
    x-store and_result%8#0                                            (ùïè) and_result%8#0 |
    b main_bool_merge@52                                              (ùïè) and_result%8#0 |

main_bool_false@51:
    int 0                                                             and_result%8#0
    x-store and_result%8#0                                            (ùïè) and_result%8#0 |
    // Implicit fall through to main_bool_merge@52                    (ùïè) and_result%8#0 |

main_bool_merge@52:                                                   (ùïè) and_result%8#0 |
    // conditional_execution/contract.py:48-50
    // self.assert_and_reset(
    //     not self.did_execute_a and self.did_execute_b,
    // )
    x-load and_result%8#0                                             and_result%8#0
    callsub assert_and_reset
    // conditional_execution/contract.py:52
    // return True
    int 1                                                             1
    return


// test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__() -> void:
__init__:
    // conditional_execution/contract.py:5
    // def __init__(self) -> None:
    proto 0 0

__init___block@0:
    // conditional_execution/contract.py:6
    // self.did_execute_a = False
    byte "did_execute_a"                                              "did_execute_a"
    int 0                                                             "did_execute_a",0
    app_global_put
    // conditional_execution/contract.py:7
    // self.did_execute_b = False
    byte "did_execute_b"                                              "did_execute_b"
    int 0                                                             "did_execute_b",0
    app_global_put
    retsub


// test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(ret_val: uint64) -> uint64:
func_a:                                                               (ùï°) ret_val#0 |
    // conditional_execution/contract.py:63-64
    // @subroutine
    // def func_a(self, ret_val: bool) -> bool:
    proto 1 1                                                         (ùï°) ret_val#0 |

func_a_block@0:                                                       (ùï°) ret_val#0 |
    // conditional_execution/contract.py:65
    // self.did_execute_a = True
    byte "did_execute_a"                                              (ùï°) ret_val#0 | "did_execute_a"
    int 1                                                             (ùï°) ret_val#0 | "did_execute_a",1
    app_global_put                                                    (ùï°) ret_val#0 |
    // conditional_execution/contract.py:66
    // return ret_val
    p-load ret_val#0                                                  (ùï°) ret_val#0 | ret_val#0 (copy)
    retsub                                                            ret_val#0 (copy)


// test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(ret_val: uint64) -> uint64:
func_b:                                                               (ùï°) ret_val#0 |
    // conditional_execution/contract.py:68-69
    // @subroutine
    // def func_b(self, ret_val: bool) -> bool:
    proto 1 1                                                         (ùï°) ret_val#0 |

func_b_block@0:                                                       (ùï°) ret_val#0 |
    // conditional_execution/contract.py:70
    // self.did_execute_b = True
    byte "did_execute_b"                                              (ùï°) ret_val#0 | "did_execute_b"
    int 1                                                             (ùï°) ret_val#0 | "did_execute_b",1
    app_global_put                                                    (ùï°) ret_val#0 |
    // conditional_execution/contract.py:71
    // return ret_val
    p-load ret_val#0                                                  (ùï°) ret_val#0 | ret_val#0 (copy)
    retsub                                                            ret_val#0 (copy)


// test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset(condition: uint64) -> void:
assert_and_reset:                                                     (ùï°) condition#0 |
    // conditional_execution/contract.py:57-58
    // @subroutine
    // def assert_and_reset(self, condition: bool) -> None:
    proto 1 0                                                         (ùï°) condition#0 |

assert_and_reset_block@0:                                             (ùï°) condition#0 |
    // conditional_execution/contract.py:59
    // assert condition
    p-load condition#0                                                (ùï°) condition#0 | condition#0 (copy)
    assert                                                            (ùï°) condition#0 |
    // conditional_execution/contract.py:60
    // self.did_execute_b = False
    byte "did_execute_b"                                              (ùï°) condition#0 | "did_execute_b"
    int 0                                                             (ùï°) condition#0 | "did_execute_b",0
    app_global_put                                                    (ùï°) condition#0 |
    // conditional_execution/contract.py:61
    // self.did_execute_a = False
    byte "did_execute_a"                                              (ùï°) condition#0 | "did_execute_a"
    int 0                                                             (ùï°) condition#0 | "did_execute_a",0
    app_global_put                                                    (ùï°) condition#0 |
    retsub


// test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c(ret_val: uint64) -> uint64:
func_c:                                                               (ùï°) ret_val#0 |
    // conditional_execution/contract.py:73-74
    // @subroutine
    // def func_c(self, ret_val: bool) -> bool:
    proto 1 1                                                         (ùï°) ret_val#0 |

func_c_block@0:                                                       (ùï°) ret_val#0 |
    // conditional_execution/contract.py:75
    // return ret_val
    p-load ret_val#0                                                  (ùï°) ret_val#0 | ret_val#0 (copy)
    retsub                                                            ret_val#0 (copy)


