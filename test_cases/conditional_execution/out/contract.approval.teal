#pragma version 8

// test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program() -> uint64:
main_block@0:
        txn ApplicationID
        bnz main_entrypoint@2

main_on_create@1:
        callsub __init__

main_entrypoint@2:
        int 1
        callsub func_a
        bnz main_bool_merge@6

main_or_contd@3:
        int 1
        callsub func_b
        pop

main_bool_merge@6:
        int 0
        byte "did_execute_a"
        app_global_get_ex
        assert // check value exists
        bz main_bool_false@9

main_and_contd@7:
        int 0
        byte "did_execute_b"
        app_global_get_ex
        assert // check value exists
        bnz main_bool_false@9

main_bool_true@8:
        int 1
        b main_bool_merge@10

main_bool_false@9:
        int 0

main_bool_merge@10:
        callsub assert_and_reset
        int 0
        callsub func_a
        bnz main_bool_merge@14

main_or_contd@11:
        int 1
        callsub func_b
        pop

main_bool_merge@14:
        int 0
        byte "did_execute_a"
        app_global_get_ex
        assert // check value exists
        bz main_bool_false@17

main_and_contd@15:
        int 0
        byte "did_execute_b"
        app_global_get_ex
        assert // check value exists
        bz main_bool_false@17

main_bool_true@16:
        int 1
        b main_bool_merge@18

main_bool_false@17:
        int 0

main_bool_merge@18:
        callsub assert_and_reset
        int 0
        callsub func_a
        bz main_bool_merge@22

main_and_contd@19:
        int 1
        callsub func_b
        pop

main_bool_merge@22:
        int 0
        byte "did_execute_a"
        app_global_get_ex
        assert // check value exists
        bz main_bool_false@25

main_and_contd@23:
        int 0
        byte "did_execute_b"
        app_global_get_ex
        assert // check value exists
        bnz main_bool_false@25

main_bool_true@24:
        int 1
        b main_bool_merge@26

main_bool_false@25:
        int 0

main_bool_merge@26:
        callsub assert_and_reset
        int 1
        callsub func_a
        bz main_bool_merge@30

main_and_contd@27:
        int 1
        callsub func_b
        pop

main_bool_merge@30:
        int 0
        byte "did_execute_a"
        app_global_get_ex
        assert // check value exists
        bz main_bool_false@33

main_and_contd@31:
        int 0
        byte "did_execute_b"
        app_global_get_ex
        assert // check value exists
        bz main_bool_false@33

main_bool_true@32:
        int 1
        b main_bool_merge@34

main_bool_false@33:
        int 0

main_bool_merge@34:
        callsub assert_and_reset
        int 1
        callsub func_a
        pop
        int 1
        callsub func_b
        pop
        int 0
        byte "did_execute_a"
        app_global_get_ex
        assert // check value exists
        bz main_bool_false@37

main_and_contd@35:
        int 0
        byte "did_execute_b"
        app_global_get_ex
        assert // check value exists
        bz main_bool_false@37

main_bool_true@36:
        int 1
        b main_bool_merge@38

main_bool_false@37:
        int 0

main_bool_merge@38:
        callsub assert_and_reset
        int 1
        callsub func_c
        bz main_ternary_false@40

main_ternary_true@39:
        int 1
        callsub func_a
        pop
        b main_ternary_merge@41

main_ternary_false@40:
        int 1
        callsub func_b
        pop

main_ternary_merge@41:
        int 0
        byte "did_execute_a"
        app_global_get_ex
        assert // check value exists
        bz main_bool_false@44

main_and_contd@42:
        int 0
        byte "did_execute_b"
        app_global_get_ex
        assert // check value exists
        bnz main_bool_false@44

main_bool_true@43:
        int 1
        b main_bool_merge@45

main_bool_false@44:
        int 0

main_bool_merge@45:
        callsub assert_and_reset
        int 0
        callsub func_c
        bz main_ternary_false@47

main_ternary_true@46:
        int 1
        callsub func_a
        pop
        b main_ternary_merge@48

main_ternary_false@47:
        int 1
        callsub func_b
        pop

main_ternary_merge@48:
        int 0
        byte "did_execute_a"
        app_global_get_ex
        assert // check value exists
        bnz main_bool_false@51

main_and_contd@49:
        int 0
        byte "did_execute_b"
        app_global_get_ex
        assert // check value exists
        bz main_bool_false@51

main_bool_true@50:
        int 1
        b main_bool_merge@52

main_bool_false@51:
        int 0

main_bool_merge@52:
        callsub assert_and_reset
        int 1
        return


// test_cases.conditional_execution.contract.ConditionalExecutionContract.func_a(ret_val#0: uint64) -> uint64:
func_a:
        proto 1 1

func_a_block@0:
        byte "did_execute_a"
        int 1
        app_global_put
        frame_dig -1
        retsub


// test_cases.conditional_execution.contract.ConditionalExecutionContract.func_b(ret_val#0: uint64) -> uint64:
func_b:
        proto 1 1

func_b_block@0:
        byte "did_execute_b"
        int 1
        app_global_put
        frame_dig -1
        retsub


// test_cases.conditional_execution.contract.ConditionalExecutionContract.assert_and_reset(condition#0: uint64) -> void:
assert_and_reset:
        proto 1 0

assert_and_reset_block@0:
        frame_dig -1
        assert
        byte "did_execute_b"
        int 0
        app_global_put
        byte "did_execute_a"
        int 0
        app_global_put
        retsub


// test_cases.conditional_execution.contract.ConditionalExecutionContract.func_c(ret_val#0: uint64) -> uint64:
func_c:
        proto 1 1

func_c_block@0:
        frame_dig -1
        retsub


// test_cases.conditional_execution.contract.ConditionalExecutionContract.__init__() -> void:
__init__:
        proto 0 0

__init___block@0:
        byte "did_execute_a"
        int 0
        app_global_put
        byte "did_execute_b"
        int 0
        app_global_put
        retsub

