{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKQ;AAAqB;AAArB;AACA;AAAqB;AAArB;AA0DA;AAAqB;AAArB;AApDI;AAAA;AAAA;AAAA;AAAA;;;AAA2B;AAAA;AAAA;AAAA;AAAJ;;;;AA8C3B;AACA;AAAqB;AAArB;AACA;AAAqB;AAArB;AAIA;AAAqB;AAArB;AAKA;AAAqB;AAArB;AAnDI;AAAA;AAAA;AAAA;AAAA;;;AAAuB;AAAA;AAAA;AAAA;AAAvB;;;;AAwCJ;AACA;AAAqB;AAArB;AACA;AAAqB;AAArB;AAIA;AAAqB;AAArB;AAxCI;AAAA;AAAA;AAAA;AAAA;;;AAA2B;AAAA;AAAA;AAAA;AAAJ;;;;AAkC3B;AACA;AAAqB;AAArB;AACA;AAAqB;AAArB;AAIA;AAAqB;AAArB;AAKA;AAAqB;AAArB;AAvCI;AAAA;AAAA;AAAA;AAAA;;;AAAuB;AAAA;AAAA;AAAA;AAAvB;;;;AA4BJ;AACA;AAAqB;AAArB;AACA;AAAqB;AAArB;AAIA;AAAqB;AAArB;AAKA;AAAqB;AAArB;AAjCI;AAAA;AAAA;AAAA;AAAA;;;AAAuB;AAAA;AAAA;AAAA;AAAvB;;;;AAsBJ;AACA;AAAqB;AAArB;AACA;AAAqB;AAArB;AAIA;AAAqB;AAArB;AAtBI;AAAA;AAAA;AAAA;AAAA;;;AAA2B;AAAA;AAAA;AAAA;AAAJ;;;;AAgB3B;AACA;AAAqB;AAArB;AACA;AAAqB;AAArB;AASA;AAAqB;AAArB;AArBQ;AAAA;AAAA;AAAA;AAAJ;;;AAA2B;AAAA;AAAA;AAAA;AAA3B;;;;AAUJ;AACA;AAAqB;AAArB;AACA;AAAqB;AAArB;AATO;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.conditional_execution.contract.ConditionalExecutionContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"did_execute_a\" \"did_execute_b\""
    },
    "35": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "37": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "40": {
      "op": "bytec_0 // \"did_execute_a\""
    },
    "41": {
      "op": "intc_0 // 0"
    },
    "42": {
      "op": "app_global_put"
    },
    "43": {
      "op": "bytec_1 // \"did_execute_b\""
    },
    "44": {
      "op": "intc_0 // 0"
    },
    "45": {
      "op": "app_global_put"
    },
    "46": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "bytec_0 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\""
      ],
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "47": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"did_execute_a\"",
        "1"
      ],
      "stack_out": [
        "\"did_execute_a\"",
        "1"
      ]
    },
    "48": {
      "op": "app_global_put",
      "stack_out": []
    },
    "49": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "50": {
      "op": "bytec_0 // \"did_execute_a\"",
      "stack_out": [
        "0",
        "\"did_execute_a\""
      ]
    },
    "51": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "52": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "53": {
      "op": "bz main_bool_false@10",
      "stack_out": []
    },
    "56": {
      "op": "intc_0 // 0"
    },
    "57": {
      "op": "bytec_1 // \"did_execute_b\""
    },
    "58": {
      "op": "app_global_get_ex"
    },
    "59": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists"
    },
    "60": {
      "op": "bnz main_bool_false@10"
    },
    "63": {
      "op": "intc_1 // 1"
    },
    "64": {
      "block": "main_bool_merge@11",
      "stack_in": [
        "condition#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "65": {
      "op": "bytec_1 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\""
      ],
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "66": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "\"did_execute_b\"",
        "0"
      ]
    },
    "67": {
      "op": "app_global_put",
      "stack_out": []
    },
    "68": {
      "op": "bytec_0 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\""
      ],
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "69": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"did_execute_a\"",
        "0"
      ]
    },
    "70": {
      "op": "app_global_put",
      "stack_out": []
    },
    "71": {
      "op": "bytec_0 // \"did_execute_a\"",
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "72": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"did_execute_a\"",
        "1"
      ],
      "stack_out": [
        "\"did_execute_a\"",
        "1"
      ]
    },
    "73": {
      "op": "app_global_put",
      "stack_out": []
    },
    "74": {
      "op": "bytec_1 // \"did_execute_b\"",
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "75": {
      "op": "intc_1 // 1",
      "stack_out": [
        "\"did_execute_b\"",
        "1"
      ]
    },
    "76": {
      "op": "app_global_put",
      "stack_out": []
    },
    "77": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "78": {
      "op": "bytec_0 // \"did_execute_a\"",
      "stack_out": [
        "0",
        "\"did_execute_a\""
      ]
    },
    "79": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "80": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "81": {
      "op": "bz main_bool_false@18",
      "stack_out": []
    },
    "84": {
      "op": "intc_0 // 0"
    },
    "85": {
      "op": "bytec_1 // \"did_execute_b\""
    },
    "86": {
      "op": "app_global_get_ex"
    },
    "87": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists"
    },
    "88": {
      "op": "bz main_bool_false@18"
    },
    "91": {
      "op": "intc_1 // 1"
    },
    "92": {
      "block": "main_bool_merge@19",
      "stack_in": [
        "condition#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "93": {
      "op": "bytec_1 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\""
      ],
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "94": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "\"did_execute_b\"",
        "0"
      ]
    },
    "95": {
      "op": "app_global_put",
      "stack_out": []
    },
    "96": {
      "op": "bytec_0 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\""
      ],
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "97": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"did_execute_a\"",
        "0"
      ]
    },
    "98": {
      "op": "app_global_put",
      "stack_out": []
    },
    "99": {
      "op": "bytec_0 // \"did_execute_a\"",
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "100": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"did_execute_a\"",
        "1"
      ],
      "stack_out": [
        "\"did_execute_a\"",
        "1"
      ]
    },
    "101": {
      "op": "app_global_put",
      "stack_out": []
    },
    "102": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "103": {
      "op": "bytec_0 // \"did_execute_a\"",
      "stack_out": [
        "0",
        "\"did_execute_a\""
      ]
    },
    "104": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "105": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "106": {
      "op": "bz main_bool_false@26",
      "stack_out": []
    },
    "109": {
      "op": "intc_0 // 0"
    },
    "110": {
      "op": "bytec_1 // \"did_execute_b\""
    },
    "111": {
      "op": "app_global_get_ex"
    },
    "112": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists"
    },
    "113": {
      "op": "bnz main_bool_false@26"
    },
    "116": {
      "op": "intc_1 // 1"
    },
    "117": {
      "block": "main_bool_merge@27",
      "stack_in": [
        "condition#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "118": {
      "op": "bytec_1 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\""
      ],
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "119": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "\"did_execute_b\"",
        "0"
      ]
    },
    "120": {
      "op": "app_global_put",
      "stack_out": []
    },
    "121": {
      "op": "bytec_0 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\""
      ],
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "122": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"did_execute_a\"",
        "0"
      ]
    },
    "123": {
      "op": "app_global_put",
      "stack_out": []
    },
    "124": {
      "op": "bytec_0 // \"did_execute_a\"",
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "125": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"did_execute_a\"",
        "1"
      ],
      "stack_out": [
        "\"did_execute_a\"",
        "1"
      ]
    },
    "126": {
      "op": "app_global_put",
      "stack_out": []
    },
    "127": {
      "op": "bytec_1 // \"did_execute_b\"",
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "128": {
      "op": "intc_1 // 1",
      "stack_out": [
        "\"did_execute_b\"",
        "1"
      ]
    },
    "129": {
      "op": "app_global_put",
      "stack_out": []
    },
    "130": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "131": {
      "op": "bytec_0 // \"did_execute_a\"",
      "stack_out": [
        "0",
        "\"did_execute_a\""
      ]
    },
    "132": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "133": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "maybe_value%6#0"
      ]
    },
    "134": {
      "op": "bz main_bool_false@34",
      "stack_out": []
    },
    "137": {
      "op": "intc_0 // 0"
    },
    "138": {
      "op": "bytec_1 // \"did_execute_b\""
    },
    "139": {
      "op": "app_global_get_ex"
    },
    "140": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists"
    },
    "141": {
      "op": "bz main_bool_false@34"
    },
    "144": {
      "op": "intc_1 // 1"
    },
    "145": {
      "block": "main_bool_merge@35",
      "stack_in": [
        "condition#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "146": {
      "op": "bytec_1 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\""
      ],
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "147": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "\"did_execute_b\"",
        "0"
      ]
    },
    "148": {
      "op": "app_global_put",
      "stack_out": []
    },
    "149": {
      "op": "bytec_0 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\""
      ],
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "150": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"did_execute_a\"",
        "0"
      ]
    },
    "151": {
      "op": "app_global_put",
      "stack_out": []
    },
    "152": {
      "op": "bytec_0 // \"did_execute_a\"",
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "153": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"did_execute_a\"",
        "1"
      ],
      "stack_out": [
        "\"did_execute_a\"",
        "1"
      ]
    },
    "154": {
      "op": "app_global_put",
      "stack_out": []
    },
    "155": {
      "op": "bytec_1 // \"did_execute_b\"",
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "156": {
      "op": "intc_1 // 1",
      "stack_out": [
        "\"did_execute_b\"",
        "1"
      ]
    },
    "157": {
      "op": "app_global_put",
      "stack_out": []
    },
    "158": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "159": {
      "op": "bytec_0 // \"did_execute_a\"",
      "stack_out": [
        "0",
        "\"did_execute_a\""
      ]
    },
    "160": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "161": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "maybe_value%8#0"
      ]
    },
    "162": {
      "op": "bz main_bool_false@38",
      "stack_out": []
    },
    "165": {
      "op": "intc_0 // 0"
    },
    "166": {
      "op": "bytec_1 // \"did_execute_b\""
    },
    "167": {
      "op": "app_global_get_ex"
    },
    "168": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists"
    },
    "169": {
      "op": "bz main_bool_false@38"
    },
    "172": {
      "op": "intc_1 // 1"
    },
    "173": {
      "block": "main_bool_merge@39",
      "stack_in": [
        "condition#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "174": {
      "op": "bytec_1 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\""
      ],
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "175": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "\"did_execute_b\"",
        "0"
      ]
    },
    "176": {
      "op": "app_global_put",
      "stack_out": []
    },
    "177": {
      "op": "bytec_0 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\""
      ],
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "178": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"did_execute_a\"",
        "0"
      ]
    },
    "179": {
      "op": "app_global_put",
      "stack_out": []
    },
    "180": {
      "op": "bytec_0 // \"did_execute_a\"",
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "181": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"did_execute_a\"",
        "1"
      ],
      "stack_out": [
        "\"did_execute_a\"",
        "1"
      ]
    },
    "182": {
      "op": "app_global_put",
      "stack_out": []
    },
    "183": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "184": {
      "op": "bytec_0 // \"did_execute_a\"",
      "stack_out": [
        "0",
        "\"did_execute_a\""
      ]
    },
    "185": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0"
      ],
      "stack_out": [
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "186": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "maybe_value%10#0"
      ]
    },
    "187": {
      "op": "bz main_bool_false@45",
      "stack_out": []
    },
    "190": {
      "op": "intc_0 // 0"
    },
    "191": {
      "op": "bytec_1 // \"did_execute_b\""
    },
    "192": {
      "op": "app_global_get_ex"
    },
    "193": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists"
    },
    "194": {
      "op": "bnz main_bool_false@45"
    },
    "197": {
      "op": "intc_1 // 1"
    },
    "198": {
      "block": "main_bool_merge@46",
      "stack_in": [
        "condition#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "199": {
      "op": "bytec_1 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\""
      ],
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "200": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "\"did_execute_b\"",
        "0"
      ]
    },
    "201": {
      "op": "app_global_put",
      "stack_out": []
    },
    "202": {
      "op": "bytec_0 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\""
      ],
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "203": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"did_execute_a\"",
        "0"
      ]
    },
    "204": {
      "op": "app_global_put",
      "stack_out": []
    },
    "205": {
      "op": "bytec_1 // \"did_execute_b\"",
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "206": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"did_execute_b\"",
        "1"
      ],
      "stack_out": [
        "\"did_execute_b\"",
        "1"
      ]
    },
    "207": {
      "op": "app_global_put",
      "stack_out": []
    },
    "208": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "209": {
      "op": "bytec_0 // \"did_execute_a\"",
      "stack_out": [
        "0",
        "\"did_execute_a\""
      ]
    },
    "210": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%12#0",
        "maybe_value%12#0"
      ],
      "stack_out": [
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "211": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "maybe_value%12#0"
      ]
    },
    "212": {
      "op": "bnz main_bool_false@52",
      "stack_out": []
    },
    "215": {
      "op": "intc_0 // 0"
    },
    "216": {
      "op": "bytec_1 // \"did_execute_b\""
    },
    "217": {
      "op": "app_global_get_ex"
    },
    "218": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists"
    },
    "219": {
      "op": "bz main_bool_false@52"
    },
    "222": {
      "op": "intc_1 // 1"
    },
    "223": {
      "block": "main_bool_merge@53",
      "stack_in": [
        "condition#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "224": {
      "op": "bytec_1 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\""
      ],
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "225": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "\"did_execute_b\"",
        "0"
      ]
    },
    "226": {
      "op": "app_global_put",
      "stack_out": []
    },
    "227": {
      "op": "bytec_0 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\""
      ],
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "228": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"did_execute_a\"",
        "0"
      ]
    },
    "229": {
      "op": "app_global_put",
      "stack_out": []
    },
    "230": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "231": {
      "op": "return",
      "stack_out": []
    },
    "232": {
      "block": "main_bool_false@52",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "condition#0"
      ],
      "stack_out": [
        "condition#0"
      ]
    },
    "233": {
      "op": "b main_bool_merge@53"
    },
    "236": {
      "block": "main_bool_false@45",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "condition#0"
      ],
      "stack_out": [
        "condition#0"
      ]
    },
    "237": {
      "op": "b main_bool_merge@46"
    },
    "240": {
      "block": "main_bool_false@38",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "condition#0"
      ],
      "stack_out": [
        "condition#0"
      ]
    },
    "241": {
      "op": "b main_bool_merge@39"
    },
    "244": {
      "block": "main_bool_false@34",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "condition#0"
      ],
      "stack_out": [
        "condition#0"
      ]
    },
    "245": {
      "op": "b main_bool_merge@35"
    },
    "248": {
      "block": "main_bool_false@26",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "condition#0"
      ],
      "stack_out": [
        "condition#0"
      ]
    },
    "249": {
      "op": "b main_bool_merge@27"
    },
    "252": {
      "block": "main_bool_false@18",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "condition#0"
      ],
      "stack_out": [
        "condition#0"
      ]
    },
    "253": {
      "op": "b main_bool_merge@19"
    },
    "256": {
      "block": "main_bool_false@10",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "condition#0"
      ],
      "stack_out": [
        "condition#0"
      ]
    },
    "257": {
      "op": "b main_bool_merge@11"
    }
  }
}