{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKQ;AAAqB;AAArB;AACA;AAAqB;AAArB;AA0DA;AAAqB;AAArB;AApD+B;AAAA;AAAA;AAAA;AAAJ;;;;AA8C3B;AACA;AAAqB;AAArB;AAKA;AAAqB;AAArB;AALA;AAAqB;AAArB;AAKA;AAAqB;AAArB;AALA;AAAqB;AAArB;AAKA;AAAqB;AAArB;AALA;AAAqB;AAArB;AAKA;AAAqB;AAArB;AALA;AAAqB;AAArB;AACA;AAAqB;AAArB;AASA;AAAqB;AAArB;AArBQ;AAAA;AAAA;AAAA;AAAJ;;;AAA2B;AAAA;AAAA;AAAA;AAA3B;;;;AAUJ;AACA;AAAqB;AAArB;AACA;AAAqB;AAArB;AATO;AAAP;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.conditional_execution.contract.ConditionalExecutionContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"did_execute_b\" \"did_execute_a\""
    },
    "35": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "37": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "40": {
      "op": "bytec_1 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\""
      ],
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "41": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"did_execute_a\"",
        "0"
      ],
      "stack_out": [
        "\"did_execute_a\"",
        "0"
      ]
    },
    "42": {
      "op": "app_global_put",
      "stack_out": []
    },
    "43": {
      "op": "bytec_0 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\""
      ],
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "44": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"did_execute_b\"",
        "0"
      ]
    },
    "45": {
      "op": "app_global_put",
      "stack_out": []
    },
    "46": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "bytec_1 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\""
      ],
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "47": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"did_execute_a\"",
        "1"
      ],
      "stack_out": [
        "\"did_execute_a\"",
        "1"
      ]
    },
    "48": {
      "op": "app_global_put",
      "stack_out": []
    },
    "49": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "50": {
      "op": "bytec_0 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"did_execute_b\""
      ]
    },
    "51": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "52": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "53": {
      "op": "bnz main_bool_false@9",
      "stack_out": []
    },
    "56": {
      "op": "intc_1 // 1",
      "defined_out": [
        "condition#0"
      ],
      "stack_out": [
        "condition#0"
      ]
    },
    "57": {
      "block": "main_bool_merge@10",
      "stack_in": [
        "condition#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "58": {
      "op": "bytec_0 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\""
      ],
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "59": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "\"did_execute_b\"",
        "0"
      ]
    },
    "60": {
      "op": "app_global_put",
      "stack_out": []
    },
    "61": {
      "op": "bytec_1 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\""
      ],
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "62": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"did_execute_a\"",
        "1"
      ],
      "stack_out": [
        "\"did_execute_a\"",
        "1"
      ]
    },
    "63": {
      "op": "app_global_put",
      "stack_out": []
    },
    "64": {
      "op": "bytec_0 // \"did_execute_b\"",
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "65": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"did_execute_b\"",
        "0"
      ]
    },
    "66": {
      "op": "app_global_put",
      "stack_out": []
    },
    "67": {
      "op": "bytec_1 // \"did_execute_a\"",
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "68": {
      "op": "intc_1 // 1",
      "stack_out": [
        "\"did_execute_a\"",
        "1"
      ]
    },
    "69": {
      "op": "app_global_put",
      "stack_out": []
    },
    "70": {
      "op": "bytec_0 // \"did_execute_b\"",
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "71": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"did_execute_b\"",
        "0"
      ]
    },
    "72": {
      "op": "app_global_put",
      "stack_out": []
    },
    "73": {
      "op": "bytec_1 // \"did_execute_a\"",
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "74": {
      "op": "intc_1 // 1",
      "stack_out": [
        "\"did_execute_a\"",
        "1"
      ]
    },
    "75": {
      "op": "app_global_put",
      "stack_out": []
    },
    "76": {
      "op": "bytec_0 // \"did_execute_b\"",
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "77": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"did_execute_b\"",
        "0"
      ]
    },
    "78": {
      "op": "app_global_put",
      "stack_out": []
    },
    "79": {
      "op": "bytec_1 // \"did_execute_a\"",
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "80": {
      "op": "intc_1 // 1",
      "stack_out": [
        "\"did_execute_a\"",
        "1"
      ]
    },
    "81": {
      "op": "app_global_put",
      "stack_out": []
    },
    "82": {
      "op": "bytec_0 // \"did_execute_b\"",
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "83": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"did_execute_b\"",
        "0"
      ]
    },
    "84": {
      "op": "app_global_put",
      "stack_out": []
    },
    "85": {
      "op": "bytec_1 // \"did_execute_a\"",
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "86": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"did_execute_a\"",
        "0"
      ]
    },
    "87": {
      "op": "app_global_put",
      "stack_out": []
    },
    "88": {
      "op": "bytec_0 // \"did_execute_b\"",
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "89": {
      "op": "intc_1 // 1",
      "stack_out": [
        "\"did_execute_b\"",
        "1"
      ]
    },
    "90": {
      "op": "app_global_put",
      "stack_out": []
    },
    "91": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "92": {
      "op": "bytec_1 // \"did_execute_a\"",
      "stack_out": [
        "0",
        "\"did_execute_a\""
      ]
    },
    "93": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%12#0",
        "maybe_value%12#0"
      ],
      "stack_out": [
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "94": {
      "error": "check self.did_execute_a exists",
      "op": "assert // check self.did_execute_a exists",
      "stack_out": [
        "maybe_value%12#0"
      ]
    },
    "95": {
      "op": "bnz main_bool_false@51",
      "stack_out": []
    },
    "98": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "99": {
      "op": "bytec_0 // \"did_execute_b\"",
      "stack_out": [
        "0",
        "\"did_execute_b\""
      ]
    },
    "100": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%13#0",
        "maybe_value%13#0"
      ],
      "stack_out": [
        "maybe_value%13#0",
        "maybe_exists%13#0"
      ]
    },
    "101": {
      "error": "check self.did_execute_b exists",
      "op": "assert // check self.did_execute_b exists",
      "stack_out": [
        "maybe_value%13#0"
      ]
    },
    "102": {
      "op": "bz main_bool_false@51",
      "stack_out": []
    },
    "105": {
      "op": "intc_1 // 1",
      "defined_out": [
        "condition#0"
      ],
      "stack_out": [
        "condition#0"
      ]
    },
    "106": {
      "block": "main_bool_merge@52",
      "stack_in": [
        "condition#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "107": {
      "op": "bytec_0 // \"did_execute_b\"",
      "defined_out": [
        "\"did_execute_b\""
      ],
      "stack_out": [
        "\"did_execute_b\""
      ]
    },
    "108": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"did_execute_b\"",
        "0"
      ],
      "stack_out": [
        "\"did_execute_b\"",
        "0"
      ]
    },
    "109": {
      "op": "app_global_put",
      "stack_out": []
    },
    "110": {
      "op": "bytec_1 // \"did_execute_a\"",
      "defined_out": [
        "\"did_execute_a\""
      ],
      "stack_out": [
        "\"did_execute_a\""
      ]
    },
    "111": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"did_execute_a\"",
        "0"
      ]
    },
    "112": {
      "op": "app_global_put",
      "stack_out": []
    },
    "113": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "114": {
      "op": "return",
      "stack_out": []
    },
    "115": {
      "block": "main_bool_false@51",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "condition#0"
      ],
      "stack_out": [
        "condition#0"
      ]
    },
    "116": {
      "op": "b main_bool_merge@52"
    },
    "119": {
      "block": "main_bool_false@9",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "condition#0"
      ],
      "stack_out": [
        "condition#0"
      ]
    },
    "120": {
      "op": "b main_bool_merge@10"
    }
  }
}