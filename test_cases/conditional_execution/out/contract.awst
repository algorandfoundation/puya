contract ConditionalExecutionContract
{
  globals {
    ['did_execute_a']: bool
    ['did_execute_b']: bool
  }
  
  constructor()
  {
    this.did_execute_a: bool = false
    this.did_execute_b: bool = false
  }
  
  approval_program(): bool
  {
    this::func_a(true) or this::func_b(true)
    this::assert_and_reset(this.did_execute_a and !(this.did_execute_b))
    this::func_a(false) or this::func_b(true)
    this::assert_and_reset(this.did_execute_a and this.did_execute_b)
    this::func_a(false) and this::func_b(true)
    this::assert_and_reset(this.did_execute_a and !(this.did_execute_b))
    this::func_a(true) and this::func_b(true)
    this::assert_and_reset(this.did_execute_a and this.did_execute_b)
    (this::func_a(true), this::func_b(true))[0]
    this::assert_and_reset(this.did_execute_a and this.did_execute_b)
    (this::func_c(true)) ? (this::func_a(true)) : (this::func_b(true))
    this::assert_and_reset(this.did_execute_a and !(this.did_execute_b))
    (this::func_c(false)) ? (this::func_a(true)) : (this::func_b(true))
    this::assert_and_reset(!(this.did_execute_a) and this.did_execute_b)
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
  
  subroutine assert_and_reset(condition: bool): void
  {
    assert(condition)
    this.did_execute_b: bool = false
    this.did_execute_a: bool = false
  }
  
  subroutine func_a(ret_val: bool): bool
  {
    this.did_execute_a: bool = true
    return ret_val
  }
  
  subroutine func_b(ret_val: bool): bool
  {
    this.did_execute_b: bool = true
    return ret_val
  }
  
  subroutine func_c(ret_val: bool): bool
  {
    return ret_val
  }
}