contract test_cases.state_totals.contract.Contract:
    program approval:
        subroutine test_cases.state_totals.contract.Contract.approval_program() -> bool:
            block@0: // L6
                let tmp%0#0: bool = (txn NumAppArgs)
                let not%tmp%0#0: bool = (! tmp%0#0)
                (assert not%tmp%0#0) // reject transaction
                let tmp%1#0: uint64 = (txn OnCompletion)
                let not%tmp%1#0: bool = (! tmp%1#0)
                (assert not%tmp%1#0) // reject transaction
                let tmp%2#0: bool = (txn ApplicationID)
                let tmp%3#0: bool = (! tmp%2#0)
                (assert tmp%3#0) // is creating
                test_cases.state_totals.contract.Contract.create()
                return 1u
        
        subroutine test_cases.state_totals.contract.Contract.create() -> void:
            block@0: // L14
                return 
    
    program clear-state:
        subroutine test_cases.state_totals.contract.Contract.clear_state_program() -> bool:
            block@0: // L6
                return 1u