main test_cases.state_totals.contract.Contract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.state_totals.contract.Contract.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.state_totals.contract.Contract.__init__() -> void:
    block@0: // L10
        return 

subroutine test_cases.state_totals.contract.Contract.create() -> void:
    block@0: // L14
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L6
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@5
    block@2: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {* => block@3}
    block@3: // switch_case_default_L6
        goto block@4
    block@4: // switch_case_next_L6
        goto block@9
    block@5: // bare_routing_L6
        let tmp%3#0: uint64 = (txn OnCompletion)
        switch tmp%3#0 {0u => block@6, * => block@7}
    block@6: // create_L14
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (== tmp%4#0 0u)
        (assert tmp%5#0) // can only call when creating
        test_cases.state_totals.contract.Contract.create()
        exit 1u
    block@7: // switch_case_default_L6
        goto block@8
    block@8: // switch_case_next_L6
        goto block@9
    block@9: // after_if_else_L6
        exit 0u
    block@10: // after_inlined_test_cases.state_totals.contract.Contract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0