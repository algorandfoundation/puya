{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;AAUc;AACM;AAApB;AAAoB;AAAA;AAAO;;AAAP;AAApB;;;AACe;;;AAAf;;;AADoB;AAAA;AAAA;AAAA;;;;;AAGH;;;;;;;AAAjB;;;AACuB;;;;;;;AAAJ;;;AACC;;AAAO;;AAAP;;;;;;;;;;AACZ;;AAAA;AAdR;;;AAEW;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.bug_load_store_load_store.contract.MyContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "val#11"
      ]
    },
    "7": {
      "op": "intc_1 // 0",
      "defined_out": [
        "val#0"
      ],
      "stack_out": [
        "val#11",
        "val#0"
      ]
    },
    "8": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "val#0"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "1"
      ]
    },
    "9": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "val#11",
        "val#0"
      ]
    },
    "10": {
      "op": "intc_1 // 0",
      "defined_out": [
        "_idx#0",
        "val#0"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0"
      ]
    },
    "11": {
      "block": "main_for_header@1",
      "stack_in": [
        "val#11",
        "val#0",
        "_idx#0"
      ],
      "op": "dup",
      "defined_out": [
        "_idx#0"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0",
        "_idx#0"
      ]
    },
    "12": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "_idx#0"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0",
        "_idx#0",
        "2"
      ]
    },
    "14": {
      "op": "<",
      "defined_out": [
        "_idx#0",
        "continue_looping%0#0"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0",
        "continue_looping%0#0"
      ]
    },
    "15": {
      "op": "bz main_after_for@11",
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0"
      ]
    },
    "18": {
      "block": "main_for_body@2",
      "stack_in": [
        "val#11",
        "val#0",
        "_idx#0"
      ],
      "callsub": "test_cases.bug_load_store_load_store.contract.get_bool",
      "op": "callsub get_bool",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0",
        "tmp%0#0"
      ]
    },
    "21": {
      "op": "bz main_else_body@4",
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0"
      ]
    },
    "24": {
      "block": "main_for_footer@10",
      "stack_in": [
        "val#11",
        "val#0",
        "_idx#0"
      ],
      "op": "dup",
      "defined_out": [
        "_idx#0"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0",
        "_idx#0"
      ]
    },
    "25": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "_idx#0"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0",
        "_idx#0",
        "1"
      ]
    },
    "26": {
      "op": "+",
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0",
        "_idx#0"
      ]
    },
    "27": {
      "op": "bury 1",
      "defined_out": [
        "_idx#0"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0"
      ]
    },
    "29": {
      "op": "b main_for_header@1"
    },
    "32": {
      "block": "main_else_body@4",
      "stack_in": [
        "val#11",
        "val#0",
        "_idx#0"
      ],
      "callsub": "test_cases.bug_load_store_load_store.contract.get_bool",
      "op": "callsub get_bool",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0",
        "tmp%1#0"
      ]
    },
    "35": {
      "op": "dig 2",
      "defined_out": [
        "tmp%1#0",
        "val#11"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0",
        "tmp%1#0",
        "val#11"
      ]
    },
    "37": {
      "op": "bury 4",
      "defined_out": [
        "tmp%1#0",
        "val#11"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0",
        "tmp%1#0"
      ]
    },
    "39": {
      "op": "bz main_after_if_else@8",
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0"
      ]
    },
    "42": {
      "block": "main_if_body@5",
      "stack_in": [
        "val#11",
        "val#0",
        "_idx#0"
      ],
      "callsub": "test_cases.bug_load_store_load_store.contract.get_bool",
      "op": "callsub get_bool",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0",
        "tmp%2#0"
      ]
    },
    "45": {
      "op": "dig 2",
      "defined_out": [
        "tmp%2#0",
        "val#11"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0",
        "tmp%2#0",
        "val#11"
      ]
    },
    "47": {
      "op": "bury 4",
      "defined_out": [
        "tmp%2#0",
        "val#11"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0",
        "tmp%2#0"
      ]
    },
    "49": {
      "op": "bnz main_after_if_else@7",
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0"
      ]
    },
    "52": {
      "block": "main_if_body@6",
      "stack_in": [
        "val#11",
        "val#0",
        "_idx#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "val#0"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0",
        "val#0"
      ]
    },
    "54": {
      "op": "pushint 123 // 123",
      "defined_out": [
        "123",
        "val#0"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0",
        "val#0",
        "123"
      ]
    },
    "56": {
      "op": "+",
      "defined_out": [
        "val#0",
        "val#11"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0",
        "val#11"
      ]
    },
    "57": {
      "op": "bury 3",
      "defined_out": [
        "val#0",
        "val#11"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0"
      ]
    },
    "59": {
      "block": "main_after_if_else@8",
      "stack_in": [
        "val#11",
        "val#0",
        "_idx#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "val#0"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0",
        "val#0"
      ]
    },
    "61": {
      "op": "bury 2",
      "defined_out": [
        "val#0"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0"
      ]
    },
    "63": {
      "op": "b main_after_if_else@9"
    },
    "66": {
      "block": "main_after_for@11",
      "stack_in": [
        "val#11",
        "val#0",
        "_idx#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "val#0"
      ],
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0",
        "val#0"
      ]
    },
    "68": {
      "op": "return",
      "stack_out": [
        "val#11",
        "val#0",
        "_idx#0"
      ]
    },
    "69": {
      "subroutine": "test_cases.bug_load_store_load_store.contract.get_bool",
      "params": {},
      "block": "get_bool",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "72": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "73": {
      "retsub": true,
      "op": "retsub"
    }
  }
}