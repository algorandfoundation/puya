main test_cases.bug_load_store_load_store.contract.MyContract.approval_program:
    block@0: // L10
        let val#0: uint64 = 0u
        (assert 1u) // Step cannot be zero
        let value_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L12
        let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@10)
        let val#1: uint64 = φ(val#0 <- block@0, val#3 <- block@10)
        let continue_looping%0#0: bool = (< value_internal%0#1 2u)
        goto continue_looping%0#0 ? block@2 : block@11
    block@2: // for_body_L13
        let _idx#0: uint64 = value_internal%0#1
        let tmp%0#0: bool = test_cases.bug_load_store_load_store.contract.get_bool()
        goto tmp%0#0 ? block@3 : block@4
    block@3: // if_body_L14
        goto block@9
    block@4: // else_body_L15
        let tmp%1#0: bool = test_cases.bug_load_store_load_store.contract.get_bool()
        goto tmp%1#0 ? block@5 : block@8
    block@5: // if_body_L16
        let tmp%2#0: bool = test_cases.bug_load_store_load_store.contract.get_bool()
        goto tmp%2#0 ? block@7 : block@6
    block@6: // if_body_L17
        let tmp%3#0: uint64 = (+ val#1 123u)
        let val#2: uint64 = tmp%3#0
        goto block@7
    block@7: // after_if_else_L16
        let val#5: uint64 = φ(val#1 <- block@5, val#2 <- block@6)
        goto block@8
    block@8: // after_if_else_L15
        let val#4: uint64 = φ(val#1 <- block@4, val#5 <- block@7)
        goto block@9
    block@9: // after_if_else_L13
        let val#3: uint64 = φ(val#1 <- block@3, val#4 <- block@8)
        goto block@10
    block@10: // for_footer_L12
        let value_internal%0#2: uint64 = (+ value_internal%0#1 1u)
        goto block@1
    block@11: // after_for_L12
        return val#1

subroutine test_cases.bug_load_store_load_store.contract.get_bool() -> bool:
    block@0: // L4
        return 1u