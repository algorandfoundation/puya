contract test_cases.stress_tests.brute_force_rotation_search.BruteForceRotationSearch:
    program approval:
        subroutine test_cases.stress_tests.brute_force_rotation_search.BruteForceRotationSearch.approval_program() -> uint64:
            block@0: // L5
                let (a#0: uint64, b#0: uint64, c#0: uint64, d#0: uint64, e#0: uint64, f#0: uint64, g#0: uint64, h#0: uint64, i#0: uint64, j#0: uint64, k#0: uint64, l#0: uint64, m#0: uint64, n#0: uint64) = test_cases.stress_tests.brute_force_rotation_search.do_some_ops(0u, 0u)
                let tmp%0#0: uint64 = (! a#0)
                (assert tmp%0#0)
                let tmp%1#0: uint64 = (== b#0 1u)
                (assert tmp%1#0)
                let tmp%2#0: uint64 = (== c#0 2u)
                (assert tmp%2#0)
                let tmp%3#0: uint64 = (== d#0 3u)
                (assert tmp%3#0)
                let tmp%4#0: uint64 = (== e#0 4u)
                (assert tmp%4#0)
                let tmp%5#0: uint64 = (== f#0 5u)
                (assert tmp%5#0)
                let tmp%6#0: uint64 = (== g#0 6u)
                (assert tmp%6#0)
                let tmp%7#0: uint64 = (== h#0 7u)
                (assert tmp%7#0)
                let tmp%8#0: uint64 = (== i#0 8u)
                (assert tmp%8#0)
                let tmp%9#0: uint64 = (== j#0 9u)
                (assert tmp%9#0)
                let tmp%10#0: uint64 = (== k#0 10u)
                (assert tmp%10#0)
                let tmp%11#0: uint64 = (== l#0 11u)
                (assert tmp%11#0)
                let tmp%12#0: uint64 = (== m#0 12u)
                (assert tmp%12#0)
                let tmp%13#0: uint64 = (== n#0 13u)
                (assert tmp%13#0)
                return 1u
        
        subroutine test_cases.stress_tests.brute_force_rotation_search.do_some_ops(a: uint64, b: uint64) -> <uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64>:
            block@0: // L43
                let c#0: uint64 = (+ a#0 b#0)
                let tmp%0#0: uint64 = (+ c#0 1u)
                let tmp%1#0: uint64 = (+ c#0 2u)
                let tmp%2#0: uint64 = (+ c#0 3u)
                let tmp%3#0: uint64 = (+ c#0 4u)
                let tmp%4#0: uint64 = (+ c#0 5u)
                let tmp%5#0: uint64 = (+ c#0 6u)
                let tmp%6#0: uint64 = (+ c#0 7u)
                let tmp%7#0: uint64 = (+ c#0 8u)
                let tmp%8#0: uint64 = (+ c#0 9u)
                let tmp%9#0: uint64 = (+ c#0 10u)
                let tmp%10#0: uint64 = (+ c#0 11u)
                let tmp%11#0: uint64 = (+ c#0 12u)
                let tmp%12#0: uint64 = (+ c#0 13u)
                return c#0 tmp%0#0 tmp%1#0 tmp%2#0 tmp%3#0 tmp%4#0 tmp%5#0 tmp%6#0 tmp%7#0 tmp%8#0 tmp%9#0 tmp%10#0 tmp%11#0 tmp%12#0
    
    program clear-state:
        subroutine test_cases.stress_tests.brute_force_rotation_search.BruteForceRotationSearch.clear_state_program() -> uint64:
            block@0: // L39
                return 1u