main test_cases.iteration.base.IterationTestBase.approval_program:
    block@0: // L7
        (log "test_forwards")
        let item_index_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L12
        let continue_looping%0#0: bool = (< item_index_internal%0#0 3u)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L13
        let i#0: bytes = (extract3 0x616263 item_index_internal%0#0 1u)
        (log i#0)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@2
    block@5: // after_for_L12
        (log "test_reversed")
        let bytes_length%0#1: uint64 = 3u
        let reverse_index_internal%0#2: uint64 = bytes_length%0#1
        goto block@8
    block@8: // for_header_L18
        goto reverse_index_internal%0#2 ? block@9 : block@11
    block@9: // for_body_L19
        let reverse_index_internal%0#2: uint64 = (- reverse_index_internal%0#2 1u)
        let i#0: bytes = (extract3 0x616263 reverse_index_internal%0#2 1u)
        (log i#0)
        goto block@8
    block@11: // after_for_L18
        (log "test_forwards_with_forwards_index")
        let item_index_internal%0#0: uint64 = 0u
        let idx#0: uint64 = item_index_internal%0#0
        goto block@14
    block@14: // for_header_L24
        let continue_looping%0#0: bool = (< idx#0 3u)
        goto continue_looping%0#0 ? block@15 : block@17
    block@15: // for_body_L25
        let i#0: bytes = (extract3 0x616263 idx#0 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
        let item_index_internal%0#0: uint64 = (+ idx#0 1u)
        let idx#0: uint64 = item_index_internal%0#0
        goto block@14
    block@17: // after_for_L24
        (log "test_forwards_with_reverse_index")
        let bytes_length%0#1: uint64 = 3u
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#2: uint64 = bytes_length%0#1
        goto block@20
    block@20: // for_header_L31
        goto reverse_index_internal%0#2 ? block@21 : block@23
    block@21: // for_body_L32
        let idx#0: uint64 = (- reverse_index_internal%0#2 1u)
        let i#0: bytes = (extract3 0x616263 item_index_internal%0#0 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        let reverse_index_internal%0#2: uint64 = idx#0
        goto block@20
    block@23: // after_for_L31
        (log "test_reverse_with_forwards_index")
        let bytes_length%0#1: uint64 = 3u
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#2: uint64 = bytes_length%0#1
        let idx#0: uint64 = item_index_internal%0#0
        goto block@26
    block@26: // for_header_L38
        goto reverse_index_internal%0#2 ? block@27 : block@29
    block@27: // for_body_L39
        let reverse_index_internal%0#2: uint64 = (- reverse_index_internal%0#2 1u)
        let i#0: bytes = (extract3 0x616263 reverse_index_internal%0#2 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
        let item_index_internal%0#0: uint64 = (+ idx#0 1u)
        let idx#0: uint64 = item_index_internal%0#0
        goto block@26
    block@29: // after_for_L38
        (log "test_reverse_with_reverse_index")
        let bytes_length%0#1: uint64 = 3u
        let reverse_index_internal%0#2: uint64 = bytes_length%0#1
        goto block@32
    block@32: // for_header_L45
        goto reverse_index_internal%0#2 ? block@33 : block@35
    block@33: // for_body_L46
        let idx#0: uint64 = (- reverse_index_internal%0#2 1u)
        let i#0: bytes = (extract3 0x616263 idx#0 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
        let reverse_index_internal%0#2: uint64 = idx#0
        goto block@32
    block@35: // after_for_L45
        (log "test_empty")
        let item_index_internal%0#0: uint64 = 0u
        goto block@38
    block@38: // for_header_L52
        let continue_looping%0#0: bool = (< item_index_internal%0#0 0u)
        goto continue_looping%0#0 ? block@39 : block@41
    block@39: // for_body_L53
        let i#0: bytes = (extract3 0x item_index_internal%0#0 1u)
        (log i#0)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@38
    block@41: // after_for_L52
        let bytes_length%1#0: uint64 = 0u
        let reverse_index_internal%1#1: uint64 = bytes_length%1#0
        goto block@42
    block@42: // for_header_L54
        goto reverse_index_internal%1#1 ? block@43 : block@45
    block@43: // for_body_L55
        let reverse_index_internal%1#1: uint64 = (- reverse_index_internal%1#1 1u)
        let i#0: bytes = (extract3 0x reverse_index_internal%1#1 1u)
        (log i#0)
        goto block@42
    block@45: // after_for_L54
        let item_index_internal%2#0: uint64 = 0u
        let idx#0: uint64 = item_index_internal%2#0
        goto block@46
    block@46: // for_header_L56
        let continue_looping%2#0: bool = (< idx#0 0u)
        goto continue_looping%2#0 ? block@47 : block@49
    block@47: // for_body_L57
        let i#0: bytes = (extract3 0x idx#0 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
        let item_index_internal%2#0: uint64 = (+ idx#0 1u)
        let idx#0: uint64 = item_index_internal%2#0
        goto block@46
    block@49: // after_for_L56
        let bytes_length%3#0: uint64 = 0u
        let item_index_internal%3#0: uint64 = 0u
        let reverse_index_internal%3#1: uint64 = bytes_length%3#0
        goto block@50
    block@50: // for_header_L58
        goto reverse_index_internal%3#1 ? block@51 : block@53
    block@51: // for_body_L59
        let idx#0: uint64 = (- reverse_index_internal%3#1 1u)
        let i#0: bytes = (extract3 0x item_index_internal%3#0 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
        let item_index_internal%3#0: uint64 = (+ item_index_internal%3#0 1u)
        let reverse_index_internal%3#1: uint64 = idx#0
        goto block@50
    block@53: // after_for_L58
        let bytes_length%4#0: uint64 = 0u
        let item_index_internal%4#0: uint64 = 0u
        let reverse_index_internal%4#1: uint64 = bytes_length%4#0
        let idx#0: uint64 = item_index_internal%4#0
        goto block@54
    block@54: // for_header_L60
        goto reverse_index_internal%4#1 ? block@55 : block@57
    block@55: // for_body_L61
        let reverse_index_internal%4#1: uint64 = (- reverse_index_internal%4#1 1u)
        let i#0: bytes = (extract3 0x reverse_index_internal%4#1 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
        let item_index_internal%4#0: uint64 = (+ idx#0 1u)
        let idx#0: uint64 = item_index_internal%4#0
        goto block@54
    block@57: // after_for_L60
        let bytes_length%5#0: uint64 = 0u
        let reverse_index_internal%5#1: uint64 = bytes_length%5#0
        goto block@58
    block@58: // for_header_L62
        goto reverse_index_internal%5#1 ? block@59 : block@61
    block@59: // for_body_L63
        let idx#0: uint64 = (- reverse_index_internal%5#1 1u)
        let i#0: bytes = (extract3 0x idx#0 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
        let reverse_index_internal%5#1: uint64 = idx#0
        goto block@58
    block@61: // after_for_L62
        (log "test_break")
        (log 0x61)
        (log "test_tuple_target")
        let item_index_internal%0#0: uint64 = 0u
        let tup.0#0: uint64 = item_index_internal%0#0
        goto block@69
    block@69: // for_header_L75
        let continue_looping%0#0: bool = (< tup.0#0 1u)
        goto continue_looping%0#0 ? block@70 : block@72
    block@70: // for_body_L76
        let tup.1#0: bytes = (extract3 0x74 tup.0#0 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(tup.0#0, tup.1#0)
        let item_index_internal%0#0: uint64 = (+ tup.0#0 1u)
        let tup.0#0: uint64 = item_index_internal%0#0
        goto block@69
    block@72: // after_for_L75
        return 1u

subroutine test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
    block@0: // L31
        let extract%0#0: bytes = (extract3 0x30313233343536373839 idx#0 1u)
        let tmp%0#0: bytes = (concat extract%0#0 "=")
        let tmp%1#0: bytes = (concat tmp%0#0 value#0)
        (log tmp%1#0)
        return 