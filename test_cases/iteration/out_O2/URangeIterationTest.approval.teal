#pragma version 10
#pragma typetrack false

// test_cases.iteration.base.IterationTestBase.approval_program() -> uint64:
main:
    intcblock 1 2 0 5
    bytecblock 0x206120622063
    pushbytes ""
    dupn 5
    pushbytes "test_forwards"
    log
    intc_0 // 1
    dup

main_for_header@2:
    dup
    pushint 7 // 7
    <
    bz main_after_for@5
    bytec_0 // 0x206120622063
    dig 1
    dup
    cover 2
    intc_0 // 1
    extract3
    log
    dup
    intc_0 // 1
    +
    bury 3
    intc_1 // 2
    +
    bury 1
    b main_for_header@2

main_after_for@5:
    dig 1
    pushint 6 // 6
    ==
    assert
    pushbytes "test_reversed"
    log
    intc_3 // 5
    bury 1

main_for_body@9:
    bytec_0 // 0x206120622063
    dig 1
    dup
    cover 2
    intc_0 // 1
    extract3
    log
    dup
    intc_0 // 1
    +
    bury 3
    intc_0 // 1
    >
    bz main_after_for@12
    dup
    intc_1 // 2
    -
    bury 1
    b main_for_body@9

main_after_for@12:
    dig 1
    intc_1 // 2
    ==
    assert
    pushbytes "test_forwards_with_forwards_index"
    log
    intc_0 // 1
    dup
    intc_2 // 0
    dup
    bury 10
    bury 10
    swap
    bury 3
    bury 1

main_for_header@15:
    dup
    pushint 7 // 7
    <
    bz main_after_for@18
    bytec_0 // 0x206120622063
    dig 1
    dup
    cover 2
    intc_0 // 1
    extract3
    dig 9
    dup
    cover 3
    swap
    callsub _log_with_index
    dup
    intc_0 // 1
    +
    bury 4
    swap
    intc_0 // 1
    +
    dup
    bury 10
    swap
    intc_1 // 2
    +
    swap
    bury 8
    bury 1
    b main_for_header@15

main_after_for@18:
    dig 1
    pushint 6 // 6
    ==
    assert
    dig 6
    pushint 3 // 3
    ==
    assert
    pushbytes "test_forwards_with_reverse_index"
    log
    intc_1 // 2
    bury 8
    intc_0 // 1
    bury 1

main_for_body@22:
    bytec_0 // 0x206120622063
    dig 1
    dup
    cover 2
    intc_0 // 1
    extract3
    dig 9
    dup
    cover 3
    swap
    callsub _log_with_index
    dup
    intc_0 // 1
    +
    bury 4
    swap
    intc_0 // 1
    +
    bury 8
    intc_3 // 5
    <
    bz main_after_for@25
    dup
    intc_1 // 2
    +
    bury 1
    dig 7
    intc_0 // 1
    -
    bury 8
    b main_for_body@22

main_after_for@25:
    dig 1
    pushint 6 // 6
    ==
    assert
    dig 6
    intc_0 // 1
    ==
    assert
    pushbytes "test_reverse_with_forwards_index"
    log
    intc_3 // 5
    bury 1
    intc_2 // 0
    bury 8

main_for_body@29:
    bytec_0 // 0x206120622063
    dig 1
    dup
    cover 2
    intc_0 // 1
    extract3
    dig 9
    dup
    cover 3
    swap
    callsub _log_with_index
    dup
    intc_0 // 1
    +
    bury 4
    swap
    intc_0 // 1
    +
    bury 9
    intc_0 // 1
    >
    bz main_after_for@32
    dup
    intc_1 // 2
    -
    bury 1
    b main_for_body@29

main_after_for@32:
    dig 1
    intc_1 // 2
    ==
    assert
    dig 7
    pushint 3 // 3
    ==
    assert
    pushbytes "test_reverse_with_reverse_index"
    log
    intc_1 // 2
    bury 8
    intc_3 // 5
    bury 1

main_for_body@36:
    bytec_0 // 0x206120622063
    dig 1
    dup
    cover 2
    intc_0 // 1
    extract3
    dig 9
    dup
    cover 3
    swap
    callsub _log_with_index
    dup
    intc_0 // 1
    +
    bury 4
    swap
    intc_0 // 1
    +
    bury 8
    intc_0 // 1
    >
    bz main_after_for@39
    dup
    intc_1 // 2
    -
    bury 1
    dig 7
    intc_0 // 1
    -
    bury 8
    b main_for_body@36

main_after_for@39:
    dig 1
    intc_1 // 2
    ==
    assert
    dig 6
    intc_0 // 1
    ==
    assert
    pushbytes "test_empty"
    log
    intc_2 // 0
    bury 1

main_for_header@42:
    dup
    intc_2 // 0
    <
    bz main_after_for@45
    dupn 2
    itob
    log
    intc_0 // 1
    +
    bury 1
    b main_for_header@42

main_after_for@45:
    intc_2 // 0
    dup
    bury 9
    bury 1

main_for_header@51:
    dup
    intc_2 // 0
    <
    bz main_after_for@54
    dig 7
    dup
    itob
    dig 2
    dup
    cover 2
    itob
    concat
    log
    intc_0 // 1
    +
    swap
    intc_0 // 1
    +
    bury 9
    bury 1
    b main_for_header@51

main_after_for@54:
    pushbytes "test_break"
    log
    pushbytes 0x61
    log
    pushbytes "test_tuple_target"
    log
    intc_2 // 0
    dupn 3
    bury 6
    bury 6
    swap
    bury 6
    bury 6

main_for_header@77:
    dig 3
    intc_0 // 1
    <
    bz main_after_for@80
    pushbytes 0x74
    dig 4
    dup
    cover 2
    intc_0 // 1
    extract3
    dig 7
    dup
    cover 3
    swap
    callsub _log_with_index
    dup
    intc_0 // 1
    +
    dig 2
    intc_0 // 1
    +
    uncover 2
    bury 6
    swap
    bury 6
    swap
    bury 6
    bury 6
    b main_for_header@77

main_after_for@80:
    dig 4
    !
    dig 3
    !
    &&
    return


// test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
_log_with_index:
    proto 2 0
    pushbytes 0x30313233343536373839
    frame_dig -2
    intc_0 // 1
    extract3
    pushbytes "="
    concat
    frame_dig -1
    concat
    log
    retsub
