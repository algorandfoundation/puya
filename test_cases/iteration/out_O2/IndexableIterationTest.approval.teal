#pragma version 10
#pragma typetrack false

// test_cases.iteration.base.IterationTestBase.approval_program() -> uint64:
main:
    intcblock 1 0 3
    bytecblock 0x 0x616263
    bytec_0 // ""
    dupn 7
    pushbytes "test_forwards"
    log
    intc_1 // 0

for_header@2:
    dup
    intc_2 // 3
    <
    bz after_for@5
    bytec_1 // 0x616263
    dig 1
    dup
    cover 2
    intc_0 // 1
    extract3
    log
    intc_0 // 1
    +
    bury 1
    b for_header@2

after_for@5:
    pushbytes "test_reversed"
    log
    intc_2 // 3
    bury 7

for_header@8:
    dig 6
    bz after_for@11
    dig 6
    intc_0 // 1
    -
    dup
    bury 8
    bytec_1 // 0x616263
    swap
    intc_0 // 1
    extract3
    log
    b for_header@8

after_for@11:
    pushbytes "test_forwards_with_forwards_index"
    log
    intc_1 // 0
    bury 9

for_header@14:
    dig 8
    intc_2 // 3
    <
    bz after_for@17
    bytec_1 // 0x616263
    dig 9
    dup
    cover 2
    intc_0 // 1
    extract3
    dig 1
    swap
    callsub _log_with_index
    intc_0 // 1
    +
    bury 9
    b for_header@14

after_for@17:
    pushbytes "test_forwards_with_reverse_index"
    log
    intc_2 // 3
    intc_1 // 0
    bury 2
    bury 7

for_header@20:
    dig 6
    bz after_for@23
    dig 6
    intc_0 // 1
    -
    bytec_1 // 0x616263
    dig 2
    dup
    cover 3
    intc_0 // 1
    extract3
    dig 1
    swap
    callsub _log_with_index
    swap
    intc_0 // 1
    +
    bury 2
    bury 7
    b for_header@20

after_for@23:
    pushbytes "test_reverse_with_forwards_index"
    log
    intc_1 // 0
    intc_2 // 3
    bury 8
    bury 9

for_header@26:
    dig 6
    bz after_for@29
    dig 6
    intc_0 // 1
    -
    dup
    bury 8
    bytec_1 // 0x616263
    swap
    intc_0 // 1
    extract3
    dig 9
    dup
    uncover 2
    callsub _log_with_index
    intc_0 // 1
    +
    bury 9
    b for_header@26

after_for@29:
    pushbytes "test_reverse_with_reverse_index"
    log
    intc_2 // 3
    bury 7

for_header@32:
    dig 6
    bz after_for@35
    dig 6
    intc_0 // 1
    -
    bytec_1 // 0x616263
    dig 1
    intc_0 // 1
    extract3
    dig 1
    swap
    callsub _log_with_index
    bury 7
    b for_header@32

after_for@35:
    pushbytes "test_empty"
    log
    intc_1 // 0
    bury 1

for_header@38:
    dup
    intc_1 // 0
    <
    bz after_for@41
    bytec_0 // 0x
    dig 1
    dup
    cover 2
    intc_0 // 1
    extract3
    log
    intc_0 // 1
    +
    bury 1
    b for_header@38

after_for@41:
    intc_1 // 0
    bury 6

for_header@42:
    dig 5
    bz after_for@45
    dig 5
    intc_0 // 1
    -
    dup
    bury 7
    bytec_0 // 0x
    swap
    intc_0 // 1
    extract3
    log
    b for_header@42

after_for@45:
    intc_1 // 0
    bury 9

for_header@46:
    dig 8
    intc_1 // 0
    <
    bz after_for@49
    bytec_0 // 0x
    dig 9
    dup
    cover 2
    intc_0 // 1
    extract3
    dig 1
    swap
    callsub _log_with_index
    intc_0 // 1
    +
    bury 9
    b for_header@46

after_for@49:
    intc_1 // 0
    dup
    bury 9
    bury 5

for_header@50:
    dig 4
    bz after_for@53
    dig 4
    intc_0 // 1
    -
    bytec_0 // 0x
    dig 9
    dup
    cover 3
    intc_0 // 1
    extract3
    dig 1
    swap
    callsub _log_with_index
    swap
    intc_0 // 1
    +
    bury 9
    bury 5
    b for_header@50

after_for@53:
    intc_1 // 0
    dup
    bury 5
    bury 9

for_header@54:
    dig 3
    bz after_for@57
    dig 3
    intc_0 // 1
    -
    dup
    bury 5
    bytec_0 // 0x
    swap
    intc_0 // 1
    extract3
    dig 9
    dup
    uncover 2
    callsub _log_with_index
    intc_0 // 1
    +
    bury 9
    b for_header@54

after_for@57:
    intc_1 // 0
    bury 3

for_header@58:
    dig 2
    bz after_for@61
    dig 2
    intc_0 // 1
    -
    bytec_0 // 0x
    dig 1
    intc_0 // 1
    extract3
    dig 1
    swap
    callsub _log_with_index
    bury 3
    b for_header@58

after_for@61:
    pushbytes "test_break"
    log
    pushbytes 0x61
    log
    pushbytes "test_tuple_target"
    log
    intc_1 // 0
    bury 2

for_header@69:
    dig 1
    intc_0 // 1
    <
    bz after_for@72
    pushbytes 0x74
    dig 2
    dup
    cover 2
    intc_0 // 1
    extract3
    dig 1
    swap
    callsub _log_with_index
    intc_0 // 1
    +
    bury 2
    b for_header@69

after_for@72:
    intc_0 // 1
    return


// test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
_log_with_index:
    proto 2 0
    pushbytes 0x30313233343536373839
    frame_dig -2
    intc_0 // 1
    extract3
    pushbytes "="
    concat
    frame_dig -1
    concat
    log
    retsub
