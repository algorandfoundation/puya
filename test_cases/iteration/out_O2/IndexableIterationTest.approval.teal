#pragma version 10

test_cases.iteration.iterate_indexable.IndexableIterationTest.approval_program:
    intcblock 1 0 3
    bytecblock 0x 0x616263
    pushbytes "test_forwards"
    log
    callsub test_forwards
    pushbytes "test_reversed"
    log
    callsub test_reversed
    pushbytes "test_forwards_with_forwards_index"
    log
    callsub test_forwards_with_forwards_index
    pushbytes "test_forwards_with_reverse_index"
    log
    callsub test_forwards_with_reverse_index
    pushbytes "test_reverse_with_forwards_index"
    log
    callsub test_reverse_with_forwards_index
    pushbytes "test_reverse_with_reverse_index"
    log
    callsub test_reverse_with_reverse_index
    pushbytes "test_empty"
    log
    callsub test_empty
    pushbytes "test_break"
    log
    callsub test_break
    pushbytes "test_tuple_target"
    log
    callsub test_tuple_target
    intc_0 // 1
    return


// test_cases.iteration.iterate_indexable.IndexableIterationTest.test_forwards() -> void:
test_forwards:
    proto 0 0
    intc_1 // 0

test_forwards_for_header@1:
    frame_dig 0
    intc_2 // 3
    <
    bz test_forwards_after_for@4
    bytec_1 // 0x616263
    frame_dig 0
    dup
    cover 2
    intc_0 // 1
    extract3
    log
    intc_0 // 1
    +
    frame_bury 0
    b test_forwards_for_header@1

test_forwards_after_for@4:
    retsub


// test_cases.iteration.iterate_indexable.IndexableIterationTest.test_reversed() -> void:
test_reversed:
    proto 0 0
    intc_2 // 3

test_reversed_for_header@1:
    frame_dig 0
    bz test_reversed_after_for@4
    frame_dig 0
    intc_0 // 1
    -
    dup
    frame_bury 0
    bytec_1 // 0x616263
    swap
    intc_0 // 1
    extract3
    log
    b test_reversed_for_header@1

test_reversed_after_for@4:
    retsub


// test_cases.iteration.iterate_indexable.IndexableIterationTest.test_forwards_with_forwards_index() -> void:
test_forwards_with_forwards_index:
    proto 0 0
    intc_1 // 0

test_forwards_with_forwards_index_for_header@1:
    frame_dig 0
    intc_2 // 3
    <
    bz test_forwards_with_forwards_index_after_for@4
    bytec_1 // 0x616263
    frame_dig 0
    dup
    cover 2
    intc_0 // 1
    extract3
    dig 1
    swap
    callsub _log_with_index
    intc_0 // 1
    +
    frame_bury 0
    b test_forwards_with_forwards_index_for_header@1

test_forwards_with_forwards_index_after_for@4:
    retsub


// test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
_log_with_index:
    proto 2 0
    pushbytes 0x30313233343536373839
    frame_dig -2
    intc_0 // 1
    extract3
    pushbytes "="
    concat
    frame_dig -1
    concat
    log
    retsub


// test_cases.iteration.iterate_indexable.IndexableIterationTest.test_forwards_with_reverse_index() -> void:
test_forwards_with_reverse_index:
    proto 0 0
    intc_1 // 0
    intc_2 // 3

test_forwards_with_reverse_index_for_header@1:
    frame_dig 1
    bz test_forwards_with_reverse_index_after_for@4
    frame_dig 1
    intc_0 // 1
    -
    bytec_1 // 0x616263
    frame_dig 0
    dup
    cover 3
    intc_0 // 1
    extract3
    dig 1
    swap
    callsub _log_with_index
    swap
    intc_0 // 1
    +
    frame_bury 0
    frame_bury 1
    b test_forwards_with_reverse_index_for_header@1

test_forwards_with_reverse_index_after_for@4:
    retsub


// test_cases.iteration.iterate_indexable.IndexableIterationTest.test_reverse_with_forwards_index() -> void:
test_reverse_with_forwards_index:
    proto 0 0
    intc_2 // 3
    intc_1 // 0

test_reverse_with_forwards_index_for_header@1:
    frame_dig 0
    bz test_reverse_with_forwards_index_after_for@4
    frame_dig 0
    intc_0 // 1
    -
    dup
    frame_bury 0
    bytec_1 // 0x616263
    swap
    intc_0 // 1
    extract3
    frame_dig 1
    dup
    uncover 2
    callsub _log_with_index
    intc_0 // 1
    +
    frame_bury 1
    b test_reverse_with_forwards_index_for_header@1

test_reverse_with_forwards_index_after_for@4:
    retsub


// test_cases.iteration.iterate_indexable.IndexableIterationTest.test_reverse_with_reverse_index() -> void:
test_reverse_with_reverse_index:
    proto 0 0
    intc_2 // 3

test_reverse_with_reverse_index_for_header@1:
    frame_dig 0
    bz test_reverse_with_reverse_index_after_for@4
    frame_dig 0
    intc_0 // 1
    -
    bytec_1 // 0x616263
    dig 1
    intc_0 // 1
    extract3
    dig 1
    swap
    callsub _log_with_index
    frame_bury 0
    b test_reverse_with_reverse_index_for_header@1

test_reverse_with_reverse_index_after_for@4:
    retsub


// test_cases.iteration.iterate_indexable.IndexableIterationTest.test_empty() -> void:
test_empty:
    proto 0 0
    bytec_0 // ""
    dupn 5
    intc_1 // 0

test_empty_for_header@1:
    frame_dig 6
    intc_1 // 0
    <
    bz test_empty_after_for@4
    bytec_0 // 0x
    frame_dig 6
    dup
    cover 2
    intc_0 // 1
    extract3
    log
    intc_0 // 1
    +
    frame_bury 6
    b test_empty_for_header@1

test_empty_after_for@4:
    intc_1 // 0
    frame_bury 2

test_empty_for_header@5:
    frame_dig 2
    bz test_empty_after_for@8
    frame_dig 2
    intc_0 // 1
    -
    dup
    frame_bury 2
    bytec_0 // 0x
    swap
    intc_0 // 1
    extract3
    log
    b test_empty_for_header@5

test_empty_after_for@8:
    intc_1 // 0
    frame_bury 0

test_empty_for_header@9:
    frame_dig 0
    intc_1 // 0
    <
    bz test_empty_after_for@12
    bytec_0 // 0x
    frame_dig 0
    dup
    cover 2
    intc_0 // 1
    extract3
    dig 1
    swap
    callsub _log_with_index
    intc_0 // 1
    +
    frame_bury 0
    b test_empty_for_header@9

test_empty_after_for@12:
    intc_1 // 0
    dup
    frame_bury 1
    frame_bury 3

test_empty_for_header@13:
    frame_dig 3
    bz test_empty_after_for@16
    frame_dig 3
    intc_0 // 1
    -
    bytec_0 // 0x
    frame_dig 1
    dup
    cover 3
    intc_0 // 1
    extract3
    dig 1
    swap
    callsub _log_with_index
    swap
    intc_0 // 1
    +
    frame_bury 1
    frame_bury 3
    b test_empty_for_header@13

test_empty_after_for@16:
    intc_1 // 0
    dup
    frame_bury 4
    frame_bury 0

test_empty_for_header@17:
    frame_dig 4
    bz test_empty_after_for@20
    frame_dig 4
    intc_0 // 1
    -
    dup
    frame_bury 4
    bytec_0 // 0x
    swap
    intc_0 // 1
    extract3
    frame_dig 0
    dup
    uncover 2
    callsub _log_with_index
    intc_0 // 1
    +
    frame_bury 0
    b test_empty_for_header@17

test_empty_after_for@20:
    intc_1 // 0
    frame_bury 5

test_empty_for_header@21:
    frame_dig 5
    bz test_empty_after_for@24
    frame_dig 5
    intc_0 // 1
    -
    bytec_0 // 0x
    dig 1
    intc_0 // 1
    extract3
    dig 1
    swap
    callsub _log_with_index
    frame_bury 5
    b test_empty_for_header@21

test_empty_after_for@24:
    retsub


// test_cases.iteration.iterate_indexable.IndexableIterationTest.test_break() -> void:
test_break:
    proto 0 0
    pushbytes 0x61
    log
    retsub


// test_cases.iteration.iterate_indexable.IndexableIterationTest.test_tuple_target() -> void:
test_tuple_target:
    proto 0 0
    intc_1 // 0

test_tuple_target_for_header@1:
    frame_dig 0
    intc_0 // 1
    <
    bz test_tuple_target_after_for@4
    pushbytes 0x74
    frame_dig 0
    dup
    cover 2
    intc_0 // 1
    extract3
    dig 1
    swap
    callsub _log_with_index
    intc_0 // 1
    +
    frame_bury 0
    b test_tuple_target_for_header@1

test_tuple_target_after_for@4:
    retsub
