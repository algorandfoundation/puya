contract test_cases.iteration.iterate_indexable.IndexableIterationTest:
    program approval:
        subroutine test_cases.iteration.base.IterationTestBase.approval_program() -> bool:
            block@0: // L7
                (log "test_forwards")
                test_cases.iteration.iterate_indexable.IndexableIterationTest.test_forwards()
                (log "test_reversed")
                test_cases.iteration.iterate_indexable.IndexableIterationTest.test_reversed()
                (log "test_forwards_with_forwards_index")
                test_cases.iteration.iterate_indexable.IndexableIterationTest.test_forwards_with_forwards_index()
                (log "test_forwards_with_reverse_index")
                test_cases.iteration.iterate_indexable.IndexableIterationTest.test_forwards_with_reverse_index()
                (log "test_reverse_with_forwards_index")
                test_cases.iteration.iterate_indexable.IndexableIterationTest.test_reverse_with_forwards_index()
                (log "test_reverse_with_reverse_index")
                test_cases.iteration.iterate_indexable.IndexableIterationTest.test_reverse_with_reverse_index()
                (log "test_empty")
                test_cases.iteration.iterate_indexable.IndexableIterationTest.test_empty()
                (log "test_break")
                test_cases.iteration.iterate_indexable.IndexableIterationTest.test_break()
                (log "test_tuple_target")
                test_cases.iteration.iterate_indexable.IndexableIterationTest.test_tuple_target()
                return 1u
        
        subroutine test_cases.iteration.iterate_indexable.IndexableIterationTest.test_forwards() -> void:
            block@0: // L9
                let bytes_length%0#0: uint64 = (len 0x616263)
                let item_index_internal%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L12
                let continue_looping%0#0: bool = (< item_index_internal%0#0 bytes_length%0#0)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L13
                let i#0: bytes = (extract3 0x616263 item_index_internal%0#0 1u)
                (log i#0)
                goto block@3
            block@3: // for_footer_L12
                let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
                goto block@1
            block@4: // after_for_L12
                return 
        
        subroutine test_cases.iteration.iterate_indexable.IndexableIterationTest.test_reversed() -> void:
            block@0: // L15
                let bytes_length%0#0: uint64 = (len 0x616263)
                let reverse_index_internal%0#0: uint64 = bytes_length%0#0
                goto block@1
            block@1: // for_header_L18
                let continue_looping%0#0: bool = (> reverse_index_internal%0#0 0u)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L19
                let reverse_index_internal%0#0: uint64 = (- reverse_index_internal%0#0 1u)
                let i#0: bytes = (extract3 0x616263 reverse_index_internal%0#0 1u)
                (log i#0)
                goto block@3
            block@3: // for_footer_L18
                goto block@1
            block@4: // after_for_L18
                return 
        
        subroutine test_cases.iteration.iterate_indexable.IndexableIterationTest.test_forwards_with_forwards_index() -> void:
            block@0: // L21
                let bytes_length%0#0: uint64 = (len 0x616263)
                let item_index_internal%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L24
                let continue_looping%0#0: bool = (< item_index_internal%0#0 bytes_length%0#0)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L25
                let i#0: bytes = (extract3 0x616263 item_index_internal%0#0 1u)
                let idx#0: uint64 = item_index_internal%0#0
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
                goto block@3
            block@3: // for_footer_L24
                let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
                goto block@1
            block@4: // after_for_L24
                return 
        
        subroutine test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
            block@0: // L31
                let tmp%0#0: bytes = (extract3 0x30313233343536373839 idx#0 1u)
                let tmp%1#0: bytes = (concat tmp%0#0 "=")
                let tmp%2#0: bytes = (concat tmp%1#0 value#0)
                (log tmp%2#0)
                return 
        
        subroutine test_cases.iteration.iterate_indexable.IndexableIterationTest.test_forwards_with_reverse_index() -> void:
            block@0: // L28
                let bytes_length%0#0: uint64 = (len 0x616263)
                let item_index_internal%0#0: uint64 = 0u
                let reverse_index_internal%0#0: uint64 = bytes_length%0#0
                goto block@1
            block@1: // for_header_L31
                let continue_looping%0#0: bool = (> reverse_index_internal%0#0 0u)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L32
                let reverse_index_internal%0#0: uint64 = (- reverse_index_internal%0#0 1u)
                let i#0: bytes = (extract3 0x616263 item_index_internal%0#0 1u)
                let idx#0: uint64 = reverse_index_internal%0#0
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
                goto block@3
            block@3: // for_footer_L31
                let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
                goto block@1
            block@4: // after_for_L31
                return 
        
        subroutine test_cases.iteration.iterate_indexable.IndexableIterationTest.test_reverse_with_forwards_index() -> void:
            block@0: // L35
                let bytes_length%0#0: uint64 = (len 0x616263)
                let item_index_internal%0#0: uint64 = 0u
                let reverse_index_internal%0#0: uint64 = bytes_length%0#0
                goto block@1
            block@1: // for_header_L38
                let continue_looping%0#0: bool = (> reverse_index_internal%0#0 0u)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L39
                let reverse_index_internal%0#0: uint64 = (- reverse_index_internal%0#0 1u)
                let i#0: bytes = (extract3 0x616263 reverse_index_internal%0#0 1u)
                let idx#0: uint64 = item_index_internal%0#0
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
                goto block@3
            block@3: // for_footer_L38
                let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
                goto block@1
            block@4: // after_for_L38
                return 
        
        subroutine test_cases.iteration.iterate_indexable.IndexableIterationTest.test_reverse_with_reverse_index() -> void:
            block@0: // L42
                let bytes_length%0#0: uint64 = (len 0x616263)
                let reverse_index_internal%0#0: uint64 = bytes_length%0#0
                goto block@1
            block@1: // for_header_L45
                let continue_looping%0#0: bool = (> reverse_index_internal%0#0 0u)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L46
                let reverse_index_internal%0#0: uint64 = (- reverse_index_internal%0#0 1u)
                let i#0: bytes = (extract3 0x616263 reverse_index_internal%0#0 1u)
                let idx#0: uint64 = reverse_index_internal%0#0
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
                goto block@3
            block@3: // for_footer_L45
                goto block@1
            block@4: // after_for_L45
                return 
        
        subroutine test_cases.iteration.iterate_indexable.IndexableIterationTest.test_empty() -> void:
            block@0: // L49
                let bytes_length%0#0: uint64 = (len 0x)
                let item_index_internal%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L52
                let continue_looping%0#0: bool = (< item_index_internal%0#0 bytes_length%0#0)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L53
                let i#0: bytes = (extract3 0x item_index_internal%0#0 1u)
                (log i#0)
                goto block@3
            block@3: // for_footer_L52
                let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
                goto block@1
            block@4: // after_for_L52
                let bytes_length%1#0: uint64 = (len 0x)
                let reverse_index_internal%1#0: uint64 = bytes_length%1#0
                goto block@5
            block@5: // for_header_L54
                let continue_looping%1#0: bool = (> reverse_index_internal%1#0 0u)
                goto continue_looping%1#0 ? block@6 : block@8
            block@6: // for_body_L55
                let reverse_index_internal%1#0: uint64 = (- reverse_index_internal%1#0 1u)
                let i#0: bytes = (extract3 0x reverse_index_internal%1#0 1u)
                (log i#0)
                goto block@7
            block@7: // for_footer_L54
                goto block@5
            block@8: // after_for_L54
                let bytes_length%2#0: uint64 = (len 0x)
                let item_index_internal%2#0: uint64 = 0u
                goto block@9
            block@9: // for_header_L56
                let continue_looping%2#0: bool = (< item_index_internal%2#0 bytes_length%2#0)
                goto continue_looping%2#0 ? block@10 : block@12
            block@10: // for_body_L57
                let i#0: bytes = (extract3 0x item_index_internal%2#0 1u)
                let idx#0: uint64 = item_index_internal%2#0
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
                goto block@11
            block@11: // for_footer_L56
                let item_index_internal%2#0: uint64 = (+ item_index_internal%2#0 1u)
                goto block@9
            block@12: // after_for_L56
                let bytes_length%3#0: uint64 = (len 0x)
                let item_index_internal%3#0: uint64 = 0u
                let reverse_index_internal%3#0: uint64 = bytes_length%3#0
                goto block@13
            block@13: // for_header_L58
                let continue_looping%3#0: bool = (> reverse_index_internal%3#0 0u)
                goto continue_looping%3#0 ? block@14 : block@16
            block@14: // for_body_L59
                let reverse_index_internal%3#0: uint64 = (- reverse_index_internal%3#0 1u)
                let i#0: bytes = (extract3 0x item_index_internal%3#0 1u)
                let idx#0: uint64 = reverse_index_internal%3#0
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
                goto block@15
            block@15: // for_footer_L58
                let item_index_internal%3#0: uint64 = (+ item_index_internal%3#0 1u)
                goto block@13
            block@16: // after_for_L58
                let bytes_length%4#0: uint64 = (len 0x)
                let item_index_internal%4#0: uint64 = 0u
                let reverse_index_internal%4#0: uint64 = bytes_length%4#0
                goto block@17
            block@17: // for_header_L60
                let continue_looping%4#0: bool = (> reverse_index_internal%4#0 0u)
                goto continue_looping%4#0 ? block@18 : block@20
            block@18: // for_body_L61
                let reverse_index_internal%4#0: uint64 = (- reverse_index_internal%4#0 1u)
                let i#0: bytes = (extract3 0x reverse_index_internal%4#0 1u)
                let idx#0: uint64 = item_index_internal%4#0
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
                goto block@19
            block@19: // for_footer_L60
                let item_index_internal%4#0: uint64 = (+ item_index_internal%4#0 1u)
                goto block@17
            block@20: // after_for_L60
                let bytes_length%5#0: uint64 = (len 0x)
                let reverse_index_internal%5#0: uint64 = bytes_length%5#0
                goto block@21
            block@21: // for_header_L62
                let continue_looping%5#0: bool = (> reverse_index_internal%5#0 0u)
                goto continue_looping%5#0 ? block@22 : block@24
            block@22: // for_body_L63
                let reverse_index_internal%5#0: uint64 = (- reverse_index_internal%5#0 1u)
                let i#0: bytes = (extract3 0x reverse_index_internal%5#0 1u)
                let idx#0: uint64 = reverse_index_internal%5#0
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
                goto block@23
            block@23: // for_footer_L62
                goto block@21
            block@24: // after_for_L62
                return 
        
        subroutine test_cases.iteration.iterate_indexable.IndexableIterationTest.test_break() -> void:
            block@0: // L65
                let bytes_length%0#0: uint64 = (len 0x616263)
                goto block@1
            block@1: // for_header_L68
                let continue_looping%0#0: bool = (< 0u bytes_length%0#0)
                goto continue_looping%0#0 ? block@2 : block@3
            block@2: // for_body_L69
                let b#0: bytes = (extract3 0x616263 0u 1u)
                (log b#0)
                goto block@3
            block@3: // after_for_L68
                return 
        
        subroutine test_cases.iteration.iterate_indexable.IndexableIterationTest.test_tuple_target() -> void:
            block@0: // L72
                let bytes_length%0#0: uint64 = (len 0x74)
                let item_index_internal%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L75
                let continue_looping%0#0: bool = (< item_index_internal%0#0 bytes_length%0#0)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L76
                let tup.1#0: bytes = (extract3 0x74 item_index_internal%0#0 1u)
                let tup.0#0: uint64 = item_index_internal%0#0
                test_cases.iteration.base.IterationTestBase._log_with_index(tup.0#0, tup.1#0)
                goto block@3
            block@3: // for_footer_L75
                let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
                goto block@1
            block@4: // after_for_L75
                return 
    
    program clear-state:
        subroutine test_cases.iteration.base.IterationTestBase.clear_state_program() -> bool:
            block@0: // L28
                return 1u