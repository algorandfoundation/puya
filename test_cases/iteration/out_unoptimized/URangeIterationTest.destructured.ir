contract test_cases.iteration.iterate_urange.URangeIterationTest:
    program approval:
        subroutine test_cases.iteration.base.IterationTestBase.approval_program() -> bool:
            block@0: // L7
                (log "test_forwards")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards()
                (log "test_reversed")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_reversed()
                (log "test_forwards_with_forwards_index")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_forwards_index()
                (log "test_forwards_with_reverse_index")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_reverse_index()
                (log "test_reverse_with_forwards_index")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_forwards_index()
                (log "test_reverse_with_reverse_index")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_reverse_index()
                (log "test_empty")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_empty()
                (log "test_break")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_break()
                return 1u
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards() -> void:
            block@0: // L9
                (assert 2u) // Step cannot be zero
                let range_item%0#0: uint64 = 1u
                goto block@1
            block@1: // for_header_L13
                let continue_looping%0#0: bool = (< range_item%0#0 7u)
                goto continue_looping%0#0 ? block@2 : block@5
            block@2: // for_body_L13
                let i#0: uint64 = range_item%0#0
                let index_plus_1%0#0: uint64 = (+ i#0 1u)
                let tmp%0#0: bytes = (substring3 0x206120622063 i#0 index_plus_1%0#0)
                (log tmp%0#0)
                goto block@3
            block@3: // for_footer_L13
                goto block@4
            block@4: // for_increment_L13
                let range_item%0#0: uint64 = (+ range_item%0#0 2u)
                goto block@1
            block@5: // after_for_L13
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_reversed() -> void:
            block@0: // L16
                (assert 2u) // Step cannot be zero
                let should_loop%0#0: bool = (< 1u 7u)
                goto should_loop%0#0 ? block@1 : block@6
            block@1: // for_preamble_L20
                let range_length%0#0: uint64 = (- 7u 1u)
                let range_mod_step%0#0: uint64 = (% range_length%0#0 2u)
                let range_mod_step_not_zero%0#0: bool = (!= range_mod_step%0#0 0u)
                let range_floor_div_step%0#0: uint64 = (/ range_length%0#0 2u)
                let iteration_count%0#0: uint64 = (+ range_floor_div_step%0#0 range_mod_step_not_zero%0#0)
                let iteration_count_minus_one%0#0: uint64 = (- iteration_count%0#0 1u)
                let range_delta%0#0: uint64 = (* 2u iteration_count_minus_one%0#0)
                let start%0#0: uint64 = (+ 1u range_delta%0#0)
                let range_item%0#0: uint64 = start%0#0
                goto block@2
            block@2: // for_header_L20
                let continue_looping%0#0: bool = (>= range_item%0#0 1u)
                goto continue_looping%0#0 ? block@3 : block@6
            block@3: // for_body_L20
                let i#0: uint64 = range_item%0#0
                let index_plus_1%0#0: uint64 = (+ i#0 1u)
                let tmp%0#0: bytes = (substring3 0x206120622063 i#0 index_plus_1%0#0)
                (log tmp%0#0)
                goto block@4
            block@4: // for_footer_L20
                let continue_looping%1#0: bool = (> range_item%0#0 1u)
                goto continue_looping%1#0 ? block@5 : block@6
            block@5: // for_increment_L20
                let range_item%0#0: uint64 = (- range_item%0#0 2u)
                goto block@3
            block@6: // after_for_L20
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_forwards_index() -> void:
            block@0: // L23
                (assert 2u) // Step cannot be zero
                let range_item%0#0: uint64 = 1u
                let range_index%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L27
                let continue_looping%0#0: bool = (< range_item%0#0 7u)
                goto continue_looping%0#0 ? block@2 : block@5
            block@2: // for_body_L27
                let i#0: uint64 = range_item%0#0
                let idx#0: uint64 = range_index%0#0
                let index_plus_1%0#0: uint64 = (+ i#0 1u)
                let tmp%0#0: bytes = (substring3 0x206120622063 i#0 index_plus_1%0#0)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, tmp%0#0)
                goto block@3
            block@3: // for_footer_L27
                goto block@4
            block@4: // for_increment_L27
                let range_item%0#0: uint64 = (+ range_item%0#0 2u)
                let range_index%0#0: uint64 = (+ range_index%0#0 1u)
                goto block@1
            block@5: // after_for_L27
                return 
        
        subroutine test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
            block@0: // L29
                let index_plus_1%0#0: uint64 = (+ idx#0 1u)
                let tmp%0#0: bytes = (substring3 0x30313233343536373839 idx#0 index_plus_1%0#0)
                let tmp%1#0: bytes = (concat tmp%0#0 "=")
                let tmp%2#0: bytes = (concat tmp%1#0 value#0)
                (log tmp%2#0)
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_reverse_index() -> void:
            block@0: // L30
                (assert 2u) // Step cannot be zero
                let should_loop%0#0: bool = (< 1u 7u)
                goto should_loop%0#0 ? block@1 : block@6
            block@1: // for_preamble_L34
                let range_length%0#0: uint64 = (- 7u 1u)
                let range_mod_step%0#0: uint64 = (% range_length%0#0 2u)
                let range_mod_step_not_zero%0#0: bool = (!= range_mod_step%0#0 0u)
                let range_floor_div_step%0#0: uint64 = (/ range_length%0#0 2u)
                let iteration_count%0#0: uint64 = (+ range_floor_div_step%0#0 range_mod_step_not_zero%0#0)
                let iteration_count_minus_one%0#0: uint64 = (- iteration_count%0#0 1u)
                let range_item%0#0: uint64 = 1u
                let range_index%0#0: uint64 = 0u
                goto block@2
            block@2: // for_header_L34
                let continue_looping%0#0: bool = (< range_item%0#0 7u)
                goto continue_looping%0#0 ? block@3 : block@6
            block@3: // for_body_L34
                let i#0: uint64 = range_item%0#0
                let next_index%0#0: uint64 = (- iteration_count_minus_one%0#0 range_index%0#0)
                let idx#0: uint64 = next_index%0#0
                let index_plus_1%0#0: uint64 = (+ i#0 1u)
                let tmp%0#0: bytes = (substring3 0x206120622063 i#0 index_plus_1%0#0)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, tmp%0#0)
                goto block@4
            block@4: // for_footer_L34
                goto block@5
            block@5: // for_increment_L34
                let range_item%0#0: uint64 = (+ range_item%0#0 2u)
                let range_index%0#0: uint64 = (+ range_index%0#0 1u)
                goto block@2
            block@6: // after_for_L34
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_forwards_index() -> void:
            block@0: // L37
                (assert 2u) // Step cannot be zero
                let should_loop%0#0: bool = (< 1u 7u)
                goto should_loop%0#0 ? block@1 : block@6
            block@1: // for_preamble_L41
                let range_length%0#0: uint64 = (- 7u 1u)
                let range_mod_step%0#0: uint64 = (% range_length%0#0 2u)
                let range_mod_step_not_zero%0#0: bool = (!= range_mod_step%0#0 0u)
                let range_floor_div_step%0#0: uint64 = (/ range_length%0#0 2u)
                let iteration_count%0#0: uint64 = (+ range_floor_div_step%0#0 range_mod_step_not_zero%0#0)
                let iteration_count_minus_one%0#0: uint64 = (- iteration_count%0#0 1u)
                let range_delta%0#0: uint64 = (* 2u iteration_count_minus_one%0#0)
                let start%0#0: uint64 = (+ 1u range_delta%0#0)
                let range_item%0#0: uint64 = start%0#0
                let range_index%0#0: uint64 = 0u
                goto block@2
            block@2: // for_header_L41
                let continue_looping%0#0: bool = (>= range_item%0#0 1u)
                goto continue_looping%0#0 ? block@3 : block@6
            block@3: // for_body_L41
                let i#0: uint64 = range_item%0#0
                let idx#0: uint64 = range_index%0#0
                let index_plus_1%0#0: uint64 = (+ i#0 1u)
                let tmp%0#0: bytes = (substring3 0x206120622063 i#0 index_plus_1%0#0)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, tmp%0#0)
                goto block@4
            block@4: // for_footer_L41
                let continue_looping%1#0: bool = (> range_item%0#0 1u)
                goto continue_looping%1#0 ? block@5 : block@6
            block@5: // for_increment_L41
                let range_item%0#0: uint64 = (- range_item%0#0 2u)
                let range_index%0#0: uint64 = (+ range_index%0#0 1u)
                goto block@3
            block@6: // after_for_L41
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_reverse_index() -> void:
            block@0: // L44
                (assert 2u) // Step cannot be zero
                let should_loop%0#0: bool = (< 1u 7u)
                goto should_loop%0#0 ? block@1 : block@6
            block@1: // for_preamble_L48
                let range_length%0#0: uint64 = (- 7u 1u)
                let range_mod_step%0#0: uint64 = (% range_length%0#0 2u)
                let range_mod_step_not_zero%0#0: bool = (!= range_mod_step%0#0 0u)
                let range_floor_div_step%0#0: uint64 = (/ range_length%0#0 2u)
                let iteration_count%0#0: uint64 = (+ range_floor_div_step%0#0 range_mod_step_not_zero%0#0)
                let iteration_count_minus_one%0#0: uint64 = (- iteration_count%0#0 1u)
                let range_delta%0#0: uint64 = (* 2u iteration_count_minus_one%0#0)
                let start%0#0: uint64 = (+ 1u range_delta%0#0)
                let range_item%0#0: uint64 = start%0#0
                let range_index%0#0: uint64 = 0u
                goto block@2
            block@2: // for_header_L48
                let continue_looping%0#0: bool = (>= range_item%0#0 1u)
                goto continue_looping%0#0 ? block@3 : block@6
            block@3: // for_body_L48
                let i#0: uint64 = range_item%0#0
                let next_index%0#0: uint64 = (- iteration_count_minus_one%0#0 range_index%0#0)
                let idx#0: uint64 = next_index%0#0
                let index_plus_1%0#0: uint64 = (+ i#0 1u)
                let tmp%0#0: bytes = (substring3 0x206120622063 i#0 index_plus_1%0#0)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, tmp%0#0)
                goto block@4
            block@4: // for_footer_L48
                let continue_looping%1#0: bool = (> range_item%0#0 1u)
                goto continue_looping%1#0 ? block@5 : block@6
            block@5: // for_increment_L48
                let range_item%0#0: uint64 = (- range_item%0#0 2u)
                let range_index%0#0: uint64 = (+ range_index%0#0 1u)
                goto block@3
            block@6: // after_for_L48
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_empty() -> void:
            block@0: // L51
                (assert 1u) // Step cannot be zero
                let range_item%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L54
                let continue_looping%0#0: bool = (< range_item%0#0 0u)
                goto continue_looping%0#0 ? block@2 : block@5
            block@2: // for_body_L54
                let i#0: uint64 = range_item%0#0
                let tmp%0#0: bytes = (itob i#0)
                (log tmp%0#0)
                goto block@3
            block@3: // for_footer_L54
                goto block@4
            block@4: // for_increment_L54
                let range_item%0#0: uint64 = (+ range_item%0#0 1u)
                goto block@1
            block@5: // after_for_L54
                (assert 1u) // Step cannot be zero
                let should_loop%0#0: bool = (< 0u 0u)
                goto should_loop%0#0 ? block@6 : block@11
            block@6: // for_preamble_L56
                let range_length%0#0: uint64 = (- 0u 0u)
                let range_mod_step%0#0: uint64 = (% range_length%0#0 1u)
                let range_mod_step_not_zero%0#0: bool = (!= range_mod_step%0#0 0u)
                let range_floor_div_step%0#0: uint64 = (/ range_length%0#0 1u)
                let iteration_count%0#0: uint64 = (+ range_floor_div_step%0#0 range_mod_step_not_zero%0#0)
                let iteration_count_minus_one%0#0: uint64 = (- iteration_count%0#0 1u)
                let range_delta%0#0: uint64 = (* 1u iteration_count_minus_one%0#0)
                let start%0#0: uint64 = (+ 0u range_delta%0#0)
                let range_item%1#0: uint64 = start%0#0
                goto block@7
            block@7: // for_header_L56
                let continue_looping%1#0: bool = (>= range_item%1#0 0u)
                goto continue_looping%1#0 ? block@8 : block@11
            block@8: // for_body_L56
                let i#0: uint64 = range_item%1#0
                let tmp%1#0: bytes = (itob i#0)
                (log tmp%1#0)
                goto block@9
            block@9: // for_footer_L56
                let continue_looping%2#0: bool = (> range_item%1#0 0u)
                goto continue_looping%2#0 ? block@10 : block@11
            block@10: // for_increment_L56
                let range_item%1#0: uint64 = (- range_item%1#0 1u)
                goto block@8
            block@11: // after_for_L56
                (assert 1u) // Step cannot be zero
                let range_item%2#0: uint64 = 0u
                let range_index%0#0: uint64 = 0u
                goto block@12
            block@12: // for_header_L58
                let continue_looping%3#0: bool = (< range_item%2#0 0u)
                goto continue_looping%3#0 ? block@13 : block@16
            block@13: // for_body_L58
                let i#0: uint64 = range_item%2#0
                let idx#0: uint64 = range_index%0#0
                let tmp%2#0: bytes = (itob idx#0)
                let tmp%3#0: bytes = (concat tmp%2#0 "")
                let tmp%4#0: bytes = (itob i#0)
                let tmp%5#0: bytes = (concat tmp%3#0 tmp%4#0)
                (log tmp%5#0)
                goto block@14
            block@14: // for_footer_L58
                goto block@15
            block@15: // for_increment_L58
                let range_item%2#0: uint64 = (+ range_item%2#0 1u)
                let range_index%0#0: uint64 = (+ range_index%0#0 1u)
                goto block@12
            block@16: // after_for_L58
                (assert 1u) // Step cannot be zero
                let should_loop%1#0: bool = (< 0u 0u)
                goto should_loop%1#0 ? block@17 : block@22
            block@17: // for_preamble_L60
                let range_length%1#0: uint64 = (- 0u 0u)
                let range_mod_step%1#0: uint64 = (% range_length%1#0 1u)
                let range_mod_step_not_zero%1#0: bool = (!= range_mod_step%1#0 0u)
                let range_floor_div_step%1#0: uint64 = (/ range_length%1#0 1u)
                let iteration_count%1#0: uint64 = (+ range_floor_div_step%1#0 range_mod_step_not_zero%1#0)
                let iteration_count_minus_one%1#0: uint64 = (- iteration_count%1#0 1u)
                let range_item%3#0: uint64 = 0u
                let range_index%1#0: uint64 = 0u
                goto block@18
            block@18: // for_header_L60
                let continue_looping%4#0: bool = (< range_item%3#0 0u)
                goto continue_looping%4#0 ? block@19 : block@22
            block@19: // for_body_L60
                let i#0: uint64 = range_item%3#0
                let next_index%0#0: uint64 = (- iteration_count_minus_one%1#0 range_index%1#0)
                let idx#0: uint64 = next_index%0#0
                let tmp%6#0: bytes = (itob idx#0)
                let tmp%7#0: bytes = (concat tmp%6#0 "")
                let tmp%8#0: bytes = (itob i#0)
                let tmp%9#0: bytes = (concat tmp%7#0 tmp%8#0)
                (log tmp%9#0)
                goto block@20
            block@20: // for_footer_L60
                goto block@21
            block@21: // for_increment_L60
                let range_item%3#0: uint64 = (+ range_item%3#0 1u)
                let range_index%1#0: uint64 = (+ range_index%1#0 1u)
                goto block@18
            block@22: // after_for_L60
                (assert 1u) // Step cannot be zero
                let should_loop%2#0: bool = (< 0u 0u)
                goto should_loop%2#0 ? block@23 : block@28
            block@23: // for_preamble_L62
                let range_length%2#0: uint64 = (- 0u 0u)
                let range_mod_step%2#0: uint64 = (% range_length%2#0 1u)
                let range_mod_step_not_zero%2#0: bool = (!= range_mod_step%2#0 0u)
                let range_floor_div_step%2#0: uint64 = (/ range_length%2#0 1u)
                let iteration_count%2#0: uint64 = (+ range_floor_div_step%2#0 range_mod_step_not_zero%2#0)
                let iteration_count_minus_one%2#0: uint64 = (- iteration_count%2#0 1u)
                let range_delta%1#0: uint64 = (* 1u iteration_count_minus_one%2#0)
                let start%1#0: uint64 = (+ 0u range_delta%1#0)
                let range_item%4#0: uint64 = start%1#0
                let range_index%2#0: uint64 = 0u
                goto block@24
            block@24: // for_header_L62
                let continue_looping%5#0: bool = (>= range_item%4#0 0u)
                goto continue_looping%5#0 ? block@25 : block@28
            block@25: // for_body_L62
                let i#0: uint64 = range_item%4#0
                let idx#0: uint64 = range_index%2#0
                let tmp%10#0: bytes = (itob idx#0)
                let tmp%11#0: bytes = (concat tmp%10#0 "")
                let tmp%12#0: bytes = (itob i#0)
                let tmp%13#0: bytes = (concat tmp%11#0 tmp%12#0)
                (log tmp%13#0)
                goto block@26
            block@26: // for_footer_L62
                let continue_looping%6#0: bool = (> range_item%4#0 0u)
                goto continue_looping%6#0 ? block@27 : block@28
            block@27: // for_increment_L62
                let range_item%4#0: uint64 = (- range_item%4#0 1u)
                let range_index%2#0: uint64 = (+ range_index%2#0 1u)
                goto block@25
            block@28: // after_for_L62
                (assert 1u) // Step cannot be zero
                let should_loop%3#0: bool = (< 0u 0u)
                goto should_loop%3#0 ? block@29 : block@34
            block@29: // for_preamble_L64
                let range_length%3#0: uint64 = (- 0u 0u)
                let range_mod_step%3#0: uint64 = (% range_length%3#0 1u)
                let range_mod_step_not_zero%3#0: bool = (!= range_mod_step%3#0 0u)
                let range_floor_div_step%3#0: uint64 = (/ range_length%3#0 1u)
                let iteration_count%3#0: uint64 = (+ range_floor_div_step%3#0 range_mod_step_not_zero%3#0)
                let iteration_count_minus_one%3#0: uint64 = (- iteration_count%3#0 1u)
                let range_delta%2#0: uint64 = (* 1u iteration_count_minus_one%3#0)
                let start%2#0: uint64 = (+ 0u range_delta%2#0)
                let range_item%5#0: uint64 = start%2#0
                let range_index%3#0: uint64 = 0u
                goto block@30
            block@30: // for_header_L64
                let continue_looping%7#0: bool = (>= range_item%5#0 0u)
                goto continue_looping%7#0 ? block@31 : block@34
            block@31: // for_body_L64
                let i#0: uint64 = range_item%5#0
                let next_index%1#0: uint64 = (- iteration_count_minus_one%3#0 range_index%3#0)
                let idx#0: uint64 = next_index%1#0
                let tmp%14#0: bytes = (itob idx#0)
                let tmp%15#0: bytes = (concat tmp%14#0 "")
                let tmp%16#0: bytes = (itob i#0)
                let tmp%17#0: bytes = (concat tmp%15#0 tmp%16#0)
                (log tmp%17#0)
                goto block@32
            block@32: // for_footer_L64
                let continue_looping%8#0: bool = (> range_item%5#0 0u)
                goto continue_looping%8#0 ? block@33 : block@34
            block@33: // for_increment_L64
                let range_item%5#0: uint64 = (- range_item%5#0 1u)
                let range_index%3#0: uint64 = (+ range_index%3#0 1u)
                goto block@31
            block@34: // after_for_L64
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_break() -> void:
            block@0: // L67
                (assert 2u) // Step cannot be zero
                goto block@1
            block@1: // for_header_L71
                let continue_looping%0#0: bool = (< 1u 7u)
                goto continue_looping%0#0 ? block@2 : block@3
            block@2: // for_body_L71
                let index_plus_1%0#0: uint64 = (+ 1u 1u)
                let tmp%0#0: bytes = (substring3 0x206120622063 1u index_plus_1%0#0)
                (log tmp%0#0)
                goto block@3
            block@3: // after_for_L71
                return 
    
    program clear-state:
        subroutine test_cases.iteration.base.IterationTestBase.clear_state_program() -> bool:
            block@0: // L26
                return 1u