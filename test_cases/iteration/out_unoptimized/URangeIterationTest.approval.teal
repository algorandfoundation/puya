#pragma version 10

test_cases.iteration.base.IterationTestBase.approval_program:
    // iteration/base.py:8
    // log("test_forwards")
    byte "test_forwards"
    log
    // iteration/base.py:9
    // self.test_forwards()
    callsub test_forwards
    // iteration/base.py:10
    // log("test_reversed")
    byte "test_reversed"
    log
    // iteration/base.py:11
    // self.test_reversed()
    callsub test_reversed
    // iteration/base.py:12
    // log("test_forwards_with_forwards_index")
    byte "test_forwards_with_forwards_index"
    log
    // iteration/base.py:13
    // self.test_forwards_with_forwards_index()
    callsub test_forwards_with_forwards_index
    // iteration/base.py:14
    // log("test_forwards_with_reverse_index")
    byte "test_forwards_with_reverse_index"
    log
    // iteration/base.py:15
    // self.test_forwards_with_reverse_index()
    callsub test_forwards_with_reverse_index
    // iteration/base.py:16
    // log("test_reverse_with_forwards_index")
    byte "test_reverse_with_forwards_index"
    log
    // iteration/base.py:17
    // self.test_reverse_with_forwards_index()
    callsub test_reverse_with_forwards_index
    // iteration/base.py:18
    // log("test_reverse_with_reverse_index")
    byte "test_reverse_with_reverse_index"
    log
    // iteration/base.py:19
    // self.test_reverse_with_reverse_index()
    callsub test_reverse_with_reverse_index
    // iteration/base.py:20
    // log("test_empty")
    byte "test_empty"
    log
    // iteration/base.py:21
    // self.test_empty()
    callsub test_empty
    // iteration/base.py:22
    // log("test_break")
    byte "test_break"
    log
    // iteration/base.py:23
    // self.test_break()
    callsub test_break
    // iteration/base.py:24
    // return True
    int 1
    return


// test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards() -> void:
test_forwards:
    // iteration/iterate_urange.py:9-11
    // @typing.override
    // @subroutine
    // def test_forwards(self) -> None:
    proto 0 0
    // iteration/iterate_urange.py:13
    // for i in urange(1, 7, 2):
    int 2
    assert // Step cannot be zero
    int 1

test_forwards_for_header@1:
    // iteration/iterate_urange.py:13
    // for i in urange(1, 7, 2):
    frame_dig 0
    int 7
    <
    bz test_forwards_after_for@5
    frame_dig 0
    // iteration/iterate_urange.py:14
    // log(values[i])
    dup
    int 1
    +
    // iteration/iterate_urange.py:12
    // values = Bytes(b" a b c")
    byte 0x206120622063
    // iteration/iterate_urange.py:14
    // log(values[i])
    uncover 2
    uncover 2
    substring3
    log
    // iteration/iterate_urange.py:13
    // for i in urange(1, 7, 2):
    frame_dig 0
    int 2
    +
    frame_bury 0
    b test_forwards_for_header@1

test_forwards_after_for@5:
    retsub


// test_cases.iteration.iterate_urange.URangeIterationTest.test_reversed() -> void:
test_reversed:
    // iteration/iterate_urange.py:16-18
    // @typing.override
    // @subroutine
    // def test_reversed(self) -> None:
    proto 0 0
    byte ""
    // iteration/iterate_urange.py:20
    // for i in reversed(urange(1, 7, 2)):
    int 2
    assert // Step cannot be zero
    int 1
    int 7
    <
    bz test_reversed_after_for@6
    int 7
    int 1
    -
    dup
    int 2
    %
    int 0
    !=
    uncover 1
    int 2
    /
    uncover 1
    +
    int 1
    -
    int 2
    uncover 1
    *
    int 1
    uncover 1
    +
    frame_bury 0
    frame_dig 0
    int 1
    >=
    bz test_reversed_after_for@6

test_reversed_for_body@3:
    // iteration/iterate_urange.py:20
    // for i in reversed(urange(1, 7, 2)):
    frame_dig 0
    // iteration/iterate_urange.py:21
    // log(values[i])
    dup
    int 1
    +
    // iteration/iterate_urange.py:19
    // values = Bytes(b" a b c")
    byte 0x206120622063
    // iteration/iterate_urange.py:21
    // log(values[i])
    uncover 2
    uncover 2
    substring3
    log
    // iteration/iterate_urange.py:20
    // for i in reversed(urange(1, 7, 2)):
    frame_dig 0
    int 1
    >
    bz test_reversed_after_for@6
    frame_dig 0
    int 2
    -
    frame_bury 0
    b test_reversed_for_body@3

test_reversed_after_for@6:
    retsub


// test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_forwards_index() -> void:
test_forwards_with_forwards_index:
    // iteration/iterate_urange.py:23-25
    // @typing.override
    // @subroutine
    // def test_forwards_with_forwards_index(self) -> None:
    proto 0 0
    // iteration/iterate_urange.py:27
    // for idx, i in uenumerate(urange(1, 7, 2)):
    int 2
    assert // Step cannot be zero
    int 1
    int 0

test_forwards_with_forwards_index_for_header@1:
    // iteration/iterate_urange.py:27
    // for idx, i in uenumerate(urange(1, 7, 2)):
    frame_dig 0
    int 7
    <
    bz test_forwards_with_forwards_index_after_for@5
    frame_dig 0
    frame_dig 1
    cover 1
    // iteration/iterate_urange.py:28
    // self._log_with_index(idx, values[i])
    dup
    int 1
    +
    // iteration/iterate_urange.py:26
    // values = Bytes(b" a b c")
    byte 0x206120622063
    // iteration/iterate_urange.py:28
    // self._log_with_index(idx, values[i])
    uncover 2
    uncover 2
    substring3
    callsub _log_with_index
    // iteration/iterate_urange.py:27
    // for idx, i in uenumerate(urange(1, 7, 2)):
    frame_dig 0
    int 2
    +
    frame_bury 0
    frame_dig 1
    int 1
    +
    frame_bury 1
    b test_forwards_with_forwards_index_for_header@1

test_forwards_with_forwards_index_after_for@5:
    retsub


// test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
_log_with_index:
    // iteration/base.py:29-30
    // @subroutine
    // def _log_with_index(self, idx: UInt64, value: Bytes) -> None:
    proto 2 0
    // iteration/base.py:32
    // log(digits[idx], value, sep="=")
    frame_dig -2
    int 1
    +
    // iteration/base.py:31
    // digits = Bytes(b"0123456789")
    byte 0x30313233343536373839
    // iteration/base.py:32
    // log(digits[idx], value, sep="=")
    frame_dig -2
    uncover 2
    substring3
    byte "="
    concat
    frame_dig -1
    concat
    log
    retsub


// test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_reverse_index() -> void:
test_forwards_with_reverse_index:
    // iteration/iterate_urange.py:30-32
    // @typing.override
    // @subroutine
    // def test_forwards_with_reverse_index(self) -> None:
    proto 0 0
    byte ""
    dupn 2
    // iteration/iterate_urange.py:34
    // for idx, i in reversed(uenumerate(reversed(urange(1, 7, 2)))):
    int 2
    assert // Step cannot be zero
    int 1
    int 7
    <
    bz test_forwards_with_reverse_index_after_for@6
    int 7
    int 1
    -
    dup
    int 2
    %
    int 0
    !=
    uncover 1
    int 2
    /
    uncover 1
    +
    int 1
    -
    frame_bury 0
    int 1
    frame_bury 2
    int 0
    frame_bury 1

test_forwards_with_reverse_index_for_header@2:
    // iteration/iterate_urange.py:34
    // for idx, i in reversed(uenumerate(reversed(urange(1, 7, 2)))):
    frame_dig 2
    int 7
    <
    bz test_forwards_with_reverse_index_after_for@6
    frame_dig 2
    frame_dig 0
    frame_dig 1
    -
    cover 1
    // iteration/iterate_urange.py:35
    // self._log_with_index(idx, values[i])
    dup
    int 1
    +
    // iteration/iterate_urange.py:33
    // values = Bytes(b" a b c")
    byte 0x206120622063
    // iteration/iterate_urange.py:35
    // self._log_with_index(idx, values[i])
    uncover 2
    uncover 2
    substring3
    callsub _log_with_index
    // iteration/iterate_urange.py:34
    // for idx, i in reversed(uenumerate(reversed(urange(1, 7, 2)))):
    frame_dig 2
    int 2
    +
    frame_bury 2
    frame_dig 1
    int 1
    +
    frame_bury 1
    b test_forwards_with_reverse_index_for_header@2

test_forwards_with_reverse_index_after_for@6:
    retsub


// test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_forwards_index() -> void:
test_reverse_with_forwards_index:
    // iteration/iterate_urange.py:37-39
    // @typing.override
    // @subroutine
    // def test_reverse_with_forwards_index(self) -> None:
    proto 0 0
    byte ""
    dup
    // iteration/iterate_urange.py:41
    // for idx, i in uenumerate(reversed(urange(1, 7, 2))):
    int 2
    assert // Step cannot be zero
    int 1
    int 7
    <
    bz test_reverse_with_forwards_index_after_for@6
    int 7
    int 1
    -
    dup
    int 2
    %
    int 0
    !=
    uncover 1
    int 2
    /
    uncover 1
    +
    int 1
    -
    int 2
    uncover 1
    *
    int 1
    uncover 1
    +
    frame_bury 1
    int 0
    frame_bury 0
    frame_dig 1
    int 1
    >=
    bz test_reverse_with_forwards_index_after_for@6

test_reverse_with_forwards_index_for_body@3:
    // iteration/iterate_urange.py:41
    // for idx, i in uenumerate(reversed(urange(1, 7, 2))):
    frame_dig 1
    frame_dig 0
    cover 1
    // iteration/iterate_urange.py:42
    // self._log_with_index(idx, values[i])
    dup
    int 1
    +
    // iteration/iterate_urange.py:40
    // values = Bytes(b" a b c")
    byte 0x206120622063
    // iteration/iterate_urange.py:42
    // self._log_with_index(idx, values[i])
    uncover 2
    uncover 2
    substring3
    callsub _log_with_index
    // iteration/iterate_urange.py:41
    // for idx, i in uenumerate(reversed(urange(1, 7, 2))):
    frame_dig 1
    int 1
    >
    bz test_reverse_with_forwards_index_after_for@6
    frame_dig 1
    int 2
    -
    frame_bury 1
    frame_dig 0
    int 1
    +
    frame_bury 0
    b test_reverse_with_forwards_index_for_body@3

test_reverse_with_forwards_index_after_for@6:
    retsub


// test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_reverse_index() -> void:
test_reverse_with_reverse_index:
    // iteration/iterate_urange.py:44-46
    // @typing.override
    // @subroutine
    // def test_reverse_with_reverse_index(self) -> None:
    proto 0 0
    byte ""
    dupn 2
    // iteration/iterate_urange.py:48
    // for idx, i in reversed(uenumerate(urange(1, 7, 2))):
    int 2
    assert // Step cannot be zero
    int 1
    int 7
    <
    bz test_reverse_with_reverse_index_after_for@6
    int 7
    int 1
    -
    dup
    int 2
    %
    int 0
    !=
    uncover 1
    int 2
    /
    uncover 1
    +
    int 1
    -
    dup
    frame_bury 0
    int 2
    uncover 1
    *
    int 1
    uncover 1
    +
    frame_bury 2
    int 0
    frame_bury 1
    frame_dig 2
    int 1
    >=
    bz test_reverse_with_reverse_index_after_for@6

test_reverse_with_reverse_index_for_body@3:
    // iteration/iterate_urange.py:48
    // for idx, i in reversed(uenumerate(urange(1, 7, 2))):
    frame_dig 2
    frame_dig 0
    frame_dig 1
    -
    cover 1
    // iteration/iterate_urange.py:49
    // self._log_with_index(idx, values[i])
    dup
    int 1
    +
    // iteration/iterate_urange.py:47
    // values = Bytes(b" a b c")
    byte 0x206120622063
    // iteration/iterate_urange.py:49
    // self._log_with_index(idx, values[i])
    uncover 2
    uncover 2
    substring3
    callsub _log_with_index
    // iteration/iterate_urange.py:48
    // for idx, i in reversed(uenumerate(urange(1, 7, 2))):
    frame_dig 2
    int 1
    >
    bz test_reverse_with_reverse_index_after_for@6
    frame_dig 2
    int 2
    -
    frame_bury 2
    frame_dig 1
    int 1
    +
    frame_bury 1
    b test_reverse_with_reverse_index_for_body@3

test_reverse_with_reverse_index_after_for@6:
    retsub


// test_cases.iteration.iterate_urange.URangeIterationTest.test_empty() -> void:
test_empty:
    // iteration/iterate_urange.py:51-53
    // @typing.override
    // @subroutine
    // def test_empty(self) -> None:
    proto 0 0
    byte ""
    dupn 10
    // iteration/iterate_urange.py:54
    // for i in urange(0):
    int 1
    assert // Step cannot be zero
    int 0

test_empty_for_header@1:
    // iteration/iterate_urange.py:54
    // for i in urange(0):
    frame_dig 11
    int 0
    <
    bz test_empty_after_for@5
    frame_dig 11
    // iteration/iterate_urange.py:55
    // log(i)
    itob
    log
    // iteration/iterate_urange.py:54
    // for i in urange(0):
    frame_dig 11
    int 1
    +
    frame_bury 11
    b test_empty_for_header@1

test_empty_after_for@5:
    // iteration/iterate_urange.py:56
    // for i in reversed(urange(0)):
    int 1
    assert // Step cannot be zero
    int 0
    int 0
    <
    bz test_empty_after_for@11
    int 0
    int 0
    -
    dup
    int 1
    %
    int 0
    !=
    uncover 1
    int 1
    /
    uncover 1
    +
    int 1
    -
    int 1
    uncover 1
    *
    int 0
    uncover 1
    +
    frame_bury 6
    frame_dig 6
    int 0
    >=
    bz test_empty_after_for@11

test_empty_for_body@8:
    // iteration/iterate_urange.py:56
    // for i in reversed(urange(0)):
    frame_dig 6
    // iteration/iterate_urange.py:57
    // log(i)
    itob
    log
    // iteration/iterate_urange.py:56
    // for i in reversed(urange(0)):
    frame_dig 6
    int 0
    >
    bz test_empty_after_for@11
    frame_dig 6
    int 1
    -
    frame_bury 6
    b test_empty_for_body@8

test_empty_after_for@11:
    // iteration/iterate_urange.py:58
    // for idx, i in uenumerate(urange(0)):
    int 1
    assert // Step cannot be zero
    int 0
    frame_bury 7
    int 0
    frame_bury 2

test_empty_for_header@12:
    // iteration/iterate_urange.py:58
    // for idx, i in uenumerate(urange(0)):
    frame_dig 7
    int 0
    <
    bz test_empty_after_for@16
    frame_dig 7
    frame_dig 2
    // iteration/iterate_urange.py:59
    // log(idx, i)
    itob
    byte ""
    concat
    uncover 1
    itob
    concat
    log
    // iteration/iterate_urange.py:58
    // for idx, i in uenumerate(urange(0)):
    frame_dig 7
    int 1
    +
    frame_bury 7
    frame_dig 2
    int 1
    +
    frame_bury 2
    b test_empty_for_header@12

test_empty_after_for@16:
    // iteration/iterate_urange.py:60
    // for idx, i in reversed(uenumerate(reversed(urange(0)))):
    int 1
    assert // Step cannot be zero
    int 0
    int 0
    <
    bz test_empty_after_for@22
    int 0
    int 0
    -
    dup
    int 1
    %
    int 0
    !=
    uncover 1
    int 1
    /
    uncover 1
    +
    int 1
    -
    frame_bury 0
    int 0
    frame_bury 8
    int 0
    frame_bury 3

test_empty_for_header@18:
    // iteration/iterate_urange.py:60
    // for idx, i in reversed(uenumerate(reversed(urange(0)))):
    frame_dig 8
    int 0
    <
    bz test_empty_after_for@22
    frame_dig 8
    frame_dig 0
    frame_dig 3
    -
    // iteration/iterate_urange.py:61
    // log(idx, i)
    itob
    byte ""
    concat
    uncover 1
    itob
    concat
    log
    // iteration/iterate_urange.py:60
    // for idx, i in reversed(uenumerate(reversed(urange(0)))):
    frame_dig 8
    int 1
    +
    frame_bury 8
    frame_dig 3
    int 1
    +
    frame_bury 3
    b test_empty_for_header@18

test_empty_after_for@22:
    // iteration/iterate_urange.py:62
    // for idx, i in uenumerate(reversed(urange(0))):
    int 1
    assert // Step cannot be zero
    int 0
    int 0
    <
    bz test_empty_after_for@28
    int 0
    int 0
    -
    dup
    int 1
    %
    int 0
    !=
    uncover 1
    int 1
    /
    uncover 1
    +
    int 1
    -
    int 1
    uncover 1
    *
    int 0
    uncover 1
    +
    frame_bury 9
    int 0
    frame_bury 4
    frame_dig 9
    int 0
    >=
    bz test_empty_after_for@28

test_empty_for_body@25:
    // iteration/iterate_urange.py:62
    // for idx, i in uenumerate(reversed(urange(0))):
    frame_dig 9
    frame_dig 4
    // iteration/iterate_urange.py:63
    // log(idx, i)
    itob
    byte ""
    concat
    uncover 1
    itob
    concat
    log
    // iteration/iterate_urange.py:62
    // for idx, i in uenumerate(reversed(urange(0))):
    frame_dig 9
    int 0
    >
    bz test_empty_after_for@28
    frame_dig 9
    int 1
    -
    frame_bury 9
    frame_dig 4
    int 1
    +
    frame_bury 4
    b test_empty_for_body@25

test_empty_after_for@28:
    // iteration/iterate_urange.py:64
    // for idx, i in reversed(uenumerate(urange(0))):
    int 1
    assert // Step cannot be zero
    int 0
    int 0
    <
    bz test_empty_after_for@34
    int 0
    int 0
    -
    dup
    int 1
    %
    int 0
    !=
    uncover 1
    int 1
    /
    uncover 1
    +
    int 1
    -
    dup
    frame_bury 1
    int 1
    uncover 1
    *
    int 0
    uncover 1
    +
    frame_bury 10
    int 0
    frame_bury 5
    frame_dig 10
    int 0
    >=
    bz test_empty_after_for@34

test_empty_for_body@31:
    // iteration/iterate_urange.py:64
    // for idx, i in reversed(uenumerate(urange(0))):
    frame_dig 10
    frame_dig 1
    frame_dig 5
    -
    // iteration/iterate_urange.py:65
    // log(idx, i)
    itob
    byte ""
    concat
    uncover 1
    itob
    concat
    log
    // iteration/iterate_urange.py:64
    // for idx, i in reversed(uenumerate(urange(0))):
    frame_dig 10
    int 0
    >
    bz test_empty_after_for@34
    frame_dig 10
    int 1
    -
    frame_bury 10
    frame_dig 5
    int 1
    +
    frame_bury 5
    b test_empty_for_body@31

test_empty_after_for@34:
    retsub


// test_cases.iteration.iterate_urange.URangeIterationTest.test_break() -> void:
test_break:
    // iteration/iterate_urange.py:67-69
    // @typing.override
    // @subroutine
    // def test_break(self) -> None:
    proto 0 0
    // iteration/iterate_urange.py:71
    // for i in urange(1, 7, 2):
    int 2
    assert // Step cannot be zero
    int 1
    int 7
    <
    bz test_break_after_for@3
    int 1
    // iteration/iterate_urange.py:72
    // log(values[i])
    int 1
    +
    // iteration/iterate_urange.py:70
    // values = Bytes(b" a b c")
    byte 0x206120622063
    // iteration/iterate_urange.py:71
    // for i in urange(1, 7, 2):
    int 1
    // iteration/iterate_urange.py:72
    // log(values[i])
    uncover 2
    substring3
    log

test_break_after_for@3:
    retsub
