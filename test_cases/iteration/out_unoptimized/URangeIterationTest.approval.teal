#pragma version 10
#pragma typetrack false

// test_cases.iteration.base.IterationTestBase.approval_program() -> uint64:
main:
    intcblock 1 0 2 7
    bytecblock "" 0x206120622063
    // iteration/base.py:8
    // log("test_forwards")
    pushbytes "test_forwards"
    log
    // iteration/base.py:9
    // self.test_forwards()
    callsub test_forwards
    // iteration/base.py:10
    // log("test_reversed")
    pushbytes "test_reversed"
    log
    // iteration/base.py:11
    // self.test_reversed()
    callsub test_reversed
    // iteration/base.py:12
    // log("test_forwards_with_forwards_index")
    pushbytes "test_forwards_with_forwards_index"
    log
    // iteration/base.py:13
    // self.test_forwards_with_forwards_index()
    callsub test_forwards_with_forwards_index
    // iteration/base.py:14
    // log("test_forwards_with_reverse_index")
    pushbytes "test_forwards_with_reverse_index"
    log
    // iteration/base.py:15
    // self.test_forwards_with_reverse_index()
    callsub test_forwards_with_reverse_index
    // iteration/base.py:16
    // log("test_reverse_with_forwards_index")
    pushbytes "test_reverse_with_forwards_index"
    log
    // iteration/base.py:17
    // self.test_reverse_with_forwards_index()
    callsub test_reverse_with_forwards_index
    // iteration/base.py:18
    // log("test_reverse_with_reverse_index")
    pushbytes "test_reverse_with_reverse_index"
    log
    // iteration/base.py:19
    // self.test_reverse_with_reverse_index()
    callsub test_reverse_with_reverse_index
    // iteration/base.py:20
    // log("test_empty")
    pushbytes "test_empty"
    log
    // iteration/base.py:21
    // self.test_empty()
    callsub test_empty
    // iteration/base.py:22
    // log("test_break")
    pushbytes "test_break"
    log
    // iteration/base.py:23
    // self.test_break()
    callsub test_break
    // iteration/base.py:24
    // log("test_tuple_target")
    pushbytes "test_tuple_target"
    log
    // iteration/base.py:25
    // self.test_tuple_target()
    callsub test_tuple_target
    // iteration/base.py:26
    // return True
    intc_0 // 1
    return


// test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards() -> void:
test_forwards:
    // iteration/iterate_urange.py:9-11
    // @typing.override
    // @subroutine
    // def test_forwards(self) -> None:
    proto 0 0
    // iteration/iterate_urange.py:13
    // for i in urange(1, 7, 2):
    intc_2 // 2
    assert // Step cannot be zero
    intc_0 // 1

test_forwards_for_header@1:
    // iteration/iterate_urange.py:13
    // for i in urange(1, 7, 2):
    frame_dig 0
    intc_3 // 7
    <
    bz test_forwards_after_for@4

test_forwards_for_body@2:
    // iteration/iterate_urange.py:12
    // values = Bytes(b" a b c")
    bytec_1 // 0x206120622063
    // iteration/iterate_urange.py:14
    // log(values[i])
    frame_dig 0
    intc_0 // 1
    extract3
    log

test_forwards_for_footer@3:
    // iteration/iterate_urange.py:13
    // for i in urange(1, 7, 2):
    frame_dig 0
    intc_2 // 2
    +
    frame_bury 0
    b test_forwards_for_header@1

test_forwards_after_for@4:
    retsub


// test_cases.iteration.iterate_urange.URangeIterationTest.test_reversed() -> void:
test_reversed:
    // iteration/iterate_urange.py:17-19
    // @typing.override
    // @subroutine
    // def test_reversed(self) -> None:
    proto 0 0
    bytec_0 // ""
    // iteration/iterate_urange.py:21
    // for i in reversed(urange(1, 7, 2)):
    intc_2 // 2
    assert // Step cannot be zero
    intc_0 // 1
    intc_3 // 7
    <
    bz test_reversed_after_for@5

test_reversed_for_header@1:
    // iteration/iterate_urange.py:21
    // for i in reversed(urange(1, 7, 2)):
    intc_3 // 7
    intc_0 // 1
    -
    intc_0 // 1
    -
    intc_2 // 2
    /
    intc_2 // 2
    *
    intc_0 // 1
    +
    frame_bury 0

test_reversed_for_body@2:
    // iteration/iterate_urange.py:20
    // values = Bytes(b" a b c")
    bytec_1 // 0x206120622063
    // iteration/iterate_urange.py:22
    // log(values[i])
    frame_dig 0
    intc_0 // 1
    extract3
    log

test_reversed_for_footer@3:
    // iteration/iterate_urange.py:21
    // for i in reversed(urange(1, 7, 2)):
    intc_0 // 1
    frame_dig 0
    <
    bz test_reversed_after_for@5

test_reversed_for_increment@4:
    // iteration/iterate_urange.py:21
    // for i in reversed(urange(1, 7, 2)):
    frame_dig 0
    intc_2 // 2
    -
    frame_bury 0
    b test_reversed_for_body@2

test_reversed_after_for@5:
    retsub


// test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_forwards_index() -> void:
test_forwards_with_forwards_index:
    // iteration/iterate_urange.py:25-27
    // @typing.override
    // @subroutine
    // def test_forwards_with_forwards_index(self) -> None:
    proto 0 0
    // iteration/iterate_urange.py:29
    // for idx, i in uenumerate(urange(1, 7, 2)):
    intc_2 // 2
    assert // Step cannot be zero
    intc_0 // 1
    intc_1 // 0

test_forwards_with_forwards_index_for_header@1:
    // iteration/iterate_urange.py:29
    // for idx, i in uenumerate(urange(1, 7, 2)):
    frame_dig 0
    intc_3 // 7
    <
    bz test_forwards_with_forwards_index_after_for@4

test_forwards_with_forwards_index_for_body@2:
    // iteration/iterate_urange.py:28
    // values = Bytes(b" a b c")
    bytec_1 // 0x206120622063
    // iteration/iterate_urange.py:30
    // self._log_with_index(idx, values[i])
    frame_dig 0
    intc_0 // 1
    extract3
    frame_dig 1
    swap
    callsub _log_with_index

test_forwards_with_forwards_index_for_footer@3:
    // iteration/iterate_urange.py:29
    // for idx, i in uenumerate(urange(1, 7, 2)):
    frame_dig 0
    intc_2 // 2
    +
    frame_bury 0
    frame_dig 1
    intc_0 // 1
    +
    frame_bury 1
    b test_forwards_with_forwards_index_for_header@1

test_forwards_with_forwards_index_after_for@4:
    retsub


// test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_reverse_index() -> void:
test_forwards_with_reverse_index:
    // iteration/iterate_urange.py:34-36
    // @typing.override
    // @subroutine
    // def test_forwards_with_reverse_index(self) -> None:
    proto 0 0
    bytec_0 // ""
    dupn 2
    // iteration/iterate_urange.py:38
    // for idx, i in reversed(uenumerate(reversed(urange(1, 7, 2)))):
    intc_2 // 2
    assert // Step cannot be zero
    intc_0 // 1
    intc_3 // 7
    <
    bz test_forwards_with_reverse_index_after_for@5

test_forwards_with_reverse_index_for_header@1:
    // iteration/iterate_urange.py:38
    // for idx, i in reversed(uenumerate(reversed(urange(1, 7, 2)))):
    intc_3 // 7
    intc_0 // 1
    -
    intc_0 // 1
    -
    intc_2 // 2
    /
    intc_2 // 2
    dig 1
    *
    intc_0 // 1
    +
    frame_bury 2
    intc_0 // 1
    frame_bury 0
    frame_bury 1

test_forwards_with_reverse_index_for_body@2:
    // iteration/iterate_urange.py:37
    // values = Bytes(b" a b c")
    bytec_1 // 0x206120622063
    // iteration/iterate_urange.py:39
    // self._log_with_index(idx, values[i])
    frame_dig 0
    intc_0 // 1
    extract3
    frame_dig 1
    swap
    callsub _log_with_index

test_forwards_with_reverse_index_for_footer@3:
    // iteration/iterate_urange.py:38
    // for idx, i in reversed(uenumerate(reversed(urange(1, 7, 2)))):
    frame_dig 0
    frame_dig 2
    <
    bz test_forwards_with_reverse_index_after_for@5

test_forwards_with_reverse_index_for_increment@4:
    // iteration/iterate_urange.py:38
    // for idx, i in reversed(uenumerate(reversed(urange(1, 7, 2)))):
    frame_dig 0
    intc_2 // 2
    +
    frame_bury 0
    frame_dig 1
    intc_0 // 1
    -
    frame_bury 1
    b test_forwards_with_reverse_index_for_body@2

test_forwards_with_reverse_index_after_for@5:
    retsub


// test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_forwards_index() -> void:
test_reverse_with_forwards_index:
    // iteration/iterate_urange.py:43-45
    // @typing.override
    // @subroutine
    // def test_reverse_with_forwards_index(self) -> None:
    proto 0 0
    bytec_0 // ""
    dup
    // iteration/iterate_urange.py:47
    // for idx, i in uenumerate(reversed(urange(1, 7, 2))):
    intc_2 // 2
    assert // Step cannot be zero
    intc_0 // 1
    intc_3 // 7
    <
    bz test_reverse_with_forwards_index_after_for@5

test_reverse_with_forwards_index_for_header@1:
    // iteration/iterate_urange.py:47
    // for idx, i in uenumerate(reversed(urange(1, 7, 2))):
    intc_3 // 7
    intc_0 // 1
    -
    intc_0 // 1
    -
    intc_2 // 2
    /
    intc_2 // 2
    *
    intc_0 // 1
    +
    frame_bury 0
    intc_1 // 0
    frame_bury 1

test_reverse_with_forwards_index_for_body@2:
    // iteration/iterate_urange.py:46
    // values = Bytes(b" a b c")
    bytec_1 // 0x206120622063
    // iteration/iterate_urange.py:48
    // self._log_with_index(idx, values[i])
    frame_dig 0
    intc_0 // 1
    extract3
    frame_dig 1
    swap
    callsub _log_with_index

test_reverse_with_forwards_index_for_footer@3:
    // iteration/iterate_urange.py:47
    // for idx, i in uenumerate(reversed(urange(1, 7, 2))):
    intc_0 // 1
    frame_dig 0
    <
    bz test_reverse_with_forwards_index_after_for@5

test_reverse_with_forwards_index_for_increment@4:
    // iteration/iterate_urange.py:47
    // for idx, i in uenumerate(reversed(urange(1, 7, 2))):
    frame_dig 0
    intc_2 // 2
    -
    frame_bury 0
    frame_dig 1
    intc_0 // 1
    +
    frame_bury 1
    b test_reverse_with_forwards_index_for_body@2

test_reverse_with_forwards_index_after_for@5:
    retsub


// test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_reverse_index() -> void:
test_reverse_with_reverse_index:
    // iteration/iterate_urange.py:52-54
    // @typing.override
    // @subroutine
    // def test_reverse_with_reverse_index(self) -> None:
    proto 0 0
    bytec_0 // ""
    dup
    // iteration/iterate_urange.py:56
    // for idx, i in reversed(uenumerate(urange(1, 7, 2))):
    intc_2 // 2
    assert // Step cannot be zero
    intc_0 // 1
    intc_3 // 7
    <
    bz test_reverse_with_reverse_index_after_for@5

test_reverse_with_reverse_index_for_header@1:
    // iteration/iterate_urange.py:56
    // for idx, i in reversed(uenumerate(urange(1, 7, 2))):
    intc_3 // 7
    intc_0 // 1
    -
    intc_0 // 1
    -
    intc_2 // 2
    /
    intc_2 // 2
    dig 1
    *
    intc_0 // 1
    +
    frame_bury 0
    frame_bury 1

test_reverse_with_reverse_index_for_body@2:
    // iteration/iterate_urange.py:55
    // values = Bytes(b" a b c")
    bytec_1 // 0x206120622063
    // iteration/iterate_urange.py:57
    // self._log_with_index(idx, values[i])
    frame_dig 0
    intc_0 // 1
    extract3
    frame_dig 1
    swap
    callsub _log_with_index

test_reverse_with_reverse_index_for_footer@3:
    // iteration/iterate_urange.py:56
    // for idx, i in reversed(uenumerate(urange(1, 7, 2))):
    intc_0 // 1
    frame_dig 0
    <
    bz test_reverse_with_reverse_index_after_for@5

test_reverse_with_reverse_index_for_increment@4:
    // iteration/iterate_urange.py:56
    // for idx, i in reversed(uenumerate(urange(1, 7, 2))):
    frame_dig 0
    intc_2 // 2
    -
    frame_bury 0
    frame_dig 1
    intc_0 // 1
    -
    frame_bury 1
    b test_reverse_with_reverse_index_for_body@2

test_reverse_with_reverse_index_after_for@5:
    retsub


// test_cases.iteration.iterate_urange.URangeIterationTest.test_empty() -> void:
test_empty:
    // iteration/iterate_urange.py:61-63
    // @typing.override
    // @subroutine
    // def test_empty(self) -> None:
    proto 0 0
    bytec_0 // ""
    dup
    // iteration/iterate_urange.py:64
    // for i in urange(0):
    intc_0 // 1
    assert // Step cannot be zero
    intc_1 // 0

test_empty_for_header@1:
    // iteration/iterate_urange.py:64
    // for i in urange(0):
    frame_dig 2
    intc_1 // 0
    <
    bz test_empty_after_for@4

test_empty_for_body@2:
    // iteration/iterate_urange.py:65
    // log(i)
    frame_dig 2
    itob
    log

test_empty_for_footer@3:
    // iteration/iterate_urange.py:64
    // for i in urange(0):
    frame_dig 2
    intc_0 // 1
    +
    frame_bury 2
    b test_empty_for_header@1

test_empty_after_for@4:
    // iteration/iterate_urange.py:66
    // for i in reversed(urange(0)):
    intc_0 // 1
    assert // Step cannot be zero
    intc_1 // 0
    dup
    <
    bz test_empty_after_for@9

test_empty_for_header@5:
    // iteration/iterate_urange.py:66
    // for i in reversed(urange(0)):
    intc_1 // 0
    dup
    -
    intc_0 // 1
    -
    intc_0 // 1
    /
    intc_0 // 1
    *
    intc_1 // 0
    +
    frame_bury 2

test_empty_for_body@6:
    // iteration/iterate_urange.py:67
    // log(i)
    frame_dig 2
    itob
    log

test_empty_for_footer@7:
    // iteration/iterate_urange.py:66
    // for i in reversed(urange(0)):
    intc_1 // 0
    frame_dig 2
    <
    bz test_empty_after_for@9

test_empty_for_increment@8:
    // iteration/iterate_urange.py:66
    // for i in reversed(urange(0)):
    frame_dig 2
    intc_0 // 1
    -
    frame_bury 2
    b test_empty_for_body@6

test_empty_after_for@9:
    // iteration/iterate_urange.py:68
    // for idx, i in uenumerate(urange(0)):
    intc_0 // 1
    assert // Step cannot be zero
    intc_1 // 0
    frame_bury 2
    intc_1 // 0
    frame_bury 0

test_empty_for_header@10:
    // iteration/iterate_urange.py:68
    // for idx, i in uenumerate(urange(0)):
    frame_dig 2
    intc_1 // 0
    <
    bz test_empty_after_for@13

test_empty_for_body@11:
    // iteration/iterate_urange.py:69
    // log(idx, i)
    frame_dig 0
    itob
    bytec_0 // ""
    concat
    frame_dig 2
    itob
    concat
    log

test_empty_for_footer@12:
    // iteration/iterate_urange.py:68
    // for idx, i in uenumerate(urange(0)):
    frame_dig 2
    intc_0 // 1
    +
    frame_bury 2
    frame_dig 0
    intc_0 // 1
    +
    frame_bury 0
    b test_empty_for_header@10

test_empty_after_for@13:
    // iteration/iterate_urange.py:70
    // for idx, i in reversed(uenumerate(reversed(urange(0)))):
    intc_0 // 1
    assert // Step cannot be zero
    intc_1 // 0
    dup
    <
    bz test_empty_after_for@18

test_empty_for_header@14:
    // iteration/iterate_urange.py:70
    // for idx, i in reversed(uenumerate(reversed(urange(0)))):
    intc_1 // 0
    dup
    -
    intc_0 // 1
    -
    intc_0 // 1
    /
    intc_0 // 1
    dig 1
    *
    intc_1 // 0
    +
    frame_bury 1
    intc_1 // 0
    frame_bury 2
    frame_bury 0

test_empty_for_body@15:
    // iteration/iterate_urange.py:71
    // log(idx, i)
    frame_dig 0
    itob
    bytec_0 // ""
    concat
    frame_dig 2
    itob
    concat
    log

test_empty_for_footer@16:
    // iteration/iterate_urange.py:70
    // for idx, i in reversed(uenumerate(reversed(urange(0)))):
    frame_dig 2
    frame_dig 1
    <
    bz test_empty_after_for@18

test_empty_for_increment@17:
    // iteration/iterate_urange.py:70
    // for idx, i in reversed(uenumerate(reversed(urange(0)))):
    frame_dig 2
    intc_0 // 1
    +
    frame_bury 2
    frame_dig 0
    intc_0 // 1
    -
    frame_bury 0
    b test_empty_for_body@15

test_empty_after_for@18:
    // iteration/iterate_urange.py:72
    // for idx, i in uenumerate(reversed(urange(0))):
    intc_0 // 1
    assert // Step cannot be zero
    intc_1 // 0
    dup
    <
    bz test_empty_after_for@23

test_empty_for_header@19:
    // iteration/iterate_urange.py:72
    // for idx, i in uenumerate(reversed(urange(0))):
    intc_1 // 0
    dup
    -
    intc_0 // 1
    -
    intc_0 // 1
    /
    intc_0 // 1
    *
    intc_1 // 0
    +
    frame_bury 2
    intc_1 // 0
    frame_bury 0

test_empty_for_body@20:
    // iteration/iterate_urange.py:73
    // log(idx, i)
    frame_dig 0
    itob
    bytec_0 // ""
    concat
    frame_dig 2
    itob
    concat
    log

test_empty_for_footer@21:
    // iteration/iterate_urange.py:72
    // for idx, i in uenumerate(reversed(urange(0))):
    intc_1 // 0
    frame_dig 2
    <
    bz test_empty_after_for@23

test_empty_for_increment@22:
    // iteration/iterate_urange.py:72
    // for idx, i in uenumerate(reversed(urange(0))):
    frame_dig 2
    intc_0 // 1
    -
    frame_bury 2
    frame_dig 0
    intc_0 // 1
    +
    frame_bury 0
    b test_empty_for_body@20

test_empty_after_for@23:
    // iteration/iterate_urange.py:74
    // for idx, i in reversed(uenumerate(urange(0))):
    intc_0 // 1
    assert // Step cannot be zero
    intc_1 // 0
    dup
    <
    bz test_empty_after_for@28

test_empty_for_header@24:
    // iteration/iterate_urange.py:74
    // for idx, i in reversed(uenumerate(urange(0))):
    intc_1 // 0
    dup
    -
    intc_0 // 1
    -
    intc_0 // 1
    /
    intc_0 // 1
    dig 1
    *
    intc_1 // 0
    +
    frame_bury 2
    frame_bury 0

test_empty_for_body@25:
    // iteration/iterate_urange.py:75
    // log(idx, i)
    frame_dig 0
    itob
    bytec_0 // ""
    concat
    frame_dig 2
    itob
    concat
    log

test_empty_for_footer@26:
    // iteration/iterate_urange.py:74
    // for idx, i in reversed(uenumerate(urange(0))):
    intc_1 // 0
    frame_dig 2
    <
    bz test_empty_after_for@28

test_empty_for_increment@27:
    // iteration/iterate_urange.py:74
    // for idx, i in reversed(uenumerate(urange(0))):
    frame_dig 2
    intc_0 // 1
    -
    frame_bury 2
    frame_dig 0
    intc_0 // 1
    -
    frame_bury 0
    b test_empty_for_body@25

test_empty_after_for@28:
    retsub


// test_cases.iteration.iterate_urange.URangeIterationTest.test_break() -> void:
test_break:
    // iteration/iterate_urange.py:81
    // for i in urange(1, 7, 2):
    intc_2 // 2
    assert // Step cannot be zero

test_break_for_header@1:
    // iteration/iterate_urange.py:81
    // for i in urange(1, 7, 2):
    intc_0 // 1
    intc_3 // 7
    <
    bz test_break_after_for@3

test_break_for_body@2:
    // iteration/iterate_urange.py:80
    // values = Bytes(b" a b c")
    bytec_1 // 0x206120622063
    // iteration/iterate_urange.py:81
    // for i in urange(1, 7, 2):
    intc_0 // 1
    // iteration/iterate_urange.py:82
    // log(values[i])
    dup
    extract3
    log

test_break_after_for@3:
    retsub


// test_cases.iteration.iterate_urange.URangeIterationTest.test_tuple_target() -> void:
test_tuple_target:
    // iteration/iterate_urange.py:85-87
    // @typing.override
    // @subroutine
    // def test_tuple_target(self) -> None:
    proto 0 0
    // iteration/iterate_urange.py:89
    // for tup in uenumerate(urange(1)):
    intc_0 // 1
    assert // Step cannot be zero
    intc_1 // 0
    dup

test_tuple_target_for_header@1:
    // iteration/iterate_urange.py:89
    // for tup in uenumerate(urange(1)):
    frame_dig 0
    intc_0 // 1
    <
    bz test_tuple_target_after_for@4

test_tuple_target_for_body@2:
    // iteration/iterate_urange.py:88
    // values = Bytes(b"t")
    pushbytes 0x74
    // iteration/iterate_urange.py:90
    // self._log_with_index(tup[0], values[tup[1]])
    frame_dig 0
    intc_0 // 1
    extract3
    frame_dig 1
    swap
    callsub _log_with_index

test_tuple_target_for_footer@3:
    // iteration/iterate_urange.py:89
    // for tup in uenumerate(urange(1)):
    frame_dig 0
    intc_0 // 1
    +
    frame_bury 0
    frame_dig 1
    intc_0 // 1
    +
    frame_bury 1
    b test_tuple_target_for_header@1

test_tuple_target_after_for@4:
    retsub


// test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
_log_with_index:
    // iteration/base.py:31-32
    // @subroutine
    // def _log_with_index(self, idx: UInt64, value: Bytes) -> None:
    proto 2 0
    // iteration/base.py:33
    // digits = Bytes(b"0123456789")
    pushbytes 0x30313233343536373839
    // iteration/base.py:34
    // log(digits[idx], value, sep="=")
    frame_dig -2
    intc_0 // 1
    extract3
    pushbytes "="
    concat
    frame_dig -1
    concat
    log
    retsub
