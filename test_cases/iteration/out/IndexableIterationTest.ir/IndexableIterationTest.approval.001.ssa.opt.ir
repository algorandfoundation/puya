main test_cases.iteration.base.IterationTestBase.approval_program:
    block@0: // L7
        (log "test_forwards")
        let bytes_length%0#0: uint64 = 3u
        let item_index_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L12
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 3u)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L13
        let i#0: bytes = (extract3 0x616263 item_index_internal%0#1 1u)
        (log i#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@2
    block@5: // after_for_L12
        (log "test_reversed")
        let bytes_length%0#1: uint64 = 3u
        goto block@8
    block@8: // for_header_L18
        let reverse_index_internal%0#2: uint64 = φ(bytes_length%0#1 <- block@5, reverse_index_internal%0#3 <- block@9)
        let continue_looping%0#1: bool = (> reverse_index_internal%0#2 0u)
        goto reverse_index_internal%0#2 ? block@9 : block@11
    block@9: // for_body_L19
        let reverse_index_internal%0#3: uint64 = (- reverse_index_internal%0#2 1u)
        let i#1: bytes = (extract3 0x616263 reverse_index_internal%0#3 1u)
        (log i#1)
        goto block@8
    block@11: // after_for_L18
        (log "test_forwards_with_forwards_index")
        let bytes_length%0#2: uint64 = 3u
        let item_index_internal%0#4: uint64 = 0u
        goto block@14
    block@14: // for_header_L24
        let idx#0: uint64 = φ(item_index_internal%0#4 <- block@11, item_index_internal%0#6 <- block@15)
        let continue_looping%0#2: bool = (< idx#0 3u)
        goto continue_looping%0#2 ? block@15 : block@17
    block@15: // for_body_L25
        let i#2: bytes = (extract3 0x616263 idx#0 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#2)
        let item_index_internal%0#6: uint64 = (+ idx#0 1u)
        goto block@14
    block@17: // after_for_L24
        (log "test_forwards_with_reverse_index")
        let bytes_length%0#3: uint64 = 3u
        let item_index_internal%0#7: uint64 = 0u
        goto block@20
    block@20: // for_header_L31
        let item_index_internal%0#8: uint64 = φ(item_index_internal%0#7 <- block@17, item_index_internal%0#9 <- block@21)
        let reverse_index_internal%0#6: uint64 = φ(bytes_length%0#3 <- block@17, idx#2 <- block@21)
        let continue_looping%0#3: bool = (> reverse_index_internal%0#6 0u)
        goto reverse_index_internal%0#6 ? block@21 : block@23
    block@21: // for_body_L32
        let idx#2: uint64 = (- reverse_index_internal%0#6 1u)
        let i#3: bytes = (extract3 0x616263 item_index_internal%0#8 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#2, i#3)
        let item_index_internal%0#9: uint64 = (+ item_index_internal%0#8 1u)
        goto block@20
    block@23: // after_for_L31
        (log "test_reverse_with_forwards_index")
        let bytes_length%0#4: uint64 = 3u
        let item_index_internal%0#10: uint64 = 0u
        goto block@26
    block@26: // for_header_L38
        let idx#4: uint64 = φ(item_index_internal%0#10 <- block@23, item_index_internal%0#12 <- block@27)
        let reverse_index_internal%0#9: uint64 = φ(bytes_length%0#4 <- block@23, reverse_index_internal%0#10 <- block@27)
        let continue_looping%0#4: bool = (> reverse_index_internal%0#9 0u)
        goto reverse_index_internal%0#9 ? block@27 : block@29
    block@27: // for_body_L39
        let reverse_index_internal%0#10: uint64 = (- reverse_index_internal%0#9 1u)
        let i#4: bytes = (extract3 0x616263 reverse_index_internal%0#10 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#4, i#4)
        let item_index_internal%0#12: uint64 = (+ idx#4 1u)
        goto block@26
    block@29: // after_for_L38
        (log "test_reverse_with_reverse_index")
        let bytes_length%0#5: uint64 = 3u
        goto block@32
    block@32: // for_header_L45
        let reverse_index_internal%0#12: uint64 = φ(bytes_length%0#5 <- block@29, idx#6 <- block@33)
        let continue_looping%0#5: bool = (> reverse_index_internal%0#12 0u)
        goto reverse_index_internal%0#12 ? block@33 : block@35
    block@33: // for_body_L46
        let idx#6: uint64 = (- reverse_index_internal%0#12 1u)
        let i#5: bytes = (extract3 0x616263 idx#6 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#6, i#5)
        goto block@32
    block@35: // after_for_L45
        (log "test_empty")
        let bytes_length%0#6: uint64 = 0u
        let item_index_internal%0#14: uint64 = 0u
        goto block@38
    block@38: // for_header_L52
        let item_index_internal%0#15: uint64 = φ(item_index_internal%0#14 <- block@35, item_index_internal%0#16 <- block@39)
        let continue_looping%0#6: bool = (< item_index_internal%0#15 0u)
        goto continue_looping%0#6 ? block@39 : block@41
    block@39: // for_body_L53
        let i#6: bytes = (extract3 0x item_index_internal%0#15 1u)
        (log i#6)
        let item_index_internal%0#16: uint64 = (+ item_index_internal%0#15 1u)
        goto block@38
    block@41: // after_for_L52
        let bytes_length%1#0: uint64 = 0u
        goto block@42
    block@42: // for_header_L54
        let reverse_index_internal%1#1: uint64 = φ(bytes_length%1#0 <- block@41, reverse_index_internal%1#2 <- block@43)
        let continue_looping%1#0: bool = (> reverse_index_internal%1#1 0u)
        goto reverse_index_internal%1#1 ? block@43 : block@45
    block@43: // for_body_L55
        let reverse_index_internal%1#2: uint64 = (- reverse_index_internal%1#1 1u)
        let i#7: bytes = (extract3 0x reverse_index_internal%1#2 1u)
        (log i#7)
        goto block@42
    block@45: // after_for_L54
        let bytes_length%2#0: uint64 = 0u
        let item_index_internal%2#0: uint64 = 0u
        goto block@46
    block@46: // for_header_L56
        let idx#8: uint64 = φ(item_index_internal%2#0 <- block@45, item_index_internal%2#2 <- block@47)
        let continue_looping%2#0: bool = (< idx#8 0u)
        goto continue_looping%2#0 ? block@47 : block@49
    block@47: // for_body_L57
        let i#8: bytes = (extract3 0x idx#8 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#8, i#8)
        let item_index_internal%2#2: uint64 = (+ idx#8 1u)
        goto block@46
    block@49: // after_for_L56
        let bytes_length%3#0: uint64 = 0u
        let item_index_internal%3#0: uint64 = 0u
        goto block@50
    block@50: // for_header_L58
        let item_index_internal%3#1: uint64 = φ(item_index_internal%3#0 <- block@49, item_index_internal%3#2 <- block@51)
        let reverse_index_internal%3#1: uint64 = φ(bytes_length%3#0 <- block@49, idx#9 <- block@51)
        let continue_looping%3#0: bool = (> reverse_index_internal%3#1 0u)
        goto reverse_index_internal%3#1 ? block@51 : block@53
    block@51: // for_body_L59
        let idx#9: uint64 = (- reverse_index_internal%3#1 1u)
        let i#9: bytes = (extract3 0x item_index_internal%3#1 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#9, i#9)
        let item_index_internal%3#2: uint64 = (+ item_index_internal%3#1 1u)
        goto block@50
    block@53: // after_for_L58
        let bytes_length%4#0: uint64 = 0u
        let item_index_internal%4#0: uint64 = 0u
        goto block@54
    block@54: // for_header_L60
        let idx#10: uint64 = φ(item_index_internal%4#0 <- block@53, item_index_internal%4#2 <- block@55)
        let reverse_index_internal%4#1: uint64 = φ(bytes_length%4#0 <- block@53, reverse_index_internal%4#2 <- block@55)
        let continue_looping%4#0: bool = (> reverse_index_internal%4#1 0u)
        goto reverse_index_internal%4#1 ? block@55 : block@57
    block@55: // for_body_L61
        let reverse_index_internal%4#2: uint64 = (- reverse_index_internal%4#1 1u)
        let i#10: bytes = (extract3 0x reverse_index_internal%4#2 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#10, i#10)
        let item_index_internal%4#2: uint64 = (+ idx#10 1u)
        goto block@54
    block@57: // after_for_L60
        let bytes_length%5#0: uint64 = 0u
        goto block@58
    block@58: // for_header_L62
        let reverse_index_internal%5#1: uint64 = φ(bytes_length%5#0 <- block@57, idx#11 <- block@59)
        let continue_looping%5#0: bool = (> reverse_index_internal%5#1 0u)
        goto reverse_index_internal%5#1 ? block@59 : block@61
    block@59: // for_body_L63
        let idx#11: uint64 = (- reverse_index_internal%5#1 1u)
        let i#11: bytes = (extract3 0x idx#11 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#11, i#11)
        goto block@58
    block@61: // after_for_L62
        (log "test_break")
        let bytes_length%0#7: uint64 = 3u
        let continue_looping%0#7: bool = 1u
        let b#0: bytes = 0x61
        (log 0x61)
        (log "test_tuple_target")
        let bytes_length%0#8: uint64 = 1u
        let item_index_internal%0#18: uint64 = 0u
        goto block@69
    block@69: // for_header_L75
        let tup.0#0: uint64 = φ(item_index_internal%0#18 <- block@61, item_index_internal%0#20 <- block@70)
        let continue_looping%0#8: bool = (< tup.0#0 1u)
        goto continue_looping%0#8 ? block@70 : block@72
    block@70: // for_body_L76
        let tup.1#0: bytes = (extract3 0x74 tup.0#0 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(tup.0#0, tup.1#0)
        let item_index_internal%0#20: uint64 = (+ tup.0#0 1u)
        goto block@69
    block@72: // after_for_L75
        return 1u

subroutine test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
    block@0: // L31
        let extract%0#0: bytes = (extract3 0x30313233343536373839 idx#0 1u)
        let tmp%0#0: bytes = (concat extract%0#0 "=")
        let tmp%1#0: bytes = (concat tmp%0#0 value#0)
        (log tmp%1#0)
        return 