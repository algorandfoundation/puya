#pragma version 10

test_cases.iteration.iterate_indexable.IndexableIterationTest.approval_program:
    // iteration/base.py:8
    // log("test_forwards")
    byte "test_forwards"
    log
    // iteration/base.py:9
    // self.test_forwards()
    callsub test_forwards
    // iteration/base.py:10
    // log("test_reversed")
    byte "test_reversed"
    log
    // iteration/base.py:11
    // self.test_reversed()
    callsub test_reversed
    // iteration/base.py:12
    // log("test_forwards_with_forwards_index")
    byte "test_forwards_with_forwards_index"
    log
    // iteration/base.py:13
    // self.test_forwards_with_forwards_index()
    callsub test_forwards_with_forwards_index
    // iteration/base.py:14
    // log("test_forwards_with_reverse_index")
    byte "test_forwards_with_reverse_index"
    log
    // iteration/base.py:15
    // self.test_forwards_with_reverse_index()
    callsub test_forwards_with_reverse_index
    // iteration/base.py:16
    // log("test_reverse_with_forwards_index")
    byte "test_reverse_with_forwards_index"
    log
    // iteration/base.py:17
    // self.test_reverse_with_forwards_index()
    callsub test_reverse_with_forwards_index
    // iteration/base.py:18
    // log("test_reverse_with_reverse_index")
    byte "test_reverse_with_reverse_index"
    log
    // iteration/base.py:19
    // self.test_reverse_with_reverse_index()
    callsub test_reverse_with_reverse_index
    // iteration/base.py:20
    // log("test_empty")
    byte "test_empty"
    log
    // iteration/base.py:21
    // self.test_empty()
    callsub test_empty
    // iteration/base.py:22
    // log("test_break")
    byte "test_break"
    log
    // iteration/base.py:23
    // self.test_break()
    callsub test_break
    // iteration/base.py:24
    // log("test_tuple_target")
    byte "test_tuple_target"
    log
    // iteration/base.py:25
    // self.test_tuple_target()
    callsub test_tuple_target
    // iteration/base.py:26
    // return True
    int 1
    return


// test_cases.iteration.iterate_indexable.IndexableIterationTest.test_forwards() -> void:
test_forwards:
    // iteration/iterate_indexable.py:9-11
    // @typing.override
    // @subroutine
    // def test_forwards(self) -> None:
    proto 0 0
    int 0

test_forwards_for_header@1:
    // iteration/iterate_indexable.py:12
    // for i in Bytes(b"abc"):
    frame_dig 0
    int 3
    <
    bz test_forwards_after_for@4
    byte 0x616263
    frame_dig 0
    dup
    cover 2
    int 1
    extract3
    // iteration/iterate_indexable.py:13
    // log(i)
    log
    int 1
    +
    frame_bury 0
    b test_forwards_for_header@1

test_forwards_after_for@4:
    retsub


// test_cases.iteration.iterate_indexable.IndexableIterationTest.test_reversed() -> void:
test_reversed:
    // iteration/iterate_indexable.py:15-17
    // @typing.override
    // @subroutine
    // def test_reversed(self) -> None:
    proto 0 0
    // iteration/iterate_indexable.py:18
    // for i in reversed(Bytes(b"abc")):
    int 3

test_reversed_for_header@1:
    // iteration/iterate_indexable.py:18
    // for i in reversed(Bytes(b"abc")):
    frame_dig 0
    bz test_reversed_after_for@4
    frame_dig 0
    int 1
    -
    dup
    frame_bury 0
    byte 0x616263
    swap
    int 1
    extract3
    // iteration/iterate_indexable.py:19
    // log(i)
    log
    b test_reversed_for_header@1

test_reversed_after_for@4:
    retsub


// test_cases.iteration.iterate_indexable.IndexableIterationTest.test_forwards_with_forwards_index() -> void:
test_forwards_with_forwards_index:
    // iteration/iterate_indexable.py:21-23
    // @typing.override
    // @subroutine
    // def test_forwards_with_forwards_index(self) -> None:
    proto 0 0
    int 0

test_forwards_with_forwards_index_for_header@1:
    // iteration/iterate_indexable.py:24
    // for idx, i in uenumerate(Bytes(b"abc")):
    frame_dig 0
    int 3
    <
    bz test_forwards_with_forwards_index_after_for@4
    byte 0x616263
    frame_dig 0
    dup
    cover 2
    int 1
    extract3
    // iteration/iterate_indexable.py:25
    // self._log_with_index(idx, i)
    dig 1
    swap
    callsub _log_with_index
    int 1
    +
    frame_bury 0
    b test_forwards_with_forwards_index_for_header@1

test_forwards_with_forwards_index_after_for@4:
    retsub


// test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
_log_with_index:
    // iteration/base.py:31-32
    // @subroutine
    // def _log_with_index(self, idx: UInt64, value: Bytes) -> None:
    proto 2 0
    // iteration/base.py:34
    // log(digits[idx], value, sep="=")
    frame_dig -2
    int 1
    +
    // iteration/base.py:33
    // digits = Bytes(b"0123456789")
    byte 0x30313233343536373839
    // iteration/base.py:34
    // log(digits[idx], value, sep="=")
    frame_dig -2
    uncover 2
    substring3
    byte "="
    concat
    frame_dig -1
    concat
    log
    retsub


// test_cases.iteration.iterate_indexable.IndexableIterationTest.test_forwards_with_reverse_index() -> void:
test_forwards_with_reverse_index:
    // iteration/iterate_indexable.py:28-30
    // @typing.override
    // @subroutine
    // def test_forwards_with_reverse_index(self) -> None:
    proto 0 0
    int 0
    // iteration/iterate_indexable.py:31
    // for idx, i in reversed(uenumerate(reversed(Bytes(b"abc")))):
    int 3

test_forwards_with_reverse_index_for_header@1:
    // iteration/iterate_indexable.py:31
    // for idx, i in reversed(uenumerate(reversed(Bytes(b"abc")))):
    frame_dig 1
    bz test_forwards_with_reverse_index_after_for@4
    frame_dig 1
    int 1
    -
    byte 0x616263
    frame_dig 0
    dup
    cover 3
    int 1
    extract3
    // iteration/iterate_indexable.py:32
    // self._log_with_index(idx, i)
    dig 1
    swap
    callsub _log_with_index
    swap
    int 1
    +
    frame_bury 0
    frame_bury 1
    b test_forwards_with_reverse_index_for_header@1

test_forwards_with_reverse_index_after_for@4:
    retsub


// test_cases.iteration.iterate_indexable.IndexableIterationTest.test_reverse_with_forwards_index() -> void:
test_reverse_with_forwards_index:
    // iteration/iterate_indexable.py:35-37
    // @typing.override
    // @subroutine
    // def test_reverse_with_forwards_index(self) -> None:
    proto 0 0
    // iteration/iterate_indexable.py:38
    // for idx, i in uenumerate(reversed(Bytes(b"abc"))):
    int 3
    int 0

test_reverse_with_forwards_index_for_header@1:
    // iteration/iterate_indexable.py:38
    // for idx, i in uenumerate(reversed(Bytes(b"abc"))):
    frame_dig 0
    bz test_reverse_with_forwards_index_after_for@4
    frame_dig 0
    int 1
    -
    dup
    frame_bury 0
    byte 0x616263
    swap
    int 1
    extract3
    // iteration/iterate_indexable.py:39
    // self._log_with_index(idx, i)
    frame_dig 1
    dup
    uncover 2
    callsub _log_with_index
    int 1
    +
    frame_bury 1
    b test_reverse_with_forwards_index_for_header@1

test_reverse_with_forwards_index_after_for@4:
    retsub


// test_cases.iteration.iterate_indexable.IndexableIterationTest.test_reverse_with_reverse_index() -> void:
test_reverse_with_reverse_index:
    // iteration/iterate_indexable.py:42-44
    // @typing.override
    // @subroutine
    // def test_reverse_with_reverse_index(self) -> None:
    proto 0 0
    // iteration/iterate_indexable.py:45
    // for idx, i in reversed(uenumerate(Bytes(b"abc"))):
    int 3

test_reverse_with_reverse_index_for_header@1:
    // iteration/iterate_indexable.py:45
    // for idx, i in reversed(uenumerate(Bytes(b"abc"))):
    frame_dig 0
    bz test_reverse_with_reverse_index_after_for@4
    frame_dig 0
    int 1
    -
    byte 0x616263
    dig 1
    int 1
    extract3
    // iteration/iterate_indexable.py:46
    // self._log_with_index(idx, i)
    dig 1
    swap
    callsub _log_with_index
    frame_bury 0
    b test_reverse_with_reverse_index_for_header@1

test_reverse_with_reverse_index_after_for@4:
    retsub


// test_cases.iteration.iterate_indexable.IndexableIterationTest.test_empty() -> void:
test_empty:
    // iteration/iterate_indexable.py:49-51
    // @typing.override
    // @subroutine
    // def test_empty(self) -> None:
    proto 0 0
    byte ""
    dupn 5
    int 0

test_empty_for_header@1:
    // iteration/iterate_indexable.py:52
    // for i in Bytes():
    frame_dig 6
    int 0
    <
    bz test_empty_after_for@4
    byte 0x
    frame_dig 6
    dup
    cover 2
    int 1
    extract3
    // iteration/iterate_indexable.py:53
    // log(i)
    log
    int 1
    +
    frame_bury 6
    b test_empty_for_header@1

test_empty_after_for@4:
    // iteration/iterate_indexable.py:54
    // for i in reversed(Bytes()):
    int 0
    frame_bury 2

test_empty_for_header@5:
    // iteration/iterate_indexable.py:54
    // for i in reversed(Bytes()):
    frame_dig 2
    bz test_empty_after_for@8
    frame_dig 2
    int 1
    -
    dup
    frame_bury 2
    byte 0x
    swap
    int 1
    extract3
    // iteration/iterate_indexable.py:55
    // log(i)
    log
    b test_empty_for_header@5

test_empty_after_for@8:
    int 0
    frame_bury 0

test_empty_for_header@9:
    // iteration/iterate_indexable.py:56
    // for idx, i in uenumerate(Bytes()):
    frame_dig 0
    int 0
    <
    bz test_empty_after_for@12
    byte 0x
    frame_dig 0
    dup
    cover 2
    int 1
    extract3
    // iteration/iterate_indexable.py:57
    // self._log_with_index(idx, i)
    dig 1
    swap
    callsub _log_with_index
    int 1
    +
    frame_bury 0
    b test_empty_for_header@9

test_empty_after_for@12:
    // iteration/iterate_indexable.py:58
    // for idx, i in reversed(uenumerate(reversed(Bytes()))):
    int 0
    dup
    frame_bury 1
    frame_bury 3

test_empty_for_header@13:
    // iteration/iterate_indexable.py:58
    // for idx, i in reversed(uenumerate(reversed(Bytes()))):
    frame_dig 3
    bz test_empty_after_for@16
    frame_dig 3
    int 1
    -
    byte 0x
    frame_dig 1
    dup
    cover 3
    int 1
    extract3
    // iteration/iterate_indexable.py:59
    // self._log_with_index(idx, i)
    dig 1
    swap
    callsub _log_with_index
    swap
    int 1
    +
    frame_bury 1
    frame_bury 3
    b test_empty_for_header@13

test_empty_after_for@16:
    int 0
    // iteration/iterate_indexable.py:60
    // for idx, i in uenumerate(reversed(Bytes())):
    dup
    frame_bury 4
    frame_bury 0

test_empty_for_header@17:
    // iteration/iterate_indexable.py:60
    // for idx, i in uenumerate(reversed(Bytes())):
    frame_dig 4
    bz test_empty_after_for@20
    frame_dig 4
    int 1
    -
    dup
    frame_bury 4
    byte 0x
    swap
    int 1
    extract3
    // iteration/iterate_indexable.py:61
    // self._log_with_index(idx, i)
    frame_dig 0
    dup
    uncover 2
    callsub _log_with_index
    int 1
    +
    frame_bury 0
    b test_empty_for_header@17

test_empty_after_for@20:
    // iteration/iterate_indexable.py:62
    // for idx, i in reversed(uenumerate(Bytes())):
    int 0
    frame_bury 5

test_empty_for_header@21:
    // iteration/iterate_indexable.py:62
    // for idx, i in reversed(uenumerate(Bytes())):
    frame_dig 5
    bz test_empty_after_for@24
    frame_dig 5
    int 1
    -
    byte 0x
    dig 1
    int 1
    extract3
    // iteration/iterate_indexable.py:63
    // self._log_with_index(idx, i)
    dig 1
    swap
    callsub _log_with_index
    frame_bury 5
    b test_empty_for_header@21

test_empty_after_for@24:
    retsub


// test_cases.iteration.iterate_indexable.IndexableIterationTest.test_break() -> void:
test_break:
    // iteration/iterate_indexable.py:65-67
    // @typing.override
    // @subroutine
    // def test_break(self) -> None:
    proto 0 0
    // iteration/iterate_indexable.py:68
    // for b in Bytes(b"abc"):
    byte 0x61
    // iteration/iterate_indexable.py:69
    // log(b)
    log
    retsub


// test_cases.iteration.iterate_indexable.IndexableIterationTest.test_tuple_target() -> void:
test_tuple_target:
    // iteration/iterate_indexable.py:72-74
    // @typing.override
    // @subroutine
    // def test_tuple_target(self) -> None:
    proto 0 0
    int 0

test_tuple_target_for_header@1:
    // iteration/iterate_indexable.py:75
    // for tup in uenumerate(Bytes(b"t")):
    frame_dig 0
    int 1
    <
    bz test_tuple_target_after_for@4
    byte 0x74
    frame_dig 0
    dup
    cover 2
    int 1
    extract3
    // iteration/iterate_indexable.py:76
    // self._log_with_index(tup[0], tup[1])
    dig 1
    swap
    callsub _log_with_index
    int 1
    +
    frame_bury 0
    b test_tuple_target_for_header@1

test_tuple_target_after_for@4:
    retsub
