#pragma version 10
#pragma typetrack false

// test_cases.iteration.base.IterationTestBase.approval_program() -> uint64:
main:
    intcblock 1 0 3
    bytecblock 0x 0x616263
    bytec_0 // ""
    dupn 7
    // iteration/base.py:8
    // log("test_forwards")
    pushbytes "test_forwards"
    log
    intc_1 // 0

for_header@2:
    // iteration/iterate_indexable.py:12
    // for i in Bytes(b"abc"):
    dup
    intc_2 // 3
    <
    bz after_for@5
    bytec_1 // 0x616263
    dig 1
    dup
    cover 2
    intc_0 // 1
    extract3
    // iteration/iterate_indexable.py:13
    // log(i)
    log
    intc_0 // 1
    +
    bury 1
    b for_header@2

after_for@5:
    // iteration/base.py:10
    // log("test_reversed")
    pushbytes "test_reversed"
    log
    // iteration/iterate_indexable.py:18
    // for i in reversed(Bytes(b"abc")):
    intc_2 // 3
    bury 7

for_header@8:
    // iteration/iterate_indexable.py:18
    // for i in reversed(Bytes(b"abc")):
    dig 6
    bz after_for@11
    dig 6
    intc_0 // 1
    -
    dup
    bury 8
    bytec_1 // 0x616263
    swap
    intc_0 // 1
    extract3
    // iteration/iterate_indexable.py:19
    // log(i)
    log
    b for_header@8

after_for@11:
    // iteration/base.py:12
    // log("test_forwards_with_forwards_index")
    pushbytes "test_forwards_with_forwards_index"
    log
    intc_1 // 0
    bury 9

for_header@14:
    // iteration/iterate_indexable.py:24
    // for idx, i in uenumerate(Bytes(b"abc")):
    dig 8
    intc_2 // 3
    <
    bz after_for@17
    bytec_1 // 0x616263
    dig 9
    dup
    cover 2
    intc_0 // 1
    extract3
    // iteration/iterate_indexable.py:25
    // self._log_with_index(idx, i)
    dig 1
    swap
    callsub _log_with_index
    intc_0 // 1
    +
    bury 9
    b for_header@14

after_for@17:
    // iteration/base.py:14
    // log("test_forwards_with_reverse_index")
    pushbytes "test_forwards_with_reverse_index"
    log
    // iteration/iterate_indexable.py:31
    // for idx, i in reversed(uenumerate(reversed(Bytes(b"abc")))):
    intc_2 // 3
    intc_1 // 0
    bury 2
    bury 7

for_header@20:
    // iteration/iterate_indexable.py:31
    // for idx, i in reversed(uenumerate(reversed(Bytes(b"abc")))):
    dig 6
    bz after_for@23
    dig 6
    intc_0 // 1
    -
    bytec_1 // 0x616263
    dig 2
    dup
    cover 3
    intc_0 // 1
    extract3
    // iteration/iterate_indexable.py:32
    // self._log_with_index(idx, i)
    dig 1
    swap
    callsub _log_with_index
    swap
    intc_0 // 1
    +
    bury 2
    bury 7
    b for_header@20

after_for@23:
    // iteration/base.py:16
    // log("test_reverse_with_forwards_index")
    pushbytes "test_reverse_with_forwards_index"
    log
    intc_1 // 0
    // iteration/iterate_indexable.py:38
    // for idx, i in uenumerate(reversed(Bytes(b"abc"))):
    intc_2 // 3
    bury 8
    bury 9

for_header@26:
    // iteration/iterate_indexable.py:38
    // for idx, i in uenumerate(reversed(Bytes(b"abc"))):
    dig 6
    bz after_for@29
    dig 6
    intc_0 // 1
    -
    dup
    bury 8
    bytec_1 // 0x616263
    swap
    intc_0 // 1
    extract3
    // iteration/iterate_indexable.py:39
    // self._log_with_index(idx, i)
    dig 9
    dup
    uncover 2
    callsub _log_with_index
    intc_0 // 1
    +
    bury 9
    b for_header@26

after_for@29:
    // iteration/base.py:18
    // log("test_reverse_with_reverse_index")
    pushbytes "test_reverse_with_reverse_index"
    log
    // iteration/iterate_indexable.py:45
    // for idx, i in reversed(uenumerate(Bytes(b"abc"))):
    intc_2 // 3
    bury 7

for_header@32:
    // iteration/iterate_indexable.py:45
    // for idx, i in reversed(uenumerate(Bytes(b"abc"))):
    dig 6
    bz after_for@35
    dig 6
    intc_0 // 1
    -
    bytec_1 // 0x616263
    dig 1
    intc_0 // 1
    extract3
    // iteration/iterate_indexable.py:46
    // self._log_with_index(idx, i)
    dig 1
    swap
    callsub _log_with_index
    bury 7
    b for_header@32

after_for@35:
    // iteration/base.py:20
    // log("test_empty")
    pushbytes "test_empty"
    log
    intc_1 // 0
    bury 1

for_header@38:
    // iteration/iterate_indexable.py:52
    // for i in Bytes():
    dup
    intc_1 // 0
    <
    bz after_for@41
    bytec_0 // 0x
    dig 1
    dup
    cover 2
    intc_0 // 1
    extract3
    // iteration/iterate_indexable.py:53
    // log(i)
    log
    intc_0 // 1
    +
    bury 1
    b for_header@38

after_for@41:
    // iteration/iterate_indexable.py:54
    // for i in reversed(Bytes()):
    intc_1 // 0
    bury 6

for_header@42:
    // iteration/iterate_indexable.py:54
    // for i in reversed(Bytes()):
    dig 5
    bz after_for@45
    dig 5
    intc_0 // 1
    -
    dup
    bury 7
    bytec_0 // 0x
    swap
    intc_0 // 1
    extract3
    // iteration/iterate_indexable.py:55
    // log(i)
    log
    b for_header@42

after_for@45:
    intc_1 // 0
    bury 9

for_header@46:
    // iteration/iterate_indexable.py:56
    // for idx, i in uenumerate(Bytes()):
    dig 8
    intc_1 // 0
    <
    bz after_for@49
    bytec_0 // 0x
    dig 9
    dup
    cover 2
    intc_0 // 1
    extract3
    // iteration/iterate_indexable.py:57
    // self._log_with_index(idx, i)
    dig 1
    swap
    callsub _log_with_index
    intc_0 // 1
    +
    bury 9
    b for_header@46

after_for@49:
    // iteration/iterate_indexable.py:58
    // for idx, i in reversed(uenumerate(reversed(Bytes()))):
    intc_1 // 0
    dup
    bury 9
    bury 5

for_header@50:
    // iteration/iterate_indexable.py:58
    // for idx, i in reversed(uenumerate(reversed(Bytes()))):
    dig 4
    bz after_for@53
    dig 4
    intc_0 // 1
    -
    bytec_0 // 0x
    dig 9
    dup
    cover 3
    intc_0 // 1
    extract3
    // iteration/iterate_indexable.py:59
    // self._log_with_index(idx, i)
    dig 1
    swap
    callsub _log_with_index
    swap
    intc_0 // 1
    +
    bury 9
    bury 5
    b for_header@50

after_for@53:
    intc_1 // 0
    // iteration/iterate_indexable.py:60
    // for idx, i in uenumerate(reversed(Bytes())):
    dup
    bury 5
    bury 9

for_header@54:
    // iteration/iterate_indexable.py:60
    // for idx, i in uenumerate(reversed(Bytes())):
    dig 3
    bz after_for@57
    dig 3
    intc_0 // 1
    -
    dup
    bury 5
    bytec_0 // 0x
    swap
    intc_0 // 1
    extract3
    // iteration/iterate_indexable.py:61
    // self._log_with_index(idx, i)
    dig 9
    dup
    uncover 2
    callsub _log_with_index
    intc_0 // 1
    +
    bury 9
    b for_header@54

after_for@57:
    // iteration/iterate_indexable.py:62
    // for idx, i in reversed(uenumerate(Bytes())):
    intc_1 // 0
    bury 3

for_header@58:
    // iteration/iterate_indexable.py:62
    // for idx, i in reversed(uenumerate(Bytes())):
    dig 2
    bz after_for@61
    dig 2
    intc_0 // 1
    -
    bytec_0 // 0x
    dig 1
    intc_0 // 1
    extract3
    // iteration/iterate_indexable.py:63
    // self._log_with_index(idx, i)
    dig 1
    swap
    callsub _log_with_index
    bury 3
    b for_header@58

after_for@61:
    // iteration/base.py:22
    // log("test_break")
    pushbytes "test_break"
    log
    // iteration/iterate_indexable.py:68
    // for b in Bytes(b"abc"):
    pushbytes 0x61
    // iteration/iterate_indexable.py:69
    // log(b)
    log
    // iteration/base.py:24
    // log("test_tuple_target")
    pushbytes "test_tuple_target"
    log
    intc_1 // 0
    bury 2

for_header@69:
    // iteration/iterate_indexable.py:75
    // for tup in uenumerate(Bytes(b"t")):
    dig 1
    intc_0 // 1
    <
    bz after_for@72
    pushbytes 0x74
    dig 2
    dup
    cover 2
    intc_0 // 1
    extract3
    // iteration/iterate_indexable.py:76
    // self._log_with_index(tup[0], tup[1])
    dig 1
    swap
    callsub _log_with_index
    intc_0 // 1
    +
    bury 2
    b for_header@69

after_for@72:
    // iteration/base.py:26
    // return True
    intc_0 // 1
    return


// test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
_log_with_index:
    // iteration/base.py:31-32
    // @subroutine
    // def _log_with_index(self, idx: UInt64, value: Bytes) -> None:
    proto 2 0
    // iteration/base.py:33
    // digits = Bytes(b"0123456789")
    pushbytes 0x30313233343536373839
    // iteration/base.py:34
    // log(digits[idx], value, sep="=")
    frame_dig -2
    intc_0 // 1
    extract3
    pushbytes "="
    concat
    frame_dig -1
    concat
    log
    retsub
