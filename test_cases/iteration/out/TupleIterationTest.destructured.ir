contract test_cases.iteration.iterate_tuple.TupleIterationTest:
    program approval:
        subroutine test_cases.iteration.base.IterationTestBase.approval_program() -> bool:
            block@0: // L7
                (log "test_forwards")
                test_cases.iteration.iterate_tuple.TupleIterationTest.test_forwards()
                (log "test_reversed")
                test_cases.iteration.iterate_tuple.TupleIterationTest.test_reversed()
                (log "test_forwards_with_forwards_index")
                test_cases.iteration.iterate_tuple.TupleIterationTest.test_forwards_with_forwards_index()
                (log "test_forwards_with_reverse_index")
                test_cases.iteration.iterate_tuple.TupleIterationTest.test_forwards_with_reverse_index()
                (log "test_reverse_with_forwards_index")
                test_cases.iteration.iterate_tuple.TupleIterationTest.test_reverse_with_forwards_index()
                (log "test_reverse_with_reverse_index")
                test_cases.iteration.iterate_tuple.TupleIterationTest.test_reverse_with_reverse_index()
                (log "test_empty")
                test_cases.iteration.iterate_tuple.TupleIterationTest.test_empty()
                (log "test_break")
                test_cases.iteration.iterate_tuple.TupleIterationTest.test_break()
                return 1u
        
        subroutine test_cases.iteration.iterate_tuple.TupleIterationTest.test_forwards() -> void:
            block@0: // L9
                let tuple_index%0#0: uint64 = 0u
                let i#0: bytes = 0x61
                goto block@1
            block@1: // for_body_L12
                (log i#0)
                let tuple_index%0#2: uint64 = (+ tuple_index%0#0 1u)
                goto_nth [block@3, block@4][tuple_index%0#0] else return 
            block@3: // for_header_1_L12
                let i#0: bytes = 0x62
                let tuple_index%0#0: uint64 = tuple_index%0#2
                goto block@1
            block@4: // for_header_2_L12
                let i#0: bytes = 0x63
                let tuple_index%0#0: uint64 = tuple_index%0#2
                goto block@1
        
        subroutine test_cases.iteration.iterate_tuple.TupleIterationTest.test_reversed() -> void:
            block@0: // L15
                let tuple_index%0#0: uint64 = 0u
                let i#0: bytes = 0x63
                goto block@1
            block@1: // for_body_L18
                (log i#0)
                let tuple_index%0#2: uint64 = (+ tuple_index%0#0 1u)
                goto_nth [block@3, block@4][tuple_index%0#0] else return 
            block@3: // for_header_1_L18
                let i#0: bytes = 0x62
                let tuple_index%0#0: uint64 = tuple_index%0#2
                goto block@1
            block@4: // for_header_0_L18
                let i#0: bytes = 0x61
                let tuple_index%0#0: uint64 = tuple_index%0#2
                goto block@1
        
        subroutine test_cases.iteration.iterate_tuple.TupleIterationTest.test_forwards_with_forwards_index() -> void:
            block@0: // L21
                let tuple_index%0#0: uint64 = 0u
                let i#0: bytes = 0x61
                let idx#0: uint64 = tuple_index%0#0
                goto block@1
            block@1: // for_body_L24
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
                let tuple_index%0#0: uint64 = (+ idx#0 1u)
                goto_nth [block@3, block@4][idx#0] else return 
            block@3: // for_header_1_L24
                let i#0: bytes = 0x62
                let idx#0: uint64 = tuple_index%0#0
                goto block@1
            block@4: // for_header_2_L24
                let i#0: bytes = 0x63
                let idx#0: uint64 = tuple_index%0#0
                goto block@1
        
        subroutine test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
            block@0: // L29
                let index_plus_1%0#0: uint64 = (+ idx#0 1u)
                let tmp%0#0: bytes = (substring3 0x30313233343536373839 idx#0 index_plus_1%0#0)
                let tmp%1#0: bytes = (concat tmp%0#0 "=")
                let tmp%2#0: bytes = (concat tmp%1#0 value#0)
                (log tmp%2#0)
                return 
        
        subroutine test_cases.iteration.iterate_tuple.TupleIterationTest.test_forwards_with_reverse_index() -> void:
            block@0: // L27
                let tuple_index%0#0: uint64 = 0u
                let i#0: bytes = 0x61
                goto block@1
            block@1: // for_body_L30
                let idx#0: uint64 = (- 2u tuple_index%0#0)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
                let tuple_index%0#2: uint64 = (+ tuple_index%0#0 1u)
                goto_nth [block@3, block@4][tuple_index%0#0] else return 
            block@3: // for_header_1_L30
                let i#0: bytes = 0x62
                let tuple_index%0#0: uint64 = tuple_index%0#2
                goto block@1
            block@4: // for_header_2_L30
                let i#0: bytes = 0x63
                let tuple_index%0#0: uint64 = tuple_index%0#2
                goto block@1
        
        subroutine test_cases.iteration.iterate_tuple.TupleIterationTest.test_reverse_with_forwards_index() -> void:
            block@0: // L33
                let tuple_index%0#0: uint64 = 0u
                let i#0: bytes = 0x63
                let idx#0: uint64 = tuple_index%0#0
                goto block@1
            block@1: // for_body_L36
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
                let tuple_index%0#0: uint64 = (+ idx#0 1u)
                goto_nth [block@3, block@4][idx#0] else return 
            block@3: // for_header_1_L36
                let i#0: bytes = 0x62
                let idx#0: uint64 = tuple_index%0#0
                goto block@1
            block@4: // for_header_0_L36
                let i#0: bytes = 0x61
                let idx#0: uint64 = tuple_index%0#0
                goto block@1
        
        subroutine test_cases.iteration.iterate_tuple.TupleIterationTest.test_reverse_with_reverse_index() -> void:
            block@0: // L39
                let tuple_index%0#0: uint64 = 0u
                let i#0: bytes = 0x63
                goto block@1
            block@1: // for_body_L42
                let idx#0: uint64 = (- 2u tuple_index%0#0)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
                let tuple_index%0#2: uint64 = (+ tuple_index%0#0 1u)
                goto_nth [block@3, block@4][tuple_index%0#0] else return 
            block@3: // for_header_1_L42
                let i#0: bytes = 0x62
                let tuple_index%0#0: uint64 = tuple_index%0#2
                goto block@1
            block@4: // for_header_0_L42
                let i#0: bytes = 0x61
                let tuple_index%0#0: uint64 = tuple_index%0#2
                goto block@1
        
        subroutine test_cases.iteration.iterate_tuple.TupleIterationTest.test_empty() -> void:
            block@0: // L45
                return 
        
        subroutine test_cases.iteration.iterate_tuple.TupleIterationTest.test_break() -> void:
            block@0: // L67
                (log 0x61)
                return 
    
    program clear-state:
        subroutine test_cases.iteration.base.IterationTestBase.clear_state_program() -> bool:
            block@0: // L26
                return 1u