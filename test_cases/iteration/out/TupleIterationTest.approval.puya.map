{
  "version": 3,
  "sources": [
    "../base.py",
    "../iterate_tuple.py"
  ],
  "mappings": ";;;;;;;;;;;;;;AAOY;;;;;;;;;;;;;;;AAAJ;ACIU;;AACN;AAAA;AADZ;;;;;;ADFY;;;;;;;;;;;;;;;AAAJ;ACQ6C;;AACzC;AAAA;AADZ;;;;;;ADNY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;;ACY0B;AACtB;AAAA;AAAA;;AAAA;;;AADZ;;;;;;ADVY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;;ACiB4C;;AACxC;;AAAA;;;AADZ;;;;;;ADfY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;;ACsB6D;AACzD;AAAA;AAAA;;AAAA;;;AADZ;;;;;;ADpBY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;;AC2B6D;;AACzD;;AAAA;;;AADZ;;;;;;ADzBY;;;;;;;;;;;;AAAJ;AAEI;;;;;;;;;;;;AAAJ;ACoDU;AACN;ADnDA;;;;;;;;;;;;;;;;;;;AAAJ;;ACyDuB;;;AACnB;;;ADxDG;AAAP;;ACmBmC;;;;;;AAAa;;;;;;AAPb;;;;;AAAa;;;;;AAPsB;;;;;;AAAb;;;;;;AAPL;;;;;AAAb;;;;AANpB;;;;;AAAa;;;;;AANI;;;;;AAAb;;;;;ADmB/B;;;AAEiB;;;;;;;;;;;;AACL;;AAAA;AAAA;AAAwB;;;AAAX;AAAA;;AAAA;AAAjB;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.iteration.base.IterationTestBase.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 2"
    },
    "6": {
      "op": "bytecblock 0x61 0x63 0x62"
    },
    "14": {
      "op": "pushbytes \"test_forwards\"",
      "defined_out": [
        "\"test_forwards\""
      ],
      "stack_out": [
        "\"test_forwards\""
      ]
    },
    "29": {
      "op": "log",
      "stack_out": []
    },
    "30": {
      "op": "bytec_0 // 0x61"
    },
    "31": {
      "op": "intc_1 // 0",
      "defined_out": [
        "i#0",
        "loop_counter%0#0"
      ],
      "stack_out": [
        "i#0",
        "loop_counter%0#0"
      ]
    },
    "32": {
      "block": "main_for_body@2",
      "stack_in": [
        "i#0",
        "loop_counter%0#0"
      ],
      "op": "swap",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "i#0"
      ]
    },
    "33": {
      "op": "log",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "loop_counter%0#0"
      ]
    },
    "34": {
      "op": "switch main_for_header_1@4 main_for_header_2@5",
      "stack_out": []
    },
    "40": {
      "op": "pushbytes \"test_reversed\"",
      "defined_out": [
        "\"test_reversed\""
      ],
      "stack_out": [
        "\"test_reversed\""
      ]
    },
    "55": {
      "op": "log",
      "stack_out": []
    },
    "56": {
      "op": "bytec_1 // 0x63"
    },
    "57": {
      "op": "intc_1 // 0",
      "defined_out": [
        "i#0",
        "loop_counter%0#0"
      ],
      "stack_out": [
        "i#0",
        "loop_counter%0#0"
      ]
    },
    "58": {
      "block": "main_for_body@9",
      "stack_in": [
        "i#0",
        "loop_counter%0#0"
      ],
      "op": "swap",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "i#0"
      ]
    },
    "59": {
      "op": "log",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "loop_counter%0#0"
      ]
    },
    "60": {
      "op": "switch main_for_header_1@11 main_for_header_2@12",
      "stack_out": []
    },
    "66": {
      "op": "pushbytes \"test_forwards_with_forwards_index\"",
      "defined_out": [
        "\"test_forwards_with_forwards_index\""
      ],
      "stack_out": [
        "\"test_forwards_with_forwards_index\""
      ]
    },
    "101": {
      "op": "log",
      "stack_out": []
    },
    "102": {
      "op": "intc_1 // 0"
    },
    "103": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "i#0",
        "idx#0"
      ],
      "stack_out": [
        "idx#0",
        "i#0"
      ]
    },
    "104": {
      "block": "main_for_body@16",
      "stack_in": [
        "idx#0",
        "i#0"
      ],
      "op": "swap",
      "defined_out": [
        "idx#0"
      ],
      "stack_out": [
        "i#0",
        "idx#0"
      ]
    },
    "105": {
      "op": "dup",
      "defined_out": [
        "idx#0",
        "idx#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "idx#0",
        "idx#0 (copy)"
      ]
    },
    "106": {
      "op": "uncover 2",
      "defined_out": [
        "i#0",
        "idx#0",
        "idx#0 (copy)"
      ],
      "stack_out": [
        "idx#0",
        "idx#0 (copy)",
        "i#0"
      ]
    },
    "108": {
      "callsub": "test_cases.iteration.base.IterationTestBase._log_with_index",
      "op": "callsub _log_with_index",
      "stack_out": [
        "idx#0"
      ]
    },
    "111": {
      "op": "switch main_for_header_1@18 main_for_header_2@19",
      "stack_out": []
    },
    "117": {
      "op": "pushbytes \"test_forwards_with_reverse_index\"",
      "defined_out": [
        "\"test_forwards_with_reverse_index\""
      ],
      "stack_out": [
        "\"test_forwards_with_reverse_index\""
      ]
    },
    "151": {
      "op": "log",
      "stack_out": []
    },
    "152": {
      "op": "intc_2 // 2"
    },
    "153": {
      "op": "bytec_0 // 0x61"
    },
    "154": {
      "op": "intc_1 // 0",
      "defined_out": [
        "i#0",
        "idx#0",
        "loop_counter%0#0"
      ],
      "stack_out": [
        "idx#0",
        "i#0",
        "loop_counter%0#0"
      ]
    },
    "155": {
      "block": "main_for_body@23",
      "stack_in": [
        "idx#0",
        "i#0",
        "loop_counter%0#0"
      ],
      "op": "cover 2",
      "defined_out": [
        "i#0",
        "idx#0"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "idx#0",
        "i#0"
      ]
    },
    "157": {
      "callsub": "test_cases.iteration.base.IterationTestBase._log_with_index",
      "op": "callsub _log_with_index",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "loop_counter%0#0"
      ]
    },
    "160": {
      "op": "switch main_for_header_1@25 main_for_header_2@26",
      "stack_out": []
    },
    "166": {
      "op": "pushbytes \"test_reverse_with_forwards_index\"",
      "defined_out": [
        "\"test_reverse_with_forwards_index\""
      ],
      "stack_out": [
        "\"test_reverse_with_forwards_index\""
      ]
    },
    "200": {
      "op": "log",
      "stack_out": []
    },
    "201": {
      "op": "intc_1 // 0"
    },
    "202": {
      "op": "bytec_1 // 0x63",
      "defined_out": [
        "i#0",
        "idx#0"
      ],
      "stack_out": [
        "idx#0",
        "i#0"
      ]
    },
    "203": {
      "block": "main_for_body@30",
      "stack_in": [
        "idx#0",
        "i#0"
      ],
      "op": "swap",
      "defined_out": [
        "idx#0"
      ],
      "stack_out": [
        "i#0",
        "idx#0"
      ]
    },
    "204": {
      "op": "dup",
      "defined_out": [
        "idx#0",
        "idx#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "idx#0",
        "idx#0 (copy)"
      ]
    },
    "205": {
      "op": "uncover 2",
      "defined_out": [
        "i#0",
        "idx#0",
        "idx#0 (copy)"
      ],
      "stack_out": [
        "idx#0",
        "idx#0 (copy)",
        "i#0"
      ]
    },
    "207": {
      "callsub": "test_cases.iteration.base.IterationTestBase._log_with_index",
      "op": "callsub _log_with_index",
      "stack_out": [
        "idx#0"
      ]
    },
    "210": {
      "op": "switch main_for_header_1@32 main_for_header_2@33",
      "stack_out": []
    },
    "216": {
      "op": "pushbytes \"test_reverse_with_reverse_index\"",
      "defined_out": [
        "\"test_reverse_with_reverse_index\""
      ],
      "stack_out": [
        "\"test_reverse_with_reverse_index\""
      ]
    },
    "249": {
      "op": "log",
      "stack_out": []
    },
    "250": {
      "op": "intc_2 // 2"
    },
    "251": {
      "op": "bytec_1 // 0x63"
    },
    "252": {
      "op": "intc_1 // 0",
      "defined_out": [
        "i#0",
        "idx#0",
        "loop_counter%0#0"
      ],
      "stack_out": [
        "idx#0",
        "i#0",
        "loop_counter%0#0"
      ]
    },
    "253": {
      "block": "main_for_body@37",
      "stack_in": [
        "idx#0",
        "i#0",
        "loop_counter%0#0"
      ],
      "op": "cover 2",
      "defined_out": [
        "i#0",
        "idx#0"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "idx#0",
        "i#0"
      ]
    },
    "255": {
      "callsub": "test_cases.iteration.base.IterationTestBase._log_with_index",
      "op": "callsub _log_with_index",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "loop_counter%0#0"
      ]
    },
    "258": {
      "op": "switch main_for_header_1@39 main_for_header_2@40",
      "stack_out": []
    },
    "264": {
      "op": "pushbytes \"test_empty\"",
      "defined_out": [
        "\"test_empty\""
      ],
      "stack_out": [
        "\"test_empty\""
      ]
    },
    "276": {
      "op": "log",
      "stack_out": []
    },
    "277": {
      "op": "pushbytes \"test_break\"",
      "defined_out": [
        "\"test_break\""
      ],
      "stack_out": [
        "\"test_break\""
      ]
    },
    "289": {
      "op": "log",
      "stack_out": []
    },
    "290": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "0x61"
      ],
      "stack_out": [
        "0x61"
      ]
    },
    "291": {
      "op": "log",
      "stack_out": []
    },
    "292": {
      "op": "pushbytes \"test_tuple_target\"",
      "defined_out": [
        "\"test_tuple_target\""
      ],
      "stack_out": [
        "\"test_tuple_target\""
      ]
    },
    "311": {
      "op": "log",
      "stack_out": []
    },
    "312": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "313": {
      "op": "pushbytes 0x74",
      "defined_out": [
        "0",
        "0x74"
      ],
      "stack_out": [
        "0",
        "0x74"
      ]
    },
    "316": {
      "callsub": "test_cases.iteration.base.IterationTestBase._log_with_index",
      "op": "callsub _log_with_index",
      "stack_out": []
    },
    "319": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "320": {
      "op": "return",
      "stack_out": []
    },
    "321": {
      "block": "main_for_header_2@40",
      "stack_in": [],
      "op": "intc_1 // 0"
    },
    "322": {
      "op": "bytec_0 // 0x61"
    },
    "323": {
      "op": "intc_2 // 2",
      "defined_out": [
        "i#0",
        "idx#0",
        "loop_counter%0#0"
      ],
      "stack_out": [
        "idx#0",
        "i#0",
        "loop_counter%0#0"
      ]
    },
    "324": {
      "op": "b main_for_body@37"
    },
    "327": {
      "block": "main_for_header_1@39",
      "stack_in": [],
      "op": "intc_0 // 1"
    },
    "328": {
      "op": "bytec_2 // 0x62"
    },
    "329": {
      "op": "intc_0 // 1",
      "defined_out": [
        "i#0",
        "idx#0",
        "loop_counter%0#0"
      ],
      "stack_out": [
        "idx#0",
        "i#0",
        "loop_counter%0#0"
      ]
    },
    "330": {
      "op": "b main_for_body@37"
    },
    "333": {
      "block": "main_for_header_2@33",
      "stack_in": [],
      "op": "intc_2 // 2"
    },
    "334": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "i#0",
        "idx#0"
      ],
      "stack_out": [
        "idx#0",
        "i#0"
      ]
    },
    "335": {
      "op": "b main_for_body@30"
    },
    "338": {
      "block": "main_for_header_1@32",
      "stack_in": [],
      "op": "intc_0 // 1"
    },
    "339": {
      "op": "bytec_2 // 0x62",
      "defined_out": [
        "i#0",
        "idx#0"
      ],
      "stack_out": [
        "idx#0",
        "i#0"
      ]
    },
    "340": {
      "op": "b main_for_body@30"
    },
    "343": {
      "block": "main_for_header_2@26",
      "stack_in": [],
      "op": "intc_1 // 0"
    },
    "344": {
      "op": "bytec_1 // 0x63"
    },
    "345": {
      "op": "intc_2 // 2",
      "defined_out": [
        "i#0",
        "idx#0",
        "loop_counter%0#0"
      ],
      "stack_out": [
        "idx#0",
        "i#0",
        "loop_counter%0#0"
      ]
    },
    "346": {
      "op": "b main_for_body@23"
    },
    "349": {
      "block": "main_for_header_1@25",
      "stack_in": [],
      "op": "intc_0 // 1"
    },
    "350": {
      "op": "bytec_2 // 0x62"
    },
    "351": {
      "op": "intc_0 // 1",
      "defined_out": [
        "i#0",
        "idx#0",
        "loop_counter%0#0"
      ],
      "stack_out": [
        "idx#0",
        "i#0",
        "loop_counter%0#0"
      ]
    },
    "352": {
      "op": "b main_for_body@23"
    },
    "355": {
      "block": "main_for_header_2@19",
      "stack_in": [],
      "op": "intc_2 // 2"
    },
    "356": {
      "op": "bytec_1 // 0x63",
      "defined_out": [
        "i#0",
        "idx#0"
      ],
      "stack_out": [
        "idx#0",
        "i#0"
      ]
    },
    "357": {
      "op": "b main_for_body@16"
    },
    "360": {
      "block": "main_for_header_1@18",
      "stack_in": [],
      "op": "intc_0 // 1"
    },
    "361": {
      "op": "bytec_2 // 0x62",
      "defined_out": [
        "i#0",
        "idx#0"
      ],
      "stack_out": [
        "idx#0",
        "i#0"
      ]
    },
    "362": {
      "op": "b main_for_body@16"
    },
    "365": {
      "block": "main_for_header_2@12",
      "stack_in": [],
      "op": "bytec_0 // 0x61"
    },
    "366": {
      "op": "intc_2 // 2",
      "defined_out": [
        "i#0",
        "loop_counter%0#0"
      ],
      "stack_out": [
        "i#0",
        "loop_counter%0#0"
      ]
    },
    "367": {
      "op": "b main_for_body@9"
    },
    "370": {
      "block": "main_for_header_1@11",
      "stack_in": [],
      "op": "bytec_2 // 0x62"
    },
    "371": {
      "op": "intc_0 // 1",
      "defined_out": [
        "i#0",
        "loop_counter%0#0"
      ],
      "stack_out": [
        "i#0",
        "loop_counter%0#0"
      ]
    },
    "372": {
      "op": "b main_for_body@9"
    },
    "375": {
      "block": "main_for_header_2@5",
      "stack_in": [],
      "op": "bytec_1 // 0x63"
    },
    "376": {
      "op": "intc_2 // 2",
      "defined_out": [
        "i#0",
        "loop_counter%0#0"
      ],
      "stack_out": [
        "i#0",
        "loop_counter%0#0"
      ]
    },
    "377": {
      "op": "b main_for_body@2"
    },
    "380": {
      "block": "main_for_header_1@4",
      "stack_in": [],
      "op": "bytec_2 // 0x62"
    },
    "381": {
      "op": "intc_0 // 1",
      "defined_out": [
        "i#0",
        "loop_counter%0#0"
      ],
      "stack_out": [
        "i#0",
        "loop_counter%0#0"
      ]
    },
    "382": {
      "op": "b main_for_body@2"
    },
    "385": {
      "subroutine": "test_cases.iteration.base.IterationTestBase._log_with_index",
      "params": {
        "idx#0": "uint64",
        "value#0": "bytes"
      },
      "block": "_log_with_index",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "388": {
      "op": "pushbytes 0x30313233343536373839",
      "defined_out": [
        "0x30313233343536373839"
      ],
      "stack_out": [
        "0x30313233343536373839"
      ]
    },
    "400": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x30313233343536373839",
        "idx#0 (copy)"
      ],
      "stack_out": [
        "0x30313233343536373839",
        "idx#0 (copy)"
      ]
    },
    "402": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0x30313233343536373839",
        "1",
        "idx#0 (copy)"
      ],
      "stack_out": [
        "0x30313233343536373839",
        "idx#0 (copy)",
        "1"
      ]
    },
    "403": {
      "op": "extract3",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "404": {
      "op": "pushbytes \"=\"",
      "defined_out": [
        "\"=\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"=\""
      ]
    },
    "407": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "408": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%1#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "value#0 (copy)"
      ]
    },
    "410": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "411": {
      "op": "log",
      "stack_out": []
    },
    "412": {
      "retsub": true,
      "op": "retsub"
    }
  }
}