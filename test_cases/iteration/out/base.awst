abstract contract IterationTestBase
{
  approval_program(): bool
  {
    log('test_forwards')
    this::test_forwards()
    log('test_reversed')
    this::test_reversed()
    log('test_forwards_with_forwards_index')
    this::test_forwards_with_forwards_index()
    log('test_forwards_with_reverse_index')
    this::test_forwards_with_reverse_index()
    log('test_reverse_with_forwards_index')
    this::test_reverse_with_forwards_index()
    log('test_reverse_with_reverse_index')
    this::test_reverse_with_reverse_index()
    log('test_empty')
    this::test_empty()
    log('test_break')
    this::test_break()
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
  
  subroutine _log_with_index(idx: uint64, value: bytes): void
  {
    digits: bytes = hex<"30313233343536373839">
    log(concat(concat(digits[idx], '='), value))
  }
}