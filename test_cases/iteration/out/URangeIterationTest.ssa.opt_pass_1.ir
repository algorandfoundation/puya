contract test_cases.iteration.iterate_urange.URangeIterationTest:
    program approval:
        subroutine test_cases.iteration.base.IterationTestBase.approval_program() -> bool:
            block@0: // L7
                (log "test_forwards")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards()
                (log "test_reversed")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_reversed()
                (log "test_forwards_with_forwards_index")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_forwards_index()
                (log "test_forwards_with_reverse_index")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_reverse_index()
                (log "test_reverse_with_forwards_index")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_forwards_index()
                (log "test_reverse_with_reverse_index")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_reverse_index()
                (log "test_empty")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_empty()
                (log "test_break")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_break()
                (log "test_tuple_target")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_tuple_target()
                return 1u
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards() -> void:
            block@0: // L9
                let i#0: uint64 = 1u
                goto block@1
            block@1: // for_header_L13
                let i#1: uint64 = φ(i#0 <- block@0, i#3 <- block@2)
                let continue_looping%0#0: bool = (< i#1 7u)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L14
                let tmp%0#0: bytes = (extract3 0x206120622063 i#1 1u)
                (log tmp%0#0)
                let i#3: uint64 = (+ i#1 2u)
                goto block@1
            block@4: // after_for_L13
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_reversed() -> void:
            block@0: // L17
                let should_loop%0#0: bool = 1u
                goto should_loop%0#0 ? block@1 : block@5
            block@1: // for_header_L21
                let range_length%0#0: uint64 = 6u
                let range_length_minus_one%0#0: uint64 = (- range_length%0#0 1u)
                let iteration_count_minus_one%0#0: uint64 = (/ range_length_minus_one%0#0 2u)
                let range_delta%0#0: uint64 = (* 2u iteration_count_minus_one%0#0)
                let i#0: uint64 = (+ 1u range_delta%0#0)
                goto block@2
            block@2: // for_body_L22
                let i#1: uint64 = φ(i#0 <- block@1, i#3 <- block@4)
                let tmp%0#0: bytes = (extract3 0x206120622063 i#1 1u)
                (log tmp%0#0)
                let continue_looping%0#0: bool = (< 1u i#1)
                goto continue_looping%0#0 ? block@4 : block@5
            block@4: // for_increment_L21
                let i#3: uint64 = (- i#1 2u)
                goto block@2
            block@5: // after_for_L21
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_forwards_index() -> void:
            block@0: // L25
                let i#0: uint64 = 1u
                let idx#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L29
                let i#1: uint64 = φ(i#0 <- block@0, i#3 <- block@2)
                let idx#1: uint64 = φ(idx#0 <- block@0, idx#3 <- block@2)
                let continue_looping%0#0: bool = (< i#1 7u)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L30
                let tmp%0#0: bytes = (extract3 0x206120622063 i#1 1u)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#1, tmp%0#0)
                let i#3: uint64 = (+ i#1 2u)
                let idx#3: uint64 = (+ idx#1 1u)
                goto block@1
            block@4: // after_for_L29
                return 
        
        subroutine test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
            block@0: // L31
                let tmp%0#0: bytes = (extract3 0x30313233343536373839 idx#0 1u)
                let tmp%1#0: bytes = (concat tmp%0#0 "=")
                let tmp%2#0: bytes = (concat tmp%1#0 value#0)
                (log tmp%2#0)
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_reverse_index() -> void:
            block@0: // L34
                let should_loop%0#0: bool = 1u
                goto should_loop%0#0 ? block@1 : block@5
            block@1: // for_header_L38
                let range_length%0#0: uint64 = 6u
                let range_length_minus_one%0#0: uint64 = (- range_length%0#0 1u)
                let idx#0: uint64 = (/ range_length_minus_one%0#0 2u)
                let range_delta%0#0: uint64 = (* 2u idx#0)
                let max_range_item%0#0: uint64 = (+ 1u range_delta%0#0)
                let i#0: uint64 = 1u
                goto block@2
            block@2: // for_body_L39
                let i#1: uint64 = φ(i#0 <- block@1, i#3 <- block@4)
                let idx#1: uint64 = φ(idx#0 <- block@1, idx#3 <- block@4)
                let tmp%0#0: bytes = (extract3 0x206120622063 i#1 1u)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#1, tmp%0#0)
                let continue_looping%0#0: bool = (< i#1 max_range_item%0#0)
                goto continue_looping%0#0 ? block@4 : block@5
            block@4: // for_increment_L38
                let i#3: uint64 = (+ i#1 2u)
                let idx#3: uint64 = (- idx#1 1u)
                goto block@2
            block@5: // after_for_L38
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_forwards_index() -> void:
            block@0: // L43
                let should_loop%0#0: bool = 1u
                goto should_loop%0#0 ? block@1 : block@5
            block@1: // for_header_L47
                let range_length%0#0: uint64 = 6u
                let range_length_minus_one%0#0: uint64 = (- range_length%0#0 1u)
                let iteration_count_minus_one%0#0: uint64 = (/ range_length_minus_one%0#0 2u)
                let range_delta%0#0: uint64 = (* 2u iteration_count_minus_one%0#0)
                let i#0: uint64 = (+ 1u range_delta%0#0)
                let idx#0: uint64 = 0u
                goto block@2
            block@2: // for_body_L48
                let i#1: uint64 = φ(i#0 <- block@1, i#3 <- block@4)
                let idx#1: uint64 = φ(idx#0 <- block@1, idx#3 <- block@4)
                let tmp%0#0: bytes = (extract3 0x206120622063 i#1 1u)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#1, tmp%0#0)
                let continue_looping%0#0: bool = (< 1u i#1)
                goto continue_looping%0#0 ? block@4 : block@5
            block@4: // for_increment_L47
                let i#3: uint64 = (- i#1 2u)
                let idx#3: uint64 = (+ idx#1 1u)
                goto block@2
            block@5: // after_for_L47
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_reverse_index() -> void:
            block@0: // L52
                let should_loop%0#0: bool = 1u
                goto should_loop%0#0 ? block@1 : block@5
            block@1: // for_header_L56
                let range_length%0#0: uint64 = 6u
                let range_length_minus_one%0#0: uint64 = (- range_length%0#0 1u)
                let idx#0: uint64 = (/ range_length_minus_one%0#0 2u)
                let range_delta%0#0: uint64 = (* 2u idx#0)
                let i#0: uint64 = (+ 1u range_delta%0#0)
                goto block@2
            block@2: // for_body_L57
                let i#1: uint64 = φ(i#0 <- block@1, i#3 <- block@4)
                let idx#1: uint64 = φ(idx#0 <- block@1, idx#3 <- block@4)
                let tmp%0#0: bytes = (extract3 0x206120622063 i#1 1u)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#1, tmp%0#0)
                let continue_looping%0#0: bool = (< 1u i#1)
                goto continue_looping%0#0 ? block@4 : block@5
            block@4: // for_increment_L56
                let i#3: uint64 = (- i#1 2u)
                let idx#3: uint64 = (- idx#1 1u)
                goto block@2
            block@5: // after_for_L56
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_empty() -> void:
            block@0: // L61
                let i#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L64
                let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
                let continue_looping%0#0: bool = (< i#1 0u)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L65
                let tmp%0#0: bytes = (itob i#1)
                (log tmp%0#0)
                let i#2: uint64 = (+ i#1 1u)
                goto block@1
            block@4: // after_for_L64
                let should_loop%0#0: bool = 0u
                goto should_loop%0#0 ? block@5 : block@9
            block@5: // for_header_L66
                let range_length%0#0: uint64 = 0u
                let range_length_minus_one%0#0: uint64 = (- range_length%0#0 1u)
                let iteration_count_minus_one%0#0: uint64 = (/ range_length_minus_one%0#0 1u)
                let range_delta%0#0: uint64 = iteration_count_minus_one%0#0
                let i#3: uint64 = range_delta%0#0
                goto block@6
            block@6: // for_body_L67
                let i#4: uint64 = φ(i#3 <- block@5, i#5 <- block@8)
                let tmp%1#0: bytes = (itob i#4)
                (log tmp%1#0)
                goto i#4 ? block@8 : block@9
            block@8: // for_increment_L66
                let i#5: uint64 = (- i#4 1u)
                goto block@6
            block@9: // after_for_L66
                let i#6: uint64 = 0u
                let idx#0: uint64 = 0u
                goto block@10
            block@10: // for_header_L68
                let i#7: uint64 = φ(i#6 <- block@9, i#8 <- block@11)
                let idx#1: uint64 = φ(idx#0 <- block@9, idx#2 <- block@11)
                let continue_looping%2#0: bool = (< i#7 0u)
                goto continue_looping%2#0 ? block@11 : block@13
            block@11: // for_body_L69
                let tmp%2#0: bytes = (itob idx#1)
                let tmp%3#0: bytes = tmp%2#0
                let tmp%4#0: bytes = (itob i#7)
                let tmp%5#0: bytes = (concat tmp%3#0 tmp%4#0)
                (log tmp%5#0)
                let i#8: uint64 = (+ i#7 1u)
                let idx#2: uint64 = (+ idx#1 1u)
                goto block@10
            block@13: // after_for_L68
                let should_loop%1#0: bool = 0u
                goto should_loop%1#0 ? block@14 : block@18
            block@14: // for_header_L70
                let range_length%1#0: uint64 = 0u
                let range_length_minus_one%1#0: uint64 = (- range_length%1#0 1u)
                let idx#3: uint64 = (/ range_length_minus_one%1#0 1u)
                let range_delta%1#0: uint64 = idx#3
                let max_range_item%1#0: uint64 = range_delta%1#0
                let i#9: uint64 = 0u
                goto block@15
            block@15: // for_body_L71
                let i#10: uint64 = φ(i#9 <- block@14, i#11 <- block@17)
                let idx#4: uint64 = φ(idx#3 <- block@14, idx#5 <- block@17)
                let tmp%6#0: bytes = (itob idx#4)
                let tmp%7#0: bytes = tmp%6#0
                let tmp%8#0: bytes = (itob i#10)
                let tmp%9#0: bytes = (concat tmp%7#0 tmp%8#0)
                (log tmp%9#0)
                let continue_looping%3#0: bool = (< i#10 max_range_item%1#0)
                goto continue_looping%3#0 ? block@17 : block@18
            block@17: // for_increment_L70
                let i#11: uint64 = (+ i#10 1u)
                let idx#5: uint64 = (- idx#4 1u)
                goto block@15
            block@18: // after_for_L70
                let should_loop%2#0: bool = 0u
                goto should_loop%2#0 ? block@19 : block@23
            block@19: // for_header_L72
                let range_length%2#0: uint64 = 0u
                let range_length_minus_one%2#0: uint64 = (- range_length%2#0 1u)
                let iteration_count_minus_one%2#0: uint64 = (/ range_length_minus_one%2#0 1u)
                let range_delta%2#0: uint64 = iteration_count_minus_one%2#0
                let i#12: uint64 = range_delta%2#0
                let idx#6: uint64 = 0u
                goto block@20
            block@20: // for_body_L73
                let i#13: uint64 = φ(i#12 <- block@19, i#14 <- block@22)
                let idx#7: uint64 = φ(idx#6 <- block@19, idx#8 <- block@22)
                let tmp%10#0: bytes = (itob idx#7)
                let tmp%11#0: bytes = tmp%10#0
                let tmp%12#0: bytes = (itob i#13)
                let tmp%13#0: bytes = (concat tmp%11#0 tmp%12#0)
                (log tmp%13#0)
                goto i#13 ? block@22 : block@23
            block@22: // for_increment_L72
                let i#14: uint64 = (- i#13 1u)
                let idx#8: uint64 = (+ idx#7 1u)
                goto block@20
            block@23: // after_for_L72
                let should_loop%3#0: bool = 0u
                goto should_loop%3#0 ? block@24 : block@28
            block@24: // for_header_L74
                let range_length%3#0: uint64 = 0u
                let range_length_minus_one%3#0: uint64 = (- range_length%3#0 1u)
                let idx#9: uint64 = (/ range_length_minus_one%3#0 1u)
                let range_delta%3#0: uint64 = idx#9
                let i#15: uint64 = range_delta%3#0
                goto block@25
            block@25: // for_body_L75
                let i#16: uint64 = φ(i#15 <- block@24, i#17 <- block@27)
                let idx#10: uint64 = φ(idx#9 <- block@24, idx#11 <- block@27)
                let tmp%14#0: bytes = (itob idx#10)
                let tmp%15#0: bytes = tmp%14#0
                let tmp%16#0: bytes = (itob i#16)
                let tmp%17#0: bytes = (concat tmp%15#0 tmp%16#0)
                (log tmp%17#0)
                goto i#16 ? block@27 : block@28
            block@27: // for_increment_L74
                let i#17: uint64 = (- i#16 1u)
                let idx#11: uint64 = (- idx#10 1u)
                goto block@25
            block@28: // after_for_L74
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_break() -> void:
            block@0: // L77
                let continue_looping%0#0: bool = 1u
                goto continue_looping%0#0 ? block@2 : block@3
            block@2: // for_body_L82
                let tmp%0#0: bytes = 0x61
                (log tmp%0#0)
                goto block@3
            block@3: // after_for_L81
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_tuple_target() -> void:
            block@0: // L85
                let tup.1#0: uint64 = 0u
                let tup.0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L89
                let tup.1#1: uint64 = φ(tup.1#0 <- block@0, tup.1#2 <- block@2)
                let tup.0#1: uint64 = φ(tup.0#0 <- block@0, tup.0#2 <- block@2)
                let continue_looping%0#0: bool = (< tup.1#1 1u)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L90
                let tmp%0#0: bytes = (extract3 0x74 tup.1#1 1u)
                test_cases.iteration.base.IterationTestBase._log_with_index(tup.0#1, tmp%0#0)
                let tup.1#2: uint64 = (+ tup.1#1 1u)
                let tup.0#2: uint64 = (+ tup.0#1 1u)
                goto block@1
            block@4: // after_for_L89
                return 
    
    program clear-state:
        subroutine test_cases.iteration.base.IterationTestBase.clear_state_program() -> bool:
            block@0: // L28
                return 1u