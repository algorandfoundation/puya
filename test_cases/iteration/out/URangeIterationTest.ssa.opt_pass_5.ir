contract test_cases.iteration.iterate_urange.URangeIterationTest:
    program approval:
        subroutine test_cases.iteration.base.IterationTestBase.approval_program() -> bool:
            block@0: // L7
                (log "test_forwards")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards()
                (log "test_reversed")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_reversed()
                (log "test_forwards_with_forwards_index")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_forwards_index()
                (log "test_forwards_with_reverse_index")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_reverse_index()
                (log "test_reverse_with_forwards_index")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_forwards_index()
                (log "test_reverse_with_reverse_index")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_reverse_index()
                (log "test_empty")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_empty()
                (log "test_break")
                test_cases.iteration.iterate_urange.URangeIterationTest.test_break()
                return 1u
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards() -> void:
            block@0: // L9
                let range_item%0#0: uint64 = 1u
                goto block@1
            block@1: // for_header_L13
                let i#0: uint64 = φ(range_item%0#0 <- block@0, range_item%0#2 <- block@2)
                let continue_looping%0#0: bool = (< i#0 7u)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L14
                let index_plus_1%0#0: uint64 = (+ i#0 1u)
                let tmp%0#0: bytes = (substring3 0x206120622063 i#0 index_plus_1%0#0)
                (log tmp%0#0)
                let range_item%0#2: uint64 = (+ i#0 2u)
                goto block@1
            block@4: // after_for_L13
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_reversed() -> void:
            block@0: // L16
                let max_range_item%0#0: uint64 = 5u
                goto block@2
            block@2: // for_body_L21
                let i#0: uint64 = φ(max_range_item%0#0 <- block@0, range_item%0#2 <- block@4)
                let index_plus_1%0#0: uint64 = (+ i#0 1u)
                let tmp%0#0: bytes = (substring3 0x206120622063 i#0 index_plus_1%0#0)
                (log tmp%0#0)
                let continue_looping%0#0: bool = (< 1u i#0)
                goto continue_looping%0#0 ? block@4 : block@5
            block@4: // for_increment_L20
                let range_item%0#2: uint64 = (- i#0 2u)
                goto block@2
            block@5: // after_for_L20
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_forwards_index() -> void:
            block@0: // L23
                let range_item%0#0: uint64 = 1u
                let range_index%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L27
                let i#0: uint64 = φ(range_item%0#0 <- block@0, range_item%0#2 <- block@2)
                let idx#0: uint64 = φ(range_index%0#0 <- block@0, range_index%0#2 <- block@2)
                let continue_looping%0#0: bool = (< i#0 7u)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L28
                let index_plus_1%0#0: uint64 = (+ i#0 1u)
                let tmp%0#0: bytes = (substring3 0x206120622063 i#0 index_plus_1%0#0)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, tmp%0#0)
                let range_item%0#2: uint64 = (+ i#0 2u)
                let range_index%0#2: uint64 = (+ idx#0 1u)
                goto block@1
            block@4: // after_for_L27
                return 
        
        subroutine test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
            block@0: // L29
                let index_plus_1%0#0: uint64 = (+ idx#0 1u)
                let tmp%0#0: bytes = (substring3 0x30313233343536373839 idx#0 index_plus_1%0#0)
                let tmp%1#0: bytes = (concat tmp%0#0 "=")
                let tmp%2#0: bytes = (concat tmp%1#0 value#0)
                (log tmp%2#0)
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_reverse_index() -> void:
            block@0: // L30
                let iteration_count_minus_one%0#0: uint64 = 2u
                let max_range_item%0#0: uint64 = 5u
                let range_item%0#0: uint64 = 1u
                goto block@2
            block@2: // for_body_L35
                let i#0: uint64 = φ(range_item%0#0 <- block@0, range_item%0#2 <- block@4)
                let idx#0: uint64 = φ(iteration_count_minus_one%0#0 <- block@0, range_index%0#2 <- block@4)
                let index_plus_1%0#0: uint64 = (+ i#0 1u)
                let tmp%0#0: bytes = (substring3 0x206120622063 i#0 index_plus_1%0#0)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, tmp%0#0)
                let continue_looping%0#0: bool = (< i#0 max_range_item%0#0)
                goto continue_looping%0#0 ? block@4 : block@5
            block@4: // for_increment_L34
                let range_item%0#2: uint64 = (+ i#0 2u)
                let range_index%0#2: uint64 = (- idx#0 1u)
                goto block@2
            block@5: // after_for_L34
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_forwards_index() -> void:
            block@0: // L37
                let max_range_item%0#0: uint64 = 5u
                let range_index%0#0: uint64 = 0u
                goto block@2
            block@2: // for_body_L42
                let i#0: uint64 = φ(max_range_item%0#0 <- block@0, range_item%0#2 <- block@4)
                let idx#0: uint64 = φ(range_index%0#0 <- block@0, range_index%0#2 <- block@4)
                let index_plus_1%0#0: uint64 = (+ i#0 1u)
                let tmp%0#0: bytes = (substring3 0x206120622063 i#0 index_plus_1%0#0)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, tmp%0#0)
                let continue_looping%0#0: bool = (< 1u i#0)
                goto continue_looping%0#0 ? block@4 : block@5
            block@4: // for_increment_L41
                let range_item%0#2: uint64 = (- i#0 2u)
                let range_index%0#2: uint64 = (+ idx#0 1u)
                goto block@2
            block@5: // after_for_L41
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_reverse_index() -> void:
            block@0: // L44
                let iteration_count_minus_one%0#0: uint64 = 2u
                let max_range_item%0#0: uint64 = 5u
                goto block@2
            block@2: // for_body_L49
                let i#0: uint64 = φ(max_range_item%0#0 <- block@0, range_item%0#2 <- block@4)
                let idx#0: uint64 = φ(iteration_count_minus_one%0#0 <- block@0, range_index%0#2 <- block@4)
                let index_plus_1%0#0: uint64 = (+ i#0 1u)
                let tmp%0#0: bytes = (substring3 0x206120622063 i#0 index_plus_1%0#0)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, tmp%0#0)
                let continue_looping%0#0: bool = (< 1u i#0)
                goto continue_looping%0#0 ? block@4 : block@5
            block@4: // for_increment_L48
                let range_item%0#2: uint64 = (- i#0 2u)
                let range_index%0#2: uint64 = (- idx#0 1u)
                goto block@2
            block@5: // after_for_L48
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_empty() -> void:
            block@0: // L51
                let range_item%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L54
                let i#0: uint64 = φ(range_item%0#0 <- block@0, range_item%0#2 <- block@2)
                let continue_looping%0#0: bool = (< i#0 0u)
                goto continue_looping%0#0 ? block@2 : block@9
            block@2: // for_body_L55
                let tmp%0#0: bytes = (itob i#0)
                (log tmp%0#0)
                let range_item%0#2: uint64 = (+ i#0 1u)
                goto block@1
            block@9: // after_for_L56
                let range_item%2#0: uint64 = 0u
                let range_index%2#0: uint64 = 0u
                goto block@10
            block@10: // for_header_L58
                let i#2: uint64 = φ(range_item%2#0 <- block@9, range_item%2#2 <- block@11)
                let idx#0: uint64 = φ(range_index%2#0 <- block@9, range_index%2#2 <- block@11)
                let continue_looping%2#0: bool = (< i#2 0u)
                goto continue_looping%2#0 ? block@11 : block@28
            block@11: // for_body_L59
                let tmp%2#0: bytes = (itob idx#0)
                let tmp%4#0: bytes = (itob i#2)
                let tmp%5#0: bytes = (concat tmp%2#0 tmp%4#0)
                (log tmp%5#0)
                let range_item%2#2: uint64 = (+ i#2 1u)
                let range_index%2#2: uint64 = (+ idx#0 1u)
                goto block@10
            block@28: // after_for_L64
                return 
        
        subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_break() -> void:
            block@0: // L67
                (log 0x61)
                return 
    
    program clear-state:
        subroutine test_cases.iteration.base.IterationTestBase.clear_state_program() -> bool:
            block@0: // L26
                return 1u