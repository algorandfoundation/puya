contract URangeIterationTest extends (test_cases.iteration.base::IterationTestBase)
{
  subroutine test_forwards(): void
  {
    values: bytes = hex<"206120622063">
    for i in range(1u, 7u, 2u) {
      log(values[i])
    }
  }
  
  subroutine test_reversed(): void
  {
    values: bytes = hex<"206120622063">
    for i in reversed(range(1u, 7u, 2u)) {
      log(values[i])
    }
  }
  
  subroutine test_forwards_with_forwards_index(): void
  {
    values: bytes = hex<"206120622063">
    for (idx, i) in enumerate(range(1u, 7u, 2u)) {
      this::_log_with_index(idx, values[i])
    }
  }
  
  subroutine test_forwards_with_reverse_index(): void
  {
    values: bytes = hex<"206120622063">
    for (idx, i) in reversed(enumerate(reversed(range(1u, 7u, 2u)))) {
      this::_log_with_index(idx, values[i])
    }
  }
  
  subroutine test_reverse_with_forwards_index(): void
  {
    values: bytes = hex<"206120622063">
    for (idx, i) in enumerate(reversed(range(1u, 7u, 2u))) {
      this::_log_with_index(idx, values[i])
    }
  }
  
  subroutine test_reverse_with_reverse_index(): void
  {
    values: bytes = hex<"206120622063">
    for (idx, i) in reversed(enumerate(range(1u, 7u, 2u))) {
      this::_log_with_index(idx, values[i])
    }
  }
  
  subroutine test_empty(): void
  {
    for i in range(0u, 0u, 1u) {
      log(itob(i))
    }
    for i in reversed(range(0u, 0u, 1u)) {
      log(itob(i))
    }
    for (idx, i) in enumerate(range(0u, 0u, 1u)) {
      log(concat(concat(itob(idx), ''), itob(i)))
    }
    for (idx, i) in reversed(enumerate(reversed(range(0u, 0u, 1u)))) {
      log(concat(concat(itob(idx), ''), itob(i)))
    }
    for (idx, i) in enumerate(reversed(range(0u, 0u, 1u))) {
      log(concat(concat(itob(idx), ''), itob(i)))
    }
    for (idx, i) in reversed(enumerate(range(0u, 0u, 1u))) {
      log(concat(concat(itob(idx), ''), itob(i)))
    }
  }
  
  subroutine test_break(): void
  {
    values: bytes = hex<"206120622063">
    for i in range(1u, 7u, 2u) {
      log(values[i])
      break
    }
  }
}