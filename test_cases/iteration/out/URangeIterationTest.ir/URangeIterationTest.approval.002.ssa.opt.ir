main test_cases.iteration.base.IterationTestBase.approval_program:
    block@0: // L7
        (log "test_forwards")
        let i#0: uint64 = 1u
        let value_internal%0#0: uint64 = 1u
        goto block@2
    block@2: // for_header_L13
        let i#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3)
        let i#3: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 7u)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L14
        let extract%0#0: bytes = (extract3 0x206120622063 i#1 1u)
        (log extract%0#0)
        let i#2: uint64 = (+ i#1 1u)
        let value_internal%0#2: uint64 = (+ i#1 2u)
        goto block@2
    block@5: // after_for_L13
        let tmp%1#0: bool = (== i#3 6u)
        (assert tmp%1#0)
        (log "test_reversed")
        let i#4: uint64 = 5u
        goto block@9
    block@9: // for_body_L23
        let i#5: uint64 = φ(i#4 <- block@5, i#7 <- block@11)
        let extract%0#1: bytes = (extract3 0x206120622063 i#5 1u)
        (log extract%0#1)
        let i#6: uint64 = (+ i#5 1u)
        let continue_looping%0#1: bool = (< 1u i#5)
        goto continue_looping%0#1 ? block@11 : block@12
    block@11: // for_increment_L22
        let i#7: uint64 = (- i#5 2u)
        goto block@9
    block@12: // after_for_L22
        let tmp%1#1: bool = (== i#6 2u)
        (assert tmp%1#1)
        (log "test_forwards_with_forwards_index")
        let i#10: uint64 = 1u
        let idx#0: uint64 = 0u
        let value_internal%0#3: uint64 = 1u
        let item_index_internal%0#0: uint64 = 0u
        goto block@15
    block@15: // for_header_L31
        let i#11: uint64 = φ(value_internal%0#3 <- block@12, value_internal%0#5 <- block@16)
        let idx#1: uint64 = φ(item_index_internal%0#0 <- block@12, idx#2 <- block@16)
        let i#13: uint64 = φ(i#10 <- block@12, i#12 <- block@16)
        let idx#3: uint64 = φ(idx#0 <- block@12, idx#2 <- block@16)
        let continue_looping%0#2: bool = (< i#11 7u)
        goto continue_looping%0#2 ? block@16 : block@18
    block@16: // for_body_L32
        let extract%0#2: bytes = (extract3 0x206120622063 i#11 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#1, extract%0#2)
        let i#12: uint64 = (+ i#11 1u)
        let idx#2: uint64 = (+ idx#1 1u)
        let value_internal%0#5: uint64 = (+ i#11 2u)
        goto block@15
    block@18: // after_for_L31
        let tmp%2#0: bool = (== i#13 6u)
        (assert tmp%2#0)
        let tmp%3#0: bool = (== idx#3 3u)
        (assert tmp%3#0)
        (log "test_forwards_with_reverse_index")
        let idx#4: uint64 = 2u
        let i#14: uint64 = 1u
        goto block@22
    block@22: // for_body_L43
        let i#15: uint64 = φ(i#14 <- block@18, i#17 <- block@24)
        let idx#5: uint64 = φ(idx#4 <- block@18, idx#7 <- block@24)
        let extract%0#3: bytes = (extract3 0x206120622063 i#15 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#5, extract%0#3)
        let i#16: uint64 = (+ i#15 1u)
        let idx#6: uint64 = (+ idx#5 1u)
        let continue_looping%0#3: bool = (< i#15 5u)
        goto continue_looping%0#3 ? block@24 : block@25
    block@24: // for_increment_L42
        let i#17: uint64 = (+ i#15 2u)
        let idx#7: uint64 = (- idx#5 1u)
        goto block@22
    block@25: // after_for_L42
        let tmp%2#1: bool = (== i#16 6u)
        (assert tmp%2#1)
        let tmp%3#1: bool = (== idx#6 1u)
        (assert tmp%3#1)
        (log "test_reverse_with_forwards_index")
        let i#20: uint64 = 5u
        let idx#10: uint64 = 0u
        goto block@29
    block@29: // for_body_L54
        let i#21: uint64 = φ(i#20 <- block@25, i#23 <- block@31)
        let idx#11: uint64 = φ(idx#10 <- block@25, idx#12 <- block@31)
        let extract%0#4: bytes = (extract3 0x206120622063 i#21 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#11, extract%0#4)
        let i#22: uint64 = (+ i#21 1u)
        let idx#12: uint64 = (+ idx#11 1u)
        let continue_looping%0#4: bool = (< 1u i#21)
        goto continue_looping%0#4 ? block@31 : block@32
    block@31: // for_increment_L53
        let i#23: uint64 = (- i#21 2u)
        goto block@29
    block@32: // after_for_L53
        let tmp%2#2: bool = (== i#22 2u)
        (assert tmp%2#2)
        let tmp%3#2: bool = (== idx#12 3u)
        (assert tmp%3#2)
        (log "test_reverse_with_reverse_index")
        let idx#16: uint64 = 2u
        let i#26: uint64 = 5u
        goto block@36
    block@36: // for_body_L65
        let i#27: uint64 = φ(i#26 <- block@32, i#29 <- block@38)
        let idx#17: uint64 = φ(idx#16 <- block@32, idx#19 <- block@38)
        let extract%0#5: bytes = (extract3 0x206120622063 i#27 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#17, extract%0#5)
        let i#28: uint64 = (+ i#27 1u)
        let idx#18: uint64 = (+ idx#17 1u)
        let continue_looping%0#5: bool = (< 1u i#27)
        goto continue_looping%0#5 ? block@38 : block@39
    block@38: // for_increment_L64
        let i#29: uint64 = (- i#27 2u)
        let idx#19: uint64 = (- idx#17 1u)
        goto block@36
    block@39: // after_for_L64
        let tmp%2#3: bool = (== i#28 2u)
        (assert tmp%2#3)
        let tmp%3#3: bool = (== idx#18 1u)
        (assert tmp%3#3)
        (log "test_empty")
        let value_internal%0#6: uint64 = 0u
        goto block@42
    block@42: // for_header_L74
        let i#33: uint64 = φ(value_internal%0#6 <- block@39, value_internal%0#8 <- block@43)
        let continue_looping%0#6: bool = (< i#33 0u)
        goto continue_looping%0#6 ? block@43 : block@45
    block@43: // for_body_L75
        let tmp%0#6: bytes = (itob i#33)
        (log tmp%0#6)
        let value_internal%0#8: uint64 = (+ i#33 1u)
        goto block@42
    block@45: // after_for_L74
        let value_internal%1#0: uint64 = 0u
        let item_index_internal%0#3: uint64 = 0u
        goto block@51
    block@51: // for_header_L78
        let i#38: uint64 = φ(value_internal%1#0 <- block@45, value_internal%1#2 <- block@52)
        let idx#23: uint64 = φ(item_index_internal%0#3 <- block@45, item_index_internal%0#5 <- block@52)
        let continue_looping%2#0: bool = (< i#38 0u)
        goto continue_looping%2#0 ? block@52 : block@54
    block@52: // for_body_L79
        let tmp%2#4: bytes = (itob idx#23)
        let tmp%4#0: bytes = (itob i#38)
        let tmp%5#0: bytes = (concat tmp%2#4 tmp%4#0)
        (log tmp%5#0)
        let value_internal%1#2: uint64 = (+ i#38 1u)
        let item_index_internal%0#5: uint64 = (+ idx#23 1u)
        goto block@51
    block@54: // after_for_L78
        (log "test_break")
        (log 0x61)
        (log "test_tuple_target")
        let tup.1#0: uint64 = 0u
        let tup.0#0: uint64 = 0u
        let value_internal%0#10: uint64 = 0u
        let item_index_internal%0#6: uint64 = 0u
        goto block@77
    block@77: // for_header_L100
        let tup.1#1: uint64 = φ(value_internal%0#10 <- block@54, value_internal%0#12 <- block@78)
        let tup.0#1: uint64 = φ(item_index_internal%0#6 <- block@54, item_index_internal%0#8 <- block@78)
        let tup.0#2: uint64 = φ(tup.0#0 <- block@54, tup.0#1 <- block@78)
        let tup.1#2: uint64 = φ(tup.1#0 <- block@54, tup.1#1 <- block@78)
        let continue_looping%0#8: bool = (< tup.1#1 1u)
        goto continue_looping%0#8 ? block@78 : block@80
    block@78: // for_body_L101
        let extract%0#7: bytes = (extract3 0x74 tup.1#1 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(tup.0#1, extract%0#7)
        let value_internal%0#12: uint64 = (+ tup.1#1 1u)
        let item_index_internal%0#8: uint64 = (+ tup.0#1 1u)
        goto block@77
    block@80: // after_for_L100
        let tmp%0#8: bool = (! tup.0#2)
        let tmp%1#7: bool = (! tup.1#2)
        let tmp%2#5: bool = (&& tmp%0#8 tmp%1#7)
        (assert tmp%2#5)
        return 1u

subroutine test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
    block@0: // L31
        let extract%0#0: bytes = (extract3 0x30313233343536373839 idx#0 1u)
        let tmp%0#0: bytes = (concat extract%0#0 "=")
        let tmp%1#0: bytes = (concat tmp%0#0 value#0)
        (log tmp%1#0)
        return 