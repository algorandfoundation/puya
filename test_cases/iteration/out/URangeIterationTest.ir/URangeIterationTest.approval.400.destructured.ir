main test_cases.iteration.base.IterationTestBase.approval_program:
    block@0: // L7
        (log "test_forwards")
        let i#0: uint64 = undefined
        let value_internal%0#0: uint64 = 1u
        let i#1: uint64 = i#0
        let i#0: uint64 = value_internal%0#0
        goto block@2
    block@2: // for_header_L13
        let continue_looping%0#0: bool = (< i#0 7u)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L14
        let extract%0#0: bytes = (extract3 0x206120622063 i#0 1u)
        (log extract%0#0)
        let i#1: uint64 = (+ i#0 1u)
        let value_internal%0#0: uint64 = (+ i#0 2u)
        let i#0: uint64 = value_internal%0#0
        goto block@2
    block@5: // after_for_L13
        let tmp%1#0: bool = (== i#1 6u)
        (assert tmp%1#0)
        (log "test_reversed")
        let i#0: uint64 = 5u
        goto block@9
    block@9: // for_body_L23
        let extract%0#0: bytes = (extract3 0x206120622063 i#0 1u)
        (log extract%0#0)
        let i#1: uint64 = (+ i#0 1u)
        let continue_looping%0#0: bool = (< 1u i#0)
        goto continue_looping%0#0 ? block@11 : block@12
    block@11: // for_increment_L22
        let i#0: uint64 = (- i#0 2u)
        goto block@9
    block@12: // after_for_L22
        let tmp%1#0: bool = (== i#1 2u)
        (assert tmp%1#0)
        (log "test_forwards_with_forwards_index")
        let idx#0: uint64 = undefined
        let i#0: uint64 = undefined
        let value_internal%0#0: uint64 = 1u
        let item_index_internal%0#0: uint64 = 0u
        let idx#2: uint64 = idx#0
        let idx#0: uint64 = item_index_internal%0#0
        let i#1: uint64 = i#0
        let i#0: uint64 = value_internal%0#0
        goto block@15
    block@15: // for_header_L31
        let continue_looping%0#0: bool = (< i#0 7u)
        goto continue_looping%0#0 ? block@16 : block@18
    block@16: // for_body_L32
        let extract%0#0: bytes = (extract3 0x206120622063 i#0 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, extract%0#0)
        let i#1: uint64 = (+ i#0 1u)
        let idx#0: uint64 = (+ idx#0 1u)
        let value_internal%0#0: uint64 = (+ i#0 2u)
        let idx#2: uint64 = idx#0
        let i#0: uint64 = value_internal%0#0
        goto block@15
    block@18: // after_for_L31
        let tmp%2#0: bool = (== i#1 6u)
        (assert tmp%2#0)
        let tmp%3#0: bool = (== idx#2 3u)
        (assert tmp%3#0)
        (log "test_forwards_with_reverse_index")
        let idx#0: uint64 = 2u
        let i#0: uint64 = 1u
        goto block@22
    block@22: // for_body_L43
        let extract%0#0: bytes = (extract3 0x206120622063 i#0 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, extract%0#0)
        let i#1: uint64 = (+ i#0 1u)
        let idx#2: uint64 = (+ idx#0 1u)
        let continue_looping%0#0: bool = (< i#0 5u)
        goto continue_looping%0#0 ? block@24 : block@25
    block@24: // for_increment_L42
        let i#0: uint64 = (+ i#0 2u)
        let idx#0: uint64 = (- idx#0 1u)
        goto block@22
    block@25: // after_for_L42
        let tmp%2#0: bool = (== i#1 6u)
        (assert tmp%2#0)
        let tmp%3#0: bool = (== idx#2 1u)
        (assert tmp%3#0)
        (log "test_reverse_with_forwards_index")
        let i#0: uint64 = 5u
        let idx#0: uint64 = 0u
        goto block@29
    block@29: // for_body_L54
        let extract%0#0: bytes = (extract3 0x206120622063 i#0 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, extract%0#0)
        let i#1: uint64 = (+ i#0 1u)
        let idx#0: uint64 = (+ idx#0 1u)
        let continue_looping%0#0: bool = (< 1u i#0)
        goto continue_looping%0#0 ? block@31 : block@32
    block@31: // for_increment_L53
        let i#0: uint64 = (- i#0 2u)
        goto block@29
    block@32: // after_for_L53
        let tmp%2#0: bool = (== i#1 2u)
        (assert tmp%2#0)
        let tmp%3#0: bool = (== idx#0 3u)
        (assert tmp%3#0)
        (log "test_reverse_with_reverse_index")
        let idx#0: uint64 = 2u
        let i#0: uint64 = 5u
        goto block@36
    block@36: // for_body_L65
        let extract%0#0: bytes = (extract3 0x206120622063 i#0 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, extract%0#0)
        let i#1: uint64 = (+ i#0 1u)
        let idx#2: uint64 = (+ idx#0 1u)
        let continue_looping%0#0: bool = (< 1u i#0)
        goto continue_looping%0#0 ? block@38 : block@39
    block@38: // for_increment_L64
        let i#0: uint64 = (- i#0 2u)
        let idx#0: uint64 = (- idx#0 1u)
        goto block@36
    block@39: // after_for_L64
        let tmp%2#0: bool = (== i#1 2u)
        (assert tmp%2#0)
        let tmp%3#0: bool = (== idx#2 1u)
        (assert tmp%3#0)
        (log "test_empty")
        let value_internal%0#0: uint64 = 0u
        let i#0: uint64 = value_internal%0#0
        goto block@42
    block@42: // for_header_L74
        let continue_looping%0#0: bool = (< i#0 0u)
        goto continue_looping%0#0 ? block@43 : block@45
    block@43: // for_body_L75
        let tmp%0#6: bytes = (itob i#0)
        (log tmp%0#6)
        let value_internal%0#0: uint64 = (+ i#0 1u)
        let i#0: uint64 = value_internal%0#0
        goto block@42
    block@45: // after_for_L74
        let value_internal%1#0: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        let idx#0: uint64 = item_index_internal%0#0
        let i#0: uint64 = value_internal%1#0
        goto block@51
    block@51: // for_header_L78
        let continue_looping%2#0: bool = (< i#0 0u)
        goto continue_looping%2#0 ? block@52 : block@54
    block@52: // for_body_L79
        let tmp%2#4: bytes = (itob idx#0)
        let tmp%4#0: bytes = (itob i#0)
        let tmp%5#0: bytes = (concat tmp%2#4 tmp%4#0)
        (log tmp%5#0)
        let value_internal%1#0: uint64 = (+ i#0 1u)
        let item_index_internal%0#0: uint64 = (+ idx#0 1u)
        let idx#0: uint64 = item_index_internal%0#0
        let i#0: uint64 = value_internal%1#0
        goto block@51
    block@54: // after_for_L78
        (log "test_break")
        (log 0x61)
        (log "test_tuple_target")
        let tup.1#0: uint64 = undefined
        let tup.0#0: uint64 = undefined
        let value_internal%0#0: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        let tup.1#1: uint64 = tup.1#0
        let tup.1#0: uint64 = value_internal%0#0
        let tup.0#1: uint64 = tup.0#0
        let tup.0#0: uint64 = item_index_internal%0#0
        goto block@77
    block@77: // for_header_L100
        let continue_looping%0#0: bool = (< tup.1#0 1u)
        goto continue_looping%0#0 ? block@78 : block@80
    block@78: // for_body_L101
        let extract%0#0: bytes = (extract3 0x74 tup.1#0 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(tup.0#0, extract%0#0)
        let value_internal%0#0: uint64 = (+ tup.1#0 1u)
        let item_index_internal%0#0: uint64 = (+ tup.0#0 1u)
        let tup.1#1: uint64 = tup.1#0
        let tup.1#0: uint64 = value_internal%0#0
        let tup.0#1: uint64 = tup.0#0
        let tup.0#0: uint64 = item_index_internal%0#0
        goto block@77
    block@80: // after_for_L100
        goto tup.0#1 ? block@83 : block@81
    block@81: // and_contd_L102
        goto tup.1#1 ? block@83 : block@82
    block@82: // bool_true_L102
        let and_result%0#0: bool = 1u
        goto block@84
    block@83: // bool_false_L102
        let and_result%0#0: bool = 0u
        goto block@84
    block@84: // bool_merge_L102
        (assert and_result%0#0)
        return 1u

subroutine test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
    block@0: // L31
        let extract%0#0: bytes = (extract3 0x30313233343536373839 idx#0 1u)
        let tmp%0#0: bytes = (concat extract%0#0 "=")
        let tmp%1#0: bytes = (concat tmp%0#0 value#0)
        (log tmp%1#0)
        return 