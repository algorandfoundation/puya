main test_cases.iteration.base.IterationTestBase.approval_program:
    block@0: // L7
        (log "test_forwards")
        test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards()
        (log "test_reversed")
        test_cases.iteration.iterate_urange.URangeIterationTest.test_reversed()
        (log "test_forwards_with_forwards_index")
        test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_forwards_index()
        (log "test_forwards_with_reverse_index")
        test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_reverse_index()
        (log "test_reverse_with_forwards_index")
        test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_forwards_index()
        (log "test_reverse_with_reverse_index")
        test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_reverse_index()
        (log "test_empty")
        test_cases.iteration.iterate_urange.URangeIterationTest.test_empty()
        (log "test_break")
        test_cases.iteration.iterate_urange.URangeIterationTest.test_break()
        (log "test_tuple_target")
        test_cases.iteration.iterate_urange.URangeIterationTest.test_tuple_target()
        return 1u

subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards() -> void:
    block@0: // L9
        let values#0: bytes = 0x206120622063
        (assert 2u) // Step cannot be zero
        let i#0: uint64 = 1u
        let value_internal%0#0: uint64 = i#0
        goto block@1
    block@1: // for_header_L13
        let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3)
        let i#3: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< value_internal%0#1 7u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L14
        let i#1: uint64 = value_internal%0#1
        let extract%0#0: bytes = (extract3 values#0 i#1 1u)
        (log extract%0#0)
        let tmp%0#0: uint64 = (+ i#1 1u)
        let i#2: uint64 = tmp%0#0
        goto block@3
    block@3: // for_footer_L13
        let value_internal%0#2: uint64 = (+ value_internal%0#1 2u)
        goto block@1
    block@4: // after_for_L13
        let tmp%1#0: bool = (== i#3 6u)
        (assert tmp%1#0)
        return 

subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_reversed() -> void:
    block@0: // L18
        let i#5: uint64 = undefined
        let values#0: bytes = 0x206120622063
        (assert 2u) // Step cannot be zero
        let should_loop%0#0: bool = (< 1u 7u)
        goto should_loop%0#0 ? block@1 : block@5
    block@1: // for_header_L22
        let range_length%0#0: uint64 = (- 7u 1u)
        let range_length_minus_one%0#0: uint64 = (- range_length%0#0 1u)
        let iteration_count_minus_one%0#0: uint64 = (/ range_length_minus_one%0#0 2u)
        let range_delta%0#0: uint64 = (* 2u iteration_count_minus_one%0#0)
        let max_range_item%0#0: uint64 = (+ 1u range_delta%0#0)
        let i#0: uint64 = max_range_item%0#0
        goto block@2
    block@2: // for_body_L23
        let i#1: uint64 = φ(i#0 <- block@1, i#3 <- block@4)
        let extract%0#0: bytes = (extract3 values#0 i#1 1u)
        (log extract%0#0)
        let tmp%0#0: uint64 = (+ i#1 1u)
        let i#2: uint64 = tmp%0#0
        goto block@3
    block@3: // for_footer_L22
        let continue_looping%0#0: bool = (< 1u i#1)
        goto continue_looping%0#0 ? block@4 : block@5
    block@4: // for_increment_L22
        let i#3: uint64 = (- i#1 2u)
        goto block@2
    block@5: // after_for_L22
        let i#4: uint64 = φ(i#5 <- block@0, i#2 <- block@3)
        let tmp%1#0: bool = (== i#4 2u)
        (assert tmp%1#0)
        return 

subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_forwards_index() -> void:
    block@0: // L27
        let values#0: bytes = 0x206120622063
        (assert 2u) // Step cannot be zero
        let i#0: uint64 = 1u
        let idx#0: uint64 = 0u
        let value_internal%0#0: uint64 = i#0
        let item_index_internal%0#0: uint64 = idx#0
        goto block@1
    block@1: // for_header_L31
        let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3)
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let i#3: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let idx#3: uint64 = φ(idx#0 <- block@0, idx#2 <- block@3)
        let continue_looping%0#0: bool = (< value_internal%0#1 7u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L32
        let i#1: uint64 = value_internal%0#1
        let idx#1: uint64 = item_index_internal%0#1
        let extract%0#0: bytes = (extract3 values#0 i#1 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#1, extract%0#0)
        let tmp%0#0: uint64 = (+ i#1 1u)
        let i#2: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (+ idx#1 1u)
        let idx#2: uint64 = tmp%1#0
        goto block@3
    block@3: // for_footer_L31
        let value_internal%0#2: uint64 = (+ value_internal%0#1 2u)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L31
        let tmp%2#0: bool = (== i#3 6u)
        (assert tmp%2#0)
        let tmp%3#0: bool = (== idx#3 3u)
        (assert tmp%3#0)
        return 

subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_forwards_with_reverse_index() -> void:
    block@0: // L38
        let i#5: uint64 = undefined
        let idx#5: uint64 = undefined
        let values#0: bytes = 0x206120622063
        (assert 2u) // Step cannot be zero
        let should_loop%0#0: bool = (< 1u 7u)
        goto should_loop%0#0 ? block@1 : block@5
    block@1: // for_header_L42
        let range_length%0#0: uint64 = (- 7u 1u)
        let range_length_minus_one%0#0: uint64 = (- range_length%0#0 1u)
        let iteration_count_minus_one%0#0: uint64 = (/ range_length_minus_one%0#0 2u)
        let range_delta%0#0: uint64 = (* 2u iteration_count_minus_one%0#0)
        let max_range_item%0#0: uint64 = (+ 1u range_delta%0#0)
        let i#0: uint64 = 1u
        let idx#0: uint64 = iteration_count_minus_one%0#0
        goto block@2
    block@2: // for_body_L43
        let i#1: uint64 = φ(i#0 <- block@1, i#3 <- block@4)
        let idx#1: uint64 = φ(idx#0 <- block@1, idx#3 <- block@4)
        let extract%0#0: bytes = (extract3 values#0 i#1 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#1, extract%0#0)
        let tmp%0#0: uint64 = (+ i#1 1u)
        let i#2: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (+ idx#1 1u)
        let idx#2: uint64 = tmp%1#0
        goto block@3
    block@3: // for_footer_L42
        let continue_looping%0#0: bool = (< i#1 max_range_item%0#0)
        goto continue_looping%0#0 ? block@4 : block@5
    block@4: // for_increment_L42
        let i#3: uint64 = (+ i#1 2u)
        let idx#3: uint64 = (- idx#1 1u)
        goto block@2
    block@5: // after_for_L42
        let i#4: uint64 = φ(i#5 <- block@0, i#2 <- block@3)
        let idx#4: uint64 = φ(idx#5 <- block@0, idx#2 <- block@3)
        let tmp%2#0: bool = (== i#4 6u)
        (assert tmp%2#0)
        let tmp%3#0: bool = (== idx#4 1u)
        (assert tmp%3#0)
        return 

subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_forwards_index() -> void:
    block@0: // L49
        let i#5: uint64 = undefined
        let idx#5: uint64 = undefined
        let values#0: bytes = 0x206120622063
        (assert 2u) // Step cannot be zero
        let should_loop%0#0: bool = (< 1u 7u)
        goto should_loop%0#0 ? block@1 : block@5
    block@1: // for_header_L53
        let range_length%0#0: uint64 = (- 7u 1u)
        let range_length_minus_one%0#0: uint64 = (- range_length%0#0 1u)
        let iteration_count_minus_one%0#0: uint64 = (/ range_length_minus_one%0#0 2u)
        let range_delta%0#0: uint64 = (* 2u iteration_count_minus_one%0#0)
        let max_range_item%0#0: uint64 = (+ 1u range_delta%0#0)
        let i#0: uint64 = max_range_item%0#0
        let idx#0: uint64 = 0u
        goto block@2
    block@2: // for_body_L54
        let i#1: uint64 = φ(i#0 <- block@1, i#3 <- block@4)
        let idx#1: uint64 = φ(idx#0 <- block@1, idx#3 <- block@4)
        let extract%0#0: bytes = (extract3 values#0 i#1 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#1, extract%0#0)
        let tmp%0#0: uint64 = (+ i#1 1u)
        let i#2: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (+ idx#1 1u)
        let idx#2: uint64 = tmp%1#0
        goto block@3
    block@3: // for_footer_L53
        let continue_looping%0#0: bool = (< 1u i#1)
        goto continue_looping%0#0 ? block@4 : block@5
    block@4: // for_increment_L53
        let i#3: uint64 = (- i#1 2u)
        let idx#3: uint64 = (+ idx#1 1u)
        goto block@2
    block@5: // after_for_L53
        let i#4: uint64 = φ(i#5 <- block@0, i#2 <- block@3)
        let idx#4: uint64 = φ(idx#5 <- block@0, idx#2 <- block@3)
        let tmp%2#0: bool = (== i#4 2u)
        (assert tmp%2#0)
        let tmp%3#0: bool = (== idx#4 3u)
        (assert tmp%3#0)
        return 

subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_reverse_with_reverse_index() -> void:
    block@0: // L60
        let i#5: uint64 = undefined
        let idx#5: uint64 = undefined
        let values#0: bytes = 0x206120622063
        (assert 2u) // Step cannot be zero
        let should_loop%0#0: bool = (< 1u 7u)
        goto should_loop%0#0 ? block@1 : block@5
    block@1: // for_header_L64
        let range_length%0#0: uint64 = (- 7u 1u)
        let range_length_minus_one%0#0: uint64 = (- range_length%0#0 1u)
        let iteration_count_minus_one%0#0: uint64 = (/ range_length_minus_one%0#0 2u)
        let range_delta%0#0: uint64 = (* 2u iteration_count_minus_one%0#0)
        let max_range_item%0#0: uint64 = (+ 1u range_delta%0#0)
        let i#0: uint64 = max_range_item%0#0
        let idx#0: uint64 = iteration_count_minus_one%0#0
        goto block@2
    block@2: // for_body_L65
        let i#1: uint64 = φ(i#0 <- block@1, i#3 <- block@4)
        let idx#1: uint64 = φ(idx#0 <- block@1, idx#3 <- block@4)
        let extract%0#0: bytes = (extract3 values#0 i#1 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#1, extract%0#0)
        let tmp%0#0: uint64 = (+ i#1 1u)
        let i#2: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (+ idx#1 1u)
        let idx#2: uint64 = tmp%1#0
        goto block@3
    block@3: // for_footer_L64
        let continue_looping%0#0: bool = (< 1u i#1)
        goto continue_looping%0#0 ? block@4 : block@5
    block@4: // for_increment_L64
        let i#3: uint64 = (- i#1 2u)
        let idx#3: uint64 = (- idx#1 1u)
        goto block@2
    block@5: // after_for_L64
        let i#4: uint64 = φ(i#5 <- block@0, i#2 <- block@3)
        let idx#4: uint64 = φ(idx#5 <- block@0, idx#2 <- block@3)
        let tmp%2#0: bool = (== i#4 2u)
        (assert tmp%2#0)
        let tmp%3#0: bool = (== idx#4 1u)
        (assert tmp%3#0)
        return 

subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_empty() -> void:
    block@0: // L71
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        let value_internal%0#0: uint64 = i#0
        goto block@1
    block@1: // for_header_L74
        let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3)
        let continue_looping%0#0: bool = (< value_internal%0#1 0u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L75
        let i#1: uint64 = value_internal%0#1
        let tmp%0#0: bytes = (itob i#1)
        (log tmp%0#0)
        goto block@3
    block@3: // for_footer_L74
        let value_internal%0#2: uint64 = (+ value_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L74
        (assert 1u) // Step cannot be zero
        let should_loop%0#0: bool = (< 0u 0u)
        goto should_loop%0#0 ? block@5 : block@9
    block@5: // for_header_L76
        let range_length%0#0: uint64 = (- 0u 0u)
        let range_length_minus_one%0#0: uint64 = (- range_length%0#0 1u)
        let iteration_count_minus_one%0#0: uint64 = (/ range_length_minus_one%0#0 1u)
        let range_delta%0#0: uint64 = (* 1u iteration_count_minus_one%0#0)
        let max_range_item%0#0: uint64 = (+ 0u range_delta%0#0)
        let i#2: uint64 = max_range_item%0#0
        goto block@6
    block@6: // for_body_L77
        let i#3: uint64 = φ(i#2 <- block@5, i#4 <- block@8)
        let tmp%1#0: bytes = (itob i#3)
        (log tmp%1#0)
        goto block@7
    block@7: // for_footer_L76
        let continue_looping%1#0: bool = (< 0u i#3)
        goto continue_looping%1#0 ? block@8 : block@9
    block@8: // for_increment_L76
        let i#4: uint64 = (- i#3 1u)
        goto block@6
    block@9: // after_for_L76
        (assert 1u) // Step cannot be zero
        let i#5: uint64 = 0u
        let idx#0: uint64 = 0u
        let value_internal%1#0: uint64 = i#5
        let item_index_internal%0#0: uint64 = idx#0
        goto block@10
    block@10: // for_header_L78
        let value_internal%1#1: uint64 = φ(value_internal%1#0 <- block@9, value_internal%1#2 <- block@12)
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@9, item_index_internal%0#2 <- block@12)
        let continue_looping%2#0: bool = (< value_internal%1#1 0u)
        goto continue_looping%2#0 ? block@11 : block@13
    block@11: // for_body_L79
        let i#6: uint64 = value_internal%1#1
        let idx#1: uint64 = item_index_internal%0#1
        let tmp%2#0: bytes = (itob idx#1)
        let tmp%3#0: bytes = (concat tmp%2#0 "")
        let tmp%4#0: bytes = (itob i#6)
        let tmp%5#0: bytes = (concat tmp%3#0 tmp%4#0)
        (log tmp%5#0)
        goto block@12
    block@12: // for_footer_L78
        let value_internal%1#2: uint64 = (+ value_internal%1#1 1u)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@10
    block@13: // after_for_L78
        (assert 1u) // Step cannot be zero
        let should_loop%1#0: bool = (< 0u 0u)
        goto should_loop%1#0 ? block@14 : block@18
    block@14: // for_header_L80
        let range_length%1#0: uint64 = (- 0u 0u)
        let range_length_minus_one%1#0: uint64 = (- range_length%1#0 1u)
        let iteration_count_minus_one%1#0: uint64 = (/ range_length_minus_one%1#0 1u)
        let range_delta%1#0: uint64 = (* 1u iteration_count_minus_one%1#0)
        let max_range_item%1#0: uint64 = (+ 0u range_delta%1#0)
        let i#7: uint64 = 0u
        let idx#2: uint64 = iteration_count_minus_one%1#0
        goto block@15
    block@15: // for_body_L81
        let i#8: uint64 = φ(i#7 <- block@14, i#9 <- block@17)
        let idx#3: uint64 = φ(idx#2 <- block@14, idx#4 <- block@17)
        let tmp%6#0: bytes = (itob idx#3)
        let tmp%7#0: bytes = (concat tmp%6#0 "")
        let tmp%8#0: bytes = (itob i#8)
        let tmp%9#0: bytes = (concat tmp%7#0 tmp%8#0)
        (log tmp%9#0)
        goto block@16
    block@16: // for_footer_L80
        let continue_looping%3#0: bool = (< i#8 max_range_item%1#0)
        goto continue_looping%3#0 ? block@17 : block@18
    block@17: // for_increment_L80
        let i#9: uint64 = (+ i#8 1u)
        let idx#4: uint64 = (- idx#3 1u)
        goto block@15
    block@18: // after_for_L80
        (assert 1u) // Step cannot be zero
        let should_loop%2#0: bool = (< 0u 0u)
        goto should_loop%2#0 ? block@19 : block@23
    block@19: // for_header_L82
        let range_length%2#0: uint64 = (- 0u 0u)
        let range_length_minus_one%2#0: uint64 = (- range_length%2#0 1u)
        let iteration_count_minus_one%2#0: uint64 = (/ range_length_minus_one%2#0 1u)
        let range_delta%2#0: uint64 = (* 1u iteration_count_minus_one%2#0)
        let max_range_item%2#0: uint64 = (+ 0u range_delta%2#0)
        let i#10: uint64 = max_range_item%2#0
        let idx#5: uint64 = 0u
        goto block@20
    block@20: // for_body_L83
        let i#11: uint64 = φ(i#10 <- block@19, i#12 <- block@22)
        let idx#6: uint64 = φ(idx#5 <- block@19, idx#7 <- block@22)
        let tmp%10#0: bytes = (itob idx#6)
        let tmp%11#0: bytes = (concat tmp%10#0 "")
        let tmp%12#0: bytes = (itob i#11)
        let tmp%13#0: bytes = (concat tmp%11#0 tmp%12#0)
        (log tmp%13#0)
        goto block@21
    block@21: // for_footer_L82
        let continue_looping%4#0: bool = (< 0u i#11)
        goto continue_looping%4#0 ? block@22 : block@23
    block@22: // for_increment_L82
        let i#12: uint64 = (- i#11 1u)
        let idx#7: uint64 = (+ idx#6 1u)
        goto block@20
    block@23: // after_for_L82
        (assert 1u) // Step cannot be zero
        let should_loop%3#0: bool = (< 0u 0u)
        goto should_loop%3#0 ? block@24 : block@28
    block@24: // for_header_L84
        let range_length%3#0: uint64 = (- 0u 0u)
        let range_length_minus_one%3#0: uint64 = (- range_length%3#0 1u)
        let iteration_count_minus_one%3#0: uint64 = (/ range_length_minus_one%3#0 1u)
        let range_delta%3#0: uint64 = (* 1u iteration_count_minus_one%3#0)
        let max_range_item%3#0: uint64 = (+ 0u range_delta%3#0)
        let i#13: uint64 = max_range_item%3#0
        let idx#8: uint64 = iteration_count_minus_one%3#0
        goto block@25
    block@25: // for_body_L85
        let i#14: uint64 = φ(i#13 <- block@24, i#15 <- block@27)
        let idx#9: uint64 = φ(idx#8 <- block@24, idx#10 <- block@27)
        let tmp%14#0: bytes = (itob idx#9)
        let tmp%15#0: bytes = (concat tmp%14#0 "")
        let tmp%16#0: bytes = (itob i#14)
        let tmp%17#0: bytes = (concat tmp%15#0 tmp%16#0)
        (log tmp%17#0)
        goto block@26
    block@26: // for_footer_L84
        let continue_looping%5#0: bool = (< 0u i#14)
        goto continue_looping%5#0 ? block@27 : block@28
    block@27: // for_increment_L84
        let i#15: uint64 = (- i#14 1u)
        let idx#10: uint64 = (- idx#9 1u)
        goto block@25
    block@28: // after_for_L84
        return 

subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_break() -> void:
    block@0: // L87
        let values#0: bytes = 0x206120622063
        (assert 2u) // Step cannot be zero
        let i#0: uint64 = 1u
        let value_internal%0#0: uint64 = i#0
        goto block@1
    block@1: // for_header_L91
        let continue_looping%0#0: bool = (< value_internal%0#0 7u)
        goto continue_looping%0#0 ? block@2 : block@3
    block@2: // for_body_L92
        let i#1: uint64 = value_internal%0#0
        let extract%0#0: bytes = (extract3 values#0 i#1 1u)
        (log extract%0#0)
        goto block@3
    block@3: // after_for_L91
        let i#2: uint64 = φ(i#0 <- block@1, i#1 <- block@2)
        let tmp%0#0: bool = (== i#2 1u)
        (assert tmp%0#0)
        return 

subroutine test_cases.iteration.iterate_urange.URangeIterationTest.test_tuple_target() -> void:
    block@0: // L96
        let values#0: bytes = 0x74
        (assert 1u) // Step cannot be zero
        let tup.1#0: uint64 = 0u
        let tup.0#0: uint64 = 0u
        let value_internal%0#0: uint64 = tup.1#0
        let item_index_internal%0#0: uint64 = tup.0#0
        goto block@1
    block@1: // for_header_L100
        let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3)
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let tup.0#2: uint64 = φ(tup.0#0 <- block@0, tup.0#1 <- block@3)
        let tup.1#2: uint64 = φ(tup.1#0 <- block@0, tup.1#1 <- block@3)
        let continue_looping%0#0: bool = (< value_internal%0#1 1u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L101
        let tup.1#1: uint64 = value_internal%0#1
        let tup.0#1: uint64 = item_index_internal%0#1
        let extract%0#0: bytes = (extract3 values#0 tup.1#1 1u)
        test_cases.iteration.base.IterationTestBase._log_with_index(tup.0#1, extract%0#0)
        goto block@3
    block@3: // for_footer_L100
        let value_internal%0#2: uint64 = (+ value_internal%0#1 1u)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L100
        let tmp%0#0: bool = (== tup.0#2 0u)
        let tmp%1#0: bool = (== tup.1#2 0u)
        let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
        (assert tmp%2#0)
        return 

subroutine test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
    block@0: // L31
        let digits#0: bytes = 0x30313233343536373839
        let extract%0#0: bytes = (extract3 digits#0 idx#0 1u)
        let tmp%0#0: bytes = (concat extract%0#0 "=")
        let tmp%1#0: bytes = (concat tmp%0#0 value#0)
        (log tmp%1#0)
        return 