main test_cases.iteration.base.IterationTestBase.approval_program:
    block@0: // L7
        (log "test_forwards")
        let loop_counter%0#0: uint64 = 0u
        let i#0: bytes = 0x61
        goto block@2
    block@2: // for_body_L13
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@4, loop_counter%0#3 <- block@5)
        let i#1: bytes = φ(i#0 <- block@0, i#2 <- block@4, i#3 <- block@5)
        (log i#1)
        goto_nth [block@4, block@5][loop_counter%0#1] else goto block@6
    block@4: // for_header_1_L12
        let loop_counter%0#2: uint64 = 1u
        let i#2: bytes = 0x62
        goto block@2
    block@5: // for_header_2_L12
        let loop_counter%0#3: uint64 = 2u
        let i#3: bytes = 0x63
        goto block@2
    block@6: // after_for_L12
        (log "test_reversed")
        let loop_counter%0#4: uint64 = 0u
        let i#4: bytes = 0x63
        goto block@9
    block@9: // for_body_L19
        let loop_counter%0#5: uint64 = φ(loop_counter%0#4 <- block@6, loop_counter%0#6 <- block@11, loop_counter%0#7 <- block@12)
        let i#5: bytes = φ(i#4 <- block@6, i#6 <- block@11, i#7 <- block@12)
        (log i#5)
        goto_nth [block@11, block@12][loop_counter%0#5] else goto block@13
    block@11: // for_header_1_L18
        let loop_counter%0#6: uint64 = 1u
        let i#6: bytes = 0x62
        goto block@9
    block@12: // for_header_2_L18
        let loop_counter%0#7: uint64 = 2u
        let i#7: bytes = 0x61
        goto block@9
    block@13: // after_for_L18
        (log "test_forwards_with_forwards_index")
        let i#8: bytes = 0x61
        let idx#0: uint64 = 0u
        goto block@16
    block@16: // for_body_L25
        let idx#1: uint64 = φ(idx#0 <- block@13, idx#3 <- block@18, idx#4 <- block@19)
        let i#9: bytes = φ(i#8 <- block@13, i#10 <- block@18, i#11 <- block@19)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#1, i#9)
        goto_nth [block@18, block@19][idx#1] else goto block@20
    block@18: // for_header_1_L24
        let i#10: bytes = 0x62
        let idx#3: uint64 = 1u
        goto block@16
    block@19: // for_header_2_L24
        let i#11: bytes = 0x63
        let idx#4: uint64 = 2u
        goto block@16
    block@20: // after_for_L24
        (log "test_forwards_with_reverse_index")
        let loop_counter%0#11: uint64 = 0u
        let i#12: bytes = 0x61
        let idx#5: uint64 = 2u
        goto block@23
    block@23: // for_body_L32
        let loop_counter%0#12: uint64 = φ(loop_counter%0#11 <- block@20, loop_counter%0#13 <- block@25, loop_counter%0#14 <- block@26)
        let idx#6: uint64 = φ(idx#5 <- block@20, idx#8 <- block@25, idx#9 <- block@26)
        let i#13: bytes = φ(i#12 <- block@20, i#14 <- block@25, i#15 <- block@26)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#6, i#13)
        goto_nth [block@25, block@26][loop_counter%0#12] else goto block@27
    block@25: // for_header_1_L31
        let loop_counter%0#13: uint64 = 1u
        let i#14: bytes = 0x62
        let idx#8: uint64 = 1u
        goto block@23
    block@26: // for_header_2_L31
        let loop_counter%0#14: uint64 = 2u
        let i#15: bytes = 0x63
        let idx#9: uint64 = 0u
        goto block@23
    block@27: // after_for_L31
        (log "test_reverse_with_forwards_index")
        let i#16: bytes = 0x63
        let idx#10: uint64 = 0u
        goto block@30
    block@30: // for_body_L39
        let idx#11: uint64 = φ(idx#10 <- block@27, idx#13 <- block@32, idx#14 <- block@33)
        let i#17: bytes = φ(i#16 <- block@27, i#18 <- block@32, i#19 <- block@33)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#11, i#17)
        goto_nth [block@32, block@33][idx#11] else goto block@34
    block@32: // for_header_1_L38
        let i#18: bytes = 0x62
        let idx#13: uint64 = 1u
        goto block@30
    block@33: // for_header_2_L38
        let i#19: bytes = 0x61
        let idx#14: uint64 = 2u
        goto block@30
    block@34: // after_for_L38
        (log "test_reverse_with_reverse_index")
        let loop_counter%0#18: uint64 = 0u
        let i#20: bytes = 0x63
        let idx#15: uint64 = 2u
        goto block@37
    block@37: // for_body_L46
        let loop_counter%0#19: uint64 = φ(loop_counter%0#18 <- block@34, loop_counter%0#20 <- block@39, loop_counter%0#21 <- block@40)
        let idx#16: uint64 = φ(idx#15 <- block@34, idx#18 <- block@39, idx#19 <- block@40)
        let i#21: bytes = φ(i#20 <- block@34, i#22 <- block@39, i#23 <- block@40)
        test_cases.iteration.base.IterationTestBase._log_with_index(idx#16, i#21)
        goto_nth [block@39, block@40][loop_counter%0#19] else goto block@41
    block@39: // for_header_1_L45
        let loop_counter%0#20: uint64 = 1u
        let i#22: bytes = 0x62
        let idx#18: uint64 = 1u
        goto block@37
    block@40: // for_header_2_L45
        let loop_counter%0#21: uint64 = 2u
        let i#23: bytes = 0x61
        let idx#19: uint64 = 0u
        goto block@37
    block@41: // after_for_L45
        (log "test_empty")
        (log "test_break")
        (log 0x61)
        (log "test_tuple_target")
        test_cases.iteration.base.IterationTestBase._log_with_index(0u, 0x74)
        return 1u

subroutine test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
    block@0: // L31
        let extract%0#0: bytes = (extract3 0x30313233343536373839 idx#0 1u)
        let tmp%0#0: bytes = (concat extract%0#0 "=")
        let tmp%1#0: bytes = (concat tmp%0#0 value#0)
        (log tmp%1#0)
        return 