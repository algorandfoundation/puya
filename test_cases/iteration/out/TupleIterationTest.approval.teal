#pragma version 10
#pragma typetrack false

// test_cases.iteration.base.IterationTestBase.approval_program() -> uint64:
main:
    intcblock 1 0 2
    bytecblock 0x61 0x63 0x62
    // iteration/base.py:8
    // log("test_forwards")
    pushbytes "test_forwards"
    log
    // iteration/iterate_tuple.py:12
    // for i in (Bytes(b"a"), Bytes(b"b"), Bytes(b"c")):
    bytec_0 // 0x61
    intc_1 // 0

main_for_body@2:
    // iteration/iterate_tuple.py:13
    // log(i)
    swap
    log
    // iteration/iterate_tuple.py:12
    // for i in (Bytes(b"a"), Bytes(b"b"), Bytes(b"c")):
    switch main_for_header_1@4 main_for_header_2@5
    // iteration/base.py:10
    // log("test_reversed")
    pushbytes "test_reversed"
    log
    // iteration/iterate_tuple.py:18
    // for i in reversed((Bytes(b"a"), Bytes(b"b"), Bytes(b"c"))):
    bytec_1 // 0x63
    intc_1 // 0

main_for_body@9:
    // iteration/iterate_tuple.py:19
    // log(i)
    swap
    log
    // iteration/iterate_tuple.py:18
    // for i in reversed((Bytes(b"a"), Bytes(b"b"), Bytes(b"c"))):
    switch main_for_header_1@11 main_for_header_2@12
    // iteration/base.py:12
    // log("test_forwards_with_forwards_index")
    pushbytes "test_forwards_with_forwards_index"
    log
    intc_1 // 0
    // iteration/iterate_tuple.py:24
    // for idx, i in uenumerate((Bytes(b"a"), Bytes(b"b"), Bytes(b"c"))):
    bytec_0 // 0x61

main_for_body@16:
    // iteration/iterate_tuple.py:25
    // self._log_with_index(idx, i)
    swap
    dup
    uncover 2
    callsub _log_with_index
    // iteration/iterate_tuple.py:24
    // for idx, i in uenumerate((Bytes(b"a"), Bytes(b"b"), Bytes(b"c"))):
    switch main_for_header_1@18 main_for_header_2@19
    // iteration/base.py:14
    // log("test_forwards_with_reverse_index")
    pushbytes "test_forwards_with_reverse_index"
    log
    intc_2 // 2
    // iteration/iterate_tuple.py:31
    // for idx, i in reversed(uenumerate(reversed((Bytes(b"a"), Bytes(b"b"), Bytes(b"c"))))):
    bytec_0 // 0x61
    intc_1 // 0

main_for_body@23:
    // iteration/iterate_tuple.py:32
    // self._log_with_index(idx, i)
    cover 2
    callsub _log_with_index
    // iteration/iterate_tuple.py:31
    // for idx, i in reversed(uenumerate(reversed((Bytes(b"a"), Bytes(b"b"), Bytes(b"c"))))):
    switch main_for_header_1@25 main_for_header_2@26
    // iteration/base.py:16
    // log("test_reverse_with_forwards_index")
    pushbytes "test_reverse_with_forwards_index"
    log
    intc_1 // 0
    // iteration/iterate_tuple.py:38
    // for idx, i in uenumerate(reversed((Bytes(b"a"), Bytes(b"b"), Bytes(b"c")))):
    bytec_1 // 0x63

main_for_body@30:
    // iteration/iterate_tuple.py:39
    // self._log_with_index(idx, i)
    swap
    dup
    uncover 2
    callsub _log_with_index
    // iteration/iterate_tuple.py:38
    // for idx, i in uenumerate(reversed((Bytes(b"a"), Bytes(b"b"), Bytes(b"c")))):
    switch main_for_header_1@32 main_for_header_2@33
    // iteration/base.py:18
    // log("test_reverse_with_reverse_index")
    pushbytes "test_reverse_with_reverse_index"
    log
    intc_2 // 2
    // iteration/iterate_tuple.py:45
    // for idx, i in reversed(uenumerate((Bytes(b"a"), Bytes(b"b"), Bytes(b"c")))):
    bytec_1 // 0x63
    intc_1 // 0

main_for_body@37:
    // iteration/iterate_tuple.py:46
    // self._log_with_index(idx, i)
    cover 2
    callsub _log_with_index
    // iteration/iterate_tuple.py:45
    // for idx, i in reversed(uenumerate((Bytes(b"a"), Bytes(b"b"), Bytes(b"c")))):
    switch main_for_header_1@39 main_for_header_2@40
    // iteration/base.py:20
    // log("test_empty")
    pushbytes "test_empty"
    log
    // iteration/base.py:22
    // log("test_break")
    pushbytes "test_break"
    log
    // iteration/iterate_tuple.py:74
    // for x in (Bytes(b"a"), Bytes(b"b"), Bytes(b"c")):
    bytec_0 // 0x61
    // iteration/iterate_tuple.py:75
    // log(x)
    log
    // iteration/base.py:24
    // log("test_tuple_target")
    pushbytes "test_tuple_target"
    log
    intc_1 // 0
    // iteration/iterate_tuple.py:81
    // for tup in uenumerate((Bytes(b"t"),)):
    pushbytes 0x74
    // iteration/iterate_tuple.py:82
    // self._log_with_index(tup[0], tup[1])
    callsub _log_with_index
    // iteration/base.py:26
    // return True
    intc_0 // 1
    return

main_for_header_2@40:
    intc_1 // 0
    // iteration/iterate_tuple.py:45
    // for idx, i in reversed(uenumerate((Bytes(b"a"), Bytes(b"b"), Bytes(b"c")))):
    bytec_0 // 0x61
    intc_2 // 2
    b main_for_body@37

main_for_header_1@39:
    intc_0 // 1
    // iteration/iterate_tuple.py:45
    // for idx, i in reversed(uenumerate((Bytes(b"a"), Bytes(b"b"), Bytes(b"c")))):
    bytec_2 // 0x62
    intc_0 // 1
    b main_for_body@37

main_for_header_2@33:
    intc_2 // 2
    // iteration/iterate_tuple.py:38
    // for idx, i in uenumerate(reversed((Bytes(b"a"), Bytes(b"b"), Bytes(b"c")))):
    bytec_0 // 0x61
    b main_for_body@30

main_for_header_1@32:
    intc_0 // 1
    // iteration/iterate_tuple.py:38
    // for idx, i in uenumerate(reversed((Bytes(b"a"), Bytes(b"b"), Bytes(b"c")))):
    bytec_2 // 0x62
    b main_for_body@30

main_for_header_2@26:
    intc_1 // 0
    // iteration/iterate_tuple.py:31
    // for idx, i in reversed(uenumerate(reversed((Bytes(b"a"), Bytes(b"b"), Bytes(b"c"))))):
    bytec_1 // 0x63
    intc_2 // 2
    b main_for_body@23

main_for_header_1@25:
    intc_0 // 1
    // iteration/iterate_tuple.py:31
    // for idx, i in reversed(uenumerate(reversed((Bytes(b"a"), Bytes(b"b"), Bytes(b"c"))))):
    bytec_2 // 0x62
    intc_0 // 1
    b main_for_body@23

main_for_header_2@19:
    intc_2 // 2
    // iteration/iterate_tuple.py:24
    // for idx, i in uenumerate((Bytes(b"a"), Bytes(b"b"), Bytes(b"c"))):
    bytec_1 // 0x63
    b main_for_body@16

main_for_header_1@18:
    intc_0 // 1
    // iteration/iterate_tuple.py:24
    // for idx, i in uenumerate((Bytes(b"a"), Bytes(b"b"), Bytes(b"c"))):
    bytec_2 // 0x62
    b main_for_body@16

main_for_header_2@12:
    // iteration/iterate_tuple.py:18
    // for i in reversed((Bytes(b"a"), Bytes(b"b"), Bytes(b"c"))):
    bytec_0 // 0x61
    intc_2 // 2
    b main_for_body@9

main_for_header_1@11:
    // iteration/iterate_tuple.py:18
    // for i in reversed((Bytes(b"a"), Bytes(b"b"), Bytes(b"c"))):
    bytec_2 // 0x62
    intc_0 // 1
    b main_for_body@9

main_for_header_2@5:
    // iteration/iterate_tuple.py:12
    // for i in (Bytes(b"a"), Bytes(b"b"), Bytes(b"c")):
    bytec_1 // 0x63
    intc_2 // 2
    b main_for_body@2

main_for_header_1@4:
    // iteration/iterate_tuple.py:12
    // for i in (Bytes(b"a"), Bytes(b"b"), Bytes(b"c")):
    bytec_2 // 0x62
    intc_0 // 1
    b main_for_body@2


// test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
_log_with_index:
    // iteration/base.py:31-32
    // @subroutine
    // def _log_with_index(self, idx: UInt64, value: Bytes) -> None:
    proto 2 0
    // iteration/base.py:33
    // digits = Bytes(b"0123456789")
    pushbytes 0x30313233343536373839
    // iteration/base.py:34
    // log(digits[idx], value, sep="=")
    frame_dig -2
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    pushbytes "="
    concat
    frame_dig -1
    concat
    log
    retsub
