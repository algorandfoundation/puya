contract test_cases.iteration.iterate_indexable.IndexableIterationTest:
    program approval:
        subroutine test_cases.iteration.base.IterationTestBase.approval_program() -> bool:
            block@0: // L7
                (log "test_forwards")
                test_cases.iteration.iterate_indexable.IndexableIterationTest.test_forwards()
                (log "test_reversed")
                test_cases.iteration.iterate_indexable.IndexableIterationTest.test_reversed()
                (log "test_forwards_with_forwards_index")
                test_cases.iteration.iterate_indexable.IndexableIterationTest.test_forwards_with_forwards_index()
                (log "test_forwards_with_reverse_index")
                test_cases.iteration.iterate_indexable.IndexableIterationTest.test_forwards_with_reverse_index()
                (log "test_reverse_with_forwards_index")
                test_cases.iteration.iterate_indexable.IndexableIterationTest.test_reverse_with_forwards_index()
                (log "test_reverse_with_reverse_index")
                test_cases.iteration.iterate_indexable.IndexableIterationTest.test_reverse_with_reverse_index()
                (log "test_empty")
                test_cases.iteration.iterate_indexable.IndexableIterationTest.test_empty()
                (log "test_break")
                test_cases.iteration.iterate_indexable.IndexableIterationTest.test_break()
                return 1u
        
        subroutine test_cases.iteration.iterate_indexable.IndexableIterationTest.test_forwards() -> void:
            block@0: // L9
                let bytes_length%0#0: uint64 = 3u
                let item_index_internal%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L12
                let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
                let continue_looping%0#0: bool = (< item_index_internal%0#1 bytes_length%0#0)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L13
                let i#0: bytes = (extract3 0x616263 item_index_internal%0#1 1u)
                (log i#0)
                let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
                goto block@1
            block@4: // after_for_L12
                return 
        
        subroutine test_cases.iteration.iterate_indexable.IndexableIterationTest.test_reversed() -> void:
            block@0: // L15
                let bytes_length%0#0: uint64 = 3u
                goto block@1
            block@1: // for_header_L18
                let reverse_index_internal%0#1: uint64 = φ(bytes_length%0#0 <- block@0, reverse_index_internal%0#2 <- block@2)
                goto reverse_index_internal%0#1 ? block@2 : block@4
            block@2: // for_body_L19
                let reverse_index_internal%0#2: uint64 = (- reverse_index_internal%0#1 1u)
                let i#0: bytes = (extract3 0x616263 reverse_index_internal%0#2 1u)
                (log i#0)
                goto block@1
            block@4: // after_for_L18
                return 
        
        subroutine test_cases.iteration.iterate_indexable.IndexableIterationTest.test_forwards_with_forwards_index() -> void:
            block@0: // L21
                let bytes_length%0#0: uint64 = 3u
                let item_index_internal%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L24
                let idx#0: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
                let continue_looping%0#0: bool = (< idx#0 bytes_length%0#0)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L25
                let i#0: bytes = (extract3 0x616263 idx#0 1u)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
                let item_index_internal%0#2: uint64 = (+ idx#0 1u)
                goto block@1
            block@4: // after_for_L24
                return 
        
        subroutine test_cases.iteration.base.IterationTestBase._log_with_index(idx: uint64, value: bytes) -> void:
            block@0: // L29
                let index_plus_1%0#0: uint64 = (+ idx#0 1u)
                let tmp%0#0: bytes = (substring3 0x30313233343536373839 idx#0 index_plus_1%0#0)
                let tmp%1#0: bytes = (concat tmp%0#0 "=")
                let tmp%2#0: bytes = (concat tmp%1#0 value#0)
                (log tmp%2#0)
                return 
        
        subroutine test_cases.iteration.iterate_indexable.IndexableIterationTest.test_forwards_with_reverse_index() -> void:
            block@0: // L27
                let bytes_length%0#0: uint64 = 3u
                let item_index_internal%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L30
                let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
                let reverse_index_internal%0#1: uint64 = φ(bytes_length%0#0 <- block@0, idx#0 <- block@2)
                goto reverse_index_internal%0#1 ? block@2 : block@4
            block@2: // for_body_L31
                let idx#0: uint64 = (- reverse_index_internal%0#1 1u)
                let i#0: bytes = (extract3 0x616263 item_index_internal%0#1 1u)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
                let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
                goto block@1
            block@4: // after_for_L30
                return 
        
        subroutine test_cases.iteration.iterate_indexable.IndexableIterationTest.test_reverse_with_forwards_index() -> void:
            block@0: // L33
                let bytes_length%0#0: uint64 = 3u
                let item_index_internal%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L36
                let idx#0: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
                let reverse_index_internal%0#1: uint64 = φ(bytes_length%0#0 <- block@0, reverse_index_internal%0#2 <- block@2)
                goto reverse_index_internal%0#1 ? block@2 : block@4
            block@2: // for_body_L37
                let reverse_index_internal%0#2: uint64 = (- reverse_index_internal%0#1 1u)
                let i#0: bytes = (extract3 0x616263 reverse_index_internal%0#2 1u)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
                let item_index_internal%0#2: uint64 = (+ idx#0 1u)
                goto block@1
            block@4: // after_for_L36
                return 
        
        subroutine test_cases.iteration.iterate_indexable.IndexableIterationTest.test_reverse_with_reverse_index() -> void:
            block@0: // L39
                let bytes_length%0#0: uint64 = 3u
                goto block@1
            block@1: // for_header_L42
                let reverse_index_internal%0#1: uint64 = φ(bytes_length%0#0 <- block@0, idx#0 <- block@2)
                goto reverse_index_internal%0#1 ? block@2 : block@4
            block@2: // for_body_L43
                let idx#0: uint64 = (- reverse_index_internal%0#1 1u)
                let i#0: bytes = (extract3 0x616263 idx#0 1u)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#0)
                goto block@1
            block@4: // after_for_L42
                return 
        
        subroutine test_cases.iteration.iterate_indexable.IndexableIterationTest.test_empty() -> void:
            block@0: // L45
                let bytes_length%0#0: uint64 = 0u
                let item_index_internal%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L48
                let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
                let continue_looping%0#0: bool = (< item_index_internal%0#1 bytes_length%0#0)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L49
                let i#0: bytes = (extract3 0x item_index_internal%0#1 1u)
                (log i#0)
                let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
                goto block@1
            block@4: // after_for_L48
                let bytes_length%1#0: uint64 = 0u
                goto block@5
            block@5: // for_header_L50
                let reverse_index_internal%1#1: uint64 = φ(bytes_length%1#0 <- block@4, reverse_index_internal%1#2 <- block@6)
                goto reverse_index_internal%1#1 ? block@6 : block@8
            block@6: // for_body_L51
                let reverse_index_internal%1#2: uint64 = (- reverse_index_internal%1#1 1u)
                let i#1: bytes = (extract3 0x reverse_index_internal%1#2 1u)
                (log i#1)
                goto block@5
            block@8: // after_for_L50
                let bytes_length%2#0: uint64 = 0u
                let item_index_internal%2#0: uint64 = 0u
                goto block@9
            block@9: // for_header_L52
                let idx#0: uint64 = φ(item_index_internal%2#0 <- block@8, item_index_internal%2#2 <- block@10)
                let continue_looping%2#0: bool = (< idx#0 bytes_length%2#0)
                goto continue_looping%2#0 ? block@10 : block@12
            block@10: // for_body_L53
                let i#2: bytes = (extract3 0x idx#0 1u)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#0, i#2)
                let item_index_internal%2#2: uint64 = (+ idx#0 1u)
                goto block@9
            block@12: // after_for_L52
                let bytes_length%3#0: uint64 = 0u
                let item_index_internal%3#0: uint64 = 0u
                goto block@13
            block@13: // for_header_L54
                let item_index_internal%3#1: uint64 = φ(item_index_internal%3#0 <- block@12, item_index_internal%3#2 <- block@14)
                let reverse_index_internal%3#1: uint64 = φ(bytes_length%3#0 <- block@12, idx#1 <- block@14)
                goto reverse_index_internal%3#1 ? block@14 : block@16
            block@14: // for_body_L55
                let idx#1: uint64 = (- reverse_index_internal%3#1 1u)
                let i#3: bytes = (extract3 0x item_index_internal%3#1 1u)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#1, i#3)
                let item_index_internal%3#2: uint64 = (+ item_index_internal%3#1 1u)
                goto block@13
            block@16: // after_for_L54
                let bytes_length%4#0: uint64 = 0u
                let item_index_internal%4#0: uint64 = 0u
                goto block@17
            block@17: // for_header_L56
                let idx#2: uint64 = φ(item_index_internal%4#0 <- block@16, item_index_internal%4#2 <- block@18)
                let reverse_index_internal%4#1: uint64 = φ(bytes_length%4#0 <- block@16, reverse_index_internal%4#2 <- block@18)
                goto reverse_index_internal%4#1 ? block@18 : block@20
            block@18: // for_body_L57
                let reverse_index_internal%4#2: uint64 = (- reverse_index_internal%4#1 1u)
                let i#4: bytes = (extract3 0x reverse_index_internal%4#2 1u)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#2, i#4)
                let item_index_internal%4#2: uint64 = (+ idx#2 1u)
                goto block@17
            block@20: // after_for_L56
                let bytes_length%5#0: uint64 = 0u
                goto block@21
            block@21: // for_header_L58
                let reverse_index_internal%5#1: uint64 = φ(bytes_length%5#0 <- block@20, idx#3 <- block@22)
                goto reverse_index_internal%5#1 ? block@22 : block@24
            block@22: // for_body_L59
                let idx#3: uint64 = (- reverse_index_internal%5#1 1u)
                let i#5: bytes = (extract3 0x idx#3 1u)
                test_cases.iteration.base.IterationTestBase._log_with_index(idx#3, i#5)
                goto block@21
            block@24: // after_for_L58
                return 
        
        subroutine test_cases.iteration.iterate_indexable.IndexableIterationTest.test_break() -> void:
            block@0: // L61
                let bytes_length%0#0: uint64 = 3u
                goto bytes_length%0#0 ? block@2 : block@3
            block@2: // for_body_L65
                let b#0: bytes = 0x61
                (log b#0)
                goto block@3
            block@3: // after_for_L64
                return 
    
    program clear-state:
        subroutine test_cases.iteration.base.IterationTestBase.clear_state_program() -> bool:
            block@0: // L26
                return 1u