contract MyContract
{
  globals {
    ['case_one']: algopy.UInt64
    ['case_two']: algopy.UInt64
  }
  
  approval_program(): bool
  {
    this.case_one: algopy.UInt64 = 1u
    this.case_two: algopy.UInt64 = 2u
    this::match_uint64()
    this::match_biguint()
    this::match_bytes()
    this::match_address()
    this::match_attributes()
    this::match_bools()
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
  
  subroutine match_uint64(): None
  {
    n: algopy.UInt64 = txn<NumAppArgs>()
    switch (n) {
      case 0u: {
        hello: algopy.Bytes = 'Hello'
        log(hello)
      }
      case 10u: {
        hello: algopy.Bytes = 'Hello There'
        log(hello)
      }
    }
  }
  
  subroutine match_bytes(): None
  {
    n: algopy.Bytes = txna<ApplicationArgs, 0>()
    switch (n) {
      case '': {
        hello: algopy.Bytes = 'Hello bytes'
        log(hello)
      }
      case '10': {
        hello: algopy.Bytes = 'Hello There bytes'
        log(hello)
      }
    }
  }
  
  subroutine match_biguint(): None
  {
    n: algopy.BigUInt = itob(txn<NumAppArgs>()) b* 10n
    switch (n) {
      case 0n: {
        hello: algopy.Bytes = 'Hello biguint'
        log(hello)
      }
      case 10n: {
        hello: algopy.Bytes = 'Hello There biguint'
        log(hello)
      }
    }
  }
  
  subroutine match_address(): None
  {
    n: algopy.Account = txn<Sender>()
    switch (n) {
      case Address("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ"): {
        hello: algopy.Bytes = 'Hello address'
        log(hello)
      }
      case Address("VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA"): {
        hello: algopy.Bytes = 'Hello There address'
        log(hello)
      }
    }
  }
  
  subroutine match_attributes(): None
  {
    n: algopy.UInt64 = txn<NumAppArgs>()
    switch (n) {
      case this.case_one: {
        hello: algopy.Bytes = 'Hello one'
        log(hello)
      }
      case this.case_two: {
        hello: algopy.Bytes = 'Hello two'
        log(hello)
      }
      case _: {
        hello: algopy.Bytes = 'Hello default'
        log(hello)
      }
    }
  }
  
  subroutine match_bools(): None
  {
    n: bool = txn<NumAppArgs>() > 0u
    switch (n) {
      case true: {
        hello: algopy.Bytes = 'Hello True'
        log(hello)
      }
      case false: {
        hello: algopy.Bytes = 'Hello False'
        log(hello)
      }
    }
  }
}