// Op                                                            Stack (out)
// test_cases.match.counter.Counter.approval_program() -> uint64:
main_block@0:
    txn ApplicationID                                            app_id%0#0
    bnz main_after_if_else@2
    // Implicit fall through to main_on_create@1

main_on_create@1:
    callsub __init__
    // Implicit fall through to main_after_if_else@2

main_after_if_else@2:
    // match/counter.py:9
    // match algopy.Txn.on_completion:
    txn OnCompletion                                             tmp%0#0
    // match/counter.py:9-15
    // match algopy.Txn.on_completion:
    //     case algopy.OnCompleteAction.NoOp:
    //         self.increment_counter()
    //         return True
    //     case _:
    //         # reject all OnCompletionAction's other than NoOp
    //         return False
    bnz main_switch_case_default@4
    // Implicit fall through to main_switch_case_0@3

main_switch_case_0@3:
    // match/counter.py:11
    // self.increment_counter()
    callsub increment_counter
    // match/counter.py:12
    // return True
    int 1                                                        1
    return

main_switch_case_default@4:
    // match/counter.py:15
    // return False
    int 0                                                        0
    return


// test_cases.match.counter.Counter.__init__() -> void:
__init__:
    // match/counter.py:5
    // def __init__(self) -> None:
    proto 0 0

__init___block@0:
    // match/counter.py:6
    // self.counter = algopy.UInt64(0)
    byte "counter"                                               "counter"
    int 0                                                        "counter",0
    app_global_put
    retsub


// test_cases.match.counter.Counter.increment_counter() -> void:
increment_counter:
    // match/counter.py:20-21
    // @algopy.subroutine
    // def increment_counter(self) -> None:
    proto 0 0

increment_counter_block@0:
    // match/counter.py:22
    // self.counter += 1
    int 0                                                        0
    byte "counter"                                               0,"counter"
    app_global_get_ex                                            maybe_value%0#0,maybe_exists%0#0
    assert // check self.counter exists                          maybe_value%0#0
    l-load maybe_value%0#0 0                                     maybe_value%0#0
    int 1                                                        maybe_value%0#0,1
    +                                                            new_state_value%0#0
    byte "counter"                                               new_state_value%0#0,"counter"
    l-load new_state_value%0#0 1                                 "counter",new_state_value%0#0
    app_global_put
    retsub


