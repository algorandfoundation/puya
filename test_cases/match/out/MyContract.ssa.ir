contract test_cases.match.contract.MyContract:
    program approval:
        subroutine test_cases.match.contract.MyContract.approval_program() -> uint64:
            block@0: // L5
                (app_global_put "case_one" 1u)
                (app_global_put "case_two" 2u)
                test_cases.match.contract.MyContract.match_uint64()
                test_cases.match.contract.MyContract.match_biguint()
                test_cases.match.contract.MyContract.match_bytes()
                test_cases.match.contract.MyContract.match_address()
                test_cases.match.contract.MyContract.match_attributes()
                test_cases.match.contract.MyContract.match_bools()
                return 1u
        
        subroutine test_cases.match.contract.MyContract.match_uint64() -> void:
            block@0: // L16
                let n#0: uint64 = (txn NumAppArgs)
                switch n#0 {0u => block@1, 10u => block@2, * => block@3}
            block@1: // switch_case_0_L21
                let hello#0: bytes = "Hello"
                (log hello#0)
                goto block@4
            block@2: // switch_case_1_L24
                let hello#1: bytes = "Hello There"
                (log hello#1)
                goto block@4
            block@3: // switch_case_default_L19
                goto block@4
            block@4: // switch_case_next_L19
                return 
        
        subroutine test_cases.match.contract.MyContract.match_biguint() -> void:
            block@0: // L38
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bytes = (itob tmp%0#0)
                let n#0: bytes = (b* tmp%1#0 10b)
                switch n#0 {0b => block@1, 10b => block@2, * => block@3}
            block@1: // switch_case_0_L43
                let hello#0: bytes = "Hello biguint"
                (log hello#0)
                goto block@4
            block@2: // switch_case_1_L46
                let hello#1: bytes = "Hello There biguint"
                (log hello#1)
                goto block@4
            block@3: // switch_case_default_L41
                goto block@4
            block@4: // switch_case_next_L41
                return 
        
        subroutine test_cases.match.contract.MyContract.match_bytes() -> void:
            block@0: // L27
                let n#0: bytes = (txna ApplicationArgs 0)
                switch n#0 {"" => block@1, "10" => block@2, * => block@3}
            block@1: // switch_case_0_L32
                let hello#0: bytes = "Hello bytes"
                (log hello#0)
                goto block@4
            block@2: // switch_case_1_L35
                let hello#1: bytes = "Hello There bytes"
                (log hello#1)
                goto block@4
            block@3: // switch_case_default_L30
                goto block@4
            block@4: // switch_case_next_L30
                return 
        
        subroutine test_cases.match.contract.MyContract.match_address() -> void:
            block@0: // L49
                let n#0: bytes = (txn Sender)
                switch n#0 {addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ => block@1, addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA => block@2, * => block@3}
            block@1: // switch_case_0_L54
                let hello#0: bytes = "Hello address"
                (log hello#0)
                goto block@4
            block@2: // switch_case_1_L57
                let hello#1: bytes = "Hello There address"
                (log hello#1)
                goto block@4
            block@3: // switch_case_default_L52
                goto block@4
            block@4: // switch_case_next_L52
                return 
        
        subroutine test_cases.match.contract.MyContract.match_attributes() -> void:
            block@0: // L60
                let n#0: uint64 = (txn NumAppArgs)
                let (app_global_get_ex_value%0#0: uint64, app_global_get_ex_did_exist%1#0: uint64) = (app_global_get_ex 0u "case_one")
                (assert app_global_get_ex_did_exist%1#0) // check case_one exists
                let (app_global_get_ex_value%2#0: uint64, app_global_get_ex_did_exist%3#0: uint64) = (app_global_get_ex 0u "case_two")
                (assert app_global_get_ex_did_exist%3#0) // check case_two exists
                switch n#0 {app_global_get_ex_value%0#0 => block@1, app_global_get_ex_value%2#0 => block@2, * => block@3}
            block@1: // switch_case_0_L65
                let hello#0: bytes = "Hello one"
                (log hello#0)
                goto block@4
            block@2: // switch_case_1_L68
                let hello#1: bytes = "Hello two"
                (log hello#1)
                goto block@4
            block@3: // switch_case_default_L63
                let hello#2: bytes = "Hello default"
                (log hello#2)
                goto block@4
            block@4: // switch_case_next_L63
                return 
        
        subroutine test_cases.match.contract.MyContract.match_bools() -> void:
            block@0: // L74
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let n#0: uint64 = (> tmp%0#0 0u)
                switch n#0 {1u => block@1, 0u => block@2, * => block@3}
            block@1: // switch_case_0_L79
                let hello#0: bytes = "Hello True"
                (log hello#0)
                goto block@4
            block@2: // switch_case_1_L82
                let hello#1: bytes = "Hello False"
                (log hello#1)
                goto block@4
            block@3: // switch_case_default_L77
                goto block@4
            block@4: // switch_case_next_L77
                return 
    
    program clear-state:
        subroutine test_cases.match.contract.MyContract.clear_state_program() -> uint64:
            block@0: // L85
                return 1u