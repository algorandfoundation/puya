contract test_cases.match.counter.Counter:
    program approval:
        subroutine test_cases.match.counter.Counter.approval_program() -> bool:
            block@0: // L8
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L5
                test_cases.match.counter.Counter.__init__()
                goto block@2
            block@2: // after_if_else_L5
                let tmp%0#0: uint64 = (txn OnCompletion)
                goto tmp%0#0 ? block@4 : block@3
            block@3: // switch_case_0_L11
                test_cases.match.counter.Counter.increment_counter()
                return 1u
            block@4: // switch_case_default_L15
                return 0u
        
        subroutine test_cases.match.counter.Counter.increment_counter() -> void:
            block@0: // L20
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "counter")
                (assert maybe_exists%0#0) // check self.counter exists
                let new_state_value%0#0: uint64 = (+ maybe_value%0#0 1u)
                (app_global_put "counter" new_state_value%0#0)
                return 
        
        subroutine test_cases.match.counter.Counter.__init__() -> void:
            block@0: // L5
                (app_global_put "counter" 0u)
                return 
    
    program clear-state:
        subroutine test_cases.match.counter.Counter.clear_state_program() -> bool:
            block@0: // L17
                return 1u