main test_cases.match.counter.Counter.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.match.counter.Counter.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = test_cases.match.counter.Counter.approval_program()
        return tmp%1#0

subroutine test_cases.match.counter.Counter.__init__() -> void:
    block@0: // L5
        (app_global_put "counter" 0u)
        return 

subroutine test_cases.match.counter.Counter.approval_program() -> bool:
    block@0: // L8
        let tmp%0#0: uint64 = (txn OnCompletion)
        switch tmp%0#0 {NoOp => block@1, * => block@2}
    block@1: // switch_case_0_L11
        test_cases.match.counter.Counter.increment_counter()
        return 1u
    block@2: // switch_case_default_L15
        return 0u

subroutine test_cases.match.counter.Counter.increment_counter() -> void:
    block@0: // L20
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "counter")
        (assert maybe_exists%0#0) // check self.counter exists
        let materialized_values%0#0: uint64 = (+ maybe_value%0#0 1u)
        (app_global_put "counter" materialized_values%0#0)
        return 