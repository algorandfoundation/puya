main test_cases.match.contract.MyContract.approval_program:
    block@0: // L5
        (app_global_put "case_one" 1u)
        (app_global_put "case_two" 2u)
        let n#0: uint64 = (txn NumAppArgs)
        switch n#0 {0u => block@2, 10u => block@3, * => block@5}
    block@2: // switch_case_0_L21
        (log 0x48656c6c6f)
        goto block@5
    block@3: // switch_case_1_L24
        (log 0x48656c6c6f205468657265)
        goto block@5
    block@5: // switch_case_next_L19
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: biguint = (itob tmp%0#0)
        let n#1: biguint = (b* tmp%1#0 10b)
        switch n#1 {0b => block@8, 10b => block@9, * => block@11}
    block@8: // switch_case_0_L43
        (log 0x48656c6c6f2062696775696e74)
        goto block@11
    block@9: // switch_case_1_L46
        (log 0x48656c6c6f2054686572652062696775696e74)
        goto block@11
    block@11: // switch_case_next_L41
        let n#2: bytes = (txna ApplicationArgs 0)
        switch n#2 {0x => block@14, 0x3130 => block@15, * => block@17}
    block@14: // switch_case_0_L32
        (log 0x48656c6c6f206279746573)
        goto block@17
    block@15: // switch_case_1_L35
        (log 0x48656c6c6f205468657265206279746573)
        goto block@17
    block@17: // switch_case_next_L30
        let n#3: bytes[32] = (txn Sender)
        switch n#3 {addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ => block@20, addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA => block@21, * => block@23}
    block@20: // switch_case_0_L54
        (log 0x48656c6c6f2061646472657373)
        goto block@23
    block@21: // switch_case_1_L57
        (log 0x48656c6c6f2054686572652061646472657373)
        goto block@23
    block@23: // switch_case_next_L52
        let n#4: uint64 = (txn NumAppArgs)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "case_one")
        (assert maybe_exists%0#0) // check self.case_one exists
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "case_two")
        (assert maybe_exists%1#0) // check self.case_two exists
        switch n#4 {maybe_value%0#0 => block@26, maybe_value%1#0 => block@27, * => block@28}
    block@26: // switch_case_0_L65
        (log 0x48656c6c6f206f6e65)
        goto block@29
    block@27: // switch_case_1_L68
        (log 0x48656c6c6f2074776f)
        goto block@29
    block@28: // switch_case_default_L71
        (log 0x48656c6c6f2064656661756c74)
        goto block@29
    block@29: // switch_case_next_L63
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let n#5: bool = (> tmp%0#1 0u)
        goto_nth [block@33, block@32][n#5] else goto block@35
    block@32: // switch_case_0_L79
        (log 0x48656c6c6f2054727565)
        goto block@35
    block@33: // switch_case_1_L82
        (log 0x48656c6c6f2046616c7365)
        goto block@35
    block@35: // switch_case_next_L77
        return 1u