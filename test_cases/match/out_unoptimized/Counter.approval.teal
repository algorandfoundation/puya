#pragma version 10
#pragma typetrack false

// test_cases.match.counter.Counter.approval_program() -> uint64:
main:
    intcblock 0 1
    bytecblock "counter"
    b main_block@0

main_block@0:
    txn ApplicationID
    bnz main_after_if_else@2
    b main_call___init__@1

main_call___init__@1:
    callsub __init__
    b main_after_if_else@2

main_after_if_else@2:
    // match/counter.py:9
    // match algopy.Txn.on_completion:
    txn OnCompletion
    // match/counter.py:10
    // case algopy.OnCompleteAction.NoOp:
    intc_0 // NoOp
    // match/counter.py:9-15
    // match algopy.Txn.on_completion:
    //     case algopy.OnCompleteAction.NoOp:
    //         self.increment_counter()
    //         return True
    //     case _:
    //         # reject all OnCompletionAction's other than NoOp
    //         return False
    uncover 1
    match main_switch_case_0@3
    b main_switch_case_default@4

main_switch_case_default@4:
    // match/counter.py:14-15
    // # reject all OnCompletionAction's other than NoOp
    // return False
    err

main_switch_case_0@3:
    // match/counter.py:11
    // self.increment_counter()
    callsub increment_counter
    // match/counter.py:12
    // return True
    intc_1 // 1
    return


// test_cases.match.counter.Counter.__init__() -> void:
__init__:
    b __init___block@0

__init___block@0:
    // match/counter.py:6
    // self.counter = algopy.UInt64(0)
    bytec_0 // "counter"
    intc_0 // 0
    app_global_put
    retsub


// test_cases.match.counter.Counter.increment_counter() -> void:
increment_counter:
    b increment_counter_block@0

increment_counter_block@0:
    // match/counter.py:22
    // self.counter += 1
    intc_0 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    intc_1 // 1
    +
    bytec_0 // "counter"
    uncover 1
    app_global_put
    retsub
