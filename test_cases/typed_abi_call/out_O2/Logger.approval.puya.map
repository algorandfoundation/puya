{
  "version": 3,
  "sources": [
    "../logger.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAuIK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAvIL;;;AAuIK;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAnIL;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAqIe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAFV;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AAvGL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA+HmB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AACJ;;;AAAA;;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;;;AAAA;AAAA;AA1BV;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AA5FL;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAiGgB;AAAA;;AAAA;AAAmB;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AACvB;;AAAM;AAAN;AACY;;AAnGxB;AAmGwB;AAAkB;AAAlB;AAAZ;AACA;AAAA;;AAAA;AARP;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAtFL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AA0Fe;AAAA;;AAAA;AAAc;AAAA;;AAAA;AAAe;;AAAI;AAAJ;AAAO;;AAAK;;;AAAL;AAJ9C;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAxEL;;;AAAA;AAAA;;;AAAA;AAAA;;;AA8E2B;;;AAAR;AACJ;;AAAA;AAAP;AACiB;;;AAAR;AACF;;AAAA;AAAP;AAEO;AADG;;;AACH;AAAP;AAXH;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AA1DL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAgE4B;;;AAAR;AACI;;AAAT;;AAAA;AAAP;AACkB;;;AAAR;AACI;;AAAP;;AAAA;AAAP;AACkB;;;AAAR;AACI;;AAAP;;AAAA;AAAP;AAXH;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAtDL;;;AAwDuB;;;AAAR;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAlDL;;;AAAA;AAoDuB;AAAR;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA9CL;;;AAAA;;;AAgDe;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA1CL;;;AAAA;;;AA4Ce;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAtCL;;;AAwCQ;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAlCL;;;AAAA;AAAA;;;AAAA;;;AAAA;AAoCY;;AAAA;;AAAA;AAAY;;AAAA;AAAe;AAAA;;AAAA;AAAA;AAA/B;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA9BL;;;AAgCY;;;AAAJ;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA1BL;;;AA4B8B;AAAA;AAAlB;;;;;;;;;;;;;AAAA;;AAAA;AAAJ;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAtBL;;;AAwBY;;;AAAJ;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAlBL;;;AAoBQ;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAdL;;;AAgBQ;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AANL;;;AAQe;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAFV;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;;;AAGe;AAAK;;;AAAL;AAAP;AACY;;;AAAL;AAAP;AAHH;;AADL;;AAAA;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 64 8"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x6563686f3a20 0x00066563686f3a20 0x0004"
    },
    "33": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "35": {
      "op": "bz main_bare_routing@26",
      "stack_out": []
    },
    "38": {
      "op": "pushbytess 0xc77212bc 0x9bf81913 0xb862ee19 0x3c1058d9 0x6af45930 0xb4b4334e 0x6eed7ec3 0xb500e111 0x46b50faf 0x0437b17e 0x4a444c77 0x2659e818 0xa9fb6cf1 0xd8cc363b 0xd6c2ac7f 0x48142d5e 0x16e03919 0xab271ce4 0xba0b4381 0xddd07185 0xdc4f1992 // method \"is_a_b(byte[],byte[])void\", method \"echo(string)string\", method \"no_args()uint64\", method \"log(uint64)void\", method \"log(uint512)void\", method \"log(string)void\", method \"log(bool)void\", method \"log(byte[])void\", method \"log(uint64,address,uint64)void\", method \"log(address)void\", method \"echo_native_string(string)string\", method \"echo_native_bytes(byte[])byte[]\", method \"echo_native_uint64(uint64)uint64\", method \"echo_native_biguint(uint512)uint512\", method \"echo_resource_by_index(asset,application,account)(uint64,uint64,address)\", method \"echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)\", method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\", method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\", method \"return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]\", method \"logs_are_equal((uint64,string),(uint64,string))bool\", method \"echo_log_struct((uint64,string))(uint64,string)\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_log_struct((uint64,string))(uint64,string))",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(no_args()uint64)",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])"
      ],
      "stack_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(echo_log_struct((uint64,string))(uint64,string))"
      ]
    },
    "145": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_log_struct((uint64,string))(uint64,string))",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(no_args()uint64)",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(echo_log_struct((uint64,string))(uint64,string))",
        "tmp%2#0"
      ]
    },
    "148": {
      "op": "match main_is_a_b_route@3 main_echo_route@4 main_no_args_route@5 main_log_route@6 main_log_route@7 main_log_route@8 main_log_route@9 main_log_route@10 main_log_route@11 main_log_route@12 main_echo_native_string_route@13 main_echo_native_bytes_route@14 main_echo_native_uint64_route@15 main_echo_native_biguint_route@16 main_echo_resource_by_index_route@17 main_echo_resource_by_value_route@18 main_echo_native_tuple_route@19 main_echo_nested_tuple_route@20 main_return_args_after_14th_route@21 main_logs_are_equal_route@22 main_echo_log_struct_route@23",
      "stack_out": []
    },
    "192": {
      "block": "main_after_if_else@30",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "193": {
      "op": "return",
      "stack_out": []
    },
    "194": {
      "block": "main_echo_log_struct_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0"
      ]
    },
    "196": {
      "op": "!",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "197": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "198": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "200": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "201": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75"
      ],
      "stack_out": [
        "0x151f7c75"
      ]
    },
    "202": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "0x151f7c75",
        "log#0"
      ],
      "stack_out": [
        "0x151f7c75",
        "log#0"
      ]
    },
    "205": {
      "op": "concat",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0"
      ]
    },
    "206": {
      "op": "log",
      "stack_out": []
    },
    "207": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "208": {
      "op": "return",
      "stack_out": []
    },
    "209": {
      "block": "main_logs_are_equal_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "211": {
      "op": "!",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "212": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "213": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "215": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "216": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "219": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "220": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "0"
      ]
    },
    "221": {
      "op": "extract_uint64",
      "defined_out": [
        "log_1.level#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "log_1.level#0"
      ]
    },
    "222": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "log_1.level#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "224": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "log_1.level#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "log_1.level#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "8"
      ]
    },
    "225": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%9#0",
        "log_1.level#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "log_1.level#0",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "226": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "log_1.level#0",
        "aggregate%extract_uint16%9#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "228": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%9#0",
        "aggregate%len%3#0",
        "log_1.level#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "log_1.level#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%len%3#0"
      ]
    },
    "229": {
      "op": "uncover 3",
      "stack_out": [
        "log_1.level#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%len%3#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "231": {
      "op": "cover 2",
      "stack_out": [
        "log_1.level#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%len%3#0"
      ]
    },
    "233": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%5#0",
        "log_1.level#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "aggregate%substring3%5#0"
      ]
    },
    "234": {
      "op": "extract 2 0",
      "defined_out": [
        "log_1.level#0",
        "log_1.message#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0"
      ]
    },
    "237": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "log_1.level#0",
        "log_1.message#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0"
      ]
    },
    "240": {
      "op": "dup",
      "defined_out": [
        "log_1.level#0",
        "log_1.message#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)"
      ]
    },
    "241": {
      "op": "intc_1 // 0",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)",
        "0"
      ]
    },
    "242": {
      "op": "extract_uint64",
      "defined_out": [
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "log_2.level#0"
      ]
    },
    "243": {
      "op": "dig 1",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "log_2.level#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)"
      ]
    },
    "245": {
      "op": "intc_3 // 8",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "log_2.level#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)",
        "8"
      ]
    },
    "246": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "log_2.level#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "247": {
      "op": "dig 2",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "log_2.level#0",
        "aggregate%extract_uint16%10#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)"
      ]
    },
    "249": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%len%4#0",
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "log_2.level#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%len%4#0"
      ]
    },
    "250": {
      "op": "uncover 3",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%len%4#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0"
      ]
    },
    "252": {
      "op": "cover 2",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%len%4#0"
      ]
    },
    "254": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%6#0",
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0",
        "aggregate%substring3%6#0"
      ]
    },
    "255": {
      "op": "extract 2 0",
      "defined_out": [
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0",
        "log_2.message#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0",
        "log_2.message#0"
      ]
    },
    "258": {
      "op": "uncover 3",
      "stack_out": [
        "log_1.message#0",
        "log_2.level#0",
        "log_2.message#0",
        "log_1.level#0"
      ]
    },
    "260": {
      "op": "uncover 2",
      "stack_out": [
        "log_1.message#0",
        "log_2.message#0",
        "log_1.level#0",
        "log_2.level#0"
      ]
    },
    "262": {
      "op": "==",
      "defined_out": [
        "log_1.message#0",
        "log_2.message#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "log_1.message#0",
        "log_2.message#0",
        "tmp%0#0"
      ]
    },
    "263": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "log_1.message#0",
        "log_2.message#0"
      ]
    },
    "265": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#1"
      ]
    },
    "266": {
      "op": "&&",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "267": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "0x00"
      ]
    },
    "270": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%2#1",
        "0x00",
        "0"
      ]
    },
    "271": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%2#1"
      ]
    },
    "273": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0"
      ]
    },
    "274": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "275": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "276": {
      "op": "concat",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "277": {
      "op": "log",
      "stack_out": []
    },
    "278": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "279": {
      "op": "return",
      "stack_out": []
    },
    "280": {
      "block": "main_return_args_after_14th_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "282": {
      "op": "!",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "283": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "284": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "286": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "287": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0"
      ]
    },
    "290": {
      "op": "extract 0 1",
      "defined_out": [
        "a15#0"
      ],
      "stack_out": [
        "a15#0"
      ]
    },
    "293": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a15#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%1#0"
      ],
      "stack_out": [
        "a15#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%1#0"
      ]
    },
    "296": {
      "op": "extract 1 1",
      "defined_out": [
        "a15#0",
        "a16#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0"
      ]
    },
    "299": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a15#0",
        "a16#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0"
      ]
    },
    "302": {
      "op": "extract 2 1",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0"
      ]
    },
    "305": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0"
      ]
    },
    "308": {
      "op": "extract 3 1",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0"
      ]
    },
    "311": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0"
      ]
    },
    "314": {
      "op": "extract 4 4",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0"
      ]
    },
    "317": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0"
      ]
    },
    "320": {
      "op": "extract 8 1",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "a20#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "a20#0"
      ]
    },
    "323": {
      "op": "uncover 5",
      "stack_out": [
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "a20#0",
        "a15#0"
      ]
    },
    "325": {
      "op": "uncover 5",
      "stack_out": [
        "a17#0",
        "a18#0",
        "a19#0",
        "a20#0",
        "a15#0",
        "a16#0"
      ]
    },
    "327": {
      "op": "concat",
      "defined_out": [
        "a17#0",
        "a18#0",
        "a19#0",
        "a20#0",
        "aggregate%head%18#0"
      ],
      "stack_out": [
        "a17#0",
        "a18#0",
        "a19#0",
        "a20#0",
        "aggregate%head%18#0"
      ]
    },
    "328": {
      "op": "uncover 4",
      "stack_out": [
        "a18#0",
        "a19#0",
        "a20#0",
        "aggregate%head%18#0",
        "a17#0"
      ]
    },
    "330": {
      "op": "concat",
      "defined_out": [
        "a18#0",
        "a19#0",
        "a20#0",
        "aggregate%head%19#0"
      ],
      "stack_out": [
        "a18#0",
        "a19#0",
        "a20#0",
        "aggregate%head%19#0"
      ]
    },
    "331": {
      "op": "uncover 3",
      "stack_out": [
        "a19#0",
        "a20#0",
        "aggregate%head%19#0",
        "a18#0"
      ]
    },
    "333": {
      "op": "concat",
      "defined_out": [
        "a19#0",
        "a20#0",
        "aggregate%head%20#0"
      ],
      "stack_out": [
        "a19#0",
        "a20#0",
        "aggregate%head%20#0"
      ]
    },
    "334": {
      "op": "uncover 2",
      "stack_out": [
        "a20#0",
        "aggregate%head%20#0",
        "a19#0"
      ]
    },
    "336": {
      "op": "concat",
      "defined_out": [
        "a20#0",
        "aggregate%head%21#0"
      ],
      "stack_out": [
        "a20#0",
        "aggregate%head%21#0"
      ]
    },
    "337": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%21#0",
        "a20#0"
      ]
    },
    "338": {
      "op": "concat",
      "defined_out": [
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0"
      ]
    },
    "339": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "last_arg#0",
        "tmp%1#2"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%1#2"
      ]
    },
    "342": {
      "op": "dig 1",
      "defined_out": [
        "last_arg#0",
        "last_arg#0 (copy)",
        "tmp%1#2"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%1#2",
        "last_arg#0 (copy)"
      ]
    },
    "344": {
      "op": "==",
      "defined_out": [
        "last_arg#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%2#1"
      ]
    },
    "345": {
      "op": "assert",
      "stack_out": [
        "last_arg#0"
      ]
    },
    "346": {
      "op": "dup",
      "stack_out": [
        "last_arg#0",
        "last_arg#0 (copy)"
      ]
    },
    "347": {
      "op": "len",
      "defined_out": [
        "aggregate%length%8#0",
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0",
        "aggregate%length%8#0"
      ]
    },
    "348": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%17#0",
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0",
        "aggregate%as_bytes%17#0"
      ]
    },
    "349": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%8#0",
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0",
        "aggregate%length_uint16%8#0"
      ]
    },
    "352": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%8#0",
        "last_arg#0"
      ]
    },
    "353": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%8#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%8#0"
      ]
    },
    "354": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%8#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%8#0",
        "0x151f7c75"
      ]
    },
    "355": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%8#0"
      ]
    },
    "356": {
      "op": "concat",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "357": {
      "op": "log",
      "stack_out": []
    },
    "358": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "359": {
      "op": "return",
      "stack_out": []
    },
    "360": {
      "block": "main_echo_nested_tuple_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "362": {
      "op": "!",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "363": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "364": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "366": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "367": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ]
    },
    "370": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ]
    },
    "371": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)",
        "0"
      ]
    },
    "372": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "373": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ]
    },
    "375": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)",
        "2"
      ]
    },
    "377": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "378": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ]
    },
    "380": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "382": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%2#0 (copy)",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%2#0 (copy)"
      ]
    },
    "384": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0"
      ]
    },
    "385": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "386": {
      "op": "intc_1 // 0",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "0"
      ]
    },
    "387": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "388": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "390": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0 (copy)",
        "2"
      ]
    },
    "392": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "393": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "395": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%0#0 (copy)",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "397": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%extract_uint16%4#0 (copy)",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%0#0 (copy)",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0 (copy)"
      ]
    },
    "399": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%1#0"
      ]
    },
    "400": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "tuple_of_tuples.0.0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%4#0",
        "tuple_of_tuples.0.0#0"
      ]
    },
    "403": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%4#0",
        "tuple_of_tuples.0.0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "405": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "tuple_of_tuples.0.0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%4#0",
        "tuple_of_tuples.0.0#0",
        "aggregate%len%0#0"
      ]
    },
    "406": {
      "op": "swap"
    },
    "407": {
      "op": "cover 3",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "tuple_of_tuples.0.0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%0#0"
      ]
    },
    "409": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0"
      ]
    },
    "410": {
      "op": "dig 3",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ]
    },
    "412": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "aggregate%len%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%len%1#0"
      ]
    },
    "413": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%extract_uint16%2#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%len%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ]
    },
    "415": {
      "op": "uncover 4",
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%len%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "417": {
      "op": "uncover 2",
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%1#0"
      ]
    },
    "419": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%3#0"
      ]
    },
    "420": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "421": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "0"
      ]
    },
    "422": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0"
      ]
    },
    "423": {
      "op": "dig 1",
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "425": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "aggregate%substring3%3#0 (copy)",
        "16"
      ]
    },
    "427": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "aggregate%substring3%3#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "428": {
      "op": "dig 2",
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "430": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "aggregate%len%2#0",
        "aggregate%substring3%3#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%len%2#0"
      ]
    },
    "431": {
      "op": "dig 3",
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%len%2#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "433": {
      "op": "cover 2",
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "aggregate%substring3%3#0 (copy)",
        "aggregate%extract_uint16%7#0",
        "aggregate%len%2#0"
      ]
    },
    "435": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%3#0",
        "aggregate%substring3%4#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "aggregate%substring3%4#0"
      ]
    },
    "436": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ]
    },
    "439": {
      "op": "bytec_1 // \"echo: \"",
      "defined_out": [
        "\"echo: \"",
        "aggregate%substring3%3#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "\"echo: \""
      ]
    },
    "440": {
      "op": "uncover 5",
      "stack_out": [
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "\"echo: \"",
        "tuple_of_tuples.0.0#0"
      ]
    },
    "442": {
      "op": "concat",
      "defined_out": [
        "aggregate%substring3%3#0",
        "tmp%0#3",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3"
      ]
    },
    "443": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%substring3%3#0",
        "tmp%0#3",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.0.1#0 (copy)",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "tuple_of_tuples.0.1#0 (copy)"
      ]
    },
    "445": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%substring3%3#0",
        "extract_to_end%0#0",
        "tmp%0#3",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "extract_to_end%0#0"
      ]
    },
    "448": {
      "op": "uncover 5",
      "stack_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "extract_to_end%0#0",
        "tuple_of_tuples.0.1#0"
      ]
    },
    "450": {
      "op": "intc_1 // 0",
      "stack_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "extract_to_end%0#0",
        "tuple_of_tuples.0.1#0",
        "0"
      ]
    },
    "451": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#0",
        "aggregate%substring3%3#0",
        "extract_to_end%0#0",
        "tmp%0#3",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "extract_to_end%0#0",
        "aggregate%array_length%1#0"
      ]
    },
    "452": {
      "op": "bytec_2 // 0x00066563686f3a20",
      "defined_out": [
        "0x00066563686f3a20",
        "aggregate%array_length%1#0",
        "aggregate%substring3%3#0",
        "extract_to_end%0#0",
        "tmp%0#3",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "extract_to_end%0#0",
        "aggregate%array_length%1#0",
        "0x00066563686f3a20"
      ]
    },
    "453": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%array_length%1#0",
        "0x00066563686f3a20",
        "extract_to_end%0#0"
      ]
    },
    "455": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%array_length%1#0",
        "aggregate%concat%3#0",
        "aggregate%substring3%3#0",
        "tmp%0#3",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%array_length%1#0",
        "aggregate%concat%3#0"
      ]
    },
    "456": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%1#0",
        "aggregate%concat%3#0",
        "aggregate%concat%3#0 (copy)",
        "aggregate%substring3%3#0",
        "tmp%0#3",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%array_length%1#0",
        "aggregate%concat%3#0",
        "aggregate%concat%3#0 (copy)"
      ]
    },
    "457": {
      "op": "intc_1 // 0",
      "stack_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%array_length%1#0",
        "aggregate%concat%3#0",
        "aggregate%concat%3#0 (copy)",
        "0"
      ]
    },
    "458": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#0",
        "aggregate%concat%3#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%3#0",
        "tmp%0#3",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%array_length%1#0",
        "aggregate%concat%3#0",
        "aggregate%extract_uint16%8#0"
      ]
    },
    "459": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%concat%3#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%array_length%1#0"
      ]
    },
    "461": {
      "op": "+",
      "defined_out": [
        "aggregate%add%1#0",
        "aggregate%concat%3#0",
        "aggregate%substring3%3#0",
        "tmp%0#3",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%concat%3#0",
        "aggregate%add%1#0"
      ]
    },
    "462": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%9#0",
        "aggregate%concat%3#0",
        "aggregate%substring3%3#0",
        "tmp%0#3",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%concat%3#0",
        "aggregate%as_bytes%9#0"
      ]
    },
    "463": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_u16_bytes%1#0",
        "aggregate%concat%3#0",
        "aggregate%substring3%3#0",
        "tmp%0#3",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%concat%3#0",
        "aggregate%as_u16_bytes%1#0"
      ]
    },
    "466": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%replace%1#0",
        "aggregate%substring3%3#0",
        "tmp%0#3",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%replace%1#0"
      ]
    },
    "468": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%replace%1#0",
        "tuple_of_tuples.1.0#0"
      ]
    },
    "470": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%replace%1#0",
        "aggregate%substring3%3#0",
        "tmp%0#3",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%replace%1#0",
        "tuple_of_tuples.1.0#0",
        "1"
      ]
    },
    "471": {
      "op": "+",
      "defined_out": [
        "aggregate%replace%1#0",
        "aggregate%substring3%3#0",
        "tmp%0#3",
        "tmp%4#1",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%3#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%replace%1#0",
        "tmp%4#1"
      ]
    },
    "472": {
      "op": "uncover 4",
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%substring3%3#0"
      ]
    },
    "474": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%replace%1#0",
        "aggregate%substring3%3#0",
        "tmp%0#3",
        "tmp%4#1",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%substring3%3#0",
        "8"
      ]
    },
    "475": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%replace%1#0",
        "tmp%0#3",
        "tmp%4#1",
        "tmp%5#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%replace%1#0",
        "tmp%4#1",
        "tmp%5#0"
      ]
    },
    "476": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%replace%1#0",
        "tmp%4#1",
        "tmp%5#0",
        "1"
      ]
    },
    "477": {
      "op": "+",
      "defined_out": [
        "aggregate%replace%1#0",
        "tmp%0#3",
        "tmp%4#1",
        "tmp%6#1",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%replace%1#0",
        "tmp%4#1",
        "tmp%6#1"
      ]
    },
    "478": {
      "op": "itob",
      "defined_out": [
        "aggregate%replace%1#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%0#3",
        "tmp%4#1",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0"
      ]
    },
    "479": {
      "op": "bytec_1 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "aggregate%replace%1#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%0#3",
        "tmp%4#1",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "0x6563686f3a20"
      ]
    },
    "480": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#3",
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "0x6563686f3a20",
        "tuple_of_tuples.1.2#0"
      ]
    },
    "482": {
      "op": "concat",
      "defined_out": [
        "aggregate%replace%1#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%0#3",
        "tmp%4#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1"
      ]
    },
    "483": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%replace%1#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%0#3",
        "tmp%0#3 (copy)",
        "tmp%4#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "tmp%0#3 (copy)"
      ]
    },
    "485": {
      "op": "len",
      "defined_out": [
        "aggregate%length%6#0",
        "aggregate%replace%1#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%0#3",
        "tmp%4#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%length%6#0"
      ]
    },
    "486": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%10#0",
        "aggregate%replace%1#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%0#3",
        "tmp%4#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%as_bytes%10#0"
      ]
    },
    "487": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%6#0",
        "aggregate%replace%1#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%0#3",
        "tmp%4#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%length_uint16%6#0"
      ]
    },
    "490": {
      "op": "uncover 5",
      "stack_out": [
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%length_uint16%6#0",
        "tmp%0#3"
      ]
    },
    "492": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%6#0",
        "aggregate%replace%1#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%4#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%encoded_value%6#0"
      ]
    },
    "493": {
      "op": "dup",
      "defined_out": [
        "aggregate%encoded_value%6#0",
        "aggregate%encoded_value%6#0 (copy)",
        "aggregate%replace%1#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%4#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%encoded_value%6#0",
        "aggregate%encoded_value%6#0 (copy)"
      ]
    },
    "494": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%2#0",
        "aggregate%encoded_value%6#0",
        "aggregate%replace%1#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%4#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%encoded_value%6#0",
        "aggregate%data_length%2#0"
      ]
    },
    "495": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "aggregate%data_length%2#0",
        "aggregate%encoded_value%6#0",
        "aggregate%replace%1#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%4#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%encoded_value%6#0",
        "aggregate%data_length%2#0",
        "4"
      ]
    },
    "497": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%2#0",
        "aggregate%encoded_value%6#0",
        "aggregate%replace%1#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%4#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%encoded_value%6#0",
        "aggregate%current_tail_offset%2#0"
      ]
    },
    "498": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%12#0",
        "aggregate%encoded_value%6#0",
        "aggregate%replace%1#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%4#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%encoded_value%6#0",
        "aggregate%as_bytes%12#0"
      ]
    },
    "499": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_value%6#0",
        "aggregate%offset_as_uint16%3#0",
        "aggregate%replace%1#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%4#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%encoded_value%6#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "502": {
      "op": "bytec_3 // 0x0004",
      "defined_out": [
        "0x0004",
        "aggregate%encoded_value%6#0",
        "aggregate%offset_as_uint16%3#0",
        "aggregate%replace%1#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%4#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%encoded_value%6#0",
        "aggregate%offset_as_uint16%3#0",
        "0x0004"
      ]
    },
    "503": {
      "op": "swap",
      "stack_out": [
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%encoded_value%6#0",
        "0x0004",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "504": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%6#0",
        "aggregate%head%11#0",
        "aggregate%replace%1#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%4#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%encoded_value%6#0",
        "aggregate%head%11#0"
      ]
    },
    "505": {
      "op": "swap",
      "stack_out": [
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%head%11#0",
        "aggregate%encoded_value%6#0"
      ]
    },
    "506": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%4#0",
        "aggregate%replace%1#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%4#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "aggregate%replace%1#0",
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%concat%4#0"
      ]
    },
    "507": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%concat%4#0",
        "aggregate%replace%1#0"
      ]
    },
    "509": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%5#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%4#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%concat%5#0"
      ]
    },
    "510": {
      "op": "dup",
      "defined_out": [
        "aggregate%concat%5#0",
        "aggregate%concat%5#0 (copy)",
        "aggregate%val_as_bytes%7#0",
        "tmp%4#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%concat%5#0",
        "aggregate%concat%5#0 (copy)"
      ]
    },
    "511": {
      "op": "len",
      "defined_out": [
        "aggregate%concat%5#0",
        "aggregate%data_length%4#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%4#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%concat%5#0",
        "aggregate%data_length%4#0"
      ]
    },
    "512": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%concat%5#0",
        "aggregate%data_length%4#0",
        "4"
      ]
    },
    "514": {
      "op": "+",
      "defined_out": [
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%val_as_bytes%7#0",
        "tmp%4#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "tmp%4#1",
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0"
      ]
    },
    "515": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "tmp%4#1"
      ]
    },
    "517": {
      "op": "itob",
      "defined_out": [
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%val_as_bytes%7#0",
        "aggregate%val_as_bytes%8#0",
        "tmp%8#1"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%7#0",
        "tmp%8#1",
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%val_as_bytes%8#0"
      ]
    },
    "518": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%8#1",
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%val_as_bytes%8#0",
        "aggregate%val_as_bytes%7#0"
      ]
    },
    "520": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "tmp%8#1"
      ],
      "stack_out": [
        "tmp%8#1",
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0"
      ]
    },
    "521": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "tmp%8#1",
        "tmp%8#1 (copy)"
      ],
      "stack_out": [
        "tmp%8#1",
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "tmp%8#1 (copy)"
      ]
    },
    "523": {
      "op": "len",
      "defined_out": [
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "aggregate%length%7#0",
        "tmp%8#1"
      ],
      "stack_out": [
        "tmp%8#1",
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "aggregate%length%7#0"
      ]
    },
    "524": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%14#0",
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "tmp%8#1"
      ],
      "stack_out": [
        "tmp%8#1",
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "aggregate%as_bytes%14#0"
      ]
    },
    "525": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "aggregate%length_uint16%7#0",
        "tmp%8#1"
      ],
      "stack_out": [
        "tmp%8#1",
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "aggregate%length_uint16%7#0"
      ]
    },
    "528": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "aggregate%length_uint16%7#0",
        "tmp%8#1"
      ]
    },
    "530": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%encoded_value%7#0",
        "aggregate%head%14#0"
      ],
      "stack_out": [
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "aggregate%encoded_value%7#0"
      ]
    },
    "531": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%encoded_value%7#0",
        "aggregate%head%14#0"
      ]
    },
    "532": {
      "op": "pushbytes 0x0012",
      "defined_out": [
        "0x0012",
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%encoded_value%7#0",
        "aggregate%head%14#0"
      ],
      "stack_out": [
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%encoded_value%7#0",
        "aggregate%head%14#0",
        "0x0012"
      ]
    },
    "536": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%encoded_value%7#0",
        "aggregate%head%15#0"
      ],
      "stack_out": [
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%encoded_value%7#0",
        "aggregate%head%15#0"
      ]
    },
    "537": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%15#0",
        "aggregate%encoded_value%7#0"
      ]
    },
    "538": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%5#0",
        "aggregate%concat%6#0",
        "aggregate%current_tail_offset%4#0"
      ],
      "stack_out": [
        "aggregate%concat%5#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%concat%6#0"
      ]
    },
    "539": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%5#0",
        "aggregate%concat%6#0",
        "aggregate%current_tail_offset%4#0"
      ]
    },
    "540": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%16#0",
        "aggregate%concat%5#0",
        "aggregate%concat%6#0"
      ],
      "stack_out": [
        "aggregate%concat%5#0",
        "aggregate%concat%6#0",
        "aggregate%as_bytes%16#0"
      ]
    },
    "541": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%concat%5#0",
        "aggregate%concat%6#0",
        "aggregate%offset_as_uint16%6#0"
      ],
      "stack_out": [
        "aggregate%concat%5#0",
        "aggregate%concat%6#0",
        "aggregate%offset_as_uint16%6#0"
      ]
    },
    "544": {
      "op": "bytec_3 // 0x0004",
      "stack_out": [
        "aggregate%concat%5#0",
        "aggregate%concat%6#0",
        "aggregate%offset_as_uint16%6#0",
        "0x0004"
      ]
    },
    "545": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%5#0",
        "aggregate%concat%6#0",
        "0x0004",
        "aggregate%offset_as_uint16%6#0"
      ]
    },
    "546": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%5#0",
        "aggregate%concat%6#0",
        "aggregate%head%16#0"
      ],
      "stack_out": [
        "aggregate%concat%5#0",
        "aggregate%concat%6#0",
        "aggregate%head%16#0"
      ]
    },
    "547": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%concat%6#0",
        "aggregate%head%16#0",
        "aggregate%concat%5#0"
      ]
    },
    "549": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%6#0",
        "aggregate%concat%7#0"
      ],
      "stack_out": [
        "aggregate%concat%6#0",
        "aggregate%concat%7#0"
      ]
    },
    "550": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%7#0",
        "aggregate%concat%6#0"
      ]
    },
    "551": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%8#0"
      ],
      "stack_out": [
        "aggregate%concat%8#0"
      ]
    },
    "552": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%8#0"
      ],
      "stack_out": [
        "aggregate%concat%8#0",
        "0x151f7c75"
      ]
    },
    "553": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%concat%8#0"
      ]
    },
    "554": {
      "op": "concat",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "555": {
      "op": "log",
      "stack_out": []
    },
    "556": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "557": {
      "op": "return",
      "stack_out": []
    },
    "558": {
      "block": "main_echo_native_tuple_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "560": {
      "op": "!",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "561": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "562": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "564": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "565": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%3#0"
      ]
    },
    "568": {
      "op": "extract 2 0",
      "defined_out": [
        "s#0"
      ],
      "stack_out": [
        "s#0"
      ]
    },
    "571": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "s#0"
      ],
      "stack_out": [
        "s#0",
        "reinterpret_Encoded(len+uint8[])%4#0"
      ]
    },
    "574": {
      "op": "extract 2 0",
      "defined_out": [
        "b#0",
        "s#0"
      ],
      "stack_out": [
        "s#0",
        "b#0"
      ]
    },
    "577": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "b#0",
        "reinterpret_Encoded(uint64)%6#0",
        "s#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "reinterpret_Encoded(uint64)%6#0"
      ]
    },
    "580": {
      "op": "btoi",
      "defined_out": [
        "b#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "u#0"
      ]
    },
    "581": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "b#0",
        "bu#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "u#0",
        "bu#0"
      ]
    },
    "584": {
      "op": "bytec_1 // \"echo: \"",
      "defined_out": [
        "\"echo: \"",
        "b#0",
        "bu#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "u#0",
        "bu#0",
        "\"echo: \""
      ]
    },
    "585": {
      "op": "uncover 4",
      "stack_out": [
        "b#0",
        "u#0",
        "bu#0",
        "\"echo: \"",
        "s#0"
      ]
    },
    "587": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "bu#0",
        "tmp%0#3",
        "u#0"
      ],
      "stack_out": [
        "b#0",
        "u#0",
        "bu#0",
        "tmp%0#3"
      ]
    },
    "588": {
      "op": "bytec_1 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "b#0",
        "bu#0",
        "tmp%0#3",
        "u#0"
      ],
      "stack_out": [
        "b#0",
        "u#0",
        "bu#0",
        "tmp%0#3",
        "0x6563686f3a20"
      ]
    },
    "589": {
      "op": "uncover 4",
      "stack_out": [
        "u#0",
        "bu#0",
        "tmp%0#3",
        "0x6563686f3a20",
        "b#0"
      ]
    },
    "591": {
      "op": "concat",
      "defined_out": [
        "bu#0",
        "tmp%0#3",
        "tmp%1#2",
        "u#0"
      ],
      "stack_out": [
        "u#0",
        "bu#0",
        "tmp%0#3",
        "tmp%1#2"
      ]
    },
    "592": {
      "op": "uncover 3",
      "stack_out": [
        "bu#0",
        "tmp%0#3",
        "tmp%1#2",
        "u#0"
      ]
    },
    "594": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "bu#0",
        "tmp%0#3",
        "tmp%1#2",
        "u#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%0#3",
        "tmp%1#2",
        "u#0",
        "1"
      ]
    },
    "595": {
      "op": "+",
      "defined_out": [
        "bu#0",
        "tmp%0#3",
        "tmp%1#2",
        "tmp%2#4"
      ],
      "stack_out": [
        "bu#0",
        "tmp%0#3",
        "tmp%1#2",
        "tmp%2#4"
      ]
    },
    "596": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#3",
        "tmp%1#2",
        "tmp%2#4",
        "bu#0"
      ]
    },
    "598": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "bu#0",
        "tmp%0#3",
        "tmp%1#2",
        "tmp%2#4"
      ],
      "stack_out": [
        "tmp%0#3",
        "tmp%1#2",
        "tmp%2#4",
        "bu#0",
        "0x01"
      ]
    },
    "601": {
      "op": "b+",
      "defined_out": [
        "tmp%0#3",
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3"
      ]
    },
    "602": {
      "op": "dig 3",
      "defined_out": [
        "tmp%0#3",
        "tmp%0#3 (copy)",
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3",
        "tmp%0#3 (copy)"
      ]
    },
    "604": {
      "op": "len",
      "defined_out": [
        "aggregate%length%3#0",
        "tmp%0#3",
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%length%3#0"
      ]
    },
    "605": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#0",
        "tmp%0#3",
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%as_bytes%4#0"
      ]
    },
    "606": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%3#0",
        "tmp%0#3",
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%length_uint16%3#0"
      ]
    },
    "609": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%length_uint16%3#0",
        "tmp%0#3"
      ]
    },
    "611": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%3#0",
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%encoded_value%3#0"
      ]
    },
    "612": {
      "op": "dup",
      "defined_out": [
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%3#0 (copy)",
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%3#0 (copy)"
      ]
    },
    "613": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%3#0",
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%data_length%0#0"
      ]
    },
    "614": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%3#0",
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%data_length%0#0",
        "76"
      ]
    },
    "616": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%3#0",
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "617": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%3#0",
        "tmp%1#2",
        "tmp%1#2 (copy)",
        "tmp%2#4",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%1#2 (copy)"
      ]
    },
    "619": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%3#0",
        "aggregate%length%4#0",
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length%4#0"
      ]
    },
    "620": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%6#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%3#0",
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_bytes%6#0"
      ]
    },
    "621": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%3#0",
        "aggregate%length_uint16%4#0",
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%1#2",
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%4#0"
      ]
    },
    "624": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%4#0",
        "tmp%1#2"
      ]
    },
    "626": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "tmp%2#4",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%4#0"
      ]
    },
    "627": {
      "op": "swap",
      "stack_out": [
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "628": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%7#0",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "tmp%2#4",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%as_bytes%7#0"
      ]
    },
    "629": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%2#4",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "632": {
      "op": "pushbytes 0x004c",
      "defined_out": [
        "0x004c",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%2#4",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%offset_as_uint16%1#0",
        "0x004c"
      ]
    },
    "636": {
      "op": "swap",
      "stack_out": [
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "0x004c",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "637": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%7#0",
        "tmp%2#4",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%2#4",
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%7#0"
      ]
    },
    "638": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%7#0",
        "tmp%2#4"
      ]
    },
    "640": {
      "op": "itob",
      "defined_out": [
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%7#0",
        "aggregate%val_as_bytes%6#0",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%7#0",
        "aggregate%val_as_bytes%6#0"
      ]
    },
    "641": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%8#0",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%8#0"
      ]
    },
    "642": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%8#0",
        "tmp%3#3",
        "tmp%3#3 (copy)"
      ],
      "stack_out": [
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%8#0",
        "tmp%3#3 (copy)"
      ]
    },
    "644": {
      "op": "len",
      "defined_out": [
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%8#0",
        "aggregate%value_len%1#0",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%8#0",
        "aggregate%value_len%1#0"
      ]
    },
    "645": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%8#0",
        "aggregate%value_len%1#0",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%8#0",
        "aggregate%value_len%1#0",
        "64"
      ]
    },
    "646": {
      "op": "<=",
      "defined_out": [
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%8#0",
        "aggregate%len_ok%1#0",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%8#0",
        "aggregate%len_ok%1#0"
      ]
    },
    "647": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%8#0"
      ]
    },
    "648": {
      "op": "intc_2 // 64",
      "stack_out": [
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%8#0",
        "64"
      ]
    },
    "649": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%1#0",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%8#0",
        "tmp%3#3"
      ],
      "stack_out": [
        "tmp%3#3",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%8#0",
        "aggregate%bzero%1#0"
      ]
    },
    "650": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%8#0",
        "aggregate%bzero%1#0",
        "tmp%3#3"
      ]
    },
    "652": {
      "op": "b|",
      "defined_out": [
        "aggregate%arc4_encoded%1#0",
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%8#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%8#0",
        "aggregate%arc4_encoded%1#0"
      ]
    },
    "653": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%9#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%3#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%9#0"
      ]
    },
    "654": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%encoded_value%4#0",
        "aggregate%head%9#0",
        "aggregate%encoded_value%3#0"
      ]
    },
    "656": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%encoded_value%4#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%4#0",
        "aggregate%concat%1#0"
      ]
    },
    "657": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%encoded_value%4#0"
      ]
    },
    "658": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%2#0"
      ],
      "stack_out": [
        "aggregate%concat%2#0"
      ]
    },
    "659": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%2#0"
      ],
      "stack_out": [
        "aggregate%concat%2#0",
        "0x151f7c75"
      ]
    },
    "660": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%concat%2#0"
      ]
    },
    "661": {
      "op": "concat",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "662": {
      "op": "log",
      "stack_out": []
    },
    "663": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "664": {
      "op": "return",
      "stack_out": []
    },
    "665": {
      "block": "main_echo_resource_by_value_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "667": {
      "op": "!",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "668": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "669": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "671": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "672": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "675": {
      "op": "btoi",
      "defined_out": [
        "asset#0"
      ],
      "stack_out": [
        "asset#0"
      ]
    },
    "676": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "asset#0",
        "reinterpret_Encoded(uint64)%5#0"
      ],
      "stack_out": [
        "asset#0",
        "reinterpret_Encoded(uint64)%5#0"
      ]
    },
    "679": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0"
      ]
    },
    "680": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "683": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%0#3"
      ]
    },
    "686": {
      "op": "btoi",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "asset_id#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "asset_id#0"
      ]
    },
    "687": {
      "op": "dig 3",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "asset#0 (copy)",
        "asset_id#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "asset_id#0",
        "asset#0 (copy)"
      ]
    },
    "689": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%2#1"
      ]
    },
    "690": {
      "error": "expected asset to be passed by value",
      "op": "assert // expected asset to be passed by value",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "691": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%3#4"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%3#4"
      ]
    },
    "694": {
      "op": "btoi",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_id#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "app_id#0"
      ]
    },
    "695": {
      "op": "dig 2",
      "defined_out": [
        "acc#0",
        "app#0",
        "app#0 (copy)",
        "app_id#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "app_id#0",
        "app#0 (copy)"
      ]
    },
    "697": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%5#2"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%5#2"
      ]
    },
    "698": {
      "error": "expected application to be passed by value",
      "op": "assert // expected application to be passed by value",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "699": {
      "op": "dup"
    },
    "700": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "acc#0",
        "acc#0 (copy)",
        "address#0",
        "app#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "acc#0 (copy)",
        "address#0"
      ]
    },
    "703": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%7#2"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%7#2"
      ]
    },
    "704": {
      "error": "expected account to be passed by value",
      "op": "assert // expected account to be passed by value",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "705": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "asset#0"
      ]
    },
    "707": {
      "op": "itob",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%4#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "708": {
      "op": "uncover 2",
      "stack_out": [
        "acc#0",
        "aggregate%val_as_bytes%4#0",
        "app#0"
      ]
    },
    "710": {
      "op": "itob",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%4#0",
        "aggregate%val_as_bytes%5#0"
      ],
      "stack_out": [
        "acc#0",
        "aggregate%val_as_bytes%4#0",
        "aggregate%val_as_bytes%5#0"
      ]
    },
    "711": {
      "op": "concat",
      "defined_out": [
        "acc#0",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "acc#0",
        "aggregate%head%4#0"
      ]
    },
    "712": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%4#0",
        "acc#0"
      ]
    },
    "713": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0"
      ],
      "stack_out": [
        "aggregate%head%5#0"
      ]
    },
    "714": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%5#0"
      ],
      "stack_out": [
        "aggregate%head%5#0",
        "0x151f7c75"
      ]
    },
    "715": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%head%5#0"
      ]
    },
    "716": {
      "op": "concat",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "717": {
      "op": "log",
      "stack_out": []
    },
    "718": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "719": {
      "op": "return",
      "stack_out": []
    },
    "720": {
      "block": "main_echo_resource_by_index_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "722": {
      "op": "!",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "723": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "724": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "726": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "727": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%0#0"
      ]
    },
    "730": {
      "op": "btoi",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "731": {
      "op": "txnas Assets",
      "defined_out": [
        "asset#0"
      ],
      "stack_out": [
        "asset#0"
      ]
    },
    "733": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "asset#0",
        "reinterpret_Encoded(uint8)%1#0"
      ],
      "stack_out": [
        "asset#0",
        "reinterpret_Encoded(uint8)%1#0"
      ]
    },
    "736": {
      "op": "btoi",
      "defined_out": [
        "asset#0",
        "tmp%91#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%91#0"
      ]
    },
    "737": {
      "op": "txnas Applications",
      "defined_out": [
        "app#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0"
      ]
    },
    "739": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "app#0",
        "asset#0",
        "reinterpret_Encoded(uint8)%2#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "reinterpret_Encoded(uint8)%2#0"
      ]
    },
    "742": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "asset#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "tmp%93#0"
      ]
    },
    "743": {
      "op": "txnas Accounts",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "745": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%0#3"
      ]
    },
    "748": {
      "op": "btoi",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "asset_idx#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "asset_idx#0"
      ]
    },
    "749": {
      "op": "txnas Assets",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%2#4"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%2#4"
      ]
    },
    "751": {
      "op": "dig 3",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "asset#0 (copy)",
        "tmp%2#4"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%2#4",
        "asset#0 (copy)"
      ]
    },
    "753": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%3#5"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%3#5"
      ]
    },
    "754": {
      "error": "expected asset to be passed by index",
      "op": "assert // expected asset to be passed by index",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "755": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%4#2"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%4#2"
      ]
    },
    "758": {
      "op": "btoi",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_idx#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "app_idx#0"
      ]
    },
    "759": {
      "op": "txnas Applications",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%6#1"
      ]
    },
    "761": {
      "op": "dig 2",
      "defined_out": [
        "acc#0",
        "app#0",
        "app#0 (copy)",
        "asset#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%6#1",
        "app#0 (copy)"
      ]
    },
    "763": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%7#2"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%7#2"
      ]
    },
    "764": {
      "error": "expected application to be passed by index",
      "op": "assert // expected application to be passed by index",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "765": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%8#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%8#1"
      ]
    },
    "768": {
      "op": "btoi",
      "defined_out": [
        "acc#0",
        "acc_idx#0",
        "app#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "acc_idx#0"
      ]
    },
    "769": {
      "op": "txnas Accounts",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%10#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%10#1"
      ]
    },
    "771": {
      "op": "dig 1",
      "defined_out": [
        "acc#0",
        "acc#0 (copy)",
        "app#0",
        "asset#0",
        "tmp%10#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%10#1",
        "acc#0 (copy)"
      ]
    },
    "773": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%11#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%11#1"
      ]
    },
    "774": {
      "error": "expected account to be passed by index",
      "op": "assert // expected account to be passed by index",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "775": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "asset#0"
      ]
    },
    "777": {
      "op": "itob",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%2#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "778": {
      "op": "uncover 2",
      "stack_out": [
        "acc#0",
        "aggregate%val_as_bytes%2#0",
        "app#0"
      ]
    },
    "780": {
      "op": "itob",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%2#0",
        "aggregate%val_as_bytes%3#0"
      ],
      "stack_out": [
        "acc#0",
        "aggregate%val_as_bytes%2#0",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "781": {
      "op": "concat",
      "defined_out": [
        "acc#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "acc#0",
        "aggregate%head%1#0"
      ]
    },
    "782": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%1#0",
        "acc#0"
      ]
    },
    "783": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0"
      ]
    },
    "784": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "0x151f7c75"
      ]
    },
    "785": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%head%2#0"
      ]
    },
    "786": {
      "op": "concat",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "787": {
      "op": "log",
      "stack_out": []
    },
    "788": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "789": {
      "op": "return",
      "stack_out": []
    },
    "790": {
      "block": "main_echo_native_biguint_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "792": {
      "op": "!",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "793": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "794": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "796": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "797": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "800": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "0x01"
      ]
    },
    "803": {
      "op": "b+",
      "defined_out": [
        "tmp%0#7"
      ],
      "stack_out": [
        "tmp%0#7"
      ]
    },
    "804": {
      "op": "dup",
      "defined_out": [
        "tmp%0#7",
        "tmp%0#7 (copy)"
      ],
      "stack_out": [
        "tmp%0#7",
        "tmp%0#7 (copy)"
      ]
    },
    "805": {
      "op": "len",
      "defined_out": [
        "aggregate%value_len%0#0",
        "tmp%0#7"
      ],
      "stack_out": [
        "tmp%0#7",
        "aggregate%value_len%0#0"
      ]
    },
    "806": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "aggregate%value_len%0#0",
        "tmp%0#7"
      ],
      "stack_out": [
        "tmp%0#7",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "807": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "tmp%0#7"
      ],
      "stack_out": [
        "tmp%0#7",
        "aggregate%len_ok%0#0"
      ]
    },
    "808": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%0#7"
      ]
    },
    "809": {
      "op": "intc_2 // 64",
      "stack_out": [
        "tmp%0#7",
        "64"
      ]
    },
    "810": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "tmp%0#7"
      ],
      "stack_out": [
        "tmp%0#7",
        "aggregate%bzero%0#0"
      ]
    },
    "811": {
      "op": "b|",
      "defined_out": [
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "812": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "0x151f7c75"
      ]
    },
    "813": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "814": {
      "op": "concat",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "815": {
      "op": "log",
      "stack_out": []
    },
    "816": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "817": {
      "op": "return",
      "stack_out": []
    },
    "818": {
      "block": "main_echo_native_uint64_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "820": {
      "op": "!",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "821": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "822": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "824": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "825": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "828": {
      "op": "btoi",
      "defined_out": [
        "value#1"
      ],
      "stack_out": [
        "value#1"
      ]
    },
    "829": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "value#1"
      ],
      "stack_out": [
        "value#1",
        "1"
      ]
    },
    "830": {
      "op": "+",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "831": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "832": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "833": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "834": {
      "op": "concat",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "835": {
      "op": "log",
      "stack_out": []
    },
    "836": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "837": {
      "op": "return",
      "stack_out": []
    },
    "838": {
      "block": "main_echo_native_bytes_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "840": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "841": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "842": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "844": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "845": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%3#0"
      ]
    },
    "848": {
      "op": "extract 2 0",
      "defined_out": [
        "value#2"
      ],
      "stack_out": [
        "value#2"
      ]
    },
    "851": {
      "op": "bytec_1 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "value#2"
      ],
      "stack_out": [
        "value#2",
        "0x6563686f3a20"
      ]
    },
    "852": {
      "op": "swap",
      "stack_out": [
        "0x6563686f3a20",
        "value#2"
      ]
    },
    "853": {
      "op": "concat",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3"
      ]
    },
    "854": {
      "op": "dup",
      "defined_out": [
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ]
    },
    "855": {
      "op": "len",
      "defined_out": [
        "aggregate%length%2#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%length%2#0"
      ]
    },
    "856": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%as_bytes%3#0"
      ]
    },
    "857": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%2#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%length_uint16%2#0"
      ]
    },
    "860": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%2#0",
        "tmp%0#3"
      ]
    },
    "861": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%2#0"
      ]
    },
    "862": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%2#0",
        "0x151f7c75"
      ]
    },
    "863": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%2#0"
      ]
    },
    "864": {
      "op": "concat",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "865": {
      "op": "log",
      "stack_out": []
    },
    "866": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "867": {
      "op": "return",
      "stack_out": []
    },
    "868": {
      "block": "main_echo_native_string_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "870": {
      "op": "!",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "871": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "872": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "874": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "875": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%2#0"
      ]
    },
    "878": {
      "op": "extract 2 0",
      "defined_out": [
        "value#3"
      ],
      "stack_out": [
        "value#3"
      ]
    },
    "881": {
      "op": "bytec_1 // \"echo: \"",
      "defined_out": [
        "\"echo: \"",
        "value#3"
      ],
      "stack_out": [
        "value#3",
        "\"echo: \""
      ]
    },
    "882": {
      "op": "swap",
      "stack_out": [
        "\"echo: \"",
        "value#3"
      ]
    },
    "883": {
      "op": "concat",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3"
      ]
    },
    "884": {
      "op": "dup",
      "defined_out": [
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ]
    },
    "885": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%length%1#0"
      ]
    },
    "886": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%as_bytes%2#0"
      ]
    },
    "887": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%length_uint16%1#0"
      ]
    },
    "890": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%1#0",
        "tmp%0#3"
      ]
    },
    "891": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%1#0"
      ]
    },
    "892": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "893": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%1#0"
      ]
    },
    "894": {
      "op": "concat",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "895": {
      "op": "log",
      "stack_out": []
    },
    "896": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "897": {
      "op": "return",
      "stack_out": []
    },
    "898": {
      "block": "main_log_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "900": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "901": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "902": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "904": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "905": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "address#0"
      ],
      "stack_out": [
        "address#0"
      ]
    },
    "908": {
      "op": "log",
      "stack_out": []
    },
    "909": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "910": {
      "op": "return",
      "stack_out": []
    },
    "911": {
      "block": "main_log_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "913": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "914": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "915": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "917": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "918": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "921": {
      "op": "btoi",
      "defined_out": [
        "asset#0"
      ],
      "stack_out": [
        "asset#0"
      ]
    },
    "922": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "account#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "account#0"
      ]
    },
    "925": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "account#0",
        "asset#0",
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "asset#0",
        "account#0",
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "928": {
      "op": "btoi",
      "defined_out": [
        "account#0",
        "app#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "account#0",
        "app#0"
      ]
    },
    "929": {
      "op": "uncover 2",
      "stack_out": [
        "account#0",
        "app#0",
        "asset#0"
      ]
    },
    "931": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "account#0",
        "app#0",
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "account#0",
        "app#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "933": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "account#0",
        "app#0",
        "value%0#0"
      ]
    },
    "934": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "value%0#0",
        "account#0"
      ]
    },
    "936": {
      "op": "concat",
      "defined_out": [
        "app#0",
        "tmp%1#2"
      ],
      "stack_out": [
        "app#0",
        "tmp%1#2"
      ]
    },
    "937": {
      "op": "swap",
      "stack_out": [
        "tmp%1#2",
        "app#0"
      ]
    },
    "938": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "tmp%1#2",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%1#2",
        "value%1#0",
        "check%1#0"
      ]
    },
    "940": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%1#2",
        "value%1#0"
      ]
    },
    "941": {
      "op": "concat",
      "defined_out": [
        "tmp%3#4"
      ],
      "stack_out": [
        "tmp%3#4"
      ]
    },
    "942": {
      "op": "log",
      "stack_out": []
    },
    "943": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "944": {
      "op": "return",
      "stack_out": []
    },
    "945": {
      "block": "main_log_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "947": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "948": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "949": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "951": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "952": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#2"
      ],
      "stack_out": [
        "value#2"
      ]
    },
    "955": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3"
      ]
    },
    "958": {
      "op": "log",
      "stack_out": []
    },
    "959": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "960": {
      "op": "return",
      "stack_out": []
    },
    "961": {
      "block": "main_log_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "963": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "964": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "965": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "967": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "968": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#2"
      ],
      "stack_out": [
        "value#2"
      ]
    },
    "971": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "value#2"
      ],
      "stack_out": [
        "value#2",
        "0"
      ]
    },
    "972": {
      "op": "getbit",
      "defined_out": [
        "aggregate%get_bit%0#0"
      ],
      "stack_out": [
        "aggregate%get_bit%0#0"
      ]
    },
    "973": {
      "op": "pushbytess 0x46616c7365 0x54727565 // 0x46616c7365, 0x54727565",
      "defined_out": [
        "0x46616c7365",
        "0x54727565",
        "aggregate%get_bit%0#0"
      ],
      "stack_out": [
        "aggregate%get_bit%0#0",
        "0x46616c7365",
        "0x54727565"
      ]
    },
    "986": {
      "op": "uncover 2",
      "stack_out": [
        "0x46616c7365",
        "0x54727565",
        "aggregate%get_bit%0#0"
      ]
    },
    "988": {
      "op": "select",
      "defined_out": [
        "select%0#0"
      ],
      "stack_out": [
        "select%0#0"
      ]
    },
    "989": {
      "op": "log",
      "stack_out": []
    },
    "990": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "991": {
      "op": "return",
      "stack_out": []
    },
    "992": {
      "block": "main_log_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "994": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "995": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "996": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "998": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "999": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#2"
      ],
      "stack_out": [
        "value#2"
      ]
    },
    "1002": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#14"
      ],
      "stack_out": [
        "tmp%0#14"
      ]
    },
    "1005": {
      "op": "log",
      "stack_out": []
    },
    "1006": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1007": {
      "op": "return",
      "stack_out": []
    },
    "1008": {
      "block": "main_log_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1010": {
      "op": "!",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1011": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1012": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1014": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1015": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#2"
      ],
      "stack_out": [
        "value#2"
      ]
    },
    "1018": {
      "op": "log",
      "stack_out": []
    },
    "1019": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1020": {
      "op": "return",
      "stack_out": []
    },
    "1021": {
      "block": "main_log_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1023": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1024": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1025": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1027": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1028": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#2"
      ],
      "stack_out": [
        "value#2"
      ]
    },
    "1031": {
      "op": "log",
      "stack_out": []
    },
    "1032": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1033": {
      "op": "return",
      "stack_out": []
    },
    "1034": {
      "block": "main_no_args_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1036": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1037": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1038": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1040": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1041": {
      "op": "pushbytes 0x151f7c75000000000000002a",
      "defined_out": [
        "0x151f7c75000000000000002a"
      ],
      "stack_out": [
        "0x151f7c75000000000000002a"
      ]
    },
    "1055": {
      "op": "log",
      "stack_out": []
    },
    "1056": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1057": {
      "op": "return",
      "stack_out": []
    },
    "1058": {
      "block": "main_echo_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1060": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1061": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1062": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1064": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1065": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#2"
      ],
      "stack_out": [
        "value#2"
      ]
    },
    "1068": {
      "op": "dup",
      "defined_out": [
        "value#2",
        "value#2 (copy)"
      ],
      "stack_out": [
        "value#2",
        "value#2 (copy)"
      ]
    },
    "1069": {
      "op": "extract 2 0",
      "defined_out": [
        "extract_to_end%0#0",
        "value#2"
      ],
      "stack_out": [
        "value#2",
        "extract_to_end%0#0"
      ]
    },
    "1072": {
      "op": "swap",
      "stack_out": [
        "extract_to_end%0#0",
        "value#2"
      ]
    },
    "1073": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "extract_to_end%0#0",
        "value#2"
      ],
      "stack_out": [
        "extract_to_end%0#0",
        "value#2",
        "0"
      ]
    },
    "1074": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "extract_to_end%0#0"
      ],
      "stack_out": [
        "extract_to_end%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "1075": {
      "op": "bytec_2 // 0x00066563686f3a20",
      "defined_out": [
        "0x00066563686f3a20",
        "aggregate%array_length%0#0",
        "extract_to_end%0#0"
      ],
      "stack_out": [
        "extract_to_end%0#0",
        "aggregate%array_length%0#0",
        "0x00066563686f3a20"
      ]
    },
    "1076": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%array_length%0#0",
        "0x00066563686f3a20",
        "extract_to_end%0#0"
      ]
    },
    "1078": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "1079": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%concat%0#0",
        "aggregate%concat%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "aggregate%concat%0#0",
        "aggregate%concat%0#0 (copy)"
      ]
    },
    "1080": {
      "op": "intc_1 // 0",
      "stack_out": [
        "aggregate%array_length%0#0",
        "aggregate%concat%0#0",
        "aggregate%concat%0#0 (copy)",
        "0"
      ]
    },
    "1081": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%concat%0#0",
        "aggregate%extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0",
        "aggregate%concat%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1082": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "1084": {
      "op": "+",
      "defined_out": [
        "aggregate%add%0#0",
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%add%0#0"
      ]
    },
    "1085": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "1086": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_u16_bytes%0#0",
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%as_u16_bytes%0#0"
      ]
    },
    "1089": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%replace%0#0"
      ],
      "stack_out": [
        "aggregate%replace%0#0"
      ]
    },
    "1091": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%replace%0#0"
      ],
      "stack_out": [
        "aggregate%replace%0#0",
        "0x151f7c75"
      ]
    },
    "1092": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%replace%0#0"
      ]
    },
    "1093": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1094": {
      "op": "log",
      "stack_out": []
    },
    "1095": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1096": {
      "op": "return",
      "stack_out": []
    },
    "1097": {
      "block": "main_is_a_b_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1099": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1100": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1101": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1103": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1104": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "1107": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "1110": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "a#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "1113": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "1116": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "a#0"
      ]
    },
    "1117": {
      "op": "pushbytes 0x61",
      "defined_out": [
        "0x61",
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "b#0",
        "a#0",
        "0x61"
      ]
    },
    "1120": {
      "op": "==",
      "defined_out": [
        "b#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "b#0",
        "tmp%0#0"
      ]
    },
    "1121": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": [
        "b#0"
      ]
    },
    "1122": {
      "op": "pushbytes 0x62",
      "defined_out": [
        "0x62",
        "b#0"
      ],
      "stack_out": [
        "b#0",
        "0x62"
      ]
    },
    "1125": {
      "op": "==",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "1126": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "1127": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1128": {
      "op": "return",
      "stack_out": []
    },
    "1129": {
      "block": "main_bare_routing@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "1131": {
      "op": "bnz main_after_if_else@30",
      "stack_out": []
    },
    "1134": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "1136": {
      "op": "!",
      "defined_out": [
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%167#0"
      ]
    },
    "1137": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1138": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1139": {
      "op": "return",
      "stack_out": []
    }
  }
}