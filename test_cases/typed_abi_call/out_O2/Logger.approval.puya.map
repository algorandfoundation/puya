{
  "version": 3,
  "sources": [
    "../logger.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAmGK;;AAAA;AAAA;AAAA;;AAAA;AAnGL;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAqGe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAFV;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AAvEL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA+FmB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AACJ;;;AAAA;;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;;;AAAA;AAAA;AA1BV;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AA5DL;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAiEgB;AAAA;;AAAA;AAAmB;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACvB;;AAAM;AAAN;AACY;;AAAA;AAAkB;AAAlB;AAAZ;AACA;AAAA;;AAAA;AARP;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAtDL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AA0De;AAAA;;AAAA;AAAc;AAAA;;AAAA;AAAe;;AAAI;AAAJ;AAAO;;AAAK;AAAL;AAJ9C;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAlDL;;;AAoDuB;AAAR;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA9CL;;;AAAA;AAgDuB;AAAR;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA1CL;;;AAAA;;;AA4Ce;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAtCL;;;AAAA;;;AAwCe;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAlCL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAoCY;;AAAA;;AAAA;AAAY;;AAAA;AAAe;AAAA;;AAAA;AAAA;AAA/B;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA9BL;;;AAgCY;;;AAAJ;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA1BL;;;;AA4B8B;AAAlB;;;;;;;;;;;;;AAAA;;AAAA;AAAJ;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAtBL;;;AAwBY;;;AAAJ;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAlBL;;;AAoBQ;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAdL;;;AAgBQ;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AANL;;;AAQe;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;;;AAGe;AAAK;;;AAAL;AAAP;AACY;;;AAAL;AAAP;AAHH;;AADL;;AAAA;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 64 8"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x6563686f3a20 0x0004 0x01"
    },
    "26": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "28": {
      "op": "bz main_bare_routing@22",
      "stack_out": []
    },
    "31": {
      "op": "pushbytess 0xc77212bc 0x9bf81913 0xb862ee19 0x3c1058d9 0x6af45930 0xb4b4334e 0x6eed7ec3 0xb500e111 0xcd727b71 0x4a444c77 0x2659e818 0xa9fb6cf1 0xd8cc363b 0x16e03919 0xab271ce4 0xba0b4381 0xddd07185 // method \"is_a_b(byte[],byte[])void\", method \"echo(string)string\", method \"no_args()uint64\", method \"log(uint64)void\", method \"log(uint512)void\", method \"log(string)void\", method \"log(bool)void\", method \"log(byte[])void\", method \"log(asset,account,application)void\", method \"echo_native_string(string)string\", method \"echo_native_bytes(byte[])byte[]\", method \"echo_native_uint64(uint64)uint64\", method \"echo_native_biguint(uint512)uint512\", method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\", method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\", method \"return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]\", method \"logs_are_equal((uint64,string),(uint64,string))bool\""
    },
    "118": {
      "op": "txna ApplicationArgs 0"
    },
    "121": {
      "op": "match main_is_a_b_route@3 main_echo_route@4 main_no_args_route@5 main_log_route@6 main_log_route@7 main_log_route@8 main_log_route@9 main_log_route@10 main_log_route@11 main_echo_native_string_route@12 main_echo_native_bytes_route@13 main_echo_native_uint64_route@14 main_echo_native_biguint_route@15 main_echo_native_tuple_route@16 main_echo_nested_tuple_route@17 main_return_args_after_14th_route@18 main_logs_are_equal_route@19"
    },
    "157": {
      "block": "main_after_if_else@26",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "158": {
      "op": "return"
    },
    "159": {
      "block": "main_logs_are_equal_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "161": {
      "op": "!",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "162": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "163": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "165": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "166": {
      "op": "txna ApplicationArgs 1"
    },
    "169": {
      "op": "dup",
      "defined_out": [
        "tmp%143#0",
        "tmp%143#0 (copy)"
      ],
      "stack_out": [
        "tmp%143#0",
        "tmp%143#0 (copy)"
      ]
    },
    "170": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%3#0",
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0",
        "item0%3#0"
      ]
    },
    "173": {
      "op": "btoi",
      "defined_out": [
        "log_1.level#0",
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0",
        "log_1.level#0"
      ]
    },
    "174": {
      "op": "dig 1",
      "stack_out": [
        "tmp%143#0",
        "log_1.level#0",
        "tmp%143#0 (copy)"
      ]
    },
    "176": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "log_1.level#0",
        "tmp%143#0",
        "tmp%143#0 (copy)"
      ],
      "stack_out": [
        "tmp%143#0",
        "log_1.level#0",
        "tmp%143#0 (copy)",
        "8"
      ]
    },
    "177": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%5#0",
        "log_1.level#0",
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0",
        "log_1.level#0",
        "item_start_offset%5#0"
      ]
    },
    "178": {
      "op": "dig 2",
      "stack_out": [
        "tmp%143#0",
        "log_1.level#0",
        "item_start_offset%5#0",
        "tmp%143#0 (copy)"
      ]
    },
    "180": {
      "op": "len",
      "defined_out": [
        "item_end_offset%5#0",
        "item_start_offset%5#0",
        "log_1.level#0",
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0",
        "log_1.level#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0"
      ]
    },
    "181": {
      "op": "uncover 3",
      "stack_out": [
        "log_1.level#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0",
        "tmp%143#0"
      ]
    },
    "183": {
      "op": "cover 2",
      "stack_out": [
        "log_1.level#0",
        "tmp%143#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0"
      ]
    },
    "185": {
      "op": "substring3",
      "defined_out": [
        "item1%3#0",
        "log_1.level#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "item1%3#0"
      ]
    },
    "186": {
      "op": "extract 2 0",
      "defined_out": [
        "log_1.level#0",
        "log_1.message#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0"
      ]
    },
    "189": {
      "op": "txna ApplicationArgs 2"
    },
    "192": {
      "op": "dup",
      "defined_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%144#0",
        "tmp%144#0 (copy)"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%144#0",
        "tmp%144#0 (copy)"
      ]
    },
    "193": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%4#0",
        "log_1.level#0",
        "log_1.message#0",
        "tmp%144#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%144#0",
        "item0%4#0"
      ]
    },
    "196": {
      "op": "btoi",
      "defined_out": [
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0",
        "tmp%144#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%144#0",
        "log_2.level#0"
      ]
    },
    "197": {
      "op": "dig 1",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%144#0",
        "log_2.level#0",
        "tmp%144#0 (copy)"
      ]
    },
    "199": {
      "op": "intc_3 // 8",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%144#0",
        "log_2.level#0",
        "tmp%144#0 (copy)",
        "8"
      ]
    },
    "200": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%6#0",
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0",
        "tmp%144#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%144#0",
        "log_2.level#0",
        "item_start_offset%6#0"
      ]
    },
    "201": {
      "op": "dig 2",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%144#0",
        "log_2.level#0",
        "item_start_offset%6#0",
        "tmp%144#0 (copy)"
      ]
    },
    "203": {
      "op": "len",
      "defined_out": [
        "item_end_offset%6#0",
        "item_start_offset%6#0",
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0",
        "tmp%144#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%144#0",
        "log_2.level#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0"
      ]
    },
    "204": {
      "op": "uncover 3",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0",
        "tmp%144#0"
      ]
    },
    "206": {
      "op": "cover 2",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0",
        "tmp%144#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0"
      ]
    },
    "208": {
      "op": "substring3",
      "defined_out": [
        "item1%4#0",
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0",
        "item1%4#0"
      ]
    },
    "209": {
      "op": "extract 2 0",
      "defined_out": [
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0",
        "log_2.message#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0",
        "log_2.message#0"
      ]
    },
    "212": {
      "op": "uncover 3",
      "stack_out": [
        "log_1.message#0",
        "log_2.level#0",
        "log_2.message#0",
        "log_1.level#0"
      ]
    },
    "214": {
      "op": "uncover 2",
      "stack_out": [
        "log_1.message#0",
        "log_2.message#0",
        "log_1.level#0",
        "log_2.level#0"
      ]
    },
    "216": {
      "op": "==",
      "defined_out": [
        "log_1.message#0",
        "log_2.message#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "log_1.message#0",
        "log_2.message#0",
        "tmp%0#0"
      ]
    },
    "217": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "log_1.message#0",
        "log_2.message#0"
      ]
    },
    "219": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "220": {
      "op": "&&",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "221": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "0x00"
      ]
    },
    "224": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "0x00",
        "0"
      ]
    },
    "225": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%2#1"
      ]
    },
    "227": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "228": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "229": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "230": {
      "op": "concat",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "231": {
      "op": "log",
      "stack_out": []
    },
    "232": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "233": {
      "op": "return"
    },
    "234": {
      "block": "main_return_args_after_14th_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "236": {
      "op": "!",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "237": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "238": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "240": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "241": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "244": {
      "error": "Index access is out of bounds",
      "op": "extract 0 1 // on error: Index access is out of bounds",
      "defined_out": [
        "a15#0"
      ],
      "stack_out": [
        "a15#0"
      ]
    },
    "247": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a15#0",
        "tmp%127#0"
      ],
      "stack_out": [
        "a15#0",
        "tmp%127#0"
      ]
    },
    "250": {
      "error": "Index access is out of bounds",
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "a15#0",
        "a16#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0"
      ]
    },
    "253": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a15#0",
        "a16#0",
        "tmp%129#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "tmp%129#0"
      ]
    },
    "256": {
      "error": "Index access is out of bounds",
      "op": "extract 2 1 // on error: Index access is out of bounds",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0"
      ]
    },
    "259": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "tmp%131#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "tmp%131#0"
      ]
    },
    "262": {
      "error": "Index access is out of bounds",
      "op": "extract 3 1 // on error: Index access is out of bounds",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0"
      ]
    },
    "265": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "tmp%133#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "tmp%133#0"
      ]
    },
    "268": {
      "error": "Index access is out of bounds",
      "op": "extract 4 4 // on error: Index access is out of bounds",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0"
      ]
    },
    "271": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "tmp%135#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "tmp%135#0"
      ]
    },
    "274": {
      "error": "Index access is out of bounds",
      "op": "extract 8 1 // on error: Index access is out of bounds",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "a20#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "a20#0"
      ]
    },
    "277": {
      "op": "uncover 5"
    },
    "279": {
      "op": "uncover 5",
      "stack_out": [
        "a17#0",
        "a18#0",
        "a19#0",
        "a20#0",
        "a15#0",
        "a16#0"
      ]
    },
    "281": {
      "op": "concat",
      "defined_out": [
        "a17#0",
        "a18#0",
        "a19#0",
        "a20#0",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "a17#0",
        "a18#0",
        "a19#0",
        "a20#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "282": {
      "op": "uncover 4",
      "stack_out": [
        "a18#0",
        "a19#0",
        "a20#0",
        "encoded_tuple_buffer%2#0",
        "a17#0"
      ]
    },
    "284": {
      "op": "concat",
      "defined_out": [
        "a18#0",
        "a19#0",
        "a20#0",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "a18#0",
        "a19#0",
        "a20#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "285": {
      "op": "uncover 3",
      "stack_out": [
        "a19#0",
        "a20#0",
        "encoded_tuple_buffer%3#0",
        "a18#0"
      ]
    },
    "287": {
      "op": "concat",
      "defined_out": [
        "a19#0",
        "a20#0",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "a19#0",
        "a20#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "288": {
      "op": "uncover 2",
      "stack_out": [
        "a20#0",
        "encoded_tuple_buffer%4#0",
        "a19#0"
      ]
    },
    "290": {
      "op": "concat",
      "defined_out": [
        "a20#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "a20#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "291": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "a20#0"
      ]
    },
    "292": {
      "op": "concat",
      "defined_out": [
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0"
      ]
    },
    "293": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "last_arg#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%0#3"
      ]
    },
    "296": {
      "op": "dig 1",
      "defined_out": [
        "last_arg#0",
        "last_arg#0 (copy)",
        "tmp%0#3"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%0#3",
        "last_arg#0 (copy)"
      ]
    },
    "298": {
      "op": "==",
      "defined_out": [
        "last_arg#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%1#0"
      ]
    },
    "299": {
      "op": "assert",
      "stack_out": [
        "last_arg#0"
      ]
    },
    "300": {
      "op": "dup",
      "stack_out": [
        "last_arg#0",
        "last_arg#0 (copy)"
      ]
    },
    "301": {
      "op": "len",
      "defined_out": [
        "last_arg#0",
        "length%0#0"
      ],
      "stack_out": [
        "last_arg#0",
        "length%0#0"
      ]
    },
    "302": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0",
        "as_bytes%0#0"
      ]
    },
    "303": {
      "op": "extract 6 2",
      "defined_out": [
        "last_arg#0",
        "length_uint16%0#0"
      ],
      "stack_out": [
        "last_arg#0",
        "length_uint16%0#0"
      ]
    },
    "306": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "last_arg#0"
      ]
    },
    "307": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "308": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "309": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "310": {
      "op": "concat",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "311": {
      "op": "log",
      "stack_out": []
    },
    "312": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "313": {
      "op": "return"
    },
    "314": {
      "block": "main_echo_nested_tuple_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "316": {
      "op": "!",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "317": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "318": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "320": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "321": {
      "op": "txna ApplicationArgs 1"
    },
    "324": {
      "op": "dup"
    },
    "325": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%105#0",
        "tmp%105#0 (copy)"
      ],
      "stack_out": [
        "tmp%105#0",
        "tmp%105#0 (copy)",
        "0"
      ]
    },
    "326": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "item_start_offset%0#0"
      ]
    },
    "327": {
      "op": "dig 1",
      "stack_out": [
        "tmp%105#0",
        "item_start_offset%0#0",
        "tmp%105#0 (copy)"
      ]
    },
    "329": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "tmp%105#0",
        "tmp%105#0 (copy)"
      ],
      "stack_out": [
        "tmp%105#0",
        "item_start_offset%0#0",
        "tmp%105#0 (copy)",
        "2"
      ]
    },
    "331": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "332": {
      "op": "dig 2",
      "stack_out": [
        "tmp%105#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "tmp%105#0 (copy)"
      ]
    },
    "334": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "tmp%105#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "336": {
      "op": "dig 2",
      "defined_out": [
        "item_end_offset%0#0",
        "item_end_offset%0#0 (copy)",
        "item_start_offset%0#0",
        "tmp%105#0",
        "tmp%105#0 (copy)"
      ],
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "tmp%105#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0 (copy)"
      ]
    },
    "338": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%0#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "item0%0#0"
      ]
    },
    "339": {
      "op": "dup",
      "defined_out": [
        "item0%0#0",
        "item0%0#0 (copy)",
        "item_end_offset%0#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "340": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "0"
      ]
    },
    "341": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%0#0",
        "item_start_offset%1#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_start_offset%1#0"
      ]
    },
    "342": {
      "op": "dig 1",
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item0%0#0 (copy)"
      ]
    },
    "344": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item0%0#0 (copy)",
        "2"
      ]
    },
    "346": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "347": {
      "op": "dig 2",
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "item0%0#0 (copy)"
      ]
    },
    "349": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item0%0#0 (copy)",
        "item_start_offset%1#0"
      ]
    },
    "351": {
      "op": "dig 2",
      "defined_out": [
        "item0%0#0",
        "item0%0#0 (copy)",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "item_end_offset%1#0 (copy)",
        "item_start_offset%1#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item0%0#0 (copy)",
        "item_start_offset%1#0",
        "item_end_offset%1#0 (copy)"
      ]
    },
    "353": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "item0%1#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item0%1#0"
      ]
    },
    "354": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "tmp%105#0",
        "tuple_of_tuples.0.0#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "tuple_of_tuples.0.0#0"
      ]
    },
    "357": {
      "op": "dig 2",
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "tuple_of_tuples.0.0#0",
        "item0%0#0 (copy)"
      ]
    },
    "359": {
      "op": "len",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "item_end_offset%2#0",
        "tmp%105#0",
        "tuple_of_tuples.0.0#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "tuple_of_tuples.0.0#0",
        "item_end_offset%2#0"
      ]
    },
    "360": {
      "op": "swap"
    },
    "361": {
      "op": "cover 3",
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "tuple_of_tuples.0.0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item_end_offset%2#0"
      ]
    },
    "363": {
      "op": "substring3",
      "defined_out": [
        "item_end_offset%0#0",
        "tmp%105#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0"
      ]
    },
    "364": {
      "op": "dig 3",
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tmp%105#0 (copy)"
      ]
    },
    "366": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_end_offset%3#0",
        "tmp%105#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "item_end_offset%3#0"
      ]
    },
    "367": {
      "op": "uncover 4"
    },
    "369": {
      "op": "uncover 4",
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "item_end_offset%3#0",
        "tmp%105#0",
        "item_end_offset%0#0"
      ]
    },
    "371": {
      "op": "uncover 2",
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tmp%105#0",
        "item_end_offset%0#0",
        "item_end_offset%3#0"
      ]
    },
    "373": {
      "op": "substring3",
      "defined_out": [
        "item1%1#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "item1%1#0"
      ]
    },
    "374": {
      "op": "dup",
      "defined_out": [
        "item1%1#0",
        "item1%1#0 (copy)",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ]
    },
    "375": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%2#0",
        "item1%1#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "item1%1#0",
        "item0%2#0"
      ]
    },
    "378": {
      "op": "btoi",
      "defined_out": [
        "item1%1#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "item1%1#0",
        "tuple_of_tuples.1.0#0"
      ]
    },
    "379": {
      "op": "dig 1",
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "item1%1#0",
        "tuple_of_tuples.1.0#0",
        "item1%1#0 (copy)"
      ]
    },
    "381": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "item1%1#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "item1%1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0"
      ]
    },
    "384": {
      "op": "dig 2",
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "item1%1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "item1%1#0 (copy)"
      ]
    },
    "386": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "item1%1#0",
        "item1%1#0 (copy)",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "item1%1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "item1%1#0 (copy)",
        "16"
      ]
    },
    "388": {
      "op": "extract_uint16",
      "defined_out": [
        "item1%1#0",
        "item_start_offset%4#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "item1%1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "item_start_offset%4#0"
      ]
    },
    "389": {
      "op": "dig 3",
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "item1%1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "item_start_offset%4#0",
        "item1%1#0 (copy)"
      ]
    },
    "391": {
      "op": "len",
      "defined_out": [
        "item1%1#0",
        "item_end_offset%4#0",
        "item_start_offset%4#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "item1%1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "392": {
      "op": "uncover 4",
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "item1%1#0"
      ]
    },
    "394": {
      "op": "cover 2",
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "item1%1#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "396": {
      "op": "substring3",
      "defined_out": [
        "item2%0#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "item2%0#0"
      ]
    },
    "397": {
      "op": "extract 2 0",
      "defined_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0"
      ]
    },
    "400": {
      "op": "bytec_1 // \"echo: \"",
      "defined_out": [
        "\"echo: \"",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0",
        "\"echo: \""
      ]
    },
    "401": {
      "op": "uncover 5",
      "stack_out": [
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0",
        "\"echo: \"",
        "tuple_of_tuples.0.0#0"
      ]
    },
    "403": {
      "op": "concat",
      "defined_out": [
        "tmp%0#3",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3"
      ]
    },
    "404": {
      "op": "uncover 4",
      "stack_out": [
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "tuple_of_tuples.0.1#0"
      ]
    },
    "406": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "tmp%0#3",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "expr_value_trimmed%1#0"
      ]
    },
    "409": {
      "op": "bytec_1 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "expr_value_trimmed%1#0",
        "tmp%0#3",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "expr_value_trimmed%1#0",
        "0x6563686f3a20"
      ]
    },
    "410": {
      "op": "swap",
      "stack_out": [
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "0x6563686f3a20",
        "expr_value_trimmed%1#0"
      ]
    },
    "411": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "tmp%0#3",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "concatenated%0#0"
      ]
    },
    "412": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "tmp%0#3",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "413": {
      "op": "len",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0",
        "tmp%0#3",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "414": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "tmp%0#3",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "415": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0",
        "tmp%0#3",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "418": {
      "op": "swap",
      "stack_out": [
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "419": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "tmp%0#3",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "concat_result%0#0"
      ]
    },
    "420": {
      "op": "uncover 4",
      "stack_out": [
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "concat_result%0#0",
        "tuple_of_tuples.1.0#0"
      ]
    },
    "422": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "concat_result%0#0",
        "tmp%0#3",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "concat_result%0#0",
        "tuple_of_tuples.1.0#0",
        "1"
      ]
    },
    "423": {
      "op": "+",
      "defined_out": [
        "concat_result%0#0",
        "tmp%0#3",
        "tmp%1#2",
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.1#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "concat_result%0#0",
        "tmp%1#2"
      ]
    },
    "424": {
      "op": "uncover 4",
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "concat_result%0#0",
        "tmp%1#2",
        "tuple_of_tuples.1.1#0"
      ]
    },
    "426": {
      "op": "btoi",
      "defined_out": [
        "concat_result%0#0",
        "tmp%0#3",
        "tmp%1#2",
        "tmp%2#2",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "concat_result%0#0",
        "tmp%1#2",
        "tmp%2#2"
      ]
    },
    "427": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "concat_result%0#0",
        "tmp%1#2",
        "tmp%2#2",
        "1"
      ]
    },
    "428": {
      "op": "+",
      "defined_out": [
        "concat_result%0#0",
        "tmp%0#3",
        "tmp%1#2",
        "to_encode%0#1",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "concat_result%0#0",
        "tmp%1#2",
        "to_encode%0#1"
      ]
    },
    "429": {
      "op": "itob",
      "defined_out": [
        "concat_result%0#0",
        "tmp%0#3",
        "tmp%1#2",
        "tuple_of_tuples.1.2#0",
        "val_as_bytes%0#1"
      ],
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1"
      ]
    },
    "430": {
      "op": "bytec_1 // 0x6563686f3a20",
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#3",
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "0x6563686f3a20"
      ]
    },
    "431": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#3",
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "0x6563686f3a20",
        "tuple_of_tuples.1.2#0"
      ]
    },
    "433": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "tmp%0#3",
        "tmp%1#2",
        "tmp%3#1",
        "val_as_bytes%0#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1"
      ]
    },
    "434": {
      "op": "dig 4",
      "defined_out": [
        "concat_result%0#0",
        "tmp%0#3",
        "tmp%0#3 (copy)",
        "tmp%1#2",
        "tmp%3#1",
        "val_as_bytes%0#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1",
        "tmp%0#3 (copy)"
      ]
    },
    "436": {
      "op": "len",
      "defined_out": [
        "concat_result%0#0",
        "length%4#0",
        "tmp%0#3",
        "tmp%1#2",
        "tmp%3#1",
        "val_as_bytes%0#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1",
        "length%4#0"
      ]
    },
    "437": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "concat_result%0#0",
        "tmp%0#3",
        "tmp%1#2",
        "tmp%3#1",
        "val_as_bytes%0#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1",
        "as_bytes%6#0"
      ]
    },
    "438": {
      "op": "extract 6 2",
      "defined_out": [
        "concat_result%0#0",
        "length_uint16%4#0",
        "tmp%0#3",
        "tmp%1#2",
        "tmp%3#1",
        "val_as_bytes%0#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1",
        "length_uint16%4#0"
      ]
    },
    "441": {
      "op": "uncover 5",
      "stack_out": [
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1",
        "length_uint16%4#0",
        "tmp%0#3"
      ]
    },
    "443": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "encoded_value%4#0",
        "tmp%1#2",
        "tmp%3#1",
        "val_as_bytes%0#1"
      ],
      "stack_out": [
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_value%4#0"
      ]
    },
    "444": {
      "op": "dup",
      "defined_out": [
        "concat_result%0#0",
        "encoded_value%4#0",
        "encoded_value%4#0 (copy)",
        "tmp%1#2",
        "tmp%3#1",
        "val_as_bytes%0#1"
      ],
      "stack_out": [
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_value%4#0",
        "encoded_value%4#0 (copy)"
      ]
    },
    "445": {
      "op": "len",
      "defined_out": [
        "concat_result%0#0",
        "data_length%2#0",
        "encoded_value%4#0",
        "tmp%1#2",
        "tmp%3#1",
        "val_as_bytes%0#1"
      ],
      "stack_out": [
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_value%4#0",
        "data_length%2#0"
      ]
    },
    "446": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "concat_result%0#0",
        "data_length%2#0",
        "encoded_value%4#0",
        "tmp%1#2",
        "tmp%3#1",
        "val_as_bytes%0#1"
      ],
      "stack_out": [
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_value%4#0",
        "data_length%2#0",
        "4"
      ]
    },
    "448": {
      "op": "+",
      "defined_out": [
        "concat_result%0#0",
        "current_tail_offset%4#0",
        "encoded_value%4#0",
        "tmp%1#2",
        "tmp%3#1",
        "val_as_bytes%0#1"
      ],
      "stack_out": [
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_value%4#0",
        "current_tail_offset%4#0"
      ]
    },
    "449": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "concat_result%0#0",
        "encoded_value%4#0",
        "tmp%1#2",
        "tmp%3#1",
        "val_as_bytes%0#1"
      ],
      "stack_out": [
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_value%4#0",
        "as_bytes%8#0"
      ]
    },
    "450": {
      "op": "extract 6 2",
      "defined_out": [
        "concat_result%0#0",
        "encoded_value%4#0",
        "offset_as_uint16%3#0",
        "tmp%1#2",
        "tmp%3#1",
        "val_as_bytes%0#1"
      ],
      "stack_out": [
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_value%4#0",
        "offset_as_uint16%3#0"
      ]
    },
    "453": {
      "op": "bytec_2 // 0x0004",
      "defined_out": [
        "0x0004",
        "concat_result%0#0",
        "encoded_value%4#0",
        "offset_as_uint16%3#0",
        "tmp%1#2",
        "tmp%3#1",
        "val_as_bytes%0#1"
      ],
      "stack_out": [
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_value%4#0",
        "offset_as_uint16%3#0",
        "0x0004"
      ]
    },
    "454": {
      "op": "swap",
      "stack_out": [
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_value%4#0",
        "0x0004",
        "offset_as_uint16%3#0"
      ]
    },
    "455": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "encoded_tuple_buffer%9#0",
        "encoded_value%4#0",
        "tmp%1#2",
        "tmp%3#1",
        "val_as_bytes%0#1"
      ],
      "stack_out": [
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_value%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "456": {
      "op": "swap",
      "stack_out": [
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_tuple_buffer%9#0",
        "encoded_value%4#0"
      ]
    },
    "457": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "encoded_tuple_buffer%10#0",
        "tmp%1#2",
        "tmp%3#1",
        "val_as_bytes%0#1"
      ],
      "stack_out": [
        "concat_result%0#0",
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "458": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_tuple_buffer%10#0",
        "concat_result%0#0"
      ]
    },
    "460": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "tmp%1#2",
        "tmp%3#1",
        "val_as_bytes%0#1"
      ],
      "stack_out": [
        "tmp%1#2",
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "461": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_tuple_buffer%11#0",
        "tmp%1#2"
      ]
    },
    "463": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "tmp%3#1",
        "val_as_bytes%0#1",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0"
      ]
    },
    "464": {
      "op": "dig 2",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "tmp%3#1",
        "tmp%3#1 (copy)",
        "val_as_bytes%0#1",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "tmp%3#1 (copy)"
      ]
    },
    "466": {
      "op": "len",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "length%5#0",
        "tmp%3#1",
        "val_as_bytes%0#1",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "length%5#0"
      ]
    },
    "467": {
      "op": "itob",
      "defined_out": [
        "as_bytes%9#0",
        "encoded_tuple_buffer%11#0",
        "tmp%3#1",
        "val_as_bytes%0#1",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "as_bytes%9#0"
      ]
    },
    "468": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "length_uint16%5#0",
        "tmp%3#1",
        "val_as_bytes%0#1",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%0#1",
        "tmp%3#1",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "length_uint16%5#0"
      ]
    },
    "471": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%0#1",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "length_uint16%5#0",
        "tmp%3#1"
      ]
    },
    "473": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "val_as_bytes%0#1",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%0#1",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "encoded_value%5#0"
      ]
    },
    "474": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#1",
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "val_as_bytes%3#0"
      ]
    },
    "475": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "val_as_bytes%3#0",
        "val_as_bytes%0#1"
      ]
    },
    "477": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "478": {
      "op": "pushbytes 0x0012",
      "defined_out": [
        "0x0012",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%14#0",
        "0x0012"
      ]
    },
    "482": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%15#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "483": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%15#0",
        "encoded_value%5#0"
      ]
    },
    "484": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "485": {
      "op": "dig 1",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%11#0 (copy)",
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%11#0 (copy)"
      ]
    },
    "487": {
      "op": "len",
      "defined_out": [
        "data_length%5#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "data_length%5#0"
      ]
    },
    "488": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "data_length%5#0",
        "4"
      ]
    },
    "490": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%9#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "current_tail_offset%9#0"
      ]
    },
    "491": {
      "op": "itob",
      "defined_out": [
        "as_bytes%12#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "as_bytes%12#0"
      ]
    },
    "492": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "offset_as_uint16%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "offset_as_uint16%6#0"
      ]
    },
    "495": {
      "op": "bytec_2 // 0x0004",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "offset_as_uint16%6#0",
        "0x0004"
      ]
    },
    "496": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "0x0004",
        "offset_as_uint16%6#0"
      ]
    },
    "497": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%19#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "498": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "500": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%20#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "501": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%20#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "502": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%21#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%21#0"
      ]
    },
    "503": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%21#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%21#0",
        "0x151f7c75"
      ]
    },
    "504": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%21#0"
      ]
    },
    "505": {
      "op": "concat",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "506": {
      "op": "log",
      "stack_out": []
    },
    "507": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "508": {
      "op": "return"
    },
    "509": {
      "block": "main_echo_native_tuple_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "511": {
      "op": "!",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "512": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "513": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "515": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "516": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "519": {
      "op": "extract 2 0",
      "defined_out": [
        "s#0"
      ],
      "stack_out": [
        "s#0"
      ]
    },
    "522": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "s#0",
        "tmp%95#0"
      ],
      "stack_out": [
        "s#0",
        "tmp%95#0"
      ]
    },
    "525": {
      "op": "extract 2 0",
      "defined_out": [
        "b#0",
        "s#0"
      ],
      "stack_out": [
        "s#0",
        "b#0"
      ]
    },
    "528": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "b#0",
        "s#0",
        "tmp%97#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "tmp%97#0"
      ]
    },
    "531": {
      "op": "btoi",
      "defined_out": [
        "b#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "u#0"
      ]
    },
    "532": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "b#0",
        "bu#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "u#0",
        "bu#0"
      ]
    },
    "535": {
      "op": "bytec_1 // \"echo: \"",
      "defined_out": [
        "\"echo: \"",
        "b#0",
        "bu#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "u#0",
        "bu#0",
        "\"echo: \""
      ]
    },
    "536": {
      "op": "uncover 4",
      "stack_out": [
        "b#0",
        "u#0",
        "bu#0",
        "\"echo: \"",
        "s#0"
      ]
    },
    "538": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "bu#0",
        "tmp%0#3",
        "u#0"
      ],
      "stack_out": [
        "b#0",
        "u#0",
        "bu#0",
        "tmp%0#3"
      ]
    },
    "539": {
      "op": "bytec_1 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "b#0",
        "bu#0",
        "tmp%0#3",
        "u#0"
      ],
      "stack_out": [
        "b#0",
        "u#0",
        "bu#0",
        "tmp%0#3",
        "0x6563686f3a20"
      ]
    },
    "540": {
      "op": "uncover 4",
      "stack_out": [
        "u#0",
        "bu#0",
        "tmp%0#3",
        "0x6563686f3a20",
        "b#0"
      ]
    },
    "542": {
      "op": "concat",
      "defined_out": [
        "bu#0",
        "tmp%0#3",
        "tmp%1#3",
        "u#0"
      ],
      "stack_out": [
        "u#0",
        "bu#0",
        "tmp%0#3",
        "tmp%1#3"
      ]
    },
    "543": {
      "op": "uncover 3",
      "stack_out": [
        "bu#0",
        "tmp%0#3",
        "tmp%1#3",
        "u#0"
      ]
    },
    "545": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "bu#0",
        "tmp%0#3",
        "tmp%1#3",
        "u#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%0#3",
        "tmp%1#3",
        "u#0",
        "1"
      ]
    },
    "546": {
      "op": "+",
      "defined_out": [
        "bu#0",
        "tmp%0#3",
        "tmp%1#3",
        "tmp%2#2"
      ],
      "stack_out": [
        "bu#0",
        "tmp%0#3",
        "tmp%1#3",
        "tmp%2#2"
      ]
    },
    "547": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#3",
        "tmp%1#3",
        "tmp%2#2",
        "bu#0"
      ]
    },
    "549": {
      "op": "bytec_3 // 0x01",
      "defined_out": [
        "0x01",
        "bu#0",
        "tmp%0#3",
        "tmp%1#3",
        "tmp%2#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "tmp%1#3",
        "tmp%2#2",
        "bu#0",
        "0x01"
      ]
    },
    "550": {
      "op": "b+",
      "defined_out": [
        "tmp%0#3",
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2"
      ]
    },
    "551": {
      "op": "dig 3",
      "defined_out": [
        "tmp%0#3",
        "tmp%0#3 (copy)",
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2",
        "tmp%0#3 (copy)"
      ]
    },
    "553": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "tmp%0#3",
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2",
        "length%2#0"
      ]
    },
    "554": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "tmp%0#3",
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2",
        "as_bytes%2#0"
      ]
    },
    "555": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "tmp%0#3",
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2",
        "length_uint16%2#0"
      ]
    },
    "558": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2",
        "length_uint16%2#0",
        "tmp%0#3"
      ]
    },
    "560": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0",
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2"
      ],
      "stack_out": [
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2",
        "encoded_value%2#0"
      ]
    },
    "561": {
      "op": "dig 3",
      "defined_out": [
        "encoded_value%2#0",
        "tmp%1#3",
        "tmp%1#3 (copy)",
        "tmp%2#2",
        "tmp%3#2"
      ],
      "stack_out": [
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2",
        "encoded_value%2#0",
        "tmp%1#3 (copy)"
      ]
    },
    "563": {
      "op": "len",
      "defined_out": [
        "encoded_value%2#0",
        "length%3#0",
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2"
      ],
      "stack_out": [
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2",
        "encoded_value%2#0",
        "length%3#0"
      ]
    },
    "564": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded_value%2#0",
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2"
      ],
      "stack_out": [
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2",
        "encoded_value%2#0",
        "as_bytes%3#0"
      ]
    },
    "565": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%2#0",
        "length_uint16%3#0",
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2"
      ],
      "stack_out": [
        "tmp%1#3",
        "tmp%2#2",
        "tmp%3#2",
        "encoded_value%2#0",
        "length_uint16%3#0"
      ]
    },
    "568": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%2#2",
        "tmp%3#2",
        "encoded_value%2#0",
        "length_uint16%3#0",
        "tmp%1#3"
      ]
    },
    "570": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "tmp%2#2",
        "tmp%3#2"
      ],
      "stack_out": [
        "tmp%2#2",
        "tmp%3#2",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ]
    },
    "571": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#2",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "tmp%2#2"
      ]
    },
    "573": {
      "op": "itob",
      "defined_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "tmp%3#2",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%3#2",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "574": {
      "op": "dig 3",
      "defined_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "tmp%3#2",
        "tmp%3#2 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%3#2",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "tmp%3#2 (copy)"
      ]
    },
    "576": {
      "op": "len",
      "defined_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "len_%1#0",
        "tmp%3#2",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%3#2",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "len_%1#0"
      ]
    },
    "577": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "len_%1#0",
        "tmp%3#2",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%3#2",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "len_%1#0",
        "64"
      ]
    },
    "578": {
      "op": "<=",
      "defined_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "no_overflow%1#0",
        "tmp%3#2",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%3#2",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "no_overflow%1#0"
      ]
    },
    "579": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%3#2",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "580": {
      "op": "intc_2 // 64",
      "stack_out": [
        "tmp%3#2",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "64"
      ]
    },
    "581": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "tmp%3#2",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%3#2",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "b_zeros%1#0"
      ]
    },
    "582": {
      "op": "uncover 4",
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "b_zeros%1#0",
        "tmp%3#2"
      ]
    },
    "584": {
      "op": "b|",
      "defined_out": [
        "arc4_item%0#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "arc4_item%0#0"
      ]
    },
    "585": {
      "op": "dig 3",
      "defined_out": [
        "arc4_item%0#0",
        "encoded_value%2#0",
        "encoded_value%2#0 (copy)",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "arc4_item%0#0",
        "encoded_value%2#0 (copy)"
      ]
    },
    "587": {
      "op": "len",
      "defined_out": [
        "arc4_item%0#0",
        "data_length%0#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "arc4_item%0#0",
        "data_length%0#0"
      ]
    },
    "588": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "arc4_item%0#0",
        "data_length%0#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "arc4_item%0#0",
        "data_length%0#0",
        "76"
      ]
    },
    "590": {
      "op": "+",
      "defined_out": [
        "arc4_item%0#0",
        "current_tail_offset%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "arc4_item%0#0",
        "current_tail_offset%1#0"
      ]
    },
    "591": {
      "op": "itob",
      "defined_out": [
        "arc4_item%0#0",
        "as_bytes%5#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "arc4_item%0#0",
        "as_bytes%5#0"
      ]
    },
    "592": {
      "op": "extract 6 2",
      "defined_out": [
        "arc4_item%0#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "arc4_item%0#0",
        "offset_as_uint16%1#0"
      ]
    },
    "595": {
      "op": "pushbytes 0x004c",
      "defined_out": [
        "0x004c",
        "arc4_item%0#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "arc4_item%0#0",
        "offset_as_uint16%1#0",
        "0x004c"
      ]
    },
    "599": {
      "op": "swap",
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "arc4_item%0#0",
        "0x004c",
        "offset_as_uint16%1#0"
      ]
    },
    "600": {
      "op": "concat",
      "defined_out": [
        "arc4_item%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "arc4_item%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "601": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "arc4_item%0#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "603": {
      "op": "concat",
      "defined_out": [
        "arc4_item%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "arc4_item%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "604": {
      "op": "swap",
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%3#0",
        "arc4_item%0#0"
      ]
    },
    "605": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "606": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%3#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%2#0"
      ]
    },
    "608": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "609": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%3#0"
      ]
    },
    "610": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "611": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x151f7c75"
      ]
    },
    "612": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "613": {
      "op": "concat",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "614": {
      "op": "log",
      "stack_out": []
    },
    "615": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "616": {
      "op": "return"
    },
    "617": {
      "block": "main_echo_native_biguint_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "619": {
      "op": "!",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "620": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "621": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "623": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "624": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "627": {
      "op": "bytec_3 // 0x01",
      "defined_out": [
        "0x01",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "0x01"
      ]
    },
    "628": {
      "op": "b+",
      "defined_out": [
        "tmp%0#6"
      ],
      "stack_out": [
        "tmp%0#6"
      ]
    },
    "629": {
      "op": "dup",
      "defined_out": [
        "tmp%0#6",
        "tmp%0#6 (copy)"
      ],
      "stack_out": [
        "tmp%0#6",
        "tmp%0#6 (copy)"
      ]
    },
    "630": {
      "op": "len",
      "defined_out": [
        "len_%0#0",
        "tmp%0#6"
      ],
      "stack_out": [
        "tmp%0#6",
        "len_%0#0"
      ]
    },
    "631": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "len_%0#0",
        "tmp%0#6"
      ],
      "stack_out": [
        "tmp%0#6",
        "len_%0#0",
        "64"
      ]
    },
    "632": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "tmp%0#6"
      ],
      "stack_out": [
        "tmp%0#6",
        "no_overflow%0#0"
      ]
    },
    "633": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%0#6"
      ]
    },
    "634": {
      "op": "intc_2 // 64",
      "stack_out": [
        "tmp%0#6",
        "64"
      ]
    },
    "635": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0",
        "tmp%0#6"
      ],
      "stack_out": [
        "tmp%0#6",
        "b_zeros%0#0"
      ]
    },
    "636": {
      "op": "b|",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "637": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0",
        "0x151f7c75"
      ]
    },
    "638": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%87#0"
      ]
    },
    "639": {
      "op": "concat",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "640": {
      "op": "log",
      "stack_out": []
    },
    "641": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "642": {
      "op": "return"
    },
    "643": {
      "block": "main_echo_native_uint64_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "645": {
      "op": "!",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "646": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "647": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "649": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "650": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "653": {
      "op": "btoi",
      "defined_out": [
        "value#1"
      ],
      "stack_out": [
        "value#1"
      ]
    },
    "654": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "value#1"
      ],
      "stack_out": [
        "value#1",
        "1"
      ]
    },
    "655": {
      "op": "+",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "656": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "657": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "658": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "659": {
      "op": "concat",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "660": {
      "op": "log",
      "stack_out": []
    },
    "661": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "662": {
      "op": "return"
    },
    "663": {
      "block": "main_echo_native_bytes_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "665": {
      "op": "!",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "666": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "667": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "669": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "670": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "673": {
      "op": "extract 2 0",
      "defined_out": [
        "value#2"
      ],
      "stack_out": [
        "value#2"
      ]
    },
    "676": {
      "op": "bytec_1 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "value#2"
      ],
      "stack_out": [
        "value#2",
        "0x6563686f3a20"
      ]
    },
    "677": {
      "op": "swap",
      "stack_out": [
        "0x6563686f3a20",
        "value#2"
      ]
    },
    "678": {
      "op": "concat",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3"
      ]
    },
    "679": {
      "op": "dup",
      "defined_out": [
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ]
    },
    "680": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "length%1#0"
      ]
    },
    "681": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "as_bytes%1#0"
      ]
    },
    "682": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "length_uint16%1#0"
      ]
    },
    "685": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "tmp%0#3"
      ]
    },
    "686": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "687": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "688": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "689": {
      "op": "concat",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "690": {
      "op": "log",
      "stack_out": []
    },
    "691": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "692": {
      "op": "return"
    },
    "693": {
      "block": "main_echo_native_string_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "695": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "696": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "697": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "699": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "700": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "703": {
      "op": "extract 2 0",
      "defined_out": [
        "value#2"
      ],
      "stack_out": [
        "value#2"
      ]
    },
    "706": {
      "op": "bytec_1 // \"echo: \"",
      "defined_out": [
        "\"echo: \"",
        "value#2"
      ],
      "stack_out": [
        "value#2",
        "\"echo: \""
      ]
    },
    "707": {
      "op": "swap",
      "stack_out": [
        "\"echo: \"",
        "value#2"
      ]
    },
    "708": {
      "op": "concat",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3"
      ]
    },
    "709": {
      "op": "dup",
      "defined_out": [
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ]
    },
    "710": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "length%0#0"
      ]
    },
    "711": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "as_bytes%0#0"
      ]
    },
    "712": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "length_uint16%0#0"
      ]
    },
    "715": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "tmp%0#3"
      ]
    },
    "716": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "717": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "718": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "719": {
      "op": "concat",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "720": {
      "op": "log",
      "stack_out": []
    },
    "721": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "722": {
      "op": "return"
    },
    "723": {
      "block": "main_log_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "725": {
      "op": "!",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "726": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "727": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "729": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "730": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "733": {
      "op": "btoi",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "734": {
      "op": "txnas Assets",
      "defined_out": [
        "asset#0"
      ],
      "stack_out": [
        "asset#0"
      ]
    },
    "736": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "asset#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%55#0"
      ]
    },
    "739": {
      "op": "btoi",
      "defined_out": [
        "asset#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%56#0"
      ]
    },
    "740": {
      "op": "txnas Accounts",
      "defined_out": [
        "account#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "account#0"
      ]
    },
    "742": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "account#0",
        "asset#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "asset#0",
        "account#0",
        "tmp%58#0"
      ]
    },
    "745": {
      "op": "btoi",
      "defined_out": [
        "account#0",
        "asset#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "asset#0",
        "account#0",
        "tmp%59#0"
      ]
    },
    "746": {
      "op": "txnas Applications",
      "defined_out": [
        "account#0",
        "app#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "account#0",
        "app#0"
      ]
    },
    "748": {
      "op": "uncover 2",
      "stack_out": [
        "account#0",
        "app#0",
        "asset#0"
      ]
    },
    "750": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "account#0",
        "app#0",
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "account#0",
        "app#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "752": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "account#0",
        "app#0",
        "value%0#0"
      ]
    },
    "753": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "value%0#0",
        "account#0"
      ]
    },
    "755": {
      "op": "concat",
      "defined_out": [
        "app#0",
        "tmp%1#3"
      ],
      "stack_out": [
        "app#0",
        "tmp%1#3"
      ]
    },
    "756": {
      "op": "swap",
      "stack_out": [
        "tmp%1#3",
        "app#0"
      ]
    },
    "757": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "tmp%1#3",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%1#3",
        "value%1#0",
        "check%1#0"
      ]
    },
    "759": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%1#3",
        "value%1#0"
      ]
    },
    "760": {
      "op": "concat",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1"
      ]
    },
    "761": {
      "op": "log",
      "stack_out": []
    },
    "762": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "763": {
      "op": "return"
    },
    "764": {
      "block": "main_log_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "766": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "767": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "768": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "770": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "771": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#2"
      ],
      "stack_out": [
        "value#2"
      ]
    },
    "774": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3"
      ]
    },
    "777": {
      "op": "log",
      "stack_out": []
    },
    "778": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "779": {
      "op": "return"
    },
    "780": {
      "block": "main_log_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "782": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "783": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "784": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "786": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "787": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#2"
      ],
      "stack_out": [
        "value#2"
      ]
    },
    "790": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "value#2"
      ],
      "stack_out": [
        "value#2",
        "0"
      ]
    },
    "791": {
      "op": "getbit",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "792": {
      "op": "pushbytess 0x46616c7365 0x54727565 // 0x46616c7365, 0x54727565",
      "defined_out": [
        "0x46616c7365",
        "0x54727565",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x46616c7365",
        "0x54727565"
      ]
    },
    "805": {
      "op": "uncover 2",
      "stack_out": [
        "0x46616c7365",
        "0x54727565",
        "tmp%0#0"
      ]
    },
    "807": {
      "op": "select",
      "defined_out": [
        "tmp%1#3"
      ],
      "stack_out": [
        "tmp%1#3"
      ]
    },
    "808": {
      "op": "log",
      "stack_out": []
    },
    "809": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "810": {
      "op": "return"
    },
    "811": {
      "block": "main_log_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "813": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "814": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "815": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "817": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "818": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#2"
      ],
      "stack_out": [
        "value#2"
      ]
    },
    "821": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3"
      ]
    },
    "824": {
      "op": "log",
      "stack_out": []
    },
    "825": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "826": {
      "op": "return"
    },
    "827": {
      "block": "main_log_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "829": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "830": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "831": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "833": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "834": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#2"
      ],
      "stack_out": [
        "value#2"
      ]
    },
    "837": {
      "op": "log",
      "stack_out": []
    },
    "838": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "839": {
      "op": "return"
    },
    "840": {
      "block": "main_log_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "842": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "843": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "844": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "846": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "847": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#2"
      ],
      "stack_out": [
        "value#2"
      ]
    },
    "850": {
      "op": "log",
      "stack_out": []
    },
    "851": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "852": {
      "op": "return"
    },
    "853": {
      "block": "main_no_args_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "855": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "856": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "857": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "859": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "860": {
      "op": "pushbytes 0x151f7c75000000000000002a",
      "defined_out": [
        "0x151f7c75000000000000002a"
      ],
      "stack_out": [
        "0x151f7c75000000000000002a"
      ]
    },
    "874": {
      "op": "log",
      "stack_out": []
    },
    "875": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "876": {
      "op": "return"
    },
    "877": {
      "block": "main_echo_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "879": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "880": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "881": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "883": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "884": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#2"
      ],
      "stack_out": [
        "value#2"
      ]
    },
    "887": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0"
      ]
    },
    "890": {
      "op": "bytec_1 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0",
        "0x6563686f3a20"
      ]
    },
    "891": {
      "op": "swap",
      "stack_out": [
        "0x6563686f3a20",
        "expr_value_trimmed%1#0"
      ]
    },
    "892": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0"
      ]
    },
    "893": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ],
      "stack_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "894": {
      "op": "len",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "895": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "896": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "899": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "900": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0"
      ],
      "stack_out": [
        "concat_result%0#0"
      ]
    },
    "901": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "concat_result%0#0"
      ],
      "stack_out": [
        "concat_result%0#0",
        "0x151f7c75"
      ]
    },
    "902": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "concat_result%0#0"
      ]
    },
    "903": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "904": {
      "op": "log",
      "stack_out": []
    },
    "905": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "906": {
      "op": "return"
    },
    "907": {
      "block": "main_is_a_b_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "909": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "910": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "911": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "913": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "914": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "917": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "920": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%9#0"
      ]
    },
    "923": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "926": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "a#0"
      ]
    },
    "927": {
      "op": "pushbytes 0x61",
      "defined_out": [
        "0x61",
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "b#0",
        "a#0",
        "0x61"
      ]
    },
    "930": {
      "op": "==",
      "defined_out": [
        "b#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "b#0",
        "tmp%0#0"
      ]
    },
    "931": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": [
        "b#0"
      ]
    },
    "932": {
      "op": "pushbytes 0x62",
      "defined_out": [
        "0x62",
        "b#0"
      ],
      "stack_out": [
        "b#0",
        "0x62"
      ]
    },
    "935": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "936": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "937": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "938": {
      "op": "return"
    },
    "939": {
      "block": "main_bare_routing@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "941": {
      "op": "bnz main_after_if_else@26",
      "stack_out": []
    },
    "944": {
      "op": "txn ApplicationID"
    },
    "946": {
      "op": "!"
    },
    "947": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "948": {
      "op": "intc_0 // 1"
    },
    "949": {
      "op": "return"
    }
  }
}