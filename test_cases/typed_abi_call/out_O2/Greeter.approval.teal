#pragma version 10

test_cases.typed_abi_call.typed_c2c.Greeter.approval_program:
    txn NumAppArgs
    bz main_bare_routing@9
    method "test_method_selector_kinds(application)void"
    method "test_arg_conversion(application)void"
    method "test_15plus_args(application)void"
    method "test_void(application)void"
    method "test_ref_types(application,asset)void"
    txna ApplicationArgs 0
    match main_test_method_selector_kinds_route@2 main_test_arg_conversion_route@3 main_test_15plus_args_route@4 main_test_void_route@5 main_test_ref_types_route@6
    err // reject transaction

main_test_method_selector_kinds_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_method_selector_kinds
    int 1
    return

main_test_arg_conversion_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_arg_conversion
    int 1
    return

main_test_15plus_args_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_15plus_args
    int 1
    return

main_test_void_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_void
    int 1
    return

main_test_ref_types_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    txna ApplicationArgs 2
    btoi
    txnas Assets
    callsub test_ref_types
    int 1
    return

main_bare_routing@9:
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(app: uint64) -> void:
test_method_selector_kinds:
    proto 1 0
    itxn_begin
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    frame_dig -1
    itxn_field ApplicationID
    method "echo(string)string"
    itxn_field ApplicationArgs
    byte "\x00\x05test1"
    itxn_field ApplicationArgs
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    byte "\x00\x0becho: test1"
    ==
    assert
    itxn_begin
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    frame_dig -1
    itxn_field ApplicationID
    method "echo(string)string"
    itxn_field ApplicationArgs
    byte "\x00\x05test2"
    itxn_field ApplicationArgs
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    byte "\x00\x0becho: test2"
    ==
    assert
    itxn_begin
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    frame_dig -1
    itxn_field ApplicationID
    method "echo(string)string"
    itxn_field ApplicationArgs
    byte "\x00\x05test3"
    itxn_field ApplicationArgs
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    byte "\x00\x0becho: test3"
    ==
    assert
    itxn_begin
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    frame_dig -1
    itxn_field ApplicationID
    method "echo(string)string"
    itxn_field ApplicationArgs
    byte "\x00\x05test4"
    itxn_field ApplicationArgs
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    byte "\x00\x0becho: test4"
    ==
    assert
    itxn_begin
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    frame_dig -1
    itxn_field ApplicationID
    method "echo(string)string"
    itxn_field ApplicationArgs
    byte "\x00\x05test5"
    itxn_field ApplicationArgs
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    byte "\x00\x0becho: test5"
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(app: uint64) -> void:
test_arg_conversion:
    proto 1 0
    itxn_begin
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    frame_dig -1
    itxn_field ApplicationID
    method "log_string(string)void"
    itxn_field ApplicationArgs
    byte "\x00\nconverted1"
    itxn_field ApplicationArgs
    itxn_submit
    itxn LastLog
    byte "converted1"
    ==
    assert
    itxn_begin
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    frame_dig -1
    itxn_field ApplicationID
    method "log_uint64(uint64)void"
    itxn_field ApplicationArgs
    byte 0x0000000000000002
    itxn_field ApplicationArgs
    itxn_submit
    itxn LastLog
    int 2
    itob
    ==
    assert
    itxn_begin
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    frame_dig -1
    itxn_field ApplicationID
    method "log_uint512(uint512)void"
    itxn_field ApplicationArgs
    byte 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003
    itxn_field ApplicationArgs
    itxn_submit
    itxn LastLog
    byte 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003
    ==
    assert
    itxn_begin
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    frame_dig -1
    itxn_field ApplicationID
    method "log_bytes(byte[])void"
    itxn_field ApplicationArgs
    byte 0x000134
    itxn_field ApplicationArgs
    itxn_submit
    itxn LastLog
    byte "4"
    ==
    assert
    itxn_begin
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    frame_dig -1
    itxn_field ApplicationID
    method "log_bool(bool)void"
    itxn_field ApplicationArgs
    byte 0x80
    itxn_field ApplicationArgs
    itxn_submit
    itxn LastLog
    byte "True"
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(app: uint64) -> void:
test_15plus_args:
    proto 1 0
    itxn_begin
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    frame_dig -1
    itxn_field ApplicationID
    method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]"
    itxn_field ApplicationArgs
    byte 0x0000000000000001
    itxn_field ApplicationArgs
    byte 0x0000000000000002
    itxn_field ApplicationArgs
    byte 0x0000000000000003
    itxn_field ApplicationArgs
    byte 0x0000000000000004
    itxn_field ApplicationArgs
    byte 0x0000000000000005
    itxn_field ApplicationArgs
    byte 0x0000000000000006
    itxn_field ApplicationArgs
    byte 0x0000000000000007
    itxn_field ApplicationArgs
    byte 0x0000000000000008
    itxn_field ApplicationArgs
    byte 0x0000000000000009
    itxn_field ApplicationArgs
    byte 0x000000000000000a
    itxn_field ApplicationArgs
    byte 0x000000000000000b
    itxn_field ApplicationArgs
    byte 0x000000000000000c
    itxn_field ApplicationArgs
    byte 0x000000000000000d
    itxn_field ApplicationArgs
    byte 0x000000000000000e
    itxn_field ApplicationArgs
    byte 0x0f101112deadbeef14
    itxn_field ApplicationArgs
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    byte 0x0f101112deadbeef14
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_void(app: uint64) -> void:
test_void:
    proto 1 0
    itxn_begin
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    frame_dig -1
    itxn_field ApplicationID
    method "log_string(string)void"
    itxn_field ApplicationArgs
    byte "\x00\x06World1"
    itxn_field ApplicationArgs
    itxn_submit
    itxn LastLog
    byte "World1"
    ==
    assert
    itxn_begin
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    frame_dig -1
    itxn_field ApplicationID
    method "log_string(string)void"
    itxn_field ApplicationArgs
    byte "\x00\x06World2"
    itxn_field ApplicationArgs
    itxn_submit
    itxn LastLog
    byte "World2"
    ==
    assert
    itxn_begin
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    frame_dig -1
    itxn_field ApplicationID
    method "log_string(string)void"
    itxn_field ApplicationArgs
    byte "\x00\x06World3"
    itxn_field ApplicationArgs
    itxn_submit
    itxn LastLog
    byte "World3"
    ==
    assert
    itxn_begin
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    frame_dig -1
    itxn_field ApplicationID
    method "log_string(string)void"
    itxn_field ApplicationArgs
    byte "\x00\x06World4"
    itxn_field ApplicationArgs
    itxn_submit
    itxn LastLog
    byte "World4"
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(app: uint64, asset: uint64) -> void:
test_ref_types:
    proto 2 0
    itxn_begin
    global CurrentApplicationAddress
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    frame_dig -1
    itxn_field Assets
    frame_dig -2
    itxn_field Applications
    frame_dig -2
    itxn_field ApplicationID
    method "log_asset_account_app(asset,account,application)void"
    itxn_field ApplicationArgs
    byte 0x00
    itxn_field ApplicationArgs
    byte 0x01
    itxn_field ApplicationArgs
    byte 0x01
    itxn_field ApplicationArgs
    itxn_field Accounts
    itxn_submit
    itxn LastLog
    frame_dig -1
    asset_params_get AssetName
    assert // asset exists
    global CurrentApplicationAddress
    concat
    frame_dig -2
    app_params_get AppAddress
    assert // application exists
    concat
    ==
    assert
    retsub
