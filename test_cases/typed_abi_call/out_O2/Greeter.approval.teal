#pragma version 10

test_cases.typed_abi_call.typed_c2c.Greeter.approval_program:
    callsub __puya_arc4_router__
    return


// test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@20
    method "test_is_a_b(byte[],byte[],application)void"
    method "test_method_selector_kinds(application)void"
    method "test_method_overload(application)void"
    method "test_arg_conversion(application)void"
    method "test_15plus_args(application)void"
    method "test_void(application)void"
    method "test_ref_types(application,asset)void"
    method "test_native_string(application)void"
    method "test_native_bytes(application)void"
    method "test_native_uint64(application)void"
    method "test_native_biguint(application)void"
    method "test_native_tuple(application)void"
    method "test_native_tuple_method_ref(application)void"
    method "test_nested_tuples(application)void"
    method "test_no_args(application)void"
    method "test_named_tuples(application)void"
    txna ApplicationArgs 0
    match __puya_arc4_router___test_is_a_b_route@2 __puya_arc4_router___test_method_selector_kinds_route@3 __puya_arc4_router___test_method_overload_route@4 __puya_arc4_router___test_arg_conversion_route@5 __puya_arc4_router___test_15plus_args_route@6 __puya_arc4_router___test_void_route@7 __puya_arc4_router___test_ref_types_route@8 __puya_arc4_router___test_native_string_route@9 __puya_arc4_router___test_native_bytes_route@10 __puya_arc4_router___test_native_uint64_route@11 __puya_arc4_router___test_native_biguint_route@12 __puya_arc4_router___test_native_tuple_route@13 __puya_arc4_router___test_native_tuple_method_ref_route@14 __puya_arc4_router___test_nested_tuples_route@15 __puya_arc4_router___test_no_args_route@16 __puya_arc4_router___test_named_tuples_route@17
    int 0
    retsub

__puya_arc4_router___test_is_a_b_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txnas Applications
    callsub test_is_a_b
    int 1
    retsub

__puya_arc4_router___test_method_selector_kinds_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_method_selector_kinds
    int 1
    retsub

__puya_arc4_router___test_method_overload_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_method_overload
    int 1
    retsub

__puya_arc4_router___test_arg_conversion_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_arg_conversion
    int 1
    retsub

__puya_arc4_router___test_15plus_args_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_15plus_args
    int 1
    retsub

__puya_arc4_router___test_void_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_void
    int 1
    retsub

__puya_arc4_router___test_ref_types_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    txna ApplicationArgs 2
    btoi
    txnas Assets
    callsub test_ref_types
    int 1
    retsub

__puya_arc4_router___test_native_string_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_native_string
    int 1
    retsub

__puya_arc4_router___test_native_bytes_route@10:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_native_bytes
    int 1
    retsub

__puya_arc4_router___test_native_uint64_route@11:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_native_uint64
    int 1
    retsub

__puya_arc4_router___test_native_biguint_route@12:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_native_biguint
    int 1
    retsub

__puya_arc4_router___test_native_tuple_route@13:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_native_tuple
    int 1
    retsub

__puya_arc4_router___test_native_tuple_method_ref_route@14:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_native_tuple_method_ref
    int 1
    retsub

__puya_arc4_router___test_nested_tuples_route@15:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_nested_tuples
    int 1
    retsub

__puya_arc4_router___test_no_args_route@16:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_no_args
    int 1
    retsub

__puya_arc4_router___test_named_tuples_route@17:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_named_tuples
    int 1
    retsub

__puya_arc4_router___bare_routing@20:
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@24
    txn ApplicationID
    !
    assert // is creating
    int 1
    retsub

__puya_arc4_router___after_if_else@24:
    int 0
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b(a: bytes, b: bytes, app: uint64) -> void:
test_is_a_b:
    proto 3 0
    itxn_begin
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    frame_dig -2
    len
    itob
    extract 6 2
    frame_dig -2
    concat
    frame_dig -1
    itxn_field ApplicationID
    method "is_a_b(byte[],byte[])void"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(app: uint64) -> void:
test_method_selector_kinds:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo(string)string"
    itxn_field ApplicationArgs
    byte 0x00057465737431
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    byte 0x000b6563686f3a207465737431
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo(string)string"
    itxn_field ApplicationArgs
    byte 0x00057465737432
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    byte 0x000b6563686f3a207465737432
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo(string)string"
    itxn_field ApplicationArgs
    byte 0x00057465737433
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    byte 0x000b6563686f3a207465737433
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo(string)string"
    itxn_field ApplicationArgs
    byte 0x00057465737434
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    byte 0x000b6563686f3a207465737434
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo(string)string"
    itxn_field ApplicationArgs
    byte 0x00057465737435
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    byte 0x000b6563686f3a207465737435
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(app: uint64) -> void:
test_method_overload:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo(string)string"
    itxn_field ApplicationArgs
    byte 0x000e7479706564202b2069676e6f7265
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    byte 0x00146563686f3a207479706564202b2069676e6f7265
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo(string)string"
    itxn_field ApplicationArgs
    byte 0x0010756e7479706564202b2069676e6f7265
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    byte 0x00166563686f3a20756e7479706564202b2069676e6f7265
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo(string)string"
    itxn_field ApplicationArgs
    byte 0x00057475706c65
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    itxn LastLog
    swap
    byte 0x000b6563686f3a207475706c65
    ==
    assert
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    byte 0x000b6563686f3a207475706c65
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo(string)string"
    itxn_field ApplicationArgs
    byte 0x0007756e7479706564
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    byte 0x000d6563686f3a20756e7479706564
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(app: uint64) -> void:
test_arg_conversion:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "log(string)void"
    itxn_field ApplicationArgs
    byte 0x000a636f6e76657274656431
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    byte 0x636f6e76657274656431
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "log(uint64)void"
    itxn_field ApplicationArgs
    byte 0x0000000000000002
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    int 2
    itob
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "log(uint512)void"
    itxn_field ApplicationArgs
    byte 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    byte 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "log(byte[])void"
    itxn_field ApplicationArgs
    byte 0x000134
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    byte 0x34
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "log(bool)void"
    itxn_field ApplicationArgs
    byte 0x80
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    byte 0x54727565
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(app: uint64) -> void:
test_15plus_args:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]"
    itxn_field ApplicationArgs
    byte 0x0000000000000001
    itxn_field ApplicationArgs
    byte 0x0000000000000002
    itxn_field ApplicationArgs
    byte 0x0000000000000003
    itxn_field ApplicationArgs
    byte 0x0000000000000004
    itxn_field ApplicationArgs
    byte 0x0000000000000005
    itxn_field ApplicationArgs
    byte 0x0000000000000006
    itxn_field ApplicationArgs
    byte 0x0000000000000007
    itxn_field ApplicationArgs
    byte 0x0000000000000008
    itxn_field ApplicationArgs
    byte 0x0000000000000009
    itxn_field ApplicationArgs
    byte 0x000000000000000a
    itxn_field ApplicationArgs
    byte 0x000000000000000b
    itxn_field ApplicationArgs
    byte 0x000000000000000c
    itxn_field ApplicationArgs
    byte 0x000000000000000d
    itxn_field ApplicationArgs
    byte 0x000000000000000e
    itxn_field ApplicationArgs
    byte 0x0f101112deadbeef14
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    byte 0x0f101112deadbeef14
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_void(app: uint64) -> void:
test_void:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "log(string)void"
    itxn_field ApplicationArgs
    byte 0x0006576f726c6431
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    byte 0x576f726c6431
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "log(string)void"
    itxn_field ApplicationArgs
    byte 0x0006576f726c6432
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    byte 0x576f726c6432
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "log(string)void"
    itxn_field ApplicationArgs
    byte 0x0006576f726c6433
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    byte 0x576f726c6433
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "log(string)void"
    itxn_field ApplicationArgs
    byte 0x0006576f726c6434
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    byte 0x576f726c6434
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(app: uint64, asset: uint64) -> void:
test_ref_types:
    proto 2 0
    itxn_begin
    global CurrentApplicationAddress
    frame_dig -2
    itxn_field ApplicationID
    frame_dig -1
    itxn_field Assets
    frame_dig -2
    itxn_field Applications
    itxn_field Accounts
    method "log(asset,account,application)void"
    itxn_field ApplicationArgs
    byte 0x00
    itxn_field ApplicationArgs
    byte 0x01
    itxn_field ApplicationArgs
    byte 0x01
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    frame_dig -1
    asset_params_get AssetName
    assert // asset exists
    global CurrentApplicationAddress
    concat
    frame_dig -2
    app_params_get AppAddress
    assert // application exists
    concat
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(app: uint64) -> void:
test_native_string:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    byte 0x000173
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    dup
    byte "echo: s"
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    byte 0x000173
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    dig 1
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    byte 0x000173
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(app: uint64) -> void:
test_native_bytes:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    byte 0x000162
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    dup
    byte 0x6563686f3a2062
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    byte 0x000162
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    dig 1
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    byte 0x000162
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(app: uint64) -> void:
test_native_uint64:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    byte 0x0000000000000001
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    dup
    int 2
    ==
    assert
    itxn_begin
    int 1
    itob
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    dig 1
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    byte 0x0000000000000001
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(app: uint64) -> void:
test_native_biguint:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    byte 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    byte 0x03
    b==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    byte 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dig 1
    b==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    byte 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    b==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(app: uint64) -> void:
test_native_tuple:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    byte 0x00027331
    itxn_field ApplicationArgs
    byte 0x00026231
    itxn_field ApplicationArgs
    byte 0x0000000000000001
    itxn_field ApplicationArgs
    byte 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    int 0
    extract_uint16
    swap
    dup
    int 2
    extract_uint16
    dig 1
    uncover 3
    dig 2
    substring3
    cover 2
    dig 1
    len
    dig 2
    cover 2
    substring3
    cover 2
    dup
    extract 4 8 // on error: Index access is out of bounds
    cover 3
    dup
    extract 12 64 // on error: Index access is out of bounds
    cover 3
    swap
    extract 2 0
    dup
    byte "echo: s1"
    ==
    assert
    uncover 2
    extract 2 0
    dup
    byte 0x6563686f3a206231
    ==
    assert
    uncover 4
    btoi
    dup
    int 2
    ==
    assert
    dig 4
    byte 0x03
    b==
    assert
    itxn_begin
    int 1
    itob
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    byte 0x00027331
    itxn_field ApplicationArgs
    byte 0x00026231
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    byte 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dig 4
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    byte 0x00027331
    itxn_field ApplicationArgs
    byte 0x00026231
    itxn_field ApplicationArgs
    byte 0x0000000000000001
    itxn_field ApplicationArgs
    byte 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    uncover 4
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    byte 0x00027331
    itxn_field ApplicationArgs
    byte 0x00026231
    itxn_field ApplicationArgs
    byte 0x0000000000000001
    itxn_field ApplicationArgs
    byte 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    int 0
    extract_uint16
    swap
    dup
    int 2
    extract_uint16
    dig 1
    uncover 3
    dig 2
    substring3
    extract 2 0
    cover 2
    dig 1
    len
    dig 2
    cover 2
    substring3
    extract 2 0
    swap
    dup
    extract 4 8 // on error: Index access is out of bounds
    btoi
    cover 2
    extract 12 64 // on error: Index access is out of bounds
    cover 2
    uncover 6
    uncover 4
    ==
    assert
    uncover 4
    ==
    assert
    uncover 2
    ==
    assert
    b==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref(app: uint64) -> void:
test_native_tuple_method_ref:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    byte 0x00027331
    itxn_field ApplicationArgs
    byte 0x00026231
    itxn_field ApplicationArgs
    byte 0x0000000000000001
    itxn_field ApplicationArgs
    byte 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    int 0
    extract_uint16
    swap
    dup
    int 2
    extract_uint16
    dig 1
    uncover 3
    dig 2
    substring3
    extract 2 0
    cover 2
    dig 1
    len
    dig 2
    cover 2
    substring3
    extract 2 0
    swap
    dup
    extract 4 8 // on error: Index access is out of bounds
    btoi
    cover 2
    extract 12 64 // on error: Index access is out of bounds
    cover 2
    dig 3
    byte "echo: s1"
    ==
    assert
    dup
    byte 0x6563686f3a206231
    ==
    assert
    dig 1
    int 2
    ==
    assert
    dig 2
    byte 0x03
    b==
    assert
    itxn_begin
    int 1
    itob
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    byte 0x00027331
    itxn_field ApplicationArgs
    byte 0x00026231
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    byte 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    int 0
    extract_uint16
    swap
    dup
    int 2
    extract_uint16
    dig 1
    uncover 3
    dig 2
    substring3
    extract 2 0
    cover 2
    dig 1
    len
    dig 2
    cover 2
    substring3
    extract 2 0
    swap
    dup
    extract 4 8 // on error: Index access is out of bounds
    btoi
    cover 2
    extract 12 64 // on error: Index access is out of bounds
    cover 3
    uncover 2
    dig 7
    ==
    swap
    dig 4
    ==
    &&
    swap
    dig 4
    ==
    &&
    swap
    dig 4
    b==
    &&
    assert // expected native arguments to give the same result
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    byte 0x00027331
    itxn_field ApplicationArgs
    byte 0x00026231
    itxn_field ApplicationArgs
    byte 0x0000000000000001
    itxn_field ApplicationArgs
    byte 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    int 0
    extract_uint16
    swap
    dup
    int 2
    extract_uint16
    dig 1
    uncover 3
    dig 2
    substring3
    extract 2 0
    cover 2
    dig 1
    len
    dig 2
    cover 2
    substring3
    extract 2 0
    swap
    dup
    extract 4 8 // on error: Index access is out of bounds
    btoi
    cover 2
    extract 12 64 // on error: Index access is out of bounds
    cover 3
    uncover 2
    dig 7
    ==
    swap
    dig 4
    ==
    &&
    swap
    dig 4
    ==
    &&
    swap
    dig 4
    b==
    &&
    assert // expected arc4 arguments to give the same result
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    byte 0x00027331
    itxn_field ApplicationArgs
    byte 0x00026231
    itxn_field ApplicationArgs
    byte 0x0000000000000001
    itxn_field ApplicationArgs
    byte 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    int 0
    extract_uint16
    swap
    dup
    int 2
    extract_uint16
    dig 1
    uncover 3
    dig 2
    substring3
    extract 2 0
    cover 2
    dig 1
    len
    dig 2
    cover 2
    substring3
    extract 2 0
    swap
    dup
    extract 4 8 // on error: Index access is out of bounds
    btoi
    cover 2
    extract 12 64 // on error: Index access is out of bounds
    cover 3
    uncover 2
    uncover 7
    ==
    swap
    uncover 4
    ==
    &&
    swap
    uncover 3
    ==
    &&
    swap
    uncover 2
    b==
    &&
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples(app: uint64) -> void:
test_nested_tuples:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    byte 0x00040010000400080002733100027332000000000000000100000000000000020012000133
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    int 0
    extract_uint16
    swap
    dup
    int 2
    extract_uint16
    dig 1
    uncover 3
    dig 2
    substring3
    dup
    int 0
    extract_uint16
    swap
    dup
    int 2
    extract_uint16
    dig 1
    uncover 3
    dig 2
    substring3
    extract 2 0
    cover 4
    dig 1
    len
    substring3
    cover 2
    dig 1
    len
    substring3
    dup
    extract 0 8 // on error: Index access is out of bounds
    btoi
    swap
    dup
    extract 8 8 // on error: Index access is out of bounds
    cover 2
    dup
    int 16
    extract_uint16
    swap
    dup
    len
    swap
    cover 2
    substring3
    extract 2 0
    uncover 4
    byte "echo: s1"
    ==
    assert
    uncover 3
    byte 0x00086563686f3a207332
    ==
    assert
    swap
    int 2
    ==
    assert
    swap
    byte 0x0000000000000003
    b==
    assert
    byte 0x6563686f3a2033
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    byte 0x00040010000400080002733100027332000000000000000100000000000000020012000133
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    int 0
    extract_uint16
    swap
    dup
    int 2
    extract_uint16
    dig 1
    uncover 3
    dig 2
    substring3
    dup
    int 0
    extract_uint16
    swap
    dup
    int 2
    extract_uint16
    dig 1
    uncover 3
    dig 2
    substring3
    extract 2 0
    cover 4
    dig 1
    len
    substring3
    cover 2
    dig 1
    len
    substring3
    dup
    extract 0 8 // on error: Index access is out of bounds
    btoi
    swap
    dup
    extract 8 8 // on error: Index access is out of bounds
    cover 2
    dup
    int 16
    extract_uint16
    swap
    dup
    len
    swap
    cover 2
    substring3
    extract 2 0
    uncover 4
    byte "echo: s1"
    ==
    assert
    uncover 3
    byte 0x00086563686f3a207332
    ==
    assert
    swap
    int 2
    ==
    assert
    swap
    byte 0x0000000000000003
    b==
    assert
    byte 0x6563686f3a2033
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    byte 0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    int 0
    extract_uint16
    swap
    dup
    int 2
    extract_uint16
    dig 1
    uncover 3
    dig 2
    substring3
    dup
    int 0
    extract_uint16
    swap
    dup
    int 2
    extract_uint16
    dig 1
    uncover 3
    dig 2
    substring3
    extract 2 0
    cover 4
    dig 1
    len
    substring3
    cover 2
    dig 1
    len
    substring3
    dup
    extract 0 8 // on error: Index access is out of bounds
    btoi
    swap
    dup
    extract 8 8 // on error: Index access is out of bounds
    cover 2
    dup
    int 16
    extract_uint16
    swap
    dup
    len
    swap
    cover 2
    substring3
    extract 2 0
    uncover 4
    byte "echo: s1b"
    ==
    assert
    uncover 3
    byte 0x00096563686f3a20733262
    ==
    assert
    swap
    int 12
    ==
    assert
    swap
    byte 0x0000000000000016
    b==
    assert
    byte 0x6563686f3a203362
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args(app: uint64) -> void:
test_no_args:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "no_args()uint64"
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    int 42
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "no_args()uint64"
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    byte 0x000000000000002a
    b==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "no_args()uint64"
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    byte 0x000000000000002a
    b==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples(app: uint64) -> void:
test_named_tuples:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "logs_are_equal((uint64,string),(uint64,string))bool"
    itxn_field ApplicationArgs
    byte 0x0000000000000001000a00056c6f672031
    itxn_field ApplicationArgs
    byte 0x0000000000000001000a00056c6f672031
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    int 0
    getbit
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "logs_are_equal((uint64,string),(uint64,string))bool"
    itxn_field ApplicationArgs
    byte 0x0000000000000002000a00056c6f672032
    itxn_field ApplicationArgs
    byte 0x0000000000000001000a00056c6f672031
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    int 0
    getbit
    !
    assert
    retsub
