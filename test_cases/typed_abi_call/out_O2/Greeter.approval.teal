#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 6 1 2
    bytecblock 0x151f7c75 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x0000000000000001 0x9bf81913 0x16e03919 0x00027331 0x00026231 0x0000000000000001000a00056c6f672031 0xb4b4334e "echo: s1" 0xb862ee19 0xab271ce4 0x0000000000000003 0x03 0xd8cc363b 0xa9fb6cf1 0x2659e818 0x000162 0x4a444c77 0x000173 0xddd07185 0x000000000000002a 0x00040010000400080002733100027332000000000000000100000000000000020012000133 0x00086563686f3a207332 0x6563686f3a2033 0x6563686f3a206231 0x0000000000000002 0x0f101112deadbeef14 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003 0x000b6563686f3a207475706c65
    txn NumAppArgs
    bz main_bare_routing@23
    pushbytess 0x07916bea 0x1859b0ba 0x4eb11b0d 0x0d176a4a 0xb54730c8 0x7859eaf7 0x24478a3c 0xe44b2eaf 0x7a60c035 0x6a559cb3 0x1be60712 0x19cb78a4 0xf0ef6873 0x3d2bfe37 0x54e98f56 0xf55b7567 0x8598bb43 0xbb691362 // method "test_is_a_b(byte[],byte[],application)void", method "test_method_selector_kinds(application)void", method "test_method_overload(application)void", method "test_arg_conversion(application)void", method "test_15plus_args(application)void", method "test_void(application)void", method "test_ref_types(application,asset)void", method "test_account_to_address(application)void", method "test_native_string(application)void", method "test_native_bytes(application)void", method "test_native_uint64(application)void", method "test_native_biguint(application)void", method "test_native_tuple(application)void", method "test_native_tuple_method_ref(application)void", method "test_nested_tuples(application)void", method "test_no_args(application)void", method "test_named_tuples(application)void", method "test_arc4_struct(application)void"
    txna ApplicationArgs 0
    match main_test_is_a_b_route@3 main_test_method_selector_kinds_route@4 main_test_method_overload_route@5 main_test_arg_conversion_route@6 main_test_15plus_args_route@7 main_test_void_route@8 main_test_ref_types_route@9 main_test_account_to_address_route@10 main_test_native_string_route@11 main_test_native_bytes_route@12 main_test_native_uint64_route@13 main_test_native_biguint_route@14 main_test_native_tuple_route@15 main_test_native_tuple_method_ref_route@16 main_test_nested_tuples_route@17 main_test_no_args_route@18 main_test_named_tuples_route@19 main_test_arc4_struct_route@20

main_after_if_else@27:
    intc_0 // 0
    return

main_test_arc4_struct_route@20:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    itxn_begin
    itxn_field ApplicationID
    pushbytes 0xdc4f1992 // method "echo_log_struct((uint64,string))(uint64,string)"
    itxn_field ApplicationArgs
    bytec 7 // 0x0000000000000001000a00056c6f672031
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    itxn LastLog
    swap
    bytec 7 // 0x0000000000000001000a00056c6f672031
    ==
    assert // expected output to match input
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    bytec 7 // 0x0000000000000001000a00056c6f672031
    ==
    assert // expected output to match input
    intc_2 // 1
    return

main_test_named_tuples_route@19:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec 20 // method "logs_are_equal((uint64,string),(uint64,string))bool"
    itxn_field ApplicationArgs
    bytec 7 // 0x0000000000000001000a00056c6f672031
    itxn_field ApplicationArgs
    bytec 7 // 0x0000000000000001000a00056c6f672031
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    intc_0 // 0
    getbit
    assert
    itxn_begin
    itxn_field ApplicationID
    bytec 20 // method "logs_are_equal((uint64,string),(uint64,string))bool"
    itxn_field ApplicationArgs
    pushbytes 0x0000000000000002000a00056c6f672032
    itxn_field ApplicationArgs
    bytec 7 // 0x0000000000000001000a00056c6f672031
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    intc_0 // 0
    getbit
    !
    assert
    intc_2 // 1
    return

main_test_no_args_route@18:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec 10 // method "no_args()uint64"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    pushint 42 // 42
    ==
    assert
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec 10 // method "no_args()uint64"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    bytec 21 // 0x000000000000002a
    b==
    assert
    itxn_begin
    itxn_field ApplicationID
    bytec 10 // method "no_args()uint64"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    bytec 21 // 0x000000000000002a
    b==
    assert
    intc_2 // 1
    return

main_test_nested_tuples_route@17:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec 11 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    bytec 22 // 0x00040010000400080002733100027332000000000000000100000000000000020012000133
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    swap
    cover 3
    substring3
    dig 3
    len
    uncover 4
    uncover 4
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    dig 2
    pushint 16 // 16
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    extract 2 0
    uncover 4
    bytec 9 // "echo: s1"
    ==
    assert
    uncover 3
    bytec 23 // 0x00086563686f3a207332
    ==
    assert
    uncover 2
    intc_3 // 2
    ==
    assert
    swap
    bytec 12 // 0x0000000000000003
    b==
    assert
    bytec 24 // 0x6563686f3a2033
    ==
    assert
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec 11 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    bytec 22 // 0x00040010000400080002733100027332000000000000000100000000000000020012000133
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    swap
    cover 3
    substring3
    dig 3
    len
    uncover 4
    uncover 4
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    dig 2
    pushint 16 // 16
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    extract 2 0
    uncover 4
    bytec 9 // "echo: s1"
    ==
    assert
    uncover 3
    bytec 23 // 0x00086563686f3a207332
    ==
    assert
    uncover 2
    intc_3 // 2
    ==
    assert
    swap
    bytec 12 // 0x0000000000000003
    b==
    assert
    bytec 24 // 0x6563686f3a2033
    ==
    assert
    itxn_begin
    itxn_field ApplicationID
    bytec 11 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    pushbytes 0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    swap
    cover 3
    substring3
    dig 3
    len
    uncover 4
    uncover 4
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    dig 2
    pushint 16 // 16
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    extract 2 0
    uncover 4
    pushbytes "echo: s1b"
    ==
    assert
    uncover 3
    pushbytes 0x00096563686f3a20733262
    ==
    assert
    uncover 2
    pushint 12 // 12
    ==
    assert
    swap
    pushbytes 0x0000000000000016
    b==
    assert
    pushbytes 0x6563686f3a203362
    ==
    assert
    intc_2 // 1
    return

main_test_native_tuple_method_ref_route@16:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    bytec 5 // 0x00027331
    itxn_field ApplicationArgs
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    bytec_2 // 0x0000000000000001
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    dig 1
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    swap
    cover 3
    substring3
    extract 2 0
    dig 2
    pushint 8 // 8
    extract_uint64
    uncover 3
    extract 16 64
    dig 3
    bytec 9 // "echo: s1"
    ==
    assert
    dig 2
    bytec 25 // 0x6563686f3a206231
    ==
    assert
    dig 1
    intc_3 // 2
    ==
    assert
    dup
    bytec 13 // 0x03
    b==
    assert
    itxn_begin
    intc_2 // 1
    itob
    dig 5
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    bytec 5 // 0x00027331
    itxn_field ApplicationArgs
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    dig 1
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    swap
    cover 3
    substring3
    extract 2 0
    dig 2
    pushint 8 // 8
    extract_uint64
    uncover 3
    extract 16 64
    uncover 3
    dig 7
    ==
    uncover 3
    dig 6
    ==
    &&
    uncover 2
    dig 4
    ==
    &&
    swap
    dig 2
    b==
    &&
    assert // expected native arguments to give the same result
    itxn_begin
    dig 4
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    bytec 5 // 0x00027331
    itxn_field ApplicationArgs
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    bytec_2 // 0x0000000000000001
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    dig 1
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    swap
    cover 3
    substring3
    extract 2 0
    dig 2
    pushint 8 // 8
    extract_uint64
    uncover 3
    extract 16 64
    uncover 3
    dig 7
    ==
    uncover 3
    dig 6
    ==
    &&
    uncover 2
    dig 4
    ==
    &&
    swap
    dig 2
    b==
    &&
    assert // expected arc4 arguments to give the same result
    itxn_begin
    uncover 4
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    bytec 5 // 0x00027331
    itxn_field ApplicationArgs
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    bytec_2 // 0x0000000000000001
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    dig 1
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    swap
    cover 3
    substring3
    extract 2 0
    dig 2
    pushint 8 // 8
    extract_uint64
    uncover 3
    extract 16 64
    uncover 3
    uncover 7
    ==
    uncover 3
    uncover 6
    ==
    &&
    uncover 2
    uncover 4
    ==
    &&
    swap
    uncover 2
    b==
    &&
    assert
    intc_2 // 1
    return

main_test_native_tuple_route@15:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    bytec 5 // 0x00027331
    itxn_field ApplicationArgs
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    bytec_2 // 0x0000000000000001
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    dig 1
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dig 2
    len
    dig 3
    uncover 3
    uncover 2
    substring3
    dig 3
    extract 16 64
    uncover 2
    extract 2 0
    dup
    bytec 9 // "echo: s1"
    ==
    assert
    uncover 2
    extract 2 0
    dup
    bytec 25 // 0x6563686f3a206231
    ==
    assert
    uncover 4
    pushint 8 // 8
    extract_uint64
    dup
    intc_3 // 2
    ==
    assert
    dig 3
    bytec 13 // 0x03
    b==
    assert
    itxn_begin
    intc_2 // 1
    itob
    dig 6
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    bytec 5 // 0x00027331
    itxn_field ApplicationArgs
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dig 5
    ==
    assert
    itxn_begin
    dig 5
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    bytec 5 // 0x00027331
    itxn_field ApplicationArgs
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    bytec_2 // 0x0000000000000001
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    uncover 5
    ==
    assert
    itxn_begin
    uncover 4
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    bytec 5 // 0x00027331
    itxn_field ApplicationArgs
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    bytec_2 // 0x0000000000000001
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    dig 1
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    swap
    cover 3
    substring3
    extract 2 0
    dig 2
    pushint 8 // 8
    extract_uint64
    uncover 3
    extract 16 64
    uncover 6
    uncover 4
    ==
    assert
    uncover 4
    uncover 3
    ==
    assert
    cover 2
    ==
    assert
    b==
    assert
    intc_2 // 1
    return

main_test_native_biguint_route@14:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec 14 // method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    bytec 13 // 0x03
    b==
    assert
    itxn_begin
    dig 1
    itxn_field ApplicationID
    bytec 14 // method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dig 1
    b==
    assert
    itxn_begin
    swap
    itxn_field ApplicationID
    bytec 14 // method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    b==
    assert
    intc_2 // 1
    return

main_test_native_uint64_route@13:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec 15 // method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    bytec_2 // 0x0000000000000001
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    dup
    intc_3 // 2
    ==
    assert
    itxn_begin
    intc_2 // 1
    itob
    dig 2
    itxn_field ApplicationID
    bytec 15 // method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    dig 1
    ==
    assert
    itxn_begin
    swap
    itxn_field ApplicationID
    bytec 15 // method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    bytec_2 // 0x0000000000000001
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    ==
    assert
    intc_2 // 1
    return

main_test_native_bytes_route@12:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec 16 // method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    bytec 17 // 0x000162
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 6 0
    dup
    pushbytes 0x6563686f3a2062
    ==
    assert
    itxn_begin
    dig 1
    itxn_field ApplicationID
    bytec 16 // method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    bytec 17 // 0x000162
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 6 0
    dig 1
    ==
    assert
    itxn_begin
    swap
    itxn_field ApplicationID
    bytec 16 // method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    bytec 17 // 0x000162
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 6 0
    ==
    assert
    intc_2 // 1
    return

main_test_native_string_route@11:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec 18 // method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    bytec 19 // 0x000173
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 6 0
    dup
    pushbytes "echo: s"
    ==
    assert
    itxn_begin
    dig 1
    itxn_field ApplicationID
    bytec 18 // method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    bytec 19 // 0x000173
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 6 0
    dig 1
    ==
    assert
    itxn_begin
    swap
    itxn_field ApplicationID
    bytec 18 // method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    bytec 19 // 0x000173
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 6 0
    ==
    assert
    intc_2 // 1
    return

main_test_account_to_address_route@10:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    itxn_begin
    global CurrentApplicationAddress
    swap
    itxn_field ApplicationID
    pushbytes 0x0437b17e // method "log(address)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    global CurrentApplicationAddress
    ==
    assert
    intc_2 // 1
    return

main_test_ref_types_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    txna ApplicationArgs 2
    btoi
    txnas Assets
    itxn_begin
    global CurrentApplicationAddress
    dig 2
    itxn_field ApplicationID
    dig 1
    itxn_field Assets
    dig 2
    itxn_field Applications
    itxn_field Accounts
    pushbytes 0xcd727b71 // method "log(asset,account,application)void"
    itxn_field ApplicationArgs
    pushbytes 0x00
    itxn_field ApplicationArgs
    pushbytes 0x01
    itxn_field ApplicationArgs
    pushbytes 0x01
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    swap
    asset_params_get AssetName
    assert // asset exists
    global CurrentApplicationAddress
    concat
    uncover 2
    app_params_get AppAddress
    assert // application exists
    concat
    ==
    assert
    intc_2 // 1
    return

main_test_void_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec 8 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes 0x0006576f726c6431
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    pushbytes 0x576f726c6431
    ==
    assert
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec 8 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes 0x0006576f726c6432
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    pushbytes 0x576f726c6432
    ==
    assert
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec 8 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes 0x0006576f726c6433
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    pushbytes 0x576f726c6433
    ==
    assert
    itxn_begin
    itxn_field ApplicationID
    bytec 8 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes 0x0006576f726c6434
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    pushbytes 0x576f726c6434
    ==
    assert
    intc_2 // 1
    return

main_test_15plus_args_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    itxn_begin
    itxn_field ApplicationID
    pushbytes 0xba0b4381 // method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]"
    itxn_field ApplicationArgs
    bytec_2 // 0x0000000000000001
    itxn_field ApplicationArgs
    bytec 26 // 0x0000000000000002
    itxn_field ApplicationArgs
    bytec 12 // 0x0000000000000003
    itxn_field ApplicationArgs
    pushbytes 0x0000000000000004
    itxn_field ApplicationArgs
    pushbytes 0x0000000000000005
    itxn_field ApplicationArgs
    pushbytes 0x0000000000000006
    itxn_field ApplicationArgs
    pushbytes 0x0000000000000007
    itxn_field ApplicationArgs
    pushbytes 0x0000000000000008
    itxn_field ApplicationArgs
    pushbytes 0x0000000000000009
    itxn_field ApplicationArgs
    pushbytes 0x000000000000000a
    itxn_field ApplicationArgs
    pushbytes 0x000000000000000b
    itxn_field ApplicationArgs
    pushbytes 0x000000000000000c
    itxn_field ApplicationArgs
    pushbytes 0x000000000000000d
    itxn_field ApplicationArgs
    pushbytes 0x000000000000000e
    itxn_field ApplicationArgs
    bytec 27 // 0x0f101112deadbeef14
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 6 0
    bytec 27 // 0x0f101112deadbeef14
    ==
    assert
    intc_2 // 1
    return

main_test_arg_conversion_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec 8 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes 0x000a636f6e76657274656431
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    pushbytes 0x636f6e76657274656431
    ==
    assert
    itxn_begin
    dup
    itxn_field ApplicationID
    pushbytes 0x3c1058d9 // method "log(uint64)void"
    itxn_field ApplicationArgs
    bytec 26 // 0x0000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    intc_3 // 2
    itob
    ==
    assert
    itxn_begin
    dup
    itxn_field ApplicationID
    pushbytes 0x6af45930 // method "log(uint512)void"
    itxn_field ApplicationArgs
    bytec 28 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    bytec 28 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003
    ==
    assert
    itxn_begin
    dup
    itxn_field ApplicationID
    pushbytes 0xb500e111 // method "log(byte[])void"
    itxn_field ApplicationArgs
    pushbytes 0x000134
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    pushbytes 0x34
    ==
    assert
    itxn_begin
    itxn_field ApplicationID
    pushbytes 0x6eed7ec3 // method "log(bool)void"
    itxn_field ApplicationArgs
    pushbytes 0x80
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    pushbytes 0x54727565
    ==
    assert
    intc_2 // 1
    return

main_test_method_overload_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec_3 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x000e7479706564202b2069676e6f7265
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    pushbytes 0x00146563686f3a207479706564202b2069676e6f7265
    ==
    assert
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec_3 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x0010756e7479706564202b2069676e6f7265
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    pushbytes 0x00166563686f3a20756e7479706564202b2069676e6f7265
    ==
    assert
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec_3 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00057475706c65
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    itxn LastLog
    swap
    bytec 29 // 0x000b6563686f3a207475706c65
    ==
    assert
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    bytec 29 // 0x000b6563686f3a207475706c65
    ==
    assert
    itxn_begin
    itxn_field ApplicationID
    bytec_3 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x0007756e7479706564
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    pushbytes 0x000d6563686f3a20756e7479706564
    ==
    assert
    intc_2 // 1
    return

main_test_method_selector_kinds_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec_3 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00057465737431
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    pushbytes 0x000b6563686f3a207465737431
    ==
    assert
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec_3 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00057465737432
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    pushbytes 0x000b6563686f3a207465737432
    ==
    assert
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec_3 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00057465737433
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    pushbytes 0x000b6563686f3a207465737433
    ==
    assert
    itxn_begin
    dup
    itxn_field ApplicationID
    bytec_3 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00057465737434
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    pushbytes 0x000b6563686f3a207465737434
    ==
    assert
    itxn_begin
    itxn_field ApplicationID
    bytec_3 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00057465737435
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    pushbytes 0x000b6563686f3a207465737435
    ==
    assert
    intc_2 // 1
    return

main_test_is_a_b_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txnas Applications
    itxn_begin
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    uncover 2
    itxn_field ApplicationID
    pushbytes 0xc77212bc // method "is_a_b(byte[],byte[])void"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    intc_2 // 1
    return

main_bare_routing@23:
    txn OnCompletion
    bnz main_after_if_else@27
    txn ApplicationID
    !
    assert // can only call when creating
    intc_2 // 1
    return
