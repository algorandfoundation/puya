#pragma version 10

test_cases.typed_abi_call.typed_c2c.Greeter.approval_program:
    intcblock 0 6 1 2
    bytecblock 0x151f7c75 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x9bf81913 0x0000000000000001 0x16e03919 0x00027331 0x00026231 0xb4b4334e "echo: s1" 0x0000000000000003 0x4a444c77 0x000173 0x2659e818 0x000162 0xa9fb6cf1 0xd8cc363b 0x03 0xab271ce4 0xb862ee19 0x0000000000000001000a00056c6f672031 "\x00\x0becho: tuple" 0x0000000000000002 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003 0x0f101112deadbeef14 0x6563686f3a206231 0x00040010000400080002733100027332000000000000000100000000000000020012000133 "\x00\x08echo: s2" 0x6563686f3a2033 0x000000000000002a 0xddd07185
    callsub __puya_arc4_router__
    return


// test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@20
    pushbytess 0x07916bea 0x1859b0ba 0x4eb11b0d 0x0d176a4a 0xb54730c8 0x7859eaf7 0x24478a3c 0x7a60c035 0x6a559cb3 0x1be60712 0x19cb78a4 0xf0ef6873 0x3d2bfe37 0x54e98f56 0xf55b7567 0x8598bb43 // method "test_is_a_b(byte[],byte[],application)void", method "test_method_selector_kinds(application)void", method "test_method_overload(application)void", method "test_arg_conversion(application)void", method "test_15plus_args(application)void", method "test_void(application)void", method "test_ref_types(application,asset)void", method "test_native_string(application)void", method "test_native_bytes(application)void", method "test_native_uint64(application)void", method "test_native_biguint(application)void", method "test_native_tuple(application)void", method "test_native_tuple_method_ref(application)void", method "test_nested_tuples(application)void", method "test_no_args(application)void", method "test_named_tuples(application)void"
    txna ApplicationArgs 0
    match __puya_arc4_router___test_is_a_b_route@2 __puya_arc4_router___test_method_selector_kinds_route@3 __puya_arc4_router___test_method_overload_route@4 __puya_arc4_router___test_arg_conversion_route@5 __puya_arc4_router___test_15plus_args_route@6 __puya_arc4_router___test_void_route@7 __puya_arc4_router___test_ref_types_route@8 __puya_arc4_router___test_native_string_route@9 __puya_arc4_router___test_native_bytes_route@10 __puya_arc4_router___test_native_uint64_route@11 __puya_arc4_router___test_native_biguint_route@12 __puya_arc4_router___test_native_tuple_route@13 __puya_arc4_router___test_native_tuple_method_ref_route@14 __puya_arc4_router___test_nested_tuples_route@15 __puya_arc4_router___test_no_args_route@16 __puya_arc4_router___test_named_tuples_route@17
    intc_0 // 0
    retsub

__puya_arc4_router___test_is_a_b_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txnas Applications
    callsub test_is_a_b
    intc_2 // 1
    retsub

__puya_arc4_router___test_method_selector_kinds_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_method_selector_kinds
    intc_2 // 1
    retsub

__puya_arc4_router___test_method_overload_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_method_overload
    intc_2 // 1
    retsub

__puya_arc4_router___test_arg_conversion_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_arg_conversion
    intc_2 // 1
    retsub

__puya_arc4_router___test_15plus_args_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_15plus_args
    intc_2 // 1
    retsub

__puya_arc4_router___test_void_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_void
    intc_2 // 1
    retsub

__puya_arc4_router___test_ref_types_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    txna ApplicationArgs 2
    btoi
    txnas Assets
    callsub test_ref_types
    intc_2 // 1
    retsub

__puya_arc4_router___test_native_string_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_native_string
    intc_2 // 1
    retsub

__puya_arc4_router___test_native_bytes_route@10:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_native_bytes
    intc_2 // 1
    retsub

__puya_arc4_router___test_native_uint64_route@11:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_native_uint64
    intc_2 // 1
    retsub

__puya_arc4_router___test_native_biguint_route@12:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_native_biguint
    intc_2 // 1
    retsub

__puya_arc4_router___test_native_tuple_route@13:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_native_tuple
    intc_2 // 1
    retsub

__puya_arc4_router___test_native_tuple_method_ref_route@14:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_native_tuple_method_ref
    intc_2 // 1
    retsub

__puya_arc4_router___test_nested_tuples_route@15:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_nested_tuples
    intc_2 // 1
    retsub

__puya_arc4_router___test_no_args_route@16:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_no_args
    intc_2 // 1
    retsub

__puya_arc4_router___test_named_tuples_route@17:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Applications
    callsub test_named_tuples
    intc_2 // 1
    retsub

__puya_arc4_router___bare_routing@20:
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@24
    txn ApplicationID
    !
    assert // is creating
    intc_2 // 1
    retsub

__puya_arc4_router___after_if_else@24:
    intc_0 // 0
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b(a: bytes, b: bytes, app: uint64) -> void:
test_is_a_b:
    proto 3 0
    itxn_begin
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    frame_dig -2
    len
    itob
    extract 6 2
    frame_dig -2
    concat
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0xc77212bc // method "is_a_b(byte[],byte[])void"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(app: uint64) -> void:
test_method_selector_kinds:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_2 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes "\x00\x05test1"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    pushbytes "\x00\x0becho: test1"
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_2 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes "\x00\x05test2"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    pushbytes "\x00\x0becho: test2"
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_2 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes "\x00\x05test3"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    pushbytes "\x00\x0becho: test3"
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_2 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes "\x00\x05test4"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    pushbytes "\x00\x0becho: test4"
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_2 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes "\x00\x05test5"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    pushbytes "\x00\x0becho: test5"
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(app: uint64) -> void:
test_method_overload:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_2 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes "\x00\x0etyped + ignore"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    pushbytes "\x00\x14echo: typed + ignore"
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_2 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes "\x00\x10untyped + ignore"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    pushbytes "\x00\x16echo: untyped + ignore"
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_2 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes "\x00\x05tuple"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    itxn LastLog
    swap
    bytec 20 // "\x00\x0becho: tuple"
    ==
    assert
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    bytec 20 // "\x00\x0becho: tuple"
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_2 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes "\x00\x07untyped"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    pushbytes "\x00\recho: untyped"
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(app: uint64) -> void:
test_arg_conversion:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 7 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes "\x00\nconverted1"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    pushbytes 0x636f6e76657274656431
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0x3c1058d9 // method "log(uint64)void"
    itxn_field ApplicationArgs
    bytec 21 // 0x0000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    intc_3 // 2
    itob
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0x6af45930 // method "log(uint512)void"
    itxn_field ApplicationArgs
    bytec 22 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    bytec 22 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0xb500e111 // method "log(byte[])void"
    itxn_field ApplicationArgs
    pushbytes 0x000134
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    pushbytes 0x34
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0x6eed7ec3 // method "log(bool)void"
    itxn_field ApplicationArgs
    pushbytes 0x80
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    pushbytes 0x54727565
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(app: uint64) -> void:
test_15plus_args:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0xba0b4381 // method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]"
    itxn_field ApplicationArgs
    bytec_3 // 0x0000000000000001
    itxn_field ApplicationArgs
    bytec 21 // 0x0000000000000002
    itxn_field ApplicationArgs
    bytec 9 // 0x0000000000000003
    itxn_field ApplicationArgs
    pushbytes 0x0000000000000004
    itxn_field ApplicationArgs
    pushbytes 0x0000000000000005
    itxn_field ApplicationArgs
    pushbytes 0x0000000000000006
    itxn_field ApplicationArgs
    pushbytes 0x0000000000000007
    itxn_field ApplicationArgs
    pushbytes 0x0000000000000008
    itxn_field ApplicationArgs
    pushbytes 0x0000000000000009
    itxn_field ApplicationArgs
    pushbytes 0x000000000000000a
    itxn_field ApplicationArgs
    pushbytes 0x000000000000000b
    itxn_field ApplicationArgs
    pushbytes 0x000000000000000c
    itxn_field ApplicationArgs
    pushbytes 0x000000000000000d
    itxn_field ApplicationArgs
    pushbytes 0x000000000000000e
    itxn_field ApplicationArgs
    bytec 23 // 0x0f101112deadbeef14
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    bytec 23 // 0x0f101112deadbeef14
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_void(app: uint64) -> void:
test_void:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 7 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes "\x00\x06World1"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    pushbytes 0x576f726c6431
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 7 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes "\x00\x06World2"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    pushbytes 0x576f726c6432
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 7 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes "\x00\x06World3"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    pushbytes 0x576f726c6433
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 7 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes "\x00\x06World4"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    pushbytes 0x576f726c6434
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(app: uint64, asset: uint64) -> void:
test_ref_types:
    proto 2 0
    itxn_begin
    global CurrentApplicationAddress
    frame_dig -2
    itxn_field ApplicationID
    frame_dig -1
    itxn_field Assets
    frame_dig -2
    itxn_field Applications
    itxn_field Accounts
    pushbytes 0xcd727b71 // method "log(asset,account,application)void"
    itxn_field ApplicationArgs
    pushbytes 0x00
    itxn_field ApplicationArgs
    pushbytes 0x01
    itxn_field ApplicationArgs
    pushbytes 0x01
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    frame_dig -1
    asset_params_get AssetName
    assert // asset exists
    global CurrentApplicationAddress
    concat
    frame_dig -2
    app_params_get AppAddress
    assert // application exists
    concat
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(app: uint64) -> void:
test_native_string:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 10 // method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    bytec 11 // "\x00\x01s"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    dup
    pushbytes "echo: s"
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 10 // method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    bytec 11 // 0x000173
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    dig 1
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 10 // method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    bytec 11 // "\x00\x01s"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(app: uint64) -> void:
test_native_bytes:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 12 // method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    bytec 13 // 0x000162
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    dup
    pushbytes 0x6563686f3a2062
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 12 // method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    bytec 13 // 0x000162
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    dig 1
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 12 // method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    bytec 13 // 0x000162
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(app: uint64) -> void:
test_native_uint64:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 14 // method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    bytec_3 // 0x0000000000000001
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    dup
    intc_3 // 2
    ==
    assert
    itxn_begin
    intc_2 // 1
    itob
    frame_dig -1
    itxn_field ApplicationID
    bytec 14 // method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    dig 1
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 14 // method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    bytec_3 // 0x0000000000000001
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(app: uint64) -> void:
test_native_biguint:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 15 // method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    bytec 16 // 0x03
    b==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 15 // method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dig 1
    b==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 15 // method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    b==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(app: uint64) -> void:
test_native_tuple:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    bytec 5 // "\x00\x02s1"
    itxn_field ApplicationArgs
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    bytec_3 // 0x0000000000000001
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dig 2
    len
    dig 3
    uncover 3
    uncover 2
    substring3
    dig 2
    extract 4 8 // on error: Index access is out of bounds
    dig 3
    extract 12 64 // on error: Index access is out of bounds
    uncover 3
    extract 2 0
    dup
    bytec 8 // "echo: s1"
    ==
    assert
    uncover 3
    extract 2 0
    dup
    bytec 24 // 0x6563686f3a206231
    ==
    assert
    uncover 3
    btoi
    dup
    intc_3 // 2
    ==
    assert
    dig 3
    bytec 16 // 0x03
    b==
    assert
    itxn_begin
    intc_2 // 1
    itob
    frame_dig -1
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    bytec 5 // 0x00027331
    itxn_field ApplicationArgs
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dig 5
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    bytec 5 // "\x00\x02s1"
    itxn_field ApplicationArgs
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    bytec_3 // 0x0000000000000001
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    uncover 5
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    bytec 5 // "\x00\x02s1"
    itxn_field ApplicationArgs
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    bytec_3 // 0x0000000000000001
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    dig 3
    uncover 3
    uncover 2
    substring3
    extract 2 0
    dig 2
    extract 4 8 // on error: Index access is out of bounds
    btoi
    uncover 3
    extract 12 64 // on error: Index access is out of bounds
    uncover 6
    uncover 4
    ==
    assert
    uncover 4
    uncover 3
    ==
    assert
    cover 2
    ==
    assert
    b==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref(app: uint64) -> void:
test_native_tuple_method_ref:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    bytec 5 // "\x00\x02s1"
    itxn_field ApplicationArgs
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    bytec_3 // 0x0000000000000001
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    dig 3
    uncover 3
    uncover 2
    substring3
    extract 2 0
    dig 2
    extract 4 8 // on error: Index access is out of bounds
    btoi
    uncover 3
    extract 12 64 // on error: Index access is out of bounds
    dig 3
    bytec 8 // "echo: s1"
    ==
    assert
    dig 2
    bytec 24 // 0x6563686f3a206231
    ==
    assert
    dig 1
    intc_3 // 2
    ==
    assert
    dup
    bytec 16 // 0x03
    b==
    assert
    itxn_begin
    intc_2 // 1
    itob
    frame_dig -1
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    bytec 5 // 0x00027331
    itxn_field ApplicationArgs
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    dig 3
    uncover 3
    uncover 2
    substring3
    extract 2 0
    dig 2
    extract 4 8 // on error: Index access is out of bounds
    btoi
    uncover 3
    extract 12 64 // on error: Index access is out of bounds
    uncover 3
    dig 7
    ==
    uncover 3
    dig 6
    ==
    &&
    uncover 2
    dig 4
    ==
    &&
    swap
    dig 2
    b==
    &&
    assert // expected native arguments to give the same result
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    bytec 5 // "\x00\x02s1"
    itxn_field ApplicationArgs
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    bytec_3 // 0x0000000000000001
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    dig 3
    uncover 3
    uncover 2
    substring3
    extract 2 0
    dig 2
    extract 4 8 // on error: Index access is out of bounds
    btoi
    uncover 3
    extract 12 64 // on error: Index access is out of bounds
    uncover 3
    dig 7
    ==
    uncover 3
    dig 6
    ==
    &&
    uncover 2
    dig 4
    ==
    &&
    swap
    dig 2
    b==
    &&
    assert // expected arc4 arguments to give the same result
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    bytec 5 // "\x00\x02s1"
    itxn_field ApplicationArgs
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    bytec_3 // 0x0000000000000001
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    dig 3
    uncover 3
    uncover 2
    substring3
    extract 2 0
    dig 2
    extract 4 8 // on error: Index access is out of bounds
    btoi
    uncover 3
    extract 12 64 // on error: Index access is out of bounds
    uncover 3
    uncover 7
    ==
    uncover 3
    uncover 6
    ==
    &&
    uncover 2
    uncover 4
    ==
    &&
    swap
    uncover 2
    b==
    &&
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples(app: uint64) -> void:
test_nested_tuples:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 17 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    bytec 25 // 0x00040010000400080002733100027332000000000000000100000000000000020012000133
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    swap
    cover 3
    substring3
    dig 3
    len
    uncover 4
    uncover 4
    uncover 2
    substring3
    dup
    extract 0 8 // on error: Index access is out of bounds
    btoi
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    dig 2
    pushint 16 // 16
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    extract 2 0
    uncover 4
    bytec 8 // "echo: s1"
    ==
    assert
    uncover 3
    bytec 26 // "\x00\x08echo: s2"
    ==
    assert
    uncover 2
    intc_3 // 2
    ==
    assert
    swap
    bytec 9 // 0x0000000000000003
    b==
    assert
    bytec 27 // 0x6563686f3a2033
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 17 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    bytec 25 // 0x00040010000400080002733100027332000000000000000100000000000000020012000133
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    swap
    cover 3
    substring3
    dig 3
    len
    uncover 4
    uncover 4
    uncover 2
    substring3
    dup
    extract 0 8 // on error: Index access is out of bounds
    btoi
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    dig 2
    pushint 16 // 16
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    extract 2 0
    uncover 4
    bytec 8 // "echo: s1"
    ==
    assert
    uncover 3
    bytec 26 // "\x00\x08echo: s2"
    ==
    assert
    uncover 2
    intc_3 // 2
    ==
    assert
    swap
    bytec 9 // 0x0000000000000003
    b==
    assert
    bytec 27 // 0x6563686f3a2033
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 17 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    pushbytes 0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    swap
    cover 3
    substring3
    dig 3
    len
    uncover 4
    uncover 4
    uncover 2
    substring3
    dup
    extract 0 8 // on error: Index access is out of bounds
    btoi
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    dig 2
    pushint 16 // 16
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    extract 2 0
    uncover 4
    pushbytes "echo: s1b"
    ==
    assert
    uncover 3
    pushbytes "\x00\techo: s2b"
    ==
    assert
    uncover 2
    pushint 12 // 12
    ==
    assert
    swap
    pushbytes 0x0000000000000016
    b==
    assert
    pushbytes 0x6563686f3a203362
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args(app: uint64) -> void:
test_no_args:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 18 // method "no_args()uint64"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    pushint 42 // 42
    ==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 18 // method "no_args()uint64"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    bytec 28 // 0x000000000000002a
    b==
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 18 // method "no_args()uint64"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    bytec 28 // 0x000000000000002a
    b==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples(app: uint64) -> void:
test_named_tuples:
    proto 1 0
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 29 // method "logs_are_equal((uint64,string),(uint64,string))bool"
    itxn_field ApplicationArgs
    bytec 19 // 0x0000000000000001000a00056c6f672031
    itxn_field ApplicationArgs
    bytec 19 // 0x0000000000000001000a00056c6f672031
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    intc_0 // 0
    getbit
    assert
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 29 // method "logs_are_equal((uint64,string),(uint64,string))bool"
    itxn_field ApplicationArgs
    pushbytes 0x0000000000000002000a00056c6f672032
    itxn_field ApplicationArgs
    bytec 19 // 0x0000000000000001000a00056c6f672031
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    intc_0 // 0
    getbit
    !
    assert
    retsub
