#pragma version 10

test_cases.typed_abi_call.logger.Logger.approval_program:
    callsub __puya_arc4_router__
    return


// test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@20
    method "is_a_b(byte[],byte[])void"
    method "echo(string)string"
    method "no_args()uint64"
    method "log(uint64)void"
    method "log(uint512)void"
    method "log(string)void"
    method "log(bool)void"
    method "log(byte[])void"
    method "log(asset,account,application)void"
    method "echo_native_string(string)string"
    method "echo_native_bytes(byte[])byte[]"
    method "echo_native_uint64(uint64)uint64"
    method "echo_native_biguint(uint512)uint512"
    method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]"
    txna ApplicationArgs 0
    match __puya_arc4_router___is_a_b_route@2 __puya_arc4_router___echo_route@3 __puya_arc4_router___no_args_route@4 __puya_arc4_router___log_route@5 __puya_arc4_router___log_route@6 __puya_arc4_router___log_route@7 __puya_arc4_router___log_route@8 __puya_arc4_router___log_route@9 __puya_arc4_router___log_route@10 __puya_arc4_router___echo_native_string_route@11 __puya_arc4_router___echo_native_bytes_route@12 __puya_arc4_router___echo_native_uint64_route@13 __puya_arc4_router___echo_native_biguint_route@14 __puya_arc4_router___echo_native_tuple_route@15 __puya_arc4_router___echo_nested_tuple_route@16 __puya_arc4_router___return_args_after_14th_route@17
    int 0
    retsub

__puya_arc4_router___is_a_b_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    callsub is_a_b
    int 1
    retsub

__puya_arc4_router___echo_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub echo
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___no_args_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub no_args
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___log_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub log_uint64
    int 1
    retsub

__puya_arc4_router___log_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub log_uint512
    int 1
    retsub

__puya_arc4_router___log_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub log_string
    int 1
    retsub

__puya_arc4_router___log_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub log_bool
    int 1
    retsub

__puya_arc4_router___log_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub log_bytes
    int 1
    retsub

__puya_arc4_router___log_route@10:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txna ApplicationArgs 3
    btoi
    txnas Applications
    callsub log_asset_account_app
    int 1
    retsub

__puya_arc4_router___echo_native_string_route@11:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    extract 2 0
    callsub echo_native_string
    dup
    len
    itob
    extract 6 2
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___echo_native_bytes_route@12:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    extract 2 0
    callsub echo_native_bytes
    dup
    len
    itob
    extract 6 2
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___echo_native_uint64_route@13:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    callsub echo_native_uint64
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___echo_native_biguint_route@14:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub echo_native_biguint
    dup
    len
    int 64
    <=
    assert // overflow
    int 64
    bzero
    b|
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___echo_native_tuple_route@15:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    callsub echo_native_tuple
    cover 3
    cover 2
    swap
    dup
    len
    itob
    extract 6 2
    swap
    concat
    cover 3
    dup
    len
    itob
    extract 6 2
    swap
    concat
    cover 3
    itob
    cover 2
    dup
    len
    int 64
    <=
    assert // overflow
    int 64
    bzero
    b|
    dig 1
    len
    int 76
    +
    itob
    extract 6 2
    byte 0x004c
    swap
    concat
    uncover 3
    concat
    swap
    concat
    swap
    concat
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___echo_nested_tuple_route@16:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    dup
    int 0
    extract_uint16
    swap
    dup
    int 2
    extract_uint16
    dig 1
    uncover 3
    dig 2
    substring3
    dup
    int 0
    extract_uint16
    swap
    dup
    int 2
    extract_uint16
    dig 1
    uncover 3
    dig 2
    substring3
    extract 2 0
    cover 4
    dig 1
    len
    substring3
    cover 2
    dig 1
    len
    substring3
    dup
    extract 0 8 // on error: Index access is out of bounds
    btoi
    swap
    dup
    extract 8 8 // on error: Index access is out of bounds
    swap
    dup
    int 16
    extract_uint16
    swap
    dup
    len
    swap
    cover 2
    substring3
    extract 2 0
    callsub echo_nested_tuple
    uncover 2
    uncover 3
    uncover 4
    dup
    len
    itob
    extract 6 2
    swap
    concat
    dup
    len
    int 4
    +
    itob
    extract 6 2
    byte 0x0004
    swap
    concat
    swap
    concat
    swap
    concat
    swap
    itob
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    swap
    uncover 3
    concat
    byte 0x0012
    concat
    swap
    concat
    dig 1
    len
    int 4
    +
    itob
    extract 6 2
    byte 0x0004
    swap
    concat
    uncover 2
    concat
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___return_args_after_14th_route@17:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    txna ApplicationArgs 5
    txna ApplicationArgs 6
    txna ApplicationArgs 7
    txna ApplicationArgs 8
    txna ApplicationArgs 9
    txna ApplicationArgs 10
    txna ApplicationArgs 11
    txna ApplicationArgs 12
    txna ApplicationArgs 13
    txna ApplicationArgs 14
    txna ApplicationArgs 15
    extract 0 1 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 1 1 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 2 1 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 3 1 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 4 4 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 8 1 // on error: Index access is out of bounds
    callsub return_args_after_14th
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___bare_routing@20:
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@24
    txn ApplicationID
    !
    assert // is creating
    int 1
    retsub

__puya_arc4_router___after_if_else@24:
    int 0
    retsub


// test_cases.typed_abi_call.logger.Logger.is_a_b(a: bytes, b: bytes) -> void:
is_a_b:
    proto 2 0
    frame_dig -2
    byte 0x61
    ==
    assert // a is not a
    frame_dig -1
    byte 0x62
    ==
    assert // b is not b
    retsub


// test_cases.typed_abi_call.logger.Logger.echo(value: bytes) -> bytes:
echo:
    proto 1 1
    frame_dig -1
    extract 2 0
    byte 0x6563686f3a20
    swap
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    retsub


// test_cases.typed_abi_call.logger.Logger.no_args() -> uint64:
no_args:
    proto 0 1
    int 42
    retsub


// test_cases.typed_abi_call.logger.Logger.log_uint64(value: bytes) -> void:
log_uint64:
    proto 1 0
    frame_dig -1
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_uint512(value: bytes) -> void:
log_uint512:
    proto 1 0
    frame_dig -1
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_string(value: bytes) -> void:
log_string:
    proto 1 0
    frame_dig -1
    extract 2 0
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_bool(value: bytes) -> void:
log_bool:
    proto 1 0
    frame_dig -1
    int 0
    getbit
    byte 0x46616c7365
    byte 0x54727565
    uncover 2
    select
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_bytes(value: bytes) -> void:
log_bytes:
    proto 1 0
    frame_dig -1
    extract 2 0
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_asset_account_app(asset: uint64, account: bytes, app: uint64) -> void:
log_asset_account_app:
    proto 3 0
    frame_dig -3
    asset_params_get AssetName
    assert // asset exists
    frame_dig -2
    concat
    frame_dig -1
    app_params_get AppAddress
    assert // application exists
    concat
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_string(value: bytes) -> bytes:
echo_native_string:
    proto 1 1
    byte "echo: "
    frame_dig -1
    concat
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_bytes(value: bytes) -> bytes:
echo_native_bytes:
    proto 1 1
    byte 0x6563686f3a20
    frame_dig -1
    concat
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_uint64(value: uint64) -> uint64:
echo_native_uint64:
    proto 1 1
    frame_dig -1
    int 1
    +
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_biguint(value: bytes) -> bytes:
echo_native_biguint:
    proto 1 1
    frame_dig -1
    byte 0x01
    b+
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_tuple(s: bytes, b: bytes, u: uint64, bu: bytes) -> bytes, bytes, uint64, bytes:
echo_native_tuple:
    proto 4 4
    byte "echo: "
    frame_dig -4
    concat
    byte 0x6563686f3a20
    frame_dig -3
    concat
    frame_dig -2
    int 1
    +
    frame_dig -1
    byte 0x01
    b+
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_nested_tuple(tuple_of_tuples.0.0: bytes, tuple_of_tuples.0.1: bytes, tuple_of_tuples.1.0: uint64, tuple_of_tuples.1.1: bytes, tuple_of_tuples.1.2: bytes) -> bytes, bytes, uint64, bytes, bytes:
echo_nested_tuple:
    proto 5 5
    byte "echo: "
    frame_dig -5
    concat
    frame_dig -4
    extract 2 0
    byte 0x6563686f3a20
    swap
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    frame_dig -3
    int 1
    +
    frame_dig -2
    btoi
    int 1
    +
    itob
    byte 0x6563686f3a20
    frame_dig -1
    concat
    retsub


// test_cases.typed_abi_call.logger.Logger.return_args_after_14th(_a1: bytes, _a2: bytes, _a3: bytes, _a4: bytes, _a5: bytes, _a6: bytes, _a7: bytes, _a8: bytes, _a9: bytes, _a10: bytes, _a11: bytes, _a12: bytes, _a13: bytes, _a14: bytes, a15: bytes, a16: bytes, a17: bytes, a18: bytes, a19: bytes, a20: bytes) -> bytes:
return_args_after_14th:
    proto 20 1
    frame_dig -6
    frame_dig -5
    concat
    frame_dig -4
    concat
    frame_dig -3
    concat
    frame_dig -2
    concat
    frame_dig -1
    concat
    txna ApplicationArgs 15
    dig 1
    ==
    assert
    dup
    len
    itob
    extract 6 2
    swap
    concat
    retsub
