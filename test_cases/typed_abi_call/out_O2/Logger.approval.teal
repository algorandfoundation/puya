#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 8 0 2
    bytecblock 0x151f7c75 0x6563686f3a20 0x00066563686f3a20 0x0004
    txn NumAppArgs
    bz main___algopy_default_create@28
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0xc77212bc 0x9bf81913 0xb862ee19 0x3c1058d9 0x6af45930 0xb4b4334e 0x6eed7ec3 0xb500e111 0x46b50faf 0x0437b17e 0x4a444c77 0x2659e818 0xa9fb6cf1 0xd8cc363b 0xd6c2ac7f 0x48142d5e 0x16e03919 0xab271ce4 0xba0b4381 0xddd07185 0xdc4f1992 // method "is_a_b(byte[],byte[])void", method "echo(string)string", method "no_args()uint64", method "log(uint64)void", method "log(uint512)void", method "log(string)void", method "log(bool)void", method "log(byte[])void", method "log(uint64,address,uint64)void", method "log(address)void", method "echo_native_string(string)string", method "echo_native_bytes(byte[])byte[]", method "echo_native_uint64(uint64)uint64", method "echo_native_biguint(uint512)uint512", method "echo_resource_by_index(asset,application,account)(uint64,uint64,address)", method "echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)", method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)", method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))", method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]", method "logs_are_equal((uint64,string),(uint64,string))bool", method "echo_log_struct((uint64,string))(uint64,string)"
    txna ApplicationArgs 0
    match main_is_a_b_route@4 main_echo_route@5 main_no_args_route@6 main_log_route@7 main_log_route@8 main_log_route@9 main_log_route@10 main_log_route@11 main_log_route@12 main_log_route@13 main_echo_native_string_route@14 main_echo_native_bytes_route@15 main_echo_native_uint64_route@16 main_echo_native_biguint_route@17 main_echo_resource_by_index_route@18 main_echo_resource_by_value_route@19 main_echo_native_tuple_route@20 main_echo_nested_tuple_route@21 main_return_args_after_14th_route@22 main_logs_are_equal_route@23 main_echo_log_struct_route@24
    err

main_echo_log_struct_route@24:
    bytec_0 // 0x151f7c75
    txna ApplicationArgs 1
    concat
    log
    intc_0 // 1
    return

main_logs_are_equal_route@23:
    txna ApplicationArgs 1
    dup
    intc_2 // 0
    extract_uint64
    dig 1
    intc_1 // 8
    extract_uint16
    dig 2
    len
    uncover 3
    cover 2
    substring3
    extract 2 0
    txna ApplicationArgs 2
    dup
    intc_2 // 0
    extract_uint64
    dig 1
    intc_1 // 8
    extract_uint16
    dig 2
    len
    uncover 3
    cover 2
    substring3
    extract 2 0
    uncover 3
    uncover 2
    ==
    cover 2
    ==
    &&
    pushbytes 0x00
    intc_2 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_return_args_after_14th_route@22:
    txna ApplicationArgs 1
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    txna ApplicationArgs 2
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    txna ApplicationArgs 3
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    txna ApplicationArgs 4
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    txna ApplicationArgs 5
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    txna ApplicationArgs 6
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    txna ApplicationArgs 7
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    txna ApplicationArgs 8
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    txna ApplicationArgs 9
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    txna ApplicationArgs 10
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    txna ApplicationArgs 11
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    txna ApplicationArgs 12
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    txna ApplicationArgs 13
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    txna ApplicationArgs 14
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    txna ApplicationArgs 15
    dup
    len
    pushint 9 // 9
    ==
    assert // invalid number of bytes for (uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)
    extract 0 1
    txna ApplicationArgs 15
    dup
    len
    pushint 9 // 9
    ==
    assert // invalid number of bytes for (uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)
    extract 1 1
    txna ApplicationArgs 15
    dup
    len
    pushint 9 // 9
    ==
    assert // invalid number of bytes for (uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)
    extract 2 1
    txna ApplicationArgs 15
    dup
    len
    pushint 9 // 9
    ==
    assert // invalid number of bytes for (uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)
    extract 3 1
    txna ApplicationArgs 15
    dup
    len
    pushint 9 // 9
    ==
    assert // invalid number of bytes for (uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)
    extract 4 4
    txna ApplicationArgs 15
    dup
    len
    pushint 9 // 9
    ==
    assert // invalid number of bytes for (uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)
    extract 8 1
    uncover 5
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    txna ApplicationArgs 15
    dig 1
    ==
    assert
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_echo_nested_tuple_route@21:
    txna ApplicationArgs 1
    dup
    intc_2 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    intc_2 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    swap
    cover 3
    substring3
    dig 3
    len
    uncover 4
    uncover 4
    uncover 2
    substring3
    dup
    intc_2 // 0
    extract_uint64
    dig 1
    pushint 16 // 16
    extract_uint16
    dig 2
    len
    dig 3
    cover 2
    substring3
    extract 2 0
    bytec_1 // "echo: "
    uncover 5
    concat
    uncover 4
    extract 2 0
    bytec_2 // 0x00066563686f3a20
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    itob
    extract 6 2
    replace2 0
    uncover 3
    intc_0 // 1
    +
    uncover 4
    intc_1 // 8
    extract_uint64
    intc_0 // 1
    +
    itob
    bytec_1 // 0x6563686f3a20
    uncover 5
    concat
    dig 4
    len
    itob
    extract 6 2
    uncover 5
    concat
    dup
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    bytec_3 // 0x0004
    swap
    concat
    swap
    concat
    uncover 4
    concat
    dup
    len
    pushint 4 // 4
    +
    uncover 4
    itob
    uncover 4
    concat
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    swap
    pushbytes 0x0012
    concat
    swap
    concat
    swap
    itob
    extract 6 2
    bytec_3 // 0x0004
    swap
    concat
    uncover 2
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_echo_native_tuple_route@20:
    txna ApplicationArgs 1
    dup
    intc_2 // 0
    extract_uint16
    intc_3 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+utf8[])
    extract 2 0
    txna ApplicationArgs 2
    dup
    intc_2 // 0
    extract_uint16
    intc_3 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+uint8[])
    extract 2 0
    txna ApplicationArgs 3
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    btoi
    txna ApplicationArgs 4
    dup
    len
    pushint 64 // 64
    ==
    assert // invalid number of bytes for uint512
    bytec_1 // "echo: "
    uncover 4
    concat
    bytec_1 // 0x6563686f3a20
    uncover 4
    concat
    uncover 3
    intc_0 // 1
    +
    uncover 3
    pushbytes 0x01
    b+
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    dup
    len
    pushint 76 // 76
    +
    dig 4
    len
    itob
    extract 6 2
    uncover 5
    concat
    swap
    itob
    extract 6 2
    pushbytes 0x004c
    swap
    concat
    uncover 4
    itob
    concat
    dig 3
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    uncover 4
    b|
    concat
    uncover 2
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_echo_resource_by_value_route@19:
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    btoi
    txna ApplicationArgs 2
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    btoi
    txna ApplicationArgs 3
    dup
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for uint8[32]
    txna ApplicationArgs 1
    btoi
    dig 3
    ==
    assert // expected asset to be passed by value
    txna ApplicationArgs 2
    btoi
    dig 2
    ==
    assert // expected application to be passed by value
    dup
    txna ApplicationArgs 3
    ==
    assert // expected account to be passed by value
    uncover 2
    itob
    uncover 2
    itob
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_echo_resource_by_index_route@18:
    txna ApplicationArgs 1
    dup
    len
    intc_0 // 1
    ==
    assert // invalid number of bytes for uint8
    btoi
    txnas Assets
    txna ApplicationArgs 2
    dup
    len
    intc_0 // 1
    ==
    assert // invalid number of bytes for uint8
    btoi
    txnas Applications
    txna ApplicationArgs 3
    dup
    len
    intc_0 // 1
    ==
    assert // invalid number of bytes for uint8
    btoi
    txnas Accounts
    txna ApplicationArgs 1
    btoi
    txnas Assets
    dig 3
    ==
    assert // expected asset to be passed by index
    txna ApplicationArgs 2
    btoi
    txnas Applications
    dig 2
    ==
    assert // expected application to be passed by index
    txna ApplicationArgs 3
    btoi
    txnas Accounts
    dig 1
    ==
    assert // expected account to be passed by index
    uncover 2
    itob
    uncover 2
    itob
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_echo_native_biguint_route@17:
    txna ApplicationArgs 1
    dup
    len
    pushint 64 // 64
    ==
    assert // invalid number of bytes for uint512
    pushbytes 0x01
    b+
    dup
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    b|
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_echo_native_uint64_route@16:
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    btoi
    intc_0 // 1
    +
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_echo_native_bytes_route@15:
    txna ApplicationArgs 1
    dup
    intc_2 // 0
    extract_uint16
    intc_3 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+uint8[])
    extract 2 0
    bytec_1 // 0x6563686f3a20
    swap
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_echo_native_string_route@14:
    txna ApplicationArgs 1
    dup
    intc_2 // 0
    extract_uint16
    intc_3 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+utf8[])
    extract 2 0
    bytec_1 // "echo: "
    swap
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_log_route@13:
    txna ApplicationArgs 1
    dup
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for uint8[32]
    log
    intc_0 // 1
    return

main_log_route@12:
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    btoi
    txna ApplicationArgs 2
    dup
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for uint8[32]
    txna ApplicationArgs 3
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    btoi
    uncover 2
    asset_params_get AssetName
    assert // asset exists
    uncover 2
    concat
    swap
    app_params_get AppAddress
    assert // application exists
    concat
    log
    intc_0 // 1
    return

main_log_route@11:
    txna ApplicationArgs 1
    dup
    intc_2 // 0
    extract_uint16
    intc_3 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+uint8[])
    extract 2 0
    log
    intc_0 // 1
    return

main_log_route@10:
    txna ApplicationArgs 1
    dup
    len
    intc_0 // 1
    ==
    assert // invalid number of bytes for bool8
    intc_2 // 0
    getbit
    pushbytess 0x46616c7365 0x54727565 // 0x46616c7365, 0x54727565
    uncover 2
    select
    log
    intc_0 // 1
    return

main_log_route@9:
    txna ApplicationArgs 1
    dup
    intc_2 // 0
    extract_uint16
    intc_3 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+utf8[])
    extract 2 0
    log
    intc_0 // 1
    return

main_log_route@8:
    txna ApplicationArgs 1
    dup
    len
    pushint 64 // 64
    ==
    assert // invalid number of bytes for uint512
    log
    intc_0 // 1
    return

main_log_route@7:
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for uint64
    log
    intc_0 // 1
    return

main_no_args_route@6:
    pushbytes 0x151f7c75000000000000002a
    log
    intc_0 // 1
    return

main_echo_route@5:
    txna ApplicationArgs 1
    dup
    intc_2 // 0
    extract_uint16
    intc_3 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+utf8[])
    extract 2 0
    bytec_2 // 0x00066563686f3a20
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    itob
    extract 6 2
    replace2 0
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_is_a_b_route@4:
    txna ApplicationArgs 1
    dup
    intc_2 // 0
    extract_uint16
    intc_3 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+uint8[])
    extract 2 0
    txna ApplicationArgs 2
    dup
    intc_2 // 0
    extract_uint16
    intc_3 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+uint8[])
    extract 2 0
    swap
    pushbytes 0x61
    ==
    assert // a is not a
    pushbytes 0x62
    ==
    return // on error: b is not b

main___algopy_default_create@28:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating
