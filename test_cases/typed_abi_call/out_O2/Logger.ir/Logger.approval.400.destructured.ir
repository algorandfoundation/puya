main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@24
    block@2: // abi_routing_L30
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "is_a_b(byte[],byte[])void" => block@3, method "echo(string)string" => block@4, method "no_args()uint64" => block@5, method "log(uint64)void" => block@6, method "log(uint512)void" => block@7, method "log(string)void" => block@8, method "log(bool)void" => block@9, method "log(byte[])void" => block@10, method "log(asset,account,application)void" => block@11, method "log(address)void" => block@12, method "echo_native_string(string)string" => block@13, method "echo_native_bytes(byte[])byte[]" => block@14, method "echo_native_uint64(uint64)uint64" => block@15, method "echo_native_biguint(uint512)uint512" => block@16, method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)" => block@17, method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))" => block@18, method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]" => block@19, method "logs_are_equal((uint64,string),(uint64,string))bool" => block@20, method "echo_log_struct((uint64,string))(uint64,string)" => block@21, * => block@28}
    block@3: // is_a_b_route_L31
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let a#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let tmp%0#0: bool = (== a#0 0x61)
        (assert tmp%0#0) // a is not a
        let tmp%1#1: bool = (== b#0 0x62)
        (assert tmp%1#1) // b is not b
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@4: // echo_route_L36
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        (assert tmp%11#0) // can only call when not creating
        let value#2: bytes = (txna ApplicationArgs 1)
        let extract_to_end%0#0: bytes = ((extract 2 0) value#2)
        let concat%0#0: Encoded(len+utf8[]) = (concat 0x00066563686f3a20 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let as_bytes%0#0: bytes[8] = (itob len%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let tmp%14#0: bytes = (concat 0x151f7c75 replace%0#0)
        (log tmp%14#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@5: // no_args_route_L40
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        (log 0x151f7c75000000000000002a)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@6: // log_route_L44
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        (assert tmp%24#0) // can only call when not creating
        let value#2: bytes = (txna ApplicationArgs 1)
        (log value#2)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@7: // log_route_L48
        let tmp%26#0: uint64 = (txn OnCompletion)
        let tmp%27#0: bool = (! tmp%26#0)
        (assert tmp%27#0) // OnCompletion is not NoOp
        let tmp%28#0: uint64 = (txn ApplicationID)
        (assert tmp%28#0) // can only call when not creating
        let value#2: bytes = (txna ApplicationArgs 1)
        (log value#2)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@8: // log_route_L52
        let tmp%30#0: uint64 = (txn OnCompletion)
        let tmp%31#0: bool = (! tmp%30#0)
        (assert tmp%31#0) // OnCompletion is not NoOp
        let tmp%32#0: uint64 = (txn ApplicationID)
        (assert tmp%32#0) // can only call when not creating
        let value#2: bytes = (txna ApplicationArgs 1)
        let tmp%0#12: string = ((extract 2 0) value#2)
        (log tmp%0#12)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@9: // log_route_L56
        let tmp%34#0: uint64 = (txn OnCompletion)
        let tmp%35#0: bool = (! tmp%34#0)
        (assert tmp%35#0) // OnCompletion is not NoOp
        let tmp%36#0: uint64 = (txn ApplicationID)
        (assert tmp%36#0) // can only call when not creating
        let value#2: bytes = (txna ApplicationArgs 1)
        let tmp%0#0: bool = (getbit value#2 0u)
        let select%0#0: bytes = (select 0x46616c7365 0x54727565 tmp%0#0)
        (log select%0#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@10: // log_route_L60
        let tmp%38#0: uint64 = (txn OnCompletion)
        let tmp%39#0: bool = (! tmp%38#0)
        (assert tmp%39#0) // OnCompletion is not NoOp
        let tmp%40#0: uint64 = (txn ApplicationID)
        (assert tmp%40#0) // can only call when not creating
        let value#2: bytes = (txna ApplicationArgs 1)
        let tmp%0#3: bytes = ((extract 2 0) value#2)
        (log tmp%0#3)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@11: // log_route_L64
        let tmp%42#0: uint64 = (txn OnCompletion)
        let tmp%43#0: bool = (! tmp%42#0)
        (assert tmp%43#0) // OnCompletion is not NoOp
        let tmp%44#0: uint64 = (txn ApplicationID)
        (assert tmp%44#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%46#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let asset#0: uint64 = ((txnas Assets) tmp%46#0)
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%48#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let account#0: account = ((txnas Accounts) tmp%48#0)
        let reinterpret_Encoded(uint8)%2#0: Encoded(uint8) = (txna ApplicationArgs 3)
        let tmp%50#0: uint64 = (btoi reinterpret_Encoded(uint8)%2#0)
        let app#0: uint64 = ((txnas Applications) tmp%50#0)
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
        (assert check%0#0) // asset exists
        let tmp%1#2: bytes = (concat value%0#0 account#0)
        let (value%1#0: account, check%1#0: bool) = ((app_params_get AppAddress) app#0)
        (assert check%1#0) // application exists
        let tmp%3#4: bytes = (concat tmp%1#2 value%1#0)
        (log tmp%3#4)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@12: // log_route_L68
        let tmp%52#0: uint64 = (txn OnCompletion)
        let tmp%53#0: bool = (! tmp%52#0)
        (assert tmp%53#0) // OnCompletion is not NoOp
        let tmp%54#0: uint64 = (txn ApplicationID)
        (assert tmp%54#0) // can only call when not creating
        let address#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        (log address#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@13: // echo_native_string_route_L72
        let tmp%56#0: uint64 = (txn OnCompletion)
        let tmp%57#0: bool = (! tmp%56#0)
        (assert tmp%57#0) // OnCompletion is not NoOp
        let tmp%58#0: uint64 = (txn ApplicationID)
        (assert tmp%58#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let value#3: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%2#0)
        let tmp%0#3: bytes = (concat "echo: " value#3)
        let aggregate%length%1#1: uint64 = (len tmp%0#3)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 tmp%0#3)
        let tmp%63#0: bytes = (concat 0x151f7c75 aggregate%encoded_value%1#1)
        (log tmp%63#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@14: // echo_native_bytes_route_L76
        let tmp%64#0: uint64 = (txn OnCompletion)
        let tmp%65#0: bool = (! tmp%64#0)
        (assert tmp%65#0) // OnCompletion is not NoOp
        let tmp%66#0: uint64 = (txn ApplicationID)
        (assert tmp%66#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let value#2: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%3#0)
        let tmp%0#3: bytes = (concat 0x6563686f3a20 value#2)
        let aggregate%length%2#1: uint64 = (len tmp%0#3)
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 tmp%0#3)
        let tmp%71#0: bytes = (concat 0x151f7c75 aggregate%encoded_value%2#1)
        (log tmp%71#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@15: // echo_native_uint64_route_L80
        let tmp%72#0: uint64 = (txn OnCompletion)
        let tmp%73#0: bool = (! tmp%72#0)
        (assert tmp%73#0) // OnCompletion is not NoOp
        let tmp%74#0: uint64 = (txn ApplicationID)
        (assert tmp%74#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let value#1: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let tmp%0#1: uint64 = (+ value#1 1u)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%0#1)
        let tmp%79#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%1#1)
        (log tmp%79#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@16: // echo_native_biguint_route_L84
        let tmp%80#0: uint64 = (txn OnCompletion)
        let tmp%81#0: bool = (! tmp%80#0)
        (assert tmp%81#0) // OnCompletion is not NoOp
        let tmp%82#0: uint64 = (txn ApplicationID)
        (assert tmp%82#0) // can only call when not creating
        let value#0: biguint = (txna ApplicationArgs 1)
        let tmp%0#5: biguint = (b+ value#0 1b)
        let aggregate%value_len%0#1: uint64 = (len tmp%0#5)
        let aggregate%len_ok%0#1: bool = (<= aggregate%value_len%0#1 64u)
        (assert aggregate%len_ok%0#1) // overflow
        let aggregate%bzero%0#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#1: bytes[64] = (b| tmp%0#5 aggregate%bzero%0#1)
        let tmp%87#0: bytes = (concat 0x151f7c75 aggregate%arc4_encoded%0#1)
        (log tmp%87#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@17: // echo_native_tuple_route_L88
        let tmp%88#0: uint64 = (txn OnCompletion)
        let tmp%89#0: bool = (! tmp%88#0)
        (assert tmp%89#0) // OnCompletion is not NoOp
        let tmp%90#0: uint64 = (txn ApplicationID)
        (assert tmp%90#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let s#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%3#0)
        let reinterpret_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%4#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let u#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let bu#0: biguint = (txna ApplicationArgs 4)
        let tmp%0#3: bytes = (concat "echo: " s#0)
        let tmp%1#2: bytes = (concat 0x6563686f3a20 b#0)
        let tmp%2#3: uint64 = (+ u#0 1u)
        let tmp%3#3: biguint = (b+ bu#0 1b)
        let aggregate%length%3#1: uint64 = (len tmp%0#3)
        let aggregate%as_bytes%3#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 tmp%0#3)
        let aggregate%data_length%0#1: uint64 = (len aggregate%encoded_value%3#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 76u aggregate%data_length%0#1)
        let aggregate%length%4#1: uint64 = (len tmp%1#2)
        let aggregate%as_bytes%5#1: bytes[8] = (itob aggregate%length%4#1)
        let aggregate%length_uint16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded_value%4#1: bytes = (concat aggregate%length_uint16%4#1 tmp%1#2)
        let aggregate%tail%1#1: bytes = (concat aggregate%encoded_value%3#1 aggregate%encoded_value%4#1)
        let aggregate%as_bytes%6#1: bytes[8] = (itob aggregate%current_tail_offset%0#1)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%encoded%1#1: Encoded((len+utf8[]),(len+uint8[])) = (concat 0x004c aggregate%offset_as_uint16%1#1)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob tmp%2#3)
        let aggregate%encoded%2#1: Encoded((len+utf8[]),(len+uint8[]),uint64) = (concat aggregate%encoded%1#1 aggregate%val_as_bytes%2#1)
        let aggregate%value_len%1#1: uint64 = (len tmp%3#3)
        let aggregate%len_ok%1#1: bool = (<= aggregate%value_len%1#1 64u)
        (assert aggregate%len_ok%1#1) // overflow
        let aggregate%bzero%1#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%1#1: bytes[64] = (b| tmp%3#3 aggregate%bzero%1#1)
        let aggregate%encoded%3#1: Encoded((len+utf8[]),(len+uint8[]),uint64,uint512) = (concat aggregate%encoded%2#1 aggregate%arc4_encoded%1#1)
        let aggregate%encoded%4#1: Encoded((len+utf8[]),(len+uint8[]),uint64,uint512) = (concat aggregate%encoded%3#1 aggregate%tail%1#1)
        let tmp%101#0: bytes = (concat 0x151f7c75 aggregate%encoded%4#1)
        (log tmp%101#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@18: // echo_nested_tuple_route_L94
        let tmp%102#0: uint64 = (txn OnCompletion)
        let tmp%103#0: bool = (! tmp%102#0)
        (assert tmp%103#0) // OnCompletion is not NoOp
        let tmp%104#0: uint64 = (txn ApplicationID)
        (assert tmp%104#0) // can only call when not creating
        let reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = (txna ApplicationArgs 1)
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 0u)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 2u)
        let aggregate%substring3%0#1: bytes = (substring3 reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 aggregate%extract_uint16%0#1 aggregate%extract_uint16%1#1)
        let aggregate%extract_uint16%2#1: uint64 = (extract_uint16 aggregate%substring3%0#1 0u)
        let aggregate%extract_uint16%3#1: uint64 = (extract_uint16 aggregate%substring3%0#1 2u)
        let aggregate%substring3%1#1: bytes = (substring3 aggregate%substring3%0#1 aggregate%extract_uint16%2#1 aggregate%extract_uint16%3#1)
        let tuple_of_tuples.0.0#0: string = ((extract 2 0) aggregate%substring3%1#1)
        let aggregate%len%0#1: uint64 = (len aggregate%substring3%0#1)
        let tuple_of_tuples.0.1#0: Encoded(len+utf8[]) = (substring3 aggregate%substring3%0#1 aggregate%extract_uint16%3#1 aggregate%len%0#1)
        let aggregate%len%1#1: uint64 = (len reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0)
        let aggregate%substring3%3#1: bytes = (substring3 reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 aggregate%extract_uint16%1#1 aggregate%len%1#1)
        let tuple_of_tuples.1.0#0: uint64 = (extract_uint64 aggregate%substring3%3#1 0u)
        let aggregate%extract_uint16%6#1: uint64 = (extract_uint16 aggregate%substring3%3#1 16u)
        let aggregate%len%2#1: uint64 = (len aggregate%substring3%3#1)
        let aggregate%substring3%4#1: bytes = (substring3 aggregate%substring3%3#1 aggregate%extract_uint16%6#1 aggregate%len%2#1)
        let tuple_of_tuples.1.2#0: bytes = ((extract 2 0) aggregate%substring3%4#1)
        let tmp%0#3: bytes = (concat "echo: " tuple_of_tuples.0.0#0)
        let extract_to_end%0#0: bytes = ((extract 2 0) tuple_of_tuples.0.1#0)
        let concat%0#0: Encoded(len+utf8[]) = (concat 0x00066563686f3a20 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let as_bytes%0#0: bytes[8] = (itob len%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let tmp%1#3: uint64 = (+ tuple_of_tuples.1.0#0 1u)
        let tmp%2#3: uint64 = (extract_uint64 aggregate%substring3%3#1 8u)
        let tmp%3#0: uint64 = (+ tmp%2#3 1u)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob tmp%3#0)
        let tmp%5#1: bytes = (concat 0x6563686f3a20 tuple_of_tuples.1.2#0)
        let aggregate%length%6#1: uint64 = (len tmp%0#3)
        let aggregate%as_bytes%8#1: bytes[8] = (itob aggregate%length%6#1)
        let aggregate%length_uint16%6#1: bytes = ((extract 6 2) aggregate%as_bytes%8#1)
        let aggregate%encoded_value%6#1: bytes = (concat aggregate%length_uint16%6#1 tmp%0#3)
        let aggregate%data_length%2#1: uint64 = (len aggregate%encoded_value%6#1)
        let aggregate%current_tail_offset%2#1: uint64 = (+ 4u aggregate%data_length%2#1)
        let aggregate%tail%3#1: bytes = (concat aggregate%encoded_value%6#1 replace%0#0)
        let aggregate%as_bytes%10#1: bytes[8] = (itob aggregate%current_tail_offset%2#1)
        let aggregate%offset_as_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%10#1)
        let aggregate%encoded%6#1: Encoded((len+utf8[]),(len+utf8[])) = (concat 0x0004 aggregate%offset_as_uint16%3#1)
        let aggregate%encoded%7#1: Encoded((len+utf8[]),(len+utf8[])) = (concat aggregate%encoded%6#1 aggregate%tail%3#1)
        let aggregate%data_length%4#1: uint64 = (len aggregate%encoded%7#1)
        let aggregate%current_tail_offset%4#1: uint64 = (+ 4u aggregate%data_length%4#1)
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob tmp%1#3)
        let aggregate%encoded%10#1: Encoded(uint64,uint64) = (concat aggregate%val_as_bytes%4#1 aggregate%val_as_bytes%3#1)
        let aggregate%length%7#1: uint64 = (len tmp%5#1)
        let aggregate%as_bytes%12#1: bytes[8] = (itob aggregate%length%7#1)
        let aggregate%length_uint16%7#1: bytes = ((extract 6 2) aggregate%as_bytes%12#1)
        let aggregate%encoded_value%7#1: bytes = (concat aggregate%length_uint16%7#1 tmp%5#1)
        let aggregate%encoded%11#1: Encoded(uint64,uint64,(len+uint8[])) = (concat aggregate%encoded%10#1 0x0012)
        let aggregate%encoded%12#1: Encoded(uint64,uint64,(len+uint8[])) = (concat aggregate%encoded%11#1 aggregate%encoded_value%7#1)
        let aggregate%tail%6#1: bytes = (concat aggregate%encoded%7#1 aggregate%encoded%12#1)
        let aggregate%as_bytes%14#1: bytes[8] = (itob aggregate%current_tail_offset%4#1)
        let aggregate%offset_as_uint16%6#1: bytes = ((extract 6 2) aggregate%as_bytes%14#1)
        let aggregate%encoded%13#1: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = (concat 0x0004 aggregate%offset_as_uint16%6#1)
        let aggregate%encoded%14#1: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = (concat aggregate%encoded%13#1 aggregate%tail%6#1)
        let tmp%117#0: bytes = (concat 0x151f7c75 aggregate%encoded%14#1)
        (log tmp%117#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@19: // return_args_after_14th_route_L105
        let tmp%118#0: uint64 = (txn OnCompletion)
        let tmp%119#0: bool = (! tmp%118#0)
        (assert tmp%119#0) // OnCompletion is not NoOp
        let tmp%120#0: uint64 = (txn ApplicationID)
        (assert tmp%120#0) // can only call when not creating
        let reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (txna ApplicationArgs 15)
        let a15#0: Encoded(uint8) = ((extract 0 1) reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0)
        let reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%1#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (txna ApplicationArgs 15)
        let a16#0: Encoded(uint8) = ((extract 1 1) reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%1#0)
        let reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (txna ApplicationArgs 15)
        let a17#0: Encoded(uint8) = ((extract 2 1) reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0)
        let reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (txna ApplicationArgs 15)
        let a18#0: Encoded(uint8) = ((extract 3 1) reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0)
        let reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (txna ApplicationArgs 15)
        let a19#0: Encoded(uint8,uint8,uint8,uint8) = ((extract 4 4) reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0)
        let reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (txna ApplicationArgs 15)
        let a20#0: Encoded(uint8) = ((extract 8 1) reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0)
        let aggregate%encoded%16#1: Encoded(uint8,uint8) = (concat a15#0 a16#0)
        let aggregate%encoded%17#1: Encoded(uint8,uint8,uint8) = (concat aggregate%encoded%16#1 a17#0)
        let aggregate%encoded%18#1: Encoded(uint8,uint8,uint8,uint8) = (concat aggregate%encoded%17#1 a18#0)
        let aggregate%encoded%19#1: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8)) = (concat aggregate%encoded%18#1 a19#0)
        let last_arg#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (concat aggregate%encoded%19#1 a20#0)
        let tmp%1#2: bytes = (txna ApplicationArgs 15)
        let tmp%2#1: bool = (== tmp%1#2 last_arg#0)
        (assert tmp%2#1)
        let aggregate%length%8#1: uint64 = (len last_arg#0)
        let aggregate%as_bytes%15#1: bytes[8] = (itob aggregate%length%8#1)
        let aggregate%length_uint16%8#1: bytes = ((extract 6 2) aggregate%as_bytes%15#1)
        let aggregate%encoded_value%8#1: bytes = (concat aggregate%length_uint16%8#1 last_arg#0)
        let tmp%123#0: bytes = (concat 0x151f7c75 aggregate%encoded_value%8#1)
        (log tmp%123#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@20: // logs_are_equal_route_L133
        let tmp%124#0: uint64 = (txn OnCompletion)
        let tmp%125#0: bool = (! tmp%124#0)
        (assert tmp%125#0) // OnCompletion is not NoOp
        let tmp%126#0: uint64 = (txn ApplicationID)
        (assert tmp%126#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(len+utf8[]))%0#0: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 1)
        let log_1.level#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,(len+utf8[]))%0#0 0u)
        let aggregate%extract_uint16%7#1: uint64 = (extract_uint16 reinterpret_Encoded(uint64,(len+utf8[]))%0#0 8u)
        let aggregate%len%3#1: uint64 = (len reinterpret_Encoded(uint64,(len+utf8[]))%0#0)
        let aggregate%substring3%5#1: bytes = (substring3 reinterpret_Encoded(uint64,(len+utf8[]))%0#0 aggregate%extract_uint16%7#1 aggregate%len%3#1)
        let log_1.message#0: string = ((extract 2 0) aggregate%substring3%5#1)
        let reinterpret_Encoded(uint64,(len+utf8[]))%1#0: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 2)
        let log_2.level#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,(len+utf8[]))%1#0 0u)
        let aggregate%extract_uint16%8#1: uint64 = (extract_uint16 reinterpret_Encoded(uint64,(len+utf8[]))%1#0 8u)
        let aggregate%len%4#1: uint64 = (len reinterpret_Encoded(uint64,(len+utf8[]))%1#0)
        let aggregate%substring3%6#1: bytes = (substring3 reinterpret_Encoded(uint64,(len+utf8[]))%1#0 aggregate%extract_uint16%8#1 aggregate%len%4#1)
        let log_2.message#0: string = ((extract 2 0) aggregate%substring3%6#1)
        let tmp%0#0: bool = (== log_1.level#0 log_2.level#0)
        let tmp%1#1: bool = (== log_1.message#0 log_2.message#0)
        let tmp%2#1: bool = (&& tmp%0#0 tmp%1#1)
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u tmp%2#1)
        let tmp%134#0: bytes = (concat 0x151f7c75 aggregate%encoded_bool%0#1)
        (log tmp%134#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@21: // echo_log_struct_route_L137
        let tmp%135#0: uint64 = (txn OnCompletion)
        let tmp%136#0: bool = (! tmp%135#0)
        (assert tmp%136#0) // OnCompletion is not NoOp
        let tmp%137#0: uint64 = (txn ApplicationID)
        (assert tmp%137#0) // can only call when not creating
        let log#0: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 1)
        let tmp%140#0: bytes = (concat 0x151f7c75 log#0)
        (log tmp%140#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@24: // bare_routing_L30
        let tmp%141#0: uint64 = (txn OnCompletion)
        goto tmp%141#0 ? block@28 : block@25
    block@25: // __algopy_default_create_L1
        let tmp%142#0: uint64 = (txn ApplicationID)
        let tmp%143#0: bool = (! tmp%142#0)
        (assert tmp%143#0) // can only call when creating
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@28: // after_if_else_L30
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@29
    block@29: // after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router___L1
        return tmp%0#0