main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@28
    block@2: // abi_routing_L31
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "is_a_b(byte[],byte[])void" => block@4, method "echo(string)string" => block@5, method "no_args()uint64" => block@6, method "log(uint64)void" => block@7, method "log(uint512)void" => block@7, method "log(string)void" => block@9, method "log(bool)void" => block@10, method "log(byte[])void" => block@11, method "log(uint64,address,uint64)void" => block@12, method "log(address)void" => block@13, method "echo_native_string(string)string" => block@14, method "echo_native_bytes(byte[])byte[]" => block@15, method "echo_native_uint64(uint64)uint64" => block@16, method "echo_native_biguint(uint512)uint512" => block@17, method "echo_resource_by_index(asset,application,account)(uint64,uint64,address)" => block@18, method "echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)" => block@19, method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)" => block@20, method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))" => block@21, method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]" => block@22, method "logs_are_equal((uint64,string),(uint64,string))bool" => block@23, method "echo_log_struct((uint64,string))(uint64,string)" => block@24, * => block@27}
    block@4: // is_a_b_route_L32
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let a#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let tmp%0#3: bool = (== a#0 0x61)
        (assert tmp%0#3) // a is not a
        let tmp%1#3: bool = (== b#0 0x62)
        (assert tmp%1#3) // b is not b
        exit 1u
    block@5: // echo_route_L37
        let value#2: bytes = (txna ApplicationArgs 1)
        let extract_to_end%0#0: bytes = ((extract 2 0) value#2)
        let concat%0#0: Encoded(len+utf8[]) = (concat 0x00066563686f3a20 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let as_bytes%0#0: bytes[8] = (itob len%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let tmp%1#1: bytes = (concat 0x151f7c75 replace%0#0)
        (log tmp%1#1)
        exit 1u
    block@6: // no_args_route_L41
        (log 0x151f7c75000000000000002a)
        exit 1u
    block@7: // log_route_L45
        let value#2: bytes = (txna ApplicationArgs 1)
        (log value#2)
        exit 1u
    block@9: // log_route_L53
        let value#2: bytes = (txna ApplicationArgs 1)
        let tmp%0#24: string = ((extract 2 0) value#2)
        (log tmp%0#24)
        exit 1u
    block@10: // log_route_L57
        let value#2: bytes = (txna ApplicationArgs 1)
        let aggregate%get_bit%0#0: bool = (getbit value#2 0u)
        let select%0#0: bytes = (select 0x46616c7365 0x54727565 aggregate%get_bit%0#0)
        (log select%0#0)
        exit 1u
    block@11: // log_route_L61
        let value#2: bytes = (txna ApplicationArgs 1)
        let tmp%0#5: bytes = ((extract 2 0) value#2)
        (log tmp%0#5)
        exit 1u
    block@12: // log_route_L65
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let account#0: account = (txna ApplicationArgs 2)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
        (assert check%0#0) // asset exists
        let tmp%1#1: bytes = (concat value%0#0 account#0)
        let (value%1#0: account, check%1#0: bool) = ((app_params_get AppAddress) app#0)
        (assert check%1#0) // application exists
        let tmp%3#7: bytes = (concat tmp%1#1 value%1#0)
        (log tmp%3#7)
        exit 1u
    block@13: // log_route_L69
        let address#0: bytes = (txna ApplicationArgs 1)
        (log address#0)
        exit 1u
    block@14: // echo_native_string_route_L73
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let value#3: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%0#5: bytes = (concat "echo: " value#3)
        let aggregate%length%1#0: uint64 = (len tmp%0#5)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%0#5)
        let tmp%3#7: bytes = (concat 0x151f7c75 aggregate%encoded_value%1#0)
        (log tmp%3#7)
        exit 1u
    block@15: // echo_native_bytes_route_L77
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let value#2: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%0#5: bytes = (concat 0x6563686f3a20 value#2)
        let aggregate%length%2#0: uint64 = (len tmp%0#5)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 tmp%0#5)
        let tmp%3#7: bytes = (concat 0x151f7c75 aggregate%encoded_value%2#0)
        (log tmp%3#7)
        exit 1u
    block@16: // echo_native_uint64_route_L81
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let value#1: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%0#1: uint64 = (+ value#1 1u)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%0#1)
        let tmp%3#7: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%1#0)
        (log tmp%3#7)
        exit 1u
    block@17: // echo_native_biguint_route_L85
        let value#0: biguint = (txna ApplicationArgs 1)
        let tmp%0#13: biguint = (b+ value#0 1b)
        let aggregate%value_len%0#0: uint64 = (len tmp%0#13)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| tmp%0#13 aggregate%bzero%0#0)
        let tmp%3#7: bytes = (concat 0x151f7c75 aggregate%arc4_encoded%0#0)
        (log tmp%3#7)
        exit 1u
    block@18: // echo_resource_by_index_route_L89
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%0#1: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let asset#0: uint64 = ((txnas Assets) tmp%0#1)
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%2#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let app#0: uint64 = ((txnas Applications) tmp%2#0)
        let reinterpret_Encoded(uint8)%2#0: Encoded(uint8) = (txna ApplicationArgs 3)
        let tmp%4#0: uint64 = (btoi reinterpret_Encoded(uint8)%2#0)
        let acc#0: account = ((txnas Accounts) tmp%4#0)
        let tmp%0#5: bytes = (txna ApplicationArgs 1)
        let asset_idx#0: uint64 = (btoi tmp%0#5)
        let tmp%2#0: uint64 = ((txnas Assets) asset_idx#0)
        let tmp%3#0: bool = (== asset#0 tmp%2#0)
        (assert tmp%3#0) // expected asset to be passed by index
        let tmp%4#4: bytes = (txna ApplicationArgs 2)
        let app_idx#0: uint64 = (btoi tmp%4#4)
        let tmp%6#6: uint64 = ((txnas Applications) app_idx#0)
        let tmp%7#2: bool = (== app#0 tmp%6#6)
        (assert tmp%7#2) // expected application to be passed by index
        let tmp%8#3: bytes = (txna ApplicationArgs 3)
        let acc_idx#0: uint64 = (btoi tmp%8#3)
        let tmp%10#3: account = ((txnas Accounts) acc_idx#0)
        let tmp%11#0: bool = (== acc#0 tmp%10#3)
        (assert tmp%11#0) // expected account to be passed by index
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob asset#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob app#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%2#0 aggregate%val_as_bytes%3#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 acc#0)
        let tmp%10#2: bytes = (concat 0x151f7c75 aggregate%head%2#0)
        (log tmp%10#2)
        exit 1u
    block@19: // echo_resource_by_value_route_L103
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let acc#0: account = (txna ApplicationArgs 3)
        let tmp%0#5: bytes = (txna ApplicationArgs 1)
        let asset_id#0: uint64 = (btoi tmp%0#5)
        let tmp%2#2: bool = (== asset#0 asset_id#0)
        (assert tmp%2#2) // expected asset to be passed by value
        let tmp%3#7: bytes = (txna ApplicationArgs 2)
        let app_id#0: uint64 = (btoi tmp%3#7)
        let tmp%5#5: bool = (== app#0 app_id#0)
        (assert tmp%5#5) // expected application to be passed by value
        let address#0: bytes = (txna ApplicationArgs 3)
        let tmp%7#2: bool = (== acc#0 address#0)
        (assert tmp%7#2) // expected account to be passed by value
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob asset#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob app#0)
        let aggregate%head%4#0: bytes = (concat aggregate%val_as_bytes%4#0 aggregate%val_as_bytes%5#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 acc#0)
        let tmp%7#1: bytes = (concat 0x151f7c75 aggregate%head%5#0)
        (log tmp%7#1)
        exit 1u
    block@20: // echo_native_tuple_route_L117
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let s#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let u#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let bu#0: biguint = (txna ApplicationArgs 4)
        let tmp%0#5: bytes = (concat "echo: " s#0)
        let tmp%1#1: bytes = (concat 0x6563686f3a20 b#0)
        let tmp%2#0: uint64 = (+ u#0 1u)
        let tmp%3#5: biguint = (b+ bu#0 1b)
        let aggregate%length%3#0: uint64 = (len tmp%0#5)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%3#0)
        let aggregate%length_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%3#0: bytes = (concat aggregate%length_uint16%3#0 tmp%0#5)
        let aggregate%data_length%0#0: uint64 = (len aggregate%encoded_value%3#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 76u aggregate%data_length%0#0)
        let aggregate%length%4#0: uint64 = (len tmp%1#1)
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 tmp%1#1)
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%7#0: bytes = (concat 0x004c aggregate%offset_as_uint16%1#0)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob tmp%2#0)
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 aggregate%val_as_bytes%6#0)
        let aggregate%value_len%1#0: uint64 = (len tmp%3#5)
        let aggregate%len_ok%1#0: bool = (<= aggregate%value_len%1#0 64u)
        (assert aggregate%len_ok%1#0) // overflow
        let aggregate%bzero%1#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%1#0: bytes[64] = (b| tmp%3#5 aggregate%bzero%1#0)
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 aggregate%arc4_encoded%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%9#0 aggregate%encoded_value%3#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%encoded_value%4#0)
        let tmp%9#1: bytes = (concat 0x151f7c75 aggregate%concat%1#0)
        (log tmp%9#1)
        exit 1u
    block@21: // echo_nested_tuple_route_L123
        let reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = (txna ApplicationArgs 1)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 0u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 2u)
        let aggregate%substring3%0#0: bytes = (substring3 reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 aggregate%substring3%0#0 0u)
        let aggregate%extract_uint16%3#0: uint64 = (extract_uint16 aggregate%substring3%0#0 2u)
        let aggregate%substring3%1#0: bytes = (substring3 aggregate%substring3%0#0 aggregate%extract_uint16%2#0 aggregate%extract_uint16%3#0)
        let tuple_of_tuples.0.0#0: string = ((extract 2 0) aggregate%substring3%1#0)
        let aggregate%len%0#0: uint64 = (len aggregate%substring3%0#0)
        let tuple_of_tuples.0.1#0: Encoded(len+utf8[]) = (substring3 aggregate%substring3%0#0 aggregate%extract_uint16%3#0 aggregate%len%0#0)
        let aggregate%len%1#0: uint64 = (len reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0)
        let aggregate%substring3%3#0: bytes = (substring3 reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 aggregate%extract_uint16%1#0 aggregate%len%1#0)
        let tuple_of_tuples.1.0#0: uint64 = (extract_uint64 aggregate%substring3%3#0 0u)
        let aggregate%extract_uint16%6#0: uint64 = (extract_uint16 aggregate%substring3%3#0 16u)
        let aggregate%len%2#0: uint64 = (len aggregate%substring3%3#0)
        let aggregate%substring3%4#0: bytes = (substring3 aggregate%substring3%3#0 aggregate%extract_uint16%6#0 aggregate%len%2#0)
        let tuple_of_tuples.1.2#0: bytes = ((extract 2 0) aggregate%substring3%4#0)
        let tmp%0#5: bytes = (concat "echo: " tuple_of_tuples.0.0#0)
        let extract_to_end%0#0: bytes = ((extract 2 0) tuple_of_tuples.0.1#0)
        let concat%0#0: Encoded(len+utf8[]) = (concat 0x00066563686f3a20 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let as_bytes%0#0: bytes[8] = (itob len%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let tmp%2#0: uint64 = (+ tuple_of_tuples.1.0#0 1u)
        let tmp%3#3: uint64 = (extract_uint64 aggregate%substring3%3#0 8u)
        let tmp%4#0: uint64 = (+ tmp%3#3 1u)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob tmp%4#0)
        let tmp%6#0: bytes = (concat 0x6563686f3a20 tuple_of_tuples.1.2#0)
        let aggregate%length%6#0: uint64 = (len tmp%0#5)
        let aggregate%as_bytes%8#0: bytes[8] = (itob aggregate%length%6#0)
        let aggregate%length_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%8#0)
        let aggregate%encoded_value%6#0: bytes = (concat aggregate%length_uint16%6#0 tmp%0#5)
        let aggregate%data_length%2#0: uint64 = (len aggregate%encoded_value%6#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ 4u aggregate%data_length%2#0)
        let aggregate%as_bytes%10#0: bytes[8] = (itob aggregate%current_tail_offset%2#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%head%11#0: bytes = (concat 0x0004 aggregate%offset_as_uint16%3#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%11#0 aggregate%encoded_value%6#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%concat%2#0 replace%0#0)
        let aggregate%data_length%4#0: uint64 = (len aggregate%concat%3#0)
        let aggregate%current_tail_offset%4#0: uint64 = (+ 4u aggregate%data_length%4#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob tmp%2#0)
        let aggregate%head%14#0: bytes = (concat aggregate%val_as_bytes%8#0 aggregate%val_as_bytes%7#0)
        let aggregate%length%7#0: uint64 = (len tmp%6#0)
        let aggregate%as_bytes%12#0: bytes[8] = (itob aggregate%length%7#0)
        let aggregate%length_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%12#0)
        let aggregate%encoded_value%7#0: bytes = (concat aggregate%length_uint16%7#0 tmp%6#0)
        let aggregate%head%15#0: bytes = (concat aggregate%head%14#0 0x0012)
        let aggregate%concat%4#0: bytes = (concat aggregate%head%15#0 aggregate%encoded_value%7#0)
        let aggregate%as_bytes%14#0: bytes[8] = (itob aggregate%current_tail_offset%4#0)
        let aggregate%offset_as_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%14#0)
        let aggregate%head%16#0: bytes = (concat 0x0004 aggregate%offset_as_uint16%6#0)
        let aggregate%concat%5#0: bytes = (concat aggregate%head%16#0 aggregate%concat%3#0)
        let aggregate%concat%6#0: bytes = (concat aggregate%concat%5#0 aggregate%concat%4#0)
        let tmp%11#1: bytes = (concat 0x151f7c75 aggregate%concat%6#0)
        (log tmp%11#1)
        exit 1u
    block@22: // return_args_after_14th_route_L134
        let reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (txna ApplicationArgs 15)
        let a15#0: Encoded(uint8) = ((extract 0 1) reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0)
        let reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%1#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (txna ApplicationArgs 15)
        let a16#0: Encoded(uint8) = ((extract 1 1) reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%1#0)
        let reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (txna ApplicationArgs 15)
        let a17#0: Encoded(uint8) = ((extract 2 1) reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0)
        let reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (txna ApplicationArgs 15)
        let a18#0: Encoded(uint8) = ((extract 3 1) reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0)
        let reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (txna ApplicationArgs 15)
        let a19#0: Encoded(uint8,uint8,uint8,uint8) = ((extract 4 4) reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0)
        let reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (txna ApplicationArgs 15)
        let a20#0: Encoded(uint8) = ((extract 8 1) reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0)
        let aggregate%head%18#0: bytes = (concat a15#0 a16#0)
        let aggregate%head%19#0: bytes = (concat aggregate%head%18#0 a17#0)
        let aggregate%head%20#0: bytes = (concat aggregate%head%19#0 a18#0)
        let aggregate%head%21#0: bytes = (concat aggregate%head%20#0 a19#0)
        let last_arg#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (concat aggregate%head%21#0 a20#0)
        let tmp%1#1: bytes = (txna ApplicationArgs 15)
        let tmp%2#2: bool = (== tmp%1#1 last_arg#0)
        (assert tmp%2#2)
        let aggregate%length%8#0: uint64 = (len last_arg#0)
        let aggregate%as_bytes%15#0: bytes[8] = (itob aggregate%length%8#0)
        let aggregate%length_uint16%8#0: bytes = ((extract 6 2) aggregate%as_bytes%15#0)
        let aggregate%encoded_value%8#0: bytes = (concat aggregate%length_uint16%8#0 last_arg#0)
        let tmp%1#1: bytes = (concat 0x151f7c75 aggregate%encoded_value%8#0)
        (log tmp%1#1)
        exit 1u
    block@23: // logs_are_equal_route_L162
        let reinterpret_Encoded(uint64,(len+utf8[]))%0#0: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 1)
        let log_1.level#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,(len+utf8[]))%0#0 0u)
        let aggregate%extract_uint16%7#0: uint64 = (extract_uint16 reinterpret_Encoded(uint64,(len+utf8[]))%0#0 8u)
        let aggregate%len%3#0: uint64 = (len reinterpret_Encoded(uint64,(len+utf8[]))%0#0)
        let aggregate%substring3%5#0: bytes = (substring3 reinterpret_Encoded(uint64,(len+utf8[]))%0#0 aggregate%extract_uint16%7#0 aggregate%len%3#0)
        let log_1.message#0: string = ((extract 2 0) aggregate%substring3%5#0)
        let reinterpret_Encoded(uint64,(len+utf8[]))%1#0: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 2)
        let log_2.level#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,(len+utf8[]))%1#0 0u)
        let aggregate%extract_uint16%8#0: uint64 = (extract_uint16 reinterpret_Encoded(uint64,(len+utf8[]))%1#0 8u)
        let aggregate%len%4#0: uint64 = (len reinterpret_Encoded(uint64,(len+utf8[]))%1#0)
        let aggregate%substring3%6#0: bytes = (substring3 reinterpret_Encoded(uint64,(len+utf8[]))%1#0 aggregate%extract_uint16%8#0 aggregate%len%4#0)
        let log_2.message#0: string = ((extract 2 0) aggregate%substring3%6#0)
        let tmp%0#3: bool = (== log_1.level#0 log_2.level#0)
        let tmp%1#3: bool = (== log_1.message#0 log_2.message#0)
        let tmp%2#2: bool = (&& tmp%0#3 tmp%1#3)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%2#2)
        let tmp%6#0: bytes = (concat 0x151f7c75 aggregate%encoded_bool%0#0)
        (log tmp%6#0)
        exit 1u
    block@24: // echo_log_struct_route_L166
        let log#0: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 1)
        let tmp%1#1: bytes = (concat 0x151f7c75 log#0)
        (log tmp%1#1)
        exit 1u
    block@27: // after_if_else_L31
        fail
    block@28: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u