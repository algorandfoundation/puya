main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@23
    block@2: // abi_routing_L25
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "is_a_b(byte[],byte[])void" => block@3, method "echo(string)string" => block@4, method "no_args()uint64" => block@5, method "log(uint64)void" => block@6, method "log(uint512)void" => block@7, method "log(string)void" => block@8, method "log(bool)void" => block@9, method "log(byte[])void" => block@10, method "log(asset,account,application)void" => block@11, method "log(address)void" => block@12, method "echo_native_string(string)string" => block@13, method "echo_native_bytes(byte[])byte[]" => block@14, method "echo_native_uint64(uint64)uint64" => block@15, method "echo_native_biguint(uint512)uint512" => block@16, method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)" => block@17, method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))" => block@18, method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]" => block@19, method "logs_are_equal((uint64,string),(uint64,string))bool" => block@20, * => block@27}
    block@3: // is_a_b_route_L26
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%7#0: bytes = (txna ApplicationArgs 1)
        let a#0: bytes = ((extract 2 0) tmp%7#0)
        let tmp%9#0: bytes = (txna ApplicationArgs 2)
        let b#0: bytes = ((extract 2 0) tmp%9#0)
        let tmp%0#0: bool = (== a#0 0x61)
        (assert tmp%0#0) // a is not a
        let tmp%1#1: bool = (== b#0 0x62)
        (assert tmp%1#1) // b is not b
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@4: // echo_route_L31
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let value#2: bytes = (txna ApplicationArgs 1)
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) value#2)
        let concatenated%0#0: bytes = (concat 0x6563686f3a20 expr_value_trimmed%1#0)
        let len_%0#0: uint64 = (len concatenated%0#0)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let tmp%17#0: bytes = (concat 0x151f7c75 concat_result%0#0)
        (log tmp%17#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@5: // no_args_route_L35
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (! tmp%18#0)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        (assert tmp%20#0) // can only call when not creating
        (log 0x151f7c75000000000000002a)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@6: // log_route_L39
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        let value#8: bytes[8] = (txna ApplicationArgs 1)
        (log value#8)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@7: // log_route_L43
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        (assert tmp%29#0) // can only call when not creating
        let value#7: bytes[64] = (txna ApplicationArgs 1)
        (log value#7)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@8: // log_route_L47
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (! tmp%31#0)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        (assert tmp%33#0) // can only call when not creating
        let value#2: bytes = (txna ApplicationArgs 1)
        let tmp%0#3: bytes = ((extract 2 0) value#2)
        (log tmp%0#3)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@9: // log_route_L51
        let tmp%36#0: uint64 = (txn OnCompletion)
        let tmp%37#0: bool = (! tmp%36#0)
        (assert tmp%37#0) // OnCompletion is not NoOp
        let tmp%38#0: uint64 = (txn ApplicationID)
        (assert tmp%38#0) // can only call when not creating
        let value#5: bytes[1] = (txna ApplicationArgs 1)
        let tmp%0#0: bool = (getbit value#5 0u)
        let select%0#0: bytes = (select 0x46616c7365 0x54727565 tmp%0#0)
        (log select%0#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@10: // log_route_L55
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (! tmp%40#0)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        (assert tmp%42#0) // can only call when not creating
        let value#2: bytes = (txna ApplicationArgs 1)
        let tmp%0#3: bytes = ((extract 2 0) value#2)
        (log tmp%0#3)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@11: // log_route_L59
        let tmp%45#0: uint64 = (txn OnCompletion)
        let tmp%46#0: bool = (! tmp%45#0)
        (assert tmp%46#0) // OnCompletion is not NoOp
        let tmp%47#0: uint64 = (txn ApplicationID)
        (assert tmp%47#0) // can only call when not creating
        let reinterpret_bytes[1]%1#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%49#0: uint64 = (btoi reinterpret_bytes[1]%1#0)
        let asset#0: uint64 = ((txnas Assets) tmp%49#0)
        let reinterpret_bytes[1]%2#0: bytes[1] = (txna ApplicationArgs 2)
        let tmp%51#0: uint64 = (btoi reinterpret_bytes[1]%2#0)
        let account#0: bytes[32] = ((txnas Accounts) tmp%51#0)
        let reinterpret_bytes[1]%3#0: bytes[1] = (txna ApplicationArgs 3)
        let tmp%53#0: uint64 = (btoi reinterpret_bytes[1]%3#0)
        let app#0: uint64 = ((txnas Applications) tmp%53#0)
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
        (assert check%0#0) // asset exists
        let tmp%1#4: bytes = (concat value%0#0 account#0)
        let (value%1#0: bytes[32], check%1#0: bool) = ((app_params_get AppAddress) app#0)
        (assert check%1#0) // application exists
        let tmp%3#1: bytes = (concat tmp%1#4 value%1#0)
        (log tmp%3#1)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@12: // log_route_L63
        let tmp%55#0: uint64 = (txn OnCompletion)
        let tmp%56#0: bool = (! tmp%55#0)
        (assert tmp%56#0) // OnCompletion is not NoOp
        let tmp%57#0: uint64 = (txn ApplicationID)
        (assert tmp%57#0) // can only call when not creating
        let address#0: bytes[32] = (txna ApplicationArgs 1)
        (log address#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@13: // echo_native_string_route_L67
        let tmp%59#0: uint64 = (txn OnCompletion)
        let tmp%60#0: bool = (! tmp%59#0)
        (assert tmp%60#0) // OnCompletion is not NoOp
        let tmp%61#0: uint64 = (txn ApplicationID)
        (assert tmp%61#0) // can only call when not creating
        let tmp%63#0: bytes = (txna ApplicationArgs 1)
        let value#2: bytes = ((extract 2 0) tmp%63#0)
        let tmp%0#3: bytes = (concat "echo: " value#2)
        let length%0#0: uint64 = (len tmp%0#3)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 tmp%0#3)
        let tmp%65#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
        (log tmp%65#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@14: // echo_native_bytes_route_L71
        let tmp%66#0: uint64 = (txn OnCompletion)
        let tmp%67#0: bool = (! tmp%66#0)
        (assert tmp%67#0) // OnCompletion is not NoOp
        let tmp%68#0: uint64 = (txn ApplicationID)
        (assert tmp%68#0) // can only call when not creating
        let tmp%70#0: bytes = (txna ApplicationArgs 1)
        let value#2: bytes = ((extract 2 0) tmp%70#0)
        let tmp%0#3: bytes = (concat 0x6563686f3a20 value#2)
        let length%1#0: uint64 = (len tmp%0#3)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 tmp%0#3)
        let tmp%72#0: bytes = (concat 0x151f7c75 encoded_value%1#0)
        (log tmp%72#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@15: // echo_native_uint64_route_L75
        let tmp%73#0: uint64 = (txn OnCompletion)
        let tmp%74#0: bool = (! tmp%73#0)
        (assert tmp%74#0) // OnCompletion is not NoOp
        let tmp%75#0: uint64 = (txn ApplicationID)
        (assert tmp%75#0) // can only call when not creating
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 1)
        let value#1: uint64 = (btoi reinterpret_bytes[8]%1#0)
        let tmp%0#1: uint64 = (+ value#1 1u)
        let val_as_bytes%1#0: bytes[8] = (itob tmp%0#1)
        let tmp%78#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
        (log tmp%78#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@16: // echo_native_biguint_route_L79
        let tmp%79#0: uint64 = (txn OnCompletion)
        let tmp%80#0: bool = (! tmp%79#0)
        (assert tmp%80#0) // OnCompletion is not NoOp
        let tmp%81#0: uint64 = (txn ApplicationID)
        (assert tmp%81#0) // can only call when not creating
        let value#0: biguint = (txna ApplicationArgs 1)
        let tmp%0#6: biguint = (b+ value#0 1b)
        let len_%0#0: uint64 = (len tmp%0#6)
        let no_overflow%0#0: bool = (<= len_%0#0 64u)
        (assert no_overflow%0#0) // overflow
        let b_zeros%0#0: bytes = (bzero 64u)
        let tmp%83#0: bytes = (b| tmp%0#6 b_zeros%0#0)
        let tmp%84#0: bytes = (concat 0x151f7c75 tmp%83#0)
        (log tmp%84#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@17: // echo_native_tuple_route_L83
        let tmp%85#0: uint64 = (txn OnCompletion)
        let tmp%86#0: bool = (! tmp%85#0)
        (assert tmp%86#0) // OnCompletion is not NoOp
        let tmp%87#0: uint64 = (txn ApplicationID)
        (assert tmp%87#0) // can only call when not creating
        let tmp%89#0: bytes = (txna ApplicationArgs 1)
        let s#0: bytes = ((extract 2 0) tmp%89#0)
        let tmp%91#0: bytes = (txna ApplicationArgs 2)
        let b#0: bytes = ((extract 2 0) tmp%91#0)
        let reinterpret_bytes[8]%2#0: bytes[8] = (txna ApplicationArgs 3)
        let u#0: uint64 = (btoi reinterpret_bytes[8]%2#0)
        let bu#0: biguint = (txna ApplicationArgs 4)
        let tmp%0#3: bytes = (concat "echo: " s#0)
        let tmp%1#4: bytes = (concat 0x6563686f3a20 b#0)
        let tmp%2#2: uint64 = (+ u#0 1u)
        let tmp%3#2: biguint = (b+ bu#0 1b)
        let length%2#0: uint64 = (len tmp%0#3)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 tmp%0#3)
        let length%3#0: uint64 = (len tmp%1#4)
        let as_bytes%3#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 tmp%1#4)
        let val_as_bytes%2#0: bytes[8] = (itob tmp%2#2)
        let len_%1#0: uint64 = (len tmp%3#2)
        let no_overflow%1#0: bool = (<= len_%1#0 64u)
        (assert no_overflow%1#0) // overflow
        let b_zeros%1#0: bytes = (bzero 64u)
        let arc4_item%0#0: bytes = (b| tmp%3#2 b_zeros%1#0)
        let data_length%0#0: uint64 = (len encoded_value%2#0)
        let current_tail_offset%1#0: uint64 = (+ 76u data_length%0#0)
        let as_bytes%5#0: bytes[8] = (itob current_tail_offset%1#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded_tuple_buffer%2#0: bytes = (concat 0x004c offset_as_uint16%1#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 val_as_bytes%2#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 arc4_item%0#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 encoded_value%2#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 encoded_value%3#0)
        let tmp%94#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%6#0)
        (log tmp%94#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@18: // echo_nested_tuple_route_L89
        let tmp%95#0: uint64 = (txn OnCompletion)
        let tmp%96#0: bool = (! tmp%95#0)
        (assert tmp%96#0) // OnCompletion is not NoOp
        let tmp%97#0: uint64 = (txn ApplicationID)
        (assert tmp%97#0) // can only call when not creating
        let tmp%99#0: bytes = (txna ApplicationArgs 1)
        let item_start_offset%0#0: uint64 = (extract_uint16 tmp%99#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 tmp%99#0 2u)
        let item0%0#0: bytes = (substring3 tmp%99#0 item_start_offset%0#0 item_end_offset%0#0)
        let item_start_offset%1#0: uint64 = (extract_uint16 item0%0#0 0u)
        let item_end_offset%1#0: uint64 = (extract_uint16 item0%0#0 2u)
        let item0%1#0: bytes = (substring3 item0%0#0 item_start_offset%1#0 item_end_offset%1#0)
        let tuple_of_tuples.0.0#0: bytes = ((extract 2 0) item0%1#0)
        let item_end_offset%2#0: uint64 = (len item0%0#0)
        let tuple_of_tuples.0.1#0: bytes = (substring3 item0%0#0 item_end_offset%1#0 item_end_offset%2#0)
        let item_end_offset%3#0: uint64 = (len tmp%99#0)
        let item1%1#0: bytes = (substring3 tmp%99#0 item_end_offset%0#0 item_end_offset%3#0)
        let tuple_of_tuples.1.0#0: uint64 = (extract_uint64 item1%1#0 0u)
        let item_start_offset%4#0: uint64 = (extract_uint16 item1%1#0 16u)
        let item_end_offset%4#0: uint64 = (len item1%1#0)
        let item2%0#0: bytes = (substring3 item1%1#0 item_start_offset%4#0 item_end_offset%4#0)
        let tuple_of_tuples.1.2#0: bytes = ((extract 2 0) item2%0#0)
        let tmp%0#3: bytes = (concat "echo: " tuple_of_tuples.0.0#0)
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) tuple_of_tuples.0.1#0)
        let concatenated%0#0: bytes = (concat 0x6563686f3a20 expr_value_trimmed%1#0)
        let len_%0#0: uint64 = (len concatenated%0#0)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let tmp%1#3: uint64 = (+ tuple_of_tuples.1.0#0 1u)
        let tmp%2#2: uint64 = (extract_uint64 item1%1#0 8u)
        let to_encode%0#1: uint64 = (+ tmp%2#2 1u)
        let val_as_bytes%0#1: bytes[8] = (itob to_encode%0#1)
        let tmp%3#1: bytes = (concat 0x6563686f3a20 tuple_of_tuples.1.2#0)
        let length%4#0: uint64 = (len tmp%0#3)
        let as_bytes%6#0: bytes[8] = (itob length%4#0)
        let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_value%4#0: bytes = (concat length_uint16%4#0 tmp%0#3)
        let data_length%2#0: uint64 = (len encoded_value%4#0)
        let current_tail_offset%4#0: uint64 = (+ 4u data_length%2#0)
        let as_bytes%8#0: bytes[8] = (itob current_tail_offset%4#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded_tuple_buffer%9#0: bytes = (concat 0x0004 offset_as_uint16%3#0)
        let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 encoded_value%4#0)
        let encoded_tuple_buffer%11#0: bytes = (concat encoded_tuple_buffer%10#0 concat_result%0#0)
        let val_as_bytes%3#0: bytes[8] = (itob tmp%1#3)
        let length%5#0: uint64 = (len tmp%3#1)
        let as_bytes%9#0: bytes[8] = (itob length%5#0)
        let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%9#0)
        let encoded_value%5#0: bytes = (concat length_uint16%5#0 tmp%3#1)
        let encoded_tuple_buffer%14#0: bytes = (concat val_as_bytes%3#0 val_as_bytes%0#1)
        let encoded_tuple_buffer%15#0: bytes = (concat encoded_tuple_buffer%14#0 0x0012)
        let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%15#0 encoded_value%5#0)
        let data_length%5#0: uint64 = (len encoded_tuple_buffer%11#0)
        let current_tail_offset%9#0: uint64 = (+ 4u data_length%5#0)
        let as_bytes%12#0: bytes[8] = (itob current_tail_offset%9#0)
        let offset_as_uint16%6#0: bytes = ((extract 6 2) as_bytes%12#0)
        let encoded_tuple_buffer%19#0: bytes = (concat 0x0004 offset_as_uint16%6#0)
        let encoded_tuple_buffer%20#0: bytes = (concat encoded_tuple_buffer%19#0 encoded_tuple_buffer%11#0)
        let encoded_tuple_buffer%21#0: bytes = (concat encoded_tuple_buffer%20#0 encoded_tuple_buffer%16#0)
        let tmp%100#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%21#0)
        (log tmp%100#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@19: // return_args_after_14th_route_L100
        let tmp%101#0: uint64 = (txn OnCompletion)
        let tmp%102#0: bool = (! tmp%101#0)
        (assert tmp%102#0) // OnCompletion is not NoOp
        let tmp%103#0: uint64 = (txn ApplicationID)
        (assert tmp%103#0) // can only call when not creating
        let reinterpret_bytes[9]%0#0: bytes[9] = (txna ApplicationArgs 15)
        let a15#0: bytes[1] = ((extract 0 1) reinterpret_bytes[9]%0#0) // on error: Index access is out of bounds
        let reinterpret_bytes[9]%1#0: bytes[9] = (txna ApplicationArgs 15)
        let a16#0: bytes[1] = ((extract 1 1) reinterpret_bytes[9]%1#0) // on error: Index access is out of bounds
        let reinterpret_bytes[9]%2#0: bytes[9] = (txna ApplicationArgs 15)
        let a17#0: bytes[1] = ((extract 2 1) reinterpret_bytes[9]%2#0) // on error: Index access is out of bounds
        let reinterpret_bytes[9]%3#0: bytes[9] = (txna ApplicationArgs 15)
        let a18#0: bytes[1] = ((extract 3 1) reinterpret_bytes[9]%3#0) // on error: Index access is out of bounds
        let reinterpret_bytes[9]%4#0: bytes[9] = (txna ApplicationArgs 15)
        let a19#0: bytes[4] = ((extract 4 4) reinterpret_bytes[9]%4#0) // on error: Index access is out of bounds
        let reinterpret_bytes[9]%5#0: bytes[9] = (txna ApplicationArgs 15)
        let a20#0: bytes[1] = ((extract 8 1) reinterpret_bytes[9]%5#0) // on error: Index access is out of bounds
        let encoded_tuple_buffer%2#0: bytes = (concat a15#0 a16#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 a17#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 a18#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 a19#0)
        let last_arg#0: bytes[9] = (concat encoded_tuple_buffer%5#0 a20#0)
        let tmp%0#3: bytes = (txna ApplicationArgs 15)
        let tmp%1#1: bool = (== tmp%0#3 last_arg#0)
        (assert tmp%1#1)
        let encoded_value%0#0: bytes = (concat 0x0009 last_arg#0)
        let tmp%112#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
        (log tmp%112#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@20: // logs_are_equal_route_L128
        let tmp%113#0: uint64 = (txn OnCompletion)
        let tmp%114#0: bool = (! tmp%113#0)
        (assert tmp%114#0) // OnCompletion is not NoOp
        let tmp%115#0: uint64 = (txn ApplicationID)
        (assert tmp%115#0) // can only call when not creating
        let tmp%117#0: bytes = (txna ApplicationArgs 1)
        let log_1.level#0: uint64 = (extract_uint64 tmp%117#0 0u)
        let item_start_offset%5#0: uint64 = (extract_uint16 tmp%117#0 8u)
        let item_end_offset%5#0: uint64 = (len tmp%117#0)
        let item1%3#0: bytes = (substring3 tmp%117#0 item_start_offset%5#0 item_end_offset%5#0)
        let log_1.message#0: bytes = ((extract 2 0) item1%3#0)
        let tmp%118#0: bytes = (txna ApplicationArgs 2)
        let log_2.level#0: uint64 = (extract_uint64 tmp%118#0 0u)
        let item_start_offset%6#0: uint64 = (extract_uint16 tmp%118#0 8u)
        let item_end_offset%6#0: uint64 = (len tmp%118#0)
        let item1%4#0: bytes = (substring3 tmp%118#0 item_start_offset%6#0 item_end_offset%6#0)
        let log_2.message#0: bytes = ((extract 2 0) item1%4#0)
        let tmp%0#0: bool = (== log_1.level#0 log_2.level#0)
        let tmp%1#1: bool = (== log_1.message#0 log_2.message#0)
        let tmp%2#1: bool = (&& tmp%0#0 tmp%1#1)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%2#1)
        let tmp%119#0: bytes = (concat 0x151f7c75 encoded_bool%0#0)
        (log tmp%119#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@23: // bare_routing_L25
        let tmp%120#0: uint64 = (txn OnCompletion)
        goto tmp%120#0 ? block@27 : block@24
    block@24: // __algopy_default_create_L1
        let tmp%121#0: uint64 = (txn ApplicationID)
        let tmp%122#0: bool = (! tmp%121#0)
        (assert tmp%122#0) // can only call when creating
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@27: // after_if_else_L25
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0
        goto block@28
    block@28: // after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router___L1
        return tmp%0#0