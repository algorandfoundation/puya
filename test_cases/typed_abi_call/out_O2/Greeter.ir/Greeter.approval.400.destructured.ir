main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let lifted%return#0: bool = 1u
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@27
    block@2: // abi_routing_L24
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion is not NoOp
        let tmp%4#0: bool = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "test_is_a_b(byte[],byte[],uint64)void" => block@4, method "test_method_selector_kinds(uint64)void" => block@5, method "test_method_overload(uint64)void" => block@6, method "test_arg_conversion(uint64)void" => block@7, method "test_15plus_args(uint64)void" => block@8, method "test_void(uint64)void" => block@9, method "test_ref_types(uint64,uint64)void" => block@10, method "test_account_to_address(uint64)void" => block@11, method "test_native_string(uint64)void" => block@12, method "test_native_bytes(uint64)void" => block@13, method "test_native_uint64(uint64)void" => block@14, method "test_native_biguint(uint64)void" => block@15, method "test_native_tuple(uint64)void" => block@16, method "test_native_tuple_method_ref(uint64)void" => block@17, method "test_nested_tuples(uint64)void" => block@18, method "test_no_args(uint64)void" => block@19, method "test_named_tuples(uint64)void" => block@20, method "test_arc4_struct(uint64)void" => block@21, method "test_resource_encoding(uint64,uint64)void" => block@22, * => block@26}
    block@4: // test_is_a_b_route_L25
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "is_a_b(byte[],byte[])void")
        ((itxn_field ApplicationArgs) reinterpret_Encoded(len+uint8[])%0#0)
        ((itxn_field ApplicationArgs) reinterpret_Encoded(len+uint8[])%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit lifted%return#0
    block@5: // test_method_selector_kinds_route_L34
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) 0x00057465737431)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let result#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#1 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let tmp%6#4: bool = (== result#0 0x000b6563686f3a207465737431)
        (assert tmp%6#4)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) 0x00057465737432)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let result#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%9#3: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%10#0: bool = (== tmp%9#3 0x151f7c75)
        (assert tmp%10#0) // application log value is not the result of an ABI return
        let tmp%12#0: bool = (== result#0 0x000b6563686f3a207465737432)
        (assert tmp%12#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) 0x00057465737433)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let result#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let tmp%15#10: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%16#1: bool = (== tmp%15#10 0x151f7c75)
        (assert tmp%16#1) // application log value is not the result of an ABI return
        let tmp%18#0: bool = (== result#0 0x000b6563686f3a207465737433)
        (assert tmp%18#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) 0x00057465737434)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let result#0: bytes = ((extract 4 0) awst_tmp%3#0)
        let tmp%21#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%22#0: bool = (== tmp%21#0 0x151f7c75)
        (assert tmp%22#0) // application log value is not the result of an ABI return
        let tmp%24#0: bool = (== result#0 0x000b6563686f3a207465737434)
        (assert tmp%24#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) 0x00057465737435)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%4#0: bytes = (itxn LastLog)
        let result#0: bytes = ((extract 4 0) awst_tmp%4#0)
        let tmp%27#2: bytes = ((extract 0 4) awst_tmp%4#0)
        let tmp%28#1: bool = (== tmp%27#2 0x151f7c75)
        (assert tmp%28#1) // application log value is not the result of an ABI return
        let tmp%30#0: bool = (== result#0 0x000b6563686f3a207465737435)
        (assert tmp%30#0)
        exit lifted%return#0
    block@6: // test_method_overload_route_L48
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) 0x000e7479706564202b2069676e6f7265)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#2: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#2 0x151f7c75)
        (assert tmp%3#0) // application log value is not the result of an ABI return
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%4#5: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%5#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%6#4: bool = (== tmp%5#0 0x151f7c75)
        (assert tmp%6#4) // application log value is not the result of an ABI return
        let tmp%8#1: bool = (== tmp%4#5 0x00146563686f3a207479706564202b2069676e6f7265)
        (assert tmp%8#1)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) 0x0010756e7479706564202b2069676e6f7265)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%10#3: bytes = ((extract 4 0) awst_tmp%2#0)
        let tmp%11#3: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%12#0: bool = (== tmp%11#3 0x151f7c75)
        (assert tmp%12#0) // application log value is not the result of an ABI return
        let tmp%14#2: bool = (== tmp%10#3 0x00166563686f3a20756e7479706564202b2069676e6f7265)
        (assert tmp%14#2)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) 0x00057475706c65)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let result.0#7: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%3#0)
        let tmp%17#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%18#0: bool = (== tmp%17#0 0x151f7c75)
        (assert tmp%18#0) // application log value is not the result of an ABI return
        let result.1.LastLog#0: bytes = (itxn LastLog)
        let tmp%20#2: bool = (== result.0#7 0x000b6563686f3a207475706c65)
        (assert tmp%20#2)
        let tmp%21#0: bytes = ((extract 4 0) result.1.LastLog#0)
        let tmp%22#2: bytes = ((extract 0 4) result.1.LastLog#0)
        let tmp%23#0: bool = (== tmp%22#2 0x151f7c75)
        (assert tmp%23#0) // application log value is not the result of an ABI return
        let tmp%25#0: bool = (== tmp%21#0 0x000b6563686f3a207475706c65)
        (assert tmp%25#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) 0x0007756e7479706564)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn_result.LastLog#0: bytes = (itxn LastLog)
        let tmp%27#2: bytes = ((extract 4 0) txn_result.LastLog#0)
        let tmp%28#0: bytes = ((extract 0 4) txn_result.LastLog#0)
        let tmp%29#0: bool = (== tmp%28#0 0x151f7c75)
        (assert tmp%29#0) // application log value is not the result of an ABI return
        let tmp%31#0: bool = (== tmp%27#2 0x000d6563686f3a20756e7479706564)
        (assert tmp%31#0)
        exit lifted%return#0
    block@7: // test_arg_conversion_route_L63
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) 0x000a636f6e76657274656431)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%1#13: bool = (== txn.LastLog#0 0x636f6e76657274656431)
        (assert tmp%1#13)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(uint64)void")
        ((itxn_field ApplicationArgs) 0x0000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%2#2: bytes = (itob 2u)
        let tmp%3#0: bool = (== txn.LastLog#0 tmp%2#2)
        (assert tmp%3#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(uint512)void")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%7#0: bool = (== txn.LastLog#0 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)
        (assert tmp%7#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(byte[])void")
        ((itxn_field ApplicationArgs) 0x000134)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%9#0: bool = (== txn.LastLog#0 0x34)
        (assert tmp%9#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(bool)void")
        ((itxn_field ApplicationArgs) 0x80)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%11#0: bool = (== txn.LastLog#0 0x54727565)
        (assert tmp%11#0)
        exit lifted%return#0
    block@8: // test_15plus_args_route_L80
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]")
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x0000000000000002)
        ((itxn_field ApplicationArgs) 0x0000000000000003)
        ((itxn_field ApplicationArgs) 0x0000000000000004)
        ((itxn_field ApplicationArgs) 0x0000000000000005)
        ((itxn_field ApplicationArgs) 0x0000000000000006)
        ((itxn_field ApplicationArgs) 0x0000000000000007)
        ((itxn_field ApplicationArgs) 0x0000000000000008)
        ((itxn_field ApplicationArgs) 0x0000000000000009)
        ((itxn_field ApplicationArgs) 0x000000000000000a)
        ((itxn_field ApplicationArgs) 0x000000000000000b)
        ((itxn_field ApplicationArgs) 0x000000000000000c)
        ((itxn_field ApplicationArgs) 0x000000000000000d)
        ((itxn_field ApplicationArgs) 0x000000000000000e)
        ((itxn_field ApplicationArgs) 0x0f101112deadbeef14)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%3#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#1 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let tmp%5#0: bytes = ((extract 6 0) awst_tmp%0#0)
        let tmp%6#4: bool = (== tmp%5#0 0x0f101112deadbeef14)
        (assert tmp%6#4)
        exit lifted%return#0
    block@9: // test_void_route_L108
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) 0x0006576f726c6431)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%1#13: bool = (== txn.LastLog#0 0x576f726c6431)
        (assert tmp%1#13)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) 0x0006576f726c6432)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%3#0: bool = (== txn.LastLog#0 0x576f726c6432)
        (assert tmp%3#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) 0x0006576f726c6433)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%5#1: bool = (== txn.LastLog#0 0x576f726c6433)
        (assert tmp%5#1)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) 0x0006576f726c6434)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%7#0: bool = (== txn.LastLog#0 0x576f726c6434)
        (assert tmp%7#0)
        exit lifted%return#0
    block@10: // test_ref_types_route_L122
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let asset#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        itxn_begin
        let tmp%1#12: account = (global CurrentApplicationAddress)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(uint64,address,uint64)void")
        ((itxn_field ApplicationArgs) reinterpret_Encoded(uint64)%1#0)
        ((itxn_field ApplicationArgs) tmp%1#12)
        ((itxn_field ApplicationArgs) reinterpret_Encoded(uint64)%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
        (assert check%0#0) // asset exists
        let tmp%4#10: account = (global CurrentApplicationAddress)
        let tmp%5#0: bytes = (concat value%0#0 tmp%4#10)
        let (value%1#0: account, check%1#0: bool) = ((app_params_get AppAddress) app#0)
        (assert check%1#0) // application exists
        let tmp%6#1: bytes = (concat tmp%5#0 value%1#0)
        let tmp%7#0: bool = (== txn.LastLog#0 tmp%6#1)
        (assert tmp%7#0)
        exit lifted%return#0
    block@11: // test_account_to_address_route_L136
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        let tmp%0#23: account = (global CurrentApplicationAddress)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(address)void")
        ((itxn_field ApplicationArgs) tmp%0#23)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%2#10: account = (global CurrentApplicationAddress)
        let tmp%3#0: bool = (== txn.LastLog#0 tmp%2#10)
        (assert tmp%3#0)
        exit lifted%return#0
    block@12: // test_native_string_route_L145
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
        ((itxn_field ApplicationArgs) 0x000173)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#2: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#2 0x151f7c75)
        (assert tmp%3#0) // application log value is not the result of an ABI return
        let result1#4: string = ((extract 6 0) awst_tmp%0#0)
        let tmp%5#1: bool = (== result1#4 "echo: s")
        (assert tmp%5#1)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
        ((itxn_field ApplicationArgs) 0x000173)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%8#3: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%9#0: bool = (== tmp%8#3 0x151f7c75)
        (assert tmp%9#0) // application log value is not the result of an ABI return
        let result2#4: string = ((extract 6 0) awst_tmp%1#0)
        let tmp%11#0: bool = (== result2#4 result1#4)
        (assert tmp%11#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
        ((itxn_field ApplicationArgs) 0x000173)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%14#1: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%15#1: bool = (== tmp%14#1 0x151f7c75)
        (assert tmp%15#1) // application log value is not the result of an ABI return
        let result3#4: string = ((extract 6 0) awst_tmp%2#0)
        let tmp%17#1: bool = (== result3#4 result1#4)
        (assert tmp%17#1)
        exit lifted%return#0
    block@13: // test_native_bytes_route_L156
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
        ((itxn_field ApplicationArgs) 0x000162)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#2: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#2 0x151f7c75)
        (assert tmp%3#0) // application log value is not the result of an ABI return
        let result1#0: bytes = ((extract 6 0) awst_tmp%0#0)
        let tmp%5#1: bool = (== result1#0 0x6563686f3a2062)
        (assert tmp%5#1)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
        ((itxn_field ApplicationArgs) 0x000162)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%8#3: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%9#0: bool = (== tmp%8#3 0x151f7c75)
        (assert tmp%9#0) // application log value is not the result of an ABI return
        let result2#0: bytes = ((extract 6 0) awst_tmp%1#0)
        let tmp%11#0: bool = (== result2#0 result1#0)
        (assert tmp%11#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
        ((itxn_field ApplicationArgs) 0x000162)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%14#1: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%15#1: bool = (== tmp%14#1 0x151f7c75)
        (assert tmp%15#1) // application log value is not the result of an ABI return
        let result3#0: bytes = ((extract 6 0) awst_tmp%2#0)
        let tmp%17#1: bool = (== result3#0 result1#0)
        (assert tmp%17#1)
        exit lifted%return#0
    block@14: // test_native_uint64_route_L169
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#7: Encoded(uint64) = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#2: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#3: bool = (== tmp%1#2 0x151f7c75)
        (assert tmp%2#3) // application log value is not the result of an ABI return
        let result1#2: uint64 = (btoi tmp%0#7)
        let tmp%4#0: bool = (== result1#2 2u)
        (assert tmp%4#0)
        itxn_begin
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
        ((itxn_field ApplicationArgs) aggregate%val_as_bytes%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%6#1: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%7#1: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%8#1: bool = (== tmp%7#1 0x151f7c75)
        (assert tmp%8#1) // application log value is not the result of an ABI return
        let result2#2: uint64 = (btoi tmp%6#1)
        let tmp%10#0: bool = (== result2#2 result1#2)
        (assert tmp%10#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%11#3: bytes = ((extract 4 0) awst_tmp%2#0)
        let tmp%12#5: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%13#4: bool = (== tmp%12#5 0x151f7c75)
        (assert tmp%13#4) // application log value is not the result of an ABI return
        let result3#2: uint64 = (btoi tmp%11#3)
        let tmp%15#1: bool = (== result3#2 result1#2)
        (assert tmp%15#1)
        exit lifted%return#0
    block@15: // test_native_biguint_route_L180
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let result1#1: biguint = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#2: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#3: bool = (== tmp%1#2 0x151f7c75)
        (assert tmp%2#3) // application log value is not the result of an ABI return
        let tmp%4#0: bool = (b== result1#1 3b)
        (assert tmp%4#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let result2#1: biguint = ((extract 4 0) awst_tmp%1#0)
        let tmp%7#1: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%8#1: bool = (== tmp%7#1 0x151f7c75)
        (assert tmp%8#1) // application log value is not the result of an ABI return
        let tmp%10#0: bool = (b== result2#1 result1#1)
        (assert tmp%10#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let result3#1: biguint = ((extract 4 0) awst_tmp%2#0)
        let tmp%12#5: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%13#4: bool = (== tmp%12#5 0x151f7c75)
        (assert tmp%13#4) // application log value is not the result of an ABI return
        let tmp%15#1: bool = (b== result3#1 result1#1)
        (assert tmp%15#1)
        exit lifted%return#0
    block@16: // test_native_tuple_route_L191
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) 0x00027331)
        ((itxn_field ApplicationArgs) 0x00026231)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let result1#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#1 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 result1#0 0u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 result1#0 2u)
        let s#0: Encoded(len+utf8[]) = (substring3 result1#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let aggregate%len%0#0: uint64 = (len result1#0)
        let b#0: Encoded(len+uint8[]) = (substring3 result1#0 aggregate%extract_uint16%1#0 aggregate%len%0#0)
        let bu#0: Encoded(uint512) = ((extract 16 64) awst_tmp%0#0)
        let tmp%9#5: string = ((extract 2 0) s#0)
        let tmp%10#0: bool = (== tmp%9#5 "echo: s1")
        (assert tmp%10#0)
        let tmp%11#3: bytes = ((extract 2 0) b#0)
        let tmp%12#0: bool = (== tmp%11#3 0x6563686f3a206231)
        (assert tmp%12#0)
        let tmp%13#3: uint64 = (extract_uint64 awst_tmp%0#0 8u)
        let tmp%14#2: bool = (== tmp%13#3 2u)
        (assert tmp%14#2)
        let tmp%16#1: bool = (b== bu#0 3b)
        (assert tmp%16#1)
        itxn_begin
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 1u)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) 0x00027331)
        ((itxn_field ApplicationArgs) 0x00026231)
        ((itxn_field ApplicationArgs) aggregate%val_as_bytes%1#0)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let result2#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%22#2: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%23#0: bool = (== tmp%22#2 0x151f7c75)
        (assert tmp%23#0) // application log value is not the result of an ABI return
        let tmp%24#0: bool = (== result1#0 result2#0)
        (assert tmp%24#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) 0x00027331)
        ((itxn_field ApplicationArgs) 0x00026231)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let result3#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let tmp%28#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%29#0: bool = (== tmp%28#0 0x151f7c75)
        (assert tmp%29#0) // application log value is not the result of an ABI return
        let tmp%30#0: bool = (== result1#0 result3#0)
        (assert tmp%30#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) 0x00027331)
        ((itxn_field ApplicationArgs) 0x00026231)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%33#2: Encoded((len+utf8[]),(len+uint8[]),uint64,uint512) = ((extract 4 0) awst_tmp%3#0)
        let tmp%34#2: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%35#0: bool = (== tmp%34#2 0x151f7c75)
        (assert tmp%35#0) // application log value is not the result of an ABI return
        let aggregate%extract_uint16%3#0: uint64 = (extract_uint16 tmp%33#2 0u)
        let aggregate%extract_uint16%4#0: uint64 = (extract_uint16 tmp%33#2 2u)
        let aggregate%substring3%2#0: bytes = (substring3 tmp%33#2 aggregate%extract_uint16%3#0 aggregate%extract_uint16%4#0)
        let result_native.0#0: string = ((extract 2 0) aggregate%substring3%2#0)
        let aggregate%len%1#0: uint64 = (len tmp%33#2)
        let aggregate%substring3%3#0: bytes = (substring3 tmp%33#2 aggregate%extract_uint16%4#0 aggregate%len%1#0)
        let result_native.1#0: bytes = ((extract 2 0) aggregate%substring3%3#0)
        let result_native.2#0: uint64 = (extract_uint64 awst_tmp%3#0 8u)
        let result_native.3#0: biguint = ((extract 16 64) awst_tmp%3#0)
        let tmp%45#0: bool = (== tmp%9#5 result_native.0#0)
        (assert tmp%45#0)
        let tmp%51#0: bool = (== tmp%11#3 result_native.1#0)
        (assert tmp%51#0)
        let tmp%57#0: bool = (== tmp%13#3 result_native.2#0)
        (assert tmp%57#0)
        let tmp%63#0: bool = (b== bu#0 result_native.3#0)
        (assert tmp%63#0)
        exit lifted%return#0
    block@17: // test_native_tuple_method_ref_route_L250
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) 0x00027331)
        ((itxn_field ApplicationArgs) 0x00026231)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#2: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#1 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let aggregate%extract_uint16%6#0: uint64 = (extract_uint16 tmp%2#2 0u)
        let aggregate%extract_uint16%7#0: uint64 = (extract_uint16 tmp%2#2 2u)
        let aggregate%substring3%4#0: bytes = (substring3 tmp%2#2 aggregate%extract_uint16%6#0 aggregate%extract_uint16%7#0)
        let result.0#6: string = ((extract 2 0) aggregate%substring3%4#0)
        let aggregate%len%2#0: uint64 = (len tmp%2#2)
        let aggregate%substring3%5#0: bytes = (substring3 tmp%2#2 aggregate%extract_uint16%7#0 aggregate%len%2#0)
        let result.1#6: bytes = ((extract 2 0) aggregate%substring3%5#0)
        let result.2#6: uint64 = (extract_uint64 awst_tmp%0#0 8u)
        let result.3#0: biguint = ((extract 16 64) awst_tmp%0#0)
        let tmp%9#0: bool = (== result.0#6 "echo: s1")
        (assert tmp%9#0)
        let tmp%10#0: bool = (== result.1#6 0x6563686f3a206231)
        (assert tmp%10#0)
        let tmp%11#0: bool = (== result.2#6 2u)
        (assert tmp%11#0)
        let tmp%12#0: bool = (b== result.3#0 3b)
        (assert tmp%12#0)
        itxn_begin
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 1u)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) 0x00027331)
        ((itxn_field ApplicationArgs) 0x00026231)
        ((itxn_field ApplicationArgs) aggregate%val_as_bytes%2#0)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%17#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%18#1: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%19#1: bool = (== tmp%18#1 0x151f7c75)
        (assert tmp%19#1) // application log value is not the result of an ABI return
        let aggregate%extract_uint16%9#0: uint64 = (extract_uint16 tmp%17#0 0u)
        let aggregate%extract_uint16%10#0: uint64 = (extract_uint16 tmp%17#0 2u)
        let aggregate%substring3%6#0: bytes = (substring3 tmp%17#0 aggregate%extract_uint16%9#0 aggregate%extract_uint16%10#0)
        let result_2.0#0: string = ((extract 2 0) aggregate%substring3%6#0)
        let aggregate%len%3#0: uint64 = (len tmp%17#0)
        let aggregate%substring3%7#0: bytes = (substring3 tmp%17#0 aggregate%extract_uint16%10#0 aggregate%len%3#0)
        let result_2.1#0: bytes = ((extract 2 0) aggregate%substring3%7#0)
        let result_2.2#0: uint64 = (extract_uint64 awst_tmp%1#0 8u)
        let result_2.3#0: biguint = ((extract 16 64) awst_tmp%1#0)
        let tmp%24#0: bool = (== result_2.0#0 result.0#6)
        let tmp%25#0: bool = (== result_2.1#0 result.1#6)
        let tmp%26#0: bool = (&& tmp%24#0 tmp%25#0)
        let tmp%27#1: bool = (== result_2.2#0 result.2#6)
        let tmp%28#1: bool = (&& tmp%26#0 tmp%27#1)
        let tmp%29#0: bool = (b== result_2.3#0 result.3#0)
        let tmp%30#0: bool = (&& tmp%28#1 tmp%29#0)
        (assert tmp%30#0) // expected native arguments to give the same result
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) 0x00027331)
        ((itxn_field ApplicationArgs) 0x00026231)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%33#2: Encoded((len+utf8[]),(len+uint8[]),uint64,uint512) = ((extract 4 0) awst_tmp%2#0)
        let tmp%34#2: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%35#0: bool = (== tmp%34#2 0x151f7c75)
        (assert tmp%35#0) // application log value is not the result of an ABI return
        let aggregate%extract_uint16%12#0: uint64 = (extract_uint16 tmp%33#2 0u)
        let aggregate%extract_uint16%13#0: uint64 = (extract_uint16 tmp%33#2 2u)
        let aggregate%substring3%8#0: bytes = (substring3 tmp%33#2 aggregate%extract_uint16%12#0 aggregate%extract_uint16%13#0)
        let result_3.0#0: string = ((extract 2 0) aggregate%substring3%8#0)
        let aggregate%len%4#0: uint64 = (len tmp%33#2)
        let aggregate%substring3%9#0: bytes = (substring3 tmp%33#2 aggregate%extract_uint16%13#0 aggregate%len%4#0)
        let result_3.1#0: bytes = ((extract 2 0) aggregate%substring3%9#0)
        let result_3.2#0: uint64 = (extract_uint64 awst_tmp%2#0 8u)
        let result_3.3#0: biguint = ((extract 16 64) awst_tmp%2#0)
        let tmp%40#1: bool = (== result_3.0#0 result.0#6)
        let tmp%41#2: bool = (== result_3.1#0 result.1#6)
        let tmp%42#1: bool = (&& tmp%40#1 tmp%41#2)
        let tmp%43#0: bool = (== result_3.2#0 result.2#6)
        let tmp%44#0: bool = (&& tmp%42#1 tmp%43#0)
        let tmp%45#0: bool = (b== result_3.3#0 result.3#0)
        let tmp%46#0: bool = (&& tmp%44#0 tmp%45#0)
        (assert tmp%46#0) // expected arc4 arguments to give the same result
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) 0x00027331)
        ((itxn_field ApplicationArgs) 0x00026231)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%49#2: Encoded((len+utf8[]),(len+uint8[]),uint64,uint512) = ((extract 4 0) awst_tmp%3#0)
        let tmp%50#2: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%51#0: bool = (== tmp%50#2 0x151f7c75)
        (assert tmp%51#0) // application log value is not the result of an ABI return
        let aggregate%extract_uint16%15#0: uint64 = (extract_uint16 tmp%49#2 0u)
        let aggregate%extract_uint16%16#0: uint64 = (extract_uint16 tmp%49#2 2u)
        let aggregate%substring3%10#0: bytes = (substring3 tmp%49#2 aggregate%extract_uint16%15#0 aggregate%extract_uint16%16#0)
        let result_native.0#0: string = ((extract 2 0) aggregate%substring3%10#0)
        let aggregate%len%5#0: uint64 = (len tmp%49#2)
        let aggregate%substring3%11#0: bytes = (substring3 tmp%49#2 aggregate%extract_uint16%16#0 aggregate%len%5#0)
        let result_native.1#0: bytes = ((extract 2 0) aggregate%substring3%11#0)
        let result_native.2#0: uint64 = (extract_uint64 awst_tmp%3#0 8u)
        let result_native.3#0: biguint = ((extract 16 64) awst_tmp%3#0)
        let tmp%56#0: bool = (== result_native.0#0 result.0#6)
        let tmp%57#0: bool = (== result_native.1#0 result.1#6)
        let tmp%58#0: bool = (&& tmp%56#0 tmp%57#0)
        let tmp%59#0: bool = (== result_native.2#0 result.2#6)
        let tmp%60#0: bool = (&& tmp%58#0 tmp%59#0)
        let tmp%61#0: bool = (b== result_native.3#0 result.3#0)
        let tmp%62#0: bool = (&& tmp%60#0 tmp%61#0)
        (assert tmp%62#0)
        exit lifted%return#0
    block@18: // test_nested_tuples_route_L300
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))")
        ((itxn_field ApplicationArgs) 0x00040010000400080002733100027332000000000000000100000000000000020012000133)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%4#5: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%5#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%6#4: bool = (== tmp%5#0 0x151f7c75)
        (assert tmp%6#4) // application log value is not the result of an ABI return
        let aggregate%extract_uint16%18#0: uint64 = (extract_uint16 tmp%4#5 0u)
        let aggregate%extract_uint16%19#0: uint64 = (extract_uint16 tmp%4#5 2u)
        let aggregate%substring3%12#0: bytes = (substring3 tmp%4#5 aggregate%extract_uint16%18#0 aggregate%extract_uint16%19#0)
        let aggregate%extract_uint16%20#0: uint64 = (extract_uint16 aggregate%substring3%12#0 0u)
        let aggregate%extract_uint16%21#0: uint64 = (extract_uint16 aggregate%substring3%12#0 2u)
        let aggregate%substring3%13#0: bytes = (substring3 aggregate%substring3%12#0 aggregate%extract_uint16%20#0 aggregate%extract_uint16%21#0)
        let result.0.0#0: string = ((extract 2 0) aggregate%substring3%13#0)
        let aggregate%len%6#0: uint64 = (len aggregate%substring3%12#0)
        let result.0.1#0: Encoded(len+utf8[]) = (substring3 aggregate%substring3%12#0 aggregate%extract_uint16%21#0 aggregate%len%6#0)
        let aggregate%len%7#0: uint64 = (len tmp%4#5)
        let aggregate%substring3%15#0: bytes = (substring3 tmp%4#5 aggregate%extract_uint16%19#0 aggregate%len%7#0)
        let result.1.0#0: uint64 = (extract_uint64 aggregate%substring3%15#0 0u)
        let result.1.1#0: Encoded(uint64) = ((extract 8 8) aggregate%substring3%15#0)
        let aggregate%extract_uint16%24#0: uint64 = (extract_uint16 aggregate%substring3%15#0 16u)
        let aggregate%len%8#0: uint64 = (len aggregate%substring3%15#0)
        let aggregate%substring3%16#0: bytes = (substring3 aggregate%substring3%15#0 aggregate%extract_uint16%24#0 aggregate%len%8#0)
        let result.1.2#0: bytes = ((extract 2 0) aggregate%substring3%16#0)
        let tmp%12#0: bool = (== result.0.0#0 "echo: s1")
        (assert tmp%12#0)
        let tmp%14#2: bool = (== result.0.1#0 0x00086563686f3a207332)
        (assert tmp%14#2)
        let tmp%15#1: bool = (== result.1.0#0 2u)
        (assert tmp%15#1)
        let tmp%16#1: bool = (b== result.1.1#0 0x0000000000000003)
        (assert tmp%16#1)
        let tmp%17#1: bool = (== result.1.2#0 0x6563686f3a2033)
        (assert tmp%17#1)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))")
        ((itxn_field ApplicationArgs) 0x00040010000400080002733100027332000000000000000100000000000000020012000133)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%20#0: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = ((extract 4 0) awst_tmp%1#0)
        let tmp%21#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%22#0: bool = (== tmp%21#0 0x151f7c75)
        (assert tmp%22#0) // application log value is not the result of an ABI return
        let aggregate%extract_uint16%25#0: uint64 = (extract_uint16 tmp%20#0 0u)
        let aggregate%extract_uint16%26#0: uint64 = (extract_uint16 tmp%20#0 2u)
        let aggregate%substring3%17#0: bytes = (substring3 tmp%20#0 aggregate%extract_uint16%25#0 aggregate%extract_uint16%26#0)
        let aggregate%extract_uint16%27#0: uint64 = (extract_uint16 aggregate%substring3%17#0 0u)
        let aggregate%extract_uint16%28#0: uint64 = (extract_uint16 aggregate%substring3%17#0 2u)
        let aggregate%substring3%18#0: bytes = (substring3 aggregate%substring3%17#0 aggregate%extract_uint16%27#0 aggregate%extract_uint16%28#0)
        let result.0.0#0: string = ((extract 2 0) aggregate%substring3%18#0)
        let aggregate%len%9#0: uint64 = (len aggregate%substring3%17#0)
        let result.0.1#0: Encoded(len+utf8[]) = (substring3 aggregate%substring3%17#0 aggregate%extract_uint16%28#0 aggregate%len%9#0)
        let aggregate%len%10#0: uint64 = (len tmp%20#0)
        let aggregate%substring3%20#0: bytes = (substring3 tmp%20#0 aggregate%extract_uint16%26#0 aggregate%len%10#0)
        let result.1.0#0: uint64 = (extract_uint64 aggregate%substring3%20#0 0u)
        let result.1.1#0: Encoded(uint64) = ((extract 8 8) aggregate%substring3%20#0)
        let aggregate%extract_uint16%31#0: uint64 = (extract_uint16 aggregate%substring3%20#0 16u)
        let aggregate%len%11#0: uint64 = (len aggregate%substring3%20#0)
        let aggregate%substring3%21#0: bytes = (substring3 aggregate%substring3%20#0 aggregate%extract_uint16%31#0 aggregate%len%11#0)
        let result.1.2#0: bytes = ((extract 2 0) aggregate%substring3%21#0)
        let tmp%28#1: bool = (== result.0.0#0 "echo: s1")
        (assert tmp%28#1)
        let tmp%30#0: bool = (== result.0.1#0 0x00086563686f3a207332)
        (assert tmp%30#0)
        let tmp%31#0: bool = (== result.1.0#0 2u)
        (assert tmp%31#0)
        let tmp%32#0: bool = (b== result.1.1#0 0x0000000000000003)
        (assert tmp%32#0)
        let tmp%33#0: bool = (== result.1.2#0 0x6563686f3a2033)
        (assert tmp%33#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))")
        ((itxn_field ApplicationArgs) 0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%40#0: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = ((extract 4 0) awst_tmp%2#0)
        let tmp%41#1: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%42#1: bool = (== tmp%41#1 0x151f7c75)
        (assert tmp%42#1) // application log value is not the result of an ABI return
        let aggregate%extract_uint16%32#0: uint64 = (extract_uint16 tmp%40#0 0u)
        let aggregate%extract_uint16%33#0: uint64 = (extract_uint16 tmp%40#0 2u)
        let aggregate%substring3%22#0: bytes = (substring3 tmp%40#0 aggregate%extract_uint16%32#0 aggregate%extract_uint16%33#0)
        let aggregate%extract_uint16%34#0: uint64 = (extract_uint16 aggregate%substring3%22#0 0u)
        let aggregate%extract_uint16%35#0: uint64 = (extract_uint16 aggregate%substring3%22#0 2u)
        let aggregate%substring3%23#0: bytes = (substring3 aggregate%substring3%22#0 aggregate%extract_uint16%34#0 aggregate%extract_uint16%35#0)
        let result.0.0#0: string = ((extract 2 0) aggregate%substring3%23#0)
        let aggregate%len%12#0: uint64 = (len aggregate%substring3%22#0)
        let result.0.1#0: Encoded(len+utf8[]) = (substring3 aggregate%substring3%22#0 aggregate%extract_uint16%35#0 aggregate%len%12#0)
        let aggregate%len%13#0: uint64 = (len tmp%40#0)
        let aggregate%substring3%25#0: bytes = (substring3 tmp%40#0 aggregate%extract_uint16%33#0 aggregate%len%13#0)
        let result.1.0#0: uint64 = (extract_uint64 aggregate%substring3%25#0 0u)
        let result.1.1#0: Encoded(uint64) = ((extract 8 8) aggregate%substring3%25#0)
        let aggregate%extract_uint16%38#0: uint64 = (extract_uint16 aggregate%substring3%25#0 16u)
        let aggregate%len%14#0: uint64 = (len aggregate%substring3%25#0)
        let aggregate%substring3%26#0: bytes = (substring3 aggregate%substring3%25#0 aggregate%extract_uint16%38#0 aggregate%len%14#0)
        let result.1.2#0: bytes = ((extract 2 0) aggregate%substring3%26#0)
        let tmp%48#0: bool = (== result.0.0#0 "echo: s1b")
        (assert tmp%48#0)
        let tmp%50#0: bool = (== result.0.1#0 0x00096563686f3a20733262)
        (assert tmp%50#0)
        let tmp%51#0: bool = (== result.1.0#0 12u)
        (assert tmp%51#0)
        let tmp%52#1: bool = (b== result.1.1#0 0x0000000000000016)
        (assert tmp%52#1)
        let tmp%53#1: bool = (== result.1.2#0 0x6563686f3a203362)
        (assert tmp%53#1)
        exit lifted%return#0
    block@19: // test_no_args_route_L346
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "no_args()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#7: Encoded(uint64) = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#2: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#3: bool = (== tmp%1#2 0x151f7c75)
        (assert tmp%2#3) // application log value is not the result of an ABI return
        let result#3: uint64 = (btoi tmp%0#7)
        let tmp%4#0: bool = (== result#3 42u)
        (assert tmp%4#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "no_args()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let arc4_result#0: Encoded(uint64) = ((extract 4 0) awst_tmp%1#0)
        let tmp%6#1: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%7#0: bool = (== tmp%6#1 0x151f7c75)
        (assert tmp%7#0) // application log value is not the result of an ABI return
        let tmp%8#1: bool = (b== arc4_result#0 0x000000000000002a)
        (assert tmp%8#1)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "no_args()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%10#3: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%11#0: bool = (== tmp%10#3 0x151f7c75)
        (assert tmp%11#0) // application log value is not the result of an ABI return
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%13#1: Encoded(uint64) = ((extract 4 0) awst_tmp%3#0)
        let tmp%14#1: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%15#1: bool = (== tmp%14#1 0x151f7c75)
        (assert tmp%15#1) // application log value is not the result of an ABI return
        let tmp%16#1: bool = (b== tmp%13#1 0x000000000000002a)
        (assert tmp%16#1)
        exit lifted%return#0
    block@20: // test_named_tuples_route_L356
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "logs_are_equal((uint64,string),(uint64,string))bool")
        ((itxn_field ApplicationArgs) 0x0000000000000001000a00056c6f672031)
        ((itxn_field ApplicationArgs) 0x0000000000000001000a00056c6f672031)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#2: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#1 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let result#1: bool = (getbit tmp%2#2 0u)
        (assert result#1)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "logs_are_equal((uint64,string),(uint64,string))bool")
        ((itxn_field ApplicationArgs) 0x0000000000000002000a00056c6f672032)
        ((itxn_field ApplicationArgs) 0x0000000000000001000a00056c6f672031)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%8#3: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%9#3: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%10#0: bool = (== tmp%9#3 0x151f7c75)
        (assert tmp%10#0) // application log value is not the result of an ABI return
        let result#1: bool = (getbit tmp%8#3 0u)
        let tmp%12#0: bool = (! result#1)
        (assert tmp%12#0)
        exit lifted%return#0
    block@21: // test_arc4_struct_route_L373
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_log_struct((uint64,string))(uint64,string)")
        ((itxn_field ApplicationArgs) 0x0000000000000001000a00056c6f672031)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let result#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#1 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%5#1: bool = (== result#0 0x0000000000000001000a00056c6f672031)
        (assert tmp%5#1) // expected output to match input
        let tmp%6#1: bytes = ((extract 4 0) txn.LastLog#0)
        let tmp%7#1: bytes = ((extract 0 4) txn.LastLog#0)
        let tmp%8#1: bool = (== tmp%7#1 0x151f7c75)
        (assert tmp%8#1) // application log value is not the result of an ABI return
        let tmp%9#0: bool = (== tmp%6#1 0x0000000000000001000a00056c6f672031)
        (assert tmp%9#0) // expected output to match input
        exit lifted%return#0
    block@22: // test_resource_encoding_route_L384
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let app_to_call#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let asset#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let app#0: uint64 = (global CurrentApplicationID)
        let acc#0: account = (global CurrentApplicationAddress)
        itxn_begin
        ((itxn_field ApplicationID) app_to_call#0)
        ((itxn_field Assets) asset#0)
        ((itxn_field Applications) app#0)
        ((itxn_field Accounts) acc#0)
        ((itxn_field ApplicationArgs) method "echo_resource_by_index(asset,application,account)(uint64,uint64,address)")
        ((itxn_field ApplicationArgs) 0x00)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%3#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#1 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let result.0#0: uint64 = (extract_uint64 awst_tmp%0#0 4u)
        let result.1#0: uint64 = (extract_uint64 awst_tmp%0#0 12u)
        let result.2#0: account = ((extract 20 32) awst_tmp%0#0)
        let tmp%8#1: bool = (== result.0#0 asset#0)
        let tmp%9#0: bool = (== result.1#0 app#0)
        let tmp%10#0: bool = (&& tmp%8#1 tmp%9#0)
        let tmp%11#0: bool = (== result.2#0 acc#0)
        let tmp%12#0: bool = (&& tmp%10#0 tmp%11#0)
        (assert tmp%12#0) // expected echo to return same resources
        itxn_begin
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob app#0)
        ((itxn_field ApplicationID) app_to_call#0)
        ((itxn_field ApplicationArgs) method "echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)")
        ((itxn_field ApplicationArgs) reinterpret_Encoded(uint64)%1#0)
        ((itxn_field ApplicationArgs) aggregate%val_as_bytes%7#0)
        ((itxn_field ApplicationArgs) acc#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%17#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%18#0: bool = (== tmp%17#0 0x151f7c75)
        (assert tmp%18#0) // application log value is not the result of an ABI return
        let result.0#0: uint64 = (extract_uint64 awst_tmp%1#0 4u)
        let result.1#0: uint64 = (extract_uint64 awst_tmp%1#0 12u)
        let result.2#0: account = ((extract 20 32) awst_tmp%1#0)
        let tmp%22#0: bool = (== result.0#0 asset#0)
        let tmp%23#0: bool = (== result.1#0 app#0)
        let tmp%24#0: bool = (&& tmp%22#0 tmp%23#0)
        let tmp%25#0: bool = (== result.2#0 acc#0)
        let tmp%26#0: bool = (&& tmp%24#0 tmp%25#0)
        (assert tmp%26#0) // expected echo to return same resources
        itxn_begin
        ((itxn_field ApplicationID) app_to_call#0)
        ((itxn_field Assets) asset#0)
        ((itxn_field Applications) app#0)
        ((itxn_field Accounts) acc#0)
        ((itxn_field ApplicationArgs) method "echo_resource_by_index(asset,application,account)(uint64,uint64,address)")
        ((itxn_field ApplicationArgs) 0x00)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%28#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%29#0: bool = (== tmp%28#0 0x151f7c75)
        (assert tmp%29#0) // application log value is not the result of an ABI return
        let result.0#0: uint64 = (extract_uint64 awst_tmp%2#0 4u)
        let result.1#0: uint64 = (extract_uint64 awst_tmp%2#0 12u)
        let result.2#0: account = ((extract 20 32) awst_tmp%2#0)
        let tmp%33#0: bool = (== result.0#0 asset#0)
        let tmp%34#0: bool = (== result.1#0 app#0)
        let tmp%35#0: bool = (&& tmp%33#0 tmp%34#0)
        let tmp%36#0: bool = (== result.2#0 acc#0)
        let tmp%37#0: bool = (&& tmp%35#0 tmp%36#0)
        (assert tmp%37#0) // expected echo to return same resources
        itxn_begin
        ((itxn_field ApplicationID) app_to_call#0)
        ((itxn_field ApplicationArgs) method "echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)")
        ((itxn_field ApplicationArgs) reinterpret_Encoded(uint64)%1#0)
        ((itxn_field ApplicationArgs) aggregate%val_as_bytes%7#0)
        ((itxn_field ApplicationArgs) acc#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%42#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%43#0: bool = (== tmp%42#0 0x151f7c75)
        (assert tmp%43#0) // application log value is not the result of an ABI return
        let result.0#0: uint64 = (extract_uint64 awst_tmp%3#0 4u)
        let result.1#0: uint64 = (extract_uint64 awst_tmp%3#0 12u)
        let result.2#0: account = ((extract 20 32) awst_tmp%3#0)
        let tmp%47#0: bool = (== result.0#0 asset#0)
        let tmp%48#0: bool = (== result.1#0 app#0)
        let tmp%49#0: bool = (&& tmp%47#0 tmp%48#0)
        let tmp%50#0: bool = (== result.2#0 acc#0)
        let tmp%51#0: bool = (&& tmp%49#0 tmp%50#0)
        (assert tmp%51#0) // expected echo to return same resources
        itxn_begin
        ((itxn_field ApplicationID) app_to_call#0)
        ((itxn_field Assets) asset#0)
        ((itxn_field Applications) app#0)
        ((itxn_field Accounts) acc#0)
        ((itxn_field ApplicationArgs) method "echo_resource_by_index(asset,application,account)(uint64,uint64,address)")
        ((itxn_field ApplicationArgs) 0x00)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%4#0: bytes = (itxn LastLog)
        let tmp%53#0: bytes = ((extract 0 4) awst_tmp%4#0)
        let tmp%54#0: bool = (== tmp%53#0 0x151f7c75)
        (assert tmp%54#0) // application log value is not the result of an ABI return
        let result.0#0: uint64 = (extract_uint64 awst_tmp%4#0 4u)
        let result.1#0: uint64 = (extract_uint64 awst_tmp%4#0 12u)
        let result.2#0: account = ((extract 20 32) awst_tmp%4#0)
        let tmp%58#0: bool = (== result.0#0 asset#0)
        let tmp%59#0: bool = (== result.1#0 app#0)
        let tmp%60#0: bool = (&& tmp%58#0 tmp%59#0)
        let tmp%61#0: bool = (== result.2#0 acc#0)
        let tmp%62#0: bool = (&& tmp%60#0 tmp%61#0)
        (assert tmp%62#0) // expected echo to return same resources
        itxn_begin
        ((itxn_field ApplicationID) app_to_call#0)
        ((itxn_field ApplicationArgs) method "echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)")
        ((itxn_field ApplicationArgs) reinterpret_Encoded(uint64)%1#0)
        ((itxn_field ApplicationArgs) aggregate%val_as_bytes%7#0)
        ((itxn_field ApplicationArgs) acc#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%5#0: bytes = (itxn LastLog)
        let tmp%67#0: bytes = ((extract 0 4) awst_tmp%5#0)
        let tmp%68#0: bool = (== tmp%67#0 0x151f7c75)
        (assert tmp%68#0) // application log value is not the result of an ABI return
        let result.0#0: uint64 = (extract_uint64 awst_tmp%5#0 4u)
        let result.1#0: uint64 = (extract_uint64 awst_tmp%5#0 12u)
        let result.2#0: account = ((extract 20 32) awst_tmp%5#0)
        let tmp%72#0: bool = (== result.0#0 asset#0)
        let tmp%73#0: bool = (== result.1#0 app#0)
        let tmp%74#0: bool = (&& tmp%72#0 tmp%73#0)
        let tmp%75#0: bool = (== result.2#0 acc#0)
        let tmp%76#0: bool = (&& tmp%74#0 tmp%75#0)
        (assert tmp%76#0) // expected echo to return same resources
        exit lifted%return#0
    block@26: // after_if_else_L24
        fail
    block@27: // __algopy_default_create_L1
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (! tmp%6#0)
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: bool = (&& tmp%7#0 tmp%9#0)
        (assert tmp%10#0) // OnCompletion must be NoOp && can only call when creating
        exit lifted%return#0