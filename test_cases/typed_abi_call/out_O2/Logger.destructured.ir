contract test_cases.typed_abi_call.logger.Logger:
    program approval:
        subroutine test_cases.typed_abi_call.logger.Logger.approval_program() -> uint64:
            block@0: // L4
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@10
            block@1: // abi_routing_L4
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "echo(string)string" => block@2, method "log_uint64(uint64)void" => block@3, method "log_uint512(uint512)void" => block@4, method "log_string(string)void" => block@5, method "log_bool(bool)void" => block@6, method "log_bytes(byte[])void" => block@7, * => fail // reject transaction}
            block@2: // echo_route_L5
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: uint64 = (! tmp%2#0)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: uint64 = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: bytes = (txna ApplicationArgs 1)
                let tmp%6#0: bytes = test_cases.typed_abi_call.logger.Logger.echo(tmp%5#0)
                let tmp%7#0: bytes = (concat 0x151f7c75 tmp%6#0)
                (log tmp%7#0)
                return 1u
            block@3: // log_uint64_route_L9
                let tmp%8#0: uint64 = (txn OnCompletion)
                let tmp%9#0: uint64 = (! tmp%8#0)
                (assert tmp%9#0) // OnCompletion is NoOp
                let tmp%10#0: uint64 = (txn ApplicationID)
                (assert tmp%10#0) // is not creating
                let tmp%11#0: bytes = (txna ApplicationArgs 1)
                test_cases.typed_abi_call.logger.Logger.log_uint64(tmp%11#0)
                return 1u
            block@4: // log_uint512_route_L13
                let tmp%12#0: uint64 = (txn OnCompletion)
                let tmp%13#0: uint64 = (! tmp%12#0)
                (assert tmp%13#0) // OnCompletion is NoOp
                let tmp%14#0: uint64 = (txn ApplicationID)
                (assert tmp%14#0) // is not creating
                let tmp%15#0: bytes = (txna ApplicationArgs 1)
                test_cases.typed_abi_call.logger.Logger.log_uint512(tmp%15#0)
                return 1u
            block@5: // log_string_route_L17
                let tmp%16#0: uint64 = (txn OnCompletion)
                let tmp%17#0: uint64 = (! tmp%16#0)
                (assert tmp%17#0) // OnCompletion is NoOp
                let tmp%18#0: uint64 = (txn ApplicationID)
                (assert tmp%18#0) // is not creating
                let tmp%19#0: bytes = (txna ApplicationArgs 1)
                test_cases.typed_abi_call.logger.Logger.log_string(tmp%19#0)
                return 1u
            block@6: // log_bool_route_L21
                let tmp%20#0: uint64 = (txn OnCompletion)
                let tmp%21#0: uint64 = (! tmp%20#0)
                (assert tmp%21#0) // OnCompletion is NoOp
                let tmp%22#0: uint64 = (txn ApplicationID)
                (assert tmp%22#0) // is not creating
                let tmp%23#0: bytes = (txna ApplicationArgs 1)
                test_cases.typed_abi_call.logger.Logger.log_bool(tmp%23#0)
                return 1u
            block@7: // log_bytes_route_L25
                let tmp%24#0: uint64 = (txn OnCompletion)
                let tmp%25#0: uint64 = (! tmp%24#0)
                (assert tmp%25#0) // OnCompletion is NoOp
                let tmp%26#0: uint64 = (txn ApplicationID)
                (assert tmp%26#0) // is not creating
                let tmp%27#0: bytes = (txna ApplicationArgs 1)
                test_cases.typed_abi_call.logger.Logger.log_bytes(tmp%27#0)
                return 1u
            block@10: // bare_routing_L4
                let tmp%28#0: uint64 = (txn OnCompletion)
                let not%tmp%28#0: uint64 = (! tmp%28#0)
                (assert not%tmp%28#0) // reject transaction
                let tmp%29#0: uint64 = (txn ApplicationID)
                let tmp%30#0: uint64 = (! tmp%29#0)
                (assert tmp%30#0) // is creating
                return 1u
        
        subroutine test_cases.typed_abi_call.logger.Logger.echo(value: bytes) -> bytes:
            block@0: // L5
                let expr_value_trimmed%1#0: bytes = ((extract 2 0) value#0)
                let concatenated%2#0: bytes = (concat "echo: " expr_value_trimmed%1#0)
                let len_%3#0: uint64 = (len concatenated%2#0)
                let len_bytes%4#0: bytes = (itob len_%3#0)
                let len_16_bit%5#0: bytes = ((extract 6 0) len_bytes%4#0)
                let concat_result%6#0: bytes = (concat len_16_bit%5#0 concatenated%2#0)
                return concat_result%6#0
        
        subroutine test_cases.typed_abi_call.logger.Logger.log_uint64(value: bytes) -> void:
            block@0: // L9
                (log value#0)
                return 
        
        subroutine test_cases.typed_abi_call.logger.Logger.log_uint512(value: bytes) -> void:
            block@0: // L13
                (log value#0)
                return 
        
        subroutine test_cases.typed_abi_call.logger.Logger.log_string(value: bytes) -> void:
            block@0: // L17
                let tmp%0#0: bytes = ((extract 2 0) value#0)
                (log tmp%0#0)
                return 
        
        subroutine test_cases.typed_abi_call.logger.Logger.log_bool(value: bytes) -> void:
            block@0: // L21
                let tmp%0#0: uint64 = (getbit value#0 0u)
                goto tmp%0#0 ? block@1 : block@2
            block@1: // ternary_true_L23
                let ternary_result%1#0: bytes = "True"
                goto block@3
            block@2: // ternary_false_L23
                let ternary_result%1#0: bytes = "False"
                goto block@3
            block@3: // ternary_merge_L23
                (log ternary_result%1#0)
                return 
        
        subroutine test_cases.typed_abi_call.logger.Logger.log_bytes(value: bytes) -> void:
            block@0: // L25
                let tmp%1#0: uint64 = (len value#0)
                let tmp%3#0: uint64 = (< 2u tmp%1#0)
                let tmp%4#0: uint64 = (select tmp%1#0 2u tmp%3#0)
                let tmp%6#0: bytes = (substring3 value#0 tmp%4#0 tmp%1#0)
                (log tmp%6#0)
                return 
    
    program clear-state:
        subroutine test_cases.typed_abi_call.logger.Logger.clear_state_program() -> uint64:
            block@0: // L4
                return 1u