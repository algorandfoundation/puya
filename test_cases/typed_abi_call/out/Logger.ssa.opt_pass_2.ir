contract test_cases.typed_abi_call.logger.Logger:
    program approval:
        subroutine test_cases.typed_abi_call.logger.Logger.approval_program() -> bool:
            block@0: // L8
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@12
            block@1: // abi_routing_L8
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "echo(string)string" => block@2, method "log(uint64)void" => block@3, method "log(uint512)void" => block@4, method "log(string)void" => block@5, method "log(bool)void" => block@6, method "log(byte[])void" => block@7, method "log(asset,account,application)void" => block@8, method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]" => block@9, * => fail // reject transaction}
            block@2: // echo_route_L9
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (! tmp%2#0)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: bytes = (txna ApplicationArgs 1)
                let tmp%6#0: bytes = test_cases.typed_abi_call.logger.Logger.echo(tmp%5#0)
                let tmp%7#0: bytes = (concat 0x151f7c75 tmp%6#0)
                (log tmp%7#0)
                return 1u
            block@3: // log_route_L13
                let tmp%8#0: uint64 = (txn OnCompletion)
                let tmp%9#0: bool = (! tmp%8#0)
                (assert tmp%9#0) // OnCompletion is NoOp
                let tmp%10#0: bool = (txn ApplicationID)
                (assert tmp%10#0) // is not creating
                let tmp%11#0: bytes = (txna ApplicationArgs 1)
                test_cases.typed_abi_call.logger.Logger.log_uint64(tmp%11#0)
                return 1u
            block@4: // log_route_L17
                let tmp%12#0: uint64 = (txn OnCompletion)
                let tmp%13#0: bool = (! tmp%12#0)
                (assert tmp%13#0) // OnCompletion is NoOp
                let tmp%14#0: bool = (txn ApplicationID)
                (assert tmp%14#0) // is not creating
                let tmp%15#0: bytes = (txna ApplicationArgs 1)
                test_cases.typed_abi_call.logger.Logger.log_uint512(tmp%15#0)
                return 1u
            block@5: // log_route_L21
                let tmp%16#0: uint64 = (txn OnCompletion)
                let tmp%17#0: bool = (! tmp%16#0)
                (assert tmp%17#0) // OnCompletion is NoOp
                let tmp%18#0: bool = (txn ApplicationID)
                (assert tmp%18#0) // is not creating
                let tmp%19#0: bytes = (txna ApplicationArgs 1)
                test_cases.typed_abi_call.logger.Logger.log_string(tmp%19#0)
                return 1u
            block@6: // log_route_L25
                let tmp%20#0: uint64 = (txn OnCompletion)
                let tmp%21#0: bool = (! tmp%20#0)
                (assert tmp%21#0) // OnCompletion is NoOp
                let tmp%22#0: bool = (txn ApplicationID)
                (assert tmp%22#0) // is not creating
                let tmp%23#0: bytes = (txna ApplicationArgs 1)
                test_cases.typed_abi_call.logger.Logger.log_bool(tmp%23#0)
                return 1u
            block@7: // log_route_L29
                let tmp%24#0: uint64 = (txn OnCompletion)
                let tmp%25#0: bool = (! tmp%24#0)
                (assert tmp%25#0) // OnCompletion is NoOp
                let tmp%26#0: bool = (txn ApplicationID)
                (assert tmp%26#0) // is not creating
                let tmp%27#0: bytes = (txna ApplicationArgs 1)
                test_cases.typed_abi_call.logger.Logger.log_bytes(tmp%27#0)
                return 1u
            block@8: // log_route_L33
                let tmp%28#0: uint64 = (txn OnCompletion)
                let tmp%29#0: bool = (! tmp%28#0)
                (assert tmp%29#0) // OnCompletion is NoOp
                let tmp%30#0: bool = (txn ApplicationID)
                (assert tmp%30#0) // is not creating
                let tmp%31#0: bytes = (txna ApplicationArgs 1)
                let tmp%32#0: uint64 = (btoi tmp%31#0)
                let tmp%33#0: uint64 = ((txnas Assets) tmp%32#0)
                let tmp%34#0: bytes = (txna ApplicationArgs 2)
                let tmp%35#0: uint64 = (btoi tmp%34#0)
                let tmp%36#0: bytes = ((txnas Accounts) tmp%35#0)
                let tmp%37#0: bytes = (txna ApplicationArgs 3)
                let tmp%38#0: uint64 = (btoi tmp%37#0)
                let tmp%39#0: uint64 = ((txnas Applications) tmp%38#0)
                test_cases.typed_abi_call.logger.Logger.log_asset_account_app(tmp%33#0, tmp%36#0, tmp%39#0)
                return 1u
            block@9: // return_args_after_14th_route_L37
                let tmp%40#0: uint64 = (txn OnCompletion)
                let tmp%41#0: bool = (! tmp%40#0)
                (assert tmp%41#0) // OnCompletion is NoOp
                let tmp%42#0: bool = (txn ApplicationID)
                (assert tmp%42#0) // is not creating
                let tmp%43#0: bytes = (txna ApplicationArgs 1)
                let tmp%44#0: bytes = (txna ApplicationArgs 2)
                let tmp%45#0: bytes = (txna ApplicationArgs 3)
                let tmp%46#0: bytes = (txna ApplicationArgs 4)
                let tmp%47#0: bytes = (txna ApplicationArgs 5)
                let tmp%48#0: bytes = (txna ApplicationArgs 6)
                let tmp%49#0: bytes = (txna ApplicationArgs 7)
                let tmp%50#0: bytes = (txna ApplicationArgs 8)
                let tmp%51#0: bytes = (txna ApplicationArgs 9)
                let tmp%52#0: bytes = (txna ApplicationArgs 10)
                let tmp%53#0: bytes = (txna ApplicationArgs 11)
                let tmp%54#0: bytes = (txna ApplicationArgs 12)
                let tmp%55#0: bytes = (txna ApplicationArgs 13)
                let tmp%56#0: bytes = (txna ApplicationArgs 14)
                let tmp%57#0: bytes = (txna ApplicationArgs 15)
                let tmp%58#0: bytes = ((extract 0 1) tmp%57#0)
                let tmp%59#0: bytes = (txna ApplicationArgs 15)
                let tmp%60#0: bytes = ((extract 1 1) tmp%59#0)
                let tmp%61#0: bytes = (txna ApplicationArgs 15)
                let tmp%62#0: bytes = ((extract 2 1) tmp%61#0)
                let tmp%63#0: bytes = (txna ApplicationArgs 15)
                let tmp%64#0: bytes = ((extract 3 1) tmp%63#0)
                let tmp%65#0: bytes = (txna ApplicationArgs 15)
                let tmp%66#0: bytes = ((extract 4 4) tmp%65#0)
                let tmp%67#0: bytes = (txna ApplicationArgs 15)
                let tmp%68#0: bytes = ((extract 8 1) tmp%67#0)
                let tmp%69#0: bytes = test_cases.typed_abi_call.logger.Logger.return_args_after_14th(tmp%43#0, tmp%44#0, tmp%45#0, tmp%46#0, tmp%47#0, tmp%48#0, tmp%49#0, tmp%50#0, tmp%51#0, tmp%52#0, tmp%53#0, tmp%54#0, tmp%55#0, tmp%56#0, tmp%58#0, tmp%60#0, tmp%62#0, tmp%64#0, tmp%66#0, tmp%68#0)
                let tmp%70#0: bytes = (concat 0x151f7c75 tmp%69#0)
                (log tmp%70#0)
                return 1u
            block@12: // bare_routing_L8
                let tmp%71#0: uint64 = (txn OnCompletion)
                let not%tmp%71#0: bool = (! tmp%71#0)
                (assert not%tmp%71#0) // reject transaction
                let tmp%72#0: bool = (txn ApplicationID)
                let tmp%73#0: bool = (! tmp%72#0)
                (assert tmp%73#0) // is creating
                return 1u
        
        subroutine test_cases.typed_abi_call.logger.Logger.echo(value: bytes) -> bytes:
            block@0: // L9
                let expr_value_trimmed%1#0: bytes = ((extract 2 0) value#0)
                let concatenated%0#0: bytes = (concat "echo: " expr_value_trimmed%1#0)
                let len_%0#0: uint64 = (len concatenated%0#0)
                let len_bytes%0#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 0) len_bytes%0#0)
                let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                return concat_result%0#0
        
        subroutine test_cases.typed_abi_call.logger.Logger.log_uint64(value: bytes) -> void:
            block@0: // L13
                (log value#0)
                return 
        
        subroutine test_cases.typed_abi_call.logger.Logger.log_uint512(value: bytes) -> void:
            block@0: // L17
                (log value#0)
                return 
        
        subroutine test_cases.typed_abi_call.logger.Logger.log_string(value: bytes) -> void:
            block@0: // L21
                let tmp%0#0: bytes = ((extract 2 0) value#0)
                (log tmp%0#0)
                return 
        
        subroutine test_cases.typed_abi_call.logger.Logger.log_bool(value: bytes) -> void:
            block@0: // L25
                let tmp%0#0: uint64 = (getbit value#0 0u)
                goto tmp%0#0 ? block@1 : block@2
            block@1: // ternary_true_L27
                let ternary_result%0#0: bytes = "True"
                goto block@3
            block@2: // ternary_false_L27
                let ternary_result%0#1: bytes = "False"
                goto block@3
            block@3: // ternary_merge_L27
                let ternary_result%0#2: bytes = Ï†(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2)
                (log ternary_result%0#2)
                return 
        
        subroutine test_cases.typed_abi_call.logger.Logger.log_bytes(value: bytes) -> void:
            block@0: // L29
                let tmp%0#0: bytes = ((extract 2 0) value#0)
                (log tmp%0#0)
                return 
        
        subroutine test_cases.typed_abi_call.logger.Logger.log_asset_account_app(asset: uint64, account: bytes, app: uint64) -> void:
            block@0: // L33
                let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
                (assert check%0#0) // asset exists
                let tmp%1#0: bytes = (concat value%0#0 account#0)
                let (value%1#0: bytes, check%1#0: bool) = ((app_params_get AppAddress) app#0)
                (assert check%1#0) // application exists
                let tmp%3#0: bytes = (concat tmp%1#0 value%1#0)
                (log tmp%3#0)
                return 
        
        subroutine test_cases.typed_abi_call.logger.Logger.return_args_after_14th(_a1: bytes, _a2: bytes, _a3: bytes, _a4: bytes, _a5: bytes, _a6: bytes, _a7: bytes, _a8: bytes, _a9: bytes, _a10: bytes, _a11: bytes, _a12: bytes, _a13: bytes, _a14: bytes, a15: bytes, a16: bytes, a17: bytes, a18: bytes, a19: bytes, a20: bytes) -> bytes:
            block@0: // L37
                let encoded_tuple_buffer%0#2: bytes = (concat a15#0 a16#0)
                let encoded_tuple_buffer%0#3: bytes = (concat encoded_tuple_buffer%0#2 a17#0)
                let encoded_tuple_buffer%0#4: bytes = (concat encoded_tuple_buffer%0#3 a18#0)
                let encoded_tuple_buffer%0#5: bytes = (concat encoded_tuple_buffer%0#4 a19#0)
                let last_arg#0: bytes = (concat encoded_tuple_buffer%0#5 a20#0)
                let tmp%0#0: bytes = (txna ApplicationArgs 15)
                let tmp%1#0: bool = (== tmp%0#0 last_arg#0)
                (assert tmp%1#0)
                let length%0#0: uint64 = (len last_arg#0)
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let tmp%2#0: bytes = (concat value_as_uint16%0#0 last_arg#0)
                return tmp%2#0
    
    program clear-state:
        subroutine test_cases.typed_abi_call.logger.Logger.clear_state_program() -> bool:
            block@0: // L8
                return 1u