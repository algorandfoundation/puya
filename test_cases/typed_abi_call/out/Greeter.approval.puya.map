{
  "version": 3,
  "sources": [
    "../typed_c2c.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA6VK;;AAAA;AAAA;AAAA;;AAAA;AA7VL;;;AAAA;AAAA;;AA6VK;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AA5UL;;;AAAA;AAAA;;AA4UK;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAlUL;;;AAAA;AAAA;;AAkUK;;;AAAA;;AA9CA;;AAAA;AAAA;AAAA;;AAAA;AApRL;;;AAAA;AAAA;;AAoRK;;;AAAA;;AAlDA;;AAAA;AAAA;AAAA;;AAAA;AAlOL;;;AAAA;AAAA;;AAkOK;;;AAAA;;AA3DA;;AAAA;AAAA;AAAA;;AAAA;AAvKL;;;AAAA;AAAA;;AAuKK;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AA5JL;;;AAAA;AAAA;;AA4JK;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAjJL;;;AAAA;AAAA;;AAiJK;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AApIL;;;AAAA;AAAA;;AAoIK;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAzHL;;;AAAA;AAAA;;AAyHK;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAhHL;;;AAAA;AAAA;;AAgHK;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAlGL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAkGK;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AApFL;;;AAAA;AAAA;;AAoFK;;;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AAxDL;;;AAAA;AAAA;;AAwDK;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAvCL;;;AAAA;AAAA;;AAuCK;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAxBL;;;AAAA;AAAA;;AAwBK;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAVL;;;AAAA;AAAA;;AAUK;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AACK;;;AAAA;;AADL;;AAAA;;;;;;;;;AACA;;;AAEQ;AAEI;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AACA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;;;AAHJ;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;AAOR;;;AAGuB;;;;;AAAA;;;AAA2B;;;;;;;;;;;AAA3B;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;;;;;AAAA;;;AAAiC;;;;;;;;;;;AAAjC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;;;;;AAAA;;;AAAmC;;;;;;;;;;;AAAnC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;;;;;AAAA;;;AAA2C;;;;;;;;;;;AAA3C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;;;;;AAAA;;;AAAiD;;;;;;;;;;;AAAjD;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;;AAER;;;AAEQ;;;;;AAAA;;;AAAiD;;;;;;;;;;;;;;;;;;;;AAAjD;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;;;;;;;;;;;;;;;;;;;;;;;AAA5C;AAAP;AAEA;;;;;AAAA;;;AAAoC;;;;;;;;;;;;;;;;;;;;;;AAApC;;;AAAA;;;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;;;;;;;;;;;;;;;;;;;;;;;;;AAA5C;AAAP;AAES;;;;;AAAA;;;AAAiD;;;;;;;;;;;AAAjD;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AACF;AAAa;;AAAb;AAAP;AACO;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;AAA5C;AAAP;AAEa;;;;;AAAA;;;AAAoC;;;;;;;;;;;;;AAApC;;;AAAA;;;AAAA;;;AACN;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA6C;;;;;;;;;;;;;;;;;AAA7C;AAAP;;AAER;;;AAEc;;;;;AAAA;;;;AAAiC;;;;;;;;;;;;;;;;AAAjC;;;AAAA;;;AAAA;;;AACiB;;;;;;;;;;;;AAAhB;AAAP;AAEM;;;;;AAAA;;;;;;;;AAAiC;;;;AAAjC;;;AAAA;;;AAAA;;;AACyB;AAAR;AAAhB;AAAP;AAEM;;;;;AAAA;;;;;;;;AAAkC;;;;AAAlC;;;AAAA;;;AAAA;;;AACkB;;AAAjB;AAAP;AAEM;;;;;AAAA;;;;;;;;AAAgC;;;;;;;AAAhC;;;AAAA;;;AAAA;;;AACiB;;;AAAhB;AAAP;AAEM;;;;;AAAA;;;;;;;;AAA+B;;;;;AAA/B;;;AAAA;;;AAAA;;;AACiB;;;;;;AAAhB;AAAP;;AAER;;;AAEsB;;;;;AAAA;;;;;;;;AAEV;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;AAhBU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAwBP;;;AAAiB;;AAAjB;AAAP;;AAER;;;AAEc;;;;;AAAA;;;;AAAgD;;;;;;;;;;;;AAAhD;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;AAEM;;;;;AAAA;;;;AAA4C;;;;;;;;;;;;AAA5C;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;AAEM;;;;;AAAA;;;;AAA+B;;;;;;;;;;;;AAA/B;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;AAEM;;;;;AAAA;;;;AAAiC;;;;;;;;;;;;AAAjC;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;;AAER;;;AAEc;AAGF;;;;;;;;;;;;;;;;AAHE;;;;;;;;AAEF;;;;;AACA;;;;;AACA;;;;;AAJE;;;AAAA;;;AAAA;;;AASC;;AAAA;;AAAA;AAAa;;AAAb;AAAwD;;AAAA;;AAAA;AAAxD;AADH;AADJ;;AAKR;;;AAEc;AAEF;;;;;;AAFE;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;AAKiB;;AAAhB;AAAP;;AAER;;;AAEwB;;;;;AAAA;;;;AAAyC;;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;AAAW;;;;;;;;;AAAX;AAAP;AAEgB;;;;;AAAA;;;;AAAyC;;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;;AAAA;AAAP;AAEgB;;;;;AAAA;;;;AAAyC;;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;AAAP;;AAER;;;AAEwB;;;;;AAAA;;;;AAAwC;;;;AAAxC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;AAAW;;;;;;;;;AAAX;AAAP;AAEgB;;;;;AAAA;;;;AAAwC;;;;AAAxC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;;AAAA;AAAP;AAEgB;;;;;AAAA;;;;AACc;;;;AADd;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAGT;AAAP;;AAER;;;AAEwB;;;;;AAAA;;;;AAAyC;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACT;AAAW;AAAX;AAAP;AAEgB;AAAyC;AAAA;;;;;AAAzC;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;AAEgB;;;;;AAAA;;;;AAAyC;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACT;AAAP;;AAER;;;AAEwB;;;;;AAAA;;;;AAA0C;;;AAA1C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACT;AAAW;;AAAX;AAAP;AAEgB;;;;;AAAA;;;;AAA0C;;;AAA1C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;AAEgB;;;;;AAAA;;;;AAA0C;;;AAA1C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACT;AAAP;;AAER;;;AAGuB;;;;;AAAA;;;;AAIX;;;;AACA;;;;AACA;;;AACA;;;AAPW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAUD;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;AACP;;AAAA;;;AAAA;AAAY;;AAAZ;AAAP;AACO;;AAAA;;;AAAA;AAAY;;AAAZ;AAAP;AACO;;;;AAAA;AAAA;AAAY;AAAZ;AAAP;AACO;;AAAa;;AAAb;AAAP;AAGe;AAMX;AAAA;;;;;AANW;;;;AAIX;;;;AACA;;;;;;AAEA;;;AAPW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAUR;;AAAA;AAAP;AAGe;;;;;AAAA;;;;AAIX;;;;AACA;;;;AACA;;;AACA;;;AAPW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAUR;;AAAA;AAAP;AAGqB;;;;;AAAA;;;;AAEjB;;;;AACA;;;;AACA;;;AACA;;;AALiB;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;;AAAA;;;AAQd;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAP;AACO;;AAAA;AAAP;AACO;AAAP;;AAER;;;AAGsB;;;;;AAAA;;;;AAEV;;;;AACA;;;;AACA;;;AACA;;;AALU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;;AAAA;;;AASP;;AAAK;;AAAL;AAAP;AACO;;AAAK;;AAAL;AAAP;AACO;;AAAK;AAAL;AAAP;AACO;AAAM;;AAAN;AAAP;AAGgB;AAIZ;AAAA;;;;;AAJY;;;;AAEZ;;;;AACA;;;;;;AAEA;;;AALY;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;;AAAA;;;AAQT;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAGgB;;;;;AAAA;;;;AAEZ;;;;AACA;;;;AACA;;;AACA;;;AALY;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;;AAAA;;;AAQT;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAGqB;;;;;AAAA;;;;AAEjB;;;;AACA;;;;AACA;;;AACA;;;AALiB;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;;AAAA;;;AAQd;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;;AAER;;;AAGsB;;;;;AAAA;;;;AAEV;;;;AAFU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAMP;;AAAM;;AAAN;AAAP;AACO;;AAAM;;AAAN;AAAP;AACO;;AAAS;AAAT;AAAP;AACO;AAAS;;AAAT;AAAP;AACgB;;AAAT;AAAP;AAGc;;;;;AAAA;;;;AAEV;;;;AAFU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAMP;;AAAM;;AAAN;AAAP;AACO;;AAAM;;AAAN;AAAP;AACO;;AAAS;AAAT;AAAP;AACO;AAAS;;AAAT;AAAP;AACgB;;AAAT;AAAP;AAGc;;;;;AAAA;;;;AAEV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAWP;;AAAM;;;;;;;;;;;AAAN;AAAP;AACO;;AAAM;;;;;;;;;;;;;AAAN;AAAP;AACO;;AAAS;;AAAT;AAAP;AACO;AAAS;;;;;;;;;;AAAT;AAAP;AACgB;;;;;;;;;;AAAT;AAAP;;AAER;;;AAEuB;;;;;AAAA;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACE;;AAAV;AAAP;AACoB;;;;;AAAA;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;AAAf;AAAP;AAEA;;;;;AAAA;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;AAA5C;AAAP;;AAER;;;AAEuB;;;;;AAAA;;;;AAEX;;;;AACA;;;;AAHW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAMf;AACe;;;;;AAAA;;;;AAEX;;;;;;;;;;;;;;;;;;;;;AACA;;;;AAHW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAMR;AAAP;;AAER;;;AAGsB;;;;;AAAA;;;;;;;;AADR;;;;AACQ;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAKP;AAND;;AAMC;AAAP;AACO;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAPD;;AAOC;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 6 1 2"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x9bf81913 0x0000000000000001 0x16e03919 0x00027331 0x00026231 0x0000000000000001000a00056c6f672031 0xb4b4334e \"echo: s1\" 0x0000000000000003 0x4a444c77 0x000173 0x2659e818 0x000162 0xa9fb6cf1 0xd8cc363b 0x03 0xab271ce4 0xb862ee19 0x000b6563686f3a207475706c65 0x0000000000000002 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003 0x0f101112deadbeef14 0x6563686f3a206231 0x00040010000400080002733100027332000000000000000100000000000000020012000133 0x00086563686f3a207332 0x6563686f3a2033 0x000000000000002a 0xddd07185"
    },
    "367": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "369": {
      "op": "bz main_bare_routing@23",
      "stack_out": []
    },
    "372": {
      "op": "pushbytess 0x07916bea 0x1859b0ba 0x4eb11b0d 0x0d176a4a 0xb54730c8 0x7859eaf7 0x24478a3c 0xe44b2eaf 0x7a60c035 0x6a559cb3 0x1be60712 0x19cb78a4 0xf0ef6873 0x3d2bfe37 0x54e98f56 0xf55b7567 0x8598bb43 0xbb691362 // method \"test_is_a_b(byte[],byte[],application)void\", method \"test_method_selector_kinds(application)void\", method \"test_method_overload(application)void\", method \"test_arg_conversion(application)void\", method \"test_15plus_args(application)void\", method \"test_void(application)void\", method \"test_ref_types(application,asset)void\", method \"test_account_to_address(application)void\", method \"test_native_string(application)void\", method \"test_native_bytes(application)void\", method \"test_native_uint64(application)void\", method \"test_native_biguint(application)void\", method \"test_native_tuple(application)void\", method \"test_native_tuple_method_ref(application)void\", method \"test_nested_tuples(application)void\", method \"test_no_args(application)void\", method \"test_named_tuples(application)void\", method \"test_arc4_struct(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_arc4_struct(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_named_tuples(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_nested_tuples(application)void)",
        "Method(test_no_args(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)"
      ],
      "stack_out": [
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_nested_tuples(application)void)",
        "Method(test_no_args(application)void)",
        "Method(test_named_tuples(application)void)",
        "Method(test_arc4_struct(application)void)"
      ]
    },
    "464": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_arc4_struct(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_named_tuples(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_nested_tuples(application)void)",
        "Method(test_no_args(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_nested_tuples(application)void)",
        "Method(test_no_args(application)void)",
        "Method(test_named_tuples(application)void)",
        "Method(test_arc4_struct(application)void)",
        "tmp%2#0"
      ]
    },
    "467": {
      "op": "match main_test_is_a_b_route@3 main_test_method_selector_kinds_route@4 main_test_method_overload_route@5 main_test_arg_conversion_route@6 main_test_15plus_args_route@7 main_test_void_route@8 main_test_ref_types_route@9 main_test_account_to_address_route@10 main_test_native_string_route@11 main_test_native_bytes_route@12 main_test_native_uint64_route@13 main_test_native_biguint_route@14 main_test_native_tuple_route@15 main_test_native_tuple_method_ref_route@16 main_test_nested_tuples_route@17 main_test_no_args_route@18 main_test_named_tuples_route@19 main_test_arc4_struct_route@20",
      "stack_out": []
    },
    "505": {
      "block": "main_after_if_else@27",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "506": {
      "op": "return",
      "stack_out": []
    },
    "507": {
      "block": "main_test_arc4_struct_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "509": {
      "op": "!",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "510": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "511": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "513": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "514": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%18#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%18#0"
      ]
    },
    "517": {
      "op": "btoi",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "518": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "520": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct",
      "op": "callsub test_arc4_struct",
      "stack_out": []
    },
    "523": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "524": {
      "op": "return",
      "stack_out": []
    },
    "525": {
      "block": "main_test_named_tuples_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "527": {
      "op": "!",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "528": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "529": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "531": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "532": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%17#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%17#0"
      ]
    },
    "535": {
      "op": "btoi",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "536": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "538": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples",
      "op": "callsub test_named_tuples",
      "stack_out": []
    },
    "541": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "542": {
      "op": "return",
      "stack_out": []
    },
    "543": {
      "block": "main_test_no_args_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "545": {
      "op": "!",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "546": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "547": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "549": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "550": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%16#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%16#0"
      ]
    },
    "553": {
      "op": "btoi",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "554": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "556": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args",
      "op": "callsub test_no_args",
      "stack_out": []
    },
    "559": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "560": {
      "op": "return",
      "stack_out": []
    },
    "561": {
      "block": "main_test_nested_tuples_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "563": {
      "op": "!",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "564": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "565": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "567": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "568": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%15#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%15#0"
      ]
    },
    "571": {
      "op": "btoi",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "572": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "574": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples",
      "op": "callsub test_nested_tuples",
      "stack_out": []
    },
    "577": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "578": {
      "op": "return",
      "stack_out": []
    },
    "579": {
      "block": "main_test_native_tuple_method_ref_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "581": {
      "op": "!",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "582": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "583": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "585": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "586": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%14#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%14#0"
      ]
    },
    "589": {
      "op": "btoi",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "590": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "592": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref",
      "op": "callsub test_native_tuple_method_ref",
      "stack_out": []
    },
    "595": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "596": {
      "op": "return",
      "stack_out": []
    },
    "597": {
      "block": "main_test_native_tuple_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "599": {
      "op": "!",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "600": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "601": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "603": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "604": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%13#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%13#0"
      ]
    },
    "607": {
      "op": "btoi",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "608": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "610": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple",
      "op": "callsub test_native_tuple",
      "stack_out": []
    },
    "613": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "614": {
      "op": "return",
      "stack_out": []
    },
    "615": {
      "block": "main_test_native_biguint_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "617": {
      "op": "!",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "618": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "619": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "621": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "622": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%12#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%12#0"
      ]
    },
    "625": {
      "op": "btoi",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "626": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "628": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint",
      "op": "callsub test_native_biguint",
      "stack_out": []
    },
    "631": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "632": {
      "op": "return",
      "stack_out": []
    },
    "633": {
      "block": "main_test_native_uint64_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "635": {
      "op": "!",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "636": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "637": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "639": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "640": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%11#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%11#0"
      ]
    },
    "643": {
      "op": "btoi",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "644": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "646": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64",
      "op": "callsub test_native_uint64",
      "stack_out": []
    },
    "649": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "650": {
      "op": "return",
      "stack_out": []
    },
    "651": {
      "block": "main_test_native_bytes_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "653": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "654": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "655": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "657": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "658": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%10#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%10#0"
      ]
    },
    "661": {
      "op": "btoi",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "662": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "664": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes",
      "op": "callsub test_native_bytes",
      "stack_out": []
    },
    "667": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "668": {
      "op": "return",
      "stack_out": []
    },
    "669": {
      "block": "main_test_native_string_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "671": {
      "op": "!",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "672": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "673": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "675": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "676": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%9#0"
      ]
    },
    "679": {
      "op": "btoi",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "680": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "682": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string",
      "op": "callsub test_native_string",
      "stack_out": []
    },
    "685": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "686": {
      "op": "return",
      "stack_out": []
    },
    "687": {
      "block": "main_test_account_to_address_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "689": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "690": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "691": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "693": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "694": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%8#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%8#0"
      ]
    },
    "697": {
      "op": "btoi",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "698": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "700": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address",
      "op": "callsub test_account_to_address",
      "stack_out": []
    },
    "703": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "704": {
      "op": "return",
      "stack_out": []
    },
    "705": {
      "block": "main_test_ref_types_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "707": {
      "op": "!",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "708": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "709": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "711": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "712": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%6#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%6#0"
      ]
    },
    "715": {
      "op": "btoi",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "716": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "718": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint8)%7#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "reinterpret_Encoded(uint8)%7#0"
      ]
    },
    "721": {
      "op": "btoi",
      "defined_out": [
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0"
      ]
    },
    "722": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%46#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0"
      ]
    },
    "724": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types",
      "op": "callsub test_ref_types",
      "stack_out": []
    },
    "727": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "728": {
      "op": "return",
      "stack_out": []
    },
    "729": {
      "block": "main_test_void_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "731": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "732": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "733": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "735": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "736": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%5#0"
      ]
    },
    "739": {
      "op": "btoi",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "740": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "742": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void",
      "op": "callsub test_void",
      "stack_out": []
    },
    "745": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "746": {
      "op": "return",
      "stack_out": []
    },
    "747": {
      "block": "main_test_15plus_args_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "749": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "750": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "751": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "753": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "754": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%4#0"
      ]
    },
    "757": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "758": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "760": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args",
      "op": "callsub test_15plus_args",
      "stack_out": []
    },
    "763": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "764": {
      "op": "return",
      "stack_out": []
    },
    "765": {
      "block": "main_test_arg_conversion_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "767": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "768": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "769": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "771": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "772": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%3#0"
      ]
    },
    "775": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "776": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "778": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion",
      "op": "callsub test_arg_conversion",
      "stack_out": []
    },
    "781": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "782": {
      "op": "return",
      "stack_out": []
    },
    "783": {
      "block": "main_test_method_overload_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "785": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "786": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "787": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "789": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "790": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%2#0"
      ]
    },
    "793": {
      "op": "btoi",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "794": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "796": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload",
      "op": "callsub test_method_overload",
      "stack_out": []
    },
    "799": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "800": {
      "op": "return",
      "stack_out": []
    },
    "801": {
      "block": "main_test_method_selector_kinds_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "803": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "804": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "805": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "807": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "808": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%1#0"
      ]
    },
    "811": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "812": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "814": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds",
      "op": "callsub test_method_selector_kinds",
      "stack_out": []
    },
    "817": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "818": {
      "op": "return",
      "stack_out": []
    },
    "819": {
      "block": "main_test_is_a_b_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "821": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "822": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "823": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "825": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "826": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "829": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "832": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "835": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "838": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint8)%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_Encoded(uint8)%0#0"
      ]
    },
    "841": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "842": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "844": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b",
      "op": "callsub test_is_a_b",
      "stack_out": []
    },
    "847": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "848": {
      "op": "return",
      "stack_out": []
    },
    "849": {
      "block": "main_bare_routing@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "851": {
      "op": "bnz main_after_if_else@27",
      "stack_out": []
    },
    "854": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "856": {
      "op": "!",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "857": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "858": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "859": {
      "op": "return",
      "stack_out": []
    },
    "860": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_is_a_b",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "863": {
      "op": "itxn_begin"
    },
    "864": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "866": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "867": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "868": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "871": {
      "op": "frame_dig -3",
      "stack_out": [
        "length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "873": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "874": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "b#0 (copy)"
      ]
    },
    "876": {
      "op": "len",
      "defined_out": [
        "encoded_value%0#0",
        "length%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "877": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "878": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%0#0",
        "length_uint16%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "881": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_value%0#0",
        "length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "883": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "884": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "app#0 (copy)"
      ]
    },
    "886": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "888": {
      "op": "pushbytes 0xc77212bc // method \"is_a_b(byte[],byte[])void\"",
      "defined_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "Method(is_a_b(byte[],byte[])void)"
      ]
    },
    "894": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "896": {
      "op": "swap",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0"
      ]
    },
    "897": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "899": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "901": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "902": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "904": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "905": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "907": {
      "op": "itxn_submit"
    },
    "908": {
      "retsub": true,
      "op": "retsub"
    },
    "909": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_method_selector_kinds",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "912": {
      "op": "itxn_begin"
    },
    "913": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "915": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "917": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "918": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "920": {
      "op": "pushbytes 0x00057465737431",
      "defined_out": [
        "0x00057465737431"
      ],
      "stack_out": [
        "0x00057465737431"
      ]
    },
    "929": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "931": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "932": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "934": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "935": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "937": {
      "op": "itxn_submit"
    },
    "938": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "940": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "941": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "result#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result#0"
      ]
    },
    "944": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "awst_tmp%0#0"
      ]
    },
    "945": {
      "op": "extract 0 4",
      "defined_out": [
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%2#0"
      ]
    },
    "948": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "949": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%3#0"
      ]
    },
    "950": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result#0"
      ]
    },
    "951": {
      "op": "pushbytes 0x000b6563686f3a207465737431",
      "defined_out": [
        "0x000b6563686f3a207465737431",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737431"
      ]
    },
    "966": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "967": {
      "op": "assert",
      "stack_out": []
    },
    "968": {
      "op": "itxn_begin"
    },
    "969": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "971": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "973": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "974": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "976": {
      "op": "pushbytes 0x00057465737432",
      "defined_out": [
        "0x00057465737432"
      ],
      "stack_out": [
        "0x00057465737432"
      ]
    },
    "985": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "987": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "988": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "990": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "991": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "993": {
      "op": "itxn_submit"
    },
    "994": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "996": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "997": {
      "op": "extract 4 0",
      "stack_out": [
        "awst_tmp%1#0",
        "result#0"
      ]
    },
    "1000": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "awst_tmp%1#0"
      ]
    },
    "1001": {
      "op": "extract 0 4",
      "defined_out": [
        "result#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%6#0"
      ]
    },
    "1004": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "1005": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%7#0"
      ]
    },
    "1006": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result#0"
      ]
    },
    "1007": {
      "op": "pushbytes 0x000b6563686f3a207465737432",
      "defined_out": [
        "0x000b6563686f3a207465737432",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737432"
      ]
    },
    "1022": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1023": {
      "op": "assert",
      "stack_out": []
    },
    "1024": {
      "op": "itxn_begin"
    },
    "1025": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1027": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1029": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1030": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1032": {
      "op": "pushbytes 0x00057465737433",
      "defined_out": [
        "0x00057465737433"
      ],
      "stack_out": [
        "0x00057465737433"
      ]
    },
    "1041": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1043": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1044": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1046": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1047": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1049": {
      "op": "itxn_submit"
    },
    "1050": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "1052": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "1053": {
      "op": "extract 4 0",
      "stack_out": [
        "awst_tmp%2#0",
        "result#0"
      ]
    },
    "1056": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "awst_tmp%2#0"
      ]
    },
    "1057": {
      "op": "extract 0 4",
      "defined_out": [
        "result#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%10#0"
      ]
    },
    "1060": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result#0",
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "1061": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%11#0"
      ]
    },
    "1062": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result#0"
      ]
    },
    "1063": {
      "op": "pushbytes 0x000b6563686f3a207465737433",
      "defined_out": [
        "0x000b6563686f3a207465737433",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737433"
      ]
    },
    "1078": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1079": {
      "op": "assert",
      "stack_out": []
    },
    "1080": {
      "op": "itxn_begin"
    },
    "1081": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1083": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1085": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1086": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1088": {
      "op": "pushbytes 0x00057465737434",
      "defined_out": [
        "0x00057465737434"
      ],
      "stack_out": [
        "0x00057465737434"
      ]
    },
    "1097": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1099": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1100": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1102": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1103": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1105": {
      "op": "itxn_submit"
    },
    "1106": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%3#0"
      ]
    },
    "1108": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "1109": {
      "op": "extract 4 0",
      "stack_out": [
        "awst_tmp%3#0",
        "result#0"
      ]
    },
    "1112": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "awst_tmp%3#0"
      ]
    },
    "1113": {
      "op": "extract 0 4",
      "defined_out": [
        "result#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%14#0"
      ]
    },
    "1116": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result#0",
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "1117": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%15#0"
      ]
    },
    "1118": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result#0"
      ]
    },
    "1119": {
      "op": "pushbytes 0x000b6563686f3a207465737434",
      "defined_out": [
        "0x000b6563686f3a207465737434",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737434"
      ]
    },
    "1134": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1135": {
      "op": "assert",
      "stack_out": []
    },
    "1136": {
      "op": "itxn_begin"
    },
    "1137": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1139": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1141": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1142": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1144": {
      "op": "pushbytes 0x00057465737435",
      "defined_out": [
        "0x00057465737435"
      ],
      "stack_out": [
        "0x00057465737435"
      ]
    },
    "1153": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1155": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1156": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1158": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1159": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1161": {
      "op": "itxn_submit"
    },
    "1162": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%4#0"
      ]
    },
    "1164": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ]
    },
    "1165": {
      "op": "extract 4 0",
      "stack_out": [
        "awst_tmp%4#0",
        "result#0"
      ]
    },
    "1168": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "awst_tmp%4#0"
      ]
    },
    "1169": {
      "op": "extract 0 4",
      "defined_out": [
        "result#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%18#0"
      ]
    },
    "1172": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result#0",
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "1173": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%19#0"
      ]
    },
    "1174": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result#0"
      ]
    },
    "1175": {
      "op": "pushbytes 0x000b6563686f3a207465737435",
      "defined_out": [
        "0x000b6563686f3a207465737435",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737435"
      ]
    },
    "1190": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1191": {
      "op": "assert",
      "stack_out": []
    },
    "1192": {
      "retsub": true,
      "op": "retsub"
    },
    "1193": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_method_overload",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1196": {
      "op": "itxn_begin"
    },
    "1197": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1199": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1201": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1202": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1204": {
      "op": "pushbytes 0x000e7479706564202b2069676e6f7265",
      "defined_out": [
        "0x000e7479706564202b2069676e6f7265"
      ],
      "stack_out": [
        "0x000e7479706564202b2069676e6f7265"
      ]
    },
    "1222": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1224": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1225": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1227": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1228": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1230": {
      "op": "itxn_submit"
    },
    "1231": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1233": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1236": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "1237": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1238": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "1239": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "1241": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "1242": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%3#0"
      ]
    },
    "1245": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "awst_tmp%1#0"
      ]
    },
    "1246": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1249": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "0x151f7c75"
      ]
    },
    "1250": {
      "op": "==",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1251": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1252": {
      "op": "pushbytes 0x00146563686f3a207479706564202b2069676e6f7265",
      "defined_out": [
        "0x00146563686f3a207479706564202b2069676e6f7265",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x00146563686f3a207479706564202b2069676e6f7265"
      ]
    },
    "1276": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1277": {
      "op": "assert",
      "stack_out": []
    },
    "1278": {
      "op": "itxn_begin"
    },
    "1279": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1281": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1283": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1284": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1286": {
      "op": "pushbytes 0x0010756e7479706564202b2069676e6f7265",
      "defined_out": [
        "0x0010756e7479706564202b2069676e6f7265"
      ],
      "stack_out": [
        "0x0010756e7479706564202b2069676e6f7265"
      ]
    },
    "1306": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1308": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1309": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1311": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1312": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1314": {
      "op": "itxn_submit"
    },
    "1315": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "1317": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "1318": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%7#0"
      ]
    },
    "1321": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "awst_tmp%2#0"
      ]
    },
    "1322": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1325": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "1326": {
      "op": "==",
      "defined_out": [
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "1327": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1328": {
      "op": "pushbytes 0x00166563686f3a20756e7479706564202b2069676e6f7265",
      "defined_out": [
        "0x00166563686f3a20756e7479706564202b2069676e6f7265",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x00166563686f3a20756e7479706564202b2069676e6f7265"
      ]
    },
    "1354": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1355": {
      "op": "assert",
      "stack_out": []
    },
    "1356": {
      "op": "itxn_begin"
    },
    "1357": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1359": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1361": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1362": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1364": {
      "op": "pushbytes 0x00057475706c65",
      "defined_out": [
        "0x00057475706c65"
      ],
      "stack_out": [
        "0x00057475706c65"
      ]
    },
    "1373": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1375": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1376": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1378": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1379": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1381": {
      "op": "itxn_submit"
    },
    "1382": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%3#0"
      ]
    },
    "1384": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "1385": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "result.0#0"
      ]
    },
    "1388": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "awst_tmp%3#0"
      ]
    },
    "1389": {
      "op": "extract 0 4",
      "defined_out": [
        "result.0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result.0#0",
        "tmp%12#0"
      ]
    },
    "1392": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result.0#0",
        "tmp%12#0",
        "0x151f7c75"
      ]
    },
    "1393": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result.0#0",
        "tmp%13#0"
      ]
    },
    "1394": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result.0#0"
      ]
    },
    "1395": {
      "op": "itxn LastLog",
      "defined_out": [
        "result.0#0",
        "result.1.LastLog#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1.LastLog#0"
      ]
    },
    "1397": {
      "op": "swap",
      "stack_out": [
        "result.1.LastLog#0",
        "result.0#0"
      ]
    },
    "1398": {
      "op": "bytec 20 // 0x000b6563686f3a207475706c65",
      "defined_out": [
        "0x000b6563686f3a207475706c65",
        "result.0#0",
        "result.1.LastLog#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "result.0#0",
        "0x000b6563686f3a207475706c65"
      ]
    },
    "1400": {
      "op": "==",
      "defined_out": [
        "result.1.LastLog#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%14#0"
      ]
    },
    "1401": {
      "op": "assert",
      "stack_out": [
        "result.1.LastLog#0"
      ]
    },
    "1402": {
      "op": "dup",
      "defined_out": [
        "result.1.LastLog#0",
        "result.1.LastLog#0 (copy)"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "result.1.LastLog#0 (copy)"
      ]
    },
    "1403": {
      "op": "extract 4 0",
      "defined_out": [
        "result.1.LastLog#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%15#0"
      ]
    },
    "1406": {
      "op": "swap",
      "stack_out": [
        "tmp%15#0",
        "result.1.LastLog#0"
      ]
    },
    "1407": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1410": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "0x151f7c75"
      ]
    },
    "1411": {
      "op": "==",
      "defined_out": [
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "1412": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1413": {
      "op": "bytec 20 // 0x000b6563686f3a207475706c65",
      "stack_out": [
        "tmp%15#0",
        "0x000b6563686f3a207475706c65"
      ]
    },
    "1415": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1416": {
      "op": "assert",
      "stack_out": []
    },
    "1417": {
      "op": "itxn_begin"
    },
    "1418": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1420": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1422": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1423": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1425": {
      "op": "pushbytes 0x0007756e7479706564",
      "defined_out": [
        "0x0007756e7479706564"
      ],
      "stack_out": [
        "0x0007756e7479706564"
      ]
    },
    "1436": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1438": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1439": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1441": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1442": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1444": {
      "op": "itxn_submit"
    },
    "1445": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0"
      ]
    },
    "1447": {
      "op": "dup",
      "defined_out": [
        "txn_result.LastLog#0",
        "txn_result.LastLog#0 (copy)"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "txn_result.LastLog#0 (copy)"
      ]
    },
    "1448": {
      "op": "extract 4 0",
      "defined_out": [
        "tmp%19#0",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%19#0"
      ]
    },
    "1451": {
      "op": "swap",
      "stack_out": [
        "tmp%19#0",
        "txn_result.LastLog#0"
      ]
    },
    "1452": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "1455": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0",
        "0x151f7c75"
      ]
    },
    "1456": {
      "op": "==",
      "defined_out": [
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "1457": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1458": {
      "op": "pushbytes 0x000d6563686f3a20756e7479706564",
      "defined_out": [
        "0x000d6563686f3a20756e7479706564",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0x000d6563686f3a20756e7479706564"
      ]
    },
    "1475": {
      "op": "==",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1476": {
      "op": "assert",
      "stack_out": []
    },
    "1477": {
      "retsub": true,
      "op": "retsub"
    },
    "1478": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_arg_conversion",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1481": {
      "op": "itxn_begin"
    },
    "1482": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1484": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1486": {
      "op": "bytec 8 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)"
      ],
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1488": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1490": {
      "op": "pushbytes 0x000a636f6e76657274656431",
      "defined_out": [
        "0x000a636f6e76657274656431"
      ],
      "stack_out": [
        "0x000a636f6e76657274656431"
      ]
    },
    "1504": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1506": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1507": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1509": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1510": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1512": {
      "op": "itxn_submit"
    },
    "1513": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1515": {
      "op": "pushbytes 0x636f6e76657274656431",
      "defined_out": [
        "0x636f6e76657274656431",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x636f6e76657274656431"
      ]
    },
    "1527": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1528": {
      "op": "assert",
      "stack_out": []
    },
    "1529": {
      "op": "itxn_begin"
    },
    "1530": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1532": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1534": {
      "op": "pushbytes 0x3c1058d9 // method \"log(uint64)void\"",
      "defined_out": [
        "Method(log(uint64)void)"
      ],
      "stack_out": [
        "Method(log(uint64)void)"
      ]
    },
    "1540": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1542": {
      "op": "bytec 21 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002"
      ],
      "stack_out": [
        "0x0000000000000002"
      ]
    },
    "1544": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1546": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1547": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1549": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1550": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1552": {
      "op": "itxn_submit"
    },
    "1553": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1555": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "2"
      ]
    },
    "1556": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%1#0"
      ]
    },
    "1557": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1558": {
      "op": "assert",
      "stack_out": []
    },
    "1559": {
      "op": "itxn_begin"
    },
    "1560": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1562": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1564": {
      "op": "pushbytes 0x6af45930 // method \"log(uint512)void\"",
      "defined_out": [
        "Method(log(uint512)void)"
      ],
      "stack_out": [
        "Method(log(uint512)void)"
      ]
    },
    "1570": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1572": {
      "op": "bytec 22 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"
      ]
    },
    "1574": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1576": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1577": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1579": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1580": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1582": {
      "op": "itxn_submit"
    },
    "1583": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1585": {
      "op": "bytec 22 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
      "stack_out": [
        "txn.LastLog#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"
      ]
    },
    "1587": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1588": {
      "op": "assert",
      "stack_out": []
    },
    "1589": {
      "op": "itxn_begin"
    },
    "1590": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1592": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1594": {
      "op": "pushbytes 0xb500e111 // method \"log(byte[])void\"",
      "defined_out": [
        "Method(log(byte[])void)"
      ],
      "stack_out": [
        "Method(log(byte[])void)"
      ]
    },
    "1600": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1602": {
      "op": "pushbytes 0x000134",
      "defined_out": [
        "0x000134"
      ],
      "stack_out": [
        "0x000134"
      ]
    },
    "1607": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1609": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1610": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1612": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1613": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1615": {
      "op": "itxn_submit"
    },
    "1616": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1618": {
      "op": "pushbytes 0x34",
      "defined_out": [
        "0x34",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x34"
      ]
    },
    "1621": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1622": {
      "op": "assert",
      "stack_out": []
    },
    "1623": {
      "op": "itxn_begin"
    },
    "1624": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1626": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1628": {
      "op": "pushbytes 0x6eed7ec3 // method \"log(bool)void\"",
      "defined_out": [
        "Method(log(bool)void)"
      ],
      "stack_out": [
        "Method(log(bool)void)"
      ]
    },
    "1634": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1636": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "1639": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1641": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1642": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1644": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1645": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1647": {
      "op": "itxn_submit"
    },
    "1648": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1650": {
      "op": "pushbytes 0x54727565",
      "defined_out": [
        "0x54727565",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x54727565"
      ]
    },
    "1656": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1657": {
      "op": "assert",
      "stack_out": []
    },
    "1658": {
      "retsub": true,
      "op": "retsub"
    },
    "1659": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_15plus_args",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1662": {
      "op": "itxn_begin"
    },
    "1663": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1665": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1667": {
      "op": "pushbytes 0xba0b4381 // method \"return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]\"",
      "defined_out": [
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])"
      ],
      "stack_out": [
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])"
      ]
    },
    "1673": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1675": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "1676": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1678": {
      "op": "bytec 21 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002"
      ],
      "stack_out": [
        "0x0000000000000002"
      ]
    },
    "1680": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1682": {
      "op": "bytec 10 // 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003"
      ],
      "stack_out": [
        "0x0000000000000003"
      ]
    },
    "1684": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1686": {
      "op": "pushbytes 0x0000000000000004",
      "defined_out": [
        "0x0000000000000004"
      ],
      "stack_out": [
        "0x0000000000000004"
      ]
    },
    "1696": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1698": {
      "op": "pushbytes 0x0000000000000005",
      "defined_out": [
        "0x0000000000000005"
      ],
      "stack_out": [
        "0x0000000000000005"
      ]
    },
    "1708": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1710": {
      "op": "pushbytes 0x0000000000000006",
      "defined_out": [
        "0x0000000000000006"
      ],
      "stack_out": [
        "0x0000000000000006"
      ]
    },
    "1720": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1722": {
      "op": "pushbytes 0x0000000000000007",
      "defined_out": [
        "0x0000000000000007"
      ],
      "stack_out": [
        "0x0000000000000007"
      ]
    },
    "1732": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1734": {
      "op": "pushbytes 0x0000000000000008",
      "defined_out": [
        "0x0000000000000008"
      ],
      "stack_out": [
        "0x0000000000000008"
      ]
    },
    "1744": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1746": {
      "op": "pushbytes 0x0000000000000009",
      "defined_out": [
        "0x0000000000000009"
      ],
      "stack_out": [
        "0x0000000000000009"
      ]
    },
    "1756": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1758": {
      "op": "pushbytes 0x000000000000000a",
      "defined_out": [
        "0x000000000000000a"
      ],
      "stack_out": [
        "0x000000000000000a"
      ]
    },
    "1768": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1770": {
      "op": "pushbytes 0x000000000000000b",
      "defined_out": [
        "0x000000000000000b"
      ],
      "stack_out": [
        "0x000000000000000b"
      ]
    },
    "1780": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1782": {
      "op": "pushbytes 0x000000000000000c",
      "defined_out": [
        "0x000000000000000c"
      ],
      "stack_out": [
        "0x000000000000000c"
      ]
    },
    "1792": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1794": {
      "op": "pushbytes 0x000000000000000d",
      "defined_out": [
        "0x000000000000000d"
      ],
      "stack_out": [
        "0x000000000000000d"
      ]
    },
    "1804": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1806": {
      "op": "pushbytes 0x000000000000000e",
      "defined_out": [
        "0x000000000000000e"
      ],
      "stack_out": [
        "0x000000000000000e"
      ]
    },
    "1816": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1818": {
      "op": "bytec 23 // 0x0f101112deadbeef14",
      "defined_out": [
        "0x0f101112deadbeef14"
      ],
      "stack_out": [
        "0x0f101112deadbeef14"
      ]
    },
    "1820": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1822": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1823": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1825": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1826": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1828": {
      "op": "itxn_submit"
    },
    "1829": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1831": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "1832": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1835": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "1836": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1837": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1838": {
      "op": "extract 6 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1841": {
      "op": "bytec 23 // 0x0f101112deadbeef14",
      "stack_out": [
        "tmp%3#0",
        "0x0f101112deadbeef14"
      ]
    },
    "1843": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1844": {
      "op": "assert",
      "stack_out": []
    },
    "1845": {
      "retsub": true,
      "op": "retsub"
    },
    "1846": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_void",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1849": {
      "op": "itxn_begin"
    },
    "1850": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1852": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1854": {
      "op": "bytec 8 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)"
      ],
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1856": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1858": {
      "op": "pushbytes 0x0006576f726c6431",
      "defined_out": [
        "0x0006576f726c6431"
      ],
      "stack_out": [
        "0x0006576f726c6431"
      ]
    },
    "1868": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1870": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1871": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1873": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1874": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1876": {
      "op": "itxn_submit"
    },
    "1877": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1879": {
      "op": "pushbytes 0x576f726c6431",
      "defined_out": [
        "0x576f726c6431",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6431"
      ]
    },
    "1887": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1888": {
      "op": "assert",
      "stack_out": []
    },
    "1889": {
      "op": "itxn_begin"
    },
    "1890": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1892": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1894": {
      "op": "bytec 8 // method \"log(string)void\"",
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1896": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1898": {
      "op": "pushbytes 0x0006576f726c6432",
      "defined_out": [
        "0x0006576f726c6432"
      ],
      "stack_out": [
        "0x0006576f726c6432"
      ]
    },
    "1908": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1910": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1911": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1913": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1914": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1916": {
      "op": "itxn_submit"
    },
    "1917": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1919": {
      "op": "pushbytes 0x576f726c6432",
      "defined_out": [
        "0x576f726c6432",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6432"
      ]
    },
    "1927": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1928": {
      "op": "assert",
      "stack_out": []
    },
    "1929": {
      "op": "itxn_begin"
    },
    "1930": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1932": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1934": {
      "op": "bytec 8 // method \"log(string)void\"",
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1936": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1938": {
      "op": "pushbytes 0x0006576f726c6433",
      "defined_out": [
        "0x0006576f726c6433"
      ],
      "stack_out": [
        "0x0006576f726c6433"
      ]
    },
    "1948": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1950": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1951": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1953": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1954": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1956": {
      "op": "itxn_submit"
    },
    "1957": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1959": {
      "op": "pushbytes 0x576f726c6433",
      "defined_out": [
        "0x576f726c6433",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6433"
      ]
    },
    "1967": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1968": {
      "op": "assert",
      "stack_out": []
    },
    "1969": {
      "op": "itxn_begin"
    },
    "1970": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1972": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1974": {
      "op": "bytec 8 // method \"log(string)void\"",
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1976": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1978": {
      "op": "pushbytes 0x0006576f726c6434",
      "defined_out": [
        "0x0006576f726c6434"
      ],
      "stack_out": [
        "0x0006576f726c6434"
      ]
    },
    "1988": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1990": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1991": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1993": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1994": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1996": {
      "op": "itxn_submit"
    },
    "1997": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1999": {
      "op": "pushbytes 0x576f726c6434",
      "defined_out": [
        "0x576f726c6434",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6434"
      ]
    },
    "2007": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2008": {
      "op": "assert",
      "stack_out": []
    },
    "2009": {
      "retsub": true,
      "op": "retsub"
    },
    "2010": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types",
      "params": {
        "app#0": "uint64",
        "asset#0": "uint64"
      },
      "block": "test_ref_types",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2013": {
      "op": "itxn_begin"
    },
    "2014": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2016": {
      "op": "frame_dig -2",
      "defined_out": [
        "app#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "app#0 (copy)"
      ]
    },
    "2018": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2020": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "asset#0 (copy)"
      ]
    },
    "2022": {
      "op": "itxn_field Assets",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2024": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "app#0 (copy)"
      ]
    },
    "2026": {
      "op": "itxn_field Applications",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2028": {
      "op": "itxn_field Accounts",
      "stack_out": []
    },
    "2030": {
      "op": "pushbytes 0xcd727b71 // method \"log(asset,account,application)void\"",
      "defined_out": [
        "Method(log(asset,account,application)void)"
      ],
      "stack_out": [
        "Method(log(asset,account,application)void)"
      ]
    },
    "2036": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2038": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "2041": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2043": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "2046": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2048": {
      "op": "pushbytes 0x01",
      "stack_out": [
        "0x01"
      ]
    },
    "2051": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2053": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2054": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2056": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2057": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2059": {
      "op": "itxn_submit"
    },
    "2060": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2062": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn.LastLog#0",
        "asset#0 (copy)"
      ]
    },
    "2064": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "check%0#0",
        "txn.LastLog#0",
        "value%0#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "2066": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "txn.LastLog#0",
        "value%0#0"
      ]
    },
    "2067": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%1#0",
        "txn.LastLog#0",
        "value%0#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "value%0#0",
        "tmp%1#0"
      ]
    },
    "2069": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0"
      ]
    },
    "2070": {
      "op": "frame_dig -2",
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0",
        "app#0 (copy)"
      ]
    },
    "2072": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "tmp%2#0",
        "txn.LastLog#0",
        "value%1#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "2074": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0",
        "value%1#0"
      ]
    },
    "2075": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%3#0"
      ]
    },
    "2076": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2077": {
      "op": "assert",
      "stack_out": []
    },
    "2078": {
      "retsub": true,
      "op": "retsub"
    },
    "2079": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_account_to_address",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2082": {
      "op": "itxn_begin"
    },
    "2083": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2085": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "app#0 (copy)"
      ]
    },
    "2087": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2089": {
      "op": "pushbytes 0x0437b17e // method \"log(address)void\"",
      "defined_out": [
        "Method(log(address)void)",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "Method(log(address)void)"
      ]
    },
    "2095": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2097": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2099": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2100": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2102": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2103": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2105": {
      "op": "itxn_submit"
    },
    "2106": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2108": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%0#0"
      ]
    },
    "2110": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2111": {
      "op": "assert",
      "stack_out": []
    },
    "2112": {
      "retsub": true,
      "op": "retsub"
    },
    "2113": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_string",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2116": {
      "op": "itxn_begin"
    },
    "2117": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "2119": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2121": {
      "op": "bytec 11 // method \"echo_native_string(string)string\"",
      "defined_out": [
        "Method(echo_native_string(string)string)"
      ],
      "stack_out": [
        "Method(echo_native_string(string)string)"
      ]
    },
    "2123": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2125": {
      "op": "bytec 12 // 0x000173",
      "defined_out": [
        "0x000173"
      ],
      "stack_out": [
        "0x000173"
      ]
    },
    "2127": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2129": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2130": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2132": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2133": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2135": {
      "op": "itxn_submit"
    },
    "2136": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2138": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2139": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2142": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2143": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2144": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2145": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0"
      ]
    },
    "2148": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2149": {
      "op": "pushbytes \"echo: s\"",
      "defined_out": [
        "\"echo: s\"",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)",
        "\"echo: s\""
      ]
    },
    "2158": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0"
      ]
    },
    "2159": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2160": {
      "op": "itxn_begin"
    },
    "2161": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2163": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2165": {
      "op": "bytec 11 // method \"echo_native_string(string)string\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_string(string)string)"
      ]
    },
    "2167": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2169": {
      "op": "bytec 12 // 0x000173",
      "stack_out": [
        "result1#0",
        "0x000173"
      ]
    },
    "2171": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2173": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2174": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2176": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2177": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2179": {
      "op": "itxn_submit"
    },
    "2180": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2182": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2183": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0"
      ]
    },
    "2186": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "2187": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "2188": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2189": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2192": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2194": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%9#0"
      ]
    },
    "2195": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2196": {
      "op": "itxn_begin"
    },
    "2197": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2199": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2201": {
      "op": "bytec 11 // method \"echo_native_string(string)string\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_string(string)string)"
      ]
    },
    "2203": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2205": {
      "op": "bytec 12 // 0x000173",
      "stack_out": [
        "result1#0",
        "0x000173"
      ]
    },
    "2207": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2209": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2210": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2212": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2213": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2215": {
      "op": "itxn_submit"
    },
    "2216": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2218": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2219": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0"
      ]
    },
    "2222": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "2223": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%12#0"
      ]
    },
    "2224": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2225": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2228": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "2229": {
      "op": "assert",
      "stack_out": []
    },
    "2230": {
      "retsub": true,
      "op": "retsub"
    },
    "2231": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_bytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2234": {
      "op": "itxn_begin"
    },
    "2235": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "2237": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2239": {
      "op": "bytec 13 // method \"echo_native_bytes(byte[])byte[]\"",
      "defined_out": [
        "Method(echo_native_bytes(byte[])byte[])"
      ],
      "stack_out": [
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "2241": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2243": {
      "op": "bytec 14 // 0x000162",
      "defined_out": [
        "0x000162"
      ],
      "stack_out": [
        "0x000162"
      ]
    },
    "2245": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2247": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2248": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2250": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2251": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2253": {
      "op": "itxn_submit"
    },
    "2254": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2256": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2257": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2260": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2261": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2262": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2263": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0"
      ]
    },
    "2266": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2267": {
      "op": "pushbytes 0x6563686f3a2062",
      "defined_out": [
        "0x6563686f3a2062",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)",
        "0x6563686f3a2062"
      ]
    },
    "2276": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0"
      ]
    },
    "2277": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2278": {
      "op": "itxn_begin"
    },
    "2279": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2281": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2283": {
      "op": "bytec 13 // method \"echo_native_bytes(byte[])byte[]\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "2285": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2287": {
      "op": "bytec 14 // 0x000162",
      "stack_out": [
        "result1#0",
        "0x000162"
      ]
    },
    "2289": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2291": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2292": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2294": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2295": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2297": {
      "op": "itxn_submit"
    },
    "2298": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2300": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2301": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0"
      ]
    },
    "2304": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "2305": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "2306": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2307": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2310": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2312": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%9#0"
      ]
    },
    "2313": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2314": {
      "op": "itxn_begin"
    },
    "2315": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2317": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2319": {
      "op": "bytec 13 // method \"echo_native_bytes(byte[])byte[]\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "2321": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2323": {
      "op": "bytec 14 // 0x000162",
      "stack_out": [
        "result1#0",
        "0x000162"
      ]
    },
    "2325": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2327": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2328": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2330": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2331": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2333": {
      "op": "itxn_submit"
    },
    "2334": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2336": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2337": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0"
      ]
    },
    "2340": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "2341": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%12#0"
      ]
    },
    "2342": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2343": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2346": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "2347": {
      "op": "assert",
      "stack_out": []
    },
    "2348": {
      "retsub": true,
      "op": "retsub"
    },
    "2349": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_uint64",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2352": {
      "op": "itxn_begin"
    },
    "2353": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "2355": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2357": {
      "op": "bytec 15 // method \"echo_native_uint64(uint64)uint64\"",
      "defined_out": [
        "Method(echo_native_uint64(uint64)uint64)"
      ],
      "stack_out": [
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "2359": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2361": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "2362": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2364": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2365": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2367": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2368": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2370": {
      "op": "itxn_submit"
    },
    "2371": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2373": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2374": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2377": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2378": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2381": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2382": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2383": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2384": {
      "op": "btoi",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0"
      ]
    },
    "2385": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2386": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "2387": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0"
      ]
    },
    "2388": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2389": {
      "op": "itxn_begin"
    },
    "2390": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "1"
      ]
    },
    "2391": {
      "op": "itob",
      "defined_out": [
        "result1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "val_as_bytes%0#0"
      ]
    },
    "2392": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "val_as_bytes%0#0",
        "app#0 (copy)"
      ]
    },
    "2394": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "val_as_bytes%0#0"
      ]
    },
    "2396": {
      "op": "bytec 15 // method \"echo_native_uint64(uint64)uint64\"",
      "stack_out": [
        "result1#0",
        "val_as_bytes%0#0",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "2398": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "val_as_bytes%0#0"
      ]
    },
    "2400": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2402": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2403": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2405": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2406": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2408": {
      "op": "itxn_submit"
    },
    "2409": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2411": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2412": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%5#0"
      ]
    },
    "2415": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "awst_tmp%1#0"
      ]
    },
    "2416": {
      "op": "extract 0 4",
      "defined_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2419": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "2420": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2421": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "tmp%5#0"
      ]
    },
    "2422": {
      "op": "btoi",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2423": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2425": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%9#0"
      ]
    },
    "2426": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2427": {
      "op": "itxn_begin"
    },
    "2428": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2430": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2432": {
      "op": "bytec 15 // method \"echo_native_uint64(uint64)uint64\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "2434": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2436": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "result1#0",
        "0x0000000000000001"
      ]
    },
    "2437": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2439": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2440": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2442": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2443": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2445": {
      "op": "itxn_submit"
    },
    "2446": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2448": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2449": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%10#0"
      ]
    },
    "2452": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "awst_tmp%2#0"
      ]
    },
    "2453": {
      "op": "extract 0 4",
      "defined_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "2456": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "2457": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "2458": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "tmp%10#0"
      ]
    },
    "2459": {
      "op": "btoi",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2460": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "2461": {
      "op": "assert",
      "stack_out": []
    },
    "2462": {
      "retsub": true,
      "op": "retsub"
    },
    "2463": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_biguint",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2466": {
      "op": "itxn_begin"
    },
    "2467": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "2469": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2471": {
      "op": "bytec 16 // method \"echo_native_biguint(uint512)uint512\"",
      "defined_out": [
        "Method(echo_native_biguint(uint512)uint512)"
      ],
      "stack_out": [
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "2473": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2475": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2476": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2478": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2479": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2481": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2482": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2484": {
      "op": "itxn_submit"
    },
    "2485": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2487": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2488": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "result1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0"
      ]
    },
    "2491": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0"
      ]
    },
    "2492": {
      "op": "extract 0 4",
      "defined_out": [
        "result1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%1#0"
      ]
    },
    "2495": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "result1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2496": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%2#0"
      ]
    },
    "2497": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0"
      ]
    },
    "2498": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2499": {
      "op": "bytec 17 // 0x03",
      "defined_out": [
        "0x03",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)",
        "0x03"
      ]
    },
    "2501": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%3#0"
      ]
    },
    "2502": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2503": {
      "op": "itxn_begin"
    },
    "2504": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2506": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2508": {
      "op": "bytec 16 // method \"echo_native_biguint(uint512)uint512\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "2510": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2512": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2513": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2515": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2516": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2518": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2519": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2521": {
      "op": "itxn_submit"
    },
    "2522": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2524": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2525": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "result2#0"
      ]
    },
    "2528": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "result2#0",
        "awst_tmp%1#0"
      ]
    },
    "2529": {
      "op": "extract 0 4",
      "defined_out": [
        "result1#0",
        "result2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "tmp%5#0"
      ]
    },
    "2532": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "result2#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "2533": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "result2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "tmp%6#0"
      ]
    },
    "2534": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2535": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2537": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%7#0"
      ]
    },
    "2538": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2539": {
      "op": "itxn_begin"
    },
    "2540": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2542": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2544": {
      "op": "bytec 16 // method \"echo_native_biguint(uint512)uint512\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "2546": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2548": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2549": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2551": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2552": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2554": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2555": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2557": {
      "op": "itxn_submit"
    },
    "2558": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2560": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2561": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "result3#0"
      ]
    },
    "2564": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "result3#0",
        "awst_tmp%2#0"
      ]
    },
    "2565": {
      "op": "extract 0 4",
      "defined_out": [
        "result1#0",
        "result3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "tmp%9#0"
      ]
    },
    "2568": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "result3#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "2569": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "result3#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "tmp%10#0"
      ]
    },
    "2570": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2571": {
      "op": "b==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "2572": {
      "op": "assert",
      "stack_out": []
    },
    "2573": {
      "retsub": true,
      "op": "retsub"
    },
    "2574": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_tuple",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2577": {
      "op": "itxn_begin"
    },
    "2578": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "2580": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2582": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ],
      "stack_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2584": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2586": {
      "op": "bytec 5 // 0x00027331",
      "defined_out": [
        "0x00027331"
      ],
      "stack_out": [
        "0x00027331"
      ]
    },
    "2588": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2590": {
      "op": "bytec 6 // 0x00026231",
      "defined_out": [
        "0x00026231"
      ],
      "stack_out": [
        "0x00026231"
      ]
    },
    "2592": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2594": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "2595": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2597": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2598": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2600": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2601": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2603": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2604": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2606": {
      "op": "itxn_submit"
    },
    "2607": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2609": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2610": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "result1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0"
      ]
    },
    "2613": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2615": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "result1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "tmp%1#0"
      ]
    },
    "2618": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "result1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2619": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "result1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "tmp%2#0"
      ]
    },
    "2620": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0"
      ]
    },
    "2621": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2622": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "result1#0 (copy)",
        "0"
      ]
    },
    "2623": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%0#0",
        "item_start_offset%0#0",
        "result1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_start_offset%0#0"
      ]
    },
    "2624": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_start_offset%0#0",
        "result1#0 (copy)"
      ]
    },
    "2626": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "awst_tmp%0#0",
        "item_start_offset%0#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_start_offset%0#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "2627": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%0#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "result1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "2628": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "result1#0 (copy)"
      ]
    },
    "2630": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_end_offset%0#0",
        "result1#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "2632": {
      "op": "dig 2",
      "defined_out": [
        "awst_tmp%0#0",
        "item_end_offset%0#0",
        "item_end_offset%0#0 (copy)",
        "item_start_offset%0#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_end_offset%0#0",
        "result1#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0 (copy)"
      ]
    },
    "2634": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%0#0",
        "item_end_offset%0#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_end_offset%0#0",
        "s#0"
      ]
    },
    "2635": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_end_offset%0#0",
        "s#0",
        "result1#0 (copy)"
      ]
    },
    "2637": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_end_offset%0#0",
        "s#0",
        "item_end_offset%1#0"
      ]
    },
    "2638": {
      "op": "dig 3",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_end_offset%0#0",
        "s#0",
        "item_end_offset%1#0",
        "result1#0 (copy)"
      ]
    },
    "2640": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "item_end_offset%1#0",
        "result1#0 (copy)",
        "item_end_offset%0#0"
      ]
    },
    "2642": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "result1#0 (copy)",
        "item_end_offset%0#0",
        "item_end_offset%1#0"
      ]
    },
    "2644": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%0#0",
        "b#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "b#0"
      ]
    },
    "2645": {
      "op": "dig 3",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "b#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2647": {
      "op": "extract 16 64",
      "defined_out": [
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "b#0",
        "bu#0"
      ]
    },
    "2650": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "s#0"
      ]
    },
    "2652": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%3#0"
      ]
    },
    "2655": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "2656": {
      "op": "bytec 9 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "\"echo: s1\""
      ]
    },
    "2658": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2659": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%3#0"
      ]
    },
    "2660": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "b#0"
      ]
    },
    "2662": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%0#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "2665": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "2666": {
      "op": "bytec 24 // 0x6563686f3a206231",
      "defined_out": [
        "0x6563686f3a206231",
        "awst_tmp%0#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "0x6563686f3a206231"
      ]
    },
    "2668": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2669": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "2670": {
      "op": "uncover 4",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "awst_tmp%0#0"
      ]
    },
    "2672": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "awst_tmp%0#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "awst_tmp%0#0",
        "8"
      ]
    },
    "2674": {
      "op": "extract_uint64",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2675": {
      "op": "dup",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "2676": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "2"
      ]
    },
    "2677": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2678": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2679": {
      "op": "dig 3",
      "defined_out": [
        "bu#0",
        "bu#0 (copy)",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "bu#0 (copy)"
      ]
    },
    "2681": {
      "op": "bytec 17 // 0x03",
      "defined_out": [
        "0x03",
        "bu#0",
        "bu#0 (copy)",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "bu#0 (copy)",
        "0x03"
      ]
    },
    "2683": {
      "op": "b==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "2684": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2685": {
      "op": "itxn_begin"
    },
    "2686": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "1"
      ]
    },
    "2687": {
      "op": "itob",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0"
      ]
    },
    "2688": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0",
        "app#0 (copy)"
      ]
    },
    "2690": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0"
      ]
    },
    "2692": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2694": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0"
      ]
    },
    "2696": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0",
        "0x00027331"
      ]
    },
    "2698": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0"
      ]
    },
    "2700": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0",
        "0x00026231"
      ]
    },
    "2702": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0"
      ]
    },
    "2704": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2706": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2707": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2709": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "appl"
      ]
    },
    "2710": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2712": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0"
      ]
    },
    "2713": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2715": {
      "op": "itxn_submit"
    },
    "2716": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%1#0"
      ]
    },
    "2718": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2719": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "bu#0",
        "result1#0",
        "result2#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%1#0",
        "result2#0"
      ]
    },
    "2722": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result2#0",
        "awst_tmp%1#0"
      ]
    },
    "2723": {
      "op": "extract 0 4",
      "defined_out": [
        "bu#0",
        "result1#0",
        "result2#0",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result2#0",
        "tmp%11#0"
      ]
    },
    "2726": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result2#0",
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "2727": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "result2#0",
        "tmp%12#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result2#0",
        "tmp%12#0"
      ]
    },
    "2728": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result2#0"
      ]
    },
    "2729": {
      "op": "dig 5",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2731": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%13#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%13#0"
      ]
    },
    "2732": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2733": {
      "op": "itxn_begin"
    },
    "2734": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "app#0 (copy)"
      ]
    },
    "2736": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2738": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2740": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2742": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x00027331"
      ]
    },
    "2744": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2746": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x00026231"
      ]
    },
    "2748": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2750": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x0000000000000001"
      ]
    },
    "2751": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2753": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2754": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2756": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "appl"
      ]
    },
    "2757": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2759": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0"
      ]
    },
    "2760": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2762": {
      "op": "itxn_submit"
    },
    "2763": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%2#0"
      ]
    },
    "2765": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2766": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "bu#0",
        "result1#0",
        "result3#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%2#0",
        "result3#0"
      ]
    },
    "2769": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result3#0",
        "awst_tmp%2#0"
      ]
    },
    "2770": {
      "op": "extract 0 4",
      "defined_out": [
        "bu#0",
        "result1#0",
        "result3#0",
        "tmp%15#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result3#0",
        "tmp%15#0"
      ]
    },
    "2773": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result3#0",
        "tmp%15#0",
        "0x151f7c75"
      ]
    },
    "2774": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "result3#0",
        "tmp%16#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result3#0",
        "tmp%16#0"
      ]
    },
    "2775": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result3#0"
      ]
    },
    "2776": {
      "op": "uncover 5",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result3#0",
        "result1#0"
      ]
    },
    "2778": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "tmp%17#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%17#0"
      ]
    },
    "2779": {
      "op": "assert",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2780": {
      "op": "itxn_begin"
    },
    "2781": {
      "op": "frame_dig -1",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "app#0 (copy)"
      ]
    },
    "2783": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2785": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2787": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2789": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x00027331"
      ]
    },
    "2791": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2793": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x00026231"
      ]
    },
    "2795": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2797": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x0000000000000001"
      ]
    },
    "2798": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2800": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2801": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2803": {
      "op": "intc_1 // appl",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "appl"
      ]
    },
    "2804": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2806": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0"
      ]
    },
    "2807": {
      "op": "itxn_field Fee",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2809": {
      "op": "itxn_submit"
    },
    "2810": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0"
      ]
    },
    "2812": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "2813": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "tmp%18#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%18#0"
      ]
    },
    "2816": {
      "op": "dig 1",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%18#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "2818": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "2821": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%18#0",
        "tmp%19#0",
        "0x151f7c75"
      ]
    },
    "2822": {
      "op": "==",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "tmp%18#0",
        "tmp%20#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%18#0",
        "tmp%20#0"
      ]
    },
    "2823": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%18#0"
      ]
    },
    "2824": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "2825": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "0"
      ]
    },
    "2826": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "item_start_offset%2#0",
        "tmp%18#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%18#0",
        "item_start_offset%2#0"
      ]
    },
    "2827": {
      "op": "dig 1",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%18#0",
        "item_start_offset%2#0",
        "tmp%18#0 (copy)"
      ]
    },
    "2829": {
      "op": "intc_3 // 2",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%18#0",
        "item_start_offset%2#0",
        "tmp%18#0 (copy)",
        "2"
      ]
    },
    "2830": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "tmp%18#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%18#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "2831": {
      "op": "dig 2",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%18#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0",
        "tmp%18#0 (copy)"
      ]
    },
    "2833": {
      "op": "uncover 2",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%18#0",
        "item_end_offset%2#0",
        "tmp%18#0 (copy)",
        "item_start_offset%2#0"
      ]
    },
    "2835": {
      "op": "dig 2",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "item_end_offset%2#0",
        "item_end_offset%2#0 (copy)",
        "item_start_offset%2#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%18#0",
        "item_end_offset%2#0",
        "tmp%18#0 (copy)",
        "item_start_offset%2#0",
        "item_end_offset%2#0 (copy)"
      ]
    },
    "2837": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "encoded_item0%0#0",
        "item_end_offset%2#0",
        "tmp%18#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%18#0",
        "item_end_offset%2#0",
        "encoded_item0%0#0"
      ]
    },
    "2838": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "item_end_offset%2#0",
        "result_native.0#0",
        "tmp%18#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%18#0",
        "item_end_offset%2#0",
        "result_native.0#0"
      ]
    },
    "2841": {
      "op": "dig 2",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%18#0",
        "item_end_offset%2#0",
        "result_native.0#0",
        "tmp%18#0 (copy)"
      ]
    },
    "2843": {
      "op": "len",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "item_end_offset%2#0",
        "item_end_offset%3#0",
        "result_native.0#0",
        "tmp%18#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%18#0",
        "item_end_offset%2#0",
        "result_native.0#0",
        "item_end_offset%3#0"
      ]
    },
    "2844": {
      "op": "uncover 3",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "item_end_offset%2#0",
        "result_native.0#0",
        "item_end_offset%3#0",
        "tmp%18#0"
      ]
    },
    "2846": {
      "op": "uncover 3",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "item_end_offset%3#0",
        "tmp%18#0",
        "item_end_offset%2#0"
      ]
    },
    "2848": {
      "op": "uncover 2",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "tmp%18#0",
        "item_end_offset%2#0",
        "item_end_offset%3#0"
      ]
    },
    "2850": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "encoded_item1%0#0",
        "result_native.0#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "encoded_item1%0#0"
      ]
    },
    "2851": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "result_native.0#0",
        "result_native.1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0"
      ]
    },
    "2854": {
      "op": "dig 2",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "2856": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "awst_tmp%3#0 (copy)",
        "8"
      ]
    },
    "2858": {
      "op": "extract_uint64",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0"
      ]
    },
    "2859": {
      "op": "uncover 3",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "awst_tmp%3#0"
      ]
    },
    "2861": {
      "op": "extract 16 64",
      "defined_out": [
        "bu#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ]
    },
    "2864": {
      "op": "uncover 6",
      "stack_out": [
        "bu#0",
        "tmp%5#0",
        "tmp%7#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%3#0"
      ]
    },
    "2866": {
      "op": "uncover 4",
      "stack_out": [
        "bu#0",
        "tmp%5#0",
        "tmp%7#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%3#0",
        "result_native.0#0"
      ]
    },
    "2868": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%22#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%5#0",
        "tmp%7#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%22#0"
      ]
    },
    "2869": {
      "op": "assert",
      "stack_out": [
        "bu#0",
        "tmp%5#0",
        "tmp%7#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ]
    },
    "2870": {
      "op": "uncover 4",
      "stack_out": [
        "bu#0",
        "tmp%7#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%5#0"
      ]
    },
    "2872": {
      "op": "uncover 3",
      "stack_out": [
        "bu#0",
        "tmp%7#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%5#0",
        "result_native.1#0"
      ]
    },
    "2874": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%24#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%7#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%24#0"
      ]
    },
    "2875": {
      "op": "assert",
      "stack_out": [
        "bu#0",
        "tmp%7#0",
        "result_native.2#0",
        "result_native.3#0"
      ]
    },
    "2876": {
      "op": "cover 2",
      "stack_out": [
        "bu#0",
        "result_native.3#0",
        "tmp%7#0",
        "result_native.2#0"
      ]
    },
    "2878": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result_native.3#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "bu#0",
        "result_native.3#0",
        "tmp%26#0"
      ]
    },
    "2879": {
      "op": "assert",
      "stack_out": [
        "bu#0",
        "result_native.3#0"
      ]
    },
    "2880": {
      "op": "b==",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "2881": {
      "op": "assert",
      "stack_out": []
    },
    "2882": {
      "retsub": true,
      "op": "retsub"
    },
    "2883": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_tuple_method_ref",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2886": {
      "op": "itxn_begin"
    },
    "2887": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "2889": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2891": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ],
      "stack_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2893": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2895": {
      "op": "bytec 5 // 0x00027331",
      "defined_out": [
        "0x00027331"
      ],
      "stack_out": [
        "0x00027331"
      ]
    },
    "2897": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2899": {
      "op": "bytec 6 // 0x00026231",
      "defined_out": [
        "0x00026231"
      ],
      "stack_out": [
        "0x00026231"
      ]
    },
    "2901": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2903": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "2904": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2906": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2907": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2909": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2910": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2912": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2913": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2915": {
      "op": "itxn_submit"
    },
    "2916": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2918": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2919": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2922": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2924": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2927": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2928": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2929": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2930": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2931": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "2932": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%0#0",
        "item_start_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_start_offset%0#0"
      ]
    },
    "2933": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_start_offset%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2935": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "awst_tmp%0#0",
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_start_offset%0#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "2936": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%0#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "2937": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2939": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "2941": {
      "op": "dig 2",
      "defined_out": [
        "awst_tmp%0#0",
        "item_end_offset%0#0",
        "item_end_offset%0#0 (copy)",
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0 (copy)"
      ]
    },
    "2943": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%0#0",
        "encoded_item0%0#0",
        "item_end_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "encoded_item0%0#0"
      ]
    },
    "2944": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%0#0",
        "item_end_offset%0#0",
        "result.0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "result.0#0"
      ]
    },
    "2947": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "result.0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2949": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "result.0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "result.0#0",
        "item_end_offset%1#0"
      ]
    },
    "2950": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%0#0",
        "item_end_offset%0#0",
        "result.0#0",
        "item_end_offset%1#0",
        "tmp%0#0"
      ]
    },
    "2952": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "item_end_offset%1#0",
        "tmp%0#0",
        "item_end_offset%0#0"
      ]
    },
    "2954": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0"
      ]
    },
    "2956": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%0#0",
        "encoded_item1%0#0",
        "result.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "encoded_item1%0#0"
      ]
    },
    "2957": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0"
      ]
    },
    "2960": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2962": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "result.0#0",
        "result.1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%0#0 (copy)",
        "8"
      ]
    },
    "2964": {
      "op": "extract_uint64",
      "defined_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ]
    },
    "2965": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "awst_tmp%0#0"
      ]
    },
    "2967": {
      "op": "extract 16 64",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2970": {
      "op": "dig 3",
      "defined_out": [
        "result.0#0",
        "result.0#0 (copy)",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.0#0 (copy)"
      ]
    },
    "2972": {
      "op": "bytec 9 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "result.0#0",
        "result.0#0 (copy)",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.0#0 (copy)",
        "\"echo: s1\""
      ]
    },
    "2974": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%3#0"
      ]
    },
    "2975": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2976": {
      "op": "dig 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.1#0 (copy)",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.1#0 (copy)"
      ]
    },
    "2978": {
      "op": "bytec 24 // 0x6563686f3a206231",
      "defined_out": [
        "0x6563686f3a206231",
        "result.0#0",
        "result.1#0",
        "result.1#0 (copy)",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.1#0 (copy)",
        "0x6563686f3a206231"
      ]
    },
    "2980": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%4#0"
      ]
    },
    "2981": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2982": {
      "op": "dig 1",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.2#0 (copy)",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.2#0 (copy)"
      ]
    },
    "2984": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.2#0 (copy)",
        "2"
      ]
    },
    "2985": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%5#0"
      ]
    },
    "2986": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2987": {
      "op": "dup",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)"
      ]
    },
    "2988": {
      "op": "bytec 17 // 0x03",
      "defined_out": [
        "0x03",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)",
        "0x03"
      ]
    },
    "2990": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%6#0"
      ]
    },
    "2991": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2992": {
      "op": "itxn_begin"
    },
    "2993": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "1"
      ]
    },
    "2994": {
      "op": "itob",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ]
    },
    "2995": {
      "op": "frame_dig -1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0",
        "app#0 (copy)"
      ]
    },
    "2997": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ]
    },
    "2999": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3001": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ]
    },
    "3003": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0",
        "0x00027331"
      ]
    },
    "3005": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ]
    },
    "3007": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0",
        "0x00026231"
      ]
    },
    "3009": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ]
    },
    "3011": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3013": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3014": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3016": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "appl"
      ]
    },
    "3017": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3019": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0"
      ]
    },
    "3020": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3022": {
      "op": "itxn_submit"
    },
    "3023": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0"
      ]
    },
    "3025": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3026": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "3029": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3031": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "3034": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "3035": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "3036": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "3037": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "3038": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "0"
      ]
    },
    "3039": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%1#0",
        "item_start_offset%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "item_start_offset%2#0"
      ]
    },
    "3040": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "item_start_offset%2#0",
        "tmp%7#0 (copy)"
      ]
    },
    "3042": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "item_start_offset%2#0",
        "tmp%7#0 (copy)",
        "2"
      ]
    },
    "3043": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%1#0",
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "3044": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0",
        "tmp%7#0 (copy)"
      ]
    },
    "3046": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "item_end_offset%2#0",
        "tmp%7#0 (copy)",
        "item_start_offset%2#0"
      ]
    },
    "3048": {
      "op": "dig 2",
      "defined_out": [
        "awst_tmp%1#0",
        "item_end_offset%2#0",
        "item_end_offset%2#0 (copy)",
        "item_start_offset%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "item_end_offset%2#0",
        "tmp%7#0 (copy)",
        "item_start_offset%2#0",
        "item_end_offset%2#0 (copy)"
      ]
    },
    "3050": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "encoded_item0%1#0",
        "item_end_offset%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "item_end_offset%2#0",
        "encoded_item0%1#0"
      ]
    },
    "3051": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%1#0",
        "item_end_offset%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "item_end_offset%2#0",
        "result_2.0#0"
      ]
    },
    "3054": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "item_end_offset%2#0",
        "result_2.0#0",
        "tmp%7#0 (copy)"
      ]
    },
    "3056": {
      "op": "len",
      "defined_out": [
        "awst_tmp%1#0",
        "item_end_offset%2#0",
        "item_end_offset%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "item_end_offset%2#0",
        "result_2.0#0",
        "item_end_offset%3#0"
      ]
    },
    "3057": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "item_end_offset%2#0",
        "result_2.0#0",
        "item_end_offset%3#0",
        "tmp%7#0"
      ]
    },
    "3059": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "item_end_offset%3#0",
        "tmp%7#0",
        "item_end_offset%2#0"
      ]
    },
    "3061": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "tmp%7#0",
        "item_end_offset%2#0",
        "item_end_offset%3#0"
      ]
    },
    "3063": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "encoded_item1%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "encoded_item1%1#0"
      ]
    },
    "3064": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "result_2.1#0"
      ]
    },
    "3067": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "result_2.1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3069": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "result_2.1#0",
        "awst_tmp%1#0 (copy)",
        "8"
      ]
    },
    "3071": {
      "op": "extract_uint64",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0"
      ]
    },
    "3072": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "awst_tmp%1#0"
      ]
    },
    "3074": {
      "op": "extract 16 64",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0"
      ]
    },
    "3077": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "result_2.0#0"
      ]
    },
    "3079": {
      "op": "dig 7",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "result_2.0#0",
        "result.0#0 (copy)"
      ]
    },
    "3081": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%10#0"
      ]
    },
    "3082": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%10#0",
        "result_2.1#0"
      ]
    },
    "3084": {
      "op": "dig 6",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%10#0",
        "result_2.1#0",
        "result.1#0 (copy)"
      ]
    },
    "3086": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "3087": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%12#0"
      ]
    },
    "3088": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%12#0",
        "result_2.2#0"
      ]
    },
    "3090": {
      "op": "dig 4",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%12#0",
        "result_2.2#0",
        "result.2#0 (copy)"
      ]
    },
    "3092": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "3093": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%14#0"
      ]
    },
    "3094": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%14#0",
        "result_2.3#0"
      ]
    },
    "3095": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%14#0",
        "result_2.3#0",
        "result.3#0 (copy)"
      ]
    },
    "3097": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "3098": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%16#0"
      ]
    },
    "3099": {
      "error": "expected native arguments to give the same result",
      "op": "assert // expected native arguments to give the same result",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3100": {
      "op": "itxn_begin"
    },
    "3101": {
      "op": "frame_dig -1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "app#0 (copy)"
      ]
    },
    "3103": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3105": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3107": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3109": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00027331"
      ]
    },
    "3111": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3113": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00026231"
      ]
    },
    "3115": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3117": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x0000000000000001"
      ]
    },
    "3118": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3120": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3121": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3123": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "appl"
      ]
    },
    "3124": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3126": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0"
      ]
    },
    "3127": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3129": {
      "op": "itxn_submit"
    },
    "3130": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0"
      ]
    },
    "3132": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3133": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%17#0"
      ]
    },
    "3136": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%17#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3138": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "3141": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%17#0",
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "3142": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "3143": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%17#0"
      ]
    },
    "3144": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ]
    },
    "3145": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "0"
      ]
    },
    "3146": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%2#0",
        "item_start_offset%4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%17#0",
        "item_start_offset%4#0"
      ]
    },
    "3147": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%17#0",
        "item_start_offset%4#0",
        "tmp%17#0 (copy)"
      ]
    },
    "3149": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%17#0",
        "item_start_offset%4#0",
        "tmp%17#0 (copy)",
        "2"
      ]
    },
    "3150": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%2#0",
        "item_end_offset%4#0",
        "item_start_offset%4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%17#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "3151": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%17#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "tmp%17#0 (copy)"
      ]
    },
    "3153": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%17#0",
        "item_end_offset%4#0",
        "tmp%17#0 (copy)",
        "item_start_offset%4#0"
      ]
    },
    "3155": {
      "op": "dig 2",
      "defined_out": [
        "awst_tmp%2#0",
        "item_end_offset%4#0",
        "item_end_offset%4#0 (copy)",
        "item_start_offset%4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%17#0",
        "item_end_offset%4#0",
        "tmp%17#0 (copy)",
        "item_start_offset%4#0",
        "item_end_offset%4#0 (copy)"
      ]
    },
    "3157": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%2#0",
        "encoded_item0%2#0",
        "item_end_offset%4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%17#0",
        "item_end_offset%4#0",
        "encoded_item0%2#0"
      ]
    },
    "3158": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%2#0",
        "item_end_offset%4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%17#0",
        "item_end_offset%4#0",
        "result_3.0#0"
      ]
    },
    "3161": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%17#0",
        "item_end_offset%4#0",
        "result_3.0#0",
        "tmp%17#0 (copy)"
      ]
    },
    "3163": {
      "op": "len",
      "defined_out": [
        "awst_tmp%2#0",
        "item_end_offset%4#0",
        "item_end_offset%5#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%17#0",
        "item_end_offset%4#0",
        "result_3.0#0",
        "item_end_offset%5#0"
      ]
    },
    "3164": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "item_end_offset%4#0",
        "result_3.0#0",
        "item_end_offset%5#0",
        "tmp%17#0"
      ]
    },
    "3166": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "item_end_offset%5#0",
        "tmp%17#0",
        "item_end_offset%4#0"
      ]
    },
    "3168": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "tmp%17#0",
        "item_end_offset%4#0",
        "item_end_offset%5#0"
      ]
    },
    "3170": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%2#0",
        "encoded_item1%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "encoded_item1%2#0"
      ]
    },
    "3171": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "result_3.1#0"
      ]
    },
    "3174": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "result_3.1#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3176": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "result_3.1#0",
        "awst_tmp%2#0 (copy)",
        "8"
      ]
    },
    "3178": {
      "op": "extract_uint64",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0"
      ]
    },
    "3179": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "awst_tmp%2#0"
      ]
    },
    "3181": {
      "op": "extract 16 64",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0"
      ]
    },
    "3184": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "result_3.0#0"
      ]
    },
    "3186": {
      "op": "dig 7",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "result_3.0#0",
        "result.0#0 (copy)"
      ]
    },
    "3188": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%20#0"
      ]
    },
    "3189": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%20#0",
        "result_3.1#0"
      ]
    },
    "3191": {
      "op": "dig 6",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%20#0",
        "result_3.1#0",
        "result.1#0 (copy)"
      ]
    },
    "3193": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "3194": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%22#0"
      ]
    },
    "3195": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%22#0",
        "result_3.2#0"
      ]
    },
    "3197": {
      "op": "dig 4",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%22#0",
        "result_3.2#0",
        "result.2#0 (copy)"
      ]
    },
    "3199": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "3200": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%24#0"
      ]
    },
    "3201": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%24#0",
        "result_3.3#0"
      ]
    },
    "3202": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%24#0",
        "result_3.3#0",
        "result.3#0 (copy)"
      ]
    },
    "3204": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "3205": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%26#0"
      ]
    },
    "3206": {
      "error": "expected arc4 arguments to give the same result",
      "op": "assert // expected arc4 arguments to give the same result",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3207": {
      "op": "itxn_begin"
    },
    "3208": {
      "op": "frame_dig -1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "app#0 (copy)"
      ]
    },
    "3210": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3212": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3214": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3216": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00027331"
      ]
    },
    "3218": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3220": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00026231"
      ]
    },
    "3222": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3224": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x0000000000000001"
      ]
    },
    "3225": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3227": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3228": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3230": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "appl"
      ]
    },
    "3231": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3233": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0"
      ]
    },
    "3234": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3236": {
      "op": "itxn_submit"
    },
    "3237": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0"
      ]
    },
    "3239": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3240": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%27#0"
      ]
    },
    "3243": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%27#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3245": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "3248": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%27#0",
        "tmp%28#0",
        "0x151f7c75"
      ]
    },
    "3249": {
      "op": "==",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%27#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%27#0",
        "tmp%29#0"
      ]
    },
    "3250": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%27#0"
      ]
    },
    "3251": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ]
    },
    "3252": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%27#0",
        "tmp%27#0 (copy)",
        "0"
      ]
    },
    "3253": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%3#0",
        "item_start_offset%6#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%27#0",
        "item_start_offset%6#0"
      ]
    },
    "3254": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%27#0",
        "item_start_offset%6#0",
        "tmp%27#0 (copy)"
      ]
    },
    "3256": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%27#0",
        "item_start_offset%6#0",
        "tmp%27#0 (copy)",
        "2"
      ]
    },
    "3257": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%3#0",
        "item_end_offset%6#0",
        "item_start_offset%6#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%27#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0"
      ]
    },
    "3258": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%27#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0",
        "tmp%27#0 (copy)"
      ]
    },
    "3260": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%27#0",
        "item_end_offset%6#0",
        "tmp%27#0 (copy)",
        "item_start_offset%6#0"
      ]
    },
    "3262": {
      "op": "dig 2",
      "defined_out": [
        "awst_tmp%3#0",
        "item_end_offset%6#0",
        "item_end_offset%6#0 (copy)",
        "item_start_offset%6#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%27#0",
        "item_end_offset%6#0",
        "tmp%27#0 (copy)",
        "item_start_offset%6#0",
        "item_end_offset%6#0 (copy)"
      ]
    },
    "3264": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%3#0",
        "encoded_item0%3#0",
        "item_end_offset%6#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%27#0",
        "item_end_offset%6#0",
        "encoded_item0%3#0"
      ]
    },
    "3265": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%3#0",
        "item_end_offset%6#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%27#0",
        "item_end_offset%6#0",
        "result_native.0#0"
      ]
    },
    "3268": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%27#0",
        "item_end_offset%6#0",
        "result_native.0#0",
        "tmp%27#0 (copy)"
      ]
    },
    "3270": {
      "op": "len",
      "defined_out": [
        "awst_tmp%3#0",
        "item_end_offset%6#0",
        "item_end_offset%7#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%27#0",
        "item_end_offset%6#0",
        "result_native.0#0",
        "item_end_offset%7#0"
      ]
    },
    "3271": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "item_end_offset%6#0",
        "result_native.0#0",
        "item_end_offset%7#0",
        "tmp%27#0"
      ]
    },
    "3273": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "item_end_offset%7#0",
        "tmp%27#0",
        "item_end_offset%6#0"
      ]
    },
    "3275": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "tmp%27#0",
        "item_end_offset%6#0",
        "item_end_offset%7#0"
      ]
    },
    "3277": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%3#0",
        "encoded_item1%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "encoded_item1%3#0"
      ]
    },
    "3278": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0"
      ]
    },
    "3281": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3283": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "awst_tmp%3#0 (copy)",
        "8"
      ]
    },
    "3285": {
      "op": "extract_uint64",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0"
      ]
    },
    "3286": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "awst_tmp%3#0"
      ]
    },
    "3288": {
      "op": "extract 16 64",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ]
    },
    "3291": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "result_native.0#0"
      ]
    },
    "3293": {
      "op": "uncover 7",
      "stack_out": [
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "result_native.0#0",
        "result.0#0"
      ]
    },
    "3295": {
      "op": "==",
      "defined_out": [
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%30#0"
      ]
    },
    "3296": {
      "op": "uncover 3",
      "stack_out": [
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%30#0",
        "result_native.1#0"
      ]
    },
    "3298": {
      "op": "uncover 6",
      "stack_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%30#0",
        "result_native.1#0",
        "result.1#0"
      ]
    },
    "3300": {
      "op": "==",
      "defined_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "3301": {
      "op": "&&",
      "defined_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%32#0"
      ]
    },
    "3302": {
      "op": "uncover 2",
      "stack_out": [
        "result.2#0",
        "result.3#0",
        "result_native.3#0",
        "tmp%32#0",
        "result_native.2#0"
      ]
    },
    "3304": {
      "op": "uncover 4",
      "stack_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%32#0",
        "result_native.2#0",
        "result.2#0"
      ]
    },
    "3306": {
      "op": "==",
      "defined_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "3307": {
      "op": "&&",
      "defined_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%34#0"
      ]
    },
    "3308": {
      "op": "swap",
      "stack_out": [
        "result.3#0",
        "tmp%34#0",
        "result_native.3#0"
      ]
    },
    "3309": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%34#0",
        "result_native.3#0",
        "result.3#0"
      ]
    },
    "3311": {
      "op": "b==",
      "defined_out": [
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "3312": {
      "op": "&&",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "3313": {
      "op": "assert",
      "stack_out": []
    },
    "3314": {
      "retsub": true,
      "op": "retsub"
    },
    "3315": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_nested_tuples",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3318": {
      "op": "itxn_begin"
    },
    "3319": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3321": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3323": {
      "op": "bytec 18 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "defined_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ],
      "stack_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "3325": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3327": {
      "op": "bytec 25 // 0x00040010000400080002733100027332000000000000000100000000000000020012000133",
      "defined_out": [
        "0x00040010000400080002733100027332000000000000000100000000000000020012000133"
      ],
      "stack_out": [
        "0x00040010000400080002733100027332000000000000000100000000000000020012000133"
      ]
    },
    "3329": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3331": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "3332": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3334": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3335": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3337": {
      "op": "itxn_submit"
    },
    "3338": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3340": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3341": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3344": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3345": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3348": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "3349": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3350": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3351": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3352": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "3353": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%0#0"
      ]
    },
    "3354": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3356": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%0#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "3357": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "3358": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3360": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "3362": {
      "op": "dig 2",
      "defined_out": [
        "item_end_offset%0#0",
        "item_end_offset%0#0 (copy)",
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0 (copy)"
      ]
    },
    "3364": {
      "op": "substring3",
      "defined_out": [
        "encoded_item0%0#0",
        "item_end_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "encoded_item0%0#0"
      ]
    },
    "3365": {
      "op": "dup",
      "defined_out": [
        "encoded_item0%0#0",
        "encoded_item0%0#0 (copy)",
        "item_end_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "encoded_item0%0#0",
        "encoded_item0%0#0 (copy)"
      ]
    },
    "3366": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "encoded_item0%0#0",
        "encoded_item0%0#0 (copy)",
        "0"
      ]
    },
    "3367": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item0%0#0",
        "item_end_offset%0#0",
        "item_start_offset%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "encoded_item0%0#0",
        "item_start_offset%1#0"
      ]
    },
    "3368": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "encoded_item0%0#0",
        "item_start_offset%1#0",
        "encoded_item0%0#0 (copy)"
      ]
    },
    "3370": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "encoded_item0%0#0",
        "item_start_offset%1#0",
        "encoded_item0%0#0 (copy)",
        "2"
      ]
    },
    "3371": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item0%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "encoded_item0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "3372": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "encoded_item0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "encoded_item0%0#0 (copy)"
      ]
    },
    "3374": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "encoded_item0%0#0",
        "item_end_offset%1#0",
        "encoded_item0%0#0 (copy)",
        "item_start_offset%1#0"
      ]
    },
    "3376": {
      "op": "dig 2",
      "defined_out": [
        "encoded_item0%0#0",
        "encoded_item0%0#0 (copy)",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "item_end_offset%1#0 (copy)",
        "item_start_offset%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "encoded_item0%0#0",
        "item_end_offset%1#0",
        "encoded_item0%0#0 (copy)",
        "item_start_offset%1#0",
        "item_end_offset%1#0 (copy)"
      ]
    },
    "3378": {
      "op": "substring3",
      "defined_out": [
        "encoded_item0%0#0",
        "encoded_item0%1#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "encoded_item0%0#0",
        "item_end_offset%1#0",
        "encoded_item0%1#0"
      ]
    },
    "3379": {
      "op": "extract 2 0",
      "defined_out": [
        "encoded_item0%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "result.0.0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "encoded_item0%0#0",
        "item_end_offset%1#0",
        "result.0.0#0"
      ]
    },
    "3382": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "encoded_item0%0#0",
        "item_end_offset%1#0",
        "result.0.0#0",
        "encoded_item0%0#0 (copy)"
      ]
    },
    "3384": {
      "op": "len",
      "defined_out": [
        "encoded_item0%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "item_end_offset%2#0",
        "result.0.0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "encoded_item0%0#0",
        "item_end_offset%1#0",
        "result.0.0#0",
        "item_end_offset%2#0"
      ]
    },
    "3385": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "result.0.0#0",
        "item_end_offset%2#0",
        "encoded_item0%0#0"
      ]
    },
    "3387": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "result.0.0#0",
        "item_end_offset%2#0",
        "encoded_item0%0#0",
        "item_end_offset%1#0"
      ]
    },
    "3389": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "result.0.0#0",
        "encoded_item0%0#0",
        "item_end_offset%1#0",
        "item_end_offset%2#0"
      ]
    },
    "3391": {
      "op": "substring3",
      "defined_out": [
        "item_end_offset%0#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "result.0.0#0",
        "result.0.1#0"
      ]
    },
    "3392": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3394": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_end_offset%3#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "result.0.0#0",
        "result.0.1#0",
        "item_end_offset%3#0"
      ]
    },
    "3395": {
      "op": "uncover 4",
      "stack_out": [
        "item_end_offset%0#0",
        "result.0.0#0",
        "result.0.1#0",
        "item_end_offset%3#0",
        "tmp%0#0"
      ]
    },
    "3397": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item_end_offset%3#0",
        "tmp%0#0",
        "item_end_offset%0#0"
      ]
    },
    "3399": {
      "op": "uncover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "item_end_offset%3#0"
      ]
    },
    "3401": {
      "op": "substring3",
      "defined_out": [
        "encoded_item1%0#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%0#0"
      ]
    },
    "3402": {
      "op": "dup",
      "defined_out": [
        "encoded_item1%0#0",
        "encoded_item1%0#0 (copy)",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%0#0",
        "encoded_item1%0#0 (copy)"
      ]
    },
    "3403": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%0#0",
        "encoded_item1%0#0 (copy)",
        "0"
      ]
    },
    "3404": {
      "op": "extract_uint64",
      "defined_out": [
        "encoded_item1%0#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%0#0",
        "result.1.0#0"
      ]
    },
    "3405": {
      "op": "dig 1",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%0#0",
        "result.1.0#0",
        "encoded_item1%0#0 (copy)"
      ]
    },
    "3407": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_item1%0#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%0#0",
        "result.1.0#0",
        "result.1.1#0"
      ]
    },
    "3410": {
      "op": "dig 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%0#0",
        "result.1.0#0",
        "result.1.1#0",
        "encoded_item1%0#0 (copy)"
      ]
    },
    "3412": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "encoded_item1%0#0",
        "encoded_item1%0#0 (copy)",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%0#0",
        "result.1.0#0",
        "result.1.1#0",
        "encoded_item1%0#0 (copy)",
        "16"
      ]
    },
    "3414": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item1%0#0",
        "item_start_offset%4#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%0#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%4#0"
      ]
    },
    "3415": {
      "op": "dig 3",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%0#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%4#0",
        "encoded_item1%0#0 (copy)"
      ]
    },
    "3417": {
      "op": "len",
      "defined_out": [
        "encoded_item1%0#0",
        "item_end_offset%4#0",
        "item_start_offset%4#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%0#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "3418": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "encoded_item1%0#0"
      ]
    },
    "3420": {
      "op": "cover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "encoded_item1%0#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "3422": {
      "op": "substring3",
      "defined_out": [
        "encoded_item2%0#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "encoded_item2%0#0"
      ]
    },
    "3423": {
      "op": "extract 2 0",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3426": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0"
      ]
    },
    "3428": {
      "op": "bytec 9 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0",
        "\"echo: s1\""
      ]
    },
    "3430": {
      "op": "==",
      "defined_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%3#0"
      ]
    },
    "3431": {
      "op": "assert",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3432": {
      "op": "uncover 3",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0"
      ]
    },
    "3434": {
      "op": "bytec 26 // 0x00086563686f3a207332",
      "defined_out": [
        "0x00086563686f3a207332",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0",
        "0x00086563686f3a207332"
      ]
    },
    "3436": {
      "op": "==",
      "defined_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%4#0"
      ]
    },
    "3437": {
      "op": "assert",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3438": {
      "op": "uncover 2",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0"
      ]
    },
    "3440": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0",
        "2"
      ]
    },
    "3441": {
      "op": "==",
      "defined_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%5#0"
      ]
    },
    "3442": {
      "op": "assert",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3443": {
      "op": "swap",
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0"
      ]
    },
    "3444": {
      "op": "bytec 10 // 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0",
        "0x0000000000000003"
      ]
    },
    "3446": {
      "op": "b==",
      "defined_out": [
        "result.1.2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "tmp%6#0"
      ]
    },
    "3447": {
      "op": "assert",
      "stack_out": [
        "result.1.2#0"
      ]
    },
    "3448": {
      "op": "bytec 27 // 0x6563686f3a2033",
      "defined_out": [
        "0x6563686f3a2033",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "0x6563686f3a2033"
      ]
    },
    "3450": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "3451": {
      "op": "assert",
      "stack_out": []
    },
    "3452": {
      "op": "itxn_begin"
    },
    "3453": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3455": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3457": {
      "op": "bytec 18 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "stack_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "3459": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3461": {
      "op": "bytec 25 // 0x00040010000400080002733100027332000000000000000100000000000000020012000133",
      "stack_out": [
        "0x00040010000400080002733100027332000000000000000100000000000000020012000133"
      ]
    },
    "3463": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3465": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "3466": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3468": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3469": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3471": {
      "op": "itxn_submit"
    },
    "3472": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "3474": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3475": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "3478": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "awst_tmp%1#0"
      ]
    },
    "3479": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "3482": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "3483": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "3484": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "3485": {
      "op": "dup",
      "defined_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "3486": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "0"
      ]
    },
    "3487": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%5#0"
      ]
    },
    "3488": {
      "op": "dig 1",
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%5#0",
        "tmp%8#0 (copy)"
      ]
    },
    "3490": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%5#0",
        "tmp%8#0 (copy)",
        "2"
      ]
    },
    "3491": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%5#0",
        "item_start_offset%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0"
      ]
    },
    "3492": {
      "op": "dig 2",
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0",
        "tmp%8#0 (copy)"
      ]
    },
    "3494": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "tmp%8#0 (copy)",
        "item_start_offset%5#0"
      ]
    },
    "3496": {
      "op": "dig 2",
      "defined_out": [
        "item_end_offset%5#0",
        "item_end_offset%5#0 (copy)",
        "item_start_offset%5#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "tmp%8#0 (copy)",
        "item_start_offset%5#0",
        "item_end_offset%5#0 (copy)"
      ]
    },
    "3498": {
      "op": "substring3",
      "defined_out": [
        "encoded_item0%3#0",
        "item_end_offset%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "encoded_item0%3#0"
      ]
    },
    "3499": {
      "op": "dup",
      "defined_out": [
        "encoded_item0%3#0",
        "encoded_item0%3#0 (copy)",
        "item_end_offset%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "encoded_item0%3#0",
        "encoded_item0%3#0 (copy)"
      ]
    },
    "3500": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "encoded_item0%3#0",
        "encoded_item0%3#0 (copy)",
        "0"
      ]
    },
    "3501": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item0%3#0",
        "item_end_offset%5#0",
        "item_start_offset%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "encoded_item0%3#0",
        "item_start_offset%6#0"
      ]
    },
    "3502": {
      "op": "dig 1",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "encoded_item0%3#0",
        "item_start_offset%6#0",
        "encoded_item0%3#0 (copy)"
      ]
    },
    "3504": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "encoded_item0%3#0",
        "item_start_offset%6#0",
        "encoded_item0%3#0 (copy)",
        "2"
      ]
    },
    "3505": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item0%3#0",
        "item_end_offset%5#0",
        "item_end_offset%6#0",
        "item_start_offset%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "encoded_item0%3#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0"
      ]
    },
    "3506": {
      "op": "dig 2",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "encoded_item0%3#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0",
        "encoded_item0%3#0 (copy)"
      ]
    },
    "3508": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "encoded_item0%3#0",
        "item_end_offset%6#0",
        "encoded_item0%3#0 (copy)",
        "item_start_offset%6#0"
      ]
    },
    "3510": {
      "op": "dig 2",
      "defined_out": [
        "encoded_item0%3#0",
        "encoded_item0%3#0 (copy)",
        "item_end_offset%5#0",
        "item_end_offset%6#0",
        "item_end_offset%6#0 (copy)",
        "item_start_offset%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "encoded_item0%3#0",
        "item_end_offset%6#0",
        "encoded_item0%3#0 (copy)",
        "item_start_offset%6#0",
        "item_end_offset%6#0 (copy)"
      ]
    },
    "3512": {
      "op": "substring3",
      "defined_out": [
        "encoded_item0%3#0",
        "encoded_item0%4#0",
        "item_end_offset%5#0",
        "item_end_offset%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "encoded_item0%3#0",
        "item_end_offset%6#0",
        "encoded_item0%4#0"
      ]
    },
    "3513": {
      "op": "extract 2 0",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "encoded_item0%3#0",
        "item_end_offset%6#0",
        "result.0.0#0"
      ]
    },
    "3516": {
      "op": "dig 2",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "encoded_item0%3#0",
        "item_end_offset%6#0",
        "result.0.0#0",
        "encoded_item0%3#0 (copy)"
      ]
    },
    "3518": {
      "op": "len",
      "defined_out": [
        "encoded_item0%3#0",
        "item_end_offset%5#0",
        "item_end_offset%6#0",
        "item_end_offset%7#0",
        "result.0.0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "encoded_item0%3#0",
        "item_end_offset%6#0",
        "result.0.0#0",
        "item_end_offset%7#0"
      ]
    },
    "3519": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "item_end_offset%6#0",
        "result.0.0#0",
        "item_end_offset%7#0",
        "encoded_item0%3#0"
      ]
    },
    "3521": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "result.0.0#0",
        "item_end_offset%7#0",
        "encoded_item0%3#0",
        "item_end_offset%6#0"
      ]
    },
    "3523": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "result.0.0#0",
        "encoded_item0%3#0",
        "item_end_offset%6#0",
        "item_end_offset%7#0"
      ]
    },
    "3525": {
      "op": "substring3",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "result.0.0#0",
        "result.0.1#0"
      ]
    },
    "3526": {
      "op": "dig 3",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%8#0 (copy)"
      ]
    },
    "3528": {
      "op": "len",
      "defined_out": [
        "item_end_offset%5#0",
        "item_end_offset%8#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "result.0.0#0",
        "result.0.1#0",
        "item_end_offset%8#0"
      ]
    },
    "3529": {
      "op": "uncover 4",
      "stack_out": [
        "item_end_offset%5#0",
        "result.0.0#0",
        "result.0.1#0",
        "item_end_offset%8#0",
        "tmp%8#0"
      ]
    },
    "3531": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item_end_offset%8#0",
        "tmp%8#0",
        "item_end_offset%5#0"
      ]
    },
    "3533": {
      "op": "uncover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "tmp%8#0",
        "item_end_offset%5#0",
        "item_end_offset%8#0"
      ]
    },
    "3535": {
      "op": "substring3",
      "defined_out": [
        "encoded_item1%1#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%1#0"
      ]
    },
    "3536": {
      "op": "dup",
      "defined_out": [
        "encoded_item1%1#0",
        "encoded_item1%1#0 (copy)",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%1#0",
        "encoded_item1%1#0 (copy)"
      ]
    },
    "3537": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%1#0",
        "encoded_item1%1#0 (copy)",
        "0"
      ]
    },
    "3538": {
      "op": "extract_uint64",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%1#0",
        "result.1.0#0"
      ]
    },
    "3539": {
      "op": "dig 1",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%1#0",
        "result.1.0#0",
        "encoded_item1%1#0 (copy)"
      ]
    },
    "3541": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%1#0",
        "result.1.0#0",
        "result.1.1#0"
      ]
    },
    "3544": {
      "op": "dig 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%1#0",
        "result.1.0#0",
        "result.1.1#0",
        "encoded_item1%1#0 (copy)"
      ]
    },
    "3546": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%1#0",
        "result.1.0#0",
        "result.1.1#0",
        "encoded_item1%1#0 (copy)",
        "16"
      ]
    },
    "3548": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item1%1#0",
        "item_start_offset%9#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%9#0"
      ]
    },
    "3549": {
      "op": "dig 3",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%9#0",
        "encoded_item1%1#0 (copy)"
      ]
    },
    "3551": {
      "op": "len",
      "defined_out": [
        "encoded_item1%1#0",
        "item_end_offset%9#0",
        "item_start_offset%9#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%9#0",
        "item_end_offset%9#0"
      ]
    },
    "3552": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%9#0",
        "item_end_offset%9#0",
        "encoded_item1%1#0"
      ]
    },
    "3554": {
      "op": "cover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "encoded_item1%1#0",
        "item_start_offset%9#0",
        "item_end_offset%9#0"
      ]
    },
    "3556": {
      "op": "substring3",
      "defined_out": [
        "encoded_item2%1#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "encoded_item2%1#0"
      ]
    },
    "3557": {
      "op": "extract 2 0",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3560": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0"
      ]
    },
    "3562": {
      "op": "bytec 9 // \"echo: s1\"",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0",
        "\"echo: s1\""
      ]
    },
    "3564": {
      "op": "==",
      "defined_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%11#0"
      ]
    },
    "3565": {
      "op": "assert",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3566": {
      "op": "uncover 3",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0"
      ]
    },
    "3568": {
      "op": "bytec 26 // 0x00086563686f3a207332",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0",
        "0x00086563686f3a207332"
      ]
    },
    "3570": {
      "op": "==",
      "defined_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%12#0"
      ]
    },
    "3571": {
      "op": "assert",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3572": {
      "op": "uncover 2",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0"
      ]
    },
    "3574": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0",
        "2"
      ]
    },
    "3575": {
      "op": "==",
      "defined_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%13#0"
      ]
    },
    "3576": {
      "op": "assert",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3577": {
      "op": "swap",
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0"
      ]
    },
    "3578": {
      "op": "bytec 10 // 0x0000000000000003",
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0",
        "0x0000000000000003"
      ]
    },
    "3580": {
      "op": "b==",
      "defined_out": [
        "result.1.2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "tmp%14#0"
      ]
    },
    "3581": {
      "op": "assert",
      "stack_out": [
        "result.1.2#0"
      ]
    },
    "3582": {
      "op": "bytec 27 // 0x6563686f3a2033",
      "stack_out": [
        "result.1.2#0",
        "0x6563686f3a2033"
      ]
    },
    "3584": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "3585": {
      "op": "assert",
      "stack_out": []
    },
    "3586": {
      "op": "itxn_begin"
    },
    "3587": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3589": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3591": {
      "op": "bytec 18 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "stack_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "3593": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3595": {
      "op": "pushbytes 0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362",
      "defined_out": [
        "0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362"
      ],
      "stack_out": [
        "0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362"
      ]
    },
    "3637": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3639": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "3640": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3642": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3643": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3645": {
      "op": "itxn_submit"
    },
    "3646": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "3648": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3649": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%16#0"
      ]
    },
    "3652": {
      "op": "swap",
      "stack_out": [
        "tmp%16#0",
        "awst_tmp%2#0"
      ]
    },
    "3653": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "3656": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "3657": {
      "op": "==",
      "defined_out": [
        "tmp%16#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%18#0"
      ]
    },
    "3658": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "3659": {
      "op": "dup",
      "defined_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "3660": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "0"
      ]
    },
    "3661": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%10#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%10#0"
      ]
    },
    "3662": {
      "op": "dig 1",
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%10#0",
        "tmp%16#0 (copy)"
      ]
    },
    "3664": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%10#0",
        "tmp%16#0 (copy)",
        "2"
      ]
    },
    "3665": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%10#0",
        "item_start_offset%10#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%10#0",
        "item_end_offset%10#0"
      ]
    },
    "3666": {
      "op": "dig 2",
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%10#0",
        "item_end_offset%10#0",
        "tmp%16#0 (copy)"
      ]
    },
    "3668": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "tmp%16#0 (copy)",
        "item_start_offset%10#0"
      ]
    },
    "3670": {
      "op": "dig 2",
      "defined_out": [
        "item_end_offset%10#0",
        "item_end_offset%10#0 (copy)",
        "item_start_offset%10#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "tmp%16#0 (copy)",
        "item_start_offset%10#0",
        "item_end_offset%10#0 (copy)"
      ]
    },
    "3672": {
      "op": "substring3",
      "defined_out": [
        "encoded_item0%6#0",
        "item_end_offset%10#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "encoded_item0%6#0"
      ]
    },
    "3673": {
      "op": "dup",
      "defined_out": [
        "encoded_item0%6#0",
        "encoded_item0%6#0 (copy)",
        "item_end_offset%10#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "encoded_item0%6#0",
        "encoded_item0%6#0 (copy)"
      ]
    },
    "3674": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "encoded_item0%6#0",
        "encoded_item0%6#0 (copy)",
        "0"
      ]
    },
    "3675": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item0%6#0",
        "item_end_offset%10#0",
        "item_start_offset%11#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "encoded_item0%6#0",
        "item_start_offset%11#0"
      ]
    },
    "3676": {
      "op": "dig 1",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "encoded_item0%6#0",
        "item_start_offset%11#0",
        "encoded_item0%6#0 (copy)"
      ]
    },
    "3678": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "encoded_item0%6#0",
        "item_start_offset%11#0",
        "encoded_item0%6#0 (copy)",
        "2"
      ]
    },
    "3679": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item0%6#0",
        "item_end_offset%10#0",
        "item_end_offset%11#0",
        "item_start_offset%11#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "encoded_item0%6#0",
        "item_start_offset%11#0",
        "item_end_offset%11#0"
      ]
    },
    "3680": {
      "op": "dig 2",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "encoded_item0%6#0",
        "item_start_offset%11#0",
        "item_end_offset%11#0",
        "encoded_item0%6#0 (copy)"
      ]
    },
    "3682": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "encoded_item0%6#0",
        "item_end_offset%11#0",
        "encoded_item0%6#0 (copy)",
        "item_start_offset%11#0"
      ]
    },
    "3684": {
      "op": "dig 2",
      "defined_out": [
        "encoded_item0%6#0",
        "encoded_item0%6#0 (copy)",
        "item_end_offset%10#0",
        "item_end_offset%11#0",
        "item_end_offset%11#0 (copy)",
        "item_start_offset%11#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "encoded_item0%6#0",
        "item_end_offset%11#0",
        "encoded_item0%6#0 (copy)",
        "item_start_offset%11#0",
        "item_end_offset%11#0 (copy)"
      ]
    },
    "3686": {
      "op": "substring3",
      "defined_out": [
        "encoded_item0%6#0",
        "encoded_item0%7#0",
        "item_end_offset%10#0",
        "item_end_offset%11#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "encoded_item0%6#0",
        "item_end_offset%11#0",
        "encoded_item0%7#0"
      ]
    },
    "3687": {
      "op": "extract 2 0",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "encoded_item0%6#0",
        "item_end_offset%11#0",
        "result.0.0#0"
      ]
    },
    "3690": {
      "op": "dig 2",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "encoded_item0%6#0",
        "item_end_offset%11#0",
        "result.0.0#0",
        "encoded_item0%6#0 (copy)"
      ]
    },
    "3692": {
      "op": "len",
      "defined_out": [
        "encoded_item0%6#0",
        "item_end_offset%10#0",
        "item_end_offset%11#0",
        "item_end_offset%12#0",
        "result.0.0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "encoded_item0%6#0",
        "item_end_offset%11#0",
        "result.0.0#0",
        "item_end_offset%12#0"
      ]
    },
    "3693": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "item_end_offset%11#0",
        "result.0.0#0",
        "item_end_offset%12#0",
        "encoded_item0%6#0"
      ]
    },
    "3695": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "result.0.0#0",
        "item_end_offset%12#0",
        "encoded_item0%6#0",
        "item_end_offset%11#0"
      ]
    },
    "3697": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "result.0.0#0",
        "encoded_item0%6#0",
        "item_end_offset%11#0",
        "item_end_offset%12#0"
      ]
    },
    "3699": {
      "op": "substring3",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "result.0.0#0",
        "result.0.1#0"
      ]
    },
    "3700": {
      "op": "dig 3",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%16#0 (copy)"
      ]
    },
    "3702": {
      "op": "len",
      "defined_out": [
        "item_end_offset%10#0",
        "item_end_offset%13#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "result.0.0#0",
        "result.0.1#0",
        "item_end_offset%13#0"
      ]
    },
    "3703": {
      "op": "uncover 4",
      "stack_out": [
        "item_end_offset%10#0",
        "result.0.0#0",
        "result.0.1#0",
        "item_end_offset%13#0",
        "tmp%16#0"
      ]
    },
    "3705": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item_end_offset%13#0",
        "tmp%16#0",
        "item_end_offset%10#0"
      ]
    },
    "3707": {
      "op": "uncover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "tmp%16#0",
        "item_end_offset%10#0",
        "item_end_offset%13#0"
      ]
    },
    "3709": {
      "op": "substring3",
      "defined_out": [
        "encoded_item1%2#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%2#0"
      ]
    },
    "3710": {
      "op": "dup",
      "defined_out": [
        "encoded_item1%2#0",
        "encoded_item1%2#0 (copy)",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%2#0",
        "encoded_item1%2#0 (copy)"
      ]
    },
    "3711": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%2#0",
        "encoded_item1%2#0 (copy)",
        "0"
      ]
    },
    "3712": {
      "op": "extract_uint64",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%2#0",
        "result.1.0#0"
      ]
    },
    "3713": {
      "op": "dig 1",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%2#0",
        "result.1.0#0",
        "encoded_item1%2#0 (copy)"
      ]
    },
    "3715": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%2#0",
        "result.1.0#0",
        "result.1.1#0"
      ]
    },
    "3718": {
      "op": "dig 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%2#0",
        "result.1.0#0",
        "result.1.1#0",
        "encoded_item1%2#0 (copy)"
      ]
    },
    "3720": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%2#0",
        "result.1.0#0",
        "result.1.1#0",
        "encoded_item1%2#0 (copy)",
        "16"
      ]
    },
    "3722": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item1%2#0",
        "item_start_offset%14#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%2#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%14#0"
      ]
    },
    "3723": {
      "op": "dig 3",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%2#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%14#0",
        "encoded_item1%2#0 (copy)"
      ]
    },
    "3725": {
      "op": "len",
      "defined_out": [
        "encoded_item1%2#0",
        "item_end_offset%14#0",
        "item_start_offset%14#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "encoded_item1%2#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%14#0",
        "item_end_offset%14#0"
      ]
    },
    "3726": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%14#0",
        "item_end_offset%14#0",
        "encoded_item1%2#0"
      ]
    },
    "3728": {
      "op": "cover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "encoded_item1%2#0",
        "item_start_offset%14#0",
        "item_end_offset%14#0"
      ]
    },
    "3730": {
      "op": "substring3",
      "defined_out": [
        "encoded_item2%2#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "encoded_item2%2#0"
      ]
    },
    "3731": {
      "op": "extract 2 0",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3734": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0"
      ]
    },
    "3736": {
      "op": "pushbytes \"echo: s1b\"",
      "defined_out": [
        "\"echo: s1b\"",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0",
        "\"echo: s1b\""
      ]
    },
    "3747": {
      "op": "==",
      "defined_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%19#0"
      ]
    },
    "3748": {
      "op": "assert",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3749": {
      "op": "uncover 3",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0"
      ]
    },
    "3751": {
      "op": "pushbytes 0x00096563686f3a20733262",
      "defined_out": [
        "0x00096563686f3a20733262",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0",
        "0x00096563686f3a20733262"
      ]
    },
    "3764": {
      "op": "==",
      "defined_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%20#0"
      ]
    },
    "3765": {
      "op": "assert",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3766": {
      "op": "uncover 2",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0"
      ]
    },
    "3768": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0",
        "12"
      ]
    },
    "3770": {
      "op": "==",
      "defined_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%21#0"
      ]
    },
    "3771": {
      "op": "assert",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3772": {
      "op": "swap",
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0"
      ]
    },
    "3773": {
      "op": "pushbytes 0x0000000000000016",
      "defined_out": [
        "0x0000000000000016",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0",
        "0x0000000000000016"
      ]
    },
    "3783": {
      "op": "b==",
      "defined_out": [
        "result.1.2#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "tmp%22#0"
      ]
    },
    "3784": {
      "op": "assert",
      "stack_out": [
        "result.1.2#0"
      ]
    },
    "3785": {
      "op": "pushbytes 0x6563686f3a203362",
      "defined_out": [
        "0x6563686f3a203362",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "0x6563686f3a203362"
      ]
    },
    "3795": {
      "op": "==",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "3796": {
      "op": "assert",
      "stack_out": []
    },
    "3797": {
      "retsub": true,
      "op": "retsub"
    },
    "3798": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_no_args",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3801": {
      "op": "itxn_begin"
    },
    "3802": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3804": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3806": {
      "op": "bytec 19 // method \"no_args()uint64\"",
      "defined_out": [
        "Method(no_args()uint64)"
      ],
      "stack_out": [
        "Method(no_args()uint64)"
      ]
    },
    "3808": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3810": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "3811": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3813": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3814": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3816": {
      "op": "itxn_submit"
    },
    "3817": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3819": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3820": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3823": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3824": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3827": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "3828": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3829": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3830": {
      "op": "btoi",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "3831": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "42"
      ]
    },
    "3833": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "3834": {
      "op": "assert",
      "stack_out": []
    },
    "3835": {
      "op": "itxn_begin"
    },
    "3836": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3838": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3840": {
      "op": "bytec 19 // method \"no_args()uint64\"",
      "stack_out": [
        "Method(no_args()uint64)"
      ]
    },
    "3842": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3844": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "3845": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3847": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3848": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3850": {
      "op": "itxn_submit"
    },
    "3851": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "3853": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3854": {
      "op": "extract 4 0",
      "defined_out": [
        "arc4_result#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "arc4_result#0"
      ]
    },
    "3857": {
      "op": "swap",
      "stack_out": [
        "arc4_result#0",
        "awst_tmp%1#0"
      ]
    },
    "3858": {
      "op": "extract 0 4",
      "defined_out": [
        "arc4_result#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "arc4_result#0",
        "tmp%6#0"
      ]
    },
    "3861": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "arc4_result#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "3862": {
      "op": "==",
      "defined_out": [
        "arc4_result#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "arc4_result#0",
        "tmp%7#0"
      ]
    },
    "3863": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "arc4_result#0"
      ]
    },
    "3864": {
      "op": "bytec 28 // 0x000000000000002a",
      "defined_out": [
        "0x000000000000002a",
        "arc4_result#0"
      ],
      "stack_out": [
        "arc4_result#0",
        "0x000000000000002a"
      ]
    },
    "3866": {
      "op": "b==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "3867": {
      "op": "assert",
      "stack_out": []
    },
    "3868": {
      "op": "itxn_begin"
    },
    "3869": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3871": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3873": {
      "op": "bytec 19 // method \"no_args()uint64\"",
      "stack_out": [
        "Method(no_args()uint64)"
      ]
    },
    "3875": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3877": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "3878": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3880": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3881": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3883": {
      "op": "itxn_submit"
    },
    "3884": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "3886": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "3889": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "3890": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "3891": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "3892": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%3#0"
      ]
    },
    "3894": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3895": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%13#0"
      ]
    },
    "3898": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "awst_tmp%3#0"
      ]
    },
    "3899": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "3902": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "3903": {
      "op": "==",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "3904": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "3905": {
      "op": "bytec 28 // 0x000000000000002a",
      "stack_out": [
        "tmp%13#0",
        "0x000000000000002a"
      ]
    },
    "3907": {
      "op": "b==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "3908": {
      "op": "assert",
      "stack_out": []
    },
    "3909": {
      "retsub": true,
      "op": "retsub"
    },
    "3910": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_named_tuples",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3913": {
      "op": "itxn_begin"
    },
    "3914": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3916": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3918": {
      "op": "bytec 29 // method \"logs_are_equal((uint64,string),(uint64,string))bool\"",
      "defined_out": [
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ],
      "stack_out": [
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ]
    },
    "3920": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3922": {
      "op": "bytec 7 // 0x0000000000000001000a00056c6f672031",
      "defined_out": [
        "0x0000000000000001000a00056c6f672031"
      ],
      "stack_out": [
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "3924": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3926": {
      "op": "bytec 7 // 0x0000000000000001000a00056c6f672031",
      "stack_out": [
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "3928": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3930": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "3931": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3933": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3934": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3936": {
      "op": "itxn_submit"
    },
    "3937": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3939": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3940": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3943": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3944": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3947": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "3948": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3949": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3950": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "3951": {
      "op": "getbit",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "3952": {
      "op": "assert",
      "stack_out": []
    },
    "3953": {
      "op": "itxn_begin"
    },
    "3954": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3956": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3958": {
      "op": "bytec 29 // method \"logs_are_equal((uint64,string),(uint64,string))bool\"",
      "stack_out": [
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ]
    },
    "3960": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3962": {
      "op": "pushbytes 0x0000000000000002000a00056c6f672032",
      "defined_out": [
        "0x0000000000000002000a00056c6f672032"
      ],
      "stack_out": [
        "0x0000000000000002000a00056c6f672032"
      ]
    },
    "3981": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3983": {
      "op": "bytec 7 // 0x0000000000000001000a00056c6f672031",
      "stack_out": [
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "3985": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3987": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "3988": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3990": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3991": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3993": {
      "op": "itxn_submit"
    },
    "3994": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "3996": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3997": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "4000": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "awst_tmp%1#0"
      ]
    },
    "4001": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "4004": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "4005": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "4006": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "4007": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "4008": {
      "op": "getbit",
      "stack_out": [
        "result#0"
      ]
    },
    "4009": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "4010": {
      "op": "assert",
      "stack_out": []
    },
    "4011": {
      "retsub": true,
      "op": "retsub"
    },
    "4012": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_arc4_struct",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "4015": {
      "op": "itxn_begin"
    },
    "4016": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "4018": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "4020": {
      "op": "pushbytes 0xdc4f1992 // method \"echo_log_struct((uint64,string))(uint64,string)\"",
      "defined_out": [
        "Method(echo_log_struct((uint64,string))(uint64,string))"
      ],
      "stack_out": [
        "Method(echo_log_struct((uint64,string))(uint64,string))"
      ]
    },
    "4026": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4028": {
      "op": "bytec 7 // 0x0000000000000001000a00056c6f672031",
      "defined_out": [
        "0x0000000000000001000a00056c6f672031"
      ],
      "stack_out": [
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "4030": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4032": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "4033": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4035": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4036": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4038": {
      "op": "itxn_submit"
    },
    "4039": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "4041": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "4042": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "result#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result#0"
      ]
    },
    "4045": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "awst_tmp%0#0"
      ]
    },
    "4046": {
      "op": "extract 0 4",
      "defined_out": [
        "result#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%1#0"
      ]
    },
    "4049": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "result#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "4050": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%2#0"
      ]
    },
    "4051": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result#0"
      ]
    },
    "4052": {
      "op": "itxn LastLog",
      "defined_out": [
        "result#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "result#0",
        "txn.LastLog#0"
      ]
    },
    "4054": {
      "op": "swap",
      "stack_out": [
        "txn.LastLog#0",
        "result#0"
      ]
    },
    "4055": {
      "op": "bytec 7 // 0x0000000000000001000a00056c6f672031",
      "stack_out": [
        "txn.LastLog#0",
        "result#0",
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "4057": {
      "op": "==",
      "defined_out": [
        "tmp%3#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%3#0"
      ]
    },
    "4058": {
      "error": "expected output to match input",
      "op": "assert // expected output to match input",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "4059": {
      "op": "dup",
      "defined_out": [
        "txn.LastLog#0",
        "txn.LastLog#0 (copy)"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "txn.LastLog#0 (copy)"
      ]
    },
    "4060": {
      "op": "extract 4 0",
      "defined_out": [
        "tmp%4#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%4#0"
      ]
    },
    "4063": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "txn.LastLog#0"
      ]
    },
    "4064": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "4067": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "4068": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "4069": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "4070": {
      "op": "bytec 7 // 0x0000000000000001000a00056c6f672031",
      "stack_out": [
        "tmp%4#0",
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "4072": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "4073": {
      "error": "expected output to match input",
      "op": "assert // expected output to match input",
      "stack_out": []
    },
    "4074": {
      "retsub": true,
      "op": "retsub"
    }
  }
}