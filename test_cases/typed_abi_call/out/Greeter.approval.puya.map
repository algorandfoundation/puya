{
  "version": 3,
  "sources": [
    "../typed_c2c.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AACK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEG;;;AAAA;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAFH;;AAAA;AASA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGkB;;;;AAAA;;;AAA2B;;;;;;;;;;;AAA3B;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;;;;AAAA;;;AAAiC;;;;;;;;;;;AAAjC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;;;;AAAA;;;AAAmC;;;;;;;;;;;AAAnC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;;;;AAAA;;;AAA2C;;;;;;;;;;;AAA3C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;;;AAAA;;;AAAiD;;;;;;;;;;;AAAjD;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAZV;AAcA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEG;;;;AAAA;;;AAAiD;;;;;;;;;;;;;;;;;;;;AAAjD;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;;;;;;;;;;;;;;;;;;;;;;;AAA5C;AAAP;AAEA;;;;AAAA;;;AAAoC;;;;;;;;;;;;;;;;;;;;;;AAApC;;;AAAA;;;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;;;;;;;;;;;;;;;;;;;;;;;;;AAA5C;AAAP;AAES;;;;AAAA;;;AAAiD;;;;;;;;;;;AAAjD;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AACF;AAAa;;AAAb;AAAP;AACO;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AADa;;AACb;AAAP;AAEa;;;AAAA;;;AAAoC;;;;;;;;;;;;;AAApC;;;AAAA;;;AAAA;;;AACN;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA6C;;;;;;;;;;;;;;;;;AAA7C;AAbV;AAeA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAES;;;;AAAA;;;;AAAiC;;;;;;;;;;;;;;;;AAAjC;;;AAAA;;;AAAA;;;AACiB;;;;;;;;;;;;AAAhB;AAAP;AAEM;;;;AAAA;;;;;;;;AAAiC;;;;AAAjC;;;AAAA;;;AAAA;;;AACyB;AAAR;AAAhB;AAAP;AAEM;;;;AAAA;;;;;;;;AAAkC;;;;AAAlC;;;AAAA;;;AAAA;;;AACkB;;AAAjB;AAAP;AAEM;;;;AAAA;;;;;;;;AAAgC;;;;;;;AAAhC;;;AAAA;;;AAAA;;;AACiB;;;AAAhB;AAAP;AAEM;;;AAAA;;;;;;;;AAA+B;;;;;AAA/B;;;AAAA;;;AAAA;;;AACiB;;;;;;AAAhB;AAfV;AAiBA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEiB;;;AAAA;;;;;;;;AAEV;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;AAhBU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAwBP;;;AAAiB;;AAAjB;AA1BV;AA4BA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAES;;;;AAAA;;;;AAAgD;;;;;;;;;;;;AAAhD;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;AAEM;;;;AAAA;;;;AAA4C;;;;;;;;;;;;AAA5C;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;AAEM;;;;AAAA;;;;AAA+B;;;;;;;;;;;;AAA/B;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;AAEM;;;AAAA;;;;AAAiC;;;;;;;;;;;;AAAjC;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAZV;AAcA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAES;AAGF;;;;;;AAHE;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;AASC;AAAA;;AAAA;AAAa;;AAAb;AAAwD;;AAAA;;AAAA;AAAxD;AADH;AAVP;AAcA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAES;AAEF;;;;;AAFE;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;AAKiB;;AAAhB;AAPV;AASA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB;;;;AAAA;;;;AAAyC;;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;AAAW;;;;;;;;;AAAX;AAAP;AAEgB;;;;;AAAA;;;;AAHyC;;;;AAGzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;;AAAA;AAAP;AAEgB;;;;AAAA;;;;AANyC;;;;AAMzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;AATV;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB;;;;AAAA;;;;AAAwC;;;;AAAxC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;AAAW;;;;;;;;;AAAX;AAAP;AAEgB;;;;;AAAA;;;;AAHwC;;;;AAGxC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;;AAAA;AAAP;AAEgB;;;;AAAA;;;;AANwC;;;;AAMxC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAGT;AAXV;AAaA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB;;;;AAAA;;;;AAAyC;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACT;AAAW;AAAX;AAAP;AAEgB;AAAyC;;AAAA;;;;;AAAzC;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;AAEgB;;;;AAAA;;;;AAAyC;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACT;AATV;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB;;;;AAAA;;;;AAA0C;;;AAA1C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACT;AAAW;;AAAX;AAAP;AAEgB;;;;;AAAA;;;;AAA0C;;;AAA1C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;AAEgB;;;;AAAA;;;;AAA0C;;;AAA1C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACT;AATV;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGkB;;;;AAAA;;;;AAIX;;;;AACA;;;;AACA;;;AACA;;;AAPW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAUD;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;AACP;;AAAA;;;AAAA;AAAY;;AAAZ;AAAP;AACO;;AAAA;;;AAAA;AAAY;;AAAZ;AAAP;AACO;;;AAAA;AAAA;AAAiB;AAAjB;AAAP;AACO;;AAAmB;;AAAnB;AAAP;AAGe;AAMX;;AAAA;;;;;AANW;;;;AAbX;;;;AACA;;;;;;AAmBA;;;AAPW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAUR;;AAAA;AAAP;AAGe;;;;;AAAA;;;;AA1BX;;;;AACA;;;;AA+BA;;;AACA;;;AAPW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAUR;;AAAA;AAAP;AAGqB;;;;;AAAA;;;;AAvCjB;;;;AACA;;;;AA0CA;;;AACA;;;AALiB;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAQd;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAP;AACO;;AAAA;AAAP;AACO;AAzDV;AA2DA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGiB;;;;AAAA;;;;AAEV;;;;AACA;;;;AACA;;;AACA;;;AALU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;AASP;;AAAK;;AAAL;AAAP;AACO;;AAAK;;AAAL;AAAP;AACO;;AAAK;AAAL;AAAP;AACO;AAAM;;AAAN;AAAP;AAGgB;AAIZ;;AAAA;;;;;AAJY;;;;AAbZ;;;;AACA;;;;;;AAiBA;;;AALY;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAQT;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAGgB;;;;;AAAA;;;;AAxBZ;;;;AACA;;;;AA2BA;;;AACA;;;AALY;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAQT;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAGqB;;;;;AAAA;;;;AAnCjB;;;;AACA;;;;AAsCA;;;AACA;;;AALiB;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAQd;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAhDV;AAkDA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGiB;;;;AAAA;;;;AAEV;;;;AAFU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAMP;;AAAM;;AAAN;AAAP;AACO;;AAAM;;AAAN;AAAP;AACO;;AAAS;AAAT;AAAP;AACO;AAAS;;AAAT;AAAP;AACgB;;AAAT;AAAP;AAGc;;;;AAAA;;;;AAEV;;;;AAFU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAMP;;AAAM;;AAAN;AAAP;AACO;;AAbM;;AAaN;AAAP;AACO;;AAAS;AAAT;AAAP;AACO;AAAS;;AAAT;AAAP;AACgB;;AAAT;AAAP;AAGc;;;AAAA;;;;AAEV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAWP;;AAAM;;;;;;;;;;;AAAN;AAAP;AACO;;AAAM;;;;;;;;;;;;;AAAN;AAAP;AACO;;AAAS;;AAAT;AAAP;AACO;AAAS;;;;;;;;;;AAAT;AAAP;AACgB;;;;;;;;;;AAAT;AA5CV;AA8CA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEkB;;;;AAAA;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACE;;AAAV;AAAP;AACoB;;;;AAAA;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;AAAf;AAAP;AAEA;;;AAAA;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;AAA5C;AARV;AAUA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEkB;;;;AAAA;;;;AAEX;;;;AACA;;;;AAHW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMf;AACe;;;AAAA;;;;AAEX;;;;;;;;;;;;;;;;;;;;;AANA;;;;AAIW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMR;AAfV;AAiBA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGiB;;;AAAA;;;;;;;;AADR;;;;AACQ;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAKP;AAND;;AAMC;AAAP;AACO;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAPD;;AAOC;AATV;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAES;;AACA;;AAEQ;;;;;;;;;;;;;;;;AAAA;;;;AACqB;;;;AAAO;;;;AAAK;;;;AADjC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;;;AAGP;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAEc;AAC4B;;AAAA;;;;;AAD5B;;;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;;;AAGP;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAEc;;;;;;;;;;;;;;;;;AAAA;;;;AAC2B;;;;AAAO;;;;AAAK;;;;AADvC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;;;AAGP;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAEc;;;;;AAAA;;;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;;;AAGP;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAEc;;;;;;;;;;;;;;;;;AAAA;;;;AAEV;;;;AACA;;;;AACA;;;;AAJU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;;;AAOP;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAEc;;;;;AAAA;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;;;AAOP;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAzCV",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 6 2 8"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x9bf81913 0x0000000000000001 0x16e03919 0x00027331 0x00026231 0x0000000000000001000a00056c6f672031 0x01 0xb4b4334e \"echo: s1\" 0x0000000000000003 0x4a444c77 0x000173 0x2659e818 0x000162 0xa9fb6cf1 0xd8cc363b 0x03 0xab271ce4 0xb862ee19 0xd6c2ac7f 0x00 0x48142d5e 0x000b6563686f3a207475706c65 0x0000000000000002 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003 0x0f101112deadbeef14 0x6563686f3a206231 0x00040010000400080002733100027332000000000000000100000000000000020012000133 0x00086563686f3a207332 0x6563686f3a2033 0x000000000000002a 0xddd07185"
    },
    "381": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "383": {
      "op": "bz main___algopy_default_create@26",
      "stack_out": []
    },
    "386": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "388": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "389": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "390": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "392": {
      "op": "assert",
      "stack_out": []
    },
    "393": {
      "op": "pushbytess 0x094418cd 0x31e8e212 0xb5dcf0ba 0xbf3b242b 0x063beac7 0xe9f3087d 0xc88920f9 0xc2f21b73 0x86052a5c 0xe85f2441 0x92082d08 0x6211cd59 0x19eed724 0x92f75ee2 0xe748ef8e 0xc7b94959 0x868e49e7 0xaccd5072 0xf7f3d8ac // method \"test_is_a_b(byte[],byte[],uint64)void\", method \"test_method_selector_kinds(uint64)void\", method \"test_method_overload(uint64)void\", method \"test_arg_conversion(uint64)void\", method \"test_15plus_args(uint64)void\", method \"test_void(uint64)void\", method \"test_ref_types(uint64,uint64)void\", method \"test_account_to_address(uint64)void\", method \"test_native_string(uint64)void\", method \"test_native_bytes(uint64)void\", method \"test_native_uint64(uint64)void\", method \"test_native_biguint(uint64)void\", method \"test_native_tuple(uint64)void\", method \"test_native_tuple_method_ref(uint64)void\", method \"test_nested_tuples(uint64)void\", method \"test_no_args(uint64)void\", method \"test_named_tuples(uint64)void\", method \"test_arc4_struct(uint64)void\", method \"test_resource_encoding(uint64,uint64)void\"",
      "defined_out": [
        "Method(test_15plus_args(uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_arc4_struct(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_named_tuples(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_nested_tuples(uint64)void)",
        "Method(test_no_args(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_resource_encoding(uint64,uint64)void)",
        "Method(test_void(uint64)void)"
      ],
      "stack_out": [
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)",
        "Method(test_void(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_nested_tuples(uint64)void)",
        "Method(test_no_args(uint64)void)",
        "Method(test_named_tuples(uint64)void)",
        "Method(test_arc4_struct(uint64)void)",
        "Method(test_resource_encoding(uint64,uint64)void)"
      ]
    },
    "490": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(test_15plus_args(uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_arc4_struct(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_named_tuples(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_nested_tuples(uint64)void)",
        "Method(test_no_args(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_resource_encoding(uint64,uint64)void)",
        "Method(test_void(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)",
        "Method(test_void(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_nested_tuples(uint64)void)",
        "Method(test_no_args(uint64)void)",
        "Method(test_named_tuples(uint64)void)",
        "Method(test_arc4_struct(uint64)void)",
        "Method(test_resource_encoding(uint64,uint64)void)",
        "tmp%6#0"
      ]
    },
    "493": {
      "op": "match test_is_a_b test_method_selector_kinds test_method_overload test_arg_conversion test_15plus_args test_void test_ref_types test_account_to_address test_native_string test_native_bytes test_native_uint64 test_native_biguint test_native_tuple test_native_tuple_method_ref test_nested_tuples test_no_args test_named_tuples test_arc4_struct test_resource_encoding",
      "stack_out": []
    },
    "533": {
      "op": "err"
    },
    "534": {
      "block": "main___algopy_default_create@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "536": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "537": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "539": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "540": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "541": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "542": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b[routing]",
      "params": {},
      "block": "test_is_a_b",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "545": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "546": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "547": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "548": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "549": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "550": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "552": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "553": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "554": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "555": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "558": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "559": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "560": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "aggregate%array_length%1#0"
      ]
    },
    "561": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "562": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0"
      ]
    },
    "563": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "565": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "566": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "567": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "568": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "571": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "572": {
      "op": "len",
      "defined_out": [
        "len%2#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "len%2#0"
      ]
    },
    "573": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%2#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "len%2#0",
        "8"
      ]
    },
    "574": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "eq%2#0"
      ]
    },
    "575": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "576": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "577": {
      "op": "itxn_begin"
    },
    "578": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "580": {
      "op": "pushbytes 0xc77212bc // method \"is_a_b(byte[],byte[])void\"",
      "defined_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)"
      ]
    },
    "586": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "588": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "589": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "591": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "593": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "594": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "596": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "597": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "599": {
      "op": "itxn_submit"
    },
    "600": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "602": {
      "op": "return",
      "stack_out": []
    },
    "603": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds[routing]",
      "params": {},
      "block": "test_method_selector_kinds",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "606": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "607": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "608": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "609": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "610": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "611": {
      "op": "btoi",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0"
      ]
    },
    "612": {
      "op": "itxn_begin"
    },
    "613": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "614": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "616": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "Method(echo(string)string)"
      ]
    },
    "617": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "619": {
      "op": "pushbytes 0x00057465737431",
      "defined_out": [
        "0x00057465737431",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x00057465737431"
      ]
    },
    "628": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "630": {
      "op": "intc_1 // appl",
      "defined_out": [
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "631": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "633": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "634": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "636": {
      "op": "itxn_submit"
    },
    "637": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0"
      ]
    },
    "639": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "640": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result#0"
      ]
    },
    "643": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "644": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result#0",
        "result#0 (copy)",
        "0"
      ]
    },
    "645": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "app#0",
        "awst_tmp%0#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result#0",
        "aggregate%array_length%0#0"
      ]
    },
    "646": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "app#0",
        "awst_tmp%0#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "647": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "app#0",
        "awst_tmp%0#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result#0",
        "add%0#0"
      ]
    },
    "648": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result#0",
        "add%0#0",
        "result#0 (copy)"
      ]
    },
    "650": {
      "op": "len",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "651": {
      "op": "==",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result#0",
        "eq%0#0"
      ]
    },
    "652": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result#0"
      ]
    },
    "653": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "result#0",
        "awst_tmp%0#0"
      ]
    },
    "654": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "result#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "result#0",
        "tmp%3#0"
      ]
    },
    "657": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "app#0",
        "result#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "result#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "658": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "result#0",
        "tmp%4#0"
      ]
    },
    "659": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "result#0"
      ]
    },
    "660": {
      "op": "pushbytes 0x000b6563686f3a207465737431",
      "defined_out": [
        "0x000b6563686f3a207465737431",
        "app#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "result#0",
        "0x000b6563686f3a207465737431"
      ]
    },
    "675": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%6#0"
      ]
    },
    "676": {
      "op": "assert",
      "stack_out": [
        "app#0"
      ]
    },
    "677": {
      "op": "itxn_begin"
    },
    "678": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "679": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "681": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "app#0",
        "Method(echo(string)string)"
      ]
    },
    "682": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "684": {
      "op": "pushbytes 0x00057465737432",
      "defined_out": [
        "0x00057465737432",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x00057465737432"
      ]
    },
    "693": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "695": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "696": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "698": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "699": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "701": {
      "op": "itxn_submit"
    },
    "702": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0"
      ]
    },
    "704": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "705": {
      "op": "extract 4 0",
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "result#0"
      ]
    },
    "708": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "709": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "result#0",
        "result#0 (copy)",
        "0"
      ]
    },
    "710": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#0",
        "app#0",
        "awst_tmp%1#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "result#0",
        "aggregate%array_length%1#0"
      ]
    },
    "711": {
      "op": "intc_2 // 2",
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "result#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "712": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "app#0",
        "awst_tmp%1#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "result#0",
        "add%1#0"
      ]
    },
    "713": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "result#0",
        "add%1#0",
        "result#0 (copy)"
      ]
    },
    "715": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "app#0",
        "awst_tmp%1#0",
        "len%1#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "result#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "716": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "eq%1#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "result#0",
        "eq%1#0"
      ]
    },
    "717": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "result#0"
      ]
    },
    "718": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "result#0",
        "awst_tmp%1#0"
      ]
    },
    "719": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "result#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result#0",
        "tmp%9#0"
      ]
    },
    "722": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "result#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "723": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "app#0",
        "result#0",
        "tmp%10#0"
      ]
    },
    "724": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "result#0"
      ]
    },
    "725": {
      "op": "pushbytes 0x000b6563686f3a207465737432",
      "defined_out": [
        "0x000b6563686f3a207465737432",
        "app#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "result#0",
        "0x000b6563686f3a207465737432"
      ]
    },
    "740": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%12#0"
      ]
    },
    "741": {
      "op": "assert",
      "stack_out": [
        "app#0"
      ]
    },
    "742": {
      "op": "itxn_begin"
    },
    "743": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "744": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "746": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "app#0",
        "Method(echo(string)string)"
      ]
    },
    "747": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "749": {
      "op": "pushbytes 0x00057465737433",
      "defined_out": [
        "0x00057465737433",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x00057465737433"
      ]
    },
    "758": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "760": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "761": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "763": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "764": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "766": {
      "op": "itxn_submit"
    },
    "767": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%2#0"
      ]
    },
    "769": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "770": {
      "op": "extract 4 0",
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "result#0"
      ]
    },
    "773": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "774": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "result#0",
        "result#0 (copy)",
        "0"
      ]
    },
    "775": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%2#0",
        "app#0",
        "awst_tmp%2#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "result#0",
        "aggregate%array_length%2#0"
      ]
    },
    "776": {
      "op": "intc_2 // 2",
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "result#0",
        "aggregate%array_length%2#0",
        "2"
      ]
    },
    "777": {
      "op": "+",
      "defined_out": [
        "add%2#0",
        "app#0",
        "awst_tmp%2#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "result#0",
        "add%2#0"
      ]
    },
    "778": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "result#0",
        "add%2#0",
        "result#0 (copy)"
      ]
    },
    "780": {
      "op": "len",
      "defined_out": [
        "add%2#0",
        "app#0",
        "awst_tmp%2#0",
        "len%2#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "result#0",
        "add%2#0",
        "len%2#0"
      ]
    },
    "781": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%2#0",
        "eq%2#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "result#0",
        "eq%2#0"
      ]
    },
    "782": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "result#0"
      ]
    },
    "783": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "result#0",
        "awst_tmp%2#0"
      ]
    },
    "784": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "result#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "app#0",
        "result#0",
        "tmp%15#0"
      ]
    },
    "787": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "result#0",
        "tmp%15#0",
        "0x151f7c75"
      ]
    },
    "788": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "app#0",
        "result#0",
        "tmp%16#0"
      ]
    },
    "789": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "result#0"
      ]
    },
    "790": {
      "op": "pushbytes 0x000b6563686f3a207465737433",
      "defined_out": [
        "0x000b6563686f3a207465737433",
        "app#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "result#0",
        "0x000b6563686f3a207465737433"
      ]
    },
    "805": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%18#0"
      ]
    },
    "806": {
      "op": "assert",
      "stack_out": [
        "app#0"
      ]
    },
    "807": {
      "op": "itxn_begin"
    },
    "808": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "809": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "811": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "app#0",
        "Method(echo(string)string)"
      ]
    },
    "812": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "814": {
      "op": "pushbytes 0x00057465737434",
      "defined_out": [
        "0x00057465737434",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x00057465737434"
      ]
    },
    "823": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "825": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "826": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "828": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "829": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "831": {
      "op": "itxn_submit"
    },
    "832": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%3#0"
      ]
    },
    "834": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "835": {
      "op": "extract 4 0",
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result#0"
      ]
    },
    "838": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "839": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result#0",
        "result#0 (copy)",
        "0"
      ]
    },
    "840": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%3#0",
        "app#0",
        "awst_tmp%3#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result#0",
        "aggregate%array_length%3#0"
      ]
    },
    "841": {
      "op": "intc_2 // 2",
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result#0",
        "aggregate%array_length%3#0",
        "2"
      ]
    },
    "842": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "app#0",
        "awst_tmp%3#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result#0",
        "add%3#0"
      ]
    },
    "843": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result#0",
        "add%3#0",
        "result#0 (copy)"
      ]
    },
    "845": {
      "op": "len",
      "defined_out": [
        "add%3#0",
        "app#0",
        "awst_tmp%3#0",
        "len%3#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result#0",
        "add%3#0",
        "len%3#0"
      ]
    },
    "846": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%3#0",
        "eq%3#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result#0",
        "eq%3#0"
      ]
    },
    "847": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result#0"
      ]
    },
    "848": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "result#0",
        "awst_tmp%3#0"
      ]
    },
    "849": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "result#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "app#0",
        "result#0",
        "tmp%21#0"
      ]
    },
    "852": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "result#0",
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "853": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "app#0",
        "result#0",
        "tmp%22#0"
      ]
    },
    "854": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "result#0"
      ]
    },
    "855": {
      "op": "pushbytes 0x000b6563686f3a207465737434",
      "defined_out": [
        "0x000b6563686f3a207465737434",
        "app#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "result#0",
        "0x000b6563686f3a207465737434"
      ]
    },
    "870": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%24#0"
      ]
    },
    "871": {
      "op": "assert",
      "stack_out": [
        "app#0"
      ]
    },
    "872": {
      "op": "itxn_begin"
    },
    "873": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "875": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "876": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "878": {
      "op": "pushbytes 0x00057465737435",
      "defined_out": [
        "0x00057465737435"
      ],
      "stack_out": [
        "0x00057465737435"
      ]
    },
    "887": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "889": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "890": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "892": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "893": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "895": {
      "op": "itxn_submit"
    },
    "896": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%4#0"
      ]
    },
    "898": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ]
    },
    "899": {
      "op": "extract 4 0",
      "stack_out": [
        "awst_tmp%4#0",
        "result#0"
      ]
    },
    "902": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%4#0",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "903": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%4#0",
        "result#0",
        "result#0 (copy)",
        "0"
      ]
    },
    "904": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%4#0",
        "awst_tmp%4#0",
        "result#0"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "result#0",
        "aggregate%array_length%4#0"
      ]
    },
    "905": {
      "op": "intc_2 // 2",
      "stack_out": [
        "awst_tmp%4#0",
        "result#0",
        "aggregate%array_length%4#0",
        "2"
      ]
    },
    "906": {
      "op": "+",
      "defined_out": [
        "add%4#0",
        "awst_tmp%4#0",
        "result#0"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "result#0",
        "add%4#0"
      ]
    },
    "907": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%4#0",
        "result#0",
        "add%4#0",
        "result#0 (copy)"
      ]
    },
    "909": {
      "op": "len",
      "defined_out": [
        "add%4#0",
        "awst_tmp%4#0",
        "len%4#0",
        "result#0"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "result#0",
        "add%4#0",
        "len%4#0"
      ]
    },
    "910": {
      "op": "==",
      "defined_out": [
        "awst_tmp%4#0",
        "eq%4#0",
        "result#0"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "result#0",
        "eq%4#0"
      ]
    },
    "911": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "awst_tmp%4#0",
        "result#0"
      ]
    },
    "912": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "awst_tmp%4#0"
      ]
    },
    "913": {
      "op": "extract 0 4",
      "defined_out": [
        "result#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%27#0"
      ]
    },
    "916": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result#0",
        "tmp%27#0",
        "0x151f7c75"
      ]
    },
    "917": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%28#0"
      ]
    },
    "918": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result#0"
      ]
    },
    "919": {
      "op": "pushbytes 0x000b6563686f3a207465737435",
      "defined_out": [
        "0x000b6563686f3a207465737435",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737435"
      ]
    },
    "934": {
      "op": "==",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "935": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "936": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload[routing]",
      "params": {},
      "block": "test_method_overload",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "939": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "940": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "941": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "942": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "943": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "944": {
      "op": "btoi",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0"
      ]
    },
    "945": {
      "op": "itxn_begin"
    },
    "946": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "947": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "949": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "Method(echo(string)string)"
      ]
    },
    "950": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "952": {
      "op": "pushbytes 0x000e7479706564202b2069676e6f7265",
      "defined_out": [
        "0x000e7479706564202b2069676e6f7265",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x000e7479706564202b2069676e6f7265"
      ]
    },
    "970": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "972": {
      "op": "intc_1 // appl",
      "defined_out": [
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "973": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "975": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "976": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "978": {
      "op": "itxn_submit"
    },
    "979": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0"
      ]
    },
    "981": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "982": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1"
      ]
    },
    "985": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1",
        "tmp%1#1 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1",
        "tmp%1#1 (copy)"
      ]
    },
    "986": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1",
        "tmp%1#1 (copy)",
        "0"
      ]
    },
    "987": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1",
        "aggregate%array_length%0#0"
      ]
    },
    "988": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "989": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1",
        "add%0#0"
      ]
    },
    "990": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "add%0#0",
        "tmp%1#1"
      ]
    },
    "991": {
      "op": "len",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "992": {
      "op": "==",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "eq%0#0"
      ]
    },
    "993": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0"
      ]
    },
    "994": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%2#0"
      ]
    },
    "997": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "app#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "998": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%3#0"
      ]
    },
    "999": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0"
      ]
    },
    "1000": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0"
      ]
    },
    "1002": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "1003": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "1006": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "1007": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "0"
      ]
    },
    "1008": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#0",
        "app#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "aggregate%array_length%1#0"
      ]
    },
    "1009": {
      "op": "intc_2 // 2",
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "1010": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "app#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "add%1#0"
      ]
    },
    "1011": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "add%1#0",
        "tmp%4#0 (copy)"
      ]
    },
    "1013": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "app#0",
        "awst_tmp%1#0",
        "len%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "1014": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "eq%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "eq%1#0"
      ]
    },
    "1015": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "1016": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "awst_tmp%1#0"
      ]
    },
    "1017": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1020": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "1021": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "1022": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "tmp%4#0"
      ]
    },
    "1023": {
      "op": "pushbytes 0x00146563686f3a207479706564202b2069676e6f7265",
      "defined_out": [
        "0x00146563686f3a207479706564202b2069676e6f7265",
        "app#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "0x00146563686f3a207479706564202b2069676e6f7265"
      ]
    },
    "1047": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%8#0"
      ]
    },
    "1048": {
      "op": "assert",
      "stack_out": [
        "app#0"
      ]
    },
    "1049": {
      "op": "itxn_begin"
    },
    "1050": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "1051": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "1053": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "app#0",
        "Method(echo(string)string)"
      ]
    },
    "1054": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1056": {
      "op": "pushbytes 0x0010756e7479706564202b2069676e6f7265",
      "defined_out": [
        "0x0010756e7479706564202b2069676e6f7265",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x0010756e7479706564202b2069676e6f7265"
      ]
    },
    "1076": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1078": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "1079": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "1081": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "1082": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "1084": {
      "op": "itxn_submit"
    },
    "1085": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%2#0"
      ]
    },
    "1087": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "1088": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "tmp%10#0"
      ]
    },
    "1091": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%2#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "1092": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "0"
      ]
    },
    "1093": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%2#0",
        "app#0",
        "awst_tmp%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "tmp%10#0",
        "aggregate%array_length%2#0"
      ]
    },
    "1094": {
      "op": "intc_2 // 2",
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "tmp%10#0",
        "aggregate%array_length%2#0",
        "2"
      ]
    },
    "1095": {
      "op": "+",
      "defined_out": [
        "add%2#0",
        "app#0",
        "awst_tmp%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "tmp%10#0",
        "add%2#0"
      ]
    },
    "1096": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "tmp%10#0",
        "add%2#0",
        "tmp%10#0 (copy)"
      ]
    },
    "1098": {
      "op": "len",
      "defined_out": [
        "add%2#0",
        "app#0",
        "awst_tmp%2#0",
        "len%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "tmp%10#0",
        "add%2#0",
        "len%2#0"
      ]
    },
    "1099": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%2#0",
        "eq%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "tmp%10#0",
        "eq%2#0"
      ]
    },
    "1100": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "app#0",
        "awst_tmp%2#0",
        "tmp%10#0"
      ]
    },
    "1101": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "tmp%10#0",
        "awst_tmp%2#0"
      ]
    },
    "1102": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "1105": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "tmp%10#0",
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "1106": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "1107": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "tmp%10#0"
      ]
    },
    "1108": {
      "op": "pushbytes 0x00166563686f3a20756e7479706564202b2069676e6f7265",
      "defined_out": [
        "0x00166563686f3a20756e7479706564202b2069676e6f7265",
        "app#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%10#0",
        "0x00166563686f3a20756e7479706564202b2069676e6f7265"
      ]
    },
    "1134": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%14#0"
      ]
    },
    "1135": {
      "op": "assert",
      "stack_out": [
        "app#0"
      ]
    },
    "1136": {
      "op": "itxn_begin"
    },
    "1137": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "1138": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "1140": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "app#0",
        "Method(echo(string)string)"
      ]
    },
    "1141": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1143": {
      "op": "pushbytes 0x00057475706c65",
      "defined_out": [
        "0x00057475706c65",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x00057475706c65"
      ]
    },
    "1152": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1154": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "1155": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "1157": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "1158": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "1160": {
      "op": "itxn_submit"
    },
    "1161": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%3#0"
      ]
    },
    "1163": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "1164": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%3#0",
        "result.0#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result.0#0"
      ]
    },
    "1167": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%3#0",
        "result.0#0",
        "result.0#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result.0#0",
        "result.0#0 (copy)"
      ]
    },
    "1168": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result.0#0",
        "result.0#0 (copy)",
        "0"
      ]
    },
    "1169": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%3#0",
        "app#0",
        "awst_tmp%3#0",
        "result.0#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result.0#0",
        "aggregate%array_length%3#0"
      ]
    },
    "1170": {
      "op": "intc_2 // 2",
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result.0#0",
        "aggregate%array_length%3#0",
        "2"
      ]
    },
    "1171": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "app#0",
        "awst_tmp%3#0",
        "result.0#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result.0#0",
        "add%3#0"
      ]
    },
    "1172": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result.0#0",
        "add%3#0",
        "result.0#0 (copy)"
      ]
    },
    "1174": {
      "op": "len",
      "defined_out": [
        "add%3#0",
        "app#0",
        "awst_tmp%3#0",
        "len%3#0",
        "result.0#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result.0#0",
        "add%3#0",
        "len%3#0"
      ]
    },
    "1175": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%3#0",
        "eq%3#0",
        "result.0#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result.0#0",
        "eq%3#0"
      ]
    },
    "1176": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "app#0",
        "awst_tmp%3#0",
        "result.0#0"
      ]
    },
    "1177": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "result.0#0",
        "awst_tmp%3#0"
      ]
    },
    "1178": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "result.0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "tmp%17#0"
      ]
    },
    "1181": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "result.0#0",
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "1182": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "tmp%18#0"
      ]
    },
    "1183": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "result.0#0"
      ]
    },
    "1184": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1.LastLog#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1.LastLog#0"
      ]
    },
    "1186": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "result.1.LastLog#0",
        "result.0#0"
      ]
    },
    "1187": {
      "op": "bytec 24 // 0x000b6563686f3a207475706c65",
      "defined_out": [
        "0x000b6563686f3a207475706c65",
        "app#0",
        "result.0#0",
        "result.1.LastLog#0"
      ],
      "stack_out": [
        "app#0",
        "result.1.LastLog#0",
        "result.0#0",
        "0x000b6563686f3a207475706c65"
      ]
    },
    "1189": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.1.LastLog#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "app#0",
        "result.1.LastLog#0",
        "tmp%20#0"
      ]
    },
    "1190": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result.1.LastLog#0"
      ]
    },
    "1191": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "result.1.LastLog#0",
        "result.1.LastLog#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "result.1.LastLog#0",
        "result.1.LastLog#0 (copy)"
      ]
    },
    "1192": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "result.1.LastLog#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "app#0",
        "result.1.LastLog#0",
        "tmp%21#0"
      ]
    },
    "1195": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "result.1.LastLog#0",
        "tmp%21#0",
        "tmp%21#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "result.1.LastLog#0",
        "tmp%21#0",
        "tmp%21#0 (copy)"
      ]
    },
    "1196": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "result.1.LastLog#0",
        "tmp%21#0",
        "tmp%21#0 (copy)",
        "0"
      ]
    },
    "1197": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%4#0",
        "app#0",
        "result.1.LastLog#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "app#0",
        "result.1.LastLog#0",
        "tmp%21#0",
        "aggregate%array_length%4#0"
      ]
    },
    "1198": {
      "op": "intc_2 // 2",
      "stack_out": [
        "app#0",
        "result.1.LastLog#0",
        "tmp%21#0",
        "aggregate%array_length%4#0",
        "2"
      ]
    },
    "1199": {
      "op": "+",
      "defined_out": [
        "add%4#0",
        "app#0",
        "result.1.LastLog#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "app#0",
        "result.1.LastLog#0",
        "tmp%21#0",
        "add%4#0"
      ]
    },
    "1200": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "result.1.LastLog#0",
        "tmp%21#0",
        "add%4#0",
        "tmp%21#0 (copy)"
      ]
    },
    "1202": {
      "op": "len",
      "defined_out": [
        "add%4#0",
        "app#0",
        "len%4#0",
        "result.1.LastLog#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "app#0",
        "result.1.LastLog#0",
        "tmp%21#0",
        "add%4#0",
        "len%4#0"
      ]
    },
    "1203": {
      "op": "==",
      "defined_out": [
        "app#0",
        "eq%4#0",
        "result.1.LastLog#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "app#0",
        "result.1.LastLog#0",
        "tmp%21#0",
        "eq%4#0"
      ]
    },
    "1204": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "app#0",
        "result.1.LastLog#0",
        "tmp%21#0"
      ]
    },
    "1205": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "tmp%21#0",
        "result.1.LastLog#0"
      ]
    },
    "1206": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "1209": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "tmp%21#0",
        "tmp%22#0",
        "0x151f7c75"
      ]
    },
    "1210": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%21#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%21#0",
        "tmp%23#0"
      ]
    },
    "1211": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "tmp%21#0"
      ]
    },
    "1212": {
      "op": "bytec 24 // 0x000b6563686f3a207475706c65",
      "stack_out": [
        "app#0",
        "tmp%21#0",
        "0x000b6563686f3a207475706c65"
      ]
    },
    "1214": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%25#0"
      ]
    },
    "1215": {
      "op": "assert",
      "stack_out": [
        "app#0"
      ]
    },
    "1216": {
      "op": "itxn_begin"
    },
    "1217": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1219": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1220": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1222": {
      "op": "pushbytes 0x0007756e7479706564",
      "defined_out": [
        "0x0007756e7479706564"
      ],
      "stack_out": [
        "0x0007756e7479706564"
      ]
    },
    "1233": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1235": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1236": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1238": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1239": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1241": {
      "op": "itxn_submit"
    },
    "1242": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0"
      ]
    },
    "1244": {
      "op": "dup",
      "defined_out": [
        "txn_result.LastLog#0",
        "txn_result.LastLog#0 (copy)"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "txn_result.LastLog#0 (copy)"
      ]
    },
    "1245": {
      "op": "extract 4 0",
      "defined_out": [
        "tmp%27#0",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0"
      ]
    },
    "1248": {
      "op": "dup",
      "defined_out": [
        "tmp%27#0",
        "tmp%27#0 (copy)",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ]
    },
    "1249": {
      "op": "intc_0 // 0",
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0",
        "tmp%27#0 (copy)",
        "0"
      ]
    },
    "1250": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%5#0",
        "tmp%27#0",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0",
        "aggregate%array_length%5#0"
      ]
    },
    "1251": {
      "op": "intc_2 // 2",
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0",
        "aggregate%array_length%5#0",
        "2"
      ]
    },
    "1252": {
      "op": "+",
      "defined_out": [
        "add%5#0",
        "tmp%27#0",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0",
        "add%5#0"
      ]
    },
    "1253": {
      "op": "dig 1",
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0",
        "add%5#0",
        "tmp%27#0 (copy)"
      ]
    },
    "1255": {
      "op": "len",
      "defined_out": [
        "add%5#0",
        "len%5#0",
        "tmp%27#0",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0",
        "add%5#0",
        "len%5#0"
      ]
    },
    "1256": {
      "op": "==",
      "defined_out": [
        "eq%5#0",
        "tmp%27#0",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0",
        "eq%5#0"
      ]
    },
    "1257": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0"
      ]
    },
    "1258": {
      "op": "swap",
      "stack_out": [
        "tmp%27#0",
        "txn_result.LastLog#0"
      ]
    },
    "1259": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "1262": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "0x151f7c75"
      ]
    },
    "1263": {
      "op": "==",
      "defined_out": [
        "tmp%27#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0"
      ]
    },
    "1264": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1265": {
      "op": "pushbytes 0x000d6563686f3a20756e7479706564",
      "defined_out": [
        "0x000d6563686f3a20756e7479706564",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "0x000d6563686f3a20756e7479706564"
      ]
    },
    "1282": {
      "op": "==",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "1283": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "1284": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion[routing]",
      "params": {},
      "block": "test_arg_conversion",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1287": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1288": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1289": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "1290": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1291": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1292": {
      "op": "btoi",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0"
      ]
    },
    "1293": {
      "op": "itxn_begin"
    },
    "1294": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "1295": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "1297": {
      "op": "bytec 9 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "Method(log(string)void)"
      ]
    },
    "1299": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1301": {
      "op": "pushbytes 0x000a636f6e76657274656431",
      "defined_out": [
        "0x000a636f6e76657274656431",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x000a636f6e76657274656431"
      ]
    },
    "1315": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1317": {
      "op": "intc_1 // appl",
      "defined_out": [
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "1318": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "1320": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "1321": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "1323": {
      "op": "itxn_submit"
    },
    "1324": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "app#0",
        "txn.LastLog#0"
      ]
    },
    "1326": {
      "op": "pushbytes 0x636f6e76657274656431",
      "defined_out": [
        "0x636f6e76657274656431",
        "app#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "app#0",
        "txn.LastLog#0",
        "0x636f6e76657274656431"
      ]
    },
    "1338": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "tmp%1#1"
      ]
    },
    "1339": {
      "op": "assert",
      "stack_out": [
        "app#0"
      ]
    },
    "1340": {
      "op": "itxn_begin"
    },
    "1341": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "1342": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "1344": {
      "op": "pushbytes 0x3c1058d9 // method \"log(uint64)void\"",
      "defined_out": [
        "Method(log(uint64)void)",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "Method(log(uint64)void)"
      ]
    },
    "1350": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1352": {
      "op": "bytec 25 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x0000000000000002"
      ]
    },
    "1354": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1356": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "1357": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "1359": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "1360": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "1362": {
      "op": "itxn_submit"
    },
    "1363": {
      "op": "itxn LastLog",
      "stack_out": [
        "app#0",
        "txn.LastLog#0"
      ]
    },
    "1365": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "app#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "app#0",
        "txn.LastLog#0",
        "2"
      ]
    },
    "1366": {
      "op": "itob",
      "defined_out": [
        "app#0",
        "tmp%2#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "app#0",
        "txn.LastLog#0",
        "tmp%2#0"
      ]
    },
    "1367": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%3#0"
      ]
    },
    "1368": {
      "op": "assert",
      "stack_out": [
        "app#0"
      ]
    },
    "1369": {
      "op": "itxn_begin"
    },
    "1370": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "1371": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "1373": {
      "op": "pushbytes 0x6af45930 // method \"log(uint512)void\"",
      "defined_out": [
        "Method(log(uint512)void)",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "Method(log(uint512)void)"
      ]
    },
    "1379": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1381": {
      "op": "bytec 26 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"
      ]
    },
    "1383": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1385": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "1386": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "1388": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "1389": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "1391": {
      "op": "itxn_submit"
    },
    "1392": {
      "op": "itxn LastLog",
      "stack_out": [
        "app#0",
        "txn.LastLog#0"
      ]
    },
    "1394": {
      "op": "bytec 26 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
      "stack_out": [
        "app#0",
        "txn.LastLog#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"
      ]
    },
    "1396": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%7#0"
      ]
    },
    "1397": {
      "op": "assert",
      "stack_out": [
        "app#0"
      ]
    },
    "1398": {
      "op": "itxn_begin"
    },
    "1399": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "1400": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "1402": {
      "op": "pushbytes 0xb500e111 // method \"log(byte[])void\"",
      "defined_out": [
        "Method(log(byte[])void)",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "Method(log(byte[])void)"
      ]
    },
    "1408": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1410": {
      "op": "pushbytes 0x000134",
      "defined_out": [
        "0x000134",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x000134"
      ]
    },
    "1415": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1417": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "1418": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "1420": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "1421": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "1423": {
      "op": "itxn_submit"
    },
    "1424": {
      "op": "itxn LastLog",
      "stack_out": [
        "app#0",
        "txn.LastLog#0"
      ]
    },
    "1426": {
      "op": "pushbytes 0x34",
      "defined_out": [
        "0x34",
        "app#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "app#0",
        "txn.LastLog#0",
        "0x34"
      ]
    },
    "1429": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%9#0"
      ]
    },
    "1430": {
      "op": "assert",
      "stack_out": [
        "app#0"
      ]
    },
    "1431": {
      "op": "itxn_begin"
    },
    "1432": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1434": {
      "op": "pushbytes 0x6eed7ec3 // method \"log(bool)void\"",
      "defined_out": [
        "Method(log(bool)void)"
      ],
      "stack_out": [
        "Method(log(bool)void)"
      ]
    },
    "1440": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1442": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "1445": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1447": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1448": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1450": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1451": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1453": {
      "op": "itxn_submit"
    },
    "1454": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1456": {
      "op": "pushbytes 0x54727565",
      "defined_out": [
        "0x54727565",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x54727565"
      ]
    },
    "1462": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1463": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "1464": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args[routing]",
      "params": {},
      "block": "test_15plus_args",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1467": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1468": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1469": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "1470": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1471": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1472": {
      "op": "btoi",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0"
      ]
    },
    "1473": {
      "op": "itxn_begin"
    },
    "1474": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1476": {
      "op": "pushbytes 0xba0b4381 // method \"return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]\"",
      "defined_out": [
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])"
      ],
      "stack_out": [
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])"
      ]
    },
    "1482": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1484": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "1485": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1487": {
      "op": "bytec 25 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002"
      ],
      "stack_out": [
        "0x0000000000000002"
      ]
    },
    "1489": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1491": {
      "op": "bytec 11 // 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003"
      ],
      "stack_out": [
        "0x0000000000000003"
      ]
    },
    "1493": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1495": {
      "op": "pushbytes 0x0000000000000004",
      "defined_out": [
        "0x0000000000000004"
      ],
      "stack_out": [
        "0x0000000000000004"
      ]
    },
    "1505": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1507": {
      "op": "pushbytes 0x0000000000000005",
      "defined_out": [
        "0x0000000000000005"
      ],
      "stack_out": [
        "0x0000000000000005"
      ]
    },
    "1517": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1519": {
      "op": "pushbytes 0x0000000000000006",
      "defined_out": [
        "0x0000000000000006"
      ],
      "stack_out": [
        "0x0000000000000006"
      ]
    },
    "1529": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1531": {
      "op": "pushbytes 0x0000000000000007",
      "defined_out": [
        "0x0000000000000007"
      ],
      "stack_out": [
        "0x0000000000000007"
      ]
    },
    "1541": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1543": {
      "op": "pushbytes 0x0000000000000008",
      "defined_out": [
        "0x0000000000000008"
      ],
      "stack_out": [
        "0x0000000000000008"
      ]
    },
    "1553": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1555": {
      "op": "pushbytes 0x0000000000000009",
      "defined_out": [
        "0x0000000000000009"
      ],
      "stack_out": [
        "0x0000000000000009"
      ]
    },
    "1565": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1567": {
      "op": "pushbytes 0x000000000000000a",
      "defined_out": [
        "0x000000000000000a"
      ],
      "stack_out": [
        "0x000000000000000a"
      ]
    },
    "1577": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1579": {
      "op": "pushbytes 0x000000000000000b",
      "defined_out": [
        "0x000000000000000b"
      ],
      "stack_out": [
        "0x000000000000000b"
      ]
    },
    "1589": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1591": {
      "op": "pushbytes 0x000000000000000c",
      "defined_out": [
        "0x000000000000000c"
      ],
      "stack_out": [
        "0x000000000000000c"
      ]
    },
    "1601": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1603": {
      "op": "pushbytes 0x000000000000000d",
      "defined_out": [
        "0x000000000000000d"
      ],
      "stack_out": [
        "0x000000000000000d"
      ]
    },
    "1613": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1615": {
      "op": "pushbytes 0x000000000000000e",
      "defined_out": [
        "0x000000000000000e"
      ],
      "stack_out": [
        "0x000000000000000e"
      ]
    },
    "1625": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1627": {
      "op": "bytec 27 // 0x0f101112deadbeef14",
      "defined_out": [
        "0x0f101112deadbeef14"
      ],
      "stack_out": [
        "0x0f101112deadbeef14"
      ]
    },
    "1629": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1631": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1632": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1634": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1635": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1637": {
      "op": "itxn_submit"
    },
    "1638": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1640": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "1641": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "result#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result#0"
      ]
    },
    "1644": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "1645": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "result#0",
        "result#0 (copy)",
        "0"
      ]
    },
    "1646": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "awst_tmp%0#0",
        "result#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result#0",
        "aggregate%array_length%0#0"
      ]
    },
    "1647": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "awst_tmp%0#0",
        "result#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "1648": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "awst_tmp%0#0",
        "result#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result#0",
        "add%0#0"
      ]
    },
    "1649": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "add%0#0",
        "result#0"
      ]
    },
    "1650": {
      "op": "len",
      "stack_out": [
        "awst_tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "1651": {
      "op": "==",
      "stack_out": [
        "awst_tmp%0#0",
        "eq%0#0"
      ]
    },
    "1652": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1653": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "1654": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1657": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "1658": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "1659": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1660": {
      "op": "extract 6 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1663": {
      "op": "bytec 27 // 0x0f101112deadbeef14",
      "stack_out": [
        "tmp%5#0",
        "0x0f101112deadbeef14"
      ]
    },
    "1665": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1666": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "1667": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void[routing]",
      "params": {},
      "block": "test_void",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1670": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1671": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1672": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "1673": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1674": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1675": {
      "op": "btoi",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0"
      ]
    },
    "1676": {
      "op": "itxn_begin"
    },
    "1677": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "1678": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "1680": {
      "op": "bytec 9 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "Method(log(string)void)"
      ]
    },
    "1682": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1684": {
      "op": "pushbytes 0x0006576f726c6431",
      "defined_out": [
        "0x0006576f726c6431",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x0006576f726c6431"
      ]
    },
    "1694": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1696": {
      "op": "intc_1 // appl",
      "defined_out": [
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "1697": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "1699": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "1700": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "1702": {
      "op": "itxn_submit"
    },
    "1703": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "app#0",
        "txn.LastLog#0"
      ]
    },
    "1705": {
      "op": "pushbytes 0x576f726c6431",
      "defined_out": [
        "0x576f726c6431",
        "app#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "app#0",
        "txn.LastLog#0",
        "0x576f726c6431"
      ]
    },
    "1713": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "tmp%1#1"
      ]
    },
    "1714": {
      "op": "assert",
      "stack_out": [
        "app#0"
      ]
    },
    "1715": {
      "op": "itxn_begin"
    },
    "1716": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "1717": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "1719": {
      "op": "bytec 9 // method \"log(string)void\"",
      "stack_out": [
        "app#0",
        "Method(log(string)void)"
      ]
    },
    "1721": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1723": {
      "op": "pushbytes 0x0006576f726c6432",
      "defined_out": [
        "0x0006576f726c6432",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x0006576f726c6432"
      ]
    },
    "1733": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1735": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "1736": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "1738": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "1739": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "1741": {
      "op": "itxn_submit"
    },
    "1742": {
      "op": "itxn LastLog",
      "stack_out": [
        "app#0",
        "txn.LastLog#0"
      ]
    },
    "1744": {
      "op": "pushbytes 0x576f726c6432",
      "defined_out": [
        "0x576f726c6432",
        "app#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "app#0",
        "txn.LastLog#0",
        "0x576f726c6432"
      ]
    },
    "1752": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%3#0"
      ]
    },
    "1753": {
      "op": "assert",
      "stack_out": [
        "app#0"
      ]
    },
    "1754": {
      "op": "itxn_begin"
    },
    "1755": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "1756": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "1758": {
      "op": "bytec 9 // method \"log(string)void\"",
      "stack_out": [
        "app#0",
        "Method(log(string)void)"
      ]
    },
    "1760": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1762": {
      "op": "pushbytes 0x0006576f726c6433",
      "defined_out": [
        "0x0006576f726c6433",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x0006576f726c6433"
      ]
    },
    "1772": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1774": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "1775": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "1777": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "1778": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "1780": {
      "op": "itxn_submit"
    },
    "1781": {
      "op": "itxn LastLog",
      "stack_out": [
        "app#0",
        "txn.LastLog#0"
      ]
    },
    "1783": {
      "op": "pushbytes 0x576f726c6433",
      "defined_out": [
        "0x576f726c6433",
        "app#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "app#0",
        "txn.LastLog#0",
        "0x576f726c6433"
      ]
    },
    "1791": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%5#0"
      ]
    },
    "1792": {
      "op": "assert",
      "stack_out": [
        "app#0"
      ]
    },
    "1793": {
      "op": "itxn_begin"
    },
    "1794": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1796": {
      "op": "bytec 9 // method \"log(string)void\"",
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1798": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1800": {
      "op": "pushbytes 0x0006576f726c6434",
      "defined_out": [
        "0x0006576f726c6434"
      ],
      "stack_out": [
        "0x0006576f726c6434"
      ]
    },
    "1810": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1812": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1813": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1815": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1816": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1818": {
      "op": "itxn_submit"
    },
    "1819": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1821": {
      "op": "pushbytes 0x576f726c6434",
      "defined_out": [
        "0x576f726c6434",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6434"
      ]
    },
    "1829": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1830": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "1831": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types[routing]",
      "params": {},
      "block": "test_ref_types",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1834": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1835": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1836": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "1837": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1838": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1839": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1840": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "app#0"
      ]
    },
    "1841": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "app#0",
        "tmp%2#0"
      ]
    },
    "1844": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "app#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1845": {
      "op": "len",
      "defined_out": [
        "app#0",
        "len%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "app#0",
        "tmp%2#0",
        "len%1#0"
      ]
    },
    "1846": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%0#0",
        "app#0",
        "tmp%2#0",
        "len%1#0",
        "8"
      ]
    },
    "1847": {
      "op": "==",
      "defined_out": [
        "app#0",
        "eq%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "app#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "1848": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0",
        "app#0",
        "tmp%2#0"
      ]
    },
    "1849": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "app#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1850": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "asset#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "app#0",
        "tmp%2#0",
        "asset#0"
      ]
    },
    "1851": {
      "op": "itxn_begin"
    },
    "1852": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "app#0",
        "asset#0",
        "tmp%0#0",
        "tmp%1#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "app#0",
        "tmp%2#0",
        "asset#0",
        "tmp%1#1"
      ]
    },
    "1854": {
      "op": "dig 3",
      "defined_out": [
        "app#0",
        "app#0 (copy)",
        "asset#0",
        "tmp%0#0",
        "tmp%1#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "app#0",
        "tmp%2#0",
        "asset#0",
        "tmp%1#1",
        "app#0 (copy)"
      ]
    },
    "1856": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#0",
        "app#0",
        "tmp%2#0",
        "asset#0",
        "tmp%1#1"
      ]
    },
    "1858": {
      "op": "pushbytes 0x46b50faf // method \"log(uint64,address,uint64)void\"",
      "defined_out": [
        "Method(log(uint64,address,uint64)void)",
        "app#0",
        "asset#0",
        "tmp%0#0",
        "tmp%1#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "app#0",
        "tmp%2#0",
        "asset#0",
        "tmp%1#1",
        "Method(log(uint64,address,uint64)void)"
      ]
    },
    "1864": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#0",
        "app#0",
        "tmp%2#0",
        "asset#0",
        "tmp%1#1"
      ]
    },
    "1866": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "app#0",
        "asset#0",
        "tmp%1#1",
        "tmp%2#0"
      ]
    },
    "1868": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#0",
        "app#0",
        "asset#0",
        "tmp%1#1"
      ]
    },
    "1870": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#0",
        "app#0",
        "asset#0"
      ]
    },
    "1872": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "asset#0",
        "tmp%0#0"
      ]
    },
    "1874": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "asset#0"
      ]
    },
    "1876": {
      "op": "intc_1 // appl",
      "defined_out": [
        "app#0",
        "appl",
        "asset#0"
      ],
      "stack_out": [
        "app#0",
        "asset#0",
        "appl"
      ]
    },
    "1877": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "asset#0"
      ]
    },
    "1879": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0",
        "asset#0"
      ],
      "stack_out": [
        "app#0",
        "asset#0",
        "0"
      ]
    },
    "1880": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "asset#0"
      ]
    },
    "1882": {
      "op": "itxn_submit"
    },
    "1883": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "asset#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "app#0",
        "asset#0",
        "txn.LastLog#0"
      ]
    },
    "1885": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "txn.LastLog#0",
        "asset#0"
      ]
    },
    "1886": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "app#0",
        "check%0#0",
        "txn.LastLog#0",
        "value%0#0"
      ],
      "stack_out": [
        "app#0",
        "txn.LastLog#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "1888": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "app#0",
        "txn.LastLog#0",
        "value%0#0"
      ]
    },
    "1889": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "app#0",
        "tmp%4#0",
        "txn.LastLog#0",
        "value%0#0"
      ],
      "stack_out": [
        "app#0",
        "txn.LastLog#0",
        "value%0#0",
        "tmp%4#0"
      ]
    },
    "1891": {
      "op": "concat",
      "defined_out": [
        "app#0",
        "tmp%5#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "app#0",
        "txn.LastLog#0",
        "tmp%5#0"
      ]
    },
    "1892": {
      "op": "uncover 2",
      "stack_out": [
        "txn.LastLog#0",
        "tmp%5#0",
        "app#0"
      ]
    },
    "1894": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "tmp%5#0",
        "txn.LastLog#0",
        "value%1#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%5#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "1896": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "txn.LastLog#0",
        "tmp%5#0",
        "value%1#0"
      ]
    },
    "1897": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%6#0"
      ]
    },
    "1898": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1899": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "1900": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address[routing]",
      "params": {},
      "block": "test_account_to_address",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1903": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1904": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1905": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "1906": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1907": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1908": {
      "op": "btoi",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0"
      ]
    },
    "1909": {
      "op": "itxn_begin"
    },
    "1910": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "app#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "app#0",
        "tmp%0#1"
      ]
    },
    "1912": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "app#0"
      ]
    },
    "1913": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1915": {
      "op": "pushbytes 0x0437b17e // method \"log(address)void\"",
      "defined_out": [
        "Method(log(address)void)",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "Method(log(address)void)"
      ]
    },
    "1921": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1923": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1925": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1926": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1928": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1929": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1931": {
      "op": "itxn_submit"
    },
    "1932": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1934": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0"
      ]
    },
    "1936": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1937": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "1938": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string[routing]",
      "params": {},
      "block": "test_native_string",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1941": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1942": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1943": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "1944": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1945": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1946": {
      "op": "btoi",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0"
      ]
    },
    "1947": {
      "op": "itxn_begin"
    },
    "1948": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "1949": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "1951": {
      "op": "bytec 12 // method \"echo_native_string(string)string\"",
      "defined_out": [
        "Method(echo_native_string(string)string)",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "Method(echo_native_string(string)string)"
      ]
    },
    "1953": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1955": {
      "op": "bytec 13 // 0x000173",
      "defined_out": [
        "0x000173",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x000173"
      ]
    },
    "1957": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "1959": {
      "op": "intc_1 // appl",
      "defined_out": [
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "1960": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "1962": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "1963": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "1965": {
      "op": "itxn_submit"
    },
    "1966": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0"
      ]
    },
    "1968": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "1969": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1"
      ]
    },
    "1972": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1",
        "tmp%1#1 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1",
        "tmp%1#1 (copy)"
      ]
    },
    "1973": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1",
        "tmp%1#1 (copy)",
        "0"
      ]
    },
    "1974": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1",
        "aggregate%array_length%0#0"
      ]
    },
    "1975": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "1976": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1",
        "add%0#0"
      ]
    },
    "1977": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "add%0#0",
        "tmp%1#1"
      ]
    },
    "1978": {
      "op": "len",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "1979": {
      "op": "==",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "eq%0#0"
      ]
    },
    "1980": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0"
      ]
    },
    "1981": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "1982": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1985": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "1986": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1987": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0"
      ]
    },
    "1988": {
      "op": "extract 6 0",
      "defined_out": [
        "app#0",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "1991": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "1992": {
      "op": "pushbytes \"echo: s\"",
      "defined_out": [
        "\"echo: s\"",
        "app#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "result1#0 (copy)",
        "\"echo: s\""
      ]
    },
    "2001": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "tmp%5#0"
      ]
    },
    "2002": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2003": {
      "op": "itxn_begin"
    },
    "2004": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2006": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2008": {
      "op": "bytec 12 // method \"echo_native_string(string)string\"",
      "stack_out": [
        "app#0",
        "result1#0",
        "Method(echo_native_string(string)string)"
      ]
    },
    "2010": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2012": {
      "op": "bytec 13 // 0x000173",
      "stack_out": [
        "app#0",
        "result1#0",
        "0x000173"
      ]
    },
    "2014": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2016": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "result1#0",
        "appl"
      ]
    },
    "2017": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2019": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "result1#0",
        "0"
      ]
    },
    "2020": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2022": {
      "op": "itxn_submit"
    },
    "2023": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2025": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2026": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "2029": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "2030": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "0"
      ]
    },
    "2031": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#0",
        "app#0",
        "awst_tmp%1#0",
        "result1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "aggregate%array_length%1#0"
      ]
    },
    "2032": {
      "op": "intc_2 // 2",
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "2033": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "app#0",
        "awst_tmp%1#0",
        "result1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "add%1#0"
      ]
    },
    "2034": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "add%1#0",
        "tmp%7#0"
      ]
    },
    "2035": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "app#0",
        "awst_tmp%1#0",
        "len%1#0",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "2036": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "eq%1#0",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "eq%1#0"
      ]
    },
    "2037": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2038": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2039": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "2042": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "2043": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%9#0"
      ]
    },
    "2044": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2045": {
      "op": "extract 6 0",
      "defined_out": [
        "app#0",
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "result2#0"
      ]
    },
    "2048": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "result1#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2050": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "tmp%11#0"
      ]
    },
    "2051": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2052": {
      "op": "itxn_begin"
    },
    "2053": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "app#0"
      ]
    },
    "2054": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2056": {
      "op": "bytec 12 // method \"echo_native_string(string)string\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_string(string)string)"
      ]
    },
    "2058": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2060": {
      "op": "bytec 13 // 0x000173",
      "stack_out": [
        "result1#0",
        "0x000173"
      ]
    },
    "2062": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2064": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2065": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2067": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2068": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2070": {
      "op": "itxn_submit"
    },
    "2071": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2073": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2074": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0"
      ]
    },
    "2077": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "2078": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "0"
      ]
    },
    "2079": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%2#0",
        "awst_tmp%2#0",
        "result1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "aggregate%array_length%2#0"
      ]
    },
    "2080": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "aggregate%array_length%2#0",
        "2"
      ]
    },
    "2081": {
      "op": "+",
      "defined_out": [
        "add%2#0",
        "awst_tmp%2#0",
        "result1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "add%2#0"
      ]
    },
    "2082": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "add%2#0",
        "tmp%13#0"
      ]
    },
    "2083": {
      "op": "len",
      "defined_out": [
        "add%2#0",
        "awst_tmp%2#0",
        "len%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "add%2#0",
        "len%2#0"
      ]
    },
    "2084": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "eq%2#0"
      ]
    },
    "2085": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2086": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2087": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%14#0"
      ]
    },
    "2090": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "2091": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%15#0"
      ]
    },
    "2092": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2093": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2096": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "2097": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "2098": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes[routing]",
      "params": {},
      "block": "test_native_bytes",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2101": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2102": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "2103": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "2104": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "2105": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2106": {
      "op": "btoi",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0"
      ]
    },
    "2107": {
      "op": "itxn_begin"
    },
    "2108": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "2109": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "2111": {
      "op": "bytec 14 // method \"echo_native_bytes(byte[])byte[]\"",
      "defined_out": [
        "Method(echo_native_bytes(byte[])byte[])",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "2113": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "2115": {
      "op": "bytec 15 // 0x000162",
      "defined_out": [
        "0x000162",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x000162"
      ]
    },
    "2117": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "2119": {
      "op": "intc_1 // appl",
      "defined_out": [
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "2120": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "2122": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "2123": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "2125": {
      "op": "itxn_submit"
    },
    "2126": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0"
      ]
    },
    "2128": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2129": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1"
      ]
    },
    "2132": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1",
        "tmp%1#1 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1",
        "tmp%1#1 (copy)"
      ]
    },
    "2133": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1",
        "tmp%1#1 (copy)",
        "0"
      ]
    },
    "2134": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1",
        "aggregate%array_length%0#0"
      ]
    },
    "2135": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "2136": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%1#1",
        "add%0#0"
      ]
    },
    "2137": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "add%0#0",
        "tmp%1#1"
      ]
    },
    "2138": {
      "op": "len",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "2139": {
      "op": "==",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "eq%0#0"
      ]
    },
    "2140": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0"
      ]
    },
    "2141": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2142": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2145": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "2146": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2147": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0"
      ]
    },
    "2148": {
      "op": "extract 6 0",
      "defined_out": [
        "app#0",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2151": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2152": {
      "op": "pushbytes 0x6563686f3a2062",
      "defined_out": [
        "0x6563686f3a2062",
        "app#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "result1#0 (copy)",
        "0x6563686f3a2062"
      ]
    },
    "2161": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "tmp%5#0"
      ]
    },
    "2162": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2163": {
      "op": "itxn_begin"
    },
    "2164": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2166": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2168": {
      "op": "bytec 14 // method \"echo_native_bytes(byte[])byte[]\"",
      "stack_out": [
        "app#0",
        "result1#0",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "2170": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2172": {
      "op": "bytec 15 // 0x000162",
      "stack_out": [
        "app#0",
        "result1#0",
        "0x000162"
      ]
    },
    "2174": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2176": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "result1#0",
        "appl"
      ]
    },
    "2177": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2179": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "result1#0",
        "0"
      ]
    },
    "2180": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2182": {
      "op": "itxn_submit"
    },
    "2183": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2185": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2186": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "2189": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "2190": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "0"
      ]
    },
    "2191": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#0",
        "app#0",
        "awst_tmp%1#0",
        "result1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "aggregate%array_length%1#0"
      ]
    },
    "2192": {
      "op": "intc_2 // 2",
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "2193": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "app#0",
        "awst_tmp%1#0",
        "result1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "add%1#0"
      ]
    },
    "2194": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "add%1#0",
        "tmp%7#0"
      ]
    },
    "2195": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "app#0",
        "awst_tmp%1#0",
        "len%1#0",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "2196": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "eq%1#0",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "eq%1#0"
      ]
    },
    "2197": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2198": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2199": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "2202": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "2203": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%9#0"
      ]
    },
    "2204": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2205": {
      "op": "extract 6 0",
      "defined_out": [
        "app#0",
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "result2#0"
      ]
    },
    "2208": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "result1#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2210": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "tmp%11#0"
      ]
    },
    "2211": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2212": {
      "op": "itxn_begin"
    },
    "2213": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "app#0"
      ]
    },
    "2214": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2216": {
      "op": "bytec 14 // method \"echo_native_bytes(byte[])byte[]\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "2218": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2220": {
      "op": "bytec 15 // 0x000162",
      "stack_out": [
        "result1#0",
        "0x000162"
      ]
    },
    "2222": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2224": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2225": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2227": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2228": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2230": {
      "op": "itxn_submit"
    },
    "2231": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2233": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2234": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0"
      ]
    },
    "2237": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "2238": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "0"
      ]
    },
    "2239": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%2#0",
        "awst_tmp%2#0",
        "result1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "aggregate%array_length%2#0"
      ]
    },
    "2240": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "aggregate%array_length%2#0",
        "2"
      ]
    },
    "2241": {
      "op": "+",
      "defined_out": [
        "add%2#0",
        "awst_tmp%2#0",
        "result1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "add%2#0"
      ]
    },
    "2242": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "add%2#0",
        "tmp%13#0"
      ]
    },
    "2243": {
      "op": "len",
      "defined_out": [
        "add%2#0",
        "awst_tmp%2#0",
        "len%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "add%2#0",
        "len%2#0"
      ]
    },
    "2244": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "eq%2#0"
      ]
    },
    "2245": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2246": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2247": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%14#0"
      ]
    },
    "2250": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "2251": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%15#0"
      ]
    },
    "2252": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2253": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2256": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "2257": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "2258": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64[routing]",
      "params": {},
      "block": "test_native_uint64",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2261": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2262": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "2263": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "2264": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "2265": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2266": {
      "op": "btoi",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0"
      ]
    },
    "2267": {
      "op": "itxn_begin"
    },
    "2268": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "2269": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "2271": {
      "op": "bytec 16 // method \"echo_native_uint64(uint64)uint64\"",
      "defined_out": [
        "Method(echo_native_uint64(uint64)uint64)",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "2273": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "2275": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x0000000000000001"
      ]
    },
    "2276": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "2278": {
      "op": "intc_1 // appl",
      "defined_out": [
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "2279": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "2281": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "2282": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "2284": {
      "op": "itxn_submit"
    },
    "2285": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0"
      ]
    },
    "2287": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2288": {
      "op": "extract 4 0",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2291": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2292": {
      "op": "len",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "2293": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "2294": {
      "op": "==",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "2295": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2296": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2297": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "tmp%0#0",
        "tmp%1#1"
      ]
    },
    "2300": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "app#0",
        "tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "tmp%0#0",
        "tmp%1#1",
        "0x151f7c75"
      ]
    },
    "2301": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2302": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "tmp%0#0"
      ]
    },
    "2303": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2304": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2305": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "app#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "2306": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "tmp%4#0"
      ]
    },
    "2307": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2308": {
      "op": "itxn_begin"
    },
    "2309": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1",
        "app#0",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "1"
      ]
    },
    "2311": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2312": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "result1#0",
        "aggregate%val_as_bytes%0#0",
        "app#0 (copy)"
      ]
    },
    "2314": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "result1#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2316": {
      "op": "bytec 16 // method \"echo_native_uint64(uint64)uint64\"",
      "stack_out": [
        "app#0",
        "result1#0",
        "aggregate%val_as_bytes%0#0",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "2318": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result1#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2320": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2322": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "result1#0",
        "appl"
      ]
    },
    "2323": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2325": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "result1#0",
        "0"
      ]
    },
    "2326": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2328": {
      "op": "itxn_submit"
    },
    "2329": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2331": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2332": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0"
      ]
    },
    "2335": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result1#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "2336": {
      "op": "len",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "len%1#0",
        "result1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0",
        "len%1#0"
      ]
    },
    "2337": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0",
        "len%1#0",
        "8"
      ]
    },
    "2338": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "eq%1#0",
        "result1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0",
        "eq%1#0"
      ]
    },
    "2339": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0"
      ]
    },
    "2340": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "result1#0",
        "tmp%6#0",
        "awst_tmp%1#0"
      ]
    },
    "2341": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "result1#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "2344": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "result1#0",
        "tmp%6#0",
        "tmp%7#0",
        "0x151f7c75"
      ]
    },
    "2345": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result1#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "2346": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "result1#0",
        "tmp%6#0"
      ]
    },
    "2347": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "result2#0"
      ]
    },
    "2348": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "result1#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2350": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "tmp%10#0"
      ]
    },
    "2351": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2352": {
      "op": "itxn_begin"
    },
    "2353": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "app#0"
      ]
    },
    "2354": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2356": {
      "op": "bytec 16 // method \"echo_native_uint64(uint64)uint64\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "2358": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2360": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "result1#0",
        "0x0000000000000001"
      ]
    },
    "2361": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2363": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2364": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2366": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2367": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2369": {
      "op": "itxn_submit"
    },
    "2370": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2372": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2373": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0"
      ]
    },
    "2376": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "2377": {
      "op": "len",
      "defined_out": [
        "awst_tmp%2#0",
        "len%2#0",
        "result1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0",
        "len%2#0"
      ]
    },
    "2378": {
      "op": "intc_3 // 8",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0",
        "len%2#0",
        "8"
      ]
    },
    "2379": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%2#0",
        "result1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0",
        "eq%2#0"
      ]
    },
    "2380": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0"
      ]
    },
    "2381": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%11#0",
        "awst_tmp%2#0"
      ]
    },
    "2382": {
      "op": "extract 0 4",
      "defined_out": [
        "result1#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "2385": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "tmp%11#0",
        "tmp%12#0",
        "0x151f7c75"
      ]
    },
    "2386": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2387": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "tmp%11#0"
      ]
    },
    "2388": {
      "op": "btoi",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2389": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "2390": {
      "op": "return",
      "stack_out": []
    },
    "2391": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint[routing]",
      "params": {},
      "block": "test_native_biguint",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2394": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2395": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "2396": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "2397": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "2398": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2399": {
      "op": "btoi",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0"
      ]
    },
    "2400": {
      "op": "itxn_begin"
    },
    "2401": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "2402": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "2404": {
      "op": "bytec 17 // method \"echo_native_biguint(uint512)uint512\"",
      "defined_out": [
        "Method(echo_native_biguint(uint512)uint512)",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "2406": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "2408": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2409": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "2411": {
      "op": "intc_1 // appl",
      "defined_out": [
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "2412": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "2414": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "2415": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "2417": {
      "op": "itxn_submit"
    },
    "2418": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0"
      ]
    },
    "2420": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2421": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0"
      ]
    },
    "2424": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2425": {
      "op": "len",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "len%0#0"
      ]
    },
    "2426": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "app#0",
        "awst_tmp%0#0",
        "len%0#0",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "len%0#0",
        "64"
      ]
    },
    "2428": {
      "op": "==",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "eq%0#0"
      ]
    },
    "2429": {
      "error": "invalid number of bytes for uint512",
      "op": "assert // invalid number of bytes for uint512",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0"
      ]
    },
    "2430": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%0#0"
      ]
    },
    "2431": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "result1#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "tmp%1#1"
      ]
    },
    "2434": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "app#0",
        "result1#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "tmp%1#1",
        "0x151f7c75"
      ]
    },
    "2435": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "tmp%2#0"
      ]
    },
    "2436": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2437": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2438": {
      "op": "bytec 18 // 0x03",
      "defined_out": [
        "0x03",
        "app#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "result1#0 (copy)",
        "0x03"
      ]
    },
    "2440": {
      "op": "b==",
      "defined_out": [
        "app#0",
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "tmp%4#0"
      ]
    },
    "2441": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2442": {
      "op": "itxn_begin"
    },
    "2443": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2445": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2447": {
      "op": "bytec 17 // method \"echo_native_biguint(uint512)uint512\"",
      "stack_out": [
        "app#0",
        "result1#0",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "2449": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2451": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "app#0",
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2452": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2454": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "result1#0",
        "appl"
      ]
    },
    "2455": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2457": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "result1#0",
        "0"
      ]
    },
    "2458": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2460": {
      "op": "itxn_submit"
    },
    "2461": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2463": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2464": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "result2#0"
      ]
    },
    "2467": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result1#0",
        "result2#0",
        "result2#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "result2#0",
        "result2#0 (copy)"
      ]
    },
    "2468": {
      "op": "len",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "len%1#0",
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "result2#0",
        "len%1#0"
      ]
    },
    "2469": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "result2#0",
        "len%1#0",
        "64"
      ]
    },
    "2471": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "eq%1#0",
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "result2#0",
        "eq%1#0"
      ]
    },
    "2472": {
      "error": "invalid number of bytes for uint512",
      "op": "assert // invalid number of bytes for uint512",
      "stack_out": [
        "app#0",
        "result1#0",
        "awst_tmp%1#0",
        "result2#0"
      ]
    },
    "2473": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "result1#0",
        "result2#0",
        "awst_tmp%1#0"
      ]
    },
    "2474": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "result1#0",
        "result2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "result2#0",
        "tmp%7#0"
      ]
    },
    "2477": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "result1#0",
        "result2#0",
        "tmp%7#0",
        "0x151f7c75"
      ]
    },
    "2478": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result1#0",
        "result2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "result2#0",
        "tmp%8#0"
      ]
    },
    "2479": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "result1#0",
        "result2#0"
      ]
    },
    "2480": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "result1#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2482": {
      "op": "b==",
      "defined_out": [
        "app#0",
        "result1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "tmp%10#0"
      ]
    },
    "2483": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result1#0"
      ]
    },
    "2484": {
      "op": "itxn_begin"
    },
    "2485": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "app#0"
      ]
    },
    "2486": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2488": {
      "op": "bytec 17 // method \"echo_native_biguint(uint512)uint512\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "2490": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2492": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2493": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2495": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2496": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2498": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2499": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2501": {
      "op": "itxn_submit"
    },
    "2502": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2504": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2505": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "result3#0"
      ]
    },
    "2508": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "result3#0",
        "result3#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "result3#0",
        "result3#0 (copy)"
      ]
    },
    "2509": {
      "op": "len",
      "defined_out": [
        "awst_tmp%2#0",
        "len%2#0",
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "result3#0",
        "len%2#0"
      ]
    },
    "2510": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "result3#0",
        "len%2#0",
        "64"
      ]
    },
    "2512": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%2#0",
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "result3#0",
        "eq%2#0"
      ]
    },
    "2513": {
      "error": "invalid number of bytes for uint512",
      "op": "assert // invalid number of bytes for uint512",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "result3#0"
      ]
    },
    "2514": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "result3#0",
        "awst_tmp%2#0"
      ]
    },
    "2515": {
      "op": "extract 0 4",
      "defined_out": [
        "result1#0",
        "result3#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "tmp%12#0"
      ]
    },
    "2518": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "result3#0",
        "tmp%12#0",
        "0x151f7c75"
      ]
    },
    "2519": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "result3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "tmp%13#0"
      ]
    },
    "2520": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2521": {
      "op": "b==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "2522": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "2523": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple[routing]",
      "params": {},
      "block": "test_native_tuple",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2526": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2527": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "2528": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "2529": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "2530": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2531": {
      "op": "btoi",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0"
      ]
    },
    "2532": {
      "op": "itxn_begin"
    },
    "2533": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "2534": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "2536": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2538": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "2540": {
      "op": "bytec 5 // 0x00027331",
      "defined_out": [
        "0x00027331",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x00027331"
      ]
    },
    "2542": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "2544": {
      "op": "bytec 6 // 0x00026231",
      "defined_out": [
        "0x00026231",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x00026231"
      ]
    },
    "2546": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "2548": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x0000000000000001"
      ]
    },
    "2549": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "2551": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2552": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "2554": {
      "op": "intc_1 // appl",
      "defined_out": [
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "2555": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "2557": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "2558": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "2560": {
      "op": "itxn_submit"
    },
    "2561": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0"
      ]
    },
    "2563": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2564": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0"
      ]
    },
    "2567": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2569": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "tmp%3#0"
      ]
    },
    "2572": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "2573": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "tmp%4#0"
      ]
    },
    "2574": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0"
      ]
    },
    "2575": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2576": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "result1#0 (copy)",
        "0"
      ]
    },
    "2577": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "app#0",
        "awst_tmp%0#0",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "2578": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%0#0",
        "result1#0 (copy)"
      ]
    },
    "2580": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%0#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "2581": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "app#0",
        "awst_tmp%0#0",
        "result1#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "2582": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "result1#0 (copy)"
      ]
    },
    "2584": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%1#0",
        "result1#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "2586": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%1#0",
        "result1#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0 (copy)"
      ]
    },
    "2588": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%1#0",
        "s#0"
      ]
    },
    "2589": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%1#0",
        "s#0",
        "result1#0 (copy)"
      ]
    },
    "2591": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0",
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%1#0",
        "s#0",
        "aggregate%len%0#0"
      ]
    },
    "2592": {
      "op": "dig 3",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%1#0",
        "s#0",
        "aggregate%len%0#0",
        "result1#0 (copy)"
      ]
    },
    "2594": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "aggregate%len%0#0",
        "result1#0 (copy)",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "2596": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "result1#0 (copy)",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0"
      ]
    },
    "2598": {
      "op": "substring3",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "b#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "b#0"
      ]
    },
    "2599": {
      "op": "dig 3",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "b#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2601": {
      "op": "extract 16 64",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "b#0",
        "bu#0"
      ]
    },
    "2604": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "s#0"
      ]
    },
    "2606": {
      "op": "extract 2 0",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%9#0"
      ]
    },
    "2609": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "2610": {
      "op": "bytec 10 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "app#0",
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%9#0",
        "tmp%9#0 (copy)",
        "\"echo: s1\""
      ]
    },
    "2612": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "2613": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%9#0"
      ]
    },
    "2614": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "b#0"
      ]
    },
    "2616": {
      "op": "extract 2 0",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "2619": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%11#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "2620": {
      "op": "bytec 28 // 0x6563686f3a206231",
      "defined_out": [
        "0x6563686f3a206231",
        "app#0",
        "awst_tmp%0#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%11#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%11#0 (copy)",
        "0x6563686f3a206231"
      ]
    },
    "2622": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "2623": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "2624": {
      "op": "uncover 4",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "awst_tmp%0#0"
      ]
    },
    "2626": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "awst_tmp%0#0",
        "8"
      ]
    },
    "2627": {
      "op": "extract_uint64",
      "defined_out": [
        "app#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2628": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "2629": {
      "op": "intc_2 // 2",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "2"
      ]
    },
    "2630": {
      "op": "==",
      "defined_out": [
        "app#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "2631": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2632": {
      "op": "dig 3",
      "defined_out": [
        "app#0",
        "bu#0",
        "bu#0 (copy)",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "bu#0 (copy)"
      ]
    },
    "2634": {
      "op": "bytec 18 // 0x03",
      "defined_out": [
        "0x03",
        "app#0",
        "bu#0",
        "bu#0 (copy)",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "bu#0 (copy)",
        "0x03"
      ]
    },
    "2636": {
      "op": "b==",
      "defined_out": [
        "app#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "2637": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2638": {
      "op": "itxn_begin"
    },
    "2639": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1",
        "app#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "1"
      ]
    },
    "2641": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2642": {
      "op": "dig 6",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "aggregate%val_as_bytes%0#0",
        "app#0 (copy)"
      ]
    },
    "2644": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2646": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "aggregate%val_as_bytes%0#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2648": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2650": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "aggregate%val_as_bytes%0#0",
        "0x00027331"
      ]
    },
    "2652": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2654": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "aggregate%val_as_bytes%0#0",
        "0x00026231"
      ]
    },
    "2656": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2658": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2660": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2661": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2663": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "appl"
      ]
    },
    "2664": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2666": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0"
      ]
    },
    "2667": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2669": {
      "op": "itxn_submit"
    },
    "2670": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%1#0"
      ]
    },
    "2672": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2673": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "bu#0",
        "result1#0",
        "result2#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%1#0",
        "result2#0"
      ]
    },
    "2676": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result2#0",
        "awst_tmp%1#0"
      ]
    },
    "2677": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "bu#0",
        "result1#0",
        "result2#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%22#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result2#0",
        "tmp%22#0"
      ]
    },
    "2680": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result2#0",
        "tmp%22#0",
        "0x151f7c75"
      ]
    },
    "2681": {
      "op": "==",
      "defined_out": [
        "app#0",
        "bu#0",
        "result1#0",
        "result2#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%23#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result2#0",
        "tmp%23#0"
      ]
    },
    "2682": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result2#0"
      ]
    },
    "2683": {
      "op": "dig 5",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2685": {
      "op": "==",
      "defined_out": [
        "app#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%24#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%24#0"
      ]
    },
    "2686": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2687": {
      "op": "itxn_begin"
    },
    "2688": {
      "op": "dig 5",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "app#0 (copy)"
      ]
    },
    "2690": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2692": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2694": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2696": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0x00027331"
      ]
    },
    "2698": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2700": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0x00026231"
      ]
    },
    "2702": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2704": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0x0000000000000001"
      ]
    },
    "2705": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2707": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2708": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2710": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "appl"
      ]
    },
    "2711": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2713": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0"
      ]
    },
    "2714": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2716": {
      "op": "itxn_submit"
    },
    "2717": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%2#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%2#0"
      ]
    },
    "2719": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2720": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%2#0",
        "bu#0",
        "result1#0",
        "result3#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%2#0",
        "result3#0"
      ]
    },
    "2723": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result3#0",
        "awst_tmp%2#0"
      ]
    },
    "2724": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "bu#0",
        "result1#0",
        "result3#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%28#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result3#0",
        "tmp%28#0"
      ]
    },
    "2727": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result3#0",
        "tmp%28#0",
        "0x151f7c75"
      ]
    },
    "2728": {
      "op": "==",
      "defined_out": [
        "app#0",
        "bu#0",
        "result1#0",
        "result3#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%29#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result3#0",
        "tmp%29#0"
      ]
    },
    "2729": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result3#0"
      ]
    },
    "2730": {
      "op": "uncover 5",
      "stack_out": [
        "app#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result3#0",
        "result1#0"
      ]
    },
    "2732": {
      "op": "==",
      "defined_out": [
        "app#0",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%30#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%30#0"
      ]
    },
    "2733": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2734": {
      "op": "itxn_begin"
    },
    "2735": {
      "op": "uncover 4",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "app#0"
      ]
    },
    "2737": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2739": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2741": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2743": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0x00027331"
      ]
    },
    "2745": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2747": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0x00026231"
      ]
    },
    "2749": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2751": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0x0000000000000001"
      ]
    },
    "2752": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2754": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2755": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2757": {
      "op": "intc_1 // appl",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "appl"
      ]
    },
    "2758": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2760": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0"
      ]
    },
    "2761": {
      "op": "itxn_field Fee",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2763": {
      "op": "itxn_submit"
    },
    "2764": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0"
      ]
    },
    "2766": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "2767": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0"
      ]
    },
    "2770": {
      "op": "dig 1",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "2772": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "2775": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "tmp%34#0",
        "0x151f7c75"
      ]
    },
    "2776": {
      "op": "==",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%35#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "tmp%35#0"
      ]
    },
    "2777": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0"
      ]
    },
    "2778": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%33#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "tmp%33#0 (copy)"
      ]
    },
    "2779": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "tmp%33#0 (copy)",
        "0"
      ]
    },
    "2780": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "awst_tmp%3#0",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "2781": {
      "op": "dig 1",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%3#0",
        "tmp%33#0 (copy)"
      ]
    },
    "2783": {
      "op": "intc_2 // 2",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%3#0",
        "tmp%33#0 (copy)",
        "2"
      ]
    },
    "2784": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "awst_tmp%3#0",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "2785": {
      "op": "dig 2",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "tmp%33#0 (copy)"
      ]
    },
    "2787": {
      "op": "uncover 2",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%4#0",
        "tmp%33#0 (copy)",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "2789": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%extract_uint16%4#0 (copy)",
        "awst_tmp%3#0",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%33#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%4#0",
        "tmp%33#0 (copy)",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0 (copy)"
      ]
    },
    "2791": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%2#0",
        "awst_tmp%3#0",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%2#0"
      ]
    },
    "2792": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "awst_tmp%3#0",
        "bu#0",
        "result_native.0#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%4#0",
        "result_native.0#0"
      ]
    },
    "2795": {
      "op": "dig 2",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%4#0",
        "result_native.0#0",
        "tmp%33#0 (copy)"
      ]
    },
    "2797": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "aggregate%len%1#0",
        "awst_tmp%3#0",
        "bu#0",
        "result_native.0#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%4#0",
        "result_native.0#0",
        "aggregate%len%1#0"
      ]
    },
    "2798": {
      "op": "uncover 3",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "aggregate%extract_uint16%4#0",
        "result_native.0#0",
        "aggregate%len%1#0",
        "tmp%33#0"
      ]
    },
    "2800": {
      "op": "uncover 3",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "aggregate%len%1#0",
        "tmp%33#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "2802": {
      "op": "uncover 2",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "tmp%33#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%1#0"
      ]
    },
    "2804": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%3#0",
        "awst_tmp%3#0",
        "bu#0",
        "result_native.0#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "aggregate%substring3%3#0"
      ]
    },
    "2805": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "result_native.0#0",
        "result_native.1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0"
      ]
    },
    "2808": {
      "op": "dig 2",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "2810": {
      "op": "intc_3 // 8",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "awst_tmp%3#0 (copy)",
        "8"
      ]
    },
    "2811": {
      "op": "extract_uint64",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0"
      ]
    },
    "2812": {
      "op": "uncover 3",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "awst_tmp%3#0"
      ]
    },
    "2814": {
      "op": "extract 16 64",
      "defined_out": [
        "bu#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ]
    },
    "2817": {
      "op": "uncover 6",
      "stack_out": [
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%9#0"
      ]
    },
    "2819": {
      "op": "uncover 4",
      "stack_out": [
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%9#0",
        "result_native.0#0"
      ]
    },
    "2821": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%45#0"
      ]
    },
    "2822": {
      "op": "assert",
      "stack_out": [
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ]
    },
    "2823": {
      "op": "uncover 4",
      "stack_out": [
        "bu#0",
        "tmp%13#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%11#0"
      ]
    },
    "2825": {
      "op": "uncover 3",
      "stack_out": [
        "bu#0",
        "tmp%13#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%11#0",
        "result_native.1#0"
      ]
    },
    "2827": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%13#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%13#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%51#0"
      ]
    },
    "2828": {
      "op": "assert",
      "stack_out": [
        "bu#0",
        "tmp%13#0",
        "result_native.2#0",
        "result_native.3#0"
      ]
    },
    "2829": {
      "op": "cover 2",
      "stack_out": [
        "bu#0",
        "result_native.3#0",
        "tmp%13#0",
        "result_native.2#0"
      ]
    },
    "2831": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result_native.3#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "bu#0",
        "result_native.3#0",
        "tmp%57#0"
      ]
    },
    "2832": {
      "op": "assert",
      "stack_out": [
        "bu#0",
        "result_native.3#0"
      ]
    },
    "2833": {
      "op": "b==",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "2834": {
      "op": "return",
      "stack_out": []
    },
    "2835": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref[routing]",
      "params": {},
      "block": "test_native_tuple_method_ref",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2838": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2839": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "2840": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "2841": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "2842": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2843": {
      "op": "btoi",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0"
      ]
    },
    "2844": {
      "op": "itxn_begin"
    },
    "2845": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "2846": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "2848": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2850": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "2852": {
      "op": "bytec 5 // 0x00027331",
      "defined_out": [
        "0x00027331",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x00027331"
      ]
    },
    "2854": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "2856": {
      "op": "bytec 6 // 0x00026231",
      "defined_out": [
        "0x00026231",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x00026231"
      ]
    },
    "2858": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "2860": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x0000000000000001"
      ]
    },
    "2861": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "2863": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2864": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "2866": {
      "op": "intc_1 // appl",
      "defined_out": [
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "2867": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "2869": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "2870": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "2872": {
      "op": "itxn_submit"
    },
    "2873": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0"
      ]
    },
    "2875": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2876": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2879": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2881": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2884": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "2885": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "2886": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2887": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2888": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "2889": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "2890": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%0#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2892": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%0#0",
        "tmp%2#0 (copy)",
        "2"
      ]
    },
    "2893": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "2894": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2896": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0",
        "tmp%2#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "2898": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0",
        "tmp%2#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0 (copy)"
      ]
    },
    "2900": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0"
      ]
    },
    "2901": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "app#0",
        "awst_tmp%0#0",
        "result.0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0",
        "result.0#0"
      ]
    },
    "2904": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0",
        "result.0#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2906": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0",
        "app#0",
        "awst_tmp%0#0",
        "result.0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0",
        "result.0#0",
        "aggregate%len%0#0"
      ]
    },
    "2907": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "result.0#0",
        "aggregate%len%0#0",
        "tmp%2#0"
      ]
    },
    "2909": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result.0#0",
        "aggregate%len%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "2911": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result.0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0"
      ]
    },
    "2913": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%1#0",
        "app#0",
        "awst_tmp%0#0",
        "result.0#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result.0#0",
        "aggregate%substring3%1#0"
      ]
    },
    "2914": {
      "op": "extract 2 0",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0"
      ]
    },
    "2917": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2919": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%0#0 (copy)",
        "8"
      ]
    },
    "2920": {
      "op": "extract_uint64",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ]
    },
    "2921": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "awst_tmp%0#0"
      ]
    },
    "2923": {
      "op": "extract 16 64",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2926": {
      "op": "dig 3",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.0#0 (copy)",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.0#0 (copy)"
      ]
    },
    "2928": {
      "op": "bytec 10 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "app#0",
        "result.0#0",
        "result.0#0 (copy)",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.0#0 (copy)",
        "\"echo: s1\""
      ]
    },
    "2930": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%9#0"
      ]
    },
    "2931": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2932": {
      "op": "dig 2",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.1#0 (copy)",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.1#0 (copy)"
      ]
    },
    "2934": {
      "op": "bytec 28 // 0x6563686f3a206231",
      "defined_out": [
        "0x6563686f3a206231",
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.1#0 (copy)",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.1#0 (copy)",
        "0x6563686f3a206231"
      ]
    },
    "2936": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%10#0"
      ]
    },
    "2937": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2938": {
      "op": "dig 1",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.2#0 (copy)",
        "result.3#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.2#0 (copy)"
      ]
    },
    "2940": {
      "op": "intc_2 // 2",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.2#0 (copy)",
        "2"
      ]
    },
    "2941": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%11#0"
      ]
    },
    "2942": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2943": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)"
      ]
    },
    "2944": {
      "op": "bytec 18 // 0x03",
      "defined_out": [
        "0x03",
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)",
        "0x03"
      ]
    },
    "2946": {
      "op": "b==",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%12#0"
      ]
    },
    "2947": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2948": {
      "op": "itxn_begin"
    },
    "2949": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1",
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "1"
      ]
    },
    "2951": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2952": {
      "op": "dig 5",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "aggregate%val_as_bytes%0#0",
        "app#0 (copy)"
      ]
    },
    "2954": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2956": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "aggregate%val_as_bytes%0#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2958": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2960": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "aggregate%val_as_bytes%0#0",
        "0x00027331"
      ]
    },
    "2962": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2964": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "aggregate%val_as_bytes%0#0",
        "0x00026231"
      ]
    },
    "2966": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2968": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2970": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2971": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2973": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "appl"
      ]
    },
    "2974": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2976": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0"
      ]
    },
    "2977": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2979": {
      "op": "itxn_submit"
    },
    "2980": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0"
      ]
    },
    "2982": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2983": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0"
      ]
    },
    "2986": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2988": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "2991": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "2992": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "2993": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0"
      ]
    },
    "2994": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ]
    },
    "2995": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "0"
      ]
    },
    "2996": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "app#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "2997": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%3#0",
        "tmp%17#0 (copy)"
      ]
    },
    "2999": {
      "op": "intc_2 // 2",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%3#0",
        "tmp%17#0 (copy)",
        "2"
      ]
    },
    "3000": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "app#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "3001": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "tmp%17#0 (copy)"
      ]
    },
    "3003": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%4#0",
        "tmp%17#0 (copy)",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "3005": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%extract_uint16%4#0 (copy)",
        "app#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%4#0",
        "tmp%17#0 (copy)",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0 (copy)"
      ]
    },
    "3007": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%2#0",
        "app#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%2#0"
      ]
    },
    "3008": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "app#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%4#0",
        "result_2.0#0"
      ]
    },
    "3011": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%4#0",
        "result_2.0#0",
        "tmp%17#0 (copy)"
      ]
    },
    "3013": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "aggregate%len%1#0",
        "app#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%4#0",
        "result_2.0#0",
        "aggregate%len%1#0"
      ]
    },
    "3014": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "aggregate%extract_uint16%4#0",
        "result_2.0#0",
        "aggregate%len%1#0",
        "tmp%17#0"
      ]
    },
    "3016": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "aggregate%len%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "3018": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "tmp%17#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%1#0"
      ]
    },
    "3020": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%3#0",
        "app#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "aggregate%substring3%3#0"
      ]
    },
    "3021": {
      "op": "extract 2 0",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "result_2.1#0"
      ]
    },
    "3024": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "result_2.1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3026": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "result_2.1#0",
        "awst_tmp%1#0 (copy)",
        "8"
      ]
    },
    "3027": {
      "op": "extract_uint64",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0"
      ]
    },
    "3028": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "awst_tmp%1#0"
      ]
    },
    "3030": {
      "op": "extract 16 64",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0"
      ]
    },
    "3033": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "result_2.0#0"
      ]
    },
    "3035": {
      "op": "dig 7",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "result_2.0#0",
        "result.0#0 (copy)"
      ]
    },
    "3037": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%24#0"
      ]
    },
    "3038": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%24#0",
        "result_2.1#0"
      ]
    },
    "3040": {
      "op": "dig 6",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%24#0",
        "result_2.1#0",
        "result.1#0 (copy)"
      ]
    },
    "3042": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "3043": {
      "op": "&&",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%26#0"
      ]
    },
    "3044": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%26#0",
        "result_2.2#0"
      ]
    },
    "3046": {
      "op": "dig 4",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%26#0",
        "result_2.2#0",
        "result.2#0 (copy)"
      ]
    },
    "3048": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "3049": {
      "op": "&&",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%28#0"
      ]
    },
    "3050": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%28#0",
        "result_2.3#0"
      ]
    },
    "3051": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%28#0",
        "result_2.3#0",
        "result.3#0 (copy)"
      ]
    },
    "3053": {
      "op": "b==",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "3054": {
      "op": "&&",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%30#0"
      ]
    },
    "3055": {
      "error": "expected native arguments to give the same result",
      "op": "assert // expected native arguments to give the same result",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3056": {
      "op": "itxn_begin"
    },
    "3057": {
      "op": "dig 4",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "app#0 (copy)"
      ]
    },
    "3059": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3061": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3063": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3065": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00027331"
      ]
    },
    "3067": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3069": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00026231"
      ]
    },
    "3071": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3073": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x0000000000000001"
      ]
    },
    "3074": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3076": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3077": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3079": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "appl"
      ]
    },
    "3080": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3082": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0"
      ]
    },
    "3083": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3085": {
      "op": "itxn_submit"
    },
    "3086": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0"
      ]
    },
    "3088": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3089": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0"
      ]
    },
    "3092": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3094": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "3097": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "tmp%34#0",
        "0x151f7c75"
      ]
    },
    "3098": {
      "op": "==",
      "defined_out": [
        "app#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%33#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "tmp%35#0"
      ]
    },
    "3099": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0"
      ]
    },
    "3100": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%33#0",
        "tmp%33#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "tmp%33#0 (copy)"
      ]
    },
    "3101": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "tmp%33#0 (copy)",
        "0"
      ]
    },
    "3102": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%6#0",
        "app#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "3103": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%6#0",
        "tmp%33#0 (copy)"
      ]
    },
    "3105": {
      "op": "intc_2 // 2",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%6#0",
        "tmp%33#0 (copy)",
        "2"
      ]
    },
    "3106": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%6#0",
        "aggregate%extract_uint16%7#0",
        "app#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "3107": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%extract_uint16%7#0",
        "tmp%33#0 (copy)"
      ]
    },
    "3109": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%7#0",
        "tmp%33#0 (copy)",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "3111": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%6#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%7#0 (copy)",
        "app#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%33#0",
        "tmp%33#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%7#0",
        "tmp%33#0 (copy)",
        "aggregate%extract_uint16%6#0",
        "aggregate%extract_uint16%7#0 (copy)"
      ]
    },
    "3113": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "aggregate%substring3%4#0",
        "app#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%substring3%4#0"
      ]
    },
    "3114": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "app#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%7#0",
        "result_3.0#0"
      ]
    },
    "3117": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%7#0",
        "result_3.0#0",
        "tmp%33#0 (copy)"
      ]
    },
    "3119": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "aggregate%len%2#0",
        "app#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%7#0",
        "result_3.0#0",
        "aggregate%len%2#0"
      ]
    },
    "3120": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "aggregate%extract_uint16%7#0",
        "result_3.0#0",
        "aggregate%len%2#0",
        "tmp%33#0"
      ]
    },
    "3122": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "aggregate%len%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "3124": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "tmp%33#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%len%2#0"
      ]
    },
    "3126": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%5#0",
        "app#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "aggregate%substring3%5#0"
      ]
    },
    "3127": {
      "op": "extract 2 0",
      "defined_out": [
        "app#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "result_3.1#0"
      ]
    },
    "3130": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "result_3.1#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3132": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "result_3.1#0",
        "awst_tmp%2#0 (copy)",
        "8"
      ]
    },
    "3133": {
      "op": "extract_uint64",
      "defined_out": [
        "app#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0"
      ]
    },
    "3134": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "awst_tmp%2#0"
      ]
    },
    "3136": {
      "op": "extract 16 64",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0"
      ]
    },
    "3139": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "result_3.0#0"
      ]
    },
    "3141": {
      "op": "dig 7",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "result_3.0#0",
        "result.0#0 (copy)"
      ]
    },
    "3143": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%40#0"
      ]
    },
    "3144": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%40#0",
        "result_3.1#0"
      ]
    },
    "3146": {
      "op": "dig 6",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%40#0",
        "result_3.1#0",
        "result.1#0 (copy)"
      ]
    },
    "3148": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "3149": {
      "op": "&&",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%42#0"
      ]
    },
    "3150": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%42#0",
        "result_3.2#0"
      ]
    },
    "3152": {
      "op": "dig 4",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%42#0",
        "result_3.2#0",
        "result.2#0 (copy)"
      ]
    },
    "3154": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%42#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%42#0",
        "tmp%43#0"
      ]
    },
    "3155": {
      "op": "&&",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%44#0"
      ]
    },
    "3156": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%44#0",
        "result_3.3#0"
      ]
    },
    "3157": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%44#0",
        "result_3.3#0",
        "result.3#0 (copy)"
      ]
    },
    "3159": {
      "op": "b==",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%44#0",
        "tmp%45#0"
      ]
    },
    "3160": {
      "op": "&&",
      "defined_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%46#0"
      ]
    },
    "3161": {
      "error": "expected arc4 arguments to give the same result",
      "op": "assert // expected arc4 arguments to give the same result",
      "stack_out": [
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3162": {
      "op": "itxn_begin"
    },
    "3163": {
      "op": "uncover 4",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "app#0"
      ]
    },
    "3165": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3167": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3169": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3171": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00027331"
      ]
    },
    "3173": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3175": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00026231"
      ]
    },
    "3177": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3179": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x0000000000000001"
      ]
    },
    "3180": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3182": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3183": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3185": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "appl"
      ]
    },
    "3186": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3188": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0"
      ]
    },
    "3189": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3191": {
      "op": "itxn_submit"
    },
    "3192": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0"
      ]
    },
    "3194": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3195": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0"
      ]
    },
    "3198": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3200": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "tmp%50#0"
      ]
    },
    "3203": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "tmp%50#0",
        "0x151f7c75"
      ]
    },
    "3204": {
      "op": "==",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%49#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "tmp%51#0"
      ]
    },
    "3205": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0"
      ]
    },
    "3206": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%49#0",
        "tmp%49#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "tmp%49#0 (copy)"
      ]
    },
    "3207": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "tmp%49#0 (copy)",
        "0"
      ]
    },
    "3208": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%9#0",
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "3209": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%9#0",
        "tmp%49#0 (copy)"
      ]
    },
    "3211": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%9#0",
        "tmp%49#0 (copy)",
        "2"
      ]
    },
    "3212": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%9#0",
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "3213": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0",
        "tmp%49#0 (copy)"
      ]
    },
    "3215": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%10#0",
        "tmp%49#0 (copy)",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "3217": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%10#0 (copy)",
        "aggregate%extract_uint16%9#0",
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%49#0",
        "tmp%49#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%10#0",
        "tmp%49#0 (copy)",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0 (copy)"
      ]
    },
    "3219": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%6#0",
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%6#0"
      ]
    },
    "3220": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%10#0",
        "result_native.0#0"
      ]
    },
    "3223": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%10#0",
        "result_native.0#0",
        "tmp%49#0 (copy)"
      ]
    },
    "3225": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%len%3#0",
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%10#0",
        "result_native.0#0",
        "aggregate%len%3#0"
      ]
    },
    "3226": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "aggregate%extract_uint16%10#0",
        "result_native.0#0",
        "aggregate%len%3#0",
        "tmp%49#0"
      ]
    },
    "3228": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "aggregate%len%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "3230": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "tmp%49#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%len%3#0"
      ]
    },
    "3232": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%7#0",
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "aggregate%substring3%7#0"
      ]
    },
    "3233": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0"
      ]
    },
    "3236": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3238": {
      "op": "intc_3 // 8",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "awst_tmp%3#0 (copy)",
        "8"
      ]
    },
    "3239": {
      "op": "extract_uint64",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0"
      ]
    },
    "3240": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "awst_tmp%3#0"
      ]
    },
    "3242": {
      "op": "extract 16 64",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ]
    },
    "3245": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "result_native.0#0"
      ]
    },
    "3247": {
      "op": "uncover 7",
      "stack_out": [
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "result_native.0#0",
        "result.0#0"
      ]
    },
    "3249": {
      "op": "==",
      "defined_out": [
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%56#0"
      ]
    },
    "3250": {
      "op": "uncover 3",
      "stack_out": [
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%56#0",
        "result_native.1#0"
      ]
    },
    "3252": {
      "op": "uncover 6",
      "stack_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%56#0",
        "result_native.1#0",
        "result.1#0"
      ]
    },
    "3254": {
      "op": "==",
      "defined_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%56#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%56#0",
        "tmp%57#0"
      ]
    },
    "3255": {
      "op": "&&",
      "defined_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%58#0"
      ]
    },
    "3256": {
      "op": "uncover 2",
      "stack_out": [
        "result.2#0",
        "result.3#0",
        "result_native.3#0",
        "tmp%58#0",
        "result_native.2#0"
      ]
    },
    "3258": {
      "op": "uncover 4",
      "stack_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%58#0",
        "result_native.2#0",
        "result.2#0"
      ]
    },
    "3260": {
      "op": "==",
      "defined_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%58#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%58#0",
        "tmp%59#0"
      ]
    },
    "3261": {
      "op": "&&",
      "defined_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%60#0"
      ]
    },
    "3262": {
      "op": "swap",
      "stack_out": [
        "result.3#0",
        "tmp%60#0",
        "result_native.3#0"
      ]
    },
    "3263": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%60#0",
        "result_native.3#0",
        "result.3#0"
      ]
    },
    "3265": {
      "op": "b==",
      "defined_out": [
        "tmp%60#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "tmp%61#0"
      ]
    },
    "3266": {
      "op": "&&",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "3267": {
      "op": "return",
      "stack_out": []
    },
    "3268": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples[routing]",
      "params": {},
      "block": "test_nested_tuples",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3271": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3272": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "3273": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "3274": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "3275": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3276": {
      "op": "btoi",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0"
      ]
    },
    "3277": {
      "op": "itxn_begin"
    },
    "3278": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "3279": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "3281": {
      "op": "bytec 19 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "defined_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "3283": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "3285": {
      "op": "bytec 29 // 0x00040010000400080002733100027332000000000000000100000000000000020012000133",
      "defined_out": [
        "0x00040010000400080002733100027332000000000000000100000000000000020012000133",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x00040010000400080002733100027332000000000000000100000000000000020012000133"
      ]
    },
    "3287": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "3289": {
      "op": "intc_1 // appl",
      "defined_out": [
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "3290": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "3292": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "3293": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "3295": {
      "op": "itxn_submit"
    },
    "3296": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0"
      ]
    },
    "3298": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3299": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "3302": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "awst_tmp%0#0"
      ]
    },
    "3303": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "3306": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "app#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "3307": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "3308": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "tmp%4#0"
      ]
    },
    "3309": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "3310": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "0"
      ]
    },
    "3311": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "app#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "3312": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%0#0",
        "tmp%4#0 (copy)"
      ]
    },
    "3314": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "app#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%0#0",
        "tmp%4#0 (copy)",
        "2"
      ]
    },
    "3315": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "app#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "3316": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%4#0 (copy)"
      ]
    },
    "3318": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "tmp%4#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "3320": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "app#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "tmp%4#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0 (copy)"
      ]
    },
    "3322": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "app#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0"
      ]
    },
    "3323": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "app#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "3324": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "0"
      ]
    },
    "3325": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "app#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "3326": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "3328": {
      "op": "intc_2 // 2",
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0 (copy)",
        "2"
      ]
    },
    "3329": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0",
        "app#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "3330": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "3332": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0 (copy)",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "3334": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%3#0 (copy)",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "app#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0 (copy)",
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0 (copy)"
      ]
    },
    "3336": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%1#0",
        "app#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%1#0"
      ]
    },
    "3337": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0",
        "app#0",
        "result.0.0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "result.0.0#0"
      ]
    },
    "3340": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "result.0.0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "3342": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "app#0",
        "result.0.0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "result.0.0#0",
        "aggregate%len%0#0"
      ]
    },
    "3343": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%3#0",
        "result.0.0#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "3345": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "result.0.0#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "3347": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "result.0.0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%len%0#0"
      ]
    },
    "3349": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "result.0.0#0",
        "result.0.1#0"
      ]
    },
    "3350": {
      "op": "dig 3",
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%4#0 (copy)"
      ]
    },
    "3352": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0",
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%len%1#0"
      ]
    },
    "3353": {
      "op": "uncover 4",
      "stack_out": [
        "app#0",
        "aggregate%extract_uint16%1#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%len%1#0",
        "tmp%4#0"
      ]
    },
    "3355": {
      "op": "uncover 4",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%len%1#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "3357": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0"
      ]
    },
    "3359": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%3#0",
        "app#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0"
      ]
    },
    "3360": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "app#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "3361": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "0"
      ]
    },
    "3362": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%substring3%3#0",
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0"
      ],
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "result.1.0#0"
      ]
    },
    "3363": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "result.1.0#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "3365": {
      "op": "extract 8 8",
      "defined_out": [
        "aggregate%substring3%3#0",
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "result.1.0#0",
        "result.1.1#0"
      ]
    },
    "3368": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "3370": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%3#0 (copy)",
        "16"
      ]
    },
    "3372": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%6#0",
        "aggregate%substring3%3#0",
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "3373": {
      "op": "dig 3",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "3375": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0",
        "aggregate%substring3%3#0",
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0"
      ]
    },
    "3376": {
      "op": "uncover 4",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0",
        "aggregate%substring3%3#0"
      ]
    },
    "3378": {
      "op": "cover 2",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%3#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0"
      ]
    },
    "3380": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%4#0",
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%4#0"
      ]
    },
    "3381": {
      "op": "extract 2 0",
      "defined_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3384": {
      "op": "uncover 4",
      "stack_out": [
        "app#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0"
      ]
    },
    "3386": {
      "op": "bytec 10 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "app#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0",
        "\"echo: s1\""
      ]
    },
    "3388": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "app#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%12#0"
      ]
    },
    "3389": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3390": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0"
      ]
    },
    "3392": {
      "op": "bytec 30 // 0x00086563686f3a207332",
      "defined_out": [
        "0x00086563686f3a207332",
        "app#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "app#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0",
        "0x00086563686f3a207332"
      ]
    },
    "3394": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "app#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%14#0"
      ]
    },
    "3395": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3396": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0"
      ]
    },
    "3398": {
      "op": "intc_2 // 2",
      "stack_out": [
        "app#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0",
        "2"
      ]
    },
    "3399": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "app#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%15#0"
      ]
    },
    "3400": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3401": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "result.1.2#0",
        "result.1.1#0"
      ]
    },
    "3402": {
      "op": "bytec 11 // 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003",
        "app#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "app#0",
        "result.1.2#0",
        "result.1.1#0",
        "0x0000000000000003"
      ]
    },
    "3404": {
      "op": "b==",
      "defined_out": [
        "app#0",
        "result.1.2#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "app#0",
        "result.1.2#0",
        "tmp%16#0"
      ]
    },
    "3405": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result.1.2#0"
      ]
    },
    "3406": {
      "op": "bytec 31 // 0x6563686f3a2033",
      "defined_out": [
        "0x6563686f3a2033",
        "app#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "app#0",
        "result.1.2#0",
        "0x6563686f3a2033"
      ]
    },
    "3408": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%17#0"
      ]
    },
    "3409": {
      "op": "assert",
      "stack_out": [
        "app#0"
      ]
    },
    "3410": {
      "op": "itxn_begin"
    },
    "3411": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "3412": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "3414": {
      "op": "bytec 19 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "stack_out": [
        "app#0",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "3416": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "3418": {
      "op": "bytec 29 // 0x00040010000400080002733100027332000000000000000100000000000000020012000133",
      "stack_out": [
        "app#0",
        "0x00040010000400080002733100027332000000000000000100000000000000020012000133"
      ]
    },
    "3420": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "3422": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "3423": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "3425": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "3426": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "3428": {
      "op": "itxn_submit"
    },
    "3429": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0"
      ]
    },
    "3431": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3432": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "tmp%20#0"
      ]
    },
    "3435": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "awst_tmp%1#0"
      ]
    },
    "3436": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "3439": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "3440": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%20#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "tmp%22#0"
      ]
    },
    "3441": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "tmp%20#0"
      ]
    },
    "3442": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ]
    },
    "3443": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "tmp%20#0 (copy)",
        "0"
      ]
    },
    "3444": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "app#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "3445": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%7#0",
        "tmp%20#0 (copy)"
      ]
    },
    "3447": {
      "op": "intc_2 // 2",
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%7#0",
        "tmp%20#0 (copy)",
        "2"
      ]
    },
    "3448": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%8#0",
        "app#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%8#0"
      ]
    },
    "3449": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%8#0",
        "tmp%20#0 (copy)"
      ]
    },
    "3451": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "tmp%20#0 (copy)",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "3453": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%extract_uint16%8#0 (copy)",
        "app#0",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "tmp%20#0 (copy)",
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%8#0 (copy)"
      ]
    },
    "3455": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "app#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0"
      ]
    },
    "3456": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "app#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "3457": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "0"
      ]
    },
    "3458": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%8#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "app#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "3459": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "3461": {
      "op": "intc_2 // 2",
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0 (copy)",
        "2"
      ]
    },
    "3462": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "app#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "3463": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "3465": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%5#0 (copy)",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "3467": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%10#0 (copy)",
        "aggregate%extract_uint16%8#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "app#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%5#0 (copy)",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0 (copy)"
      ]
    },
    "3469": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%6#0",
        "app#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%6#0"
      ]
    },
    "3470": {
      "op": "extract 2 0",
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "result.0.0#0"
      ]
    },
    "3473": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "result.0.0#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "3475": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%len%3#0",
        "aggregate%substring3%5#0",
        "app#0",
        "result.0.0#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "result.0.0#0",
        "aggregate%len%3#0"
      ]
    },
    "3476": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%extract_uint16%10#0",
        "result.0.0#0",
        "aggregate%len%3#0",
        "aggregate%substring3%5#0"
      ]
    },
    "3478": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "result.0.0#0",
        "aggregate%len%3#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "3480": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "result.0.0#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%len%3#0"
      ]
    },
    "3482": {
      "op": "substring3",
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "result.0.0#0",
        "result.0.1#0"
      ]
    },
    "3483": {
      "op": "dig 3",
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%20#0 (copy)"
      ]
    },
    "3485": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%8#0",
        "aggregate%len%4#0",
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%len%4#0"
      ]
    },
    "3486": {
      "op": "uncover 4",
      "stack_out": [
        "app#0",
        "aggregate%extract_uint16%8#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%len%4#0",
        "tmp%20#0"
      ]
    },
    "3488": {
      "op": "uncover 4",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%len%4#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0"
      ]
    },
    "3490": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%len%4#0"
      ]
    },
    "3492": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%8#0",
        "app#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0"
      ]
    },
    "3493": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)",
        "app#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)"
      ]
    },
    "3494": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)",
        "0"
      ]
    },
    "3495": {
      "op": "extract_uint64",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "result.1.0#0"
      ]
    },
    "3496": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "result.1.0#0",
        "aggregate%substring3%8#0 (copy)"
      ]
    },
    "3498": {
      "op": "extract 8 8",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "result.1.0#0",
        "result.1.1#0"
      ]
    },
    "3501": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%8#0 (copy)"
      ]
    },
    "3503": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%8#0 (copy)",
        "16"
      ]
    },
    "3505": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%13#0",
        "aggregate%substring3%8#0",
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%13#0"
      ]
    },
    "3506": {
      "op": "dig 3",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%substring3%8#0 (copy)"
      ]
    },
    "3508": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%13#0",
        "aggregate%len%5#0",
        "aggregate%substring3%8#0",
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%len%5#0"
      ]
    },
    "3509": {
      "op": "uncover 4",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%len%5#0",
        "aggregate%substring3%8#0"
      ]
    },
    "3511": {
      "op": "cover 2",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%8#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%len%5#0"
      ]
    },
    "3513": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%9#0",
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%9#0"
      ]
    },
    "3514": {
      "op": "extract 2 0",
      "stack_out": [
        "app#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3517": {
      "op": "uncover 4",
      "stack_out": [
        "app#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0"
      ]
    },
    "3519": {
      "op": "bytec 10 // \"echo: s1\"",
      "stack_out": [
        "app#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0",
        "\"echo: s1\""
      ]
    },
    "3521": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "app#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%28#0"
      ]
    },
    "3522": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3523": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0"
      ]
    },
    "3525": {
      "op": "bytec 30 // 0x00086563686f3a207332",
      "stack_out": [
        "app#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0",
        "0x00086563686f3a207332"
      ]
    },
    "3527": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "app#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%30#0"
      ]
    },
    "3528": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3529": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0"
      ]
    },
    "3531": {
      "op": "intc_2 // 2",
      "stack_out": [
        "app#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0",
        "2"
      ]
    },
    "3532": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "app#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%31#0"
      ]
    },
    "3533": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3534": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "result.1.2#0",
        "result.1.1#0"
      ]
    },
    "3535": {
      "op": "bytec 11 // 0x0000000000000003",
      "stack_out": [
        "app#0",
        "result.1.2#0",
        "result.1.1#0",
        "0x0000000000000003"
      ]
    },
    "3537": {
      "op": "b==",
      "defined_out": [
        "app#0",
        "result.1.2#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "app#0",
        "result.1.2#0",
        "tmp%32#0"
      ]
    },
    "3538": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "result.1.2#0"
      ]
    },
    "3539": {
      "op": "bytec 31 // 0x6563686f3a2033",
      "stack_out": [
        "app#0",
        "result.1.2#0",
        "0x6563686f3a2033"
      ]
    },
    "3541": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%33#0"
      ]
    },
    "3542": {
      "op": "assert",
      "stack_out": [
        "app#0"
      ]
    },
    "3543": {
      "op": "itxn_begin"
    },
    "3544": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3546": {
      "op": "bytec 19 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "stack_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "3548": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3550": {
      "op": "pushbytes 0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362",
      "defined_out": [
        "0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362"
      ],
      "stack_out": [
        "0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362"
      ]
    },
    "3592": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3594": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "3595": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3597": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3598": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3600": {
      "op": "itxn_submit"
    },
    "3601": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "3603": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3604": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%40#0"
      ]
    },
    "3607": {
      "op": "swap",
      "stack_out": [
        "tmp%40#0",
        "awst_tmp%2#0"
      ]
    },
    "3608": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "3611": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%40#0",
        "tmp%41#0",
        "0x151f7c75"
      ]
    },
    "3612": {
      "op": "==",
      "defined_out": [
        "tmp%40#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "tmp%42#0"
      ]
    },
    "3613": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "3614": {
      "op": "dup",
      "defined_out": [
        "tmp%40#0",
        "tmp%40#0 (copy)"
      ],
      "stack_out": [
        "tmp%40#0",
        "tmp%40#0 (copy)"
      ]
    },
    "3615": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%40#0",
        "tmp%40#0 (copy)",
        "0"
      ]
    },
    "3616": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%14#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%14#0"
      ]
    },
    "3617": {
      "op": "dig 1",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%14#0",
        "tmp%40#0 (copy)"
      ]
    },
    "3619": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%14#0",
        "tmp%40#0 (copy)",
        "2"
      ]
    },
    "3620": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%14#0",
        "aggregate%extract_uint16%15#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%14#0",
        "aggregate%extract_uint16%15#0"
      ]
    },
    "3621": {
      "op": "dig 2",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%14#0",
        "aggregate%extract_uint16%15#0",
        "tmp%40#0 (copy)"
      ]
    },
    "3623": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "tmp%40#0 (copy)",
        "aggregate%extract_uint16%14#0"
      ]
    },
    "3625": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%14#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%extract_uint16%15#0 (copy)",
        "tmp%40#0",
        "tmp%40#0 (copy)"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "tmp%40#0 (copy)",
        "aggregate%extract_uint16%14#0",
        "aggregate%extract_uint16%15#0 (copy)"
      ]
    },
    "3627": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0"
      ]
    },
    "3628": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%substring3%10#0 (copy)",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%substring3%10#0 (copy)"
      ]
    },
    "3629": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%substring3%10#0 (copy)",
        "0"
      ]
    },
    "3630": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%substring3%10#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%16#0"
      ]
    },
    "3631": {
      "op": "dig 1",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%substring3%10#0 (copy)"
      ]
    },
    "3633": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%substring3%10#0 (copy)",
        "2"
      ]
    },
    "3634": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%substring3%10#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%extract_uint16%17#0"
      ]
    },
    "3635": {
      "op": "dig 2",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%substring3%10#0 (copy)"
      ]
    },
    "3637": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%substring3%10#0 (copy)",
        "aggregate%extract_uint16%16#0"
      ]
    },
    "3639": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%extract_uint16%17#0 (copy)",
        "aggregate%substring3%10#0",
        "aggregate%substring3%10#0 (copy)",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%substring3%10#0 (copy)",
        "aggregate%extract_uint16%16#0",
        "aggregate%extract_uint16%17#0 (copy)"
      ]
    },
    "3641": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%substring3%10#0",
        "aggregate%substring3%11#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%substring3%11#0"
      ]
    },
    "3642": {
      "op": "extract 2 0",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%17#0",
        "result.0.0#0"
      ]
    },
    "3645": {
      "op": "dig 2",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%17#0",
        "result.0.0#0",
        "aggregate%substring3%10#0 (copy)"
      ]
    },
    "3647": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%len%6#0",
        "aggregate%substring3%10#0",
        "result.0.0#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%17#0",
        "result.0.0#0",
        "aggregate%len%6#0"
      ]
    },
    "3648": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%extract_uint16%17#0",
        "result.0.0#0",
        "aggregate%len%6#0",
        "aggregate%substring3%10#0"
      ]
    },
    "3650": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "result.0.0#0",
        "aggregate%len%6#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%17#0"
      ]
    },
    "3652": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "result.0.0#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%len%6#0"
      ]
    },
    "3654": {
      "op": "substring3",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "result.0.0#0",
        "result.0.1#0"
      ]
    },
    "3655": {
      "op": "dig 3",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%40#0 (copy)"
      ]
    },
    "3657": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "aggregate%len%7#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%len%7#0"
      ]
    },
    "3658": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%extract_uint16%15#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%len%7#0",
        "tmp%40#0"
      ]
    },
    "3660": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%len%7#0",
        "tmp%40#0",
        "aggregate%extract_uint16%15#0"
      ]
    },
    "3662": {
      "op": "uncover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%len%7#0"
      ]
    },
    "3664": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%13#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0"
      ]
    },
    "3665": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%13#0",
        "aggregate%substring3%13#0 (copy)",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "aggregate%substring3%13#0 (copy)"
      ]
    },
    "3666": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "aggregate%substring3%13#0 (copy)",
        "0"
      ]
    },
    "3667": {
      "op": "extract_uint64",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "result.1.0#0"
      ]
    },
    "3668": {
      "op": "dig 1",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "result.1.0#0",
        "aggregate%substring3%13#0 (copy)"
      ]
    },
    "3670": {
      "op": "extract 8 8",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "result.1.0#0",
        "result.1.1#0"
      ]
    },
    "3673": {
      "op": "dig 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%13#0 (copy)"
      ]
    },
    "3675": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%13#0 (copy)",
        "16"
      ]
    },
    "3677": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%20#0",
        "aggregate%substring3%13#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%20#0"
      ]
    },
    "3678": {
      "op": "dig 3",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%20#0",
        "aggregate%substring3%13#0 (copy)"
      ]
    },
    "3680": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%20#0",
        "aggregate%len%8#0",
        "aggregate%substring3%13#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%20#0",
        "aggregate%len%8#0"
      ]
    },
    "3681": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%20#0",
        "aggregate%len%8#0",
        "aggregate%substring3%13#0"
      ]
    },
    "3683": {
      "op": "cover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%13#0",
        "aggregate%extract_uint16%20#0",
        "aggregate%len%8#0"
      ]
    },
    "3685": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%14#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%14#0"
      ]
    },
    "3686": {
      "op": "extract 2 0",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3689": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0"
      ]
    },
    "3691": {
      "op": "pushbytes \"echo: s1b\"",
      "defined_out": [
        "\"echo: s1b\"",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0",
        "\"echo: s1b\""
      ]
    },
    "3702": {
      "op": "==",
      "defined_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%48#0"
      ]
    },
    "3703": {
      "op": "assert",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3704": {
      "op": "uncover 3",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0"
      ]
    },
    "3706": {
      "op": "pushbytes 0x00096563686f3a20733262",
      "defined_out": [
        "0x00096563686f3a20733262",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0",
        "0x00096563686f3a20733262"
      ]
    },
    "3719": {
      "op": "==",
      "defined_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%50#0"
      ]
    },
    "3720": {
      "op": "assert",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3721": {
      "op": "uncover 2",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0"
      ]
    },
    "3723": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0",
        "12"
      ]
    },
    "3725": {
      "op": "==",
      "defined_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%51#0"
      ]
    },
    "3726": {
      "op": "assert",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3727": {
      "op": "swap",
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0"
      ]
    },
    "3728": {
      "op": "pushbytes 0x0000000000000016",
      "defined_out": [
        "0x0000000000000016",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0",
        "0x0000000000000016"
      ]
    },
    "3738": {
      "op": "b==",
      "defined_out": [
        "result.1.2#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "tmp%52#0"
      ]
    },
    "3739": {
      "op": "assert",
      "stack_out": [
        "result.1.2#0"
      ]
    },
    "3740": {
      "op": "pushbytes 0x6563686f3a203362",
      "defined_out": [
        "0x6563686f3a203362",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "0x6563686f3a203362"
      ]
    },
    "3750": {
      "op": "==",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "3751": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "3752": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args[routing]",
      "params": {},
      "block": "test_no_args",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3755": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3756": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "3757": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "3758": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "3759": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3760": {
      "op": "btoi",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0"
      ]
    },
    "3761": {
      "op": "itxn_begin"
    },
    "3762": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "3763": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "3765": {
      "op": "bytec 20 // method \"no_args()uint64\"",
      "defined_out": [
        "Method(no_args()uint64)",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "Method(no_args()uint64)"
      ]
    },
    "3767": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "3769": {
      "op": "intc_1 // appl",
      "defined_out": [
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "3770": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "3772": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "3773": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "3775": {
      "op": "itxn_submit"
    },
    "3776": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0"
      ]
    },
    "3778": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3779": {
      "op": "extract 4 0",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3782": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3783": {
      "op": "len",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "3784": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "3785": {
      "op": "==",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "3786": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3787": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3788": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "tmp%0#0",
        "tmp%1#1"
      ]
    },
    "3791": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "app#0",
        "tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "tmp%0#0",
        "tmp%1#1",
        "0x151f7c75"
      ]
    },
    "3792": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3793": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "tmp%0#0"
      ]
    },
    "3794": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "result#0"
      ]
    },
    "3795": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "app#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "result#0",
        "42"
      ]
    },
    "3797": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#0"
      ]
    },
    "3798": {
      "op": "assert",
      "stack_out": [
        "app#0"
      ]
    },
    "3799": {
      "op": "itxn_begin"
    },
    "3800": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "3801": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "3803": {
      "op": "bytec 20 // method \"no_args()uint64\"",
      "stack_out": [
        "app#0",
        "Method(no_args()uint64)"
      ]
    },
    "3805": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "3807": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "3808": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "3810": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "3811": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "3813": {
      "op": "itxn_submit"
    },
    "3814": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0"
      ]
    },
    "3816": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3817": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "arc4_result#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "arc4_result#0"
      ]
    },
    "3820": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "arc4_result#0",
        "arc4_result#0 (copy)",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "arc4_result#0",
        "arc4_result#0 (copy)"
      ]
    },
    "3821": {
      "op": "len",
      "defined_out": [
        "app#0",
        "arc4_result#0",
        "awst_tmp%1#0",
        "len%1#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "arc4_result#0",
        "len%1#0"
      ]
    },
    "3822": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "arc4_result#0",
        "len%1#0",
        "8"
      ]
    },
    "3823": {
      "op": "==",
      "defined_out": [
        "app#0",
        "arc4_result#0",
        "awst_tmp%1#0",
        "eq%1#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "arc4_result#0",
        "eq%1#0"
      ]
    },
    "3824": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "app#0",
        "awst_tmp%1#0",
        "arc4_result#0"
      ]
    },
    "3825": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "arc4_result#0",
        "awst_tmp%1#0"
      ]
    },
    "3826": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "arc4_result#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "app#0",
        "arc4_result#0",
        "tmp%6#0"
      ]
    },
    "3829": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "arc4_result#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "3830": {
      "op": "==",
      "defined_out": [
        "app#0",
        "arc4_result#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "app#0",
        "arc4_result#0",
        "tmp%7#0"
      ]
    },
    "3831": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "arc4_result#0"
      ]
    },
    "3832": {
      "op": "bytec 32 // 0x000000000000002a",
      "defined_out": [
        "0x000000000000002a",
        "app#0",
        "arc4_result#0"
      ],
      "stack_out": [
        "app#0",
        "arc4_result#0",
        "0x000000000000002a"
      ]
    },
    "3834": {
      "op": "b==",
      "defined_out": [
        "app#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%8#0"
      ]
    },
    "3835": {
      "op": "assert",
      "stack_out": [
        "app#0"
      ]
    },
    "3836": {
      "op": "itxn_begin"
    },
    "3837": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3839": {
      "op": "bytec 20 // method \"no_args()uint64\"",
      "stack_out": [
        "Method(no_args()uint64)"
      ]
    },
    "3841": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3843": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "3844": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3846": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3847": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3849": {
      "op": "itxn_submit"
    },
    "3850": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "3852": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3853": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%9#0"
      ]
    },
    "3856": {
      "op": "len",
      "defined_out": [
        "awst_tmp%2#0",
        "len%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "len%2#0"
      ]
    },
    "3857": {
      "op": "intc_3 // 8",
      "stack_out": [
        "awst_tmp%2#0",
        "len%2#0",
        "8"
      ]
    },
    "3858": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "eq%2#0"
      ]
    },
    "3859": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "3860": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "3863": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "3864": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "3865": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "3866": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%3#0"
      ]
    },
    "3868": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3869": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%13#0"
      ]
    },
    "3872": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "3873": {
      "op": "len",
      "defined_out": [
        "awst_tmp%3#0",
        "len%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%13#0",
        "len%3#0"
      ]
    },
    "3874": {
      "op": "intc_3 // 8",
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%13#0",
        "len%3#0",
        "8"
      ]
    },
    "3875": {
      "op": "==",
      "defined_out": [
        "awst_tmp%3#0",
        "eq%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%13#0",
        "eq%3#0"
      ]
    },
    "3876": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%13#0"
      ]
    },
    "3877": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "awst_tmp%3#0"
      ]
    },
    "3878": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "3881": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "3882": {
      "op": "==",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "3883": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "3884": {
      "op": "bytec 32 // 0x000000000000002a",
      "stack_out": [
        "tmp%13#0",
        "0x000000000000002a"
      ]
    },
    "3886": {
      "op": "b==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "3887": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "3888": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples[routing]",
      "params": {},
      "block": "test_named_tuples",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3891": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3892": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "3893": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "3894": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "3895": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3896": {
      "op": "btoi",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0"
      ]
    },
    "3897": {
      "op": "itxn_begin"
    },
    "3898": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "3899": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0"
      ]
    },
    "3901": {
      "op": "bytec 33 // method \"logs_are_equal((uint64,string),(uint64,string))bool\"",
      "defined_out": [
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ]
    },
    "3903": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "3905": {
      "op": "bytec 7 // 0x0000000000000001000a00056c6f672031",
      "defined_out": [
        "0x0000000000000001000a00056c6f672031",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "3907": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "3909": {
      "op": "bytec 7 // 0x0000000000000001000a00056c6f672031",
      "stack_out": [
        "app#0",
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "3911": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0"
      ]
    },
    "3913": {
      "op": "intc_1 // appl",
      "defined_out": [
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "appl"
      ]
    },
    "3914": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0"
      ]
    },
    "3916": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "0"
      ]
    },
    "3917": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0"
      ]
    },
    "3919": {
      "op": "itxn_submit"
    },
    "3920": {
      "op": "itxn LastLog",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0"
      ]
    },
    "3922": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3923": {
      "op": "extract 4 0",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3926": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "3927": {
      "op": "len",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "len%0#0"
      ]
    },
    "3928": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1",
        "app#0",
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "len%0#0",
        "1"
      ]
    },
    "3930": {
      "op": "==",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "eq%0#0"
      ]
    },
    "3931": {
      "error": "invalid number of bytes for bool8",
      "op": "assert // invalid number of bytes for bool8",
      "stack_out": [
        "app#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3932": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "tmp%2#0",
        "awst_tmp%0#0"
      ]
    },
    "3933": {
      "op": "extract 0 4",
      "defined_out": [
        "app#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3936": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "app#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%2#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "3937": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "3938": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "tmp%2#0"
      ]
    },
    "3939": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "tmp%2#0",
        "0"
      ]
    },
    "3940": {
      "op": "getbit",
      "defined_out": [
        "app#0",
        "result#0"
      ],
      "stack_out": [
        "app#0",
        "result#0"
      ]
    },
    "3941": {
      "op": "assert",
      "stack_out": [
        "app#0"
      ]
    },
    "3942": {
      "op": "itxn_begin"
    },
    "3943": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3945": {
      "op": "bytec 33 // method \"logs_are_equal((uint64,string),(uint64,string))bool\"",
      "stack_out": [
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ]
    },
    "3947": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3949": {
      "op": "pushbytes 0x0000000000000002000a00056c6f672032",
      "defined_out": [
        "0x0000000000000002000a00056c6f672032"
      ],
      "stack_out": [
        "0x0000000000000002000a00056c6f672032"
      ]
    },
    "3968": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3970": {
      "op": "bytec 7 // 0x0000000000000001000a00056c6f672031",
      "stack_out": [
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "3972": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3974": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "3975": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3977": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3978": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3980": {
      "op": "itxn_submit"
    },
    "3981": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "3983": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3984": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "3987": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "3988": {
      "op": "len",
      "defined_out": [
        "awst_tmp%1#0",
        "len%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "len%1#0"
      ]
    },
    "3989": {
      "op": "pushint 1 // 1",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "len%1#0",
        "1"
      ]
    },
    "3991": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "eq%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "eq%1#0"
      ]
    },
    "3992": {
      "error": "invalid number of bytes for bool8",
      "op": "assert // invalid number of bytes for bool8",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "3993": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "awst_tmp%1#0"
      ]
    },
    "3994": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "3997": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "3998": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "3999": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "4000": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "4001": {
      "op": "getbit",
      "stack_out": [
        "result#0"
      ]
    },
    "4002": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "4003": {
      "op": "return",
      "stack_out": []
    },
    "4004": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct[routing]",
      "params": {},
      "block": "test_arc4_struct",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4007": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4008": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "4009": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "4010": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "4011": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4012": {
      "op": "btoi",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0"
      ]
    },
    "4013": {
      "op": "itxn_begin"
    },
    "4014": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "4016": {
      "op": "pushbytes 0xdc4f1992 // method \"echo_log_struct((uint64,string))(uint64,string)\"",
      "defined_out": [
        "Method(echo_log_struct((uint64,string))(uint64,string))"
      ],
      "stack_out": [
        "Method(echo_log_struct((uint64,string))(uint64,string))"
      ]
    },
    "4022": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4024": {
      "op": "bytec 7 // 0x0000000000000001000a00056c6f672031",
      "defined_out": [
        "0x0000000000000001000a00056c6f672031"
      ],
      "stack_out": [
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "4026": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4028": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "4029": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4031": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4032": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4034": {
      "op": "itxn_submit"
    },
    "4035": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "4037": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "4038": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "result#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result#0"
      ]
    },
    "4041": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "awst_tmp%0#0"
      ]
    },
    "4042": {
      "op": "extract 0 4",
      "defined_out": [
        "result#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%3#0"
      ]
    },
    "4045": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "result#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "4046": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%4#0"
      ]
    },
    "4047": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result#0"
      ]
    },
    "4048": {
      "op": "itxn LastLog",
      "defined_out": [
        "result#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "result#0",
        "txn.LastLog#0"
      ]
    },
    "4050": {
      "op": "swap",
      "stack_out": [
        "txn.LastLog#0",
        "result#0"
      ]
    },
    "4051": {
      "op": "bytec 7 // 0x0000000000000001000a00056c6f672031",
      "stack_out": [
        "txn.LastLog#0",
        "result#0",
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "4053": {
      "op": "==",
      "defined_out": [
        "tmp%5#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%5#0"
      ]
    },
    "4054": {
      "error": "expected output to match input",
      "op": "assert // expected output to match input",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "4055": {
      "op": "dup",
      "defined_out": [
        "txn.LastLog#0",
        "txn.LastLog#0 (copy)"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "txn.LastLog#0 (copy)"
      ]
    },
    "4056": {
      "op": "extract 4 0",
      "defined_out": [
        "tmp%6#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%6#0"
      ]
    },
    "4059": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "txn.LastLog#0"
      ]
    },
    "4060": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "4063": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "0x151f7c75"
      ]
    },
    "4064": {
      "op": "==",
      "defined_out": [
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "4065": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "4066": {
      "op": "bytec 7 // 0x0000000000000001000a00056c6f672031",
      "stack_out": [
        "tmp%6#0",
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "4068": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "4069": {
      "error": "expected output to match input",
      "op": "return // on error: expected output to match input",
      "defined_out": [],
      "stack_out": []
    },
    "4070": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding[routing]",
      "params": {},
      "block": "test_resource_encoding",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4073": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4074": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "4075": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "4076": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "4077": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4078": {
      "op": "btoi",
      "defined_out": [
        "app_to_call#0"
      ],
      "stack_out": [
        "app_to_call#0"
      ]
    },
    "4079": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "app_to_call#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0"
      ]
    },
    "4082": {
      "op": "dup",
      "defined_out": [
        "app_to_call#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "4083": {
      "op": "len",
      "defined_out": [
        "app_to_call#0",
        "len%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "len%1#0"
      ]
    },
    "4084": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "len%1#0",
        "8"
      ]
    },
    "4085": {
      "op": "==",
      "defined_out": [
        "app_to_call#0",
        "eq%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "4086": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0"
      ]
    },
    "4087": {
      "op": "dup",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "4088": {
      "op": "btoi",
      "defined_out": [
        "app_to_call#0",
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0"
      ]
    },
    "4089": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0"
      ]
    },
    "4091": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "4093": {
      "op": "itxn_begin"
    },
    "4094": {
      "op": "dig 4",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_to_call#0",
        "app_to_call#0 (copy)",
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "app_to_call#0 (copy)"
      ]
    },
    "4096": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "4098": {
      "op": "dig 2",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "asset#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "asset#0 (copy)"
      ]
    },
    "4100": {
      "op": "itxn_field Assets",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "4102": {
      "op": "dig 1",
      "defined_out": [
        "acc#0",
        "app#0",
        "app#0 (copy)",
        "app_to_call#0",
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "app#0 (copy)"
      ]
    },
    "4104": {
      "op": "itxn_field Applications",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "4106": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "acc#0 (copy)",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "acc#0 (copy)"
      ]
    },
    "4107": {
      "op": "itxn_field Accounts",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "4109": {
      "op": "bytec 21 // method \"echo_resource_by_index(asset,application,account)(uint64,uint64,address)\"",
      "defined_out": [
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))"
      ]
    },
    "4111": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "4113": {
      "op": "bytec 22 // 0x00",
      "defined_out": [
        "0x00",
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "0x00"
      ]
    },
    "4115": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "4117": {
      "op": "bytec 8 // 0x01",
      "defined_out": [
        "0x01",
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "0x01"
      ]
    },
    "4119": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "4121": {
      "op": "bytec 8 // 0x01",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "0x01"
      ]
    },
    "4123": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "4125": {
      "op": "intc_1 // appl",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_to_call#0",
        "appl",
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "appl"
      ]
    },
    "4126": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "4128": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "0"
      ]
    },
    "4129": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "4131": {
      "op": "itxn_submit"
    },
    "4132": {
      "op": "itxn LastLog",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%0#0"
      ]
    },
    "4134": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "4135": {
      "op": "extract 4 0",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "tmp%2#1"
      ]
    },
    "4138": {
      "op": "len",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "len%0#0"
      ]
    },
    "4139": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "len%0#0",
        "48"
      ]
    },
    "4141": {
      "op": "==",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "eq%0#0"
      ]
    },
    "4142": {
      "error": "invalid number of bytes for (uint64,uint64,uint8[32])",
      "op": "assert // invalid number of bytes for (uint64,uint64,uint8[32])",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%0#0"
      ]
    },
    "4143": {
      "op": "dup",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "4144": {
      "op": "extract 0 4",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "tmp%3#1"
      ]
    },
    "4147": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "tmp%3#1",
        "0x151f7c75"
      ]
    },
    "4148": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "4149": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%0#0"
      ]
    },
    "4150": {
      "op": "dup",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "4151": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "4"
      ]
    },
    "4153": {
      "op": "extract_uint64",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%0#0",
        "result.0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "result.0#0"
      ]
    },
    "4154": {
      "op": "dig 1",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "result.0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "4156": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "result.0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "result.0#0",
        "awst_tmp%0#0 (copy)",
        "12"
      ]
    },
    "4158": {
      "op": "extract_uint64",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0"
      ]
    },
    "4159": {
      "op": "uncover 2",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%0#0"
      ]
    },
    "4161": {
      "op": "extract 20 32",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ]
    },
    "4164": {
      "op": "uncover 2",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "result.1#0",
        "result.2#0",
        "result.0#0"
      ]
    },
    "4166": {
      "op": "dig 5",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "result.1#0",
        "result.2#0",
        "result.0#0",
        "asset#0 (copy)"
      ]
    },
    "4168": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "result.1#0",
        "result.2#0",
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "result.1#0",
        "result.2#0",
        "tmp%8#0"
      ]
    },
    "4169": {
      "op": "uncover 2",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%8#0",
        "result.1#0"
      ]
    },
    "4171": {
      "op": "dig 4",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%8#0",
        "result.1#0",
        "app#0 (copy)"
      ]
    },
    "4173": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "result.2#0",
        "tmp%2#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "4174": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "result.2#0",
        "tmp%10#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%10#0"
      ]
    },
    "4175": {
      "op": "swap",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%10#0",
        "result.2#0"
      ]
    },
    "4176": {
      "op": "dig 2",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%10#0",
        "result.2#0",
        "acc#0 (copy)"
      ]
    },
    "4178": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "4179": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%12#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%12#0"
      ]
    },
    "4180": {
      "error": "expected echo to return same resources",
      "op": "assert // expected echo to return same resources",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "4181": {
      "op": "itxn_begin"
    },
    "4182": {
      "op": "dig 1",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "app#0 (copy)"
      ]
    },
    "4184": {
      "op": "itob",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4185": {
      "op": "dig 5",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app_to_call#0 (copy)"
      ]
    },
    "4187": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4189": {
      "op": "bytec 23 // method \"echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)\"",
      "defined_out": [
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))"
      ]
    },
    "4191": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4193": {
      "op": "dig 4",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%2#0 (copy)"
      ]
    },
    "4195": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4197": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "4198": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4200": {
      "op": "dig 1",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "acc#0 (copy)"
      ]
    },
    "4202": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4204": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "appl"
      ]
    },
    "4205": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4207": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "0"
      ]
    },
    "4208": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4210": {
      "op": "itxn_submit"
    },
    "4211": {
      "op": "itxn LastLog",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%1#0"
      ]
    },
    "4213": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "4214": {
      "op": "extract 4 0",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ]
    },
    "4217": {
      "op": "len",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%1#0",
        "len%1#0"
      ]
    },
    "4218": {
      "op": "pushint 48 // 48",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%1#0",
        "len%1#0",
        "48"
      ]
    },
    "4220": {
      "op": "==",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%1#0",
        "eq%1#0"
      ]
    },
    "4221": {
      "error": "invalid number of bytes for (uint64,uint64,uint8[32])",
      "op": "assert // invalid number of bytes for (uint64,uint64,uint8[32])",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%1#0"
      ]
    },
    "4222": {
      "op": "dup",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "4223": {
      "op": "extract 0 4",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%1#0",
        "tmp%17#0"
      ]
    },
    "4226": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "4227": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%1#0",
        "tmp%18#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%1#0",
        "tmp%18#0"
      ]
    },
    "4228": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%1#0"
      ]
    },
    "4229": {
      "op": "dup",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "4230": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "4"
      ]
    },
    "4232": {
      "op": "extract_uint64",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%1#0",
        "result.0#0"
      ]
    },
    "4233": {
      "op": "dig 1",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%1#0",
        "result.0#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "4235": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%1#0",
        "result.0#0",
        "awst_tmp%1#0 (copy)",
        "12"
      ]
    },
    "4237": {
      "op": "extract_uint64",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0"
      ]
    },
    "4238": {
      "op": "uncover 2",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%1#0"
      ]
    },
    "4240": {
      "op": "extract 20 32",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ]
    },
    "4243": {
      "op": "uncover 2",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.1#0",
        "result.2#0",
        "result.0#0"
      ]
    },
    "4245": {
      "op": "dig 6",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.1#0",
        "result.2#0",
        "result.0#0",
        "asset#0 (copy)"
      ]
    },
    "4247": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "result.1#0",
        "result.2#0",
        "tmp%2#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.1#0",
        "result.2#0",
        "tmp%22#0"
      ]
    },
    "4248": {
      "op": "uncover 2",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.2#0",
        "tmp%22#0",
        "result.1#0"
      ]
    },
    "4250": {
      "op": "dig 5",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.2#0",
        "tmp%22#0",
        "result.1#0",
        "app#0 (copy)"
      ]
    },
    "4252": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "result.2#0",
        "tmp%2#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.2#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "4253": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "result.2#0",
        "tmp%2#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.2#0",
        "tmp%24#0"
      ]
    },
    "4254": {
      "op": "swap",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%24#0",
        "result.2#0"
      ]
    },
    "4255": {
      "op": "dig 3",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%24#0",
        "result.2#0",
        "acc#0 (copy)"
      ]
    },
    "4257": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%2#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "4258": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%2#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%26#0"
      ]
    },
    "4259": {
      "error": "expected echo to return same resources",
      "op": "assert // expected echo to return same resources",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4260": {
      "op": "itxn_begin"
    },
    "4261": {
      "op": "dig 5",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app_to_call#0 (copy)"
      ]
    },
    "4263": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4265": {
      "op": "dig 3",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "asset#0 (copy)"
      ]
    },
    "4267": {
      "op": "itxn_field Assets",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4269": {
      "op": "dig 2",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0 (copy)"
      ]
    },
    "4271": {
      "op": "itxn_field Applications",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4273": {
      "op": "dig 1",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "acc#0 (copy)"
      ]
    },
    "4275": {
      "op": "itxn_field Accounts",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4277": {
      "op": "bytec 21 // method \"echo_resource_by_index(asset,application,account)(uint64,uint64,address)\"",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))"
      ]
    },
    "4279": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4281": {
      "op": "bytec 22 // 0x00",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "0x00"
      ]
    },
    "4283": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4285": {
      "op": "bytec 8 // 0x01",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "0x01"
      ]
    },
    "4287": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4289": {
      "op": "bytec 8 // 0x01",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "0x01"
      ]
    },
    "4291": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4293": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "appl"
      ]
    },
    "4294": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4296": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "0"
      ]
    },
    "4297": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4299": {
      "op": "itxn_submit"
    },
    "4300": {
      "op": "itxn LastLog",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%2#0"
      ]
    },
    "4302": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "4303": {
      "op": "extract 4 0",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%2#0",
        "tmp%2#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%2#0",
        "tmp%27#0"
      ]
    },
    "4306": {
      "op": "len",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%2#0",
        "len%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%2#0",
        "len%2#0"
      ]
    },
    "4307": {
      "op": "pushint 48 // 48",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%2#0",
        "len%2#0",
        "48"
      ]
    },
    "4309": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%2#0",
        "eq%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%2#0",
        "eq%2#0"
      ]
    },
    "4310": {
      "error": "invalid number of bytes for (uint64,uint64,uint8[32])",
      "op": "assert // invalid number of bytes for (uint64,uint64,uint8[32])",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%2#0"
      ]
    },
    "4311": {
      "op": "dup",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "4312": {
      "op": "extract 0 4",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%2#0",
        "tmp%2#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%2#0",
        "tmp%28#0"
      ]
    },
    "4315": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%2#0",
        "tmp%28#0",
        "0x151f7c75"
      ]
    },
    "4316": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%2#0",
        "tmp%2#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%2#0",
        "tmp%29#0"
      ]
    },
    "4317": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%2#0"
      ]
    },
    "4318": {
      "op": "dup",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "4319": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "4"
      ]
    },
    "4321": {
      "op": "extract_uint64",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%2#0",
        "result.0#0"
      ]
    },
    "4322": {
      "op": "dig 1",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%2#0",
        "result.0#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "4324": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%2#0",
        "result.0#0",
        "awst_tmp%2#0 (copy)",
        "12"
      ]
    },
    "4326": {
      "op": "extract_uint64",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0"
      ]
    },
    "4327": {
      "op": "uncover 2",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%2#0"
      ]
    },
    "4329": {
      "op": "extract 20 32",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ]
    },
    "4332": {
      "op": "uncover 2",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.1#0",
        "result.2#0",
        "result.0#0"
      ]
    },
    "4334": {
      "op": "dig 6",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.1#0",
        "result.2#0",
        "result.0#0",
        "asset#0 (copy)"
      ]
    },
    "4336": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "result.1#0",
        "result.2#0",
        "tmp%2#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.1#0",
        "result.2#0",
        "tmp%33#0"
      ]
    },
    "4337": {
      "op": "uncover 2",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.2#0",
        "tmp%33#0",
        "result.1#0"
      ]
    },
    "4339": {
      "op": "dig 5",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.2#0",
        "tmp%33#0",
        "result.1#0",
        "app#0 (copy)"
      ]
    },
    "4341": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "result.2#0",
        "tmp%2#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.2#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "4342": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "result.2#0",
        "tmp%2#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.2#0",
        "tmp%35#0"
      ]
    },
    "4343": {
      "op": "swap",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%35#0",
        "result.2#0"
      ]
    },
    "4344": {
      "op": "dig 3",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%35#0",
        "result.2#0",
        "acc#0 (copy)"
      ]
    },
    "4346": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%2#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "4347": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%2#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%37#0"
      ]
    },
    "4348": {
      "error": "expected echo to return same resources",
      "op": "assert // expected echo to return same resources",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4349": {
      "op": "itxn_begin"
    },
    "4350": {
      "op": "dig 5",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app_to_call#0 (copy)"
      ]
    },
    "4352": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4354": {
      "op": "bytec 23 // method \"echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)\"",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))"
      ]
    },
    "4356": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4358": {
      "op": "dig 4",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%2#0 (copy)"
      ]
    },
    "4360": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4362": {
      "op": "dup",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "4363": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4365": {
      "op": "dig 1",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "acc#0 (copy)"
      ]
    },
    "4367": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4369": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "appl"
      ]
    },
    "4370": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4372": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "0"
      ]
    },
    "4373": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4375": {
      "op": "itxn_submit"
    },
    "4376": {
      "op": "itxn LastLog",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%3#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%3#0"
      ]
    },
    "4378": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "4379": {
      "op": "extract 4 0",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%3#0",
        "tmp%2#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%3#0",
        "tmp%41#0"
      ]
    },
    "4382": {
      "op": "len",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%3#0",
        "len%3#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%3#0",
        "len%3#0"
      ]
    },
    "4383": {
      "op": "pushint 48 // 48",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%3#0",
        "len%3#0",
        "48"
      ]
    },
    "4385": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%3#0",
        "eq%3#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%3#0",
        "eq%3#0"
      ]
    },
    "4386": {
      "error": "invalid number of bytes for (uint64,uint64,uint8[32])",
      "op": "assert // invalid number of bytes for (uint64,uint64,uint8[32])",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%3#0"
      ]
    },
    "4387": {
      "op": "dup",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "4388": {
      "op": "extract 0 4",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%3#0",
        "tmp%2#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%3#0",
        "tmp%42#0"
      ]
    },
    "4391": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%3#0",
        "tmp%42#0",
        "0x151f7c75"
      ]
    },
    "4392": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%3#0",
        "tmp%2#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%3#0",
        "tmp%43#0"
      ]
    },
    "4393": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%3#0"
      ]
    },
    "4394": {
      "op": "dup",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "4395": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)",
        "4"
      ]
    },
    "4397": {
      "op": "extract_uint64",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%3#0",
        "result.0#0"
      ]
    },
    "4398": {
      "op": "dig 1",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%3#0",
        "result.0#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "4400": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%3#0",
        "result.0#0",
        "awst_tmp%3#0 (copy)",
        "12"
      ]
    },
    "4402": {
      "op": "extract_uint64",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0"
      ]
    },
    "4403": {
      "op": "uncover 2",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%3#0"
      ]
    },
    "4405": {
      "op": "extract 20 32",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ]
    },
    "4408": {
      "op": "uncover 2",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.1#0",
        "result.2#0",
        "result.0#0"
      ]
    },
    "4410": {
      "op": "dig 6",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.1#0",
        "result.2#0",
        "result.0#0",
        "asset#0 (copy)"
      ]
    },
    "4412": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "result.1#0",
        "result.2#0",
        "tmp%2#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.1#0",
        "result.2#0",
        "tmp%47#0"
      ]
    },
    "4413": {
      "op": "uncover 2",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.2#0",
        "tmp%47#0",
        "result.1#0"
      ]
    },
    "4415": {
      "op": "dig 5",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.2#0",
        "tmp%47#0",
        "result.1#0",
        "app#0 (copy)"
      ]
    },
    "4417": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "result.2#0",
        "tmp%2#0",
        "tmp%47#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.2#0",
        "tmp%47#0",
        "tmp%48#0"
      ]
    },
    "4418": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "result.2#0",
        "tmp%2#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.2#0",
        "tmp%49#0"
      ]
    },
    "4419": {
      "op": "swap",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%49#0",
        "result.2#0"
      ]
    },
    "4420": {
      "op": "dig 3",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%49#0",
        "result.2#0",
        "acc#0 (copy)"
      ]
    },
    "4422": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%2#0",
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%49#0",
        "tmp%50#0"
      ]
    },
    "4423": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%2#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%51#0"
      ]
    },
    "4424": {
      "error": "expected echo to return same resources",
      "op": "assert // expected echo to return same resources",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4425": {
      "op": "itxn_begin"
    },
    "4426": {
      "op": "dig 5",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app_to_call#0 (copy)"
      ]
    },
    "4428": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4430": {
      "op": "dig 3",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "asset#0 (copy)"
      ]
    },
    "4432": {
      "op": "itxn_field Assets",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4434": {
      "op": "dig 2",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0 (copy)"
      ]
    },
    "4436": {
      "op": "itxn_field Applications",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4438": {
      "op": "dig 1",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "acc#0 (copy)"
      ]
    },
    "4440": {
      "op": "itxn_field Accounts",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4442": {
      "op": "bytec 21 // method \"echo_resource_by_index(asset,application,account)(uint64,uint64,address)\"",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))"
      ]
    },
    "4444": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4446": {
      "op": "bytec 22 // 0x00",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "0x00"
      ]
    },
    "4448": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4450": {
      "op": "bytec 8 // 0x01",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "0x01"
      ]
    },
    "4452": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4454": {
      "op": "bytec 8 // 0x01",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "0x01"
      ]
    },
    "4456": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4458": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "appl"
      ]
    },
    "4459": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4461": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "0"
      ]
    },
    "4462": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4464": {
      "op": "itxn_submit"
    },
    "4465": {
      "op": "itxn LastLog",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%4#0"
      ]
    },
    "4467": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ]
    },
    "4468": {
      "op": "extract 4 0",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%4#0",
        "tmp%2#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%4#0",
        "tmp%52#0"
      ]
    },
    "4471": {
      "op": "len",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%4#0",
        "len%4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%4#0",
        "len%4#0"
      ]
    },
    "4472": {
      "op": "pushint 48 // 48",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%4#0",
        "len%4#0",
        "48"
      ]
    },
    "4474": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%4#0",
        "eq%4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%4#0",
        "eq%4#0"
      ]
    },
    "4475": {
      "error": "invalid number of bytes for (uint64,uint64,uint8[32])",
      "op": "assert // invalid number of bytes for (uint64,uint64,uint8[32])",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%4#0"
      ]
    },
    "4476": {
      "op": "dup",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ]
    },
    "4477": {
      "op": "extract 0 4",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%4#0",
        "tmp%2#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%4#0",
        "tmp%53#0"
      ]
    },
    "4480": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%4#0",
        "tmp%53#0",
        "0x151f7c75"
      ]
    },
    "4481": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "awst_tmp%4#0",
        "tmp%2#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%4#0",
        "tmp%54#0"
      ]
    },
    "4482": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%4#0"
      ]
    },
    "4483": {
      "op": "dup",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ]
    },
    "4484": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)",
        "4"
      ]
    },
    "4486": {
      "op": "extract_uint64",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%4#0",
        "result.0#0"
      ]
    },
    "4487": {
      "op": "dig 1",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%4#0",
        "result.0#0",
        "awst_tmp%4#0 (copy)"
      ]
    },
    "4489": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%4#0",
        "result.0#0",
        "awst_tmp%4#0 (copy)",
        "12"
      ]
    },
    "4491": {
      "op": "extract_uint64",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "awst_tmp%4#0",
        "result.0#0",
        "result.1#0"
      ]
    },
    "4492": {
      "op": "uncover 2",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%4#0"
      ]
    },
    "4494": {
      "op": "extract 20 32",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ]
    },
    "4497": {
      "op": "uncover 2",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.1#0",
        "result.2#0",
        "result.0#0"
      ]
    },
    "4499": {
      "op": "dig 6",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.1#0",
        "result.2#0",
        "result.0#0",
        "asset#0 (copy)"
      ]
    },
    "4501": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "result.1#0",
        "result.2#0",
        "tmp%2#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.1#0",
        "result.2#0",
        "tmp%58#0"
      ]
    },
    "4502": {
      "op": "uncover 2",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.2#0",
        "tmp%58#0",
        "result.1#0"
      ]
    },
    "4504": {
      "op": "dig 5",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.2#0",
        "tmp%58#0",
        "result.1#0",
        "app#0 (copy)"
      ]
    },
    "4506": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "result.2#0",
        "tmp%2#0",
        "tmp%58#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.2#0",
        "tmp%58#0",
        "tmp%59#0"
      ]
    },
    "4507": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "result.2#0",
        "tmp%2#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "result.2#0",
        "tmp%60#0"
      ]
    },
    "4508": {
      "op": "swap",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%60#0",
        "result.2#0"
      ]
    },
    "4509": {
      "op": "dig 3",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%60#0",
        "result.2#0",
        "acc#0 (copy)"
      ]
    },
    "4511": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%2#0",
        "tmp%60#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%60#0",
        "tmp%61#0"
      ]
    },
    "4512": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0",
        "app_to_call#0",
        "asset#0",
        "tmp%2#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%62#0"
      ]
    },
    "4513": {
      "error": "expected echo to return same resources",
      "op": "assert // expected echo to return same resources",
      "stack_out": [
        "app_to_call#0",
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4514": {
      "op": "itxn_begin"
    },
    "4515": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app_to_call#0"
      ]
    },
    "4517": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4519": {
      "op": "bytec 23 // method \"echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)\"",
      "stack_out": [
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))"
      ]
    },
    "4521": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%2#0",
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4523": {
      "op": "uncover 4",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%2#0"
      ]
    },
    "4525": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4527": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "4529": {
      "op": "dup",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "acc#0 (copy)"
      ]
    },
    "4530": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "4532": {
      "op": "intc_1 // appl",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "appl"
      ]
    },
    "4533": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "4535": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "0"
      ]
    },
    "4536": {
      "op": "itxn_field Fee",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "4538": {
      "op": "itxn_submit"
    },
    "4539": {
      "op": "itxn LastLog",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "awst_tmp%5#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%5#0"
      ]
    },
    "4541": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "awst_tmp%5#0",
        "awst_tmp%5#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "awst_tmp%5#0 (copy)"
      ]
    },
    "4542": {
      "op": "extract 4 0",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "awst_tmp%5#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "tmp%66#0"
      ]
    },
    "4545": {
      "op": "len",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "awst_tmp%5#0",
        "len%5#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "len%5#0"
      ]
    },
    "4546": {
      "op": "pushint 48 // 48",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "len%5#0",
        "48"
      ]
    },
    "4548": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "awst_tmp%5#0",
        "eq%5#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "eq%5#0"
      ]
    },
    "4549": {
      "error": "invalid number of bytes for (uint64,uint64,uint8[32])",
      "op": "assert // invalid number of bytes for (uint64,uint64,uint8[32])",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%5#0"
      ]
    },
    "4550": {
      "op": "dup",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "awst_tmp%5#0 (copy)"
      ]
    },
    "4551": {
      "op": "extract 0 4",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "awst_tmp%5#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "tmp%67#0"
      ]
    },
    "4554": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "tmp%67#0",
        "0x151f7c75"
      ]
    },
    "4555": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "awst_tmp%5#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "tmp%68#0"
      ]
    },
    "4556": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%5#0"
      ]
    },
    "4557": {
      "op": "dup",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "awst_tmp%5#0 (copy)"
      ]
    },
    "4558": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "awst_tmp%5#0 (copy)",
        "4"
      ]
    },
    "4560": {
      "op": "extract_uint64",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "result.0#0"
      ]
    },
    "4561": {
      "op": "dig 1",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "result.0#0",
        "awst_tmp%5#0 (copy)"
      ]
    },
    "4563": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "result.0#0",
        "awst_tmp%5#0 (copy)",
        "12"
      ]
    },
    "4565": {
      "op": "extract_uint64",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "result.0#0",
        "result.1#0"
      ]
    },
    "4566": {
      "op": "uncover 2",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%5#0"
      ]
    },
    "4568": {
      "op": "extract 20 32",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ]
    },
    "4571": {
      "op": "uncover 2",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "result.1#0",
        "result.2#0",
        "result.0#0"
      ]
    },
    "4573": {
      "op": "uncover 5",
      "stack_out": [
        "app#0",
        "acc#0",
        "result.1#0",
        "result.2#0",
        "result.0#0",
        "asset#0"
      ]
    },
    "4575": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "result.1#0",
        "result.2#0",
        "tmp%72#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.1#0",
        "result.2#0",
        "tmp%72#0"
      ]
    },
    "4576": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%72#0",
        "result.1#0"
      ]
    },
    "4578": {
      "op": "uncover 4",
      "stack_out": [
        "acc#0",
        "result.2#0",
        "tmp%72#0",
        "result.1#0",
        "app#0"
      ]
    },
    "4580": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "result.2#0",
        "tmp%72#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "acc#0",
        "result.2#0",
        "tmp%72#0",
        "tmp%73#0"
      ]
    },
    "4581": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "result.2#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "acc#0",
        "result.2#0",
        "tmp%74#0"
      ]
    },
    "4582": {
      "op": "swap",
      "stack_out": [
        "acc#0",
        "tmp%74#0",
        "result.2#0"
      ]
    },
    "4583": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%74#0",
        "result.2#0",
        "acc#0"
      ]
    },
    "4585": {
      "op": "==",
      "defined_out": [
        "tmp%74#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%74#0",
        "tmp%75#0"
      ]
    },
    "4586": {
      "op": "&&",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "4587": {
      "error": "expected echo to return same resources",
      "op": "return // on error: expected echo to return same resources",
      "defined_out": [],
      "stack_out": []
    }
  }
}