{
  "version": 3,
  "sources": [
    "../typed_c2c.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAmUK;;AAAA;AAAA;AAAA;;AAAA;AAnUL;;;AAAA;AAAA;;AAmUK;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAzTL;;;AAAA;AAAA;;AAyTK;;;AAAA;;AA9CA;;AAAA;AAAA;AAAA;;AAAA;AA3QL;;;AAAA;AAAA;;AA2QK;;;AAAA;;AAlDA;;AAAA;AAAA;AAAA;;AAAA;AAzNL;;;AAAA;AAAA;;AAyNK;;;AAAA;;AA3DA;;AAAA;AAAA;AAAA;;AAAA;AA9JL;;;AAAA;AAAA;;AA8JK;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAnJL;;;AAAA;AAAA;;AAmJK;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAxIL;;;AAAA;AAAA;;AAwIK;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AA3HL;;;AAAA;AAAA;;AA2HK;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAhHL;;;AAAA;AAAA;;AAgHK;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAlGL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAkGK;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AApFL;;;AAAA;AAAA;;AAoFK;;;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AAxDL;;;AAAA;AAAA;;AAwDK;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAvCL;;;AAAA;AAAA;;AAuCK;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAxBL;;;AAAA;AAAA;;AAwBK;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAVL;;;AAAA;AAAA;;AAUK;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AACK;;;AAAA;;AADL;;AAAA;;;;;;;;;AACA;;;AAEQ;AAEI;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AACA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;;;AAHJ;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;AAOR;;;AAGuB;;;;;AAAA;;;AAA2B;;;;;;;;;;;AAA3B;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;;;;;AAAA;;;AAAiC;;;;;;;;;;;AAAjC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;;;;;AAAA;;;AAAmC;;;;;;;;;;;AAAnC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;;;;;AAAA;;;AAA2C;;;;;;;;;;;AAA3C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;;;;;AAAA;;;AAAiD;;;;;;;;;;;AAAjD;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;;AAER;;;AAEQ;;;;;AAAA;;;AAAiD;;;;;;;;;;;;;;;;;;;;AAAjD;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;;;;;;;;;;;;;;;;;;;;;;;AAA5C;AAAP;AAEA;;;;;AAAA;;;AAAoC;;;;;;;;;;;;;;;;;;;;;;AAApC;;;AAAA;;;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;;;;;;;;;;;;;;;;;;;;;;;;;AAA5C;AAAP;AAES;;;;;AAAA;;;AAAiD;;;;;;;;;;;AAAjD;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AACF;AAAa;;AAAb;AAAP;AACO;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;AAA5C;AAAP;AAEa;;;;;AAAA;;;AAAoC;;;;;;;;;;;;;AAApC;;;AAAA;;;AAAA;;;AACN;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA6C;;;;;;;;;;;;;;;;;AAA7C;AAAP;;AAER;;;AAEc;;;;;AAAA;;;;AAAiC;;;;;;;;;;;;;;;;AAAjC;;;AAAA;;;AAAA;;;AACiB;;;;;;;;;;;;AAAhB;AAAP;AAEM;;;;;AAAA;;;;;;;;AAAiC;;;;AAAjC;;;AAAA;;;AAAA;;;AACyB;AAAR;AAAhB;AAAP;AAEM;;;;;AAAA;;;;;;;;AAAkC;;;;AAAlC;;;AAAA;;;AAAA;;;AACkB;;AAAjB;AAAP;AAEM;;;;;AAAA;;;;;;;;AAAgC;;;;;;;AAAhC;;;AAAA;;;AAAA;;;AACiB;;;AAAhB;AAAP;AAEM;;;;;AAAA;;;;;;;;AAA+B;;;;;AAA/B;;;AAAA;;;AAAA;;;AACiB;;;;;;AAAhB;AAAP;;AAER;;;AAEsB;;;;;AAAA;;;;;;;;AAEV;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;AAhBU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAwBP;;;AAAiB;;AAAjB;AAAP;;AAER;;;AAEc;;;;;AAAA;;;;AAAgD;;;;;;;;;;;;AAAhD;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;AAEM;;;;;AAAA;;;;AAA4C;;;;;;;;;;;;AAA5C;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;AAEM;;;;;AAAA;;;;AAA+B;;;;;;;;;;;;AAA/B;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;AAEM;;;;;AAAA;;;;AAAiC;;;;;;;;;;;;AAAjC;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;;AAER;;;AAEc;AAGF;;;;;;;;;;;;;;;;AAHE;;;;;;;;AAEF;;;;;AACA;;;;;AACA;;;;;AAJE;;;AAAA;;;AAAA;;;AASC;;AAAA;;AAAA;AAAa;;AAAb;AAAwD;;AAAA;;AAAA;AAAxD;AADH;AADJ;;AAKR;;;AAEwB;;;;;AAAA;;;;AAAyC;;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;AAAW;;;;;;;;;AAAX;AAAP;AAEgB;;;;;AAAA;;;;AAAyC;;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;;AAAA;AAAP;AAEgB;;;;;AAAA;;;;AAAyC;;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;AAAP;;AAER;;;AAEwB;;;;;AAAA;;;;AAAwC;;;;AAAxC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;AAAW;;;;;;;;;AAAX;AAAP;AAEgB;;;;;AAAA;;;;AAAwC;;;;AAAxC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;;AAAA;AAAP;AAEgB;;;;;AAAA;;;;AACc;;;;AADd;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAGT;AAAP;;AAER;;;AAEwB;;;;;AAAA;;;;AAAyC;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACT;AAAW;AAAX;AAAP;AAEgB;AAAyC;AAAA;;;;;AAAzC;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;AAEgB;;;;;AAAA;;;;AAAyC;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACT;AAAP;;AAER;;;AAEwB;;;;;AAAA;;;;AAA0C;;;AAA1C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACT;AAAW;;AAAX;AAAP;AAEgB;;;;;AAAA;;;;AAA0C;;;AAA1C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;AAEgB;;;;;AAAA;;;;AAA0C;;;AAA1C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACT;AAAP;;AAER;;;AAGuB;;;;;AAAA;;;;AAIX;;;;AACA;;;;AACA;;;AACA;;;AAPW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAUD;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;AACP;;AAAA;;;AAAA;AAAY;;AAAZ;AAAP;AACO;;AAAA;;;AAAA;AAAY;;AAAZ;AAAP;AACO;;;;AAAA;AAAA;AAAY;AAAZ;AAAP;AACO;;AAAa;;AAAb;AAAP;AAGe;AAMX;AAAA;;;;;AANW;;;;AAIX;;;;AACA;;;;;;AAEA;;;AAPW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAUR;;AAAA;AAAP;AAGe;;;;;AAAA;;;;AAIX;;;;AACA;;;;AACA;;;AACA;;;AAPW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAUR;;AAAA;AAAP;AAGqB;;;;;AAAA;;;;AAEjB;;;;AACA;;;;AACA;;;AACA;;;AALiB;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;;AAAA;;;AAQd;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAP;AACO;;AAAA;AAAP;AACO;AAAP;;AAER;;;AAGsB;;;;;AAAA;;;;AAEV;;;;AACA;;;;AACA;;;AACA;;;AALU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;;AAAA;;;AASP;;AAAK;;AAAL;AAAP;AACO;;AAAK;;AAAL;AAAP;AACO;;AAAK;AAAL;AAAP;AACO;AAAM;;AAAN;AAAP;AAGgB;AAIZ;AAAA;;;;;AAJY;;;;AAEZ;;;;AACA;;;;;;AAEA;;;AALY;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;;AAAA;;;AAQT;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAGgB;;;;;AAAA;;;;AAEZ;;;;AACA;;;;AACA;;;AACA;;;AALY;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;;AAAA;;;AAQT;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAGqB;;;;;AAAA;;;;AAEjB;;;;AACA;;;;AACA;;;AACA;;;AALiB;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;;AAAA;;;AAQd;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;;AAER;;;AAGsB;;;;;AAAA;;;;AAEV;;;;AAFU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAMP;;AAAM;;AAAN;AAAP;AACO;;AAAM;;AAAN;AAAP;AACO;;AAAS;AAAT;AAAP;AACO;AAAS;;AAAT;AAAP;AACgB;;AAAT;AAAP;AAGc;;;;;AAAA;;;;AAEV;;;;AAFU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAMP;;AAAM;;AAAN;AAAP;AACO;;AAAM;;AAAN;AAAP;AACO;;AAAS;AAAT;AAAP;AACO;AAAS;;AAAT;AAAP;AACgB;;AAAT;AAAP;AAGc;;;;;AAAA;;;;AAEV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAWP;;AAAM;;;;;;;;;;;AAAN;AAAP;AACO;;AAAM;;;;;;;;;;;;;AAAN;AAAP;AACO;;AAAS;;AAAT;AAAP;AACO;AAAS;;;;;;;;;;AAAT;AAAP;AACgB;;;;;;;;;;AAAT;AAAP;;AAER;;;AAEuB;;;;;AAAA;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACE;;AAAV;AAAP;AACoB;;;;;AAAA;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;AAAf;AAAP;AAEA;;;;;AAAA;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;AAA5C;AAAP;;AAER;;;AAEuB;;;;;AAAA;;;;AAEX;;;;AACA;;;;AAHW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAMf;AACe;;;;;AAAA;;;;AAEX;;;;;;;;;;;;;;;;;;;;;AACA;;;;AAHW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAMR;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 6 1 2"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x9bf81913 0x0000000000000001 0x16e03919 0x00027331 0x00026231 0xb4b4334e \"echo: s1\" 0x0000000000000003 0x4a444c77 0x000173 0x2659e818 0x000162 0xa9fb6cf1 0xd8cc363b 0x03 0xab271ce4 0xb862ee19 0x0000000000000001000a00056c6f672031 0x000b6563686f3a207475706c65 0x0000000000000002 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003 0x0f101112deadbeef14 0x6563686f3a206231 0x00040010000400080002733100027332000000000000000100000000000000020012000133 0x00086563686f3a207332 0x6563686f3a2033 0x000000000000002a 0xddd07185"
    },
    "367": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "369": {
      "op": "bz main_bare_routing@21",
      "stack_out": []
    },
    "372": {
      "op": "pushbytess 0x07916bea 0x1859b0ba 0x4eb11b0d 0x0d176a4a 0xb54730c8 0x7859eaf7 0x24478a3c 0x7a60c035 0x6a559cb3 0x1be60712 0x19cb78a4 0xf0ef6873 0x3d2bfe37 0x54e98f56 0xf55b7567 0x8598bb43 // method \"test_is_a_b(byte[],byte[],application)void\", method \"test_method_selector_kinds(application)void\", method \"test_method_overload(application)void\", method \"test_arg_conversion(application)void\", method \"test_15plus_args(application)void\", method \"test_void(application)void\", method \"test_ref_types(application,asset)void\", method \"test_native_string(application)void\", method \"test_native_bytes(application)void\", method \"test_native_uint64(application)void\", method \"test_native_biguint(application)void\", method \"test_native_tuple(application)void\", method \"test_native_tuple_method_ref(application)void\", method \"test_nested_tuples(application)void\", method \"test_no_args(application)void\", method \"test_named_tuples(application)void\""
    },
    "454": {
      "op": "txna ApplicationArgs 0"
    },
    "457": {
      "op": "match main_test_is_a_b_route@3 main_test_method_selector_kinds_route@4 main_test_method_overload_route@5 main_test_arg_conversion_route@6 main_test_15plus_args_route@7 main_test_void_route@8 main_test_ref_types_route@9 main_test_native_string_route@10 main_test_native_bytes_route@11 main_test_native_uint64_route@12 main_test_native_biguint_route@13 main_test_native_tuple_route@14 main_test_native_tuple_method_ref_route@15 main_test_nested_tuples_route@16 main_test_no_args_route@17 main_test_named_tuples_route@18"
    },
    "491": {
      "block": "main_after_if_else@25",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "492": {
      "op": "return"
    },
    "493": {
      "block": "main_test_named_tuples_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "495": {
      "op": "!",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "496": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "497": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "499": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "500": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%16#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%16#0"
      ]
    },
    "503": {
      "op": "btoi",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "504": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "506": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples",
      "op": "callsub test_named_tuples",
      "stack_out": []
    },
    "509": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "510": {
      "op": "return"
    },
    "511": {
      "block": "main_test_no_args_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "513": {
      "op": "!",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "514": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "515": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "517": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "518": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%15#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%15#0"
      ]
    },
    "521": {
      "op": "btoi",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "522": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "524": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args",
      "op": "callsub test_no_args",
      "stack_out": []
    },
    "527": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "528": {
      "op": "return"
    },
    "529": {
      "block": "main_test_nested_tuples_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "531": {
      "op": "!",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "532": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "533": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "535": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "536": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%14#0"
      ]
    },
    "539": {
      "op": "btoi",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "540": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "542": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples",
      "op": "callsub test_nested_tuples",
      "stack_out": []
    },
    "545": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "546": {
      "op": "return"
    },
    "547": {
      "block": "main_test_native_tuple_method_ref_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "549": {
      "op": "!",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "550": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "551": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "553": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "554": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%13#0"
      ]
    },
    "557": {
      "op": "btoi",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "558": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "560": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref",
      "op": "callsub test_native_tuple_method_ref",
      "stack_out": []
    },
    "563": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "564": {
      "op": "return"
    },
    "565": {
      "block": "main_test_native_tuple_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "567": {
      "op": "!",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "568": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "569": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "571": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "572": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%12#0"
      ]
    },
    "575": {
      "op": "btoi",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "576": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "578": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple",
      "op": "callsub test_native_tuple",
      "stack_out": []
    },
    "581": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "582": {
      "op": "return"
    },
    "583": {
      "block": "main_test_native_biguint_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "585": {
      "op": "!",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "586": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "587": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "589": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "590": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%11#0"
      ]
    },
    "593": {
      "op": "btoi",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "594": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "596": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint",
      "op": "callsub test_native_biguint",
      "stack_out": []
    },
    "599": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "600": {
      "op": "return"
    },
    "601": {
      "block": "main_test_native_uint64_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "603": {
      "op": "!",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "604": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "605": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "607": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "608": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%10#0"
      ]
    },
    "611": {
      "op": "btoi",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "612": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "614": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64",
      "op": "callsub test_native_uint64",
      "stack_out": []
    },
    "617": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "618": {
      "op": "return"
    },
    "619": {
      "block": "main_test_native_bytes_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "621": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "622": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "623": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "625": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "626": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%9#0"
      ]
    },
    "629": {
      "op": "btoi",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "630": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "632": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes",
      "op": "callsub test_native_bytes",
      "stack_out": []
    },
    "635": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "636": {
      "op": "return"
    },
    "637": {
      "block": "main_test_native_string_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "639": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "640": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "641": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "643": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "644": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%8#0"
      ]
    },
    "647": {
      "op": "btoi",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "648": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "650": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string",
      "op": "callsub test_native_string",
      "stack_out": []
    },
    "653": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "654": {
      "op": "return"
    },
    "655": {
      "block": "main_test_ref_types_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "657": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "658": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "659": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "661": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "662": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "665": {
      "op": "btoi",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "666": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "668": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%7#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "reinterpret_bytes[1]%7#0"
      ]
    },
    "671": {
      "op": "btoi",
      "defined_out": [
        "tmp%48#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "tmp%49#0"
      ]
    },
    "672": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%48#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "tmp%50#0"
      ]
    },
    "674": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types",
      "op": "callsub test_ref_types",
      "stack_out": []
    },
    "677": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "678": {
      "op": "return"
    },
    "679": {
      "block": "main_test_void_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "681": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "682": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "683": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "685": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "686": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "689": {
      "op": "btoi",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "690": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "692": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void",
      "op": "callsub test_void",
      "stack_out": []
    },
    "695": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "696": {
      "op": "return"
    },
    "697": {
      "block": "main_test_15plus_args_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "699": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "700": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "701": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "703": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "704": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "707": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "708": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "710": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args",
      "op": "callsub test_15plus_args",
      "stack_out": []
    },
    "713": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "714": {
      "op": "return"
    },
    "715": {
      "block": "main_test_arg_conversion_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "717": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "718": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "719": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "721": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "722": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "725": {
      "op": "btoi",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "726": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "728": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion",
      "op": "callsub test_arg_conversion",
      "stack_out": []
    },
    "731": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "732": {
      "op": "return"
    },
    "733": {
      "block": "main_test_method_overload_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "735": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "736": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "737": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "739": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "740": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "743": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "744": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "746": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload",
      "op": "callsub test_method_overload",
      "stack_out": []
    },
    "749": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "750": {
      "op": "return"
    },
    "751": {
      "block": "main_test_method_selector_kinds_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "753": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "754": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "755": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "757": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "758": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "761": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "762": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "764": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds",
      "op": "callsub test_method_selector_kinds",
      "stack_out": []
    },
    "767": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "768": {
      "op": "return"
    },
    "769": {
      "block": "main_test_is_a_b_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "771": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "772": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "773": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "775": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "776": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "779": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "782": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "785": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "788": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "791": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "792": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "794": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b",
      "op": "callsub test_is_a_b",
      "stack_out": []
    },
    "797": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "798": {
      "op": "return"
    },
    "799": {
      "block": "main_bare_routing@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "801": {
      "op": "bnz main_after_if_else@25",
      "stack_out": []
    },
    "804": {
      "op": "txn ApplicationID"
    },
    "806": {
      "op": "!"
    },
    "807": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "808": {
      "op": "intc_2 // 1"
    },
    "809": {
      "op": "return"
    },
    "810": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_is_a_b",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "813": {
      "op": "itxn_begin"
    },
    "814": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "816": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "817": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "818": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "821": {
      "op": "frame_dig -3",
      "stack_out": [
        "length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "823": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "824": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "b#0 (copy)"
      ]
    },
    "826": {
      "op": "len",
      "defined_out": [
        "encoded_value%0#0",
        "length%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "827": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "828": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%0#0",
        "length_uint16%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "831": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_value%0#0",
        "length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "833": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "834": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "app#0 (copy)"
      ]
    },
    "836": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "838": {
      "op": "pushbytes 0xc77212bc // method \"is_a_b(byte[],byte[])void\"",
      "defined_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "Method(is_a_b(byte[],byte[])void)"
      ]
    },
    "844": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "846": {
      "op": "swap",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0"
      ]
    },
    "847": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "849": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "851": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "852": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "854": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "855": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "857": {
      "op": "itxn_submit"
    },
    "858": {
      "retsub": true,
      "op": "retsub"
    },
    "859": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_method_selector_kinds",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "862": {
      "op": "itxn_begin"
    },
    "863": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "865": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "867": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "868": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "870": {
      "op": "pushbytes 0x00057465737431",
      "defined_out": [
        "0x00057465737431"
      ],
      "stack_out": [
        "0x00057465737431"
      ]
    },
    "879": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "881": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "882": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "884": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "885": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "887": {
      "op": "itxn_submit"
    },
    "888": {
      "op": "itxn LastLog"
    },
    "890": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "891": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "result#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result#0"
      ]
    },
    "894": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "awst_tmp%0#0"
      ]
    },
    "895": {
      "op": "extract 0 4",
      "defined_out": [
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%2#0"
      ]
    },
    "898": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "899": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%3#0"
      ]
    },
    "900": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result#0"
      ]
    },
    "901": {
      "op": "pushbytes 0x000b6563686f3a207465737431",
      "defined_out": [
        "0x000b6563686f3a207465737431",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737431"
      ]
    },
    "916": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "917": {
      "op": "assert",
      "stack_out": []
    },
    "918": {
      "op": "itxn_begin"
    },
    "919": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "921": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "923": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "924": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "926": {
      "op": "pushbytes 0x00057465737432",
      "defined_out": [
        "0x00057465737432"
      ],
      "stack_out": [
        "0x00057465737432"
      ]
    },
    "935": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "937": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "938": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "940": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "941": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "943": {
      "op": "itxn_submit"
    },
    "944": {
      "op": "itxn LastLog"
    },
    "946": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "947": {
      "op": "extract 4 0",
      "stack_out": [
        "awst_tmp%1#0",
        "result#0"
      ]
    },
    "950": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "awst_tmp%1#0"
      ]
    },
    "951": {
      "op": "extract 0 4",
      "defined_out": [
        "result#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%6#0"
      ]
    },
    "954": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "955": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%7#0"
      ]
    },
    "956": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result#0"
      ]
    },
    "957": {
      "op": "pushbytes 0x000b6563686f3a207465737432",
      "defined_out": [
        "0x000b6563686f3a207465737432",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737432"
      ]
    },
    "972": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "973": {
      "op": "assert",
      "stack_out": []
    },
    "974": {
      "op": "itxn_begin"
    },
    "975": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "977": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "979": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "980": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "982": {
      "op": "pushbytes 0x00057465737433",
      "defined_out": [
        "0x00057465737433"
      ],
      "stack_out": [
        "0x00057465737433"
      ]
    },
    "991": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "993": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "994": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "996": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "997": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "999": {
      "op": "itxn_submit"
    },
    "1000": {
      "op": "itxn LastLog"
    },
    "1002": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "1003": {
      "op": "extract 4 0",
      "stack_out": [
        "awst_tmp%2#0",
        "result#0"
      ]
    },
    "1006": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "awst_tmp%2#0"
      ]
    },
    "1007": {
      "op": "extract 0 4",
      "defined_out": [
        "result#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%10#0"
      ]
    },
    "1010": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result#0",
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "1011": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%11#0"
      ]
    },
    "1012": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result#0"
      ]
    },
    "1013": {
      "op": "pushbytes 0x000b6563686f3a207465737433",
      "defined_out": [
        "0x000b6563686f3a207465737433",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737433"
      ]
    },
    "1028": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1029": {
      "op": "assert",
      "stack_out": []
    },
    "1030": {
      "op": "itxn_begin"
    },
    "1031": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1033": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1035": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1036": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1038": {
      "op": "pushbytes 0x00057465737434",
      "defined_out": [
        "0x00057465737434"
      ],
      "stack_out": [
        "0x00057465737434"
      ]
    },
    "1047": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1049": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1050": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1052": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1053": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1055": {
      "op": "itxn_submit"
    },
    "1056": {
      "op": "itxn LastLog"
    },
    "1058": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "1059": {
      "op": "extract 4 0",
      "stack_out": [
        "awst_tmp%3#0",
        "result#0"
      ]
    },
    "1062": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "awst_tmp%3#0"
      ]
    },
    "1063": {
      "op": "extract 0 4",
      "defined_out": [
        "result#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%14#0"
      ]
    },
    "1066": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result#0",
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "1067": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%15#0"
      ]
    },
    "1068": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result#0"
      ]
    },
    "1069": {
      "op": "pushbytes 0x000b6563686f3a207465737434",
      "defined_out": [
        "0x000b6563686f3a207465737434",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737434"
      ]
    },
    "1084": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1085": {
      "op": "assert",
      "stack_out": []
    },
    "1086": {
      "op": "itxn_begin"
    },
    "1087": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1089": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1091": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1092": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1094": {
      "op": "pushbytes 0x00057465737435",
      "defined_out": [
        "0x00057465737435"
      ],
      "stack_out": [
        "0x00057465737435"
      ]
    },
    "1103": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1105": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1106": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1108": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1109": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1111": {
      "op": "itxn_submit"
    },
    "1112": {
      "op": "itxn LastLog"
    },
    "1114": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ]
    },
    "1115": {
      "op": "extract 4 0",
      "stack_out": [
        "awst_tmp%4#0",
        "result#0"
      ]
    },
    "1118": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "awst_tmp%4#0"
      ]
    },
    "1119": {
      "op": "extract 0 4",
      "defined_out": [
        "result#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%18#0"
      ]
    },
    "1122": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result#0",
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "1123": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%19#0"
      ]
    },
    "1124": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result#0"
      ]
    },
    "1125": {
      "op": "pushbytes 0x000b6563686f3a207465737435",
      "defined_out": [
        "0x000b6563686f3a207465737435",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737435"
      ]
    },
    "1140": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1141": {
      "op": "assert",
      "stack_out": []
    },
    "1142": {
      "retsub": true,
      "op": "retsub"
    },
    "1143": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_method_overload",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1146": {
      "op": "itxn_begin"
    },
    "1147": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1149": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1151": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1152": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1154": {
      "op": "pushbytes 0x000e7479706564202b2069676e6f7265",
      "defined_out": [
        "0x000e7479706564202b2069676e6f7265"
      ],
      "stack_out": [
        "0x000e7479706564202b2069676e6f7265"
      ]
    },
    "1172": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1174": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1175": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1177": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1178": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1180": {
      "op": "itxn_submit"
    },
    "1181": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1183": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1186": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "1187": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1188": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": []
    },
    "1189": {
      "op": "itxn LastLog"
    },
    "1191": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "1192": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%3#0"
      ]
    },
    "1195": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "awst_tmp%1#0"
      ]
    },
    "1196": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1199": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "0x151f7c75"
      ]
    },
    "1200": {
      "op": "==",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1201": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1202": {
      "op": "pushbytes 0x00146563686f3a207479706564202b2069676e6f7265",
      "defined_out": [
        "0x00146563686f3a207479706564202b2069676e6f7265",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x00146563686f3a207479706564202b2069676e6f7265"
      ]
    },
    "1226": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1227": {
      "op": "assert",
      "stack_out": []
    },
    "1228": {
      "op": "itxn_begin"
    },
    "1229": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1231": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1233": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1234": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1236": {
      "op": "pushbytes 0x0010756e7479706564202b2069676e6f7265",
      "defined_out": [
        "0x0010756e7479706564202b2069676e6f7265"
      ],
      "stack_out": [
        "0x0010756e7479706564202b2069676e6f7265"
      ]
    },
    "1256": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1258": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1259": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1261": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1262": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1264": {
      "op": "itxn_submit"
    },
    "1265": {
      "op": "itxn LastLog"
    },
    "1267": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "1268": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%7#0"
      ]
    },
    "1271": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "awst_tmp%2#0"
      ]
    },
    "1272": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1275": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "1276": {
      "op": "==",
      "defined_out": [
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "1277": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1278": {
      "op": "pushbytes 0x00166563686f3a20756e7479706564202b2069676e6f7265",
      "defined_out": [
        "0x00166563686f3a20756e7479706564202b2069676e6f7265",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x00166563686f3a20756e7479706564202b2069676e6f7265"
      ]
    },
    "1304": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1305": {
      "op": "assert",
      "stack_out": []
    },
    "1306": {
      "op": "itxn_begin"
    },
    "1307": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1309": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1311": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1312": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1314": {
      "op": "pushbytes 0x00057475706c65",
      "defined_out": [
        "0x00057475706c65"
      ],
      "stack_out": [
        "0x00057475706c65"
      ]
    },
    "1323": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1325": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1326": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1328": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1329": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1331": {
      "op": "itxn_submit"
    },
    "1332": {
      "op": "itxn LastLog"
    },
    "1334": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "1335": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "result.0#0"
      ]
    },
    "1338": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "awst_tmp%3#0"
      ]
    },
    "1339": {
      "op": "extract 0 4",
      "defined_out": [
        "result.0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result.0#0",
        "tmp%12#0"
      ]
    },
    "1342": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result.0#0",
        "tmp%12#0",
        "0x151f7c75"
      ]
    },
    "1343": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result.0#0",
        "tmp%13#0"
      ]
    },
    "1344": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result.0#0"
      ]
    },
    "1345": {
      "op": "itxn LastLog",
      "defined_out": [
        "result.0#0",
        "result.1.LastLog#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1.LastLog#0"
      ]
    },
    "1347": {
      "op": "swap",
      "stack_out": [
        "result.1.LastLog#0",
        "result.0#0"
      ]
    },
    "1348": {
      "op": "bytec 20 // 0x000b6563686f3a207475706c65",
      "defined_out": [
        "0x000b6563686f3a207475706c65",
        "result.0#0",
        "result.1.LastLog#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "result.0#0",
        "0x000b6563686f3a207475706c65"
      ]
    },
    "1350": {
      "op": "==",
      "defined_out": [
        "result.1.LastLog#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%14#0"
      ]
    },
    "1351": {
      "op": "assert",
      "stack_out": [
        "result.1.LastLog#0"
      ]
    },
    "1352": {
      "op": "dup",
      "defined_out": [
        "result.1.LastLog#0",
        "result.1.LastLog#0 (copy)"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "result.1.LastLog#0 (copy)"
      ]
    },
    "1353": {
      "op": "extract 4 0",
      "defined_out": [
        "result.1.LastLog#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%15#0"
      ]
    },
    "1356": {
      "op": "swap",
      "stack_out": [
        "tmp%15#0",
        "result.1.LastLog#0"
      ]
    },
    "1357": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1360": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "0x151f7c75"
      ]
    },
    "1361": {
      "op": "==",
      "defined_out": [
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "1362": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1363": {
      "op": "bytec 20 // 0x000b6563686f3a207475706c65",
      "stack_out": [
        "tmp%15#0",
        "0x000b6563686f3a207475706c65"
      ]
    },
    "1365": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1366": {
      "op": "assert",
      "stack_out": []
    },
    "1367": {
      "op": "itxn_begin"
    },
    "1368": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1370": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1372": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1373": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1375": {
      "op": "pushbytes 0x0007756e7479706564",
      "defined_out": [
        "0x0007756e7479706564"
      ],
      "stack_out": [
        "0x0007756e7479706564"
      ]
    },
    "1386": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1388": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1389": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1391": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1392": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1394": {
      "op": "itxn_submit"
    },
    "1395": {
      "op": "itxn LastLog"
    },
    "1397": {
      "op": "dup",
      "defined_out": [
        "txn_result.LastLog#0",
        "txn_result.LastLog#0 (copy)"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "txn_result.LastLog#0 (copy)"
      ]
    },
    "1398": {
      "op": "extract 4 0",
      "defined_out": [
        "tmp%19#0",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%19#0"
      ]
    },
    "1401": {
      "op": "swap",
      "stack_out": [
        "tmp%19#0",
        "txn_result.LastLog#0"
      ]
    },
    "1402": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "1405": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0",
        "0x151f7c75"
      ]
    },
    "1406": {
      "op": "==",
      "defined_out": [
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "1407": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1408": {
      "op": "pushbytes 0x000d6563686f3a20756e7479706564",
      "defined_out": [
        "0x000d6563686f3a20756e7479706564",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0x000d6563686f3a20756e7479706564"
      ]
    },
    "1425": {
      "op": "==",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1426": {
      "op": "assert",
      "stack_out": []
    },
    "1427": {
      "retsub": true,
      "op": "retsub"
    },
    "1428": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_arg_conversion",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1431": {
      "op": "itxn_begin"
    },
    "1432": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1434": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1436": {
      "op": "bytec 7 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)"
      ],
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1438": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1440": {
      "op": "pushbytes 0x000a636f6e76657274656431",
      "defined_out": [
        "0x000a636f6e76657274656431"
      ],
      "stack_out": [
        "0x000a636f6e76657274656431"
      ]
    },
    "1454": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1456": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1457": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1459": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1460": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1462": {
      "op": "itxn_submit"
    },
    "1463": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1465": {
      "op": "pushbytes 0x636f6e76657274656431",
      "defined_out": [
        "0x636f6e76657274656431",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x636f6e76657274656431"
      ]
    },
    "1477": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1478": {
      "op": "assert",
      "stack_out": []
    },
    "1479": {
      "op": "itxn_begin"
    },
    "1480": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1482": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1484": {
      "op": "pushbytes 0x3c1058d9 // method \"log(uint64)void\"",
      "defined_out": [
        "Method(log(uint64)void)"
      ],
      "stack_out": [
        "Method(log(uint64)void)"
      ]
    },
    "1490": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1492": {
      "op": "bytec 21 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002"
      ],
      "stack_out": [
        "0x0000000000000002"
      ]
    },
    "1494": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1496": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1497": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1499": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1500": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1502": {
      "op": "itxn_submit"
    },
    "1503": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1505": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "2"
      ]
    },
    "1506": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%1#0"
      ]
    },
    "1507": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1508": {
      "op": "assert",
      "stack_out": []
    },
    "1509": {
      "op": "itxn_begin"
    },
    "1510": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1512": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1514": {
      "op": "pushbytes 0x6af45930 // method \"log(uint512)void\"",
      "defined_out": [
        "Method(log(uint512)void)"
      ],
      "stack_out": [
        "Method(log(uint512)void)"
      ]
    },
    "1520": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1522": {
      "op": "bytec 22 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"
      ]
    },
    "1524": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1526": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1527": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1529": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1530": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1532": {
      "op": "itxn_submit"
    },
    "1533": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1535": {
      "op": "bytec 22 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
      "stack_out": [
        "txn.LastLog#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"
      ]
    },
    "1537": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1538": {
      "op": "assert",
      "stack_out": []
    },
    "1539": {
      "op": "itxn_begin"
    },
    "1540": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1542": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1544": {
      "op": "pushbytes 0xb500e111 // method \"log(byte[])void\"",
      "defined_out": [
        "Method(log(byte[])void)"
      ],
      "stack_out": [
        "Method(log(byte[])void)"
      ]
    },
    "1550": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1552": {
      "op": "pushbytes 0x000134",
      "defined_out": [
        "0x000134"
      ],
      "stack_out": [
        "0x000134"
      ]
    },
    "1557": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1559": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1560": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1562": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1563": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1565": {
      "op": "itxn_submit"
    },
    "1566": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1568": {
      "op": "pushbytes 0x34",
      "defined_out": [
        "0x34",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x34"
      ]
    },
    "1571": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1572": {
      "op": "assert",
      "stack_out": []
    },
    "1573": {
      "op": "itxn_begin"
    },
    "1574": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1576": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1578": {
      "op": "pushbytes 0x6eed7ec3 // method \"log(bool)void\"",
      "defined_out": [
        "Method(log(bool)void)"
      ],
      "stack_out": [
        "Method(log(bool)void)"
      ]
    },
    "1584": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1586": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "1589": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1591": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1592": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1594": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1595": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1597": {
      "op": "itxn_submit"
    },
    "1598": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1600": {
      "op": "pushbytes 0x54727565",
      "defined_out": [
        "0x54727565",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x54727565"
      ]
    },
    "1606": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1607": {
      "op": "assert",
      "stack_out": []
    },
    "1608": {
      "retsub": true,
      "op": "retsub"
    },
    "1609": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_15plus_args",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1612": {
      "op": "itxn_begin"
    },
    "1613": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1615": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1617": {
      "op": "pushbytes 0xba0b4381 // method \"return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]\"",
      "defined_out": [
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])"
      ],
      "stack_out": [
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])"
      ]
    },
    "1623": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1625": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "1626": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1628": {
      "op": "bytec 21 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002"
      ],
      "stack_out": [
        "0x0000000000000002"
      ]
    },
    "1630": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1632": {
      "op": "bytec 9 // 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003"
      ],
      "stack_out": [
        "0x0000000000000003"
      ]
    },
    "1634": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1636": {
      "op": "pushbytes 0x0000000000000004",
      "defined_out": [
        "0x0000000000000004"
      ],
      "stack_out": [
        "0x0000000000000004"
      ]
    },
    "1646": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1648": {
      "op": "pushbytes 0x0000000000000005",
      "defined_out": [
        "0x0000000000000005"
      ],
      "stack_out": [
        "0x0000000000000005"
      ]
    },
    "1658": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1660": {
      "op": "pushbytes 0x0000000000000006",
      "defined_out": [
        "0x0000000000000006"
      ],
      "stack_out": [
        "0x0000000000000006"
      ]
    },
    "1670": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1672": {
      "op": "pushbytes 0x0000000000000007",
      "defined_out": [
        "0x0000000000000007"
      ],
      "stack_out": [
        "0x0000000000000007"
      ]
    },
    "1682": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1684": {
      "op": "pushbytes 0x0000000000000008",
      "defined_out": [
        "0x0000000000000008"
      ],
      "stack_out": [
        "0x0000000000000008"
      ]
    },
    "1694": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1696": {
      "op": "pushbytes 0x0000000000000009",
      "defined_out": [
        "0x0000000000000009"
      ],
      "stack_out": [
        "0x0000000000000009"
      ]
    },
    "1706": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1708": {
      "op": "pushbytes 0x000000000000000a",
      "defined_out": [
        "0x000000000000000a"
      ],
      "stack_out": [
        "0x000000000000000a"
      ]
    },
    "1718": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1720": {
      "op": "pushbytes 0x000000000000000b",
      "defined_out": [
        "0x000000000000000b"
      ],
      "stack_out": [
        "0x000000000000000b"
      ]
    },
    "1730": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1732": {
      "op": "pushbytes 0x000000000000000c",
      "defined_out": [
        "0x000000000000000c"
      ],
      "stack_out": [
        "0x000000000000000c"
      ]
    },
    "1742": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1744": {
      "op": "pushbytes 0x000000000000000d",
      "defined_out": [
        "0x000000000000000d"
      ],
      "stack_out": [
        "0x000000000000000d"
      ]
    },
    "1754": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1756": {
      "op": "pushbytes 0x000000000000000e",
      "defined_out": [
        "0x000000000000000e"
      ],
      "stack_out": [
        "0x000000000000000e"
      ]
    },
    "1766": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1768": {
      "op": "bytec 23 // 0x0f101112deadbeef14",
      "defined_out": [
        "0x0f101112deadbeef14"
      ],
      "stack_out": [
        "0x0f101112deadbeef14"
      ]
    },
    "1770": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1772": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1773": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1775": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1776": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1778": {
      "op": "itxn_submit"
    },
    "1779": {
      "op": "itxn LastLog"
    },
    "1781": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "1782": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1785": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "1786": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1787": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1788": {
      "op": "extract 6 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1791": {
      "op": "bytec 23 // 0x0f101112deadbeef14",
      "stack_out": [
        "tmp%3#0",
        "0x0f101112deadbeef14"
      ]
    },
    "1793": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1794": {
      "op": "assert",
      "stack_out": []
    },
    "1795": {
      "retsub": true,
      "op": "retsub"
    },
    "1796": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_void",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1799": {
      "op": "itxn_begin"
    },
    "1800": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1802": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1804": {
      "op": "bytec 7 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)"
      ],
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1806": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1808": {
      "op": "pushbytes 0x0006576f726c6431",
      "defined_out": [
        "0x0006576f726c6431"
      ],
      "stack_out": [
        "0x0006576f726c6431"
      ]
    },
    "1818": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1820": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1821": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1823": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1824": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1826": {
      "op": "itxn_submit"
    },
    "1827": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1829": {
      "op": "pushbytes 0x576f726c6431",
      "defined_out": [
        "0x576f726c6431",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6431"
      ]
    },
    "1837": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1838": {
      "op": "assert",
      "stack_out": []
    },
    "1839": {
      "op": "itxn_begin"
    },
    "1840": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1842": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1844": {
      "op": "bytec 7 // method \"log(string)void\"",
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1846": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1848": {
      "op": "pushbytes 0x0006576f726c6432",
      "defined_out": [
        "0x0006576f726c6432"
      ],
      "stack_out": [
        "0x0006576f726c6432"
      ]
    },
    "1858": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1860": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1861": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1863": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1864": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1866": {
      "op": "itxn_submit"
    },
    "1867": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1869": {
      "op": "pushbytes 0x576f726c6432",
      "defined_out": [
        "0x576f726c6432",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6432"
      ]
    },
    "1877": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1878": {
      "op": "assert",
      "stack_out": []
    },
    "1879": {
      "op": "itxn_begin"
    },
    "1880": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1882": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1884": {
      "op": "bytec 7 // method \"log(string)void\"",
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1886": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1888": {
      "op": "pushbytes 0x0006576f726c6433",
      "defined_out": [
        "0x0006576f726c6433"
      ],
      "stack_out": [
        "0x0006576f726c6433"
      ]
    },
    "1898": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1900": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1901": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1903": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1904": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1906": {
      "op": "itxn_submit"
    },
    "1907": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1909": {
      "op": "pushbytes 0x576f726c6433",
      "defined_out": [
        "0x576f726c6433",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6433"
      ]
    },
    "1917": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1918": {
      "op": "assert",
      "stack_out": []
    },
    "1919": {
      "op": "itxn_begin"
    },
    "1920": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1922": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1924": {
      "op": "bytec 7 // method \"log(string)void\"",
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1926": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1928": {
      "op": "pushbytes 0x0006576f726c6434",
      "defined_out": [
        "0x0006576f726c6434"
      ],
      "stack_out": [
        "0x0006576f726c6434"
      ]
    },
    "1938": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1940": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1941": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1943": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1944": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1946": {
      "op": "itxn_submit"
    },
    "1947": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1949": {
      "op": "pushbytes 0x576f726c6434",
      "defined_out": [
        "0x576f726c6434",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6434"
      ]
    },
    "1957": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1958": {
      "op": "assert",
      "stack_out": []
    },
    "1959": {
      "retsub": true,
      "op": "retsub"
    },
    "1960": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types",
      "params": {
        "app#0": "uint64",
        "asset#0": "uint64"
      },
      "block": "test_ref_types",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1963": {
      "op": "itxn_begin"
    },
    "1964": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1966": {
      "op": "frame_dig -2",
      "defined_out": [
        "app#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "app#0 (copy)"
      ]
    },
    "1968": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1970": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "asset#0 (copy)"
      ]
    },
    "1972": {
      "op": "itxn_field Assets",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1974": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "app#0 (copy)"
      ]
    },
    "1976": {
      "op": "itxn_field Applications",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1978": {
      "op": "itxn_field Accounts",
      "stack_out": []
    },
    "1980": {
      "op": "pushbytes 0xcd727b71 // method \"log(asset,account,application)void\"",
      "defined_out": [
        "Method(log(asset,account,application)void)"
      ],
      "stack_out": [
        "Method(log(asset,account,application)void)"
      ]
    },
    "1986": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1988": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "1991": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1993": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "1996": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1998": {
      "op": "pushbytes 0x01",
      "stack_out": [
        "0x01"
      ]
    },
    "2001": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2003": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2004": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2006": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2007": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2009": {
      "op": "itxn_submit"
    },
    "2010": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2012": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn.LastLog#0",
        "asset#0 (copy)"
      ]
    },
    "2014": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "check%0#0",
        "txn.LastLog#0",
        "value%0#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "2016": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "txn.LastLog#0",
        "value%0#0"
      ]
    },
    "2017": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%1#0",
        "txn.LastLog#0",
        "value%0#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "value%0#0",
        "tmp%1#0"
      ]
    },
    "2019": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0"
      ]
    },
    "2020": {
      "op": "frame_dig -2",
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0",
        "app#0 (copy)"
      ]
    },
    "2022": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "tmp%2#0",
        "txn.LastLog#0",
        "value%1#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "2024": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0",
        "value%1#0"
      ]
    },
    "2025": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%3#0"
      ]
    },
    "2026": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2027": {
      "op": "assert",
      "stack_out": []
    },
    "2028": {
      "retsub": true,
      "op": "retsub"
    },
    "2029": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_string",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2032": {
      "op": "itxn_begin"
    },
    "2033": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "2035": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2037": {
      "op": "bytec 10 // method \"echo_native_string(string)string\"",
      "defined_out": [
        "Method(echo_native_string(string)string)"
      ],
      "stack_out": [
        "Method(echo_native_string(string)string)"
      ]
    },
    "2039": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2041": {
      "op": "bytec 11 // 0x000173",
      "defined_out": [
        "0x000173"
      ],
      "stack_out": [
        "0x000173"
      ]
    },
    "2043": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2045": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2046": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2048": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2049": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2051": {
      "op": "itxn_submit"
    },
    "2052": {
      "op": "itxn LastLog"
    },
    "2054": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2055": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2058": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2059": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2060": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2061": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0"
      ]
    },
    "2064": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2065": {
      "op": "pushbytes \"echo: s\"",
      "defined_out": [
        "\"echo: s\"",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)",
        "\"echo: s\""
      ]
    },
    "2074": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0"
      ]
    },
    "2075": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2076": {
      "op": "itxn_begin"
    },
    "2077": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2079": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2081": {
      "op": "bytec 10 // method \"echo_native_string(string)string\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_string(string)string)"
      ]
    },
    "2083": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2085": {
      "op": "bytec 11 // 0x000173",
      "stack_out": [
        "result1#0",
        "0x000173"
      ]
    },
    "2087": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2089": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2090": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2092": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2093": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2095": {
      "op": "itxn_submit"
    },
    "2096": {
      "op": "itxn LastLog"
    },
    "2098": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2099": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0"
      ]
    },
    "2102": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "2103": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "2104": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2105": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2108": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2110": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%9#0"
      ]
    },
    "2111": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2112": {
      "op": "itxn_begin"
    },
    "2113": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2115": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2117": {
      "op": "bytec 10 // method \"echo_native_string(string)string\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_string(string)string)"
      ]
    },
    "2119": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2121": {
      "op": "bytec 11 // 0x000173",
      "stack_out": [
        "result1#0",
        "0x000173"
      ]
    },
    "2123": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2125": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2126": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2128": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2129": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2131": {
      "op": "itxn_submit"
    },
    "2132": {
      "op": "itxn LastLog"
    },
    "2134": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2135": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0"
      ]
    },
    "2138": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "2139": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%12#0"
      ]
    },
    "2140": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2141": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2144": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "2145": {
      "op": "assert",
      "stack_out": []
    },
    "2146": {
      "retsub": true,
      "op": "retsub"
    },
    "2147": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_bytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2150": {
      "op": "itxn_begin"
    },
    "2151": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "2153": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2155": {
      "op": "bytec 12 // method \"echo_native_bytes(byte[])byte[]\"",
      "defined_out": [
        "Method(echo_native_bytes(byte[])byte[])"
      ],
      "stack_out": [
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "2157": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2159": {
      "op": "bytec 13 // 0x000162",
      "defined_out": [
        "0x000162"
      ],
      "stack_out": [
        "0x000162"
      ]
    },
    "2161": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2163": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2164": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2166": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2167": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2169": {
      "op": "itxn_submit"
    },
    "2170": {
      "op": "itxn LastLog"
    },
    "2172": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2173": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2176": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2177": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2178": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2179": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0"
      ]
    },
    "2182": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2183": {
      "op": "pushbytes 0x6563686f3a2062",
      "defined_out": [
        "0x6563686f3a2062",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)",
        "0x6563686f3a2062"
      ]
    },
    "2192": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0"
      ]
    },
    "2193": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2194": {
      "op": "itxn_begin"
    },
    "2195": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2197": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2199": {
      "op": "bytec 12 // method \"echo_native_bytes(byte[])byte[]\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "2201": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2203": {
      "op": "bytec 13 // 0x000162",
      "stack_out": [
        "result1#0",
        "0x000162"
      ]
    },
    "2205": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2207": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2208": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2210": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2211": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2213": {
      "op": "itxn_submit"
    },
    "2214": {
      "op": "itxn LastLog"
    },
    "2216": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2217": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0"
      ]
    },
    "2220": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "2221": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "2222": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2223": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2226": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2228": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%9#0"
      ]
    },
    "2229": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2230": {
      "op": "itxn_begin"
    },
    "2231": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2233": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2235": {
      "op": "bytec 12 // method \"echo_native_bytes(byte[])byte[]\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "2237": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2239": {
      "op": "bytec 13 // 0x000162",
      "stack_out": [
        "result1#0",
        "0x000162"
      ]
    },
    "2241": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2243": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2244": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2246": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2247": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2249": {
      "op": "itxn_submit"
    },
    "2250": {
      "op": "itxn LastLog"
    },
    "2252": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2253": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0"
      ]
    },
    "2256": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "2257": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%12#0"
      ]
    },
    "2258": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2259": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2262": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "2263": {
      "op": "assert",
      "stack_out": []
    },
    "2264": {
      "retsub": true,
      "op": "retsub"
    },
    "2265": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_uint64",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2268": {
      "op": "itxn_begin"
    },
    "2269": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "2271": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2273": {
      "op": "bytec 14 // method \"echo_native_uint64(uint64)uint64\"",
      "defined_out": [
        "Method(echo_native_uint64(uint64)uint64)"
      ],
      "stack_out": [
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "2275": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2277": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "2278": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2280": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2281": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2283": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2284": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2286": {
      "op": "itxn_submit"
    },
    "2287": {
      "op": "itxn LastLog"
    },
    "2289": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2290": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2293": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2294": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2297": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2298": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2299": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2300": {
      "op": "btoi",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0"
      ]
    },
    "2301": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2302": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "2303": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0"
      ]
    },
    "2304": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2305": {
      "op": "itxn_begin"
    },
    "2306": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "1"
      ]
    },
    "2307": {
      "op": "itob",
      "defined_out": [
        "result1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "val_as_bytes%0#0"
      ]
    },
    "2308": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "val_as_bytes%0#0",
        "app#0 (copy)"
      ]
    },
    "2310": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "val_as_bytes%0#0"
      ]
    },
    "2312": {
      "op": "bytec 14 // method \"echo_native_uint64(uint64)uint64\"",
      "stack_out": [
        "result1#0",
        "val_as_bytes%0#0",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "2314": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "val_as_bytes%0#0"
      ]
    },
    "2316": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2318": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2319": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2321": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2322": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2324": {
      "op": "itxn_submit"
    },
    "2325": {
      "op": "itxn LastLog"
    },
    "2327": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2328": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%5#0"
      ]
    },
    "2331": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "awst_tmp%1#0"
      ]
    },
    "2332": {
      "op": "extract 0 4",
      "defined_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2335": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "2336": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2337": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "tmp%5#0"
      ]
    },
    "2338": {
      "op": "btoi",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2339": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2341": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%9#0"
      ]
    },
    "2342": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2343": {
      "op": "itxn_begin"
    },
    "2344": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2346": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2348": {
      "op": "bytec 14 // method \"echo_native_uint64(uint64)uint64\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "2350": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2352": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "result1#0",
        "0x0000000000000001"
      ]
    },
    "2353": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2355": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2356": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2358": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2359": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2361": {
      "op": "itxn_submit"
    },
    "2362": {
      "op": "itxn LastLog"
    },
    "2364": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2365": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%10#0"
      ]
    },
    "2368": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "awst_tmp%2#0"
      ]
    },
    "2369": {
      "op": "extract 0 4",
      "defined_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "2372": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "2373": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "2374": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "tmp%10#0"
      ]
    },
    "2375": {
      "op": "btoi",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2376": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "2377": {
      "op": "assert",
      "stack_out": []
    },
    "2378": {
      "retsub": true,
      "op": "retsub"
    },
    "2379": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_biguint",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2382": {
      "op": "itxn_begin"
    },
    "2383": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "2385": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2387": {
      "op": "bytec 15 // method \"echo_native_biguint(uint512)uint512\"",
      "defined_out": [
        "Method(echo_native_biguint(uint512)uint512)"
      ],
      "stack_out": [
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "2389": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2391": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2392": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2394": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2395": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2397": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2398": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2400": {
      "op": "itxn_submit"
    },
    "2401": {
      "op": "itxn LastLog"
    },
    "2403": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2404": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "result1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0"
      ]
    },
    "2407": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0"
      ]
    },
    "2408": {
      "op": "extract 0 4",
      "defined_out": [
        "result1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%1#0"
      ]
    },
    "2411": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "result1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2412": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%2#0"
      ]
    },
    "2413": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0"
      ]
    },
    "2414": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2415": {
      "op": "bytec 16 // 0x03",
      "defined_out": [
        "0x03",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)",
        "0x03"
      ]
    },
    "2417": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%3#0"
      ]
    },
    "2418": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2419": {
      "op": "itxn_begin"
    },
    "2420": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2422": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2424": {
      "op": "bytec 15 // method \"echo_native_biguint(uint512)uint512\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "2426": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2428": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2429": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2431": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2432": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2434": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2435": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2437": {
      "op": "itxn_submit"
    },
    "2438": {
      "op": "itxn LastLog"
    },
    "2440": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2441": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "result2#0"
      ]
    },
    "2444": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "result2#0",
        "awst_tmp%1#0"
      ]
    },
    "2445": {
      "op": "extract 0 4",
      "defined_out": [
        "result1#0",
        "result2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "tmp%6#0"
      ]
    },
    "2448": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "result2#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "2449": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "result2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "tmp%7#0"
      ]
    },
    "2450": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2451": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2453": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%8#0"
      ]
    },
    "2454": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2455": {
      "op": "itxn_begin"
    },
    "2456": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2458": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2460": {
      "op": "bytec 15 // method \"echo_native_biguint(uint512)uint512\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "2462": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2464": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2465": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2467": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2468": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2470": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2471": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2473": {
      "op": "itxn_submit"
    },
    "2474": {
      "op": "itxn LastLog"
    },
    "2476": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2477": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "result3#0"
      ]
    },
    "2480": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "result3#0",
        "awst_tmp%2#0"
      ]
    },
    "2481": {
      "op": "extract 0 4",
      "defined_out": [
        "result1#0",
        "result3#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "tmp%10#0"
      ]
    },
    "2484": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "result3#0",
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "2485": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "result3#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "tmp%11#0"
      ]
    },
    "2486": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2487": {
      "op": "b==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "2488": {
      "op": "assert",
      "stack_out": []
    },
    "2489": {
      "retsub": true,
      "op": "retsub"
    },
    "2490": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_tuple",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2493": {
      "op": "itxn_begin"
    },
    "2494": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "2496": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2498": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ],
      "stack_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2500": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2502": {
      "op": "bytec 5 // 0x00027331",
      "defined_out": [
        "0x00027331"
      ],
      "stack_out": [
        "0x00027331"
      ]
    },
    "2504": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2506": {
      "op": "bytec 6 // 0x00026231",
      "defined_out": [
        "0x00026231"
      ],
      "stack_out": [
        "0x00026231"
      ]
    },
    "2508": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2510": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "2511": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2513": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2514": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2516": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2517": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2519": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2520": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2522": {
      "op": "itxn_submit"
    },
    "2523": {
      "op": "itxn LastLog"
    },
    "2525": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2526": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "result1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0"
      ]
    },
    "2529": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2531": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "result1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "tmp%1#0"
      ]
    },
    "2534": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "result1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2535": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "result1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "tmp%2#0"
      ]
    },
    "2536": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0"
      ]
    },
    "2537": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2538": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "result1#0 (copy)",
        "0"
      ]
    },
    "2539": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%0#0",
        "item_start_offset%0#0",
        "result1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_start_offset%0#0"
      ]
    },
    "2540": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_start_offset%0#0",
        "result1#0 (copy)"
      ]
    },
    "2542": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "awst_tmp%0#0",
        "item_start_offset%0#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_start_offset%0#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "2543": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%0#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "result1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "2544": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "result1#0 (copy)"
      ]
    },
    "2546": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_end_offset%0#0",
        "result1#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "2548": {
      "op": "dig 2",
      "defined_out": [
        "awst_tmp%0#0",
        "item_end_offset%0#0",
        "item_end_offset%0#0 (copy)",
        "item_start_offset%0#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_end_offset%0#0",
        "result1#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0 (copy)"
      ]
    },
    "2550": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%0#0",
        "item_end_offset%0#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_end_offset%0#0",
        "s#0"
      ]
    },
    "2551": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_end_offset%0#0",
        "s#0",
        "result1#0 (copy)"
      ]
    },
    "2553": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_end_offset%0#0",
        "s#0",
        "item_end_offset%1#0"
      ]
    },
    "2554": {
      "op": "dig 3",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "item_end_offset%0#0",
        "s#0",
        "item_end_offset%1#0",
        "result1#0 (copy)"
      ]
    },
    "2556": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "item_end_offset%1#0",
        "result1#0 (copy)",
        "item_end_offset%0#0"
      ]
    },
    "2558": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "result1#0 (copy)",
        "item_end_offset%0#0",
        "item_end_offset%1#0"
      ]
    },
    "2560": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%0#0",
        "b#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "b#0"
      ]
    },
    "2561": {
      "op": "dig 3",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "b#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2563": {
      "op": "extract 16 64",
      "defined_out": [
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "b#0",
        "bu#0"
      ]
    },
    "2566": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "s#0"
      ]
    },
    "2568": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%3#0"
      ]
    },
    "2571": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "2572": {
      "op": "bytec 8 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "\"echo: s1\""
      ]
    },
    "2574": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2575": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%3#0"
      ]
    },
    "2576": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "b#0"
      ]
    },
    "2578": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%0#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "2581": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "2582": {
      "op": "bytec 24 // 0x6563686f3a206231",
      "defined_out": [
        "0x6563686f3a206231",
        "awst_tmp%0#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "0x6563686f3a206231"
      ]
    },
    "2584": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2585": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "2586": {
      "op": "uncover 4",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "awst_tmp%0#0"
      ]
    },
    "2588": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "awst_tmp%0#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "awst_tmp%0#0",
        "8"
      ]
    },
    "2590": {
      "op": "extract_uint64",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2591": {
      "op": "dup",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "2592": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "2"
      ]
    },
    "2593": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2594": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2595": {
      "op": "dig 3",
      "defined_out": [
        "bu#0",
        "bu#0 (copy)",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "bu#0 (copy)"
      ]
    },
    "2597": {
      "op": "bytec 16 // 0x03",
      "defined_out": [
        "0x03",
        "bu#0",
        "bu#0 (copy)",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "bu#0 (copy)",
        "0x03"
      ]
    },
    "2599": {
      "op": "b==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "2600": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2601": {
      "op": "itxn_begin"
    },
    "2602": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "1"
      ]
    },
    "2603": {
      "op": "itob",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0"
      ]
    },
    "2604": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0",
        "app#0 (copy)"
      ]
    },
    "2606": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0"
      ]
    },
    "2608": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2610": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0"
      ]
    },
    "2612": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0",
        "0x00027331"
      ]
    },
    "2614": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0"
      ]
    },
    "2616": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0",
        "0x00026231"
      ]
    },
    "2618": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0"
      ]
    },
    "2620": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2622": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2623": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2625": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "appl"
      ]
    },
    "2626": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2628": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0"
      ]
    },
    "2629": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2631": {
      "op": "itxn_submit"
    },
    "2632": {
      "op": "itxn LastLog"
    },
    "2634": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2635": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "bu#0",
        "result1#0",
        "result2#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%1#0",
        "result2#0"
      ]
    },
    "2638": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result2#0",
        "awst_tmp%1#0"
      ]
    },
    "2639": {
      "op": "extract 0 4",
      "defined_out": [
        "bu#0",
        "result1#0",
        "result2#0",
        "tmp%12#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result2#0",
        "tmp%12#0"
      ]
    },
    "2642": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result2#0",
        "tmp%12#0",
        "0x151f7c75"
      ]
    },
    "2643": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "result2#0",
        "tmp%13#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result2#0",
        "tmp%13#0"
      ]
    },
    "2644": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result2#0"
      ]
    },
    "2645": {
      "op": "dig 5",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2647": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%14#0"
      ]
    },
    "2648": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2649": {
      "op": "itxn_begin"
    },
    "2650": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "app#0 (copy)"
      ]
    },
    "2652": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2654": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2656": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2658": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x00027331"
      ]
    },
    "2660": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2662": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x00026231"
      ]
    },
    "2664": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2666": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x0000000000000001"
      ]
    },
    "2667": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2669": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2670": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2672": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "appl"
      ]
    },
    "2673": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2675": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0"
      ]
    },
    "2676": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2678": {
      "op": "itxn_submit"
    },
    "2679": {
      "op": "itxn LastLog"
    },
    "2681": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2682": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "bu#0",
        "result1#0",
        "result3#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%2#0",
        "result3#0"
      ]
    },
    "2685": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result3#0",
        "awst_tmp%2#0"
      ]
    },
    "2686": {
      "op": "extract 0 4",
      "defined_out": [
        "bu#0",
        "result1#0",
        "result3#0",
        "tmp%16#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result3#0",
        "tmp%16#0"
      ]
    },
    "2689": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result3#0",
        "tmp%16#0",
        "0x151f7c75"
      ]
    },
    "2690": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "result3#0",
        "tmp%17#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result3#0",
        "tmp%17#0"
      ]
    },
    "2691": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result3#0"
      ]
    },
    "2692": {
      "op": "uncover 5",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result3#0",
        "result1#0"
      ]
    },
    "2694": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "tmp%18#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%18#0"
      ]
    },
    "2695": {
      "op": "assert",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2696": {
      "op": "itxn_begin"
    },
    "2697": {
      "op": "frame_dig -1",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "app#0 (copy)"
      ]
    },
    "2699": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2701": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2703": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2705": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x00027331"
      ]
    },
    "2707": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2709": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x00026231"
      ]
    },
    "2711": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2713": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x0000000000000001"
      ]
    },
    "2714": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2716": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2717": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2719": {
      "op": "intc_1 // appl",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "appl"
      ]
    },
    "2720": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2722": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "0"
      ]
    },
    "2723": {
      "op": "itxn_field Fee",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2725": {
      "op": "itxn_submit"
    },
    "2726": {
      "op": "itxn LastLog"
    },
    "2728": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)",
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "2729": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "tmp%19#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%19#0"
      ]
    },
    "2732": {
      "op": "dig 1",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%19#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "2734": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "2737": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%19#0",
        "tmp%20#0",
        "0x151f7c75"
      ]
    },
    "2738": {
      "op": "==",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "2739": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%19#0"
      ]
    },
    "2740": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "tmp%19#0",
        "tmp%19#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ]
    },
    "2741": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%19#0",
        "tmp%19#0 (copy)",
        "0"
      ]
    },
    "2742": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "item_start_offset%2#0",
        "tmp%19#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%19#0",
        "item_start_offset%2#0"
      ]
    },
    "2743": {
      "op": "dig 1",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%19#0",
        "item_start_offset%2#0",
        "tmp%19#0 (copy)"
      ]
    },
    "2745": {
      "op": "intc_3 // 2",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%19#0",
        "item_start_offset%2#0",
        "tmp%19#0 (copy)",
        "2"
      ]
    },
    "2746": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "tmp%19#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%19#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "2747": {
      "op": "dig 2",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%19#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0",
        "tmp%19#0 (copy)"
      ]
    },
    "2749": {
      "op": "uncover 2",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%19#0",
        "item_end_offset%2#0",
        "tmp%19#0 (copy)",
        "item_start_offset%2#0"
      ]
    },
    "2751": {
      "op": "dig 2",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "item_end_offset%2#0",
        "item_end_offset%2#0 (copy)",
        "item_start_offset%2#0",
        "tmp%19#0",
        "tmp%19#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%19#0",
        "item_end_offset%2#0",
        "tmp%19#0 (copy)",
        "item_start_offset%2#0",
        "item_end_offset%2#0 (copy)"
      ]
    },
    "2753": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "item0%1#0",
        "item_end_offset%2#0",
        "tmp%19#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%19#0",
        "item_end_offset%2#0",
        "item0%1#0"
      ]
    },
    "2754": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "item_end_offset%2#0",
        "result_native.0#0",
        "tmp%19#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%19#0",
        "item_end_offset%2#0",
        "result_native.0#0"
      ]
    },
    "2757": {
      "op": "dig 2",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%19#0",
        "item_end_offset%2#0",
        "result_native.0#0",
        "tmp%19#0 (copy)"
      ]
    },
    "2759": {
      "op": "len",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "item_end_offset%2#0",
        "item_end_offset%3#0",
        "result_native.0#0",
        "tmp%19#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "tmp%19#0",
        "item_end_offset%2#0",
        "result_native.0#0",
        "item_end_offset%3#0"
      ]
    },
    "2760": {
      "op": "uncover 3"
    },
    "2762": {
      "op": "uncover 3",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "item_end_offset%3#0",
        "tmp%19#0",
        "item_end_offset%2#0"
      ]
    },
    "2764": {
      "op": "uncover 2",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "tmp%19#0",
        "item_end_offset%2#0",
        "item_end_offset%3#0"
      ]
    },
    "2766": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "item1%1#0",
        "result_native.0#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "item1%1#0"
      ]
    },
    "2767": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "result_native.0#0",
        "result_native.1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0"
      ]
    },
    "2770": {
      "op": "dig 2",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "2772": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "awst_tmp%3#0 (copy)",
        "8"
      ]
    },
    "2774": {
      "op": "extract_uint64",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0"
      ]
    },
    "2775": {
      "op": "uncover 3",
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "awst_tmp%3#0"
      ]
    },
    "2777": {
      "op": "extract 16 64",
      "defined_out": [
        "bu#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ]
    },
    "2780": {
      "op": "uncover 6",
      "stack_out": [
        "bu#0",
        "tmp%5#0",
        "tmp%7#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%3#0"
      ]
    },
    "2782": {
      "op": "uncover 4",
      "stack_out": [
        "bu#0",
        "tmp%5#0",
        "tmp%7#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%3#0",
        "result_native.0#0"
      ]
    },
    "2784": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%23#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%5#0",
        "tmp%7#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%23#0"
      ]
    },
    "2785": {
      "op": "assert",
      "stack_out": [
        "bu#0",
        "tmp%5#0",
        "tmp%7#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ]
    },
    "2786": {
      "op": "uncover 4",
      "stack_out": [
        "bu#0",
        "tmp%7#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%5#0"
      ]
    },
    "2788": {
      "op": "uncover 3",
      "stack_out": [
        "bu#0",
        "tmp%7#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%5#0",
        "result_native.1#0"
      ]
    },
    "2790": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%25#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%7#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%25#0"
      ]
    },
    "2791": {
      "op": "assert",
      "stack_out": [
        "bu#0",
        "tmp%7#0",
        "result_native.2#0",
        "result_native.3#0"
      ]
    },
    "2792": {
      "op": "cover 2",
      "stack_out": [
        "bu#0",
        "result_native.3#0",
        "tmp%7#0",
        "result_native.2#0"
      ]
    },
    "2794": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result_native.3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "bu#0",
        "result_native.3#0",
        "tmp%27#0"
      ]
    },
    "2795": {
      "op": "assert",
      "stack_out": [
        "bu#0",
        "result_native.3#0"
      ]
    },
    "2796": {
      "op": "b==",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "2797": {
      "op": "assert",
      "stack_out": []
    },
    "2798": {
      "retsub": true,
      "op": "retsub"
    },
    "2799": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_tuple_method_ref",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2802": {
      "op": "itxn_begin"
    },
    "2803": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "2805": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2807": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ],
      "stack_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2809": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2811": {
      "op": "bytec 5 // 0x00027331",
      "defined_out": [
        "0x00027331"
      ],
      "stack_out": [
        "0x00027331"
      ]
    },
    "2813": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2815": {
      "op": "bytec 6 // 0x00026231",
      "defined_out": [
        "0x00026231"
      ],
      "stack_out": [
        "0x00026231"
      ]
    },
    "2817": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2819": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "2820": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2822": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2823": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2825": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2826": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2828": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2829": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2831": {
      "op": "itxn_submit"
    },
    "2832": {
      "op": "itxn LastLog"
    },
    "2834": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2835": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2838": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2840": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2843": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2844": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2845": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2846": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2847": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "2848": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%0#0",
        "item_start_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_start_offset%0#0"
      ]
    },
    "2849": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_start_offset%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2851": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "awst_tmp%0#0",
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_start_offset%0#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "2852": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%0#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "2853": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2855": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "2857": {
      "op": "dig 2",
      "defined_out": [
        "awst_tmp%0#0",
        "item_end_offset%0#0",
        "item_end_offset%0#0 (copy)",
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0 (copy)"
      ]
    },
    "2859": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%0#0",
        "item0%0#0",
        "item_end_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "item0%0#0"
      ]
    },
    "2860": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%0#0",
        "item_end_offset%0#0",
        "result.0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "result.0#0"
      ]
    },
    "2863": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "result.0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2865": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "result.0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "result.0#0",
        "item_end_offset%1#0"
      ]
    },
    "2866": {
      "op": "uncover 3"
    },
    "2868": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "item_end_offset%1#0",
        "tmp%0#0",
        "item_end_offset%0#0"
      ]
    },
    "2870": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0"
      ]
    },
    "2872": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%0#0",
        "item1%0#0",
        "result.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "item1%0#0"
      ]
    },
    "2873": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0"
      ]
    },
    "2876": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2878": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "result.0#0",
        "result.1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%0#0 (copy)",
        "8"
      ]
    },
    "2880": {
      "op": "extract_uint64",
      "defined_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ]
    },
    "2881": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "awst_tmp%0#0"
      ]
    },
    "2883": {
      "op": "extract 16 64",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2886": {
      "op": "dig 3",
      "defined_out": [
        "result.0#0",
        "result.0#0 (copy)",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.0#0 (copy)"
      ]
    },
    "2888": {
      "op": "bytec 8 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "result.0#0",
        "result.0#0 (copy)",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.0#0 (copy)",
        "\"echo: s1\""
      ]
    },
    "2890": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%3#0"
      ]
    },
    "2891": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2892": {
      "op": "dig 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.1#0 (copy)",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.1#0 (copy)"
      ]
    },
    "2894": {
      "op": "bytec 24 // 0x6563686f3a206231",
      "defined_out": [
        "0x6563686f3a206231",
        "result.0#0",
        "result.1#0",
        "result.1#0 (copy)",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.1#0 (copy)",
        "0x6563686f3a206231"
      ]
    },
    "2896": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%4#0"
      ]
    },
    "2897": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2898": {
      "op": "dig 1",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.2#0 (copy)",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.2#0 (copy)"
      ]
    },
    "2900": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.2#0 (copy)",
        "2"
      ]
    },
    "2901": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%5#0"
      ]
    },
    "2902": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2903": {
      "op": "dup",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)"
      ]
    },
    "2904": {
      "op": "bytec 16 // 0x03",
      "defined_out": [
        "0x03",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)",
        "0x03"
      ]
    },
    "2906": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%6#0"
      ]
    },
    "2907": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2908": {
      "op": "itxn_begin"
    },
    "2909": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "1"
      ]
    },
    "2910": {
      "op": "itob",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ]
    },
    "2911": {
      "op": "frame_dig -1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0",
        "app#0 (copy)"
      ]
    },
    "2913": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ]
    },
    "2915": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2917": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ]
    },
    "2919": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0",
        "0x00027331"
      ]
    },
    "2921": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ]
    },
    "2923": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0",
        "0x00026231"
      ]
    },
    "2925": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ]
    },
    "2927": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2929": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2930": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2932": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "appl"
      ]
    },
    "2933": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2935": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0"
      ]
    },
    "2936": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2938": {
      "op": "itxn_submit"
    },
    "2939": {
      "op": "itxn LastLog"
    },
    "2941": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2942": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "2945": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2947": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "2950": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "2951": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "2952": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "2953": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "2954": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "0"
      ]
    },
    "2955": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%1#0",
        "item_start_offset%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "item_start_offset%2#0"
      ]
    },
    "2956": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "item_start_offset%2#0",
        "tmp%8#0 (copy)"
      ]
    },
    "2958": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "item_start_offset%2#0",
        "tmp%8#0 (copy)",
        "2"
      ]
    },
    "2959": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%1#0",
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "2960": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0",
        "tmp%8#0 (copy)"
      ]
    },
    "2962": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "item_end_offset%2#0",
        "tmp%8#0 (copy)",
        "item_start_offset%2#0"
      ]
    },
    "2964": {
      "op": "dig 2",
      "defined_out": [
        "awst_tmp%1#0",
        "item_end_offset%2#0",
        "item_end_offset%2#0 (copy)",
        "item_start_offset%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "item_end_offset%2#0",
        "tmp%8#0 (copy)",
        "item_start_offset%2#0",
        "item_end_offset%2#0 (copy)"
      ]
    },
    "2966": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "item0%1#0",
        "item_end_offset%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "item_end_offset%2#0",
        "item0%1#0"
      ]
    },
    "2967": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%1#0",
        "item_end_offset%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "item_end_offset%2#0",
        "result_2.0#0"
      ]
    },
    "2970": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "item_end_offset%2#0",
        "result_2.0#0",
        "tmp%8#0 (copy)"
      ]
    },
    "2972": {
      "op": "len",
      "defined_out": [
        "awst_tmp%1#0",
        "item_end_offset%2#0",
        "item_end_offset%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "item_end_offset%2#0",
        "result_2.0#0",
        "item_end_offset%3#0"
      ]
    },
    "2973": {
      "op": "uncover 3"
    },
    "2975": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "item_end_offset%3#0",
        "tmp%8#0",
        "item_end_offset%2#0"
      ]
    },
    "2977": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "tmp%8#0",
        "item_end_offset%2#0",
        "item_end_offset%3#0"
      ]
    },
    "2979": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "item1%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "item1%1#0"
      ]
    },
    "2980": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "result_2.1#0"
      ]
    },
    "2983": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "result_2.1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2985": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "result_2.1#0",
        "awst_tmp%1#0 (copy)",
        "8"
      ]
    },
    "2987": {
      "op": "extract_uint64",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0"
      ]
    },
    "2988": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "awst_tmp%1#0"
      ]
    },
    "2990": {
      "op": "extract 16 64",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0"
      ]
    },
    "2993": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "result_2.0#0"
      ]
    },
    "2995": {
      "op": "dig 7",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "result_2.0#0",
        "result.0#0 (copy)"
      ]
    },
    "2997": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%11#0"
      ]
    },
    "2998": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%11#0",
        "result_2.1#0"
      ]
    },
    "3000": {
      "op": "dig 6",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%11#0",
        "result_2.1#0",
        "result.1#0 (copy)"
      ]
    },
    "3002": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "3003": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%13#0"
      ]
    },
    "3004": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%13#0",
        "result_2.2#0"
      ]
    },
    "3006": {
      "op": "dig 4",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%13#0",
        "result_2.2#0",
        "result.2#0 (copy)"
      ]
    },
    "3008": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "3009": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%15#0"
      ]
    },
    "3010": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%15#0",
        "result_2.3#0"
      ]
    },
    "3011": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%15#0",
        "result_2.3#0",
        "result.3#0 (copy)"
      ]
    },
    "3013": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "3014": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0"
      ]
    },
    "3015": {
      "error": "expected native arguments to give the same result",
      "op": "assert // expected native arguments to give the same result",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3016": {
      "op": "itxn_begin"
    },
    "3017": {
      "op": "frame_dig -1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "app#0 (copy)"
      ]
    },
    "3019": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3021": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3023": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3025": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00027331"
      ]
    },
    "3027": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3029": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00026231"
      ]
    },
    "3031": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3033": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x0000000000000001"
      ]
    },
    "3034": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3036": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3037": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3039": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "appl"
      ]
    },
    "3040": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3042": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0"
      ]
    },
    "3043": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3045": {
      "op": "itxn_submit"
    },
    "3046": {
      "op": "itxn LastLog"
    },
    "3048": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3049": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%18#0"
      ]
    },
    "3052": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%18#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3054": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "3057": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%18#0",
        "tmp%19#0",
        "0x151f7c75"
      ]
    },
    "3058": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%18#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%18#0",
        "tmp%20#0"
      ]
    },
    "3059": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%18#0"
      ]
    },
    "3060": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "3061": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "0"
      ]
    },
    "3062": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%2#0",
        "item_start_offset%4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%18#0",
        "item_start_offset%4#0"
      ]
    },
    "3063": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%18#0",
        "item_start_offset%4#0",
        "tmp%18#0 (copy)"
      ]
    },
    "3065": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%18#0",
        "item_start_offset%4#0",
        "tmp%18#0 (copy)",
        "2"
      ]
    },
    "3066": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%2#0",
        "item_end_offset%4#0",
        "item_start_offset%4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%18#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "3067": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%18#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "tmp%18#0 (copy)"
      ]
    },
    "3069": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%18#0",
        "item_end_offset%4#0",
        "tmp%18#0 (copy)",
        "item_start_offset%4#0"
      ]
    },
    "3071": {
      "op": "dig 2",
      "defined_out": [
        "awst_tmp%2#0",
        "item_end_offset%4#0",
        "item_end_offset%4#0 (copy)",
        "item_start_offset%4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%18#0",
        "item_end_offset%4#0",
        "tmp%18#0 (copy)",
        "item_start_offset%4#0",
        "item_end_offset%4#0 (copy)"
      ]
    },
    "3073": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%2#0",
        "item0%2#0",
        "item_end_offset%4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%18#0",
        "item_end_offset%4#0",
        "item0%2#0"
      ]
    },
    "3074": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%2#0",
        "item_end_offset%4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%18#0",
        "item_end_offset%4#0",
        "result_3.0#0"
      ]
    },
    "3077": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%18#0",
        "item_end_offset%4#0",
        "result_3.0#0",
        "tmp%18#0 (copy)"
      ]
    },
    "3079": {
      "op": "len",
      "defined_out": [
        "awst_tmp%2#0",
        "item_end_offset%4#0",
        "item_end_offset%5#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%18#0",
        "item_end_offset%4#0",
        "result_3.0#0",
        "item_end_offset%5#0"
      ]
    },
    "3080": {
      "op": "uncover 3"
    },
    "3082": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "item_end_offset%5#0",
        "tmp%18#0",
        "item_end_offset%4#0"
      ]
    },
    "3084": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "tmp%18#0",
        "item_end_offset%4#0",
        "item_end_offset%5#0"
      ]
    },
    "3086": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%2#0",
        "item1%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "item1%2#0"
      ]
    },
    "3087": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "result_3.1#0"
      ]
    },
    "3090": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "result_3.1#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3092": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "result_3.1#0",
        "awst_tmp%2#0 (copy)",
        "8"
      ]
    },
    "3094": {
      "op": "extract_uint64",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0"
      ]
    },
    "3095": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "awst_tmp%2#0"
      ]
    },
    "3097": {
      "op": "extract 16 64",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0"
      ]
    },
    "3100": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "result_3.0#0"
      ]
    },
    "3102": {
      "op": "dig 7",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "result_3.0#0",
        "result.0#0 (copy)"
      ]
    },
    "3104": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%21#0"
      ]
    },
    "3105": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%21#0",
        "result_3.1#0"
      ]
    },
    "3107": {
      "op": "dig 6",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%21#0",
        "result_3.1#0",
        "result.1#0 (copy)"
      ]
    },
    "3109": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "3110": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%23#0"
      ]
    },
    "3111": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%23#0",
        "result_3.2#0"
      ]
    },
    "3113": {
      "op": "dig 4",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%23#0",
        "result_3.2#0",
        "result.2#0 (copy)"
      ]
    },
    "3115": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "3116": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%25#0"
      ]
    },
    "3117": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%25#0",
        "result_3.3#0"
      ]
    },
    "3118": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%25#0",
        "result_3.3#0",
        "result.3#0 (copy)"
      ]
    },
    "3120": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "3121": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%27#0"
      ]
    },
    "3122": {
      "error": "expected arc4 arguments to give the same result",
      "op": "assert // expected arc4 arguments to give the same result",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3123": {
      "op": "itxn_begin"
    },
    "3124": {
      "op": "frame_dig -1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "app#0 (copy)"
      ]
    },
    "3126": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3128": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3130": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3132": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00027331"
      ]
    },
    "3134": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3136": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00026231"
      ]
    },
    "3138": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3140": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x0000000000000001"
      ]
    },
    "3141": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3143": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3144": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3146": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "appl"
      ]
    },
    "3147": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3149": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0"
      ]
    },
    "3150": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3152": {
      "op": "itxn_submit"
    },
    "3153": {
      "op": "itxn LastLog"
    },
    "3155": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3156": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%28#0"
      ]
    },
    "3159": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%28#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3161": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "3164": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%28#0",
        "tmp%29#0",
        "0x151f7c75"
      ]
    },
    "3165": {
      "op": "==",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%28#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%28#0",
        "tmp%30#0"
      ]
    },
    "3166": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%28#0"
      ]
    },
    "3167": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ]
    },
    "3168": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%28#0",
        "tmp%28#0 (copy)",
        "0"
      ]
    },
    "3169": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%3#0",
        "item_start_offset%6#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%28#0",
        "item_start_offset%6#0"
      ]
    },
    "3170": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%28#0",
        "item_start_offset%6#0",
        "tmp%28#0 (copy)"
      ]
    },
    "3172": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%28#0",
        "item_start_offset%6#0",
        "tmp%28#0 (copy)",
        "2"
      ]
    },
    "3173": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%3#0",
        "item_end_offset%6#0",
        "item_start_offset%6#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%28#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0"
      ]
    },
    "3174": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%28#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0",
        "tmp%28#0 (copy)"
      ]
    },
    "3176": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%28#0",
        "item_end_offset%6#0",
        "tmp%28#0 (copy)",
        "item_start_offset%6#0"
      ]
    },
    "3178": {
      "op": "dig 2",
      "defined_out": [
        "awst_tmp%3#0",
        "item_end_offset%6#0",
        "item_end_offset%6#0 (copy)",
        "item_start_offset%6#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%28#0",
        "item_end_offset%6#0",
        "tmp%28#0 (copy)",
        "item_start_offset%6#0",
        "item_end_offset%6#0 (copy)"
      ]
    },
    "3180": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%3#0",
        "item0%3#0",
        "item_end_offset%6#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%28#0",
        "item_end_offset%6#0",
        "item0%3#0"
      ]
    },
    "3181": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%3#0",
        "item_end_offset%6#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%28#0",
        "item_end_offset%6#0",
        "result_native.0#0"
      ]
    },
    "3184": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%28#0",
        "item_end_offset%6#0",
        "result_native.0#0",
        "tmp%28#0 (copy)"
      ]
    },
    "3186": {
      "op": "len",
      "defined_out": [
        "awst_tmp%3#0",
        "item_end_offset%6#0",
        "item_end_offset%7#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%28#0",
        "item_end_offset%6#0",
        "result_native.0#0",
        "item_end_offset%7#0"
      ]
    },
    "3187": {
      "op": "uncover 3"
    },
    "3189": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "item_end_offset%7#0",
        "tmp%28#0",
        "item_end_offset%6#0"
      ]
    },
    "3191": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "tmp%28#0",
        "item_end_offset%6#0",
        "item_end_offset%7#0"
      ]
    },
    "3193": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%3#0",
        "item1%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "item1%3#0"
      ]
    },
    "3194": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0"
      ]
    },
    "3197": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3199": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "awst_tmp%3#0 (copy)",
        "8"
      ]
    },
    "3201": {
      "op": "extract_uint64",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0"
      ]
    },
    "3202": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "awst_tmp%3#0"
      ]
    },
    "3204": {
      "op": "extract 16 64",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ]
    },
    "3207": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "result_native.0#0"
      ]
    },
    "3209": {
      "op": "uncover 7",
      "stack_out": [
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "result_native.0#0",
        "result.0#0"
      ]
    },
    "3211": {
      "op": "==",
      "defined_out": [
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%31#0"
      ]
    },
    "3212": {
      "op": "uncover 3",
      "stack_out": [
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%31#0",
        "result_native.1#0"
      ]
    },
    "3214": {
      "op": "uncover 6",
      "stack_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%31#0",
        "result_native.1#0",
        "result.1#0"
      ]
    },
    "3216": {
      "op": "==",
      "defined_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "3217": {
      "op": "&&",
      "defined_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%33#0"
      ]
    },
    "3218": {
      "op": "uncover 2",
      "stack_out": [
        "result.2#0",
        "result.3#0",
        "result_native.3#0",
        "tmp%33#0",
        "result_native.2#0"
      ]
    },
    "3220": {
      "op": "uncover 4",
      "stack_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%33#0",
        "result_native.2#0",
        "result.2#0"
      ]
    },
    "3222": {
      "op": "==",
      "defined_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "3223": {
      "op": "&&",
      "defined_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%35#0"
      ]
    },
    "3224": {
      "op": "swap",
      "stack_out": [
        "result.3#0",
        "tmp%35#0",
        "result_native.3#0"
      ]
    },
    "3225": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%35#0",
        "result_native.3#0",
        "result.3#0"
      ]
    },
    "3227": {
      "op": "b==",
      "defined_out": [
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "3228": {
      "op": "&&",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "3229": {
      "op": "assert",
      "stack_out": []
    },
    "3230": {
      "retsub": true,
      "op": "retsub"
    },
    "3231": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_nested_tuples",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3234": {
      "op": "itxn_begin"
    },
    "3235": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3237": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3239": {
      "op": "bytec 17 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "defined_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ],
      "stack_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "3241": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3243": {
      "op": "bytec 25 // 0x00040010000400080002733100027332000000000000000100000000000000020012000133",
      "defined_out": [
        "0x00040010000400080002733100027332000000000000000100000000000000020012000133"
      ],
      "stack_out": [
        "0x00040010000400080002733100027332000000000000000100000000000000020012000133"
      ]
    },
    "3245": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3247": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "3248": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3250": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3251": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3253": {
      "op": "itxn_submit"
    },
    "3254": {
      "op": "itxn LastLog"
    },
    "3256": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3257": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3260": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3261": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3264": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "3265": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3266": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3267": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3268": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "3269": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%0#0"
      ]
    },
    "3270": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3272": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%0#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "3273": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "3274": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3276": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "3278": {
      "op": "dig 2",
      "defined_out": [
        "item_end_offset%0#0",
        "item_end_offset%0#0 (copy)",
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0 (copy)"
      ]
    },
    "3280": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "item0%0#0"
      ]
    },
    "3281": {
      "op": "dup",
      "defined_out": [
        "item0%0#0",
        "item0%0#0 (copy)",
        "item_end_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "3282": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "0"
      ]
    },
    "3283": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%0#0",
        "item_start_offset%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_start_offset%1#0"
      ]
    },
    "3284": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item0%0#0 (copy)"
      ]
    },
    "3286": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item0%0#0 (copy)",
        "2"
      ]
    },
    "3287": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "3288": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "item0%0#0 (copy)"
      ]
    },
    "3290": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item0%0#0 (copy)",
        "item_start_offset%1#0"
      ]
    },
    "3292": {
      "op": "dig 2",
      "defined_out": [
        "item0%0#0",
        "item0%0#0 (copy)",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "item_end_offset%1#0 (copy)",
        "item_start_offset%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item0%0#0 (copy)",
        "item_start_offset%1#0",
        "item_end_offset%1#0 (copy)"
      ]
    },
    "3294": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "item0%1#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item0%1#0"
      ]
    },
    "3295": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "result.0.0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "result.0.0#0"
      ]
    },
    "3298": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "result.0.0#0",
        "item0%0#0 (copy)"
      ]
    },
    "3300": {
      "op": "len",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "item_end_offset%2#0",
        "result.0.0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "result.0.0#0",
        "item_end_offset%2#0"
      ]
    },
    "3301": {
      "op": "uncover 3"
    },
    "3303": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "result.0.0#0",
        "item_end_offset%2#0",
        "item0%0#0",
        "item_end_offset%1#0"
      ]
    },
    "3305": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "result.0.0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item_end_offset%2#0"
      ]
    },
    "3307": {
      "op": "substring3",
      "defined_out": [
        "item_end_offset%0#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "result.0.0#0",
        "result.0.1#0"
      ]
    },
    "3308": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3310": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_end_offset%3#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "result.0.0#0",
        "result.0.1#0",
        "item_end_offset%3#0"
      ]
    },
    "3311": {
      "op": "uncover 4"
    },
    "3313": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item_end_offset%3#0",
        "tmp%0#0",
        "item_end_offset%0#0"
      ]
    },
    "3315": {
      "op": "uncover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "item_end_offset%3#0"
      ]
    },
    "3317": {
      "op": "substring3",
      "defined_out": [
        "item1%1#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%1#0"
      ]
    },
    "3318": {
      "op": "dup",
      "defined_out": [
        "item1%1#0",
        "item1%1#0 (copy)",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ]
    },
    "3319": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "0"
      ]
    },
    "3320": {
      "op": "extract_uint64",
      "defined_out": [
        "item1%1#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%1#0",
        "result.1.0#0"
      ]
    },
    "3321": {
      "op": "dig 1",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%1#0",
        "result.1.0#0",
        "item1%1#0 (copy)"
      ]
    },
    "3323": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "item1%1#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%1#0",
        "result.1.0#0",
        "result.1.1#0"
      ]
    },
    "3326": {
      "op": "dig 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item1%1#0 (copy)"
      ]
    },
    "3328": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "item1%1#0",
        "item1%1#0 (copy)",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item1%1#0 (copy)",
        "16"
      ]
    },
    "3330": {
      "op": "extract_uint16",
      "defined_out": [
        "item1%1#0",
        "item_start_offset%4#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%4#0"
      ]
    },
    "3331": {
      "op": "dig 3",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%4#0",
        "item1%1#0 (copy)"
      ]
    },
    "3333": {
      "op": "len",
      "defined_out": [
        "item1%1#0",
        "item_end_offset%4#0",
        "item_start_offset%4#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "3334": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "item1%1#0"
      ]
    },
    "3336": {
      "op": "cover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item1%1#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "3338": {
      "op": "substring3",
      "defined_out": [
        "item2%0#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item2%0#0"
      ]
    },
    "3339": {
      "op": "extract 2 0",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3342": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0"
      ]
    },
    "3344": {
      "op": "bytec 8 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0",
        "\"echo: s1\""
      ]
    },
    "3346": {
      "op": "==",
      "defined_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%3#0"
      ]
    },
    "3347": {
      "op": "assert",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3348": {
      "op": "uncover 3",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0"
      ]
    },
    "3350": {
      "op": "bytec 26 // 0x00086563686f3a207332",
      "defined_out": [
        "0x00086563686f3a207332",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0",
        "0x00086563686f3a207332"
      ]
    },
    "3352": {
      "op": "==",
      "defined_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%4#0"
      ]
    },
    "3353": {
      "op": "assert",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3354": {
      "op": "uncover 2",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0"
      ]
    },
    "3356": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0",
        "2"
      ]
    },
    "3357": {
      "op": "==",
      "defined_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%5#0"
      ]
    },
    "3358": {
      "op": "assert",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3359": {
      "op": "swap",
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0"
      ]
    },
    "3360": {
      "op": "bytec 9 // 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0",
        "0x0000000000000003"
      ]
    },
    "3362": {
      "op": "b==",
      "defined_out": [
        "result.1.2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "tmp%6#0"
      ]
    },
    "3363": {
      "op": "assert",
      "stack_out": [
        "result.1.2#0"
      ]
    },
    "3364": {
      "op": "bytec 27 // 0x6563686f3a2033",
      "defined_out": [
        "0x6563686f3a2033",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "0x6563686f3a2033"
      ]
    },
    "3366": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "3367": {
      "op": "assert",
      "stack_out": []
    },
    "3368": {
      "op": "itxn_begin"
    },
    "3369": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3371": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3373": {
      "op": "bytec 17 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "stack_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "3375": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3377": {
      "op": "bytec 25 // 0x00040010000400080002733100027332000000000000000100000000000000020012000133",
      "stack_out": [
        "0x00040010000400080002733100027332000000000000000100000000000000020012000133"
      ]
    },
    "3379": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3381": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "3382": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3384": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3385": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3387": {
      "op": "itxn_submit"
    },
    "3388": {
      "op": "itxn LastLog"
    },
    "3390": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3391": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "3394": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "awst_tmp%1#0"
      ]
    },
    "3395": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "3398": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "3399": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "3400": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "3401": {
      "op": "dup",
      "defined_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "3402": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "0"
      ]
    },
    "3403": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%5#0"
      ]
    },
    "3404": {
      "op": "dig 1",
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%5#0",
        "tmp%8#0 (copy)"
      ]
    },
    "3406": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%5#0",
        "tmp%8#0 (copy)",
        "2"
      ]
    },
    "3407": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%5#0",
        "item_start_offset%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0"
      ]
    },
    "3408": {
      "op": "dig 2",
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0",
        "tmp%8#0 (copy)"
      ]
    },
    "3410": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "tmp%8#0 (copy)",
        "item_start_offset%5#0"
      ]
    },
    "3412": {
      "op": "dig 2",
      "defined_out": [
        "item_end_offset%5#0",
        "item_end_offset%5#0 (copy)",
        "item_start_offset%5#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "tmp%8#0 (copy)",
        "item_start_offset%5#0",
        "item_end_offset%5#0 (copy)"
      ]
    },
    "3414": {
      "op": "substring3",
      "defined_out": [
        "item0%3#0",
        "item_end_offset%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "item0%3#0"
      ]
    },
    "3415": {
      "op": "dup",
      "defined_out": [
        "item0%3#0",
        "item0%3#0 (copy)",
        "item_end_offset%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "item0%3#0",
        "item0%3#0 (copy)"
      ]
    },
    "3416": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "item0%3#0",
        "item0%3#0 (copy)",
        "0"
      ]
    },
    "3417": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%3#0",
        "item_end_offset%5#0",
        "item_start_offset%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "item0%3#0",
        "item_start_offset%6#0"
      ]
    },
    "3418": {
      "op": "dig 1",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "item0%3#0",
        "item_start_offset%6#0",
        "item0%3#0 (copy)"
      ]
    },
    "3420": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "item0%3#0",
        "item_start_offset%6#0",
        "item0%3#0 (copy)",
        "2"
      ]
    },
    "3421": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%3#0",
        "item_end_offset%5#0",
        "item_end_offset%6#0",
        "item_start_offset%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "item0%3#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0"
      ]
    },
    "3422": {
      "op": "dig 2",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "item0%3#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0",
        "item0%3#0 (copy)"
      ]
    },
    "3424": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "item0%3#0",
        "item_end_offset%6#0",
        "item0%3#0 (copy)",
        "item_start_offset%6#0"
      ]
    },
    "3426": {
      "op": "dig 2",
      "defined_out": [
        "item0%3#0",
        "item0%3#0 (copy)",
        "item_end_offset%5#0",
        "item_end_offset%6#0",
        "item_end_offset%6#0 (copy)",
        "item_start_offset%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "item0%3#0",
        "item_end_offset%6#0",
        "item0%3#0 (copy)",
        "item_start_offset%6#0",
        "item_end_offset%6#0 (copy)"
      ]
    },
    "3428": {
      "op": "substring3",
      "defined_out": [
        "item0%3#0",
        "item0%4#0",
        "item_end_offset%5#0",
        "item_end_offset%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "item0%3#0",
        "item_end_offset%6#0",
        "item0%4#0"
      ]
    },
    "3429": {
      "op": "extract 2 0",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "item0%3#0",
        "item_end_offset%6#0",
        "result.0.0#0"
      ]
    },
    "3432": {
      "op": "dig 2",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "item0%3#0",
        "item_end_offset%6#0",
        "result.0.0#0",
        "item0%3#0 (copy)"
      ]
    },
    "3434": {
      "op": "len",
      "defined_out": [
        "item0%3#0",
        "item_end_offset%5#0",
        "item_end_offset%6#0",
        "item_end_offset%7#0",
        "result.0.0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "item0%3#0",
        "item_end_offset%6#0",
        "result.0.0#0",
        "item_end_offset%7#0"
      ]
    },
    "3435": {
      "op": "uncover 3"
    },
    "3437": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "result.0.0#0",
        "item_end_offset%7#0",
        "item0%3#0",
        "item_end_offset%6#0"
      ]
    },
    "3439": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "result.0.0#0",
        "item0%3#0",
        "item_end_offset%6#0",
        "item_end_offset%7#0"
      ]
    },
    "3441": {
      "op": "substring3",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "result.0.0#0",
        "result.0.1#0"
      ]
    },
    "3442": {
      "op": "dig 3",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%8#0 (copy)"
      ]
    },
    "3444": {
      "op": "len",
      "defined_out": [
        "item_end_offset%5#0",
        "item_end_offset%8#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "result.0.0#0",
        "result.0.1#0",
        "item_end_offset%8#0"
      ]
    },
    "3445": {
      "op": "uncover 4"
    },
    "3447": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item_end_offset%8#0",
        "tmp%8#0",
        "item_end_offset%5#0"
      ]
    },
    "3449": {
      "op": "uncover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "tmp%8#0",
        "item_end_offset%5#0",
        "item_end_offset%8#0"
      ]
    },
    "3451": {
      "op": "substring3",
      "defined_out": [
        "item1%4#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%4#0"
      ]
    },
    "3452": {
      "op": "dup",
      "defined_out": [
        "item1%4#0",
        "item1%4#0 (copy)",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%4#0",
        "item1%4#0 (copy)"
      ]
    },
    "3453": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%4#0",
        "item1%4#0 (copy)",
        "0"
      ]
    },
    "3454": {
      "op": "extract_uint64",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%4#0",
        "result.1.0#0"
      ]
    },
    "3455": {
      "op": "dig 1",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%4#0",
        "result.1.0#0",
        "item1%4#0 (copy)"
      ]
    },
    "3457": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%4#0",
        "result.1.0#0",
        "result.1.1#0"
      ]
    },
    "3460": {
      "op": "dig 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%4#0",
        "result.1.0#0",
        "result.1.1#0",
        "item1%4#0 (copy)"
      ]
    },
    "3462": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%4#0",
        "result.1.0#0",
        "result.1.1#0",
        "item1%4#0 (copy)",
        "16"
      ]
    },
    "3464": {
      "op": "extract_uint16",
      "defined_out": [
        "item1%4#0",
        "item_start_offset%9#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%4#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%9#0"
      ]
    },
    "3465": {
      "op": "dig 3",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%4#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%9#0",
        "item1%4#0 (copy)"
      ]
    },
    "3467": {
      "op": "len",
      "defined_out": [
        "item1%4#0",
        "item_end_offset%9#0",
        "item_start_offset%9#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%4#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%9#0",
        "item_end_offset%9#0"
      ]
    },
    "3468": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%9#0",
        "item_end_offset%9#0",
        "item1%4#0"
      ]
    },
    "3470": {
      "op": "cover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item1%4#0",
        "item_start_offset%9#0",
        "item_end_offset%9#0"
      ]
    },
    "3472": {
      "op": "substring3",
      "defined_out": [
        "item2%1#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item2%1#0"
      ]
    },
    "3473": {
      "op": "extract 2 0",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3476": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0"
      ]
    },
    "3478": {
      "op": "bytec 8 // \"echo: s1\"",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0",
        "\"echo: s1\""
      ]
    },
    "3480": {
      "op": "==",
      "defined_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%11#0"
      ]
    },
    "3481": {
      "op": "assert",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3482": {
      "op": "uncover 3",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0"
      ]
    },
    "3484": {
      "op": "bytec 26 // 0x00086563686f3a207332",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0",
        "0x00086563686f3a207332"
      ]
    },
    "3486": {
      "op": "==",
      "defined_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%12#0"
      ]
    },
    "3487": {
      "op": "assert",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3488": {
      "op": "uncover 2",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0"
      ]
    },
    "3490": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0",
        "2"
      ]
    },
    "3491": {
      "op": "==",
      "defined_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%13#0"
      ]
    },
    "3492": {
      "op": "assert",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3493": {
      "op": "swap",
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0"
      ]
    },
    "3494": {
      "op": "bytec 9 // 0x0000000000000003",
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0",
        "0x0000000000000003"
      ]
    },
    "3496": {
      "op": "b==",
      "defined_out": [
        "result.1.2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "tmp%14#0"
      ]
    },
    "3497": {
      "op": "assert",
      "stack_out": [
        "result.1.2#0"
      ]
    },
    "3498": {
      "op": "bytec 27 // 0x6563686f3a2033",
      "stack_out": [
        "result.1.2#0",
        "0x6563686f3a2033"
      ]
    },
    "3500": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "3501": {
      "op": "assert",
      "stack_out": []
    },
    "3502": {
      "op": "itxn_begin"
    },
    "3503": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3505": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3507": {
      "op": "bytec 17 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "stack_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "3509": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3511": {
      "op": "pushbytes 0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362",
      "defined_out": [
        "0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362"
      ],
      "stack_out": [
        "0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362"
      ]
    },
    "3553": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3555": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "3556": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3558": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3559": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3561": {
      "op": "itxn_submit"
    },
    "3562": {
      "op": "itxn LastLog"
    },
    "3564": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3565": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%16#0"
      ]
    },
    "3568": {
      "op": "swap",
      "stack_out": [
        "tmp%16#0",
        "awst_tmp%2#0"
      ]
    },
    "3569": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "3572": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "3573": {
      "op": "==",
      "defined_out": [
        "tmp%16#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%18#0"
      ]
    },
    "3574": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "3575": {
      "op": "dup",
      "defined_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "3576": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "0"
      ]
    },
    "3577": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%10#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%10#0"
      ]
    },
    "3578": {
      "op": "dig 1",
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%10#0",
        "tmp%16#0 (copy)"
      ]
    },
    "3580": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%10#0",
        "tmp%16#0 (copy)",
        "2"
      ]
    },
    "3581": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%10#0",
        "item_start_offset%10#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%10#0",
        "item_end_offset%10#0"
      ]
    },
    "3582": {
      "op": "dig 2",
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%10#0",
        "item_end_offset%10#0",
        "tmp%16#0 (copy)"
      ]
    },
    "3584": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "tmp%16#0 (copy)",
        "item_start_offset%10#0"
      ]
    },
    "3586": {
      "op": "dig 2",
      "defined_out": [
        "item_end_offset%10#0",
        "item_end_offset%10#0 (copy)",
        "item_start_offset%10#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "tmp%16#0 (copy)",
        "item_start_offset%10#0",
        "item_end_offset%10#0 (copy)"
      ]
    },
    "3588": {
      "op": "substring3",
      "defined_out": [
        "item0%6#0",
        "item_end_offset%10#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "item0%6#0"
      ]
    },
    "3589": {
      "op": "dup",
      "defined_out": [
        "item0%6#0",
        "item0%6#0 (copy)",
        "item_end_offset%10#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "item0%6#0",
        "item0%6#0 (copy)"
      ]
    },
    "3590": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "item0%6#0",
        "item0%6#0 (copy)",
        "0"
      ]
    },
    "3591": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%6#0",
        "item_end_offset%10#0",
        "item_start_offset%11#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "item0%6#0",
        "item_start_offset%11#0"
      ]
    },
    "3592": {
      "op": "dig 1",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "item0%6#0",
        "item_start_offset%11#0",
        "item0%6#0 (copy)"
      ]
    },
    "3594": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "item0%6#0",
        "item_start_offset%11#0",
        "item0%6#0 (copy)",
        "2"
      ]
    },
    "3595": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%6#0",
        "item_end_offset%10#0",
        "item_end_offset%11#0",
        "item_start_offset%11#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "item0%6#0",
        "item_start_offset%11#0",
        "item_end_offset%11#0"
      ]
    },
    "3596": {
      "op": "dig 2",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "item0%6#0",
        "item_start_offset%11#0",
        "item_end_offset%11#0",
        "item0%6#0 (copy)"
      ]
    },
    "3598": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "item0%6#0",
        "item_end_offset%11#0",
        "item0%6#0 (copy)",
        "item_start_offset%11#0"
      ]
    },
    "3600": {
      "op": "dig 2",
      "defined_out": [
        "item0%6#0",
        "item0%6#0 (copy)",
        "item_end_offset%10#0",
        "item_end_offset%11#0",
        "item_end_offset%11#0 (copy)",
        "item_start_offset%11#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "item0%6#0",
        "item_end_offset%11#0",
        "item0%6#0 (copy)",
        "item_start_offset%11#0",
        "item_end_offset%11#0 (copy)"
      ]
    },
    "3602": {
      "op": "substring3",
      "defined_out": [
        "item0%6#0",
        "item0%7#0",
        "item_end_offset%10#0",
        "item_end_offset%11#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "item0%6#0",
        "item_end_offset%11#0",
        "item0%7#0"
      ]
    },
    "3603": {
      "op": "extract 2 0",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "item0%6#0",
        "item_end_offset%11#0",
        "result.0.0#0"
      ]
    },
    "3606": {
      "op": "dig 2",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "item0%6#0",
        "item_end_offset%11#0",
        "result.0.0#0",
        "item0%6#0 (copy)"
      ]
    },
    "3608": {
      "op": "len",
      "defined_out": [
        "item0%6#0",
        "item_end_offset%10#0",
        "item_end_offset%11#0",
        "item_end_offset%12#0",
        "result.0.0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "item0%6#0",
        "item_end_offset%11#0",
        "result.0.0#0",
        "item_end_offset%12#0"
      ]
    },
    "3609": {
      "op": "uncover 3"
    },
    "3611": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "result.0.0#0",
        "item_end_offset%12#0",
        "item0%6#0",
        "item_end_offset%11#0"
      ]
    },
    "3613": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "result.0.0#0",
        "item0%6#0",
        "item_end_offset%11#0",
        "item_end_offset%12#0"
      ]
    },
    "3615": {
      "op": "substring3",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "result.0.0#0",
        "result.0.1#0"
      ]
    },
    "3616": {
      "op": "dig 3",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%16#0 (copy)"
      ]
    },
    "3618": {
      "op": "len",
      "defined_out": [
        "item_end_offset%10#0",
        "item_end_offset%13#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "result.0.0#0",
        "result.0.1#0",
        "item_end_offset%13#0"
      ]
    },
    "3619": {
      "op": "uncover 4"
    },
    "3621": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item_end_offset%13#0",
        "tmp%16#0",
        "item_end_offset%10#0"
      ]
    },
    "3623": {
      "op": "uncover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "tmp%16#0",
        "item_end_offset%10#0",
        "item_end_offset%13#0"
      ]
    },
    "3625": {
      "op": "substring3",
      "defined_out": [
        "item1%7#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%7#0"
      ]
    },
    "3626": {
      "op": "dup",
      "defined_out": [
        "item1%7#0",
        "item1%7#0 (copy)",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%7#0",
        "item1%7#0 (copy)"
      ]
    },
    "3627": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%7#0",
        "item1%7#0 (copy)",
        "0"
      ]
    },
    "3628": {
      "op": "extract_uint64",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%7#0",
        "result.1.0#0"
      ]
    },
    "3629": {
      "op": "dig 1",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%7#0",
        "result.1.0#0",
        "item1%7#0 (copy)"
      ]
    },
    "3631": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%7#0",
        "result.1.0#0",
        "result.1.1#0"
      ]
    },
    "3634": {
      "op": "dig 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%7#0",
        "result.1.0#0",
        "result.1.1#0",
        "item1%7#0 (copy)"
      ]
    },
    "3636": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%7#0",
        "result.1.0#0",
        "result.1.1#0",
        "item1%7#0 (copy)",
        "16"
      ]
    },
    "3638": {
      "op": "extract_uint16",
      "defined_out": [
        "item1%7#0",
        "item_start_offset%14#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%7#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%14#0"
      ]
    },
    "3639": {
      "op": "dig 3",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%7#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%14#0",
        "item1%7#0 (copy)"
      ]
    },
    "3641": {
      "op": "len",
      "defined_out": [
        "item1%7#0",
        "item_end_offset%14#0",
        "item_start_offset%14#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "item1%7#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%14#0",
        "item_end_offset%14#0"
      ]
    },
    "3642": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item_start_offset%14#0",
        "item_end_offset%14#0",
        "item1%7#0"
      ]
    },
    "3644": {
      "op": "cover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item1%7#0",
        "item_start_offset%14#0",
        "item_end_offset%14#0"
      ]
    },
    "3646": {
      "op": "substring3",
      "defined_out": [
        "item2%2#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "item2%2#0"
      ]
    },
    "3647": {
      "op": "extract 2 0",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3650": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0"
      ]
    },
    "3652": {
      "op": "pushbytes \"echo: s1b\"",
      "defined_out": [
        "\"echo: s1b\"",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0",
        "\"echo: s1b\""
      ]
    },
    "3663": {
      "op": "==",
      "defined_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%19#0"
      ]
    },
    "3664": {
      "op": "assert",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3665": {
      "op": "uncover 3",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0"
      ]
    },
    "3667": {
      "op": "pushbytes 0x00096563686f3a20733262",
      "defined_out": [
        "0x00096563686f3a20733262",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0",
        "0x00096563686f3a20733262"
      ]
    },
    "3680": {
      "op": "==",
      "defined_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%20#0"
      ]
    },
    "3681": {
      "op": "assert",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3682": {
      "op": "uncover 2",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0"
      ]
    },
    "3684": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0",
        "12"
      ]
    },
    "3686": {
      "op": "==",
      "defined_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%21#0"
      ]
    },
    "3687": {
      "op": "assert",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3688": {
      "op": "swap",
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0"
      ]
    },
    "3689": {
      "op": "pushbytes 0x0000000000000016",
      "defined_out": [
        "0x0000000000000016",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0",
        "0x0000000000000016"
      ]
    },
    "3699": {
      "op": "b==",
      "defined_out": [
        "result.1.2#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "tmp%22#0"
      ]
    },
    "3700": {
      "op": "assert",
      "stack_out": [
        "result.1.2#0"
      ]
    },
    "3701": {
      "op": "pushbytes 0x6563686f3a203362",
      "defined_out": [
        "0x6563686f3a203362",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "0x6563686f3a203362"
      ]
    },
    "3711": {
      "op": "==",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "3712": {
      "op": "assert",
      "stack_out": []
    },
    "3713": {
      "retsub": true,
      "op": "retsub"
    },
    "3714": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_no_args",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3717": {
      "op": "itxn_begin"
    },
    "3718": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3720": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3722": {
      "op": "bytec 18 // method \"no_args()uint64\"",
      "defined_out": [
        "Method(no_args()uint64)"
      ],
      "stack_out": [
        "Method(no_args()uint64)"
      ]
    },
    "3724": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3726": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "3727": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3729": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3730": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3732": {
      "op": "itxn_submit"
    },
    "3733": {
      "op": "itxn LastLog"
    },
    "3735": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3736": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3739": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3740": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3743": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "3744": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3745": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3746": {
      "op": "btoi",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "3747": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "42"
      ]
    },
    "3749": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "3750": {
      "op": "assert",
      "stack_out": []
    },
    "3751": {
      "op": "itxn_begin"
    },
    "3752": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3754": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3756": {
      "op": "bytec 18 // method \"no_args()uint64\"",
      "stack_out": [
        "Method(no_args()uint64)"
      ]
    },
    "3758": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3760": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "3761": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3763": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3764": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3766": {
      "op": "itxn_submit"
    },
    "3767": {
      "op": "itxn LastLog"
    },
    "3769": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3770": {
      "op": "extract 4 0",
      "defined_out": [
        "arc4_result#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "arc4_result#0"
      ]
    },
    "3773": {
      "op": "swap",
      "stack_out": [
        "arc4_result#0",
        "awst_tmp%1#0"
      ]
    },
    "3774": {
      "op": "extract 0 4",
      "defined_out": [
        "arc4_result#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "arc4_result#0",
        "tmp%6#0"
      ]
    },
    "3777": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "arc4_result#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "3778": {
      "op": "==",
      "defined_out": [
        "arc4_result#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "arc4_result#0",
        "tmp%7#0"
      ]
    },
    "3779": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "arc4_result#0"
      ]
    },
    "3780": {
      "op": "bytec 28 // 0x000000000000002a",
      "defined_out": [
        "0x000000000000002a",
        "arc4_result#0"
      ],
      "stack_out": [
        "arc4_result#0",
        "0x000000000000002a"
      ]
    },
    "3782": {
      "op": "b==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "3783": {
      "op": "assert",
      "stack_out": []
    },
    "3784": {
      "op": "itxn_begin"
    },
    "3785": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3787": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3789": {
      "op": "bytec 18 // method \"no_args()uint64\"",
      "stack_out": [
        "Method(no_args()uint64)"
      ]
    },
    "3791": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3793": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "3794": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3796": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3797": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3799": {
      "op": "itxn_submit"
    },
    "3800": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "3802": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "3805": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "3806": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "3807": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": []
    },
    "3808": {
      "op": "itxn LastLog"
    },
    "3810": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3811": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%13#0"
      ]
    },
    "3814": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "awst_tmp%3#0"
      ]
    },
    "3815": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "3818": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "3819": {
      "op": "==",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "3820": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "3821": {
      "op": "bytec 28 // 0x000000000000002a",
      "stack_out": [
        "tmp%13#0",
        "0x000000000000002a"
      ]
    },
    "3823": {
      "op": "b==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "3824": {
      "op": "assert",
      "stack_out": []
    },
    "3825": {
      "retsub": true,
      "op": "retsub"
    },
    "3826": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_named_tuples",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3829": {
      "op": "itxn_begin"
    },
    "3830": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3832": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3834": {
      "op": "bytec 29 // method \"logs_are_equal((uint64,string),(uint64,string))bool\"",
      "defined_out": [
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ],
      "stack_out": [
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ]
    },
    "3836": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3838": {
      "op": "bytec 19 // 0x0000000000000001000a00056c6f672031",
      "defined_out": [
        "0x0000000000000001000a00056c6f672031"
      ],
      "stack_out": [
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "3840": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3842": {
      "op": "bytec 19 // 0x0000000000000001000a00056c6f672031",
      "stack_out": [
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "3844": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3846": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "3847": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3849": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3850": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3852": {
      "op": "itxn_submit"
    },
    "3853": {
      "op": "itxn LastLog"
    },
    "3855": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3856": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3859": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3860": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3863": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "3864": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3865": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3866": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "3867": {
      "op": "getbit",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "3868": {
      "op": "assert",
      "stack_out": []
    },
    "3869": {
      "op": "itxn_begin"
    },
    "3870": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3872": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3874": {
      "op": "bytec 29 // method \"logs_are_equal((uint64,string),(uint64,string))bool\"",
      "stack_out": [
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ]
    },
    "3876": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3878": {
      "op": "pushbytes 0x0000000000000002000a00056c6f672032",
      "defined_out": [
        "0x0000000000000002000a00056c6f672032"
      ],
      "stack_out": [
        "0x0000000000000002000a00056c6f672032"
      ]
    },
    "3897": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3899": {
      "op": "bytec 19 // 0x0000000000000001000a00056c6f672031",
      "stack_out": [
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "3901": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3903": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "3904": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3906": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3907": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3909": {
      "op": "itxn_submit"
    },
    "3910": {
      "op": "itxn LastLog"
    },
    "3912": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3913": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "3916": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "awst_tmp%1#0"
      ]
    },
    "3917": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "3920": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "3921": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "3922": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "3923": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "3924": {
      "op": "getbit",
      "stack_out": [
        "result#0"
      ]
    },
    "3925": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "3926": {
      "op": "assert",
      "stack_out": []
    },
    "3927": {
      "retsub": true,
      "op": "retsub"
    }
  }
}