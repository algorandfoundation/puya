{
  "version": 3,
  "sources": [
    "../typed_c2c.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAwWK;;AAAA;AAAA;AAAA;;AAAA;AAxWL;;;AAAA;AAAA;;;AAAA;AAwWK;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AA7VL;;;AAAA;AA6VK;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AA5UL;;;AAAA;AA4UK;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAlUL;;;AAAA;AAkUK;;;AAAA;;AA9CA;;AAAA;AAAA;AAAA;;AAAA;AApRL;;;AAAA;AAoRK;;;AAAA;;AAlDA;;AAAA;AAAA;AAAA;;AAAA;AAlOL;;;AAAA;AAkOK;;;AAAA;;AA3DA;;AAAA;AAAA;AAAA;;AAAA;AAvKL;;;AAAA;AAuKK;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AA5JL;;;AAAA;AA4JK;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAjJL;;;AAAA;AAiJK;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AApIL;;;AAAA;AAoIK;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAzHL;;;AAAA;AAyHK;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAhHL;;;AAAA;AAgHK;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAlGL;;;AAAA;AAAA;;;AAAA;AAkGK;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AApFL;;;AAAA;AAoFK;;;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AAxDL;;;AAAA;AAwDK;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAvCL;;;AAAA;AAuCK;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAxBL;;;AAAA;AAwBK;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAVL;;;AAAA;AAUK;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AACK;;;AAAA;;AADL;;AAAA;;;;;;;;;AACA;;;AAEQ;AAEI;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AACA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;;;AAHJ;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;AAOR;;;AAGuB;;;;;AAAA;;;AAA2B;;;;;;;;;;;AAA3B;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;;;;;AAAA;;;AAAiC;;;;;;;;;;;AAAjC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;;;;;AAAA;;;AAAmC;;;;;;;;;;;AAAnC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;;;;;AAAA;;;AAA2C;;;;;;;;;;;AAA3C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;;;;;AAAA;;;AAAiD;;;;;;;;;;;AAAjD;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;;AAER;;;AAEQ;;;;;AAAA;;;AAAiD;;;;;;;;;;;;;;;;;;;;AAAjD;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;;;;;;;;;;;;;;;;;;;;;;;AAA5C;AAAP;AAEA;;;;;AAAA;;;AAAoC;;;;;;;;;;;;;;;;;;;;;;AAApC;;;AAAA;;;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;;;;;;;;;;;;;;;;;;;;;;;;;AAA5C;AAAP;AAES;;;;;AAAA;;;AAAiD;;;;;;;;;;;AAAjD;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AACF;AAAa;;AAAb;AAAP;AACO;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AADa;;AACb;AAAP;AAEa;;;;;AAAA;;;AAAoC;;;;;;;;;;;;;AAApC;;;AAAA;;;AAAA;;;AACN;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA6C;;;;;;;;;;;;;;;;;AAA7C;AAAP;;AAER;;;AAEc;;;;;AAAA;;;;AAAiC;;;;;;;;;;;;;;;;AAAjC;;;AAAA;;;AAAA;;;AACiB;;;;;;;;;;;;AAAhB;AAAP;AAEM;;;;;AAAA;;;;;;;;AAAiC;;;;AAAjC;;;AAAA;;;AAAA;;;AACyB;AAAR;AAAhB;AAAP;AAEM;;;;;AAAA;;;;;;;;AAAkC;;;;AAAlC;;;AAAA;;;AAAA;;;AACkB;;AAAjB;AAAP;AAEM;;;;;AAAA;;;;;;;;AAAgC;;;;;;;AAAhC;;;AAAA;;;AAAA;;;AACiB;;;AAAhB;AAAP;AAEM;;;;;AAAA;;;;;;;;AAA+B;;;;;AAA/B;;;AAAA;;;AAAA;;;AACiB;;;;;;AAAhB;AAAP;;AAER;;;AAEsB;;;;;AAAA;;;;;;;;AAEV;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;AAhBU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAwBP;;;AAAiB;;AAAjB;AAAP;;AAER;;;AAEc;;;;;AAAA;;;;AAAgD;;;;;;;;;;;;AAAhD;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;AAEM;;;;;AAAA;;;;AAA4C;;;;;;;;;;;;AAA5C;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;AAEM;;;;;AAAA;;;;AAA+B;;;;;;;;;;;;AAA/B;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;AAEM;;;;;AAAA;;;;AAAiC;;;;;;;;;;;;AAAjC;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;;AAER;;;AAEc;AAEF;;AAAA;AACA;;AACA;;AAAA;;;;;AAJE;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;AASC;;AAAA;;AAAA;AAAa;;AAAb;AAAwD;;AAAA;;AAAA;AAAxD;AADH;AADJ;;AAKR;;;AAEc;AAEF;;;;;;AAFE;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;AAKiB;;AAAhB;AAAP;;AAER;;;AAEwB;;;;;AAAA;;;;AAAyC;;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;AAAW;;;;;;;;;AAAX;AAAP;AAEgB;;;;;AAAA;;;;AAHyC;;;;AAGzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;;AAAA;AAAP;AAEgB;;;;;AAAA;;;;AANyC;;;;AAMzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;AAAP;;AAER;;;AAEwB;;;;;AAAA;;;;AAAwC;;;;AAAxC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;AAAW;;;;;;;;;AAAX;AAAP;AAEgB;;;;;AAAA;;;;AAHwC;;;;AAGxC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;;AAAA;AAAP;AAEgB;;;;;AAAA;;;;AANwC;;;;AAMxC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAGT;AAAP;;AAER;;;AAEwB;;;;;AAAA;;;;AAAyC;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACT;AAAW;AAAX;AAAP;AAEgB;AAAyC;AAAA;;;;;AAAzC;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;AAEgB;;;;;AAAA;;;;AAAyC;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACT;AAAP;;AAER;;;AAEwB;;;;;AAAA;;;;AAA0C;;;AAA1C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACT;AAAW;;AAAX;AAAP;AAEgB;;;;;AAAA;;;;AAA0C;;;AAA1C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;AAEgB;;;;;AAAA;;;;AAA0C;;;AAA1C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACT;AAAP;;AAER;;;AAGuB;;;;;AAAA;;;;AAIX;;;;AACA;;;;AACA;;;AACA;;;AAPW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAUD;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;AACP;;AAAA;;;AAAA;AAAY;;AAAZ;AAAP;AACO;;AAAA;;;AAAA;AAAY;;AAAZ;AAAP;AACO;;;;AAAA;AAAA;AAAY;AAAZ;AAAP;AACO;;AAAa;;AAAb;AAAP;AAGe;AAMX;AAAA;;;;;AANW;;;;AAbX;;;;AACA;;;;;;AAmBA;;;AAPW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAUR;;AAAA;AAAP;AAGe;;;;;AAAA;;;;AA1BX;;;;AACA;;;;AA+BA;;;AACA;;;AAPW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAUR;;AAAA;AAAP;AAGqB;;;;;AAAA;;;;AAvCjB;;;;AACA;;;;AA0CA;;;AACA;;;AALiB;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;;AAAA;;;AAQd;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAP;AACO;;AAAA;AAAP;AACO;AAAP;;AAER;;;AAGsB;;;;;AAAA;;;;AAEV;;;;AACA;;;;AACA;;;AACA;;;AALU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;;AAAA;;;AASP;;AAAK;;AAAL;AAAP;AACO;;AAAK;;AAAL;AAAP;AACO;;AAAK;AAAL;AAAP;AACO;AAAM;;AAAN;AAAP;AAGgB;AAIZ;AAAA;;;;;AAJY;;;;AAbZ;;;;AACA;;;;;;AAiBA;;;AALY;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;;AAAA;;;AAQT;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAGgB;;;;;AAAA;;;;AAxBZ;;;;AACA;;;;AA2BA;;;AACA;;;AALY;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;;AAAA;;;AAQT;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAGqB;;;;;AAAA;;;;AAnCjB;;;;AACA;;;;AAsCA;;;AACA;;;AALiB;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;;AAAA;;;AAQd;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;;AAER;;;AAGsB;;;;;AAAA;;;;AAEV;;;;AAFU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAMP;;AAAM;;AAAN;AAAP;AACO;;AAAM;;AAAN;AAAP;AACO;;AAAS;AAAT;AAAP;AACO;AAAS;;AAAT;AAAP;AACgB;;AAAT;AAAP;AAGc;;;;;AAAA;;;;AAEV;;;;AAFU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAMP;;AAAM;;AAAN;AAAP;AACO;;AAbM;;AAaN;AAAP;AACO;;AAAS;AAAT;AAAP;AACO;AAAS;;AAAT;AAAP;AACgB;;AAAT;AAAP;AAGc;;;;;AAAA;;;;AAEV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAWP;;AAAM;;;;;;;;;;;AAAN;AAAP;AACO;;AAAM;;;;;;;;;;;;;AAAN;AAAP;AACO;;AAAS;;AAAT;AAAP;AACO;AAAS;;;;;;;;;;AAAT;AAAP;AACgB;;;;;;;;;;AAAT;AAAP;;AAER;;;AAEuB;;;;;AAAA;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACE;;AAAV;AAAP;AACoB;;;;;AAAA;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;AAAf;AAAP;AAEA;;;;;AAAA;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;AAA5C;AAAP;;AAER;;;AAEuB;;;;;AAAA;;;;AAEX;;;;AACA;;;;AAHW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMf;AACe;;;;;AAAA;;;;AAEX;;;;;;;;;;;;;;;;;;;;;AANA;;;;AAIW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMR;AAAP;;AAER;;;AAGsB;;;;;AAAA;;;;;;;;AADR;;;;AACQ;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAKP;AAND;;AAMC;AAAP;AACO;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAPD;;AAOC;AAAP;;AAER;;;AAEc;;AACA;;AAEQ;;;;;;;;;;;;;;;;AAAA;;;;AAC6B;;;;AAAO;;;;AAAK;;;;AADzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;;;AAGP;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAEc;AACqB;;AAAA;AAAO;;AAAA;;;;;AAD5B;;;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;;;AAGP;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAEc;;;;;;;;;;;;;;;;;AAAA;;;;AACmC;;;;AAAO;;;;AAAK;;;;AAD/C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;;;AAGP;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAEc;;;;;AAAA;;;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;;;AAGP;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAEc;;;;;;;;;;;;;;;;;AAAA;;;;AAEV;;;;AACA;;;;AACA;;;;AAJU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;;;AAOP;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAEc;;;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;;;AAOP;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 6 1 2"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x9bf81913 0x0000000000000001 0x16e03919 0x00027331 0x00026231 0x0000000000000001000a00056c6f672031 0x01 0xb4b4334e \"echo: s1\" 0x0000000000000003 0x4a444c77 0x000173 0x2659e818 0x000162 0xa9fb6cf1 0xd8cc363b 0x03 0xab271ce4 0xb862ee19 0x43bef4fe 0x00 0x48142d5e 0x000b6563686f3a207475706c65 0x0000000000000002 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003 0x0f101112deadbeef14 0x6563686f3a206231 0x00040010000400080002733100027332000000000000000100000000000000020012000133 0x00086563686f3a207332 0x6563686f3a2033 0x000000000000002a 0xddd07185"
    },
    "381": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "383": {
      "op": "bz main_bare_routing@24",
      "stack_out": []
    },
    "386": {
      "op": "pushbytess 0x094418cd 0x31e8e212 0xb5dcf0ba 0xbf3b242b 0x063beac7 0xe9f3087d 0xc88920f9 0xc2f21b73 0x86052a5c 0xe85f2441 0x92082d08 0x6211cd59 0x19eed724 0x92f75ee2 0xe748ef8e 0xc7b94959 0x868e49e7 0xaccd5072 0xf7f3d8ac // method \"test_is_a_b(byte[],byte[],uint64)void\", method \"test_method_selector_kinds(uint64)void\", method \"test_method_overload(uint64)void\", method \"test_arg_conversion(uint64)void\", method \"test_15plus_args(uint64)void\", method \"test_void(uint64)void\", method \"test_ref_types(uint64,uint64)void\", method \"test_account_to_address(uint64)void\", method \"test_native_string(uint64)void\", method \"test_native_bytes(uint64)void\", method \"test_native_uint64(uint64)void\", method \"test_native_biguint(uint64)void\", method \"test_native_tuple(uint64)void\", method \"test_native_tuple_method_ref(uint64)void\", method \"test_nested_tuples(uint64)void\", method \"test_no_args(uint64)void\", method \"test_named_tuples(uint64)void\", method \"test_arc4_struct(uint64)void\", method \"test_resource_encoding(uint64,uint64)void\"",
      "defined_out": [
        "Method(test_15plus_args(uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_arc4_struct(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_named_tuples(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_nested_tuples(uint64)void)",
        "Method(test_no_args(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_resource_encoding(uint64,uint64)void)",
        "Method(test_void(uint64)void)"
      ],
      "stack_out": [
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)",
        "Method(test_void(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_nested_tuples(uint64)void)",
        "Method(test_no_args(uint64)void)",
        "Method(test_named_tuples(uint64)void)",
        "Method(test_arc4_struct(uint64)void)",
        "Method(test_resource_encoding(uint64,uint64)void)"
      ]
    },
    "483": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(test_15plus_args(uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_arc4_struct(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_named_tuples(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_nested_tuples(uint64)void)",
        "Method(test_no_args(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_resource_encoding(uint64,uint64)void)",
        "Method(test_void(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)",
        "Method(test_void(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_nested_tuples(uint64)void)",
        "Method(test_no_args(uint64)void)",
        "Method(test_named_tuples(uint64)void)",
        "Method(test_arc4_struct(uint64)void)",
        "Method(test_resource_encoding(uint64,uint64)void)",
        "tmp%2#0"
      ]
    },
    "486": {
      "op": "match main_test_is_a_b_route@3 main_test_method_selector_kinds_route@4 main_test_method_overload_route@5 main_test_arg_conversion_route@6 main_test_15plus_args_route@7 main_test_void_route@8 main_test_ref_types_route@9 main_test_account_to_address_route@10 main_test_native_string_route@11 main_test_native_bytes_route@12 main_test_native_uint64_route@13 main_test_native_biguint_route@14 main_test_native_tuple_route@15 main_test_native_tuple_method_ref_route@16 main_test_nested_tuples_route@17 main_test_no_args_route@18 main_test_named_tuples_route@19 main_test_arc4_struct_route@20 main_test_resource_encoding_route@21",
      "stack_out": []
    },
    "526": {
      "block": "main_after_if_else@28",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "527": {
      "op": "return",
      "stack_out": []
    },
    "528": {
      "block": "main_test_resource_encoding_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "530": {
      "op": "!",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "531": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "532": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "534": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "535": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%19#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%19#0"
      ]
    },
    "538": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "539": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%20#0",
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0",
        "reinterpret_Encoded(uint64)%20#0"
      ]
    },
    "542": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0",
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%100#0",
        "tmp%101#0"
      ]
    },
    "543": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding",
      "op": "callsub test_resource_encoding",
      "stack_out": []
    },
    "546": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "547": {
      "op": "return",
      "stack_out": []
    },
    "548": {
      "block": "main_test_arc4_struct_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "550": {
      "op": "!",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "551": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "552": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "554": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "555": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%18#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%18#0"
      ]
    },
    "558": {
      "op": "btoi",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "559": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct",
      "op": "callsub test_arc4_struct",
      "stack_out": []
    },
    "562": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "563": {
      "op": "return",
      "stack_out": []
    },
    "564": {
      "block": "main_test_named_tuples_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "566": {
      "op": "!",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "567": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "568": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "570": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "571": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%17#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%17#0"
      ]
    },
    "574": {
      "op": "btoi",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "575": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples",
      "op": "callsub test_named_tuples",
      "stack_out": []
    },
    "578": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "579": {
      "op": "return",
      "stack_out": []
    },
    "580": {
      "block": "main_test_no_args_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "582": {
      "op": "!",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "583": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "584": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "586": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "587": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%16#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%16#0"
      ]
    },
    "590": {
      "op": "btoi",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "591": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args",
      "op": "callsub test_no_args",
      "stack_out": []
    },
    "594": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "595": {
      "op": "return",
      "stack_out": []
    },
    "596": {
      "block": "main_test_nested_tuples_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "598": {
      "op": "!",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "599": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "600": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "602": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "603": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%15#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%15#0"
      ]
    },
    "606": {
      "op": "btoi",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "607": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples",
      "op": "callsub test_nested_tuples",
      "stack_out": []
    },
    "610": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "611": {
      "op": "return",
      "stack_out": []
    },
    "612": {
      "block": "main_test_native_tuple_method_ref_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "614": {
      "op": "!",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "615": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "616": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "618": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "619": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%14#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%14#0"
      ]
    },
    "622": {
      "op": "btoi",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "623": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref",
      "op": "callsub test_native_tuple_method_ref",
      "stack_out": []
    },
    "626": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "627": {
      "op": "return",
      "stack_out": []
    },
    "628": {
      "block": "main_test_native_tuple_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "630": {
      "op": "!",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "631": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "632": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "634": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "635": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%13#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%13#0"
      ]
    },
    "638": {
      "op": "btoi",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "639": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple",
      "op": "callsub test_native_tuple",
      "stack_out": []
    },
    "642": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "643": {
      "op": "return",
      "stack_out": []
    },
    "644": {
      "block": "main_test_native_biguint_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "646": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "647": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "648": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "650": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "651": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%12#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%12#0"
      ]
    },
    "654": {
      "op": "btoi",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "655": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint",
      "op": "callsub test_native_biguint",
      "stack_out": []
    },
    "658": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "659": {
      "op": "return",
      "stack_out": []
    },
    "660": {
      "block": "main_test_native_uint64_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "662": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "663": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "664": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "666": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "667": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%11#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%11#0"
      ]
    },
    "670": {
      "op": "btoi",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "671": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64",
      "op": "callsub test_native_uint64",
      "stack_out": []
    },
    "674": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "675": {
      "op": "return",
      "stack_out": []
    },
    "676": {
      "block": "main_test_native_bytes_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "678": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "679": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "680": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "682": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "683": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%10#0"
      ]
    },
    "686": {
      "op": "btoi",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "687": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes",
      "op": "callsub test_native_bytes",
      "stack_out": []
    },
    "690": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "691": {
      "op": "return",
      "stack_out": []
    },
    "692": {
      "block": "main_test_native_string_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "694": {
      "op": "!",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "695": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "696": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "698": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "699": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%9#0"
      ]
    },
    "702": {
      "op": "btoi",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "703": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string",
      "op": "callsub test_native_string",
      "stack_out": []
    },
    "706": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "707": {
      "op": "return",
      "stack_out": []
    },
    "708": {
      "block": "main_test_account_to_address_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "710": {
      "op": "!",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "711": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "712": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "714": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "715": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%8#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%8#0"
      ]
    },
    "718": {
      "op": "btoi",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "719": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address",
      "op": "callsub test_account_to_address",
      "stack_out": []
    },
    "722": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "723": {
      "op": "return",
      "stack_out": []
    },
    "724": {
      "block": "main_test_ref_types_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "726": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "727": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "728": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "730": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "731": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%6#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%6#0"
      ]
    },
    "734": {
      "op": "btoi",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "735": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%7#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "reinterpret_Encoded(uint64)%7#0"
      ]
    },
    "738": {
      "op": "btoi",
      "defined_out": [
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "739": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types",
      "op": "callsub test_ref_types",
      "stack_out": []
    },
    "742": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "743": {
      "op": "return",
      "stack_out": []
    },
    "744": {
      "block": "main_test_void_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "746": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "747": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "748": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "750": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "751": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%5#0"
      ]
    },
    "754": {
      "op": "btoi",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "755": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void",
      "op": "callsub test_void",
      "stack_out": []
    },
    "758": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "759": {
      "op": "return",
      "stack_out": []
    },
    "760": {
      "block": "main_test_15plus_args_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "762": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "763": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "764": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "766": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "767": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "770": {
      "op": "btoi",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "771": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args",
      "op": "callsub test_15plus_args",
      "stack_out": []
    },
    "774": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "775": {
      "op": "return",
      "stack_out": []
    },
    "776": {
      "block": "main_test_arg_conversion_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "778": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "779": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "780": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "782": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "783": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "786": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "787": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion",
      "op": "callsub test_arg_conversion",
      "stack_out": []
    },
    "790": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "791": {
      "op": "return",
      "stack_out": []
    },
    "792": {
      "block": "main_test_method_overload_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "794": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "795": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "796": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "798": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "799": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "802": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "803": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload",
      "op": "callsub test_method_overload",
      "stack_out": []
    },
    "806": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "807": {
      "op": "return",
      "stack_out": []
    },
    "808": {
      "block": "main_test_method_selector_kinds_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "810": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "811": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "812": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "814": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "815": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "818": {
      "op": "btoi",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "819": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds",
      "op": "callsub test_method_selector_kinds",
      "stack_out": []
    },
    "822": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "823": {
      "op": "return",
      "stack_out": []
    },
    "824": {
      "block": "main_test_is_a_b_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "826": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "827": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "828": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "830": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "831": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "834": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "837": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "840": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "843": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "846": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "847": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b",
      "op": "callsub test_is_a_b",
      "stack_out": []
    },
    "850": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "851": {
      "op": "return",
      "stack_out": []
    },
    "852": {
      "block": "main_bare_routing@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "854": {
      "op": "bnz main_after_if_else@28",
      "stack_out": []
    },
    "857": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "859": {
      "op": "!",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "860": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "861": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "862": {
      "op": "return",
      "stack_out": []
    },
    "863": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_is_a_b",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "866": {
      "op": "itxn_begin"
    },
    "867": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "869": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "870": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "871": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "874": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "876": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "877": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "b#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "b#0 (copy)"
      ]
    },
    "879": {
      "op": "len",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length%1#0"
      ]
    },
    "880": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "881": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "884": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "886": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "887": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "app#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "app#0 (copy)"
      ]
    },
    "889": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "891": {
      "op": "pushbytes 0xc77212bc // method \"is_a_b(byte[],byte[])void\"",
      "defined_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "Method(is_a_b(byte[],byte[])void)"
      ]
    },
    "897": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "899": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "900": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "aggregate%encoded_value%1#0"
      ]
    },
    "902": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "904": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "905": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "907": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "908": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "910": {
      "op": "itxn_submit"
    },
    "911": {
      "retsub": true,
      "op": "retsub"
    },
    "912": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_method_selector_kinds",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "915": {
      "op": "itxn_begin"
    },
    "916": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "918": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "920": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "921": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "923": {
      "op": "pushbytes 0x00057465737431",
      "defined_out": [
        "0x00057465737431"
      ],
      "stack_out": [
        "0x00057465737431"
      ]
    },
    "932": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "934": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "935": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "937": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "938": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "940": {
      "op": "itxn_submit"
    },
    "941": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "943": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "944": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "result#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result#0"
      ]
    },
    "947": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "awst_tmp%0#0"
      ]
    },
    "948": {
      "op": "extract 0 4",
      "defined_out": [
        "result#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%3#0"
      ]
    },
    "951": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "result#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "952": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%4#0"
      ]
    },
    "953": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result#0"
      ]
    },
    "954": {
      "op": "pushbytes 0x000b6563686f3a207465737431",
      "defined_out": [
        "0x000b6563686f3a207465737431",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737431"
      ]
    },
    "969": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "970": {
      "op": "assert",
      "stack_out": []
    },
    "971": {
      "op": "itxn_begin"
    },
    "972": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "974": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "976": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "977": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "979": {
      "op": "pushbytes 0x00057465737432",
      "defined_out": [
        "0x00057465737432"
      ],
      "stack_out": [
        "0x00057465737432"
      ]
    },
    "988": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "990": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "991": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "993": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "994": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "996": {
      "op": "itxn_submit"
    },
    "997": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "999": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "1000": {
      "op": "extract 4 0",
      "stack_out": [
        "awst_tmp%1#0",
        "result#0"
      ]
    },
    "1003": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "awst_tmp%1#0"
      ]
    },
    "1004": {
      "op": "extract 0 4",
      "defined_out": [
        "result#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%9#0"
      ]
    },
    "1007": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "1008": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%10#0"
      ]
    },
    "1009": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result#0"
      ]
    },
    "1010": {
      "op": "pushbytes 0x000b6563686f3a207465737432",
      "defined_out": [
        "0x000b6563686f3a207465737432",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737432"
      ]
    },
    "1025": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1026": {
      "op": "assert",
      "stack_out": []
    },
    "1027": {
      "op": "itxn_begin"
    },
    "1028": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1030": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1032": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1033": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1035": {
      "op": "pushbytes 0x00057465737433",
      "defined_out": [
        "0x00057465737433"
      ],
      "stack_out": [
        "0x00057465737433"
      ]
    },
    "1044": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1046": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1047": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1049": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1050": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1052": {
      "op": "itxn_submit"
    },
    "1053": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "1055": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "1056": {
      "op": "extract 4 0",
      "stack_out": [
        "awst_tmp%2#0",
        "result#0"
      ]
    },
    "1059": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "awst_tmp%2#0"
      ]
    },
    "1060": {
      "op": "extract 0 4",
      "defined_out": [
        "result#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%15#0"
      ]
    },
    "1063": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result#0",
        "tmp%15#0",
        "0x151f7c75"
      ]
    },
    "1064": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%16#0"
      ]
    },
    "1065": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result#0"
      ]
    },
    "1066": {
      "op": "pushbytes 0x000b6563686f3a207465737433",
      "defined_out": [
        "0x000b6563686f3a207465737433",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737433"
      ]
    },
    "1081": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1082": {
      "op": "assert",
      "stack_out": []
    },
    "1083": {
      "op": "itxn_begin"
    },
    "1084": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1086": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1088": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1089": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1091": {
      "op": "pushbytes 0x00057465737434",
      "defined_out": [
        "0x00057465737434"
      ],
      "stack_out": [
        "0x00057465737434"
      ]
    },
    "1100": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1102": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1103": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1105": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1106": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1108": {
      "op": "itxn_submit"
    },
    "1109": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%3#0"
      ]
    },
    "1111": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "1112": {
      "op": "extract 4 0",
      "stack_out": [
        "awst_tmp%3#0",
        "result#0"
      ]
    },
    "1115": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "awst_tmp%3#0"
      ]
    },
    "1116": {
      "op": "extract 0 4",
      "defined_out": [
        "result#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%21#0"
      ]
    },
    "1119": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result#0",
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "1120": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%22#0"
      ]
    },
    "1121": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result#0"
      ]
    },
    "1122": {
      "op": "pushbytes 0x000b6563686f3a207465737434",
      "defined_out": [
        "0x000b6563686f3a207465737434",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737434"
      ]
    },
    "1137": {
      "op": "==",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1138": {
      "op": "assert",
      "stack_out": []
    },
    "1139": {
      "op": "itxn_begin"
    },
    "1140": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1142": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1144": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1145": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1147": {
      "op": "pushbytes 0x00057465737435",
      "defined_out": [
        "0x00057465737435"
      ],
      "stack_out": [
        "0x00057465737435"
      ]
    },
    "1156": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1158": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1159": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1161": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1162": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1164": {
      "op": "itxn_submit"
    },
    "1165": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%4#0"
      ]
    },
    "1167": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ]
    },
    "1168": {
      "op": "extract 4 0",
      "stack_out": [
        "awst_tmp%4#0",
        "result#0"
      ]
    },
    "1171": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "awst_tmp%4#0"
      ]
    },
    "1172": {
      "op": "extract 0 4",
      "defined_out": [
        "result#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%27#0"
      ]
    },
    "1175": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result#0",
        "tmp%27#0",
        "0x151f7c75"
      ]
    },
    "1176": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%28#0"
      ]
    },
    "1177": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result#0"
      ]
    },
    "1178": {
      "op": "pushbytes 0x000b6563686f3a207465737435",
      "defined_out": [
        "0x000b6563686f3a207465737435",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737435"
      ]
    },
    "1193": {
      "op": "==",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1194": {
      "op": "assert",
      "stack_out": []
    },
    "1195": {
      "retsub": true,
      "op": "retsub"
    },
    "1196": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_method_overload",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1199": {
      "op": "itxn_begin"
    },
    "1200": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1202": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1204": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1205": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1207": {
      "op": "pushbytes 0x000e7479706564202b2069676e6f7265",
      "defined_out": [
        "0x000e7479706564202b2069676e6f7265"
      ],
      "stack_out": [
        "0x000e7479706564202b2069676e6f7265"
      ]
    },
    "1225": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1227": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1228": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1230": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1231": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1233": {
      "op": "itxn_submit"
    },
    "1234": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1236": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1239": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "1240": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1241": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "1242": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "1244": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "1245": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "1248": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "awst_tmp%1#0"
      ]
    },
    "1249": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1252": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "1253": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "1254": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1255": {
      "op": "pushbytes 0x00146563686f3a207479706564202b2069676e6f7265",
      "defined_out": [
        "0x00146563686f3a207479706564202b2069676e6f7265",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x00146563686f3a207479706564202b2069676e6f7265"
      ]
    },
    "1279": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1280": {
      "op": "assert",
      "stack_out": []
    },
    "1281": {
      "op": "itxn_begin"
    },
    "1282": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1284": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1286": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1287": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1289": {
      "op": "pushbytes 0x0010756e7479706564202b2069676e6f7265",
      "defined_out": [
        "0x0010756e7479706564202b2069676e6f7265"
      ],
      "stack_out": [
        "0x0010756e7479706564202b2069676e6f7265"
      ]
    },
    "1309": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1311": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1312": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1314": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1315": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1317": {
      "op": "itxn_submit"
    },
    "1318": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "1320": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "1321": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%10#0"
      ]
    },
    "1324": {
      "op": "swap",
      "stack_out": [
        "tmp%10#0",
        "awst_tmp%2#0"
      ]
    },
    "1325": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "1328": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "1329": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "1330": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1331": {
      "op": "pushbytes 0x00166563686f3a20756e7479706564202b2069676e6f7265",
      "defined_out": [
        "0x00166563686f3a20756e7479706564202b2069676e6f7265",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0x00166563686f3a20756e7479706564202b2069676e6f7265"
      ]
    },
    "1357": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1358": {
      "op": "assert",
      "stack_out": []
    },
    "1359": {
      "op": "itxn_begin"
    },
    "1360": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1362": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1364": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1365": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1367": {
      "op": "pushbytes 0x00057475706c65",
      "defined_out": [
        "0x00057475706c65"
      ],
      "stack_out": [
        "0x00057475706c65"
      ]
    },
    "1376": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1378": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1379": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1381": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1382": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1384": {
      "op": "itxn_submit"
    },
    "1385": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%3#0"
      ]
    },
    "1387": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "1388": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "result.0#0"
      ]
    },
    "1391": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "awst_tmp%3#0"
      ]
    },
    "1392": {
      "op": "extract 0 4",
      "defined_out": [
        "result.0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "tmp%17#0"
      ]
    },
    "1395": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result.0#0",
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "1396": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "tmp%18#0"
      ]
    },
    "1397": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result.0#0"
      ]
    },
    "1398": {
      "op": "itxn LastLog",
      "defined_out": [
        "result.0#0",
        "result.1.LastLog#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1.LastLog#0"
      ]
    },
    "1400": {
      "op": "swap",
      "stack_out": [
        "result.1.LastLog#0",
        "result.0#0"
      ]
    },
    "1401": {
      "op": "bytec 24 // 0x000b6563686f3a207475706c65",
      "defined_out": [
        "0x000b6563686f3a207475706c65",
        "result.0#0",
        "result.1.LastLog#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "result.0#0",
        "0x000b6563686f3a207475706c65"
      ]
    },
    "1403": {
      "op": "==",
      "defined_out": [
        "result.1.LastLog#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%20#0"
      ]
    },
    "1404": {
      "op": "assert",
      "stack_out": [
        "result.1.LastLog#0"
      ]
    },
    "1405": {
      "op": "dup",
      "defined_out": [
        "result.1.LastLog#0",
        "result.1.LastLog#0 (copy)"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "result.1.LastLog#0 (copy)"
      ]
    },
    "1406": {
      "op": "extract 4 0",
      "defined_out": [
        "result.1.LastLog#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%21#0"
      ]
    },
    "1409": {
      "op": "swap",
      "stack_out": [
        "tmp%21#0",
        "result.1.LastLog#0"
      ]
    },
    "1410": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "1413": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "0x151f7c75"
      ]
    },
    "1414": {
      "op": "==",
      "defined_out": [
        "tmp%21#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0"
      ]
    },
    "1415": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1416": {
      "op": "bytec 24 // 0x000b6563686f3a207475706c65",
      "stack_out": [
        "tmp%21#0",
        "0x000b6563686f3a207475706c65"
      ]
    },
    "1418": {
      "op": "==",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1419": {
      "op": "assert",
      "stack_out": []
    },
    "1420": {
      "op": "itxn_begin"
    },
    "1421": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1423": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1425": {
      "op": "bytec_2 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1426": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1428": {
      "op": "pushbytes 0x0007756e7479706564",
      "defined_out": [
        "0x0007756e7479706564"
      ],
      "stack_out": [
        "0x0007756e7479706564"
      ]
    },
    "1439": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1441": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1442": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1444": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1445": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1447": {
      "op": "itxn_submit"
    },
    "1448": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0"
      ]
    },
    "1450": {
      "op": "dup",
      "defined_out": [
        "txn_result.LastLog#0",
        "txn_result.LastLog#0 (copy)"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "txn_result.LastLog#0 (copy)"
      ]
    },
    "1451": {
      "op": "extract 4 0",
      "defined_out": [
        "tmp%27#0",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0"
      ]
    },
    "1454": {
      "op": "swap",
      "stack_out": [
        "tmp%27#0",
        "txn_result.LastLog#0"
      ]
    },
    "1455": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "1458": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "0x151f7c75"
      ]
    },
    "1459": {
      "op": "==",
      "defined_out": [
        "tmp%27#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0"
      ]
    },
    "1460": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1461": {
      "op": "pushbytes 0x000d6563686f3a20756e7479706564",
      "defined_out": [
        "0x000d6563686f3a20756e7479706564",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "0x000d6563686f3a20756e7479706564"
      ]
    },
    "1478": {
      "op": "==",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "1479": {
      "op": "assert",
      "stack_out": []
    },
    "1480": {
      "retsub": true,
      "op": "retsub"
    },
    "1481": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_arg_conversion",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1484": {
      "op": "itxn_begin"
    },
    "1485": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1487": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1489": {
      "op": "bytec 9 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)"
      ],
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1491": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1493": {
      "op": "pushbytes 0x000a636f6e76657274656431",
      "defined_out": [
        "0x000a636f6e76657274656431"
      ],
      "stack_out": [
        "0x000a636f6e76657274656431"
      ]
    },
    "1507": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1509": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1510": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1512": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1513": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1515": {
      "op": "itxn_submit"
    },
    "1516": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1518": {
      "op": "pushbytes 0x636f6e76657274656431",
      "defined_out": [
        "0x636f6e76657274656431",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x636f6e76657274656431"
      ]
    },
    "1530": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1531": {
      "op": "assert",
      "stack_out": []
    },
    "1532": {
      "op": "itxn_begin"
    },
    "1533": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1535": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1537": {
      "op": "pushbytes 0x3c1058d9 // method \"log(uint64)void\"",
      "defined_out": [
        "Method(log(uint64)void)"
      ],
      "stack_out": [
        "Method(log(uint64)void)"
      ]
    },
    "1543": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1545": {
      "op": "bytec 25 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002"
      ],
      "stack_out": [
        "0x0000000000000002"
      ]
    },
    "1547": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1549": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1550": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1552": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1553": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1555": {
      "op": "itxn_submit"
    },
    "1556": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1558": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "2"
      ]
    },
    "1559": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0"
      ]
    },
    "1560": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1561": {
      "op": "assert",
      "stack_out": []
    },
    "1562": {
      "op": "itxn_begin"
    },
    "1563": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1565": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1567": {
      "op": "pushbytes 0x6af45930 // method \"log(uint512)void\"",
      "defined_out": [
        "Method(log(uint512)void)"
      ],
      "stack_out": [
        "Method(log(uint512)void)"
      ]
    },
    "1573": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1575": {
      "op": "bytec 26 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"
      ]
    },
    "1577": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1579": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1580": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1582": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1583": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1585": {
      "op": "itxn_submit"
    },
    "1586": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1588": {
      "op": "bytec 26 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
      "stack_out": [
        "txn.LastLog#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"
      ]
    },
    "1590": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1591": {
      "op": "assert",
      "stack_out": []
    },
    "1592": {
      "op": "itxn_begin"
    },
    "1593": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1595": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1597": {
      "op": "pushbytes 0xb500e111 // method \"log(byte[])void\"",
      "defined_out": [
        "Method(log(byte[])void)"
      ],
      "stack_out": [
        "Method(log(byte[])void)"
      ]
    },
    "1603": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1605": {
      "op": "pushbytes 0x000134",
      "defined_out": [
        "0x000134"
      ],
      "stack_out": [
        "0x000134"
      ]
    },
    "1610": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1612": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1613": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1615": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1616": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1618": {
      "op": "itxn_submit"
    },
    "1619": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1621": {
      "op": "pushbytes 0x34",
      "defined_out": [
        "0x34",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x34"
      ]
    },
    "1624": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1625": {
      "op": "assert",
      "stack_out": []
    },
    "1626": {
      "op": "itxn_begin"
    },
    "1627": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1629": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1631": {
      "op": "pushbytes 0x6eed7ec3 // method \"log(bool)void\"",
      "defined_out": [
        "Method(log(bool)void)"
      ],
      "stack_out": [
        "Method(log(bool)void)"
      ]
    },
    "1637": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1639": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "1642": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1644": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1645": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1647": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1648": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1650": {
      "op": "itxn_submit"
    },
    "1651": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1653": {
      "op": "pushbytes 0x54727565",
      "defined_out": [
        "0x54727565",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x54727565"
      ]
    },
    "1659": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1660": {
      "op": "assert",
      "stack_out": []
    },
    "1661": {
      "retsub": true,
      "op": "retsub"
    },
    "1662": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_15plus_args",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1665": {
      "op": "itxn_begin"
    },
    "1666": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1668": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1670": {
      "op": "pushbytes 0xba0b4381 // method \"return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]\"",
      "defined_out": [
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])"
      ],
      "stack_out": [
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])"
      ]
    },
    "1676": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1678": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "1679": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1681": {
      "op": "bytec 25 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002"
      ],
      "stack_out": [
        "0x0000000000000002"
      ]
    },
    "1683": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1685": {
      "op": "bytec 11 // 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003"
      ],
      "stack_out": [
        "0x0000000000000003"
      ]
    },
    "1687": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1689": {
      "op": "pushbytes 0x0000000000000004",
      "defined_out": [
        "0x0000000000000004"
      ],
      "stack_out": [
        "0x0000000000000004"
      ]
    },
    "1699": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1701": {
      "op": "pushbytes 0x0000000000000005",
      "defined_out": [
        "0x0000000000000005"
      ],
      "stack_out": [
        "0x0000000000000005"
      ]
    },
    "1711": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1713": {
      "op": "pushbytes 0x0000000000000006",
      "defined_out": [
        "0x0000000000000006"
      ],
      "stack_out": [
        "0x0000000000000006"
      ]
    },
    "1723": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1725": {
      "op": "pushbytes 0x0000000000000007",
      "defined_out": [
        "0x0000000000000007"
      ],
      "stack_out": [
        "0x0000000000000007"
      ]
    },
    "1735": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1737": {
      "op": "pushbytes 0x0000000000000008",
      "defined_out": [
        "0x0000000000000008"
      ],
      "stack_out": [
        "0x0000000000000008"
      ]
    },
    "1747": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1749": {
      "op": "pushbytes 0x0000000000000009",
      "defined_out": [
        "0x0000000000000009"
      ],
      "stack_out": [
        "0x0000000000000009"
      ]
    },
    "1759": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1761": {
      "op": "pushbytes 0x000000000000000a",
      "defined_out": [
        "0x000000000000000a"
      ],
      "stack_out": [
        "0x000000000000000a"
      ]
    },
    "1771": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1773": {
      "op": "pushbytes 0x000000000000000b",
      "defined_out": [
        "0x000000000000000b"
      ],
      "stack_out": [
        "0x000000000000000b"
      ]
    },
    "1783": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1785": {
      "op": "pushbytes 0x000000000000000c",
      "defined_out": [
        "0x000000000000000c"
      ],
      "stack_out": [
        "0x000000000000000c"
      ]
    },
    "1795": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1797": {
      "op": "pushbytes 0x000000000000000d",
      "defined_out": [
        "0x000000000000000d"
      ],
      "stack_out": [
        "0x000000000000000d"
      ]
    },
    "1807": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1809": {
      "op": "pushbytes 0x000000000000000e",
      "defined_out": [
        "0x000000000000000e"
      ],
      "stack_out": [
        "0x000000000000000e"
      ]
    },
    "1819": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1821": {
      "op": "bytec 27 // 0x0f101112deadbeef14",
      "defined_out": [
        "0x0f101112deadbeef14"
      ],
      "stack_out": [
        "0x0f101112deadbeef14"
      ]
    },
    "1823": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1825": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1826": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1828": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1829": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1831": {
      "op": "itxn_submit"
    },
    "1832": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1834": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "1835": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1838": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "1839": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "1840": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1841": {
      "op": "extract 6 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1844": {
      "op": "bytec 27 // 0x0f101112deadbeef14",
      "stack_out": [
        "tmp%5#0",
        "0x0f101112deadbeef14"
      ]
    },
    "1846": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1847": {
      "op": "assert",
      "stack_out": []
    },
    "1848": {
      "retsub": true,
      "op": "retsub"
    },
    "1849": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_void",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1852": {
      "op": "itxn_begin"
    },
    "1853": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1855": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1857": {
      "op": "bytec 9 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)"
      ],
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1859": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1861": {
      "op": "pushbytes 0x0006576f726c6431",
      "defined_out": [
        "0x0006576f726c6431"
      ],
      "stack_out": [
        "0x0006576f726c6431"
      ]
    },
    "1871": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1873": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1874": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1876": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1877": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1879": {
      "op": "itxn_submit"
    },
    "1880": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1882": {
      "op": "pushbytes 0x576f726c6431",
      "defined_out": [
        "0x576f726c6431",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6431"
      ]
    },
    "1890": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1891": {
      "op": "assert",
      "stack_out": []
    },
    "1892": {
      "op": "itxn_begin"
    },
    "1893": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1895": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1897": {
      "op": "bytec 9 // method \"log(string)void\"",
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1899": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1901": {
      "op": "pushbytes 0x0006576f726c6432",
      "defined_out": [
        "0x0006576f726c6432"
      ],
      "stack_out": [
        "0x0006576f726c6432"
      ]
    },
    "1911": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1913": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1914": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1916": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1917": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1919": {
      "op": "itxn_submit"
    },
    "1920": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1922": {
      "op": "pushbytes 0x576f726c6432",
      "defined_out": [
        "0x576f726c6432",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6432"
      ]
    },
    "1930": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1931": {
      "op": "assert",
      "stack_out": []
    },
    "1932": {
      "op": "itxn_begin"
    },
    "1933": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1935": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1937": {
      "op": "bytec 9 // method \"log(string)void\"",
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1939": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1941": {
      "op": "pushbytes 0x0006576f726c6433",
      "defined_out": [
        "0x0006576f726c6433"
      ],
      "stack_out": [
        "0x0006576f726c6433"
      ]
    },
    "1951": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1953": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1954": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1956": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1957": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1959": {
      "op": "itxn_submit"
    },
    "1960": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1962": {
      "op": "pushbytes 0x576f726c6433",
      "defined_out": [
        "0x576f726c6433",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6433"
      ]
    },
    "1970": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1971": {
      "op": "assert",
      "stack_out": []
    },
    "1972": {
      "op": "itxn_begin"
    },
    "1973": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1975": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1977": {
      "op": "bytec 9 // method \"log(string)void\"",
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1979": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1981": {
      "op": "pushbytes 0x0006576f726c6434",
      "defined_out": [
        "0x0006576f726c6434"
      ],
      "stack_out": [
        "0x0006576f726c6434"
      ]
    },
    "1991": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1993": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "1994": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1996": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1997": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1999": {
      "op": "itxn_submit"
    },
    "2000": {
      "op": "itxn LastLog",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2002": {
      "op": "pushbytes 0x576f726c6434",
      "defined_out": [
        "0x576f726c6434",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6434"
      ]
    },
    "2010": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2011": {
      "op": "assert",
      "stack_out": []
    },
    "2012": {
      "retsub": true,
      "op": "retsub"
    },
    "2013": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types",
      "params": {
        "app#0": "uint64",
        "asset#0": "uint64"
      },
      "block": "test_ref_types",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2016": {
      "op": "itxn_begin"
    },
    "2017": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "2019": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2020": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%1#0"
      ]
    },
    "2022": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "app#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%1#0",
        "app#0 (copy)"
      ]
    },
    "2024": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%1#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "2025": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%1#0",
        "aggregate%val_as_bytes%1#0",
        "app#0 (copy)"
      ]
    },
    "2027": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%1#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "2029": {
      "op": "pushbytes 0x46b50faf // method \"log(uint64,address,uint64)void\"",
      "defined_out": [
        "Method(log(uint64,address,uint64)void)",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%1#0",
        "aggregate%val_as_bytes%1#0",
        "Method(log(uint64,address,uint64)void)"
      ]
    },
    "2035": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%1#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "2037": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2039": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%1#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "2041": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%1#0",
        "tmp%1#0"
      ]
    },
    "2042": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "2044": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2046": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2047": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2049": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2050": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2052": {
      "op": "itxn_submit"
    },
    "2053": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2055": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn.LastLog#0",
        "asset#0 (copy)"
      ]
    },
    "2057": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "check%0#0",
        "txn.LastLog#0",
        "value%0#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "2059": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "txn.LastLog#0",
        "value%0#0"
      ]
    },
    "2060": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0",
        "txn.LastLog#0",
        "value%0#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "value%0#0",
        "tmp%4#0"
      ]
    },
    "2062": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%5#0"
      ]
    },
    "2063": {
      "op": "frame_dig -2",
      "stack_out": [
        "txn.LastLog#0",
        "tmp%5#0",
        "app#0 (copy)"
      ]
    },
    "2065": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "tmp%5#0",
        "txn.LastLog#0",
        "value%1#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%5#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "2067": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "txn.LastLog#0",
        "tmp%5#0",
        "value%1#0"
      ]
    },
    "2068": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%6#0"
      ]
    },
    "2069": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2070": {
      "op": "assert",
      "stack_out": []
    },
    "2071": {
      "retsub": true,
      "op": "retsub"
    },
    "2072": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_account_to_address",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2075": {
      "op": "itxn_begin"
    },
    "2076": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2078": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "app#0 (copy)"
      ]
    },
    "2080": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2082": {
      "op": "pushbytes 0x0437b17e // method \"log(address)void\"",
      "defined_out": [
        "Method(log(address)void)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "Method(log(address)void)"
      ]
    },
    "2088": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2090": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2092": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2093": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2095": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2096": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2098": {
      "op": "itxn_submit"
    },
    "2099": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2101": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0"
      ]
    },
    "2103": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2104": {
      "op": "assert",
      "stack_out": []
    },
    "2105": {
      "retsub": true,
      "op": "retsub"
    },
    "2106": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_string",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2109": {
      "op": "itxn_begin"
    },
    "2110": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "2112": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2114": {
      "op": "bytec 12 // method \"echo_native_string(string)string\"",
      "defined_out": [
        "Method(echo_native_string(string)string)"
      ],
      "stack_out": [
        "Method(echo_native_string(string)string)"
      ]
    },
    "2116": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2118": {
      "op": "bytec 13 // 0x000173",
      "defined_out": [
        "0x000173"
      ],
      "stack_out": [
        "0x000173"
      ]
    },
    "2120": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2122": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2123": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2125": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2126": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2128": {
      "op": "itxn_submit"
    },
    "2129": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2131": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2132": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2135": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "2136": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2137": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2138": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0"
      ]
    },
    "2141": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2142": {
      "op": "pushbytes \"echo: s\"",
      "defined_out": [
        "\"echo: s\"",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)",
        "\"echo: s\""
      ]
    },
    "2151": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0"
      ]
    },
    "2152": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2153": {
      "op": "itxn_begin"
    },
    "2154": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2156": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2158": {
      "op": "bytec 12 // method \"echo_native_string(string)string\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_string(string)string)"
      ]
    },
    "2160": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2162": {
      "op": "bytec 13 // 0x000173",
      "stack_out": [
        "result1#0",
        "0x000173"
      ]
    },
    "2164": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2166": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2167": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2169": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2170": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2172": {
      "op": "itxn_submit"
    },
    "2173": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2175": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2176": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "2179": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "2180": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%9#0"
      ]
    },
    "2181": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2182": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2185": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2187": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%11#0"
      ]
    },
    "2188": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2189": {
      "op": "itxn_begin"
    },
    "2190": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2192": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2194": {
      "op": "bytec 12 // method \"echo_native_string(string)string\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_string(string)string)"
      ]
    },
    "2196": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2198": {
      "op": "bytec 13 // 0x000173",
      "stack_out": [
        "result1#0",
        "0x000173"
      ]
    },
    "2200": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2202": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2203": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2205": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2206": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2208": {
      "op": "itxn_submit"
    },
    "2209": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2211": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2212": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%14#0"
      ]
    },
    "2215": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "2216": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%15#0"
      ]
    },
    "2217": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2218": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2221": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "2222": {
      "op": "assert",
      "stack_out": []
    },
    "2223": {
      "retsub": true,
      "op": "retsub"
    },
    "2224": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_bytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2227": {
      "op": "itxn_begin"
    },
    "2228": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "2230": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2232": {
      "op": "bytec 14 // method \"echo_native_bytes(byte[])byte[]\"",
      "defined_out": [
        "Method(echo_native_bytes(byte[])byte[])"
      ],
      "stack_out": [
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "2234": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2236": {
      "op": "bytec 15 // 0x000162",
      "defined_out": [
        "0x000162"
      ],
      "stack_out": [
        "0x000162"
      ]
    },
    "2238": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2240": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2241": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2243": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2244": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2246": {
      "op": "itxn_submit"
    },
    "2247": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2249": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2250": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2253": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "2254": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2255": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2256": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0"
      ]
    },
    "2259": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2260": {
      "op": "pushbytes 0x6563686f3a2062",
      "defined_out": [
        "0x6563686f3a2062",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)",
        "0x6563686f3a2062"
      ]
    },
    "2269": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0"
      ]
    },
    "2270": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2271": {
      "op": "itxn_begin"
    },
    "2272": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2274": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2276": {
      "op": "bytec 14 // method \"echo_native_bytes(byte[])byte[]\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "2278": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2280": {
      "op": "bytec 15 // 0x000162",
      "stack_out": [
        "result1#0",
        "0x000162"
      ]
    },
    "2282": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2284": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2285": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2287": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2288": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2290": {
      "op": "itxn_submit"
    },
    "2291": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2293": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2294": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "2297": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "2298": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%9#0"
      ]
    },
    "2299": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2300": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2303": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2305": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%11#0"
      ]
    },
    "2306": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2307": {
      "op": "itxn_begin"
    },
    "2308": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2310": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2312": {
      "op": "bytec 14 // method \"echo_native_bytes(byte[])byte[]\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "2314": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2316": {
      "op": "bytec 15 // 0x000162",
      "stack_out": [
        "result1#0",
        "0x000162"
      ]
    },
    "2318": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2320": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2321": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2323": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2324": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2326": {
      "op": "itxn_submit"
    },
    "2327": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2329": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2330": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%14#0"
      ]
    },
    "2333": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "2334": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%15#0"
      ]
    },
    "2335": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2336": {
      "op": "extract 6 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2339": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "2340": {
      "op": "assert",
      "stack_out": []
    },
    "2341": {
      "retsub": true,
      "op": "retsub"
    },
    "2342": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_uint64",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2345": {
      "op": "itxn_begin"
    },
    "2346": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "2348": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2350": {
      "op": "bytec 16 // method \"echo_native_uint64(uint64)uint64\"",
      "defined_out": [
        "Method(echo_native_uint64(uint64)uint64)"
      ],
      "stack_out": [
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "2352": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2354": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "2355": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2357": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2358": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2360": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2361": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2363": {
      "op": "itxn_submit"
    },
    "2364": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2366": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2367": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2370": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2371": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2374": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2375": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2376": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2377": {
      "op": "btoi",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0"
      ]
    },
    "2378": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2379": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "2380": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0"
      ]
    },
    "2381": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2382": {
      "op": "itxn_begin"
    },
    "2383": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "1"
      ]
    },
    "2384": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2385": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "aggregate%val_as_bytes%0#0",
        "app#0 (copy)"
      ]
    },
    "2387": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2389": {
      "op": "bytec 16 // method \"echo_native_uint64(uint64)uint64\"",
      "stack_out": [
        "result1#0",
        "aggregate%val_as_bytes%0#0",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "2391": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2393": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2395": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2396": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2398": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2399": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2401": {
      "op": "itxn_submit"
    },
    "2402": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2404": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2405": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0"
      ]
    },
    "2408": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%6#0",
        "awst_tmp%1#0"
      ]
    },
    "2409": {
      "op": "extract 0 4",
      "defined_out": [
        "result1#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "2412": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "tmp%6#0",
        "tmp%7#0",
        "0x151f7c75"
      ]
    },
    "2413": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "2414": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "tmp%6#0"
      ]
    },
    "2415": {
      "op": "btoi",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2416": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2418": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0"
      ]
    },
    "2419": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2420": {
      "op": "itxn_begin"
    },
    "2421": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2423": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2425": {
      "op": "bytec 16 // method \"echo_native_uint64(uint64)uint64\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "2427": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2429": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "result1#0",
        "0x0000000000000001"
      ]
    },
    "2430": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2432": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2433": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2435": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2436": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2438": {
      "op": "itxn_submit"
    },
    "2439": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2441": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2442": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0"
      ]
    },
    "2445": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%11#0",
        "awst_tmp%2#0"
      ]
    },
    "2446": {
      "op": "extract 0 4",
      "defined_out": [
        "result1#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "2449": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "tmp%11#0",
        "tmp%12#0",
        "0x151f7c75"
      ]
    },
    "2450": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2451": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "tmp%11#0"
      ]
    },
    "2452": {
      "op": "btoi",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2453": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "2454": {
      "op": "assert",
      "stack_out": []
    },
    "2455": {
      "retsub": true,
      "op": "retsub"
    },
    "2456": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_biguint",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2459": {
      "op": "itxn_begin"
    },
    "2460": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "2462": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2464": {
      "op": "bytec 17 // method \"echo_native_biguint(uint512)uint512\"",
      "defined_out": [
        "Method(echo_native_biguint(uint512)uint512)"
      ],
      "stack_out": [
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "2466": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2468": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2469": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2471": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2472": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2474": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2475": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2477": {
      "op": "itxn_submit"
    },
    "2478": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2480": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2481": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "result1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0"
      ]
    },
    "2484": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0"
      ]
    },
    "2485": {
      "op": "extract 0 4",
      "defined_out": [
        "result1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%1#0"
      ]
    },
    "2488": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "result1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2489": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%2#0"
      ]
    },
    "2490": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0"
      ]
    },
    "2491": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2492": {
      "op": "bytec 18 // 0x03",
      "defined_out": [
        "0x03",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0 (copy)",
        "0x03"
      ]
    },
    "2494": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0"
      ]
    },
    "2495": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2496": {
      "op": "itxn_begin"
    },
    "2497": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2499": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2501": {
      "op": "bytec 17 // method \"echo_native_biguint(uint512)uint512\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "2503": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2505": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2506": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2508": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2509": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2511": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2512": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2514": {
      "op": "itxn_submit"
    },
    "2515": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2517": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2518": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "result2#0"
      ]
    },
    "2521": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "result2#0",
        "awst_tmp%1#0"
      ]
    },
    "2522": {
      "op": "extract 0 4",
      "defined_out": [
        "result1#0",
        "result2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "tmp%7#0"
      ]
    },
    "2525": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "result2#0",
        "tmp%7#0",
        "0x151f7c75"
      ]
    },
    "2526": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "result2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "tmp%8#0"
      ]
    },
    "2527": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2528": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2530": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0"
      ]
    },
    "2531": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2532": {
      "op": "itxn_begin"
    },
    "2533": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "app#0 (copy)"
      ]
    },
    "2535": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2537": {
      "op": "bytec 17 // method \"echo_native_biguint(uint512)uint512\"",
      "stack_out": [
        "result1#0",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "2539": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2541": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2542": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2544": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2545": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2547": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2548": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2550": {
      "op": "itxn_submit"
    },
    "2551": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2553": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2554": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "result3#0"
      ]
    },
    "2557": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "result3#0",
        "awst_tmp%2#0"
      ]
    },
    "2558": {
      "op": "extract 0 4",
      "defined_out": [
        "result1#0",
        "result3#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "tmp%12#0"
      ]
    },
    "2561": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "result3#0",
        "tmp%12#0",
        "0x151f7c75"
      ]
    },
    "2562": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "result3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "tmp%13#0"
      ]
    },
    "2563": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2564": {
      "op": "b==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "2565": {
      "op": "assert",
      "stack_out": []
    },
    "2566": {
      "retsub": true,
      "op": "retsub"
    },
    "2567": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_tuple",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2570": {
      "op": "itxn_begin"
    },
    "2571": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "2573": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2575": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ],
      "stack_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2577": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2579": {
      "op": "bytec 5 // 0x00027331",
      "defined_out": [
        "0x00027331"
      ],
      "stack_out": [
        "0x00027331"
      ]
    },
    "2581": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2583": {
      "op": "bytec 6 // 0x00026231",
      "defined_out": [
        "0x00026231"
      ],
      "stack_out": [
        "0x00026231"
      ]
    },
    "2585": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2587": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "2588": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2590": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2591": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2593": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2594": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2596": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2597": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2599": {
      "op": "itxn_submit"
    },
    "2600": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2602": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2603": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "result1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0"
      ]
    },
    "2606": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2608": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "result1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "tmp%3#0"
      ]
    },
    "2611": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "result1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "2612": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "tmp%4#0"
      ]
    },
    "2613": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0"
      ]
    },
    "2614": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2615": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "result1#0 (copy)",
        "0"
      ]
    },
    "2616": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "awst_tmp%0#0",
        "result1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "2617": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%0#0",
        "result1#0 (copy)"
      ]
    },
    "2619": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "awst_tmp%0#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%0#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "2620": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "awst_tmp%0#0",
        "result1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "2621": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "result1#0 (copy)"
      ]
    },
    "2623": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%1#0",
        "result1#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "2625": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "awst_tmp%0#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%1#0",
        "result1#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0 (copy)"
      ]
    },
    "2627": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "awst_tmp%0#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%1#0",
        "s#0"
      ]
    },
    "2628": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%1#0",
        "s#0",
        "result1#0 (copy)"
      ]
    },
    "2630": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0",
        "awst_tmp%0#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%1#0",
        "s#0",
        "aggregate%len%0#0"
      ]
    },
    "2631": {
      "op": "dig 3",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "aggregate%extract_uint16%1#0",
        "s#0",
        "aggregate%len%0#0",
        "result1#0 (copy)"
      ]
    },
    "2633": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "aggregate%len%0#0",
        "result1#0 (copy)",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "2635": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "result1#0 (copy)",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0"
      ]
    },
    "2637": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%0#0",
        "b#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "b#0"
      ]
    },
    "2638": {
      "op": "dig 3",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "b#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2640": {
      "op": "extract 16 64",
      "defined_out": [
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "s#0",
        "b#0",
        "bu#0"
      ]
    },
    "2643": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "s#0"
      ]
    },
    "2645": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%9#0"
      ]
    },
    "2648": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "2649": {
      "op": "bytec 10 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%9#0",
        "tmp%9#0 (copy)",
        "\"echo: s1\""
      ]
    },
    "2651": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "2652": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "b#0",
        "bu#0",
        "tmp%9#0"
      ]
    },
    "2653": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "b#0"
      ]
    },
    "2655": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%0#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "2658": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%11#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "2659": {
      "op": "bytec 28 // 0x6563686f3a206231",
      "defined_out": [
        "0x6563686f3a206231",
        "awst_tmp%0#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%11#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%11#0 (copy)",
        "0x6563686f3a206231"
      ]
    },
    "2661": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "2662": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0",
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "2663": {
      "op": "uncover 4",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "awst_tmp%0#0"
      ]
    },
    "2665": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "awst_tmp%0#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "awst_tmp%0#0",
        "8"
      ]
    },
    "2667": {
      "op": "extract_uint64",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2668": {
      "op": "dup",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "2669": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "2"
      ]
    },
    "2670": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "2671": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2672": {
      "op": "dig 3",
      "defined_out": [
        "bu#0",
        "bu#0 (copy)",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "bu#0 (copy)"
      ]
    },
    "2674": {
      "op": "bytec 18 // 0x03",
      "defined_out": [
        "0x03",
        "bu#0",
        "bu#0 (copy)",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "bu#0 (copy)",
        "0x03"
      ]
    },
    "2676": {
      "op": "b==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "2677": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2678": {
      "op": "itxn_begin"
    },
    "2679": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "1"
      ]
    },
    "2680": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2681": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "aggregate%val_as_bytes%0#0",
        "app#0 (copy)"
      ]
    },
    "2683": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2685": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "aggregate%val_as_bytes%0#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2687": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2689": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "aggregate%val_as_bytes%0#0",
        "0x00027331"
      ]
    },
    "2691": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2693": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "aggregate%val_as_bytes%0#0",
        "0x00026231"
      ]
    },
    "2695": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2697": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2699": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2700": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2702": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "appl"
      ]
    },
    "2703": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2705": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0"
      ]
    },
    "2706": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2708": {
      "op": "itxn_submit"
    },
    "2709": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%1#0"
      ]
    },
    "2711": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2712": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "bu#0",
        "result1#0",
        "result2#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%1#0",
        "result2#0"
      ]
    },
    "2715": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result2#0",
        "awst_tmp%1#0"
      ]
    },
    "2716": {
      "op": "extract 0 4",
      "defined_out": [
        "bu#0",
        "result1#0",
        "result2#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%22#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result2#0",
        "tmp%22#0"
      ]
    },
    "2719": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result2#0",
        "tmp%22#0",
        "0x151f7c75"
      ]
    },
    "2720": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "result2#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%23#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result2#0",
        "tmp%23#0"
      ]
    },
    "2721": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result2#0"
      ]
    },
    "2722": {
      "op": "dig 5",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result2#0",
        "result1#0 (copy)"
      ]
    },
    "2724": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%24#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%24#0"
      ]
    },
    "2725": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2726": {
      "op": "itxn_begin"
    },
    "2727": {
      "op": "frame_dig -1",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "app#0 (copy)"
      ]
    },
    "2729": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2731": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2733": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2735": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0x00027331"
      ]
    },
    "2737": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2739": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0x00026231"
      ]
    },
    "2741": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2743": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0x0000000000000001"
      ]
    },
    "2744": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2746": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2747": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2749": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "appl"
      ]
    },
    "2750": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2752": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0"
      ]
    },
    "2753": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2755": {
      "op": "itxn_submit"
    },
    "2756": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%2#0"
      ]
    },
    "2758": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2759": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "bu#0",
        "result1#0",
        "result3#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%2#0",
        "result3#0"
      ]
    },
    "2762": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result3#0",
        "awst_tmp%2#0"
      ]
    },
    "2763": {
      "op": "extract 0 4",
      "defined_out": [
        "bu#0",
        "result1#0",
        "result3#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%28#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result3#0",
        "tmp%28#0"
      ]
    },
    "2766": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result3#0",
        "tmp%28#0",
        "0x151f7c75"
      ]
    },
    "2767": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "result3#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%29#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result3#0",
        "tmp%29#0"
      ]
    },
    "2768": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result3#0"
      ]
    },
    "2769": {
      "op": "uncover 5",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result3#0",
        "result1#0"
      ]
    },
    "2771": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%30#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%30#0"
      ]
    },
    "2772": {
      "op": "assert",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2773": {
      "op": "itxn_begin"
    },
    "2774": {
      "op": "frame_dig -1",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "app#0 (copy)"
      ]
    },
    "2776": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2778": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2780": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2782": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0x00027331"
      ]
    },
    "2784": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2786": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0x00026231"
      ]
    },
    "2788": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2790": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0x0000000000000001"
      ]
    },
    "2791": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2793": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2794": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2796": {
      "op": "intc_1 // appl",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "appl"
      ]
    },
    "2797": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2799": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "0"
      ]
    },
    "2800": {
      "op": "itxn_field Fee",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2802": {
      "op": "itxn_submit"
    },
    "2803": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0"
      ]
    },
    "2805": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "2806": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0"
      ]
    },
    "2809": {
      "op": "dig 1",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "2811": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "2814": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "tmp%34#0",
        "0x151f7c75"
      ]
    },
    "2815": {
      "op": "==",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%35#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "tmp%35#0"
      ]
    },
    "2816": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0"
      ]
    },
    "2817": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%33#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "tmp%33#0 (copy)"
      ]
    },
    "2818": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "tmp%33#0 (copy)",
        "0"
      ]
    },
    "2819": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "awst_tmp%3#0",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "2820": {
      "op": "dig 1",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%3#0",
        "tmp%33#0 (copy)"
      ]
    },
    "2822": {
      "op": "intc_3 // 2",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%3#0",
        "tmp%33#0 (copy)",
        "2"
      ]
    },
    "2823": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "awst_tmp%3#0",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "2824": {
      "op": "dig 2",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "tmp%33#0 (copy)"
      ]
    },
    "2826": {
      "op": "uncover 2",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%4#0",
        "tmp%33#0 (copy)",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "2828": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%extract_uint16%4#0 (copy)",
        "awst_tmp%3#0",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%33#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%4#0",
        "tmp%33#0 (copy)",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0 (copy)"
      ]
    },
    "2830": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%2#0",
        "awst_tmp%3#0",
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%2#0"
      ]
    },
    "2831": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "awst_tmp%3#0",
        "bu#0",
        "result_native.0#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%4#0",
        "result_native.0#0"
      ]
    },
    "2834": {
      "op": "dig 2",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%4#0",
        "result_native.0#0",
        "tmp%33#0 (copy)"
      ]
    },
    "2836": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "aggregate%len%1#0",
        "awst_tmp%3#0",
        "bu#0",
        "result_native.0#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%33#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "tmp%33#0",
        "aggregate%extract_uint16%4#0",
        "result_native.0#0",
        "aggregate%len%1#0"
      ]
    },
    "2837": {
      "op": "uncover 3",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "aggregate%extract_uint16%4#0",
        "result_native.0#0",
        "aggregate%len%1#0",
        "tmp%33#0"
      ]
    },
    "2839": {
      "op": "uncover 3",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "aggregate%len%1#0",
        "tmp%33#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "2841": {
      "op": "uncover 2",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "tmp%33#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%1#0"
      ]
    },
    "2843": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%3#0",
        "awst_tmp%3#0",
        "bu#0",
        "result_native.0#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "aggregate%substring3%3#0"
      ]
    },
    "2844": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "result_native.0#0",
        "result_native.1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0"
      ]
    },
    "2847": {
      "op": "dig 2",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "2849": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "awst_tmp%3#0 (copy)",
        "8"
      ]
    },
    "2851": {
      "op": "extract_uint64",
      "defined_out": [
        "awst_tmp%3#0",
        "bu#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0"
      ]
    },
    "2852": {
      "op": "uncover 3",
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "awst_tmp%3#0"
      ]
    },
    "2854": {
      "op": "extract 16 64",
      "defined_out": [
        "bu#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ]
    },
    "2857": {
      "op": "uncover 6",
      "stack_out": [
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%9#0"
      ]
    },
    "2859": {
      "op": "uncover 4",
      "stack_out": [
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%9#0",
        "result_native.0#0"
      ]
    },
    "2861": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%45#0"
      ]
    },
    "2862": {
      "op": "assert",
      "stack_out": [
        "bu#0",
        "tmp%11#0",
        "tmp%13#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ]
    },
    "2863": {
      "op": "uncover 4",
      "stack_out": [
        "bu#0",
        "tmp%13#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%11#0"
      ]
    },
    "2865": {
      "op": "uncover 3",
      "stack_out": [
        "bu#0",
        "tmp%13#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%11#0",
        "result_native.1#0"
      ]
    },
    "2867": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%13#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%13#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%51#0"
      ]
    },
    "2868": {
      "op": "assert",
      "stack_out": [
        "bu#0",
        "tmp%13#0",
        "result_native.2#0",
        "result_native.3#0"
      ]
    },
    "2869": {
      "op": "cover 2",
      "stack_out": [
        "bu#0",
        "result_native.3#0",
        "tmp%13#0",
        "result_native.2#0"
      ]
    },
    "2871": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result_native.3#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "bu#0",
        "result_native.3#0",
        "tmp%57#0"
      ]
    },
    "2872": {
      "op": "assert",
      "stack_out": [
        "bu#0",
        "result_native.3#0"
      ]
    },
    "2873": {
      "op": "b==",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "2874": {
      "op": "assert",
      "stack_out": []
    },
    "2875": {
      "retsub": true,
      "op": "retsub"
    },
    "2876": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_tuple_method_ref",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2879": {
      "op": "itxn_begin"
    },
    "2880": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "2882": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2884": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ],
      "stack_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2886": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2888": {
      "op": "bytec 5 // 0x00027331",
      "defined_out": [
        "0x00027331"
      ],
      "stack_out": [
        "0x00027331"
      ]
    },
    "2890": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2892": {
      "op": "bytec 6 // 0x00026231",
      "defined_out": [
        "0x00026231"
      ],
      "stack_out": [
        "0x00026231"
      ]
    },
    "2894": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2896": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "2897": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2899": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2900": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2902": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2903": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2905": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2906": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2908": {
      "op": "itxn_submit"
    },
    "2909": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2911": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2912": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2915": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2917": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2920": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "2921": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "2922": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2923": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2924": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "2925": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "2926": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%0#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2928": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%0#0",
        "tmp%2#0 (copy)",
        "2"
      ]
    },
    "2929": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "2930": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2932": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0",
        "tmp%2#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "2934": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0",
        "tmp%2#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0 (copy)"
      ]
    },
    "2936": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0"
      ]
    },
    "2937": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "awst_tmp%0#0",
        "result.0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0",
        "result.0#0"
      ]
    },
    "2940": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0",
        "result.0#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2942": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0",
        "awst_tmp%0#0",
        "result.0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0",
        "result.0#0",
        "aggregate%len%0#0"
      ]
    },
    "2943": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "result.0#0",
        "aggregate%len%0#0",
        "tmp%2#0"
      ]
    },
    "2945": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "aggregate%len%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "2947": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0"
      ]
    },
    "2949": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%1#0",
        "awst_tmp%0#0",
        "result.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "aggregate%substring3%1#0"
      ]
    },
    "2950": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0"
      ]
    },
    "2953": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2955": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "result.0#0",
        "result.1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%0#0 (copy)",
        "8"
      ]
    },
    "2957": {
      "op": "extract_uint64",
      "defined_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ]
    },
    "2958": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "awst_tmp%0#0"
      ]
    },
    "2960": {
      "op": "extract 16 64",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2963": {
      "op": "dig 3",
      "defined_out": [
        "result.0#0",
        "result.0#0 (copy)",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.0#0 (copy)"
      ]
    },
    "2965": {
      "op": "bytec 10 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "result.0#0",
        "result.0#0 (copy)",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.0#0 (copy)",
        "\"echo: s1\""
      ]
    },
    "2967": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%9#0"
      ]
    },
    "2968": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2969": {
      "op": "dig 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.1#0 (copy)",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.1#0 (copy)"
      ]
    },
    "2971": {
      "op": "bytec 28 // 0x6563686f3a206231",
      "defined_out": [
        "0x6563686f3a206231",
        "result.0#0",
        "result.1#0",
        "result.1#0 (copy)",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.1#0 (copy)",
        "0x6563686f3a206231"
      ]
    },
    "2973": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%10#0"
      ]
    },
    "2974": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2975": {
      "op": "dig 1",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.2#0 (copy)",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.2#0 (copy)"
      ]
    },
    "2977": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.2#0 (copy)",
        "2"
      ]
    },
    "2978": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%11#0"
      ]
    },
    "2979": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2980": {
      "op": "dup",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)"
      ]
    },
    "2981": {
      "op": "bytec 18 // 0x03",
      "defined_out": [
        "0x03",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)",
        "0x03"
      ]
    },
    "2983": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%12#0"
      ]
    },
    "2984": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "2985": {
      "op": "itxn_begin"
    },
    "2986": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "1"
      ]
    },
    "2987": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2988": {
      "op": "frame_dig -1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "aggregate%val_as_bytes%0#0",
        "app#0 (copy)"
      ]
    },
    "2990": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2992": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "aggregate%val_as_bytes%0#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2994": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2996": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "aggregate%val_as_bytes%0#0",
        "0x00027331"
      ]
    },
    "2998": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "3000": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "aggregate%val_as_bytes%0#0",
        "0x00026231"
      ]
    },
    "3002": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "3004": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3006": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3007": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3009": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "appl"
      ]
    },
    "3010": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3012": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0"
      ]
    },
    "3013": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3015": {
      "op": "itxn_submit"
    },
    "3016": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0"
      ]
    },
    "3018": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3019": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0"
      ]
    },
    "3022": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3024": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "3027": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "3028": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "3029": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0"
      ]
    },
    "3030": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ]
    },
    "3031": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "0"
      ]
    },
    "3032": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "3033": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%3#0",
        "tmp%17#0 (copy)"
      ]
    },
    "3035": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%3#0",
        "tmp%17#0 (copy)",
        "2"
      ]
    },
    "3036": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "3037": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "tmp%17#0 (copy)"
      ]
    },
    "3039": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%4#0",
        "tmp%17#0 (copy)",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "3041": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%extract_uint16%4#0 (copy)",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%4#0",
        "tmp%17#0 (copy)",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0 (copy)"
      ]
    },
    "3043": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%2#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%2#0"
      ]
    },
    "3044": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%4#0",
        "result_2.0#0"
      ]
    },
    "3047": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%4#0",
        "result_2.0#0",
        "tmp%17#0 (copy)"
      ]
    },
    "3049": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "aggregate%len%1#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%4#0",
        "result_2.0#0",
        "aggregate%len%1#0"
      ]
    },
    "3050": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "aggregate%extract_uint16%4#0",
        "result_2.0#0",
        "aggregate%len%1#0",
        "tmp%17#0"
      ]
    },
    "3052": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "aggregate%len%1#0",
        "tmp%17#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "3054": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "tmp%17#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%1#0"
      ]
    },
    "3056": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%3#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "aggregate%substring3%3#0"
      ]
    },
    "3057": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "result_2.1#0"
      ]
    },
    "3060": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "result_2.1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3062": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "result_2.1#0",
        "awst_tmp%1#0 (copy)",
        "8"
      ]
    },
    "3064": {
      "op": "extract_uint64",
      "defined_out": [
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%1#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0"
      ]
    },
    "3065": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "awst_tmp%1#0"
      ]
    },
    "3067": {
      "op": "extract 16 64",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0"
      ]
    },
    "3070": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "result_2.0#0"
      ]
    },
    "3072": {
      "op": "dig 7",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "result_2.0#0",
        "result.0#0 (copy)"
      ]
    },
    "3074": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%24#0"
      ]
    },
    "3075": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%24#0",
        "result_2.1#0"
      ]
    },
    "3077": {
      "op": "dig 6",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%24#0",
        "result_2.1#0",
        "result.1#0 (copy)"
      ]
    },
    "3079": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "3080": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%26#0"
      ]
    },
    "3081": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%26#0",
        "result_2.2#0"
      ]
    },
    "3083": {
      "op": "dig 4",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%26#0",
        "result_2.2#0",
        "result.2#0 (copy)"
      ]
    },
    "3085": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "3086": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%28#0"
      ]
    },
    "3087": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%28#0",
        "result_2.3#0"
      ]
    },
    "3088": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%28#0",
        "result_2.3#0",
        "result.3#0 (copy)"
      ]
    },
    "3090": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "3091": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%30#0"
      ]
    },
    "3092": {
      "error": "expected native arguments to give the same result",
      "op": "assert // expected native arguments to give the same result",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3093": {
      "op": "itxn_begin"
    },
    "3094": {
      "op": "frame_dig -1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "app#0 (copy)"
      ]
    },
    "3096": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3098": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3100": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3102": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00027331"
      ]
    },
    "3104": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3106": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00026231"
      ]
    },
    "3108": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3110": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x0000000000000001"
      ]
    },
    "3111": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3113": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3114": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3116": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "appl"
      ]
    },
    "3117": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3119": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0"
      ]
    },
    "3120": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3122": {
      "op": "itxn_submit"
    },
    "3123": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0"
      ]
    },
    "3125": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3126": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0"
      ]
    },
    "3129": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3131": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "3134": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "tmp%34#0",
        "0x151f7c75"
      ]
    },
    "3135": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%33#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "tmp%35#0"
      ]
    },
    "3136": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0"
      ]
    },
    "3137": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%33#0",
        "tmp%33#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "tmp%33#0 (copy)"
      ]
    },
    "3138": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "tmp%33#0 (copy)",
        "0"
      ]
    },
    "3139": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%6#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "3140": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%6#0",
        "tmp%33#0 (copy)"
      ]
    },
    "3142": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%6#0",
        "tmp%33#0 (copy)",
        "2"
      ]
    },
    "3143": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%6#0",
        "aggregate%extract_uint16%7#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "3144": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%extract_uint16%7#0",
        "tmp%33#0 (copy)"
      ]
    },
    "3146": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%7#0",
        "tmp%33#0 (copy)",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "3148": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%6#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%7#0 (copy)",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%33#0",
        "tmp%33#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%7#0",
        "tmp%33#0 (copy)",
        "aggregate%extract_uint16%6#0",
        "aggregate%extract_uint16%7#0 (copy)"
      ]
    },
    "3150": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "aggregate%substring3%4#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%substring3%4#0"
      ]
    },
    "3151": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%7#0",
        "result_3.0#0"
      ]
    },
    "3154": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%7#0",
        "result_3.0#0",
        "tmp%33#0 (copy)"
      ]
    },
    "3156": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "aggregate%len%2#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%7#0",
        "result_3.0#0",
        "aggregate%len%2#0"
      ]
    },
    "3157": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "aggregate%extract_uint16%7#0",
        "result_3.0#0",
        "aggregate%len%2#0",
        "tmp%33#0"
      ]
    },
    "3159": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "aggregate%len%2#0",
        "tmp%33#0",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "3161": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "tmp%33#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%len%2#0"
      ]
    },
    "3163": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%5#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "aggregate%substring3%5#0"
      ]
    },
    "3164": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "result_3.1#0"
      ]
    },
    "3167": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "result_3.1#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3169": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "result_3.1#0",
        "awst_tmp%2#0 (copy)",
        "8"
      ]
    },
    "3171": {
      "op": "extract_uint64",
      "defined_out": [
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%2#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0"
      ]
    },
    "3172": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "awst_tmp%2#0"
      ]
    },
    "3174": {
      "op": "extract 16 64",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0"
      ]
    },
    "3177": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "result_3.0#0"
      ]
    },
    "3179": {
      "op": "dig 7",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "result_3.0#0",
        "result.0#0 (copy)"
      ]
    },
    "3181": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%40#0"
      ]
    },
    "3182": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%40#0",
        "result_3.1#0"
      ]
    },
    "3184": {
      "op": "dig 6",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%40#0",
        "result_3.1#0",
        "result.1#0 (copy)"
      ]
    },
    "3186": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "3187": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%42#0"
      ]
    },
    "3188": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%42#0",
        "result_3.2#0"
      ]
    },
    "3190": {
      "op": "dig 4",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%42#0",
        "result_3.2#0",
        "result.2#0 (copy)"
      ]
    },
    "3192": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%42#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%42#0",
        "tmp%43#0"
      ]
    },
    "3193": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%44#0"
      ]
    },
    "3194": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%44#0",
        "result_3.3#0"
      ]
    },
    "3195": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%44#0",
        "result_3.3#0",
        "result.3#0 (copy)"
      ]
    },
    "3197": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%44#0",
        "tmp%45#0"
      ]
    },
    "3198": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%46#0"
      ]
    },
    "3199": {
      "error": "expected arc4 arguments to give the same result",
      "op": "assert // expected arc4 arguments to give the same result",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3200": {
      "op": "itxn_begin"
    },
    "3201": {
      "op": "frame_dig -1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "app#0 (copy)"
      ]
    },
    "3203": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3205": {
      "op": "bytec 4 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3207": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3209": {
      "op": "bytec 5 // 0x00027331",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00027331"
      ]
    },
    "3211": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3213": {
      "op": "bytec 6 // 0x00026231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00026231"
      ]
    },
    "3215": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3217": {
      "op": "bytec_3 // 0x0000000000000001",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x0000000000000001"
      ]
    },
    "3218": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3220": {
      "op": "bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3221": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3223": {
      "op": "intc_1 // appl",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "appl"
      ]
    },
    "3224": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3226": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "0"
      ]
    },
    "3227": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "3229": {
      "op": "itxn_submit"
    },
    "3230": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0"
      ]
    },
    "3232": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3233": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0"
      ]
    },
    "3236": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3238": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "tmp%50#0"
      ]
    },
    "3241": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "tmp%50#0",
        "0x151f7c75"
      ]
    },
    "3242": {
      "op": "==",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%49#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "tmp%51#0"
      ]
    },
    "3243": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0"
      ]
    },
    "3244": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%49#0",
        "tmp%49#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "tmp%49#0 (copy)"
      ]
    },
    "3245": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "tmp%49#0 (copy)",
        "0"
      ]
    },
    "3246": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%9#0",
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "3247": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%9#0",
        "tmp%49#0 (copy)"
      ]
    },
    "3249": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%9#0",
        "tmp%49#0 (copy)",
        "2"
      ]
    },
    "3250": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%9#0",
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "3251": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0",
        "tmp%49#0 (copy)"
      ]
    },
    "3253": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%10#0",
        "tmp%49#0 (copy)",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "3255": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%10#0 (copy)",
        "aggregate%extract_uint16%9#0",
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%49#0",
        "tmp%49#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%10#0",
        "tmp%49#0 (copy)",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0 (copy)"
      ]
    },
    "3257": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%6#0",
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%6#0"
      ]
    },
    "3258": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%10#0",
        "result_native.0#0"
      ]
    },
    "3261": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%10#0",
        "result_native.0#0",
        "tmp%49#0 (copy)"
      ]
    },
    "3263": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%len%3#0",
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%10#0",
        "result_native.0#0",
        "aggregate%len%3#0"
      ]
    },
    "3264": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "aggregate%extract_uint16%10#0",
        "result_native.0#0",
        "aggregate%len%3#0",
        "tmp%49#0"
      ]
    },
    "3266": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "aggregate%len%3#0",
        "tmp%49#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "3268": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "tmp%49#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%len%3#0"
      ]
    },
    "3270": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%7#0",
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "aggregate%substring3%7#0"
      ]
    },
    "3271": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0"
      ]
    },
    "3274": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3276": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "awst_tmp%3#0 (copy)",
        "8"
      ]
    },
    "3278": {
      "op": "extract_uint64",
      "defined_out": [
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "awst_tmp%3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0"
      ]
    },
    "3279": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "awst_tmp%3#0"
      ]
    },
    "3281": {
      "op": "extract 16 64",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ]
    },
    "3284": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "result_native.0#0"
      ]
    },
    "3286": {
      "op": "uncover 7",
      "stack_out": [
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "result_native.0#0",
        "result.0#0"
      ]
    },
    "3288": {
      "op": "==",
      "defined_out": [
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%56#0"
      ]
    },
    "3289": {
      "op": "uncover 3",
      "stack_out": [
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%56#0",
        "result_native.1#0"
      ]
    },
    "3291": {
      "op": "uncover 6",
      "stack_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%56#0",
        "result_native.1#0",
        "result.1#0"
      ]
    },
    "3293": {
      "op": "==",
      "defined_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%56#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%56#0",
        "tmp%57#0"
      ]
    },
    "3294": {
      "op": "&&",
      "defined_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "result.2#0",
        "result.3#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%58#0"
      ]
    },
    "3295": {
      "op": "uncover 2",
      "stack_out": [
        "result.2#0",
        "result.3#0",
        "result_native.3#0",
        "tmp%58#0",
        "result_native.2#0"
      ]
    },
    "3297": {
      "op": "uncover 4",
      "stack_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%58#0",
        "result_native.2#0",
        "result.2#0"
      ]
    },
    "3299": {
      "op": "==",
      "defined_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%58#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%58#0",
        "tmp%59#0"
      ]
    },
    "3300": {
      "op": "&&",
      "defined_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "result.3#0",
        "result_native.3#0",
        "tmp%60#0"
      ]
    },
    "3301": {
      "op": "swap",
      "stack_out": [
        "result.3#0",
        "tmp%60#0",
        "result_native.3#0"
      ]
    },
    "3302": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%60#0",
        "result_native.3#0",
        "result.3#0"
      ]
    },
    "3304": {
      "op": "b==",
      "defined_out": [
        "tmp%60#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "tmp%61#0"
      ]
    },
    "3305": {
      "op": "&&",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "3306": {
      "op": "assert",
      "stack_out": []
    },
    "3307": {
      "retsub": true,
      "op": "retsub"
    },
    "3308": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_nested_tuples",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3311": {
      "op": "itxn_begin"
    },
    "3312": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3314": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3316": {
      "op": "bytec 19 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "defined_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ],
      "stack_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "3318": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3320": {
      "op": "bytec 29 // 0x00040010000400080002733100027332000000000000000100000000000000020012000133",
      "defined_out": [
        "0x00040010000400080002733100027332000000000000000100000000000000020012000133"
      ],
      "stack_out": [
        "0x00040010000400080002733100027332000000000000000100000000000000020012000133"
      ]
    },
    "3322": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3324": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "3325": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3327": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3328": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3330": {
      "op": "itxn_submit"
    },
    "3331": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3333": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3334": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "3337": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "awst_tmp%0#0"
      ]
    },
    "3338": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "3341": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "3342": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "3343": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "3344": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "3345": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "0"
      ]
    },
    "3346": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "3347": {
      "op": "dig 1",
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%0#0",
        "tmp%4#0 (copy)"
      ]
    },
    "3349": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%0#0",
        "tmp%4#0 (copy)",
        "2"
      ]
    },
    "3350": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "3351": {
      "op": "dig 2",
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%4#0 (copy)"
      ]
    },
    "3353": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "tmp%4#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "3355": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "tmp%4#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0 (copy)"
      ]
    },
    "3357": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0"
      ]
    },
    "3358": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "3359": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "0"
      ]
    },
    "3360": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "3361": {
      "op": "dig 1",
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "3363": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0 (copy)",
        "2"
      ]
    },
    "3364": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "3365": {
      "op": "dig 2",
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "3367": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0 (copy)",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "3369": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%3#0 (copy)",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0 (copy)",
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0 (copy)"
      ]
    },
    "3371": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%1#0"
      ]
    },
    "3372": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0",
        "result.0.0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "result.0.0#0"
      ]
    },
    "3375": {
      "op": "dig 2",
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "result.0.0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "3377": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "result.0.0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "result.0.0#0",
        "aggregate%len%0#0"
      ]
    },
    "3378": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%3#0",
        "result.0.0#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "3380": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "result.0.0#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "3382": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "result.0.0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%len%0#0"
      ]
    },
    "3384": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "result.0.0#0",
        "result.0.1#0"
      ]
    },
    "3385": {
      "op": "dig 3",
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%4#0 (copy)"
      ]
    },
    "3387": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%len%1#0"
      ]
    },
    "3388": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%extract_uint16%1#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%len%1#0",
        "tmp%4#0"
      ]
    },
    "3390": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%len%1#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "3392": {
      "op": "uncover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0"
      ]
    },
    "3394": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%3#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0"
      ]
    },
    "3395": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "3396": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "0"
      ]
    },
    "3397": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%substring3%3#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "result.1.0#0"
      ]
    },
    "3398": {
      "op": "dig 1",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "result.1.0#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "3400": {
      "op": "extract 8 8",
      "defined_out": [
        "aggregate%substring3%3#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "result.1.0#0",
        "result.1.1#0"
      ]
    },
    "3403": {
      "op": "dig 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "3405": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%3#0 (copy)",
        "16"
      ]
    },
    "3407": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%6#0",
        "aggregate%substring3%3#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "3408": {
      "op": "dig 3",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "3410": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0",
        "aggregate%substring3%3#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%3#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0"
      ]
    },
    "3411": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0",
        "aggregate%substring3%3#0"
      ]
    },
    "3413": {
      "op": "cover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%3#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0"
      ]
    },
    "3415": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%4#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%4#0"
      ]
    },
    "3416": {
      "op": "extract 2 0",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3419": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0"
      ]
    },
    "3421": {
      "op": "bytec 10 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0",
        "\"echo: s1\""
      ]
    },
    "3423": {
      "op": "==",
      "defined_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%12#0"
      ]
    },
    "3424": {
      "op": "assert",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3425": {
      "op": "uncover 3",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0"
      ]
    },
    "3427": {
      "op": "bytec 30 // 0x00086563686f3a207332",
      "defined_out": [
        "0x00086563686f3a207332",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0",
        "0x00086563686f3a207332"
      ]
    },
    "3429": {
      "op": "==",
      "defined_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%14#0"
      ]
    },
    "3430": {
      "op": "assert",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3431": {
      "op": "uncover 2",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0"
      ]
    },
    "3433": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0",
        "2"
      ]
    },
    "3434": {
      "op": "==",
      "defined_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%15#0"
      ]
    },
    "3435": {
      "op": "assert",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3436": {
      "op": "swap",
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0"
      ]
    },
    "3437": {
      "op": "bytec 11 // 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0",
        "0x0000000000000003"
      ]
    },
    "3439": {
      "op": "b==",
      "defined_out": [
        "result.1.2#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "tmp%16#0"
      ]
    },
    "3440": {
      "op": "assert",
      "stack_out": [
        "result.1.2#0"
      ]
    },
    "3441": {
      "op": "bytec 31 // 0x6563686f3a2033",
      "defined_out": [
        "0x6563686f3a2033",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "0x6563686f3a2033"
      ]
    },
    "3443": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "3444": {
      "op": "assert",
      "stack_out": []
    },
    "3445": {
      "op": "itxn_begin"
    },
    "3446": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3448": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3450": {
      "op": "bytec 19 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "stack_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "3452": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3454": {
      "op": "bytec 29 // 0x00040010000400080002733100027332000000000000000100000000000000020012000133",
      "stack_out": [
        "0x00040010000400080002733100027332000000000000000100000000000000020012000133"
      ]
    },
    "3456": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3458": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "3459": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3461": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3462": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3464": {
      "op": "itxn_submit"
    },
    "3465": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "3467": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3468": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%20#0"
      ]
    },
    "3471": {
      "op": "swap",
      "stack_out": [
        "tmp%20#0",
        "awst_tmp%1#0"
      ]
    },
    "3472": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "3475": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "3476": {
      "op": "==",
      "defined_out": [
        "tmp%20#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%22#0"
      ]
    },
    "3477": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "3478": {
      "op": "dup",
      "defined_out": [
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ]
    },
    "3479": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%20#0",
        "tmp%20#0 (copy)",
        "0"
      ]
    },
    "3480": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "3481": {
      "op": "dig 1",
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%7#0",
        "tmp%20#0 (copy)"
      ]
    },
    "3483": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%7#0",
        "tmp%20#0 (copy)",
        "2"
      ]
    },
    "3484": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%8#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%8#0"
      ]
    },
    "3485": {
      "op": "dig 2",
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%8#0",
        "tmp%20#0 (copy)"
      ]
    },
    "3487": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "tmp%20#0 (copy)",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "3489": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%extract_uint16%8#0 (copy)",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ],
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "tmp%20#0 (copy)",
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%8#0 (copy)"
      ]
    },
    "3491": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0"
      ]
    },
    "3492": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "3493": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "0"
      ]
    },
    "3494": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%8#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "3495": {
      "op": "dig 1",
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "3497": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0 (copy)",
        "2"
      ]
    },
    "3498": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "3499": {
      "op": "dig 2",
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "3501": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%5#0 (copy)",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "3503": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%10#0 (copy)",
        "aggregate%extract_uint16%8#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%5#0 (copy)",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0 (copy)"
      ]
    },
    "3505": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%6#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%6#0"
      ]
    },
    "3506": {
      "op": "extract 2 0",
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "result.0.0#0"
      ]
    },
    "3509": {
      "op": "dig 2",
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "result.0.0#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "3511": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%len%3#0",
        "aggregate%substring3%5#0",
        "result.0.0#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "result.0.0#0",
        "aggregate%len%3#0"
      ]
    },
    "3512": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%extract_uint16%10#0",
        "result.0.0#0",
        "aggregate%len%3#0",
        "aggregate%substring3%5#0"
      ]
    },
    "3514": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "result.0.0#0",
        "aggregate%len%3#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "3516": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "result.0.0#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%len%3#0"
      ]
    },
    "3518": {
      "op": "substring3",
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "result.0.0#0",
        "result.0.1#0"
      ]
    },
    "3519": {
      "op": "dig 3",
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%20#0 (copy)"
      ]
    },
    "3521": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%8#0",
        "aggregate%len%4#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%len%4#0"
      ]
    },
    "3522": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%extract_uint16%8#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%len%4#0",
        "tmp%20#0"
      ]
    },
    "3524": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%len%4#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0"
      ]
    },
    "3526": {
      "op": "uncover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "tmp%20#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%len%4#0"
      ]
    },
    "3528": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%8#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0"
      ]
    },
    "3529": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)"
      ]
    },
    "3530": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)",
        "0"
      ]
    },
    "3531": {
      "op": "extract_uint64",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "result.1.0#0"
      ]
    },
    "3532": {
      "op": "dig 1",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "result.1.0#0",
        "aggregate%substring3%8#0 (copy)"
      ]
    },
    "3534": {
      "op": "extract 8 8",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "result.1.0#0",
        "result.1.1#0"
      ]
    },
    "3537": {
      "op": "dig 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%8#0 (copy)"
      ]
    },
    "3539": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%8#0 (copy)",
        "16"
      ]
    },
    "3541": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%13#0",
        "aggregate%substring3%8#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%13#0"
      ]
    },
    "3542": {
      "op": "dig 3",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%substring3%8#0 (copy)"
      ]
    },
    "3544": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%13#0",
        "aggregate%len%5#0",
        "aggregate%substring3%8#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%8#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%len%5#0"
      ]
    },
    "3545": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%len%5#0",
        "aggregate%substring3%8#0"
      ]
    },
    "3547": {
      "op": "cover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%8#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%len%5#0"
      ]
    },
    "3549": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%9#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%9#0"
      ]
    },
    "3550": {
      "op": "extract 2 0",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3553": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0"
      ]
    },
    "3555": {
      "op": "bytec 10 // \"echo: s1\"",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0",
        "\"echo: s1\""
      ]
    },
    "3557": {
      "op": "==",
      "defined_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%28#0"
      ]
    },
    "3558": {
      "op": "assert",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3559": {
      "op": "uncover 3",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0"
      ]
    },
    "3561": {
      "op": "bytec 30 // 0x00086563686f3a207332",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0",
        "0x00086563686f3a207332"
      ]
    },
    "3563": {
      "op": "==",
      "defined_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%30#0"
      ]
    },
    "3564": {
      "op": "assert",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3565": {
      "op": "uncover 2",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0"
      ]
    },
    "3567": {
      "op": "intc_3 // 2",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0",
        "2"
      ]
    },
    "3568": {
      "op": "==",
      "defined_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%31#0"
      ]
    },
    "3569": {
      "op": "assert",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3570": {
      "op": "swap",
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0"
      ]
    },
    "3571": {
      "op": "bytec 11 // 0x0000000000000003",
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0",
        "0x0000000000000003"
      ]
    },
    "3573": {
      "op": "b==",
      "defined_out": [
        "result.1.2#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "tmp%32#0"
      ]
    },
    "3574": {
      "op": "assert",
      "stack_out": [
        "result.1.2#0"
      ]
    },
    "3575": {
      "op": "bytec 31 // 0x6563686f3a2033",
      "stack_out": [
        "result.1.2#0",
        "0x6563686f3a2033"
      ]
    },
    "3577": {
      "op": "==",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "3578": {
      "op": "assert",
      "stack_out": []
    },
    "3579": {
      "op": "itxn_begin"
    },
    "3580": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3582": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3584": {
      "op": "bytec 19 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "stack_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "3586": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3588": {
      "op": "pushbytes 0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362",
      "defined_out": [
        "0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362"
      ],
      "stack_out": [
        "0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362"
      ]
    },
    "3630": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3632": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "3633": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3635": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3636": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3638": {
      "op": "itxn_submit"
    },
    "3639": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "3641": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3642": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%40#0"
      ]
    },
    "3645": {
      "op": "swap",
      "stack_out": [
        "tmp%40#0",
        "awst_tmp%2#0"
      ]
    },
    "3646": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "3649": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%40#0",
        "tmp%41#0",
        "0x151f7c75"
      ]
    },
    "3650": {
      "op": "==",
      "defined_out": [
        "tmp%40#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "tmp%42#0"
      ]
    },
    "3651": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "3652": {
      "op": "dup",
      "defined_out": [
        "tmp%40#0",
        "tmp%40#0 (copy)"
      ],
      "stack_out": [
        "tmp%40#0",
        "tmp%40#0 (copy)"
      ]
    },
    "3653": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%40#0",
        "tmp%40#0 (copy)",
        "0"
      ]
    },
    "3654": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%14#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%14#0"
      ]
    },
    "3655": {
      "op": "dig 1",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%14#0",
        "tmp%40#0 (copy)"
      ]
    },
    "3657": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%14#0",
        "tmp%40#0 (copy)",
        "2"
      ]
    },
    "3658": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%14#0",
        "aggregate%extract_uint16%15#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%14#0",
        "aggregate%extract_uint16%15#0"
      ]
    },
    "3659": {
      "op": "dig 2",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%14#0",
        "aggregate%extract_uint16%15#0",
        "tmp%40#0 (copy)"
      ]
    },
    "3661": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "tmp%40#0 (copy)",
        "aggregate%extract_uint16%14#0"
      ]
    },
    "3663": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%14#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%extract_uint16%15#0 (copy)",
        "tmp%40#0",
        "tmp%40#0 (copy)"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "tmp%40#0 (copy)",
        "aggregate%extract_uint16%14#0",
        "aggregate%extract_uint16%15#0 (copy)"
      ]
    },
    "3665": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0"
      ]
    },
    "3666": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%substring3%10#0 (copy)",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%substring3%10#0 (copy)"
      ]
    },
    "3667": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%substring3%10#0 (copy)",
        "0"
      ]
    },
    "3668": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%substring3%10#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%16#0"
      ]
    },
    "3669": {
      "op": "dig 1",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%substring3%10#0 (copy)"
      ]
    },
    "3671": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%substring3%10#0 (copy)",
        "2"
      ]
    },
    "3672": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%substring3%10#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%extract_uint16%17#0"
      ]
    },
    "3673": {
      "op": "dig 2",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%substring3%10#0 (copy)"
      ]
    },
    "3675": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%substring3%10#0 (copy)",
        "aggregate%extract_uint16%16#0"
      ]
    },
    "3677": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%extract_uint16%17#0 (copy)",
        "aggregate%substring3%10#0",
        "aggregate%substring3%10#0 (copy)",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%substring3%10#0 (copy)",
        "aggregate%extract_uint16%16#0",
        "aggregate%extract_uint16%17#0 (copy)"
      ]
    },
    "3679": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%substring3%10#0",
        "aggregate%substring3%11#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%substring3%11#0"
      ]
    },
    "3680": {
      "op": "extract 2 0",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%17#0",
        "result.0.0#0"
      ]
    },
    "3683": {
      "op": "dig 2",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%17#0",
        "result.0.0#0",
        "aggregate%substring3%10#0 (copy)"
      ]
    },
    "3685": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%len%6#0",
        "aggregate%substring3%10#0",
        "result.0.0#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%17#0",
        "result.0.0#0",
        "aggregate%len%6#0"
      ]
    },
    "3686": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%extract_uint16%17#0",
        "result.0.0#0",
        "aggregate%len%6#0",
        "aggregate%substring3%10#0"
      ]
    },
    "3688": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "result.0.0#0",
        "aggregate%len%6#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%17#0"
      ]
    },
    "3690": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "result.0.0#0",
        "aggregate%substring3%10#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%len%6#0"
      ]
    },
    "3692": {
      "op": "substring3",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "result.0.0#0",
        "result.0.1#0"
      ]
    },
    "3693": {
      "op": "dig 3",
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%40#0 (copy)"
      ]
    },
    "3695": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "aggregate%len%7#0",
        "result.0.0#0",
        "result.0.1#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%len%7#0"
      ]
    },
    "3696": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%extract_uint16%15#0",
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%len%7#0",
        "tmp%40#0"
      ]
    },
    "3698": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%len%7#0",
        "tmp%40#0",
        "aggregate%extract_uint16%15#0"
      ]
    },
    "3700": {
      "op": "uncover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "tmp%40#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%len%7#0"
      ]
    },
    "3702": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%13#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0"
      ]
    },
    "3703": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%13#0",
        "aggregate%substring3%13#0 (copy)",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "aggregate%substring3%13#0 (copy)"
      ]
    },
    "3704": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "aggregate%substring3%13#0 (copy)",
        "0"
      ]
    },
    "3705": {
      "op": "extract_uint64",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "result.1.0#0"
      ]
    },
    "3706": {
      "op": "dig 1",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "result.1.0#0",
        "aggregate%substring3%13#0 (copy)"
      ]
    },
    "3708": {
      "op": "extract 8 8",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "result.1.0#0",
        "result.1.1#0"
      ]
    },
    "3711": {
      "op": "dig 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%13#0 (copy)"
      ]
    },
    "3713": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%13#0 (copy)",
        "16"
      ]
    },
    "3715": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%20#0",
        "aggregate%substring3%13#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%20#0"
      ]
    },
    "3716": {
      "op": "dig 3",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%20#0",
        "aggregate%substring3%13#0 (copy)"
      ]
    },
    "3718": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%20#0",
        "aggregate%len%8#0",
        "aggregate%substring3%13#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "aggregate%substring3%13#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%20#0",
        "aggregate%len%8#0"
      ]
    },
    "3719": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%extract_uint16%20#0",
        "aggregate%len%8#0",
        "aggregate%substring3%13#0"
      ]
    },
    "3721": {
      "op": "cover 2",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%13#0",
        "aggregate%extract_uint16%20#0",
        "aggregate%len%8#0"
      ]
    },
    "3723": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%14#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "aggregate%substring3%14#0"
      ]
    },
    "3724": {
      "op": "extract 2 0",
      "stack_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3727": {
      "op": "uncover 4",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0"
      ]
    },
    "3729": {
      "op": "pushbytes \"echo: s1b\"",
      "defined_out": [
        "\"echo: s1b\"",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.0#0",
        "\"echo: s1b\""
      ]
    },
    "3740": {
      "op": "==",
      "defined_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%48#0"
      ]
    },
    "3741": {
      "op": "assert",
      "stack_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3742": {
      "op": "uncover 3",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0"
      ]
    },
    "3744": {
      "op": "pushbytes 0x00096563686f3a20733262",
      "defined_out": [
        "0x00096563686f3a20733262",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "result.0.1#0",
        "0x00096563686f3a20733262"
      ]
    },
    "3757": {
      "op": "==",
      "defined_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "tmp%50#0"
      ]
    },
    "3758": {
      "op": "assert",
      "stack_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3759": {
      "op": "uncover 2",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0"
      ]
    },
    "3761": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "result.1.0#0",
        "12"
      ]
    },
    "3763": {
      "op": "==",
      "defined_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0",
        "tmp%51#0"
      ]
    },
    "3764": {
      "op": "assert",
      "stack_out": [
        "result.1.1#0",
        "result.1.2#0"
      ]
    },
    "3765": {
      "op": "swap",
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0"
      ]
    },
    "3766": {
      "op": "pushbytes 0x0000000000000016",
      "defined_out": [
        "0x0000000000000016",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0",
        "0x0000000000000016"
      ]
    },
    "3776": {
      "op": "b==",
      "defined_out": [
        "result.1.2#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "tmp%52#0"
      ]
    },
    "3777": {
      "op": "assert",
      "stack_out": [
        "result.1.2#0"
      ]
    },
    "3778": {
      "op": "pushbytes 0x6563686f3a203362",
      "defined_out": [
        "0x6563686f3a203362",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "0x6563686f3a203362"
      ]
    },
    "3788": {
      "op": "==",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "3789": {
      "op": "assert",
      "stack_out": []
    },
    "3790": {
      "retsub": true,
      "op": "retsub"
    },
    "3791": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_no_args",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3794": {
      "op": "itxn_begin"
    },
    "3795": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3797": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3799": {
      "op": "bytec 20 // method \"no_args()uint64\"",
      "defined_out": [
        "Method(no_args()uint64)"
      ],
      "stack_out": [
        "Method(no_args()uint64)"
      ]
    },
    "3801": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3803": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "3804": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3806": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3807": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3809": {
      "op": "itxn_submit"
    },
    "3810": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3812": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3813": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3816": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3817": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3820": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "3821": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3822": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3823": {
      "op": "btoi",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "3824": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "42"
      ]
    },
    "3826": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "3827": {
      "op": "assert",
      "stack_out": []
    },
    "3828": {
      "op": "itxn_begin"
    },
    "3829": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3831": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3833": {
      "op": "bytec 20 // method \"no_args()uint64\"",
      "stack_out": [
        "Method(no_args()uint64)"
      ]
    },
    "3835": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3837": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "3838": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3840": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3841": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3843": {
      "op": "itxn_submit"
    },
    "3844": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "3846": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3847": {
      "op": "extract 4 0",
      "defined_out": [
        "arc4_result#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "arc4_result#0"
      ]
    },
    "3850": {
      "op": "swap",
      "stack_out": [
        "arc4_result#0",
        "awst_tmp%1#0"
      ]
    },
    "3851": {
      "op": "extract 0 4",
      "defined_out": [
        "arc4_result#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "arc4_result#0",
        "tmp%6#0"
      ]
    },
    "3854": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "arc4_result#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "3855": {
      "op": "==",
      "defined_out": [
        "arc4_result#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "arc4_result#0",
        "tmp%7#0"
      ]
    },
    "3856": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "arc4_result#0"
      ]
    },
    "3857": {
      "op": "bytec 32 // 0x000000000000002a",
      "defined_out": [
        "0x000000000000002a",
        "arc4_result#0"
      ],
      "stack_out": [
        "arc4_result#0",
        "0x000000000000002a"
      ]
    },
    "3859": {
      "op": "b==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "3860": {
      "op": "assert",
      "stack_out": []
    },
    "3861": {
      "op": "itxn_begin"
    },
    "3862": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3864": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3866": {
      "op": "bytec 20 // method \"no_args()uint64\"",
      "stack_out": [
        "Method(no_args()uint64)"
      ]
    },
    "3868": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3870": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "3871": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3873": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3874": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3876": {
      "op": "itxn_submit"
    },
    "3877": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "3879": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "3882": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "3883": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "3884": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "3885": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%3#0"
      ]
    },
    "3887": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3888": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%13#0"
      ]
    },
    "3891": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "awst_tmp%3#0"
      ]
    },
    "3892": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "3895": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "3896": {
      "op": "==",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "3897": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "3898": {
      "op": "bytec 32 // 0x000000000000002a",
      "stack_out": [
        "tmp%13#0",
        "0x000000000000002a"
      ]
    },
    "3900": {
      "op": "b==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "3901": {
      "op": "assert",
      "stack_out": []
    },
    "3902": {
      "retsub": true,
      "op": "retsub"
    },
    "3903": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_named_tuples",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3906": {
      "op": "itxn_begin"
    },
    "3907": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3909": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3911": {
      "op": "bytec 33 // method \"logs_are_equal((uint64,string),(uint64,string))bool\"",
      "defined_out": [
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ],
      "stack_out": [
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ]
    },
    "3913": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3915": {
      "op": "bytec 7 // 0x0000000000000001000a00056c6f672031",
      "defined_out": [
        "0x0000000000000001000a00056c6f672031"
      ],
      "stack_out": [
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "3917": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3919": {
      "op": "bytec 7 // 0x0000000000000001000a00056c6f672031",
      "stack_out": [
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "3921": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3923": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "3924": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3926": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3927": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3929": {
      "op": "itxn_submit"
    },
    "3930": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3932": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3933": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3936": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "awst_tmp%0#0"
      ]
    },
    "3937": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3940": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "3941": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "3942": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3943": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "3944": {
      "op": "getbit",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "3945": {
      "op": "assert",
      "stack_out": []
    },
    "3946": {
      "op": "itxn_begin"
    },
    "3947": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "3949": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "3951": {
      "op": "bytec 33 // method \"logs_are_equal((uint64,string),(uint64,string))bool\"",
      "stack_out": [
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ]
    },
    "3953": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3955": {
      "op": "pushbytes 0x0000000000000002000a00056c6f672032",
      "defined_out": [
        "0x0000000000000002000a00056c6f672032"
      ],
      "stack_out": [
        "0x0000000000000002000a00056c6f672032"
      ]
    },
    "3974": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3976": {
      "op": "bytec 7 // 0x0000000000000001000a00056c6f672031",
      "stack_out": [
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "3978": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3980": {
      "op": "intc_1 // appl",
      "stack_out": [
        "appl"
      ]
    },
    "3981": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3983": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3984": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3986": {
      "op": "itxn_submit"
    },
    "3987": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "3989": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3990": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "3993": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "awst_tmp%1#0"
      ]
    },
    "3994": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "3997": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "3998": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "3999": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "4000": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "4001": {
      "op": "getbit",
      "stack_out": [
        "result#0"
      ]
    },
    "4002": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "4003": {
      "op": "assert",
      "stack_out": []
    },
    "4004": {
      "retsub": true,
      "op": "retsub"
    },
    "4005": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_arc4_struct",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "4008": {
      "op": "itxn_begin"
    },
    "4009": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "4011": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "4013": {
      "op": "pushbytes 0xdc4f1992 // method \"echo_log_struct((uint64,string))(uint64,string)\"",
      "defined_out": [
        "Method(echo_log_struct((uint64,string))(uint64,string))"
      ],
      "stack_out": [
        "Method(echo_log_struct((uint64,string))(uint64,string))"
      ]
    },
    "4019": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4021": {
      "op": "bytec 7 // 0x0000000000000001000a00056c6f672031",
      "defined_out": [
        "0x0000000000000001000a00056c6f672031"
      ],
      "stack_out": [
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "4023": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4025": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "4026": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4028": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4029": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4031": {
      "op": "itxn_submit"
    },
    "4032": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "4034": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "4035": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "result#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "result#0"
      ]
    },
    "4038": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "awst_tmp%0#0"
      ]
    },
    "4039": {
      "op": "extract 0 4",
      "defined_out": [
        "result#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%3#0"
      ]
    },
    "4042": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "result#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "4043": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%4#0"
      ]
    },
    "4044": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result#0"
      ]
    },
    "4045": {
      "op": "itxn LastLog",
      "defined_out": [
        "result#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "result#0",
        "txn.LastLog#0"
      ]
    },
    "4047": {
      "op": "swap",
      "stack_out": [
        "txn.LastLog#0",
        "result#0"
      ]
    },
    "4048": {
      "op": "bytec 7 // 0x0000000000000001000a00056c6f672031",
      "stack_out": [
        "txn.LastLog#0",
        "result#0",
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "4050": {
      "op": "==",
      "defined_out": [
        "tmp%5#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%5#0"
      ]
    },
    "4051": {
      "error": "expected output to match input",
      "op": "assert // expected output to match input",
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "4052": {
      "op": "dup",
      "defined_out": [
        "txn.LastLog#0",
        "txn.LastLog#0 (copy)"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "txn.LastLog#0 (copy)"
      ]
    },
    "4053": {
      "op": "extract 4 0",
      "defined_out": [
        "tmp%6#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%6#0"
      ]
    },
    "4056": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "txn.LastLog#0"
      ]
    },
    "4057": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "4060": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "0x151f7c75"
      ]
    },
    "4061": {
      "op": "==",
      "defined_out": [
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "4062": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "4063": {
      "op": "bytec 7 // 0x0000000000000001000a00056c6f672031",
      "stack_out": [
        "tmp%6#0",
        "0x0000000000000001000a00056c6f672031"
      ]
    },
    "4065": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "4066": {
      "error": "expected output to match input",
      "op": "assert // expected output to match input",
      "stack_out": []
    },
    "4067": {
      "retsub": true,
      "op": "retsub"
    },
    "4068": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding",
      "params": {
        "app_to_call#0": "uint64",
        "asset#0": "uint64"
      },
      "block": "test_resource_encoding",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "4071": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0"
      ]
    },
    "4073": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "acc#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "4075": {
      "op": "itxn_begin"
    },
    "4076": {
      "op": "frame_dig -2",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_to_call#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app_to_call#0 (copy)"
      ]
    },
    "4078": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "4080": {
      "op": "frame_dig -1",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "asset#0 (copy)"
      ]
    },
    "4082": {
      "op": "itxn_field Assets",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "4084": {
      "op": "dig 1",
      "defined_out": [
        "acc#0",
        "app#0",
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0 (copy)"
      ]
    },
    "4086": {
      "op": "itxn_field Applications",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "4088": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "acc#0 (copy)",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "acc#0 (copy)"
      ]
    },
    "4089": {
      "op": "itxn_field Accounts",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "4091": {
      "op": "bytec 21 // method \"echo_resource_by_foreign_index(asset,application,account)(uint64,uint64,address)\"",
      "defined_out": [
        "Method(echo_resource_by_foreign_index(asset,application,account)(uint64,uint64,address))",
        "acc#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "Method(echo_resource_by_foreign_index(asset,application,account)(uint64,uint64,address))"
      ]
    },
    "4093": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "4095": {
      "op": "bytec 22 // 0x00",
      "defined_out": [
        "0x00",
        "acc#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "0x00"
      ]
    },
    "4097": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "4099": {
      "op": "bytec 8 // 0x01",
      "defined_out": [
        "0x01",
        "acc#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "0x01"
      ]
    },
    "4101": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "4103": {
      "op": "bytec 8 // 0x01",
      "stack_out": [
        "app#0",
        "acc#0",
        "0x01"
      ]
    },
    "4105": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "4107": {
      "op": "intc_1 // appl",
      "defined_out": [
        "acc#0",
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "appl"
      ]
    },
    "4108": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "4110": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "acc#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "0"
      ]
    },
    "4111": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "4113": {
      "op": "itxn_submit"
    },
    "4114": {
      "op": "itxn LastLog",
      "defined_out": [
        "acc#0",
        "app#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0"
      ]
    },
    "4116": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "4117": {
      "op": "extract 0 4",
      "defined_out": [
        "acc#0",
        "app#0",
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "tmp%3#0"
      ]
    },
    "4120": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "acc#0",
        "app#0",
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "4121": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "4122": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0"
      ]
    },
    "4123": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "4124": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "acc#0",
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "4"
      ]
    },
    "4126": {
      "op": "extract_uint64",
      "defined_out": [
        "acc#0",
        "app#0",
        "awst_tmp%0#0",
        "result.0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "result.0#0"
      ]
    },
    "4127": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "result.0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "4129": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "acc#0",
        "app#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "result.0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "result.0#0",
        "awst_tmp%0#0 (copy)",
        "12"
      ]
    },
    "4131": {
      "op": "extract_uint64",
      "defined_out": [
        "acc#0",
        "app#0",
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "result.0#0",
        "result.1#0"
      ]
    },
    "4132": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%0#0"
      ]
    },
    "4134": {
      "op": "extract 20 32",
      "defined_out": [
        "acc#0",
        "app#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ]
    },
    "4137": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "result.1#0",
        "result.2#0",
        "result.0#0"
      ]
    },
    "4139": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0",
        "acc#0",
        "result.1#0",
        "result.2#0",
        "result.0#0",
        "asset#0 (copy)"
      ]
    },
    "4141": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "result.1#0",
        "result.2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.1#0",
        "result.2#0",
        "tmp%8#0"
      ]
    },
    "4142": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%8#0",
        "result.1#0"
      ]
    },
    "4144": {
      "op": "dig 4",
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%8#0",
        "result.1#0",
        "app#0 (copy)"
      ]
    },
    "4146": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "4147": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%10#0"
      ]
    },
    "4148": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%10#0",
        "result.2#0"
      ]
    },
    "4149": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%10#0",
        "result.2#0",
        "acc#0 (copy)"
      ]
    },
    "4151": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "4152": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%12#0"
      ]
    },
    "4153": {
      "error": "expected echo to return same resources",
      "op": "assert // expected echo to return same resources",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "4154": {
      "op": "itxn_begin"
    },
    "4155": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0",
        "acc#0",
        "asset#0 (copy)"
      ]
    },
    "4157": {
      "op": "itob",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4158": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0 (copy)"
      ]
    },
    "4160": {
      "op": "itob",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4161": {
      "op": "frame_dig -2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app_to_call#0 (copy)"
      ]
    },
    "4163": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4165": {
      "op": "bytec 23 // method \"echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)\"",
      "defined_out": [
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))"
      ]
    },
    "4167": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4169": {
      "op": "dig 1",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)",
        "aggregate%val_as_bytes%1#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "4171": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4173": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%1#0 (copy)",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%1#0 (copy)"
      ]
    },
    "4174": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4176": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "acc#0 (copy)"
      ]
    },
    "4178": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4180": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "appl"
      ]
    },
    "4181": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4183": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "0"
      ]
    },
    "4184": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4186": {
      "op": "itxn_submit"
    },
    "4187": {
      "op": "itxn LastLog",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%1#0"
      ]
    },
    "4189": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "4190": {
      "op": "extract 0 4",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "awst_tmp%1#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%1#0",
        "tmp%17#0"
      ]
    },
    "4193": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%1#0",
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "4194": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "awst_tmp%1#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%1#0",
        "tmp%18#0"
      ]
    },
    "4195": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%1#0"
      ]
    },
    "4196": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "4197": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "4"
      ]
    },
    "4199": {
      "op": "extract_uint64",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%1#0",
        "result.0#0"
      ]
    },
    "4200": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%1#0",
        "result.0#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "4202": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%1#0",
        "result.0#0",
        "awst_tmp%1#0 (copy)",
        "12"
      ]
    },
    "4204": {
      "op": "extract_uint64",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%1#0",
        "result.0#0",
        "result.1#0"
      ]
    },
    "4205": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%1#0"
      ]
    },
    "4207": {
      "op": "extract 20 32",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ]
    },
    "4210": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.1#0",
        "result.2#0",
        "result.0#0"
      ]
    },
    "4212": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.1#0",
        "result.2#0",
        "result.0#0",
        "asset#0 (copy)"
      ]
    },
    "4214": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "result.1#0",
        "result.2#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.1#0",
        "result.2#0",
        "tmp%22#0"
      ]
    },
    "4215": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.2#0",
        "tmp%22#0",
        "result.1#0"
      ]
    },
    "4217": {
      "op": "dig 6",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.2#0",
        "tmp%22#0",
        "result.1#0",
        "app#0 (copy)"
      ]
    },
    "4219": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "result.2#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.2#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "4220": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "result.2#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.2#0",
        "tmp%24#0"
      ]
    },
    "4221": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%24#0",
        "result.2#0"
      ]
    },
    "4222": {
      "op": "dig 4",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%24#0",
        "result.2#0",
        "acc#0 (copy)"
      ]
    },
    "4224": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "4225": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%26#0"
      ]
    },
    "4226": {
      "error": "expected echo to return same resources",
      "op": "assert // expected echo to return same resources",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4227": {
      "op": "itxn_begin"
    },
    "4228": {
      "op": "frame_dig -2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app_to_call#0 (copy)"
      ]
    },
    "4230": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4232": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "asset#0 (copy)"
      ]
    },
    "4234": {
      "op": "itxn_field Assets",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4236": {
      "op": "dig 3",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0 (copy)"
      ]
    },
    "4238": {
      "op": "itxn_field Applications",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4240": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "acc#0 (copy)"
      ]
    },
    "4242": {
      "op": "itxn_field Accounts",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4244": {
      "op": "bytec 21 // method \"echo_resource_by_foreign_index(asset,application,account)(uint64,uint64,address)\"",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "Method(echo_resource_by_foreign_index(asset,application,account)(uint64,uint64,address))"
      ]
    },
    "4246": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4248": {
      "op": "bytec 22 // 0x00",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "0x00"
      ]
    },
    "4250": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4252": {
      "op": "bytec 8 // 0x01",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "0x01"
      ]
    },
    "4254": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4256": {
      "op": "bytec 8 // 0x01",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "0x01"
      ]
    },
    "4258": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4260": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "appl"
      ]
    },
    "4261": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4263": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "0"
      ]
    },
    "4264": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4266": {
      "op": "itxn_submit"
    },
    "4267": {
      "op": "itxn LastLog",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%2#0"
      ]
    },
    "4269": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "4270": {
      "op": "extract 0 4",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "awst_tmp%2#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%2#0",
        "tmp%28#0"
      ]
    },
    "4273": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%2#0",
        "tmp%28#0",
        "0x151f7c75"
      ]
    },
    "4274": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "awst_tmp%2#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%2#0",
        "tmp%29#0"
      ]
    },
    "4275": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%2#0"
      ]
    },
    "4276": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "4277": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "4"
      ]
    },
    "4279": {
      "op": "extract_uint64",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%2#0",
        "result.0#0"
      ]
    },
    "4280": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%2#0",
        "result.0#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "4282": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%2#0",
        "result.0#0",
        "awst_tmp%2#0 (copy)",
        "12"
      ]
    },
    "4284": {
      "op": "extract_uint64",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%2#0",
        "result.0#0",
        "result.1#0"
      ]
    },
    "4285": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%2#0"
      ]
    },
    "4287": {
      "op": "extract 20 32",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ]
    },
    "4290": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.1#0",
        "result.2#0",
        "result.0#0"
      ]
    },
    "4292": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.1#0",
        "result.2#0",
        "result.0#0",
        "asset#0 (copy)"
      ]
    },
    "4294": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "result.1#0",
        "result.2#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.1#0",
        "result.2#0",
        "tmp%33#0"
      ]
    },
    "4295": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.2#0",
        "tmp%33#0",
        "result.1#0"
      ]
    },
    "4297": {
      "op": "dig 6",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.2#0",
        "tmp%33#0",
        "result.1#0",
        "app#0 (copy)"
      ]
    },
    "4299": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "result.2#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.2#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "4300": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "result.2#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.2#0",
        "tmp%35#0"
      ]
    },
    "4301": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%35#0",
        "result.2#0"
      ]
    },
    "4302": {
      "op": "dig 4",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%35#0",
        "result.2#0",
        "acc#0 (copy)"
      ]
    },
    "4304": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "4305": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%37#0"
      ]
    },
    "4306": {
      "error": "expected echo to return same resources",
      "op": "assert // expected echo to return same resources",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4307": {
      "op": "itxn_begin"
    },
    "4308": {
      "op": "frame_dig -2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app_to_call#0 (copy)"
      ]
    },
    "4310": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4312": {
      "op": "bytec 23 // method \"echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)\"",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))"
      ]
    },
    "4314": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4316": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "4318": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4320": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%1#0 (copy)"
      ]
    },
    "4321": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4323": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "acc#0 (copy)"
      ]
    },
    "4325": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4327": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "appl"
      ]
    },
    "4328": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4330": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "0"
      ]
    },
    "4331": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4333": {
      "op": "itxn_submit"
    },
    "4334": {
      "op": "itxn LastLog",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%3#0"
      ]
    },
    "4336": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "4337": {
      "op": "extract 0 4",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "awst_tmp%3#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%3#0",
        "tmp%42#0"
      ]
    },
    "4340": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%3#0",
        "tmp%42#0",
        "0x151f7c75"
      ]
    },
    "4341": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "awst_tmp%3#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%3#0",
        "tmp%43#0"
      ]
    },
    "4342": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%3#0"
      ]
    },
    "4343": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "4344": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)",
        "4"
      ]
    },
    "4346": {
      "op": "extract_uint64",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%3#0",
        "result.0#0"
      ]
    },
    "4347": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%3#0",
        "result.0#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "4349": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%3#0",
        "result.0#0",
        "awst_tmp%3#0 (copy)",
        "12"
      ]
    },
    "4351": {
      "op": "extract_uint64",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%3#0",
        "result.0#0",
        "result.1#0"
      ]
    },
    "4352": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%3#0"
      ]
    },
    "4354": {
      "op": "extract 20 32",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ]
    },
    "4357": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.1#0",
        "result.2#0",
        "result.0#0"
      ]
    },
    "4359": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.1#0",
        "result.2#0",
        "result.0#0",
        "asset#0 (copy)"
      ]
    },
    "4361": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "result.1#0",
        "result.2#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.1#0",
        "result.2#0",
        "tmp%47#0"
      ]
    },
    "4362": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.2#0",
        "tmp%47#0",
        "result.1#0"
      ]
    },
    "4364": {
      "op": "dig 6",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.2#0",
        "tmp%47#0",
        "result.1#0",
        "app#0 (copy)"
      ]
    },
    "4366": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "result.2#0",
        "tmp%47#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.2#0",
        "tmp%47#0",
        "tmp%48#0"
      ]
    },
    "4367": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "result.2#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.2#0",
        "tmp%49#0"
      ]
    },
    "4368": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%49#0",
        "result.2#0"
      ]
    },
    "4369": {
      "op": "dig 4",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%49#0",
        "result.2#0",
        "acc#0 (copy)"
      ]
    },
    "4371": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%49#0",
        "tmp%50#0"
      ]
    },
    "4372": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%51#0"
      ]
    },
    "4373": {
      "error": "expected echo to return same resources",
      "op": "assert // expected echo to return same resources",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4374": {
      "op": "itxn_begin"
    },
    "4375": {
      "op": "frame_dig -2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app_to_call#0 (copy)"
      ]
    },
    "4377": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4379": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "asset#0 (copy)"
      ]
    },
    "4381": {
      "op": "itxn_field Assets",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4383": {
      "op": "dig 3",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0 (copy)"
      ]
    },
    "4385": {
      "op": "itxn_field Applications",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4387": {
      "op": "dig 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "acc#0 (copy)"
      ]
    },
    "4389": {
      "op": "itxn_field Accounts",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4391": {
      "op": "bytec 21 // method \"echo_resource_by_foreign_index(asset,application,account)(uint64,uint64,address)\"",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "Method(echo_resource_by_foreign_index(asset,application,account)(uint64,uint64,address))"
      ]
    },
    "4393": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4395": {
      "op": "bytec 22 // 0x00",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "0x00"
      ]
    },
    "4397": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4399": {
      "op": "bytec 8 // 0x01",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "0x01"
      ]
    },
    "4401": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4403": {
      "op": "bytec 8 // 0x01",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "0x01"
      ]
    },
    "4405": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4407": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "appl"
      ]
    },
    "4408": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4410": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "0"
      ]
    },
    "4411": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4413": {
      "op": "itxn_submit"
    },
    "4414": {
      "op": "itxn LastLog",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "awst_tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%4#0"
      ]
    },
    "4416": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ]
    },
    "4417": {
      "op": "extract 0 4",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "awst_tmp%4#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%4#0",
        "tmp%53#0"
      ]
    },
    "4420": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%4#0",
        "tmp%53#0",
        "0x151f7c75"
      ]
    },
    "4421": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "awst_tmp%4#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%4#0",
        "tmp%54#0"
      ]
    },
    "4422": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%4#0"
      ]
    },
    "4423": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ]
    },
    "4424": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)",
        "4"
      ]
    },
    "4426": {
      "op": "extract_uint64",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%4#0",
        "result.0#0"
      ]
    },
    "4427": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%4#0",
        "result.0#0",
        "awst_tmp%4#0 (copy)"
      ]
    },
    "4429": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%4#0",
        "result.0#0",
        "awst_tmp%4#0 (copy)",
        "12"
      ]
    },
    "4431": {
      "op": "extract_uint64",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "awst_tmp%4#0",
        "result.0#0",
        "result.1#0"
      ]
    },
    "4432": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%4#0"
      ]
    },
    "4434": {
      "op": "extract 20 32",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ]
    },
    "4437": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.1#0",
        "result.2#0",
        "result.0#0"
      ]
    },
    "4439": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.1#0",
        "result.2#0",
        "result.0#0",
        "asset#0 (copy)"
      ]
    },
    "4441": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "result.1#0",
        "result.2#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.1#0",
        "result.2#0",
        "tmp%58#0"
      ]
    },
    "4442": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.2#0",
        "tmp%58#0",
        "result.1#0"
      ]
    },
    "4444": {
      "op": "dig 6",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.2#0",
        "tmp%58#0",
        "result.1#0",
        "app#0 (copy)"
      ]
    },
    "4446": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "result.2#0",
        "tmp%58#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.2#0",
        "tmp%58#0",
        "tmp%59#0"
      ]
    },
    "4447": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "result.2#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "result.2#0",
        "tmp%60#0"
      ]
    },
    "4448": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%60#0",
        "result.2#0"
      ]
    },
    "4449": {
      "op": "dig 4",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%60#0",
        "result.2#0",
        "acc#0 (copy)"
      ]
    },
    "4451": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "tmp%60#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%60#0",
        "tmp%61#0"
      ]
    },
    "4452": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%62#0"
      ]
    },
    "4453": {
      "error": "expected echo to return same resources",
      "op": "assert // expected echo to return same resources",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4454": {
      "op": "itxn_begin"
    },
    "4455": {
      "op": "frame_dig -2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "app_to_call#0 (copy)"
      ]
    },
    "4457": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4459": {
      "op": "bytec 23 // method \"echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)\"",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))"
      ]
    },
    "4461": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4463": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4464": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "4466": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "4468": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "acc#0",
        "acc#0 (copy)"
      ]
    },
    "4469": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "4471": {
      "op": "intc_1 // appl",
      "stack_out": [
        "app#0",
        "acc#0",
        "appl"
      ]
    },
    "4472": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "4474": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "acc#0",
        "0"
      ]
    },
    "4475": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "4477": {
      "op": "itxn_submit"
    },
    "4478": {
      "op": "itxn LastLog",
      "defined_out": [
        "acc#0",
        "app#0",
        "awst_tmp%5#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0"
      ]
    },
    "4480": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "app#0",
        "awst_tmp%5#0",
        "awst_tmp%5#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "awst_tmp%5#0 (copy)"
      ]
    },
    "4481": {
      "op": "extract 0 4",
      "defined_out": [
        "acc#0",
        "app#0",
        "awst_tmp%5#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "tmp%67#0"
      ]
    },
    "4484": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "tmp%67#0",
        "0x151f7c75"
      ]
    },
    "4485": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "awst_tmp%5#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "tmp%68#0"
      ]
    },
    "4486": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0"
      ]
    },
    "4487": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "awst_tmp%5#0 (copy)"
      ]
    },
    "4488": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "awst_tmp%5#0 (copy)",
        "4"
      ]
    },
    "4490": {
      "op": "extract_uint64",
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "result.0#0"
      ]
    },
    "4491": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "result.0#0",
        "awst_tmp%5#0 (copy)"
      ]
    },
    "4493": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "result.0#0",
        "awst_tmp%5#0 (copy)",
        "12"
      ]
    },
    "4495": {
      "op": "extract_uint64",
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "result.0#0",
        "result.1#0"
      ]
    },
    "4496": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "result.0#0",
        "result.1#0",
        "awst_tmp%5#0"
      ]
    },
    "4498": {
      "op": "extract 20 32",
      "stack_out": [
        "app#0",
        "acc#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ]
    },
    "4501": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "result.1#0",
        "result.2#0",
        "result.0#0"
      ]
    },
    "4503": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0",
        "acc#0",
        "result.1#0",
        "result.2#0",
        "result.0#0",
        "asset#0 (copy)"
      ]
    },
    "4505": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "result.1#0",
        "result.2#0",
        "tmp%72#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.1#0",
        "result.2#0",
        "tmp%72#0"
      ]
    },
    "4506": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%72#0",
        "result.1#0"
      ]
    },
    "4508": {
      "op": "uncover 4",
      "stack_out": [
        "acc#0",
        "result.2#0",
        "tmp%72#0",
        "result.1#0",
        "app#0"
      ]
    },
    "4510": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "result.2#0",
        "tmp%72#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "acc#0",
        "result.2#0",
        "tmp%72#0",
        "tmp%73#0"
      ]
    },
    "4511": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "result.2#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "acc#0",
        "result.2#0",
        "tmp%74#0"
      ]
    },
    "4512": {
      "op": "swap",
      "stack_out": [
        "acc#0",
        "tmp%74#0",
        "result.2#0"
      ]
    },
    "4513": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%74#0",
        "result.2#0",
        "acc#0"
      ]
    },
    "4515": {
      "op": "==",
      "defined_out": [
        "tmp%74#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%74#0",
        "tmp%75#0"
      ]
    },
    "4516": {
      "op": "&&",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "4517": {
      "error": "expected echo to return same resources",
      "op": "assert // expected echo to return same resources",
      "stack_out": []
    },
    "4518": {
      "retsub": true,
      "op": "retsub"
    }
  }
}