main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@26
    block@2: // abi_routing_L24
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test_is_a_b(byte[],byte[],uint64)void" => block@4, method "test_method_selector_kinds(uint64)void" => block@5, method "test_method_overload(uint64)void" => block@6, method "test_arg_conversion(uint64)void" => block@7, method "test_15plus_args(uint64)void" => block@8, method "test_void(uint64)void" => block@9, method "test_ref_types(uint64,uint64)void" => block@10, method "test_account_to_address(uint64)void" => block@11, method "test_native_string(uint64)void" => block@12, method "test_native_bytes(uint64)void" => block@13, method "test_native_uint64(uint64)void" => block@14, method "test_native_biguint(uint64)void" => block@15, method "test_native_tuple(uint64)void" => block@16, method "test_native_tuple_method_ref(uint64)void" => block@17, method "test_nested_tuples(uint64)void" => block@18, method "test_no_args(uint64)void" => block@19, method "test_named_tuples(uint64)void" => block@20, method "test_arc4_struct(uint64)void" => block@21, method "test_resource_encoding(uint64,uint64)void" => block@22, * => block@25}
    block@4: // test_is_a_b_route_L25
        test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b[routing]()
        goto block@25
    block@5: // test_method_selector_kinds_route_L34
        test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds[routing]()
        goto block@25
    block@6: // test_method_overload_route_L48
        test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload[routing]()
        goto block@25
    block@7: // test_arg_conversion_route_L63
        test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion[routing]()
        goto block@25
    block@8: // test_15plus_args_route_L80
        test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args[routing]()
        goto block@25
    block@9: // test_void_route_L108
        test_cases.typed_abi_call.typed_c2c.Greeter.test_void[routing]()
        goto block@25
    block@10: // test_ref_types_route_L122
        test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types[routing]()
        goto block@25
    block@11: // test_account_to_address_route_L136
        test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address[routing]()
        goto block@25
    block@12: // test_native_string_route_L145
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string[routing]()
        goto block@25
    block@13: // test_native_bytes_route_L156
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes[routing]()
        goto block@25
    block@14: // test_native_uint64_route_L169
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64[routing]()
        goto block@25
    block@15: // test_native_biguint_route_L180
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint[routing]()
        goto block@25
    block@16: // test_native_tuple_route_L191
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple[routing]()
        goto block@25
    block@17: // test_native_tuple_method_ref_route_L250
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref[routing]()
        goto block@25
    block@18: // test_nested_tuples_route_L300
        test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples[routing]()
        goto block@25
    block@19: // test_no_args_route_L346
        test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args[routing]()
        goto block@25
    block@20: // test_named_tuples_route_L356
        test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples[routing]()
        goto block@25
    block@21: // test_arc4_struct_route_L373
        test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct[routing]()
        goto block@25
    block@22: // test_resource_encoding_route_L384
        test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding[routing]()
        goto block@25
    block@25: // after_if_else_L24
        fail
    block@26: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b[routing]() -> void:
    block@0: // L25
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(tmp%0#0)
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let length%1#0: uint64 = array_len(tmp%2#0)
        let add%1#0: uint64 = (+ length%1#0 2u)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%4#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "is_a_b(byte[],byte[])void")
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field ApplicationArgs) tmp%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds[routing]() -> void:
    block@0: // L34
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        itxn_begin
        let tmp%1#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("test1")
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) tmp%1#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let result#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%0#0)
        let length%0#0: uint64 = array_len(result#0)
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#1: uint64 = (len result#0)
        let eq%0#1: bool = (== len%0#1 add%0#0)
        (assert eq%0#1) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let tmp%5#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("echo: test1")
        let tmp%6#0: bool = (== result#0 tmp%5#0)
        (assert tmp%6#0)
        itxn_begin
        let tmp%7#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("test2")
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) tmp%7#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let result#1: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%1#0)
        let length%1#0: uint64 = array_len(result#1)
        let add%1#0: uint64 = (+ length%1#0 2u)
        let len%1#0: uint64 = (len result#1)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%9#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
        (assert tmp%10#0) // application log value is not the result of an ABI return
        let tmp%11#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("echo: test2")
        let tmp%12#0: bool = (== result#1 tmp%11#0)
        (assert tmp%12#0)
        itxn_begin
        let tmp%13#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("test3")
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) tmp%13#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let result#2: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%2#0)
        let length%2#0: uint64 = array_len(result#2)
        let add%2#0: uint64 = (+ length%2#0 2u)
        let len%2#0: uint64 = (len result#2)
        let eq%2#0: bool = (== len%2#0 add%2#0)
        (assert eq%2#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%15#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%16#0: bool = (== tmp%15#0 0x151f7c75)
        (assert tmp%16#0) // application log value is not the result of an ABI return
        let tmp%17#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("echo: test3")
        let tmp%18#0: bool = (== result#2 tmp%17#0)
        (assert tmp%18#0)
        itxn_begin
        let tmp%19#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("test4")
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) tmp%19#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let result#3: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%3#0)
        let length%3#0: uint64 = array_len(result#3)
        let add%3#0: uint64 = (+ length%3#0 2u)
        let len%3#0: uint64 = (len result#3)
        let eq%3#0: bool = (== len%3#0 add%3#0)
        (assert eq%3#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%21#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%22#0: bool = (== tmp%21#0 0x151f7c75)
        (assert tmp%22#0) // application log value is not the result of an ABI return
        let tmp%23#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("echo: test4")
        let tmp%24#0: bool = (== result#3 tmp%23#0)
        (assert tmp%24#0)
        itxn_begin
        let tmp%25#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("test5")
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) tmp%25#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%4#0: bytes = (itxn LastLog)
        let result#4: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%4#0)
        let length%4#0: uint64 = array_len(result#4)
        let add%4#0: uint64 = (+ length%4#0 2u)
        let len%4#0: uint64 = (len result#4)
        let eq%4#0: bool = (== len%4#0 add%4#0)
        (assert eq%4#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%27#0: bytes = ((extract 0 4) awst_tmp%4#0)
        let tmp%28#0: bool = (== tmp%27#0 0x151f7c75)
        (assert tmp%28#0) // application log value is not the result of an ABI return
        let tmp%29#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("echo: test5")
        let tmp%30#0: bool = (== result#4 tmp%29#0)
        (assert tmp%30#0)
        exit 1u

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload[routing]() -> void:
    block@0: // L48
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        itxn_begin
        let tmp%0#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("typed + ignore")
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) tmp%0#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%1#1: bytes = ((extract 4 0) awst_tmp%0#0)
        let length%0#0: uint64 = array_len(tmp%1#1)
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#1: uint64 = (len tmp%1#1)
        let eq%0#1: bool = (== len%0#1 add%0#0)
        (assert eq%0#1) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%2#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // application log value is not the result of an ABI return
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%4#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let length%1#0: uint64 = array_len(tmp%4#0)
        let add%1#0: uint64 = (+ length%1#0 2u)
        let len%1#0: uint64 = (len tmp%4#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%5#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
        (assert tmp%6#0) // application log value is not the result of an ABI return
        let tmp%7#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("echo: typed + ignore")
        let tmp%8#0: bool = (== tmp%4#0 tmp%7#0)
        (assert tmp%8#0)
        itxn_begin
        let tmp%9#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("untyped + ignore")
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) tmp%9#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%10#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let length%2#0: uint64 = array_len(tmp%10#0)
        let add%2#0: uint64 = (+ length%2#0 2u)
        let len%2#0: uint64 = (len tmp%10#0)
        let eq%2#0: bool = (== len%2#0 add%2#0)
        (assert eq%2#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%11#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%12#0: bool = (== tmp%11#0 0x151f7c75)
        (assert tmp%12#0) // application log value is not the result of an ABI return
        let tmp%13#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("echo: untyped + ignore")
        let tmp%14#0: bool = (== tmp%10#0 tmp%13#0)
        (assert tmp%14#0)
        itxn_begin
        let tmp%15#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("tuple")
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) tmp%15#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let result.0#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%3#0)
        let length%3#0: uint64 = array_len(result.0#0)
        let add%3#0: uint64 = (+ length%3#0 2u)
        let len%3#0: uint64 = (len result.0#0)
        let eq%3#0: bool = (== len%3#0 add%3#0)
        (assert eq%3#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%17#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%18#0: bool = (== tmp%17#0 0x151f7c75)
        (assert tmp%18#0) // application log value is not the result of an ABI return
        let result.1.LastLog#0: bytes = (itxn LastLog)
        let tmp%19#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("echo: tuple")
        let tmp%20#0: bool = (== result.0#0 tmp%19#0)
        (assert tmp%20#0)
        let tmp%21#0: bytes = ((extract 4 0) result.1.LastLog#0)
        let length%4#0: uint64 = array_len(tmp%21#0)
        let add%4#0: uint64 = (+ length%4#0 2u)
        let len%4#0: uint64 = (len tmp%21#0)
        let eq%4#0: bool = (== len%4#0 add%4#0)
        (assert eq%4#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%22#0: bytes = ((extract 0 4) result.1.LastLog#0)
        let tmp%23#0: bool = (== tmp%22#0 0x151f7c75)
        (assert tmp%23#0) // application log value is not the result of an ABI return
        let tmp%25#0: bool = (== tmp%21#0 tmp%19#0)
        (assert tmp%25#0)
        itxn_begin
        let tmp%26#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("untyped")
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) tmp%26#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn_result.LastLog#0: bytes = (itxn LastLog)
        let tmp%27#0: bytes = ((extract 4 0) txn_result.LastLog#0)
        let length%5#0: uint64 = array_len(tmp%27#0)
        let add%5#0: uint64 = (+ length%5#0 2u)
        let len%5#0: uint64 = (len tmp%27#0)
        let eq%5#0: bool = (== len%5#0 add%5#0)
        (assert eq%5#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%28#0: bytes = ((extract 0 4) txn_result.LastLog#0)
        let tmp%29#0: bool = (== tmp%28#0 0x151f7c75)
        (assert tmp%29#0) // application log value is not the result of an ABI return
        let tmp%30#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("echo: untyped")
        let tmp%31#0: bool = (== tmp%27#0 tmp%30#0)
        (assert tmp%31#0)
        exit 1u

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion[routing]() -> void:
    block@0: // L63
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        itxn_begin
        let tmp%0#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("converted1")
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) tmp%0#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%1#1: bool = (== txn.LastLog#0 0x636f6e76657274656431)
        (assert tmp%1#1)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(uint64)void")
        ((itxn_field ApplicationArgs) 0x0000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#1: bytes = (itxn LastLog)
        let tmp%2#0: bytes = (itob 2u)
        let tmp%3#0: bool = (== txn.LastLog#1 tmp%2#0)
        (assert tmp%3#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(uint512)void")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#2: bytes = (itxn LastLog)
        let tmp%7#0: bool = (== txn.LastLog#2 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)
        (assert tmp%7#0)
        itxn_begin
        let tmp%8#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x34)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(byte[])void")
        ((itxn_field ApplicationArgs) tmp%8#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#3: bytes = (itxn LastLog)
        let tmp%9#0: bool = (== txn.LastLog#3 0x34)
        (assert tmp%9#0)
        itxn_begin
        let tmp%10#0: Encoded(bool8) = bytes_encode<bool8>(1u)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(bool)void")
        ((itxn_field ApplicationArgs) tmp%10#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#4: bytes = (itxn LastLog)
        let tmp%11#0: bool = (== txn.LastLog#4 0x54727565)
        (assert tmp%11#0)
        exit 1u

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args[routing]() -> void:
    block@0: // L80
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        itxn_begin
        let tmp%0#1: Encoded(uint8,uint8,uint8,uint8) = bytes_encode<(uint8,uint8,uint8,uint8)>(0xde, 0xad, 0xbe, 0xef)
        let tmp%1#1: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = bytes_encode<(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)>(0x0f, 0x10, 0x11, 0x12, tmp%0#1, 0x14)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]")
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x0000000000000002)
        ((itxn_field ApplicationArgs) 0x0000000000000003)
        ((itxn_field ApplicationArgs) 0x0000000000000004)
        ((itxn_field ApplicationArgs) 0x0000000000000005)
        ((itxn_field ApplicationArgs) 0x0000000000000006)
        ((itxn_field ApplicationArgs) 0x0000000000000007)
        ((itxn_field ApplicationArgs) 0x0000000000000008)
        ((itxn_field ApplicationArgs) 0x0000000000000009)
        ((itxn_field ApplicationArgs) 0x000000000000000a)
        ((itxn_field ApplicationArgs) 0x000000000000000b)
        ((itxn_field ApplicationArgs) 0x000000000000000c)
        ((itxn_field ApplicationArgs) 0x000000000000000d)
        ((itxn_field ApplicationArgs) 0x000000000000000e)
        ((itxn_field ApplicationArgs) tmp%1#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let result#0: Encoded(len+uint8[]) = ((extract 4 0) awst_tmp%0#0)
        let length%0#0: uint64 = array_len(result#0)
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#1: uint64 = (len result#0)
        let eq%0#1: bool = (== len%0#1 add%0#0)
        (assert eq%0#1) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let tmp%5#0: bytes = decode_bytes<bytes>(result#0)
        let tmp%6#0: bool = (== tmp%5#0 0x0f101112deadbeef14)
        (assert tmp%6#0)
        exit 1u

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_void[routing]() -> void:
    block@0: // L108
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        itxn_begin
        let tmp%0#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("World1")
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) tmp%0#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%1#1: bool = (== txn.LastLog#0 0x576f726c6431)
        (assert tmp%1#1)
        itxn_begin
        let tmp%2#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("World2")
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) tmp%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#1: bytes = (itxn LastLog)
        let tmp%3#0: bool = (== txn.LastLog#1 0x576f726c6432)
        (assert tmp%3#0)
        itxn_begin
        let tmp%4#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("World3")
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) tmp%4#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#2: bytes = (itxn LastLog)
        let tmp%5#0: bool = (== txn.LastLog#2 0x576f726c6433)
        (assert tmp%5#0)
        itxn_begin
        let tmp%6#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("World4")
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) tmp%6#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#3: bytes = (itxn LastLog)
        let tmp%7#0: bool = (== txn.LastLog#3 0x576f726c6434)
        (assert tmp%7#0)
        exit 1u

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types[routing]() -> void:
    block@0: // L122
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let asset#0: uint64 = decode_bytes<uint64>(tmp%2#0)
        itxn_begin
        let tmp%1#1: account = (global CurrentApplicationAddress)
        let tmp%2#1: Encoded(uint8[32]) = bytes_encode<uint8[32]>(tmp%1#1)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(uint64,address,uint64)void")
        ((itxn_field ApplicationArgs) tmp%2#0)
        ((itxn_field ApplicationArgs) tmp%2#1)
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
        (assert check%0#0) // asset exists
        let tmp%4#0: account = (global CurrentApplicationAddress)
        let tmp%5#0: bytes = (concat value%0#0 tmp%4#0)
        let (value%1#0: account, check%1#0: bool) = ((app_params_get AppAddress) app#0)
        (assert check%1#0) // application exists
        let tmp%6#0: bytes = (concat tmp%5#0 value%1#0)
        let tmp%7#0: bool = (== txn.LastLog#0 tmp%6#0)
        (assert tmp%7#0)
        exit 1u

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address[routing]() -> void:
    block@0: // L136
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        itxn_begin
        let tmp%0#1: account = (global CurrentApplicationAddress)
        let tmp%1#1: Encoded(uint8[32]) = bytes_encode<uint8[32]>(tmp%0#1)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(address)void")
        ((itxn_field ApplicationArgs) tmp%1#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%2#0: account = (global CurrentApplicationAddress)
        let tmp%3#0: bool = (== txn.LastLog#0 tmp%2#0)
        (assert tmp%3#0)
        exit 1u

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string[routing]() -> void:
    block@0: // L145
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        itxn_begin
        let tmp%0#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("s")
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
        ((itxn_field ApplicationArgs) tmp%0#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%1#1: bytes = ((extract 4 0) awst_tmp%0#0)
        let length%0#0: uint64 = array_len(tmp%1#1)
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#1: uint64 = (len tmp%1#1)
        let eq%0#1: bool = (== len%0#1 add%0#0)
        (assert eq%0#1) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%2#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // application log value is not the result of an ABI return
        let result1#0: string = decode_bytes<string>(tmp%1#1)
        let tmp%5#0: bool = (== result1#0 "echo: s")
        (assert tmp%5#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
        ((itxn_field ApplicationArgs) tmp%0#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%7#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let length%1#0: uint64 = array_len(tmp%7#0)
        let add%1#0: uint64 = (+ length%1#0 2u)
        let len%1#0: uint64 = (len tmp%7#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%8#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%9#0: bool = (== tmp%8#0 0x151f7c75)
        (assert tmp%9#0) // application log value is not the result of an ABI return
        let result2#0: string = decode_bytes<string>(tmp%7#0)
        let tmp%11#0: bool = (== result2#0 result1#0)
        (assert tmp%11#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
        ((itxn_field ApplicationArgs) tmp%0#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%13#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let length%2#0: uint64 = array_len(tmp%13#0)
        let add%2#0: uint64 = (+ length%2#0 2u)
        let len%2#0: uint64 = (len tmp%13#0)
        let eq%2#0: bool = (== len%2#0 add%2#0)
        (assert eq%2#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%14#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%15#0: bool = (== tmp%14#0 0x151f7c75)
        (assert tmp%15#0) // application log value is not the result of an ABI return
        let result3#0: string = decode_bytes<string>(tmp%13#0)
        let tmp%17#0: bool = (== result3#0 result1#0)
        (assert tmp%17#0)
        exit 1u

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes[routing]() -> void:
    block@0: // L156
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        itxn_begin
        let tmp%0#1: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x62)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
        ((itxn_field ApplicationArgs) tmp%0#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%1#1: bytes = ((extract 4 0) awst_tmp%0#0)
        let length%0#0: uint64 = array_len(tmp%1#1)
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#1: uint64 = (len tmp%1#1)
        let eq%0#1: bool = (== len%0#1 add%0#0)
        (assert eq%0#1) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%2#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // application log value is not the result of an ABI return
        let result1#0: bytes = decode_bytes<bytes>(tmp%1#1)
        let tmp%5#0: bool = (== result1#0 0x6563686f3a2062)
        (assert tmp%5#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
        ((itxn_field ApplicationArgs) tmp%0#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%7#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let length%1#0: uint64 = array_len(tmp%7#0)
        let add%1#0: uint64 = (+ length%1#0 2u)
        let len%1#0: uint64 = (len tmp%7#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%8#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%9#0: bool = (== tmp%8#0 0x151f7c75)
        (assert tmp%9#0) // application log value is not the result of an ABI return
        let result2#0: bytes = decode_bytes<bytes>(tmp%7#0)
        let tmp%11#0: bool = (== result2#0 result1#0)
        (assert tmp%11#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
        ((itxn_field ApplicationArgs) tmp%0#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%13#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let length%2#0: uint64 = array_len(tmp%13#0)
        let add%2#0: uint64 = (+ length%2#0 2u)
        let len%2#0: uint64 = (len tmp%13#0)
        let eq%2#0: bool = (== len%2#0 add%2#0)
        (assert eq%2#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%14#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%15#0: bool = (== tmp%14#0 0x151f7c75)
        (assert tmp%15#0) // application log value is not the result of an ABI return
        let result3#0: bytes = decode_bytes<bytes>(tmp%13#0)
        let tmp%17#0: bool = (== result3#0 result1#0)
        (assert tmp%17#0)
        exit 1u

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64[routing]() -> void:
    block@0: // L169
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#1: bytes = ((extract 4 0) awst_tmp%0#0)
        let len%0#1: uint64 = (len tmp%0#1)
        let eq%0#1: bool = (== len%0#1 8u)
        (assert eq%0#1) // invalid number of bytes for arc4.uint64
        let tmp%1#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#1 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let result1#0: uint64 = decode_bytes<uint64>(tmp%0#1)
        let tmp%4#0: bool = (== result1#0 2u)
        (assert tmp%4#0)
        itxn_begin
        let tmp%5#0: Encoded(uint64) = bytes_encode<uint64>(1u)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
        ((itxn_field ApplicationArgs) tmp%5#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%6#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let len%1#0: uint64 = (len tmp%6#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let tmp%7#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%8#0: bool = (== tmp%7#0 0x151f7c75)
        (assert tmp%8#0) // application log value is not the result of an ABI return
        let result2#0: uint64 = decode_bytes<uint64>(tmp%6#0)
        let tmp%10#0: bool = (== result2#0 result1#0)
        (assert tmp%10#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%11#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let len%2#0: uint64 = (len tmp%11#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint64
        let tmp%12#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%13#0: bool = (== tmp%12#0 0x151f7c75)
        (assert tmp%13#0) // application log value is not the result of an ABI return
        let result3#0: uint64 = decode_bytes<uint64>(tmp%11#0)
        let tmp%15#0: bool = (== result3#0 result1#0)
        (assert tmp%15#0)
        exit 1u

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint[routing]() -> void:
    block@0: // L180
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#1: bytes = ((extract 4 0) awst_tmp%0#0)
        let len%0#1: uint64 = (len tmp%0#1)
        let eq%0#1: bool = (== len%0#1 64u)
        (assert eq%0#1) // invalid number of bytes for arc4.uint512
        let tmp%1#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#1 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let result1#0: biguint = decode_bytes<biguint>(tmp%0#1)
        let tmp%4#0: bool = (b== result1#0 3b)
        (assert tmp%4#0)
        itxn_begin
        let tmp%5#0: Encoded(uint512) = bytes_encode<uint512>(2b)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
        ((itxn_field ApplicationArgs) tmp%5#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%6#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let len%1#0: uint64 = (len tmp%6#0)
        let eq%1#0: bool = (== len%1#0 64u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint512
        let tmp%7#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%8#0: bool = (== tmp%7#0 0x151f7c75)
        (assert tmp%8#0) // application log value is not the result of an ABI return
        let result2#0: biguint = decode_bytes<biguint>(tmp%6#0)
        let tmp%10#0: bool = (b== result2#0 result1#0)
        (assert tmp%10#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%11#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let len%2#0: uint64 = (len tmp%11#0)
        let eq%2#0: bool = (== len%2#0 64u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint512
        let tmp%12#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%13#0: bool = (== tmp%12#0 0x151f7c75)
        (assert tmp%13#0) // application log value is not the result of an ABI return
        let result3#0: biguint = decode_bytes<biguint>(tmp%11#0)
        let tmp%15#0: bool = (b== result3#0 result1#0)
        (assert tmp%15#0)
        exit 1u

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple[routing]() -> void:
    block@0: // L191
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        itxn_begin
        let tmp%0#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("s1")
        let tmp%1#1: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x6231)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) tmp%0#1)
        ((itxn_field ApplicationArgs) tmp%1#1)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let result1#0: Encoded((len+utf8[]),(len+uint8[]),uint64,uint512) = ((extract 4 0) awst_tmp%0#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 result1#0 0u) // on error: invalid tuple encoding
        let eq%0#1: bool = (== extract_uint16%0#0 76u)
        (assert eq%0#1) // invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)
        let tmp%3#0: Encoded(len+utf8[]) = extract_value(result1#0, 0)
        let length%0#0: uint64 = array_len(tmp%3#0)
        let add%1#0: uint64 = (+ length%0#0 78u)
        let extract_uint16%1#0: uint64 = (extract_uint16 result1#0 2u) // on error: invalid tuple encoding
        let eq%1#0: bool = (== extract_uint16%1#0 add%1#0)
        (assert eq%1#0) // invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)
        let tmp%4#0: Encoded(len+uint8[]) = extract_value(result1#0, 1)
        let length%1#0: uint64 = array_len(tmp%4#0)
        let add%2#0: uint64 = (+ length%1#0 2u)
        let add%3#0: uint64 = (+ add%1#0 add%2#0)
        let len%0#1: uint64 = (len result1#0)
        let eq%2#0: bool = (== len%0#1 add%3#0)
        (assert eq%2#0) // invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>
        let tmp%5#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
        (assert tmp%6#0) // application log value is not the result of an ABI return
        let (s#0: Encoded(len+utf8[]), b#0: Encoded(len+uint8[]), u#0: Encoded(uint64), bu#0: Encoded(uint512)) = decode_bytes<(Encoded(len+utf8[]),Encoded(len+uint8[]),Encoded(uint64),Encoded(uint512),)>(result1#0)
        let tmp%11#0: string = decode_bytes<string>(s#0)
        let tmp%12#0: bool = (== tmp%11#0 "echo: s1")
        (assert tmp%12#0)
        let tmp%13#0: bytes = decode_bytes<bytes>(b#0)
        let tmp%14#0: bool = (== tmp%13#0 0x6563686f3a206231)
        (assert tmp%14#0)
        let tmp%15#0: uint64 = decode_bytes<uint64>(u#0)
        let tmp%16#0: bool = (== tmp%15#0 2u)
        (assert tmp%16#0)
        let tmp%17#0: biguint = decode_bytes<biguint>(bu#0)
        let tmp%18#0: bool = (b== tmp%17#0 3b)
        (assert tmp%18#0)
        itxn_begin
        let tmp%21#0: Encoded(uint64) = bytes_encode<uint64>(1u)
        let tmp%22#0: Encoded(uint512) = bytes_encode<uint512>(2b)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) tmp%0#1)
        ((itxn_field ApplicationArgs) tmp%1#1)
        ((itxn_field ApplicationArgs) tmp%21#0)
        ((itxn_field ApplicationArgs) tmp%22#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let result2#0: Encoded((len+utf8[]),(len+uint8[]),uint64,uint512) = ((extract 4 0) awst_tmp%1#0)
        let extract_uint16%2#0: uint64 = (extract_uint16 result2#0 0u) // on error: invalid tuple encoding
        let eq%3#0: bool = (== extract_uint16%2#0 76u)
        (assert eq%3#0) // invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)
        let tmp%24#0: Encoded(len+utf8[]) = extract_value(result2#0, 0)
        let length%2#0: uint64 = array_len(tmp%24#0)
        let add%5#0: uint64 = (+ length%2#0 78u)
        let extract_uint16%3#0: uint64 = (extract_uint16 result2#0 2u) // on error: invalid tuple encoding
        let eq%4#0: bool = (== extract_uint16%3#0 add%5#0)
        (assert eq%4#0) // invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)
        let tmp%25#0: Encoded(len+uint8[]) = extract_value(result2#0, 1)
        let length%3#0: uint64 = array_len(tmp%25#0)
        let add%6#0: uint64 = (+ length%3#0 2u)
        let add%7#0: uint64 = (+ add%5#0 add%6#0)
        let len%1#0: uint64 = (len result2#0)
        let eq%5#0: bool = (== len%1#0 add%7#0)
        (assert eq%5#0) // invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>
        let tmp%26#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%27#0: bool = (== tmp%26#0 0x151f7c75)
        (assert tmp%27#0) // application log value is not the result of an ABI return
        let tmp%28#0: bool = (== result1#0 result2#0)
        (assert tmp%28#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) tmp%0#1)
        ((itxn_field ApplicationArgs) tmp%1#1)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let result3#0: Encoded((len+utf8[]),(len+uint8[]),uint64,uint512) = ((extract 4 0) awst_tmp%2#0)
        let extract_uint16%4#0: uint64 = (extract_uint16 result3#0 0u) // on error: invalid tuple encoding
        let eq%6#0: bool = (== extract_uint16%4#0 76u)
        (assert eq%6#0) // invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)
        let tmp%32#0: Encoded(len+utf8[]) = extract_value(result3#0, 0)
        let length%4#0: uint64 = array_len(tmp%32#0)
        let add%9#0: uint64 = (+ length%4#0 78u)
        let extract_uint16%5#0: uint64 = (extract_uint16 result3#0 2u) // on error: invalid tuple encoding
        let eq%7#0: bool = (== extract_uint16%5#0 add%9#0)
        (assert eq%7#0) // invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)
        let tmp%33#0: Encoded(len+uint8[]) = extract_value(result3#0, 1)
        let length%5#0: uint64 = array_len(tmp%33#0)
        let add%10#0: uint64 = (+ length%5#0 2u)
        let add%11#0: uint64 = (+ add%9#0 add%10#0)
        let len%2#0: uint64 = (len result3#0)
        let eq%8#0: bool = (== len%2#0 add%11#0)
        (assert eq%8#0) // invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>
        let tmp%34#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%35#0: bool = (== tmp%34#0 0x151f7c75)
        (assert tmp%35#0) // application log value is not the result of an ABI return
        let tmp%36#0: bool = (== result1#0 result3#0)
        (assert tmp%36#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) tmp%0#1)
        ((itxn_field ApplicationArgs) tmp%1#1)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%39#0: bytes = ((extract 4 0) awst_tmp%3#0)
        let extract_uint16%6#0: uint64 = (extract_uint16 tmp%39#0 0u) // on error: invalid tuple encoding
        let eq%9#0: bool = (== extract_uint16%6#0 76u)
        (assert eq%9#0) // invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)
        let tmp%40#0: Encoded(len+utf8[]) = extract_value(tmp%39#0, 0)
        let length%6#0: uint64 = array_len(tmp%40#0)
        let add%13#0: uint64 = (+ length%6#0 78u)
        let extract_uint16%7#0: uint64 = (extract_uint16 tmp%39#0 2u) // on error: invalid tuple encoding
        let eq%10#0: bool = (== extract_uint16%7#0 add%13#0)
        (assert eq%10#0) // invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)
        let tmp%41#0: Encoded(len+uint8[]) = extract_value(tmp%39#0, 1)
        let length%7#0: uint64 = array_len(tmp%41#0)
        let add%14#0: uint64 = (+ length%7#0 2u)
        let add%15#0: uint64 = (+ add%13#0 add%14#0)
        let len%3#0: uint64 = (len tmp%39#0)
        let eq%11#0: bool = (== len%3#0 add%15#0)
        (assert eq%11#0) // invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>
        let tmp%42#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%43#0: bool = (== tmp%42#0 0x151f7c75)
        (assert tmp%43#0) // application log value is not the result of an ABI return
        let (result_native.0#0: string, result_native.1#0: bytes, result_native.2#0: uint64, result_native.3#0: biguint) = decode_bytes<(string,bytes,uint64,biguint,)>(tmp%39#0)
        let tmp%53#0: bool = (== tmp%11#0 result_native.0#0)
        (assert tmp%53#0)
        let tmp%59#0: bool = (== tmp%13#0 result_native.1#0)
        (assert tmp%59#0)
        let tmp%65#0: bool = (== tmp%15#0 result_native.2#0)
        (assert tmp%65#0)
        let tmp%71#0: bool = (b== tmp%17#0 result_native.3#0)
        (assert tmp%71#0)
        exit 1u

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref[routing]() -> void:
    block@0: // L250
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        itxn_begin
        let tmp%0#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("s1")
        let tmp%1#1: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x6231)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) tmp%0#1)
        ((itxn_field ApplicationArgs) tmp%1#1)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%2#0 0u) // on error: invalid tuple encoding
        let eq%0#1: bool = (== extract_uint16%0#0 76u)
        (assert eq%0#1) // invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)
        let tmp%3#0: Encoded(len+utf8[]) = extract_value(tmp%2#0, 0)
        let length%0#0: uint64 = array_len(tmp%3#0)
        let add%1#0: uint64 = (+ length%0#0 78u)
        let extract_uint16%1#0: uint64 = (extract_uint16 tmp%2#0 2u) // on error: invalid tuple encoding
        let eq%1#0: bool = (== extract_uint16%1#0 add%1#0)
        (assert eq%1#0) // invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)
        let tmp%4#0: Encoded(len+uint8[]) = extract_value(tmp%2#0, 1)
        let length%1#0: uint64 = array_len(tmp%4#0)
        let add%2#0: uint64 = (+ length%1#0 2u)
        let add%3#0: uint64 = (+ add%1#0 add%2#0)
        let len%0#1: uint64 = (len tmp%2#0)
        let eq%2#0: bool = (== len%0#1 add%3#0)
        (assert eq%2#0) // invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>
        let tmp%5#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
        (assert tmp%6#0) // application log value is not the result of an ABI return
        let (result.0#0: string, result.1#0: bytes, result.2#0: uint64, result.3#0: biguint) = decode_bytes<(string,bytes,uint64,biguint,)>(tmp%2#0)
        let tmp%11#0: bool = (== result.0#0 "echo: s1")
        (assert tmp%11#0)
        let tmp%12#0: bool = (== result.1#0 0x6563686f3a206231)
        (assert tmp%12#0)
        let tmp%13#0: bool = (== result.2#0 2u)
        (assert tmp%13#0)
        let tmp%14#0: bool = (b== result.3#0 3b)
        (assert tmp%14#0)
        itxn_begin
        let tmp%17#0: Encoded(uint64) = bytes_encode<uint64>(1u)
        let tmp%18#0: Encoded(uint512) = bytes_encode<uint512>(2b)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) tmp%0#1)
        ((itxn_field ApplicationArgs) tmp%1#1)
        ((itxn_field ApplicationArgs) tmp%17#0)
        ((itxn_field ApplicationArgs) tmp%18#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%19#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let extract_uint16%2#0: uint64 = (extract_uint16 tmp%19#0 0u) // on error: invalid tuple encoding
        let eq%3#0: bool = (== extract_uint16%2#0 76u)
        (assert eq%3#0) // invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)
        let tmp%20#0: Encoded(len+utf8[]) = extract_value(tmp%19#0, 0)
        let length%2#0: uint64 = array_len(tmp%20#0)
        let add%5#0: uint64 = (+ length%2#0 78u)
        let extract_uint16%3#0: uint64 = (extract_uint16 tmp%19#0 2u) // on error: invalid tuple encoding
        let eq%4#0: bool = (== extract_uint16%3#0 add%5#0)
        (assert eq%4#0) // invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)
        let tmp%21#0: Encoded(len+uint8[]) = extract_value(tmp%19#0, 1)
        let length%3#0: uint64 = array_len(tmp%21#0)
        let add%6#0: uint64 = (+ length%3#0 2u)
        let add%7#0: uint64 = (+ add%5#0 add%6#0)
        let len%1#0: uint64 = (len tmp%19#0)
        let eq%5#0: bool = (== len%1#0 add%7#0)
        (assert eq%5#0) // invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>
        let tmp%22#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%23#0: bool = (== tmp%22#0 0x151f7c75)
        (assert tmp%23#0) // application log value is not the result of an ABI return
        let (result_2.0#0: string, result_2.1#0: bytes, result_2.2#0: uint64, result_2.3#0: biguint) = decode_bytes<(string,bytes,uint64,biguint,)>(tmp%19#0)
        let tmp%28#0: bool = (== result_2.0#0 result.0#0)
        let tmp%29#0: bool = (== result_2.1#0 result.1#0)
        let tmp%30#0: bool = (&& tmp%28#0 tmp%29#0)
        let tmp%31#0: bool = (== result_2.2#0 result.2#0)
        let tmp%32#0: bool = (&& tmp%30#0 tmp%31#0)
        let tmp%33#0: bool = (b== result_2.3#0 result.3#0)
        let tmp%34#0: bool = (&& tmp%32#0 tmp%33#0)
        (assert tmp%34#0) // expected native arguments to give the same result
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) tmp%0#1)
        ((itxn_field ApplicationArgs) tmp%1#1)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%37#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let extract_uint16%4#0: uint64 = (extract_uint16 tmp%37#0 0u) // on error: invalid tuple encoding
        let eq%6#0: bool = (== extract_uint16%4#0 76u)
        (assert eq%6#0) // invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)
        let tmp%38#0: Encoded(len+utf8[]) = extract_value(tmp%37#0, 0)
        let length%4#0: uint64 = array_len(tmp%38#0)
        let add%9#0: uint64 = (+ length%4#0 78u)
        let extract_uint16%5#0: uint64 = (extract_uint16 tmp%37#0 2u) // on error: invalid tuple encoding
        let eq%7#0: bool = (== extract_uint16%5#0 add%9#0)
        (assert eq%7#0) // invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)
        let tmp%39#0: Encoded(len+uint8[]) = extract_value(tmp%37#0, 1)
        let length%5#0: uint64 = array_len(tmp%39#0)
        let add%10#0: uint64 = (+ length%5#0 2u)
        let add%11#0: uint64 = (+ add%9#0 add%10#0)
        let len%2#0: uint64 = (len tmp%37#0)
        let eq%8#0: bool = (== len%2#0 add%11#0)
        (assert eq%8#0) // invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>
        let tmp%40#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%41#0: bool = (== tmp%40#0 0x151f7c75)
        (assert tmp%41#0) // application log value is not the result of an ABI return
        let (result_3.0#0: string, result_3.1#0: bytes, result_3.2#0: uint64, result_3.3#0: biguint) = decode_bytes<(string,bytes,uint64,biguint,)>(tmp%37#0)
        let tmp%46#0: bool = (== result_3.0#0 result.0#0)
        let tmp%47#0: bool = (== result_3.1#0 result.1#0)
        let tmp%48#0: bool = (&& tmp%46#0 tmp%47#0)
        let tmp%49#0: bool = (== result_3.2#0 result.2#0)
        let tmp%50#0: bool = (&& tmp%48#0 tmp%49#0)
        let tmp%51#0: bool = (b== result_3.3#0 result.3#0)
        let tmp%52#0: bool = (&& tmp%50#0 tmp%51#0)
        (assert tmp%52#0) // expected arc4 arguments to give the same result
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) tmp%0#1)
        ((itxn_field ApplicationArgs) tmp%1#1)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%55#0: bytes = ((extract 4 0) awst_tmp%3#0)
        let extract_uint16%6#0: uint64 = (extract_uint16 tmp%55#0 0u) // on error: invalid tuple encoding
        let eq%9#0: bool = (== extract_uint16%6#0 76u)
        (assert eq%9#0) // invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)
        let tmp%56#0: Encoded(len+utf8[]) = extract_value(tmp%55#0, 0)
        let length%6#0: uint64 = array_len(tmp%56#0)
        let add%13#0: uint64 = (+ length%6#0 78u)
        let extract_uint16%7#0: uint64 = (extract_uint16 tmp%55#0 2u) // on error: invalid tuple encoding
        let eq%10#0: bool = (== extract_uint16%7#0 add%13#0)
        (assert eq%10#0) // invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)
        let tmp%57#0: Encoded(len+uint8[]) = extract_value(tmp%55#0, 1)
        let length%7#0: uint64 = array_len(tmp%57#0)
        let add%14#0: uint64 = (+ length%7#0 2u)
        let add%15#0: uint64 = (+ add%13#0 add%14#0)
        let len%3#0: uint64 = (len tmp%55#0)
        let eq%11#0: bool = (== len%3#0 add%15#0)
        (assert eq%11#0) // invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>
        let tmp%58#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%59#0: bool = (== tmp%58#0 0x151f7c75)
        (assert tmp%59#0) // application log value is not the result of an ABI return
        let (result_native.0#0: string, result_native.1#0: bytes, result_native.2#0: uint64, result_native.3#0: biguint) = decode_bytes<(string,bytes,uint64,biguint,)>(tmp%55#0)
        let tmp%64#0: bool = (== result_native.0#0 result.0#0)
        let tmp%65#0: bool = (== result_native.1#0 result.1#0)
        let tmp%66#0: bool = (&& tmp%64#0 tmp%65#0)
        let tmp%67#0: bool = (== result_native.2#0 result.2#0)
        let tmp%68#0: bool = (&& tmp%66#0 tmp%67#0)
        let tmp%69#0: bool = (b== result_native.3#0 result.3#0)
        let tmp%70#0: bool = (&& tmp%68#0 tmp%69#0)
        (assert tmp%70#0)
        exit 1u

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples[routing]() -> void:
    block@0: // L300
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        itxn_begin
        let tmp%0#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("s1")
        let tmp%1#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("s2")
        let tmp%2#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x33)
        let tmp%3#0: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = bytes_encode<(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))>(tmp%0#1, tmp%1#1, 0x0000000000000001, 0x0000000000000002, tmp%2#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))")
        ((itxn_field ApplicationArgs) tmp%3#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%4#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%4#0 0u) // on error: invalid tuple encoding
        let eq%0#1: bool = (== extract_uint16%0#0 4u)
        (assert eq%0#1) // invalid tail pointer at index 0 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))
        let tmp%5#0: Encoded((len+utf8[]),(len+utf8[])) = extract_value(tmp%4#0, 0)
        let extract_uint16%1#0: uint64 = (extract_uint16 tmp%5#0 0u) // on error: invalid tuple encoding
        let eq%1#0: bool = (== extract_uint16%1#0 4u)
        (assert eq%1#0) // invalid tail pointer at index 0 of ((len+utf8[]),(len+utf8[]))
        let tmp%6#0: Encoded(len+utf8[]) = extract_value(tmp%4#0, 0, 0)
        let length%0#0: uint64 = array_len(tmp%6#0)
        let add%1#0: uint64 = (+ length%0#0 6u)
        let extract_uint16%2#0: uint64 = (extract_uint16 tmp%5#0 2u) // on error: invalid tuple encoding
        let eq%2#0: bool = (== extract_uint16%2#0 add%1#0)
        (assert eq%2#0) // invalid tail pointer at index 1 of ((len+utf8[]),(len+utf8[]))
        let tmp%7#0: Encoded(len+utf8[]) = extract_value(tmp%4#0, 0, 1)
        let length%1#0: uint64 = array_len(tmp%7#0)
        let add%2#0: uint64 = (+ length%1#0 2u)
        let add%3#0: uint64 = (+ add%1#0 add%2#0)
        let add%4#0: uint64 = (+ 4u add%3#0)
        let extract_uint16%3#0: uint64 = (extract_uint16 tmp%4#0 2u) // on error: invalid tuple encoding
        let eq%3#0: bool = (== extract_uint16%3#0 add%4#0)
        (assert eq%3#0) // invalid tail pointer at index 1 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))
        let tmp%8#0: Encoded(uint64,uint64,(len+uint8[])) = extract_value(tmp%4#0, 1)
        let extract_uint16%4#0: uint64 = (extract_uint16 tmp%8#0 16u) // on error: invalid tuple encoding
        let eq%4#0: bool = (== extract_uint16%4#0 18u)
        (assert eq%4#0) // invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]))
        let tmp%9#0: Encoded(len+uint8[]) = extract_value(tmp%4#0, 1, 2)
        let length%2#0: uint64 = array_len(tmp%9#0)
        let add%6#0: uint64 = (+ length%2#0 20u)
        let add%7#0: uint64 = (+ add%4#0 add%6#0)
        let len%0#1: uint64 = (len tmp%4#0)
        let eq%5#0: bool = (== len%0#1 add%7#0)
        (assert eq%5#0) // invalid number of bytes for arc4.tuple<arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>>,arc4.tuple<arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>>>
        let tmp%10#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%11#0: bool = (== tmp%10#0 0x151f7c75)
        (assert tmp%11#0) // application log value is not the result of an ABI return
        let (result.0.0#0: string, result.0.1#0: Encoded(len+utf8[]), result.1.0#0: uint64, result.1.1#0: Encoded(uint64), result.1.2#0: bytes) = decode_bytes<((string,Encoded(len+utf8[]),),(uint64,Encoded(uint64),bytes,),)>(tmp%4#0)
        let tmp%17#0: bool = (== result.0.0#0 "echo: s1")
        (assert tmp%17#0)
        let tmp%18#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("echo: s2")
        let tmp%19#0: bool = (== result.0.1#0 tmp%18#0)
        (assert tmp%19#0)
        let tmp%20#0: bool = (== result.1.0#0 2u)
        (assert tmp%20#0)
        let tmp%21#0: bool = (b== result.1.1#0 0x0000000000000003)
        (assert tmp%21#0)
        let tmp%22#0: bool = (== result.1.2#0 0x6563686f3a2033)
        (assert tmp%22#0)
        itxn_begin
        let tmp%24#0: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = bytes_encode<(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))>("s1", tmp%1#1, 1u, 0x0000000000000002, 0x33)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))")
        ((itxn_field ApplicationArgs) tmp%24#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%25#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let extract_uint16%5#0: uint64 = (extract_uint16 tmp%25#0 0u) // on error: invalid tuple encoding
        let eq%6#0: bool = (== extract_uint16%5#0 4u)
        (assert eq%6#0) // invalid tail pointer at index 0 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))
        let tmp%26#0: Encoded((len+utf8[]),(len+utf8[])) = extract_value(tmp%25#0, 0)
        let extract_uint16%6#0: uint64 = (extract_uint16 tmp%26#0 0u) // on error: invalid tuple encoding
        let eq%7#0: bool = (== extract_uint16%6#0 4u)
        (assert eq%7#0) // invalid tail pointer at index 0 of ((len+utf8[]),(len+utf8[]))
        let tmp%27#0: Encoded(len+utf8[]) = extract_value(tmp%25#0, 0, 0)
        let length%3#0: uint64 = array_len(tmp%27#0)
        let add%9#0: uint64 = (+ length%3#0 6u)
        let extract_uint16%7#0: uint64 = (extract_uint16 tmp%26#0 2u) // on error: invalid tuple encoding
        let eq%8#0: bool = (== extract_uint16%7#0 add%9#0)
        (assert eq%8#0) // invalid tail pointer at index 1 of ((len+utf8[]),(len+utf8[]))
        let tmp%28#0: Encoded(len+utf8[]) = extract_value(tmp%25#0, 0, 1)
        let length%4#0: uint64 = array_len(tmp%28#0)
        let add%10#0: uint64 = (+ length%4#0 2u)
        let add%11#0: uint64 = (+ add%9#0 add%10#0)
        let add%12#0: uint64 = (+ 4u add%11#0)
        let extract_uint16%8#0: uint64 = (extract_uint16 tmp%25#0 2u) // on error: invalid tuple encoding
        let eq%9#0: bool = (== extract_uint16%8#0 add%12#0)
        (assert eq%9#0) // invalid tail pointer at index 1 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))
        let tmp%29#0: Encoded(uint64,uint64,(len+uint8[])) = extract_value(tmp%25#0, 1)
        let extract_uint16%9#0: uint64 = (extract_uint16 tmp%29#0 16u) // on error: invalid tuple encoding
        let eq%10#0: bool = (== extract_uint16%9#0 18u)
        (assert eq%10#0) // invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]))
        let tmp%30#0: Encoded(len+uint8[]) = extract_value(tmp%25#0, 1, 2)
        let length%5#0: uint64 = array_len(tmp%30#0)
        let add%14#0: uint64 = (+ length%5#0 20u)
        let add%15#0: uint64 = (+ add%12#0 add%14#0)
        let len%1#0: uint64 = (len tmp%25#0)
        let eq%11#0: bool = (== len%1#0 add%15#0)
        (assert eq%11#0) // invalid number of bytes for arc4.tuple<arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>>,arc4.tuple<arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>>>
        let tmp%31#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%32#0: bool = (== tmp%31#0 0x151f7c75)
        (assert tmp%32#0) // application log value is not the result of an ABI return
        let (result.0.0#1: string, result.0.1#1: Encoded(len+utf8[]), result.1.0#1: uint64, result.1.1#1: Encoded(uint64), result.1.2#1: bytes) = decode_bytes<((string,Encoded(len+utf8[]),),(uint64,Encoded(uint64),bytes,),)>(tmp%25#0)
        let tmp%38#0: bool = (== result.0.0#1 "echo: s1")
        (assert tmp%38#0)
        let tmp%40#0: bool = (== result.0.1#1 tmp%18#0)
        (assert tmp%40#0)
        let tmp%41#0: bool = (== result.1.0#1 2u)
        (assert tmp%41#0)
        let tmp%42#0: bool = (b== result.1.1#1 0x0000000000000003)
        (assert tmp%42#0)
        let tmp%43#0: bool = (== result.1.2#1 0x6563686f3a2033)
        (assert tmp%43#0)
        itxn_begin
        let tmp%44#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("s1b")
        let tmp%45#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("s2b")
        let tmp%46#0: Encoded((len+utf8[]),(len+utf8[])) = bytes_encode<((len+utf8[]),(len+utf8[]))>(tmp%44#0, tmp%45#0)
        let tmp%47#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x3362)
        let tmp%48#0: Encoded(uint64,uint64,(len+uint8[])) = bytes_encode<(uint64,uint64,(len+uint8[]))>(0x000000000000000b, 0x0000000000000015, tmp%47#0)
        let tmp%49#0: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = bytes_encode<(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))>(tmp%46#0, tmp%48#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))")
        ((itxn_field ApplicationArgs) tmp%49#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%50#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let extract_uint16%10#0: uint64 = (extract_uint16 tmp%50#0 0u) // on error: invalid tuple encoding
        let eq%12#0: bool = (== extract_uint16%10#0 4u)
        (assert eq%12#0) // invalid tail pointer at index 0 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))
        let tmp%51#0: Encoded((len+utf8[]),(len+utf8[])) = extract_value(tmp%50#0, 0)
        let extract_uint16%11#0: uint64 = (extract_uint16 tmp%51#0 0u) // on error: invalid tuple encoding
        let eq%13#0: bool = (== extract_uint16%11#0 4u)
        (assert eq%13#0) // invalid tail pointer at index 0 of ((len+utf8[]),(len+utf8[]))
        let tmp%52#0: Encoded(len+utf8[]) = extract_value(tmp%50#0, 0, 0)
        let length%6#0: uint64 = array_len(tmp%52#0)
        let add%17#0: uint64 = (+ length%6#0 6u)
        let extract_uint16%12#0: uint64 = (extract_uint16 tmp%51#0 2u) // on error: invalid tuple encoding
        let eq%14#0: bool = (== extract_uint16%12#0 add%17#0)
        (assert eq%14#0) // invalid tail pointer at index 1 of ((len+utf8[]),(len+utf8[]))
        let tmp%53#0: Encoded(len+utf8[]) = extract_value(tmp%50#0, 0, 1)
        let length%7#0: uint64 = array_len(tmp%53#0)
        let add%18#0: uint64 = (+ length%7#0 2u)
        let add%19#0: uint64 = (+ add%17#0 add%18#0)
        let add%20#0: uint64 = (+ 4u add%19#0)
        let extract_uint16%13#0: uint64 = (extract_uint16 tmp%50#0 2u) // on error: invalid tuple encoding
        let eq%15#0: bool = (== extract_uint16%13#0 add%20#0)
        (assert eq%15#0) // invalid tail pointer at index 1 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))
        let tmp%54#0: Encoded(uint64,uint64,(len+uint8[])) = extract_value(tmp%50#0, 1)
        let extract_uint16%14#0: uint64 = (extract_uint16 tmp%54#0 16u) // on error: invalid tuple encoding
        let eq%16#0: bool = (== extract_uint16%14#0 18u)
        (assert eq%16#0) // invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]))
        let tmp%55#0: Encoded(len+uint8[]) = extract_value(tmp%50#0, 1, 2)
        let length%8#0: uint64 = array_len(tmp%55#0)
        let add%22#0: uint64 = (+ length%8#0 20u)
        let add%23#0: uint64 = (+ add%20#0 add%22#0)
        let len%2#0: uint64 = (len tmp%50#0)
        let eq%17#0: bool = (== len%2#0 add%23#0)
        (assert eq%17#0) // invalid number of bytes for arc4.tuple<arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>>,arc4.tuple<arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>>>
        let tmp%56#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%57#0: bool = (== tmp%56#0 0x151f7c75)
        (assert tmp%57#0) // application log value is not the result of an ABI return
        let (result.0.0#2: string, result.0.1#2: Encoded(len+utf8[]), result.1.0#2: uint64, result.1.1#2: Encoded(uint64), result.1.2#2: bytes) = decode_bytes<((string,Encoded(len+utf8[]),),(uint64,Encoded(uint64),bytes,),)>(tmp%50#0)
        let tmp%63#0: bool = (== result.0.0#2 "echo: s1b")
        (assert tmp%63#0)
        let tmp%64#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("echo: s2b")
        let tmp%65#0: bool = (== result.0.1#2 tmp%64#0)
        (assert tmp%65#0)
        let tmp%66#0: bool = (== result.1.0#2 12u)
        (assert tmp%66#0)
        let tmp%67#0: bool = (b== result.1.1#2 0x0000000000000016)
        (assert tmp%67#0)
        let tmp%68#0: bool = (== result.1.2#2 0x6563686f3a203362)
        (assert tmp%68#0)
        exit 1u

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args[routing]() -> void:
    block@0: // L346
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "no_args()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#1: bytes = ((extract 4 0) awst_tmp%0#0)
        let len%0#1: uint64 = (len tmp%0#1)
        let eq%0#1: bool = (== len%0#1 8u)
        (assert eq%0#1) // invalid number of bytes for arc4.uint64
        let tmp%1#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#1 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let result#0: uint64 = decode_bytes<uint64>(tmp%0#1)
        let tmp%4#0: bool = (== result#0 42u)
        (assert tmp%4#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "no_args()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let arc4_result#0: Encoded(uint64) = ((extract 4 0) awst_tmp%1#0)
        let len%1#0: uint64 = (len arc4_result#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // application log value is not the result of an ABI return
        let tmp%8#0: bool = (b== arc4_result#0 0x000000000000002a)
        (assert tmp%8#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "no_args()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%9#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let len%2#0: uint64 = (len tmp%9#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint64
        let tmp%10#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%11#0: bool = (== tmp%10#0 0x151f7c75)
        (assert tmp%11#0) // application log value is not the result of an ABI return
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%13#0: bytes = ((extract 4 0) awst_tmp%3#0)
        let len%3#0: uint64 = (len tmp%13#0)
        let eq%3#0: bool = (== len%3#0 8u)
        (assert eq%3#0) // invalid number of bytes for arc4.uint64
        let tmp%14#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%15#0: bool = (== tmp%14#0 0x151f7c75)
        (assert tmp%15#0) // application log value is not the result of an ABI return
        let tmp%16#0: bool = (b== tmp%13#0 0x000000000000002a)
        (assert tmp%16#0)
        exit 1u

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples[routing]() -> void:
    block@0: // L356
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        itxn_begin
        let tmp%0#1: Encoded(uint64,(len+utf8[])) = bytes_encode<(uint64,(len+utf8[]))>(1u, "log 1")
        let tmp%1#1: Encoded(uint64,(len+utf8[])) = bytes_encode<(uint64,(len+utf8[]))>(1u, "log 1")
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "logs_are_equal((uint64,string),(uint64,string))bool")
        ((itxn_field ApplicationArgs) tmp%0#1)
        ((itxn_field ApplicationArgs) tmp%1#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let len%0#1: uint64 = (len tmp%2#0)
        let eq%0#1: bool = (== len%0#1 1u)
        (assert eq%0#1) // invalid number of bytes for arc4.bool
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let result#0: bool = decode_bytes<bool>(tmp%2#0)
        (assert result#0)
        itxn_begin
        let tmp%6#0: Encoded(uint64,(len+utf8[])) = bytes_encode<(uint64,(len+utf8[]))>(2u, "log 2")
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "logs_are_equal((uint64,string),(uint64,string))bool")
        ((itxn_field ApplicationArgs) tmp%6#0)
        ((itxn_field ApplicationArgs) tmp%1#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%8#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let len%1#0: uint64 = (len tmp%8#0)
        let eq%1#0: bool = (== len%1#0 1u)
        (assert eq%1#0) // invalid number of bytes for arc4.bool
        let tmp%9#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
        (assert tmp%10#0) // application log value is not the result of an ABI return
        let result#1: bool = decode_bytes<bool>(tmp%8#0)
        let tmp%12#0: bool = (! result#1)
        (assert tmp%12#0)
        exit 1u

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct[routing]() -> void:
    block@0: // L373
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let tmp%0#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("log 1")
        let log#0: Encoded(uint64,(len+utf8[])) = bytes_encode<(uint64,(len+utf8[]))>(0x0000000000000001, tmp%0#1)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_log_struct((uint64,string))(uint64,string)")
        ((itxn_field ApplicationArgs) log#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let result#0: Encoded(uint64,(len+utf8[])) = ((extract 4 0) awst_tmp%0#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 result#0 8u) // on error: invalid tuple encoding
        let eq%0#1: bool = (== extract_uint16%0#0 10u)
        (assert eq%0#1) // invalid tail pointer at index 1 of (uint64,(len+utf8[]))
        let tmp%3#0: Encoded(len+utf8[]) = extract_value(result#0, 1)
        let length%0#0: uint64 = array_len(tmp%3#0)
        let add%1#0: uint64 = (+ length%0#0 12u)
        let len%0#1: uint64 = (len result#0)
        let eq%1#0: bool = (== len%0#1 add%1#0)
        (assert eq%1#0) // invalid number of bytes for test_cases.typed_abi_call.logger.LogStruct
        let tmp%4#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%5#0: bool = (== tmp%4#0 0x151f7c75)
        (assert tmp%5#0) // application log value is not the result of an ABI return
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%6#0: bool = (== result#0 log#0)
        (assert tmp%6#0) // expected output to match input
        let tmp%7#0: bytes = ((extract 4 0) txn.LastLog#0)
        let extract_uint16%1#0: uint64 = (extract_uint16 tmp%7#0 8u) // on error: invalid tuple encoding
        let eq%2#0: bool = (== extract_uint16%1#0 10u)
        (assert eq%2#0) // invalid tail pointer at index 1 of (uint64,(len+utf8[]))
        let tmp%8#0: Encoded(len+utf8[]) = extract_value(tmp%7#0, 1)
        let length%1#0: uint64 = array_len(tmp%8#0)
        let add%3#0: uint64 = (+ length%1#0 12u)
        let len%1#0: uint64 = (len tmp%7#0)
        let eq%3#0: bool = (== len%1#0 add%3#0)
        (assert eq%3#0) // invalid number of bytes for test_cases.typed_abi_call.logger.LogStruct
        let tmp%9#0: bytes = ((extract 0 4) txn.LastLog#0)
        let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
        (assert tmp%10#0) // application log value is not the result of an ABI return
        let tmp%11#0: bool = (== tmp%7#0 log#0)
        (assert tmp%11#0) // expected output to match input
        exit 1u

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding[routing]() -> void:
    block@0: // L384
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let app_to_call#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let asset#0: uint64 = decode_bytes<uint64>(tmp%2#0)
        let app#0: uint64 = (global CurrentApplicationID)
        let acc#0: account = (global CurrentApplicationAddress)
        itxn_begin
        ((itxn_field ApplicationID) app_to_call#0)
        ((itxn_field Assets) asset#0)
        ((itxn_field Applications) app#0)
        ((itxn_field Accounts) acc#0)
        ((itxn_field ApplicationArgs) method "echo_resource_by_index(asset,application,account)(uint64,uint64,address)")
        ((itxn_field ApplicationArgs) 0x00)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#1: bytes = ((extract 4 0) awst_tmp%0#0)
        let len%0#1: uint64 = (len tmp%2#1)
        let eq%0#1: bool = (== len%0#1 48u)
        (assert eq%0#1) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>
        let tmp%3#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#1 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let (result.0#0: uint64, result.1#0: uint64, result.2#0: account) = decode_bytes<(uint64,uint64,account,)>(tmp%2#1)
        let tmp%8#0: bool = (== result.0#0 asset#0)
        let tmp%9#0: bool = (== result.1#0 app#0)
        let tmp%10#0: bool = (&& tmp%8#0 tmp%9#0)
        let tmp%11#0: bool = (== result.2#0 acc#0)
        let tmp%12#0: bool = (&& tmp%10#0 tmp%11#0)
        (assert tmp%12#0) // expected echo to return same resources
        itxn_begin
        let tmp%14#0: Encoded(uint64) = bytes_encode<uint64>(app#0)
        let tmp%15#0: Encoded(uint8[32]) = bytes_encode<uint8[32]>(acc#0)
        ((itxn_field ApplicationID) app_to_call#0)
        ((itxn_field ApplicationArgs) method "echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)")
        ((itxn_field ApplicationArgs) tmp%2#0)
        ((itxn_field ApplicationArgs) tmp%14#0)
        ((itxn_field ApplicationArgs) tmp%15#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%16#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let len%1#1: uint64 = (len tmp%16#0)
        let eq%1#1: bool = (== len%1#1 48u)
        (assert eq%1#1) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>
        let tmp%17#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%18#0: bool = (== tmp%17#0 0x151f7c75)
        (assert tmp%18#0) // application log value is not the result of an ABI return
        let (result.0#1: uint64, result.1#1: uint64, result.2#1: account) = decode_bytes<(uint64,uint64,account,)>(tmp%16#0)
        let tmp%22#0: bool = (== result.0#1 asset#0)
        let tmp%23#0: bool = (== result.1#1 app#0)
        let tmp%24#0: bool = (&& tmp%22#0 tmp%23#0)
        let tmp%25#0: bool = (== result.2#1 acc#0)
        let tmp%26#0: bool = (&& tmp%24#0 tmp%25#0)
        (assert tmp%26#0) // expected echo to return same resources
        itxn_begin
        ((itxn_field ApplicationID) app_to_call#0)
        ((itxn_field Assets) asset#0)
        ((itxn_field Applications) app#0)
        ((itxn_field Accounts) acc#0)
        ((itxn_field ApplicationArgs) method "echo_resource_by_index(asset,application,account)(uint64,uint64,address)")
        ((itxn_field ApplicationArgs) 0x00)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%27#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let len%2#0: uint64 = (len tmp%27#0)
        let eq%2#0: bool = (== len%2#0 48u)
        (assert eq%2#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>
        let tmp%28#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%29#0: bool = (== tmp%28#0 0x151f7c75)
        (assert tmp%29#0) // application log value is not the result of an ABI return
        let (result.0#2: uint64, result.1#2: uint64, result.2#2: account) = decode_bytes<(uint64,uint64,account,)>(tmp%27#0)
        let tmp%33#0: bool = (== result.0#2 asset#0)
        let tmp%34#0: bool = (== result.1#2 app#0)
        let tmp%35#0: bool = (&& tmp%33#0 tmp%34#0)
        let tmp%36#0: bool = (== result.2#2 acc#0)
        let tmp%37#0: bool = (&& tmp%35#0 tmp%36#0)
        (assert tmp%37#0) // expected echo to return same resources
        itxn_begin
        ((itxn_field ApplicationID) app_to_call#0)
        ((itxn_field ApplicationArgs) method "echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)")
        ((itxn_field ApplicationArgs) tmp%2#0)
        ((itxn_field ApplicationArgs) tmp%14#0)
        ((itxn_field ApplicationArgs) tmp%15#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%41#0: bytes = ((extract 4 0) awst_tmp%3#0)
        let len%3#0: uint64 = (len tmp%41#0)
        let eq%3#0: bool = (== len%3#0 48u)
        (assert eq%3#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>
        let tmp%42#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%43#0: bool = (== tmp%42#0 0x151f7c75)
        (assert tmp%43#0) // application log value is not the result of an ABI return
        let (result.0#3: uint64, result.1#3: uint64, result.2#3: account) = decode_bytes<(uint64,uint64,account,)>(tmp%41#0)
        let tmp%47#0: bool = (== result.0#3 asset#0)
        let tmp%48#0: bool = (== result.1#3 app#0)
        let tmp%49#0: bool = (&& tmp%47#0 tmp%48#0)
        let tmp%50#0: bool = (== result.2#3 acc#0)
        let tmp%51#0: bool = (&& tmp%49#0 tmp%50#0)
        (assert tmp%51#0) // expected echo to return same resources
        itxn_begin
        ((itxn_field ApplicationID) app_to_call#0)
        ((itxn_field Assets) asset#0)
        ((itxn_field Applications) app#0)
        ((itxn_field Accounts) acc#0)
        ((itxn_field ApplicationArgs) method "echo_resource_by_index(asset,application,account)(uint64,uint64,address)")
        ((itxn_field ApplicationArgs) 0x00)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%4#0: bytes = (itxn LastLog)
        let tmp%52#0: bytes = ((extract 4 0) awst_tmp%4#0)
        let len%4#0: uint64 = (len tmp%52#0)
        let eq%4#0: bool = (== len%4#0 48u)
        (assert eq%4#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>
        let tmp%53#0: bytes = ((extract 0 4) awst_tmp%4#0)
        let tmp%54#0: bool = (== tmp%53#0 0x151f7c75)
        (assert tmp%54#0) // application log value is not the result of an ABI return
        let (result.0#4: uint64, result.1#4: uint64, result.2#4: account) = decode_bytes<(uint64,uint64,account,)>(tmp%52#0)
        let tmp%58#0: bool = (== result.0#4 asset#0)
        let tmp%59#0: bool = (== result.1#4 app#0)
        let tmp%60#0: bool = (&& tmp%58#0 tmp%59#0)
        let tmp%61#0: bool = (== result.2#4 acc#0)
        let tmp%62#0: bool = (&& tmp%60#0 tmp%61#0)
        (assert tmp%62#0) // expected echo to return same resources
        itxn_begin
        ((itxn_field ApplicationID) app_to_call#0)
        ((itxn_field ApplicationArgs) method "echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)")
        ((itxn_field ApplicationArgs) tmp%2#0)
        ((itxn_field ApplicationArgs) tmp%14#0)
        ((itxn_field ApplicationArgs) tmp%15#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%5#0: bytes = (itxn LastLog)
        let tmp%66#0: bytes = ((extract 4 0) awst_tmp%5#0)
        let len%5#0: uint64 = (len tmp%66#0)
        let eq%5#0: bool = (== len%5#0 48u)
        (assert eq%5#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>
        let tmp%67#0: bytes = ((extract 0 4) awst_tmp%5#0)
        let tmp%68#0: bool = (== tmp%67#0 0x151f7c75)
        (assert tmp%68#0) // application log value is not the result of an ABI return
        let (result.0#5: uint64, result.1#5: uint64, result.2#5: account) = decode_bytes<(uint64,uint64,account,)>(tmp%66#0)
        let tmp%72#0: bool = (== result.0#5 asset#0)
        let tmp%73#0: bool = (== result.1#5 app#0)
        let tmp%74#0: bool = (&& tmp%72#0 tmp%73#0)
        let tmp%75#0: bool = (== result.2#5 acc#0)
        let tmp%76#0: bool = (&& tmp%74#0 tmp%75#0)
        (assert tmp%76#0) // expected echo to return same resources
        exit 1u