main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@23
    block@2: // abi_routing_L23
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_is_a_b(byte[],byte[],application)void" => block@3, method "test_method_selector_kinds(application)void" => block@4, method "test_method_overload(application)void" => block@5, method "test_arg_conversion(application)void" => block@6, method "test_15plus_args(application)void" => block@7, method "test_void(application)void" => block@8, method "test_ref_types(application,asset)void" => block@9, method "test_account_to_address(application)void" => block@10, method "test_native_string(application)void" => block@11, method "test_native_bytes(application)void" => block@12, method "test_native_uint64(application)void" => block@13, method "test_native_biguint(application)void" => block@14, method "test_native_tuple(application)void" => block@15, method "test_native_tuple_method_ref(application)void" => block@16, method "test_nested_tuples(application)void" => block@17, method "test_no_args(application)void" => block@18, method "test_named_tuples(application)void" => block@19, method "test_arc4_struct(application)void" => block@20, * => block@27}
    block@3: // test_is_a_b_route_L24
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%7#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%8#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 3)
        let tmp%9#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let tmp%10#0: uint64 = ((txnas Applications) tmp%9#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b(tmp%7#0, tmp%8#0, tmp%10#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        goto block@28
    block@4: // test_method_selector_kinds_route_L33
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%15#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let tmp%16#0: uint64 = ((txnas Applications) tmp%15#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(tmp%16#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#1: bool = 1u
        goto block@28
    block@5: // test_method_overload_route_L47
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%2#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%21#0: uint64 = (btoi reinterpret_Encoded(uint8)%2#0)
        let tmp%22#0: uint64 = ((txnas Applications) tmp%21#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(tmp%22#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#2: bool = 1u
        goto block@28
    block@6: // test_arg_conversion_route_L62
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%3#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%27#0: uint64 = (btoi reinterpret_Encoded(uint8)%3#0)
        let tmp%28#0: uint64 = ((txnas Applications) tmp%27#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(tmp%28#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#3: bool = 1u
        goto block@28
    block@7: // test_15plus_args_route_L79
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%4#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%33#0: uint64 = (btoi reinterpret_Encoded(uint8)%4#0)
        let tmp%34#0: uint64 = ((txnas Applications) tmp%33#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(tmp%34#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#4: bool = 1u
        goto block@28
    block@8: // test_void_route_L107
        let tmp%35#0: uint64 = (txn OnCompletion)
        let tmp%36#0: bool = (! tmp%35#0)
        (assert tmp%36#0) // OnCompletion is not NoOp
        let tmp%37#0: uint64 = (txn ApplicationID)
        (assert tmp%37#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%5#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%39#0: uint64 = (btoi reinterpret_Encoded(uint8)%5#0)
        let tmp%40#0: uint64 = ((txnas Applications) tmp%39#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_void(tmp%40#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#5: bool = 1u
        goto block@28
    block@9: // test_ref_types_route_L121
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (! tmp%41#0)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        (assert tmp%43#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%6#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%45#0: uint64 = (btoi reinterpret_Encoded(uint8)%6#0)
        let tmp%46#0: uint64 = ((txnas Applications) tmp%45#0)
        let reinterpret_Encoded(uint8)%7#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%47#0: uint64 = (btoi reinterpret_Encoded(uint8)%7#0)
        let tmp%48#0: uint64 = ((txnas Assets) tmp%47#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(tmp%46#0, tmp%48#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#6: bool = 1u
        goto block@28
    block@10: // test_account_to_address_route_L135
        let tmp%49#0: uint64 = (txn OnCompletion)
        let tmp%50#0: bool = (! tmp%49#0)
        (assert tmp%50#0) // OnCompletion is not NoOp
        let tmp%51#0: uint64 = (txn ApplicationID)
        (assert tmp%51#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%8#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%53#0: uint64 = (btoi reinterpret_Encoded(uint8)%8#0)
        let tmp%54#0: uint64 = ((txnas Applications) tmp%53#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address(tmp%54#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#7: bool = 1u
        goto block@28
    block@11: // test_native_string_route_L144
        let tmp%55#0: uint64 = (txn OnCompletion)
        let tmp%56#0: bool = (! tmp%55#0)
        (assert tmp%56#0) // OnCompletion is not NoOp
        let tmp%57#0: uint64 = (txn ApplicationID)
        (assert tmp%57#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%9#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%59#0: uint64 = (btoi reinterpret_Encoded(uint8)%9#0)
        let tmp%60#0: uint64 = ((txnas Applications) tmp%59#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(tmp%60#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#8: bool = 1u
        goto block@28
    block@12: // test_native_bytes_route_L155
        let tmp%61#0: uint64 = (txn OnCompletion)
        let tmp%62#0: bool = (! tmp%61#0)
        (assert tmp%62#0) // OnCompletion is not NoOp
        let tmp%63#0: uint64 = (txn ApplicationID)
        (assert tmp%63#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%10#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%65#0: uint64 = (btoi reinterpret_Encoded(uint8)%10#0)
        let tmp%66#0: uint64 = ((txnas Applications) tmp%65#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(tmp%66#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#9: bool = 1u
        goto block@28
    block@13: // test_native_uint64_route_L168
        let tmp%67#0: uint64 = (txn OnCompletion)
        let tmp%68#0: bool = (! tmp%67#0)
        (assert tmp%68#0) // OnCompletion is not NoOp
        let tmp%69#0: uint64 = (txn ApplicationID)
        (assert tmp%69#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%11#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%71#0: uint64 = (btoi reinterpret_Encoded(uint8)%11#0)
        let tmp%72#0: uint64 = ((txnas Applications) tmp%71#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(tmp%72#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#10: bool = 1u
        goto block@28
    block@14: // test_native_biguint_route_L179
        let tmp%73#0: uint64 = (txn OnCompletion)
        let tmp%74#0: bool = (! tmp%73#0)
        (assert tmp%74#0) // OnCompletion is not NoOp
        let tmp%75#0: uint64 = (txn ApplicationID)
        (assert tmp%75#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%12#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%77#0: uint64 = (btoi reinterpret_Encoded(uint8)%12#0)
        let tmp%78#0: uint64 = ((txnas Applications) tmp%77#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(tmp%78#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#11: bool = 1u
        goto block@28
    block@15: // test_native_tuple_route_L190
        let tmp%79#0: uint64 = (txn OnCompletion)
        let tmp%80#0: bool = (! tmp%79#0)
        (assert tmp%80#0) // OnCompletion is not NoOp
        let tmp%81#0: uint64 = (txn ApplicationID)
        (assert tmp%81#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%13#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%83#0: uint64 = (btoi reinterpret_Encoded(uint8)%13#0)
        let tmp%84#0: uint64 = ((txnas Applications) tmp%83#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(tmp%84#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#12: bool = 1u
        goto block@28
    block@16: // test_native_tuple_method_ref_route_L249
        let tmp%85#0: uint64 = (txn OnCompletion)
        let tmp%86#0: bool = (! tmp%85#0)
        (assert tmp%86#0) // OnCompletion is not NoOp
        let tmp%87#0: uint64 = (txn ApplicationID)
        (assert tmp%87#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%14#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%89#0: uint64 = (btoi reinterpret_Encoded(uint8)%14#0)
        let tmp%90#0: uint64 = ((txnas Applications) tmp%89#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref(tmp%90#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#13: bool = 1u
        goto block@28
    block@17: // test_nested_tuples_route_L299
        let tmp%91#0: uint64 = (txn OnCompletion)
        let tmp%92#0: bool = (! tmp%91#0)
        (assert tmp%92#0) // OnCompletion is not NoOp
        let tmp%93#0: uint64 = (txn ApplicationID)
        (assert tmp%93#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%15#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%95#0: uint64 = (btoi reinterpret_Encoded(uint8)%15#0)
        let tmp%96#0: uint64 = ((txnas Applications) tmp%95#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples(tmp%96#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#14: bool = 1u
        goto block@28
    block@18: // test_no_args_route_L345
        let tmp%97#0: uint64 = (txn OnCompletion)
        let tmp%98#0: bool = (! tmp%97#0)
        (assert tmp%98#0) // OnCompletion is not NoOp
        let tmp%99#0: uint64 = (txn ApplicationID)
        (assert tmp%99#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%16#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%101#0: uint64 = (btoi reinterpret_Encoded(uint8)%16#0)
        let tmp%102#0: uint64 = ((txnas Applications) tmp%101#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args(tmp%102#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#15: bool = 1u
        goto block@28
    block@19: // test_named_tuples_route_L355
        let tmp%103#0: uint64 = (txn OnCompletion)
        let tmp%104#0: bool = (! tmp%103#0)
        (assert tmp%104#0) // OnCompletion is not NoOp
        let tmp%105#0: uint64 = (txn ApplicationID)
        (assert tmp%105#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%17#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%107#0: uint64 = (btoi reinterpret_Encoded(uint8)%17#0)
        let tmp%108#0: uint64 = ((txnas Applications) tmp%107#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples(tmp%108#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#16: bool = 1u
        goto block@28
    block@20: // test_arc4_struct_route_L372
        let tmp%109#0: uint64 = (txn OnCompletion)
        let tmp%110#0: bool = (! tmp%109#0)
        (assert tmp%110#0) // OnCompletion is not NoOp
        let tmp%111#0: uint64 = (txn ApplicationID)
        (assert tmp%111#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%18#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%113#0: uint64 = (btoi reinterpret_Encoded(uint8)%18#0)
        let tmp%114#0: uint64 = ((txnas Applications) tmp%113#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct(tmp%114#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#17: bool = 1u
        goto block@28
    block@23: // bare_routing_L23
        let tmp%115#0: uint64 = (txn OnCompletion)
        goto tmp%115#0 ? block@27 : block@24
    block@24: // __algopy_default_create_L1
        let tmp%116#0: uint64 = (txn ApplicationID)
        let tmp%117#0: bool = (! tmp%116#0)
        (assert tmp%117#0) // can only call when creating
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#18: bool = 1u
        goto block@28
    block@27: // after_if_else_L23
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#19: bool = 0u
        goto block@28
    block@28: // after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0 <- block@3, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#1 <- block@4, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#2 <- block@5, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#3 <- block@6, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#4 <- block@7, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#5 <- block@8, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#6 <- block@9, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#7 <- block@10, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#8 <- block@11, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#9 <- block@12, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#10 <- block@13, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#11 <- block@14, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#12 <- block@15, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#13 <- block@16, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#14 <- block@17, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#15 <- block@18, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#16 <- block@19, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#17 <- block@20, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#18 <- block@24, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#19 <- block@27)
        return tmp%0#0

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b(a: bytes, b: bytes, app: uint64) -> void:
    block@0: // L24
        itxn_begin
        let aggregate%length%0#1: uint64 = (len a#0)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 a#0)
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%0#1
        let tmp%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#1
        let aggregate%length%1#1: uint64 = (len b#0)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 b#0)
        let aggregate%as_Encoded(len+uint8[])%1#1: Encoded(len+uint8[]) = aggregate%encoded_value%1#1
        let tmp%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "is_a_b(byte[],byte[])void")
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field ApplicationArgs) tmp%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(app: uint64) -> void:
    block@0: // L33
        itxn_begin
        let aggregate%length%0#1: uint64 = (len 0x7465737431)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x7465737431)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) encoded%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let result#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%2#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // application log value is not the result of an ABI return
        let aggregate%length%1#1: uint64 = (len 0x6563686f3a207465737431)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 0x6563686f3a207465737431)
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let encoded%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let tmp%4#0: bool = (== result#0 encoded%1#0)
        (assert tmp%4#0)
        itxn_begin
        let aggregate%length%2#1: uint64 = (len 0x7465737432)
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 0x7465737432)
        let aggregate%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let encoded%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) encoded%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let result#1: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%1#0)
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // application log value is not the result of an ABI return
        let aggregate%length%3#1: uint64 = (len 0x6563686f3a207465737432)
        let aggregate%as_bytes%3#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 0x6563686f3a207465737432)
        let aggregate%as_Encoded(len+utf8[])%3#1: Encoded(len+utf8[]) = aggregate%encoded_value%3#1
        let encoded%3#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#1
        let tmp%8#0: bool = (== result#1 encoded%3#0)
        (assert tmp%8#0)
        itxn_begin
        let aggregate%length%4#1: uint64 = (len 0x7465737433)
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%length%4#1)
        let aggregate%length_uint16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded_value%4#1: bytes = (concat aggregate%length_uint16%4#1 0x7465737433)
        let aggregate%as_Encoded(len+utf8[])%4#1: Encoded(len+utf8[]) = aggregate%encoded_value%4#1
        let encoded%4#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%4#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) encoded%4#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let result#2: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%2#0)
        let tmp%10#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%11#0: bool = (== tmp%10#0 0x151f7c75)
        (assert tmp%11#0) // application log value is not the result of an ABI return
        let aggregate%length%5#1: uint64 = (len 0x6563686f3a207465737433)
        let aggregate%as_bytes%5#1: bytes[8] = (itob aggregate%length%5#1)
        let aggregate%length_uint16%5#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded_value%5#1: bytes = (concat aggregate%length_uint16%5#1 0x6563686f3a207465737433)
        let aggregate%as_Encoded(len+utf8[])%5#1: Encoded(len+utf8[]) = aggregate%encoded_value%5#1
        let encoded%5#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%5#1
        let tmp%12#0: bool = (== result#2 encoded%5#0)
        (assert tmp%12#0)
        itxn_begin
        let aggregate%length%6#1: uint64 = (len 0x7465737434)
        let aggregate%as_bytes%6#1: bytes[8] = (itob aggregate%length%6#1)
        let aggregate%length_uint16%6#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%encoded_value%6#1: bytes = (concat aggregate%length_uint16%6#1 0x7465737434)
        let aggregate%as_Encoded(len+utf8[])%6#1: Encoded(len+utf8[]) = aggregate%encoded_value%6#1
        let encoded%6#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%6#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) encoded%6#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let result#3: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%3#0)
        let tmp%14#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%15#0: bool = (== tmp%14#0 0x151f7c75)
        (assert tmp%15#0) // application log value is not the result of an ABI return
        let aggregate%length%7#1: uint64 = (len 0x6563686f3a207465737434)
        let aggregate%as_bytes%7#1: bytes[8] = (itob aggregate%length%7#1)
        let aggregate%length_uint16%7#1: bytes = ((extract 6 2) aggregate%as_bytes%7#1)
        let aggregate%encoded_value%7#1: bytes = (concat aggregate%length_uint16%7#1 0x6563686f3a207465737434)
        let aggregate%as_Encoded(len+utf8[])%7#1: Encoded(len+utf8[]) = aggregate%encoded_value%7#1
        let encoded%7#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%7#1
        let tmp%16#0: bool = (== result#3 encoded%7#0)
        (assert tmp%16#0)
        itxn_begin
        let aggregate%length%8#1: uint64 = (len 0x7465737435)
        let aggregate%as_bytes%8#1: bytes[8] = (itob aggregate%length%8#1)
        let aggregate%length_uint16%8#1: bytes = ((extract 6 2) aggregate%as_bytes%8#1)
        let aggregate%encoded_value%8#1: bytes = (concat aggregate%length_uint16%8#1 0x7465737435)
        let aggregate%as_Encoded(len+utf8[])%8#1: Encoded(len+utf8[]) = aggregate%encoded_value%8#1
        let encoded%8#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%8#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) encoded%8#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%4#0: bytes = (itxn LastLog)
        let result#4: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%4#0)
        let tmp%18#0: bytes = ((extract 0 4) awst_tmp%4#0)
        let tmp%19#0: bool = (== tmp%18#0 0x151f7c75)
        (assert tmp%19#0) // application log value is not the result of an ABI return
        let aggregate%length%9#1: uint64 = (len 0x6563686f3a207465737435)
        let aggregate%as_bytes%9#1: bytes[8] = (itob aggregate%length%9#1)
        let aggregate%length_uint16%9#1: bytes = ((extract 6 2) aggregate%as_bytes%9#1)
        let aggregate%encoded_value%9#1: bytes = (concat aggregate%length_uint16%9#1 0x6563686f3a207465737435)
        let aggregate%as_Encoded(len+utf8[])%9#1: Encoded(len+utf8[]) = aggregate%encoded_value%9#1
        let encoded%9#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%9#1
        let tmp%20#0: bool = (== result#4 encoded%9#0)
        (assert tmp%20#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(app: uint64) -> void:
    block@0: // L47
        itxn_begin
        let aggregate%length%0#1: uint64 = (len 0x7479706564202b2069676e6f7265)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x7479706564202b2069676e6f7265)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) encoded%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%3#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%1#0)
        let tmp%4#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%5#0: bool = (== tmp%4#0 0x151f7c75)
        (assert tmp%5#0) // application log value is not the result of an ABI return
        let aggregate%length%1#1: uint64 = (len 0x6563686f3a207479706564202b2069676e6f7265)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 0x6563686f3a207479706564202b2069676e6f7265)
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let encoded%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let tmp%6#0: bool = (== tmp%3#0 encoded%1#0)
        (assert tmp%6#0)
        itxn_begin
        let aggregate%length%2#1: uint64 = (len 0x756e7479706564202b2069676e6f7265)
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 0x756e7479706564202b2069676e6f7265)
        let aggregate%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let encoded%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) encoded%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%7#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%2#0)
        let tmp%8#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%9#0: bool = (== tmp%8#0 0x151f7c75)
        (assert tmp%9#0) // application log value is not the result of an ABI return
        let aggregate%length%3#1: uint64 = (len 0x6563686f3a20756e7479706564202b2069676e6f7265)
        let aggregate%as_bytes%3#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 0x6563686f3a20756e7479706564202b2069676e6f7265)
        let aggregate%as_Encoded(len+utf8[])%3#1: Encoded(len+utf8[]) = aggregate%encoded_value%3#1
        let encoded%3#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#1
        let tmp%10#0: bool = (== tmp%7#0 encoded%3#0)
        (assert tmp%10#0)
        itxn_begin
        let aggregate%length%4#1: uint64 = (len 0x7475706c65)
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%length%4#1)
        let aggregate%length_uint16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded_value%4#1: bytes = (concat aggregate%length_uint16%4#1 0x7475706c65)
        let aggregate%as_Encoded(len+utf8[])%4#1: Encoded(len+utf8[]) = aggregate%encoded_value%4#1
        let encoded%4#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%4#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) encoded%4#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let result.0#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%3#0)
        let tmp%12#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%13#0: bool = (== tmp%12#0 0x151f7c75)
        (assert tmp%13#0) // application log value is not the result of an ABI return
        let result.1.LastLog#0: bytes = (itxn LastLog)
        let aggregate%length%5#1: uint64 = (len 0x6563686f3a207475706c65)
        let aggregate%as_bytes%5#1: bytes[8] = (itob aggregate%length%5#1)
        let aggregate%length_uint16%5#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded_value%5#1: bytes = (concat aggregate%length_uint16%5#1 0x6563686f3a207475706c65)
        let aggregate%as_Encoded(len+utf8[])%5#1: Encoded(len+utf8[]) = aggregate%encoded_value%5#1
        let encoded%5#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%5#1
        let tmp%14#0: bool = (== result.0#0 encoded%5#0)
        (assert tmp%14#0)
        let tmp%15#0: Encoded(len+utf8[]) = ((extract 4 0) result.1.LastLog#0)
        let tmp%16#0: bytes = ((extract 0 4) result.1.LastLog#0)
        let tmp%17#0: bool = (== tmp%16#0 0x151f7c75)
        (assert tmp%17#0) // application log value is not the result of an ABI return
        let tmp%18#0: bool = (== tmp%15#0 encoded%5#0)
        (assert tmp%18#0)
        itxn_begin
        let aggregate%length%6#1: uint64 = (len 0x756e7479706564)
        let aggregate%as_bytes%6#1: bytes[8] = (itob aggregate%length%6#1)
        let aggregate%length_uint16%6#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%encoded_value%6#1: bytes = (concat aggregate%length_uint16%6#1 0x756e7479706564)
        let aggregate%as_Encoded(len+utf8[])%6#1: Encoded(len+utf8[]) = aggregate%encoded_value%6#1
        let encoded%7#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%6#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) encoded%7#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn_result.LastLog#0: bytes = (itxn LastLog)
        let tmp%19#0: Encoded(len+utf8[]) = ((extract 4 0) txn_result.LastLog#0)
        let tmp%20#0: bytes = ((extract 0 4) txn_result.LastLog#0)
        let tmp%21#0: bool = (== tmp%20#0 0x151f7c75)
        (assert tmp%21#0) // application log value is not the result of an ABI return
        let aggregate%length%7#1: uint64 = (len 0x6563686f3a20756e7479706564)
        let aggregate%as_bytes%7#1: bytes[8] = (itob aggregate%length%7#1)
        let aggregate%length_uint16%7#1: bytes = ((extract 6 2) aggregate%as_bytes%7#1)
        let aggregate%encoded_value%7#1: bytes = (concat aggregate%length_uint16%7#1 0x6563686f3a20756e7479706564)
        let aggregate%as_Encoded(len+utf8[])%7#1: Encoded(len+utf8[]) = aggregate%encoded_value%7#1
        let encoded%8#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%7#1
        let tmp%22#0: bool = (== tmp%19#0 encoded%8#0)
        (assert tmp%22#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(app: uint64) -> void:
    block@0: // L62
        itxn_begin
        let aggregate%length%0#1: uint64 = (len 0x636f6e76657274656431)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x636f6e76657274656431)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) encoded%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%0#0: bool = (== txn.LastLog#0 0x636f6e76657274656431)
        (assert tmp%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(uint64)void")
        ((itxn_field ApplicationArgs) 0x0000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#1: bytes = (itxn LastLog)
        let tmp%1#0: bytes = (itob 2u)
        let tmp%2#0: bool = (== txn.LastLog#1 tmp%1#0)
        (assert tmp%2#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(uint512)void")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#2: bytes = (itxn LastLog)
        let tmp%6#0: bool = (== txn.LastLog#2 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)
        (assert tmp%6#0)
        itxn_begin
        let aggregate%length%1#1: uint64 = (len 0x34)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 0x34)
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%1#1
        let tmp%7#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(byte[])void")
        ((itxn_field ApplicationArgs) tmp%7#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#3: bytes = (itxn LastLog)
        let tmp%8#0: bool = (== txn.LastLog#3 0x34)
        (assert tmp%8#0)
        itxn_begin
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%as_Encoded(bool8)%0#1: Encoded(bool8) = aggregate%encoded_bool%0#1
        let tmp%9#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(bool)void")
        ((itxn_field ApplicationArgs) tmp%9#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#4: bytes = (itxn LastLog)
        let tmp%10#0: bool = (== txn.LastLog#4 0x54727565)
        (assert tmp%10#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(app: uint64) -> void:
    block@0: // L79
        itxn_begin
        let aggregate%encoded%0#1: bytes = (concat 0x 0xde)
        let aggregate%encoded%1#1: bytes = (concat aggregate%encoded%0#1 0xad)
        let aggregate%encoded%2#1: bytes = (concat aggregate%encoded%1#1 0xbe)
        let aggregate%encoded%3#1: bytes = (concat aggregate%encoded%2#1 0xef)
        let aggregate%as_Encoded(uint8,uint8,uint8,uint8)%0#1: Encoded(uint8,uint8,uint8,uint8) = aggregate%encoded%3#1
        let tmp%0#0: Encoded(uint8,uint8,uint8,uint8) = aggregate%as_Encoded(uint8,uint8,uint8,uint8)%0#1
        let aggregate%encoded%4#1: bytes = (concat 0x 0x0f)
        let aggregate%encoded%5#1: bytes = (concat aggregate%encoded%4#1 0x10)
        let aggregate%encoded%6#1: bytes = (concat aggregate%encoded%5#1 0x11)
        let aggregate%encoded%7#1: bytes = (concat aggregate%encoded%6#1 0x12)
        let aggregate%encoded%8#1: bytes = (concat aggregate%encoded%7#1 tmp%0#0)
        let aggregate%encoded%9#1: bytes = (concat aggregate%encoded%8#1 0x14)
        let aggregate%as_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#1: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = aggregate%encoded%9#1
        let tmp%1#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = aggregate%as_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]")
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x0000000000000002)
        ((itxn_field ApplicationArgs) 0x0000000000000003)
        ((itxn_field ApplicationArgs) 0x0000000000000004)
        ((itxn_field ApplicationArgs) 0x0000000000000005)
        ((itxn_field ApplicationArgs) 0x0000000000000006)
        ((itxn_field ApplicationArgs) 0x0000000000000007)
        ((itxn_field ApplicationArgs) 0x0000000000000008)
        ((itxn_field ApplicationArgs) 0x0000000000000009)
        ((itxn_field ApplicationArgs) 0x000000000000000a)
        ((itxn_field ApplicationArgs) 0x000000000000000b)
        ((itxn_field ApplicationArgs) 0x000000000000000c)
        ((itxn_field ApplicationArgs) 0x000000000000000d)
        ((itxn_field ApplicationArgs) 0x000000000000000e)
        ((itxn_field ApplicationArgs) tmp%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let result#0: Encoded(len+uint8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let tmp%5#0: bytes = ((extract 2 0) result#0)
        let tmp%6#0: bool = (== tmp%5#0 0x0f101112deadbeef14)
        (assert tmp%6#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_void(app: uint64) -> void:
    block@0: // L107
        itxn_begin
        let aggregate%length%0#1: uint64 = (len 0x576f726c6431)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x576f726c6431)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) encoded%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%0#0: bool = (== txn.LastLog#0 0x576f726c6431)
        (assert tmp%0#0)
        itxn_begin
        let aggregate%length%1#1: uint64 = (len 0x576f726c6432)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 0x576f726c6432)
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let encoded%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) encoded%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#1: bytes = (itxn LastLog)
        let tmp%1#0: bool = (== txn.LastLog#1 0x576f726c6432)
        (assert tmp%1#0)
        itxn_begin
        let aggregate%length%2#1: uint64 = (len 0x576f726c6433)
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 0x576f726c6433)
        let aggregate%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let encoded%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) encoded%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#2: bytes = (itxn LastLog)
        let tmp%2#0: bool = (== txn.LastLog#2 0x576f726c6433)
        (assert tmp%2#0)
        itxn_begin
        let aggregate%length%3#1: uint64 = (len 0x576f726c6434)
        let aggregate%as_bytes%3#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 0x576f726c6434)
        let aggregate%as_Encoded(len+utf8[])%3#1: Encoded(len+utf8[]) = aggregate%encoded_value%3#1
        let encoded%3#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%3#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) encoded%3#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#3: bytes = (itxn LastLog)
        let tmp%3#0: bool = (== txn.LastLog#3 0x576f726c6434)
        (assert tmp%3#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(app: uint64, asset: uint64) -> void:
    block@0: // L121
        itxn_begin
        let tmp%0#0: account = (global CurrentApplicationAddress)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field Assets) asset#0)
        ((itxn_field Applications) app#0)
        ((itxn_field Accounts) tmp%0#0)
        ((itxn_field ApplicationArgs) method "log(asset,account,application)void")
        ((itxn_field ApplicationArgs) 0x00)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
        (assert check%0#0) // asset exists
        let tmp%1#0: account = (global CurrentApplicationAddress)
        let tmp%2#0: bytes = (concat value%0#0 tmp%1#0)
        let (value%1#0: account, check%1#0: bool) = ((app_params_get AppAddress) app#0)
        (assert check%1#0) // application exists
        let tmp%3#0: bytes = (concat tmp%2#0 value%1#0)
        let tmp%4#0: bool = (== txn.LastLog#0 tmp%3#0)
        (assert tmp%4#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address(app: uint64) -> void:
    block@0: // L135
        itxn_begin
        let tmp%0#0: account = (global CurrentApplicationAddress)
        let aggregate%as_Encoded(uint8[32])%0#1: Encoded(uint8[32]) = tmp%0#0
        let tmp%1#0: Encoded(uint8[32]) = aggregate%as_Encoded(uint8[32])%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(address)void")
        ((itxn_field ApplicationArgs) tmp%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%2#0: account = (global CurrentApplicationAddress)
        let tmp%3#0: bool = (== txn.LastLog#0 tmp%2#0)
        (assert tmp%3#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(app: uint64) -> void:
    block@0: // L144
        itxn_begin
        let aggregate%length%0#1: uint64 = (len 0x73)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x73)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
        ((itxn_field ApplicationArgs) encoded%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let result1#0: string = ((extract 2 0) tmp%0#0)
        let tmp%4#0: bool = (== result1#0 "echo: s")
        (assert tmp%4#0)
        itxn_begin
        let aggregate%length%1#1: uint64 = (len "s")
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 "s")
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let tmp%5#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
        ((itxn_field ApplicationArgs) tmp%5#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%6#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%1#0)
        let tmp%7#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%8#0: bool = (== tmp%7#0 0x151f7c75)
        (assert tmp%8#0) // application log value is not the result of an ABI return
        let result2#0: string = ((extract 2 0) tmp%6#0)
        let tmp%10#0: bool = (== result2#0 result1#0)
        (assert tmp%10#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
        ((itxn_field ApplicationArgs) encoded%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%11#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%2#0)
        let tmp%12#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%13#0: bool = (== tmp%12#0 0x151f7c75)
        (assert tmp%13#0) // application log value is not the result of an ABI return
        let result3#0: string = ((extract 2 0) tmp%11#0)
        let tmp%15#0: bool = (== result3#0 result1#0)
        (assert tmp%15#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(app: uint64) -> void:
    block@0: // L155
        itxn_begin
        let aggregate%length%0#1: uint64 = (len 0x62)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x62)
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%0#1
        let tmp%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%1#0: Encoded(len+uint8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%2#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // application log value is not the result of an ABI return
        let result1#0: bytes = ((extract 2 0) tmp%1#0)
        let tmp%5#0: bool = (== result1#0 0x6563686f3a2062)
        (assert tmp%5#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%7#0: Encoded(len+uint8[]) = ((extract 4 0) awst_tmp%1#0)
        let tmp%8#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%9#0: bool = (== tmp%8#0 0x151f7c75)
        (assert tmp%9#0) // application log value is not the result of an ABI return
        let result2#0: bytes = ((extract 2 0) tmp%7#0)
        let tmp%11#0: bool = (== result2#0 result1#0)
        (assert tmp%11#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%13#0: Encoded(len+uint8[]) = ((extract 4 0) awst_tmp%2#0)
        let tmp%14#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%15#0: bool = (== tmp%14#0 0x151f7c75)
        (assert tmp%15#0) // application log value is not the result of an ABI return
        let result3#0: bytes = ((extract 2 0) tmp%13#0)
        let tmp%17#0: bool = (== result3#0 result1#0)
        (assert tmp%17#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(app: uint64) -> void:
    block@0: // L168
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: Encoded(uint64) = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let result1#0: uint64 = (btoi tmp%0#0)
        let tmp%4#0: bool = (== result1#0 2u)
        (assert tmp%4#0)
        itxn_begin
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let tmp%5#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
        ((itxn_field ApplicationArgs) tmp%5#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%6#0: Encoded(uint64) = ((extract 4 0) awst_tmp%1#0)
        let tmp%7#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%8#0: bool = (== tmp%7#0 0x151f7c75)
        (assert tmp%8#0) // application log value is not the result of an ABI return
        let result2#0: uint64 = (btoi tmp%6#0)
        let tmp%10#0: bool = (== result2#0 result1#0)
        (assert tmp%10#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%11#0: Encoded(uint64) = ((extract 4 0) awst_tmp%2#0)
        let tmp%12#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%13#0: bool = (== tmp%12#0 0x151f7c75)
        (assert tmp%13#0) // application log value is not the result of an ABI return
        let result3#0: uint64 = (btoi tmp%11#0)
        let tmp%15#0: bool = (== result3#0 result1#0)
        (assert tmp%15#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(app: uint64) -> void:
    block@0: // L179
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: Encoded(uint512) = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let result1#0: biguint = tmp%0#0
        let tmp%4#0: bool = (b== result1#0 3b)
        (assert tmp%4#0)
        itxn_begin
        let aggregate%value_len%0#1: uint64 = (len 2b)
        let aggregate%len_ok%0#1: bool = (<= aggregate%value_len%0#1 64u)
        (assert aggregate%len_ok%0#1) // overflow
        let aggregate%bzero%0#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#1: bytes[64] = (b| 2b aggregate%bzero%0#1)
        let aggregate%as_Encoded(uint512)%0#1: Encoded(uint512) = aggregate%arc4_encoded%0#1
        let tmp%5#0: Encoded(uint512) = aggregate%as_Encoded(uint512)%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
        ((itxn_field ApplicationArgs) tmp%5#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%6#0: Encoded(uint512) = ((extract 4 0) awst_tmp%1#0)
        let tmp%7#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%8#0: bool = (== tmp%7#0 0x151f7c75)
        (assert tmp%8#0) // application log value is not the result of an ABI return
        let result2#0: biguint = tmp%6#0
        let tmp%10#0: bool = (b== result2#0 result1#0)
        (assert tmp%10#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%11#0: Encoded(uint512) = ((extract 4 0) awst_tmp%2#0)
        let tmp%12#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%13#0: bool = (== tmp%12#0 0x151f7c75)
        (assert tmp%13#0) // application log value is not the result of an ABI return
        let result3#0: biguint = tmp%11#0
        let tmp%15#0: bool = (b== result3#0 result1#0)
        (assert tmp%15#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(app: uint64) -> void:
    block@0: // L190
        itxn_begin
        let aggregate%length%0#1: uint64 = (len 0x7331)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x7331)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let aggregate%length%1#1: uint64 = (len 0x6231)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 0x6231)
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%1#1
        let tmp%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) encoded%0#0)
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let result1#0: Encoded((len+utf8[]),(len+uint8[]),uint64,uint512) = ((extract 4 0) awst_tmp%0#0)
        let tmp%2#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // application log value is not the result of an ABI return
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 result1#0 0u)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 result1#0 2u)
        let aggregate%substring3%0#1: bytes = (substring3 result1#0 aggregate%extract_uint16%0#1 aggregate%extract_uint16%1#1)
        let aggregate%extract_uint16%2#1: uint64 = (extract_uint16 result1#0 2u)
        let aggregate%len%0#1: uint64 = (len result1#0)
        let aggregate%substring3%1#1: bytes = (substring3 result1#0 aggregate%extract_uint16%2#1 aggregate%len%0#1)
        let aggregate%extract%0#1: bytes = (extract3 result1#0 4u 8u)
        let aggregate%extract%1#1: bytes = (extract3 result1#0 12u 64u)
        let (s#0: Encoded(len+utf8[]), b#0: Encoded(len+uint8[]), u#0: Encoded(uint64), bu#0: Encoded(uint512)) = (aggregate%substring3%0#1, aggregate%substring3%1#1, aggregate%extract%0#1, aggregate%extract%1#1)
        let tmp%8#0: string = ((extract 2 0) s#0)
        let tmp%9#0: bool = (== tmp%8#0 "echo: s1")
        (assert tmp%9#0)
        let tmp%10#0: bytes = ((extract 2 0) b#0)
        let tmp%11#0: bool = (== tmp%10#0 0x6563686f3a206231)
        (assert tmp%11#0)
        let tmp%12#0: uint64 = (btoi u#0)
        let tmp%13#0: bool = (== tmp%12#0 2u)
        (assert tmp%13#0)
        let tmp%14#0: biguint = bu#0
        let tmp%15#0: bool = (b== tmp%14#0 3b)
        (assert tmp%15#0)
        itxn_begin
        let aggregate%length%2#1: uint64 = (len "s1")
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 "s1")
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let tmp%16#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let tmp%18#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#1
        let aggregate%value_len%0#1: uint64 = (len 2b)
        let aggregate%len_ok%0#1: bool = (<= aggregate%value_len%0#1 64u)
        (assert aggregate%len_ok%0#1) // overflow
        let aggregate%bzero%0#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#1: bytes[64] = (b| 2b aggregate%bzero%0#1)
        let aggregate%as_Encoded(uint512)%0#1: Encoded(uint512) = aggregate%arc4_encoded%0#1
        let tmp%19#0: Encoded(uint512) = aggregate%as_Encoded(uint512)%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) tmp%16#0)
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field ApplicationArgs) tmp%18#0)
        ((itxn_field ApplicationArgs) tmp%19#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let result2#0: Encoded((len+utf8[]),(len+uint8[]),uint64,uint512) = ((extract 4 0) awst_tmp%1#0)
        let tmp%21#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%22#0: bool = (== tmp%21#0 0x151f7c75)
        (assert tmp%22#0) // application log value is not the result of an ABI return
        let tmp%23#0: bool = (== result1#0 result2#0)
        (assert tmp%23#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) encoded%0#0)
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let result3#0: Encoded((len+utf8[]),(len+uint8[]),uint64,uint512) = ((extract 4 0) awst_tmp%2#0)
        let tmp%26#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%27#0: bool = (== tmp%26#0 0x151f7c75)
        (assert tmp%27#0) // application log value is not the result of an ABI return
        let tmp%28#0: bool = (== result1#0 result3#0)
        (assert tmp%28#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) encoded%0#0)
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%30#0: Encoded((len+utf8[]),(len+uint8[]),uint64,uint512) = ((extract 4 0) awst_tmp%3#0)
        let tmp%31#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%32#0: bool = (== tmp%31#0 0x151f7c75)
        (assert tmp%32#0) // application log value is not the result of an ABI return
        let aggregate%extract_uint16%3#1: uint64 = (extract_uint16 tmp%30#0 0u)
        let aggregate%extract_uint16%4#1: uint64 = (extract_uint16 tmp%30#0 2u)
        let aggregate%substring3%2#1: bytes = (substring3 tmp%30#0 aggregate%extract_uint16%3#1 aggregate%extract_uint16%4#1)
        let aggregate%item0%0#1: bytes = ((extract 2 0) aggregate%substring3%2#1)
        let aggregate%extract_uint16%5#1: uint64 = (extract_uint16 tmp%30#0 2u)
        let aggregate%len%1#1: uint64 = (len tmp%30#0)
        let aggregate%substring3%3#1: bytes = (substring3 tmp%30#0 aggregate%extract_uint16%5#1 aggregate%len%1#1)
        let aggregate%item1%0#1: bytes = ((extract 2 0) aggregate%substring3%3#1)
        let aggregate%extract%2#1: bytes = (extract3 tmp%30#0 4u 8u)
        let aggregate%item2%0#1: uint64 = (btoi aggregate%extract%2#1)
        let aggregate%extract%3#1: bytes = (extract3 tmp%30#0 12u 64u)
        let (result_native.0#0: string, result_native.1#0: bytes, result_native.2#0: uint64, result_native.3#0: biguint) = (aggregate%item0%0#1, aggregate%item1%0#1, aggregate%item2%0#1, aggregate%extract%3#1)
        let tmp%42#0: bool = (== tmp%8#0 result_native.0#0)
        (assert tmp%42#0)
        let tmp%48#0: bool = (== tmp%10#0 result_native.1#0)
        (assert tmp%48#0)
        let tmp%54#0: bool = (== tmp%12#0 result_native.2#0)
        (assert tmp%54#0)
        let tmp%60#0: bool = (b== tmp%14#0 result_native.3#0)
        (assert tmp%60#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref(app: uint64) -> void:
    block@0: // L249
        itxn_begin
        let aggregate%length%0#1: uint64 = (len 0x7331)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x7331)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let aggregate%length%1#1: uint64 = (len 0x6231)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 0x6231)
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%1#1
        let tmp%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) encoded%0#0)
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%1#0: Encoded((len+utf8[]),(len+uint8[]),uint64,uint512) = ((extract 4 0) awst_tmp%0#0)
        let tmp%2#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // application log value is not the result of an ABI return
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 tmp%1#0 0u)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 tmp%1#0 2u)
        let aggregate%substring3%0#1: bytes = (substring3 tmp%1#0 aggregate%extract_uint16%0#1 aggregate%extract_uint16%1#1)
        let aggregate%item0%0#1: bytes = ((extract 2 0) aggregate%substring3%0#1)
        let aggregate%extract_uint16%2#1: uint64 = (extract_uint16 tmp%1#0 2u)
        let aggregate%len%0#1: uint64 = (len tmp%1#0)
        let aggregate%substring3%1#1: bytes = (substring3 tmp%1#0 aggregate%extract_uint16%2#1 aggregate%len%0#1)
        let aggregate%item1%0#1: bytes = ((extract 2 0) aggregate%substring3%1#1)
        let aggregate%extract%0#1: bytes = (extract3 tmp%1#0 4u 8u)
        let aggregate%item2%0#1: uint64 = (btoi aggregate%extract%0#1)
        let aggregate%extract%1#1: bytes = (extract3 tmp%1#0 12u 64u)
        let (result.0#0: string, result.1#0: bytes, result.2#0: uint64, result.3#0: biguint) = (aggregate%item0%0#1, aggregate%item1%0#1, aggregate%item2%0#1, aggregate%extract%1#1)
        let tmp%8#0: bool = (== result.0#0 "echo: s1")
        (assert tmp%8#0)
        let tmp%9#0: bool = (== result.1#0 0x6563686f3a206231)
        (assert tmp%9#0)
        let tmp%10#0: bool = (== result.2#0 2u)
        (assert tmp%10#0)
        let tmp%11#0: bool = (b== result.3#0 3b)
        (assert tmp%11#0)
        itxn_begin
        let aggregate%length%2#1: uint64 = (len "s1")
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 "s1")
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%2#1
        let tmp%12#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let tmp%14#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#1
        let aggregate%value_len%0#1: uint64 = (len 2b)
        let aggregate%len_ok%0#1: bool = (<= aggregate%value_len%0#1 64u)
        (assert aggregate%len_ok%0#1) // overflow
        let aggregate%bzero%0#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#1: bytes[64] = (b| 2b aggregate%bzero%0#1)
        let aggregate%as_Encoded(uint512)%0#1: Encoded(uint512) = aggregate%arc4_encoded%0#1
        let tmp%15#0: Encoded(uint512) = aggregate%as_Encoded(uint512)%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) tmp%12#0)
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field ApplicationArgs) tmp%14#0)
        ((itxn_field ApplicationArgs) tmp%15#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%16#0: Encoded((len+utf8[]),(len+uint8[]),uint64,uint512) = ((extract 4 0) awst_tmp%1#0)
        let tmp%17#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%18#0: bool = (== tmp%17#0 0x151f7c75)
        (assert tmp%18#0) // application log value is not the result of an ABI return
        let aggregate%extract_uint16%3#1: uint64 = (extract_uint16 tmp%16#0 0u)
        let aggregate%extract_uint16%4#1: uint64 = (extract_uint16 tmp%16#0 2u)
        let aggregate%substring3%2#1: bytes = (substring3 tmp%16#0 aggregate%extract_uint16%3#1 aggregate%extract_uint16%4#1)
        let aggregate%item0%1#1: bytes = ((extract 2 0) aggregate%substring3%2#1)
        let aggregate%extract_uint16%5#1: uint64 = (extract_uint16 tmp%16#0 2u)
        let aggregate%len%1#1: uint64 = (len tmp%16#0)
        let aggregate%substring3%3#1: bytes = (substring3 tmp%16#0 aggregate%extract_uint16%5#1 aggregate%len%1#1)
        let aggregate%item1%1#1: bytes = ((extract 2 0) aggregate%substring3%3#1)
        let aggregate%extract%2#1: bytes = (extract3 tmp%16#0 4u 8u)
        let aggregate%item2%1#1: uint64 = (btoi aggregate%extract%2#1)
        let aggregate%extract%3#1: bytes = (extract3 tmp%16#0 12u 64u)
        let (result_2.0#0: string, result_2.1#0: bytes, result_2.2#0: uint64, result_2.3#0: biguint) = (aggregate%item0%1#1, aggregate%item1%1#1, aggregate%item2%1#1, aggregate%extract%3#1)
        let tmp%23#0: bool = (== result_2.0#0 result.0#0)
        let tmp%24#0: bool = (== result_2.1#0 result.1#0)
        let tmp%25#0: bool = (&& tmp%23#0 tmp%24#0)
        let tmp%26#0: bool = (== result_2.2#0 result.2#0)
        let tmp%27#0: bool = (&& tmp%25#0 tmp%26#0)
        let tmp%28#0: bool = (b== result_2.3#0 result.3#0)
        let tmp%29#0: bool = (&& tmp%27#0 tmp%28#0)
        (assert tmp%29#0) // expected native arguments to give the same result
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) encoded%0#0)
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%31#0: Encoded((len+utf8[]),(len+uint8[]),uint64,uint512) = ((extract 4 0) awst_tmp%2#0)
        let tmp%32#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%33#0: bool = (== tmp%32#0 0x151f7c75)
        (assert tmp%33#0) // application log value is not the result of an ABI return
        let aggregate%extract_uint16%6#1: uint64 = (extract_uint16 tmp%31#0 0u)
        let aggregate%extract_uint16%7#1: uint64 = (extract_uint16 tmp%31#0 2u)
        let aggregate%substring3%4#1: bytes = (substring3 tmp%31#0 aggregate%extract_uint16%6#1 aggregate%extract_uint16%7#1)
        let aggregate%item0%2#1: bytes = ((extract 2 0) aggregate%substring3%4#1)
        let aggregate%extract_uint16%8#1: uint64 = (extract_uint16 tmp%31#0 2u)
        let aggregate%len%2#1: uint64 = (len tmp%31#0)
        let aggregate%substring3%5#1: bytes = (substring3 tmp%31#0 aggregate%extract_uint16%8#1 aggregate%len%2#1)
        let aggregate%item1%2#1: bytes = ((extract 2 0) aggregate%substring3%5#1)
        let aggregate%extract%4#1: bytes = (extract3 tmp%31#0 4u 8u)
        let aggregate%item2%2#1: uint64 = (btoi aggregate%extract%4#1)
        let aggregate%extract%5#1: bytes = (extract3 tmp%31#0 12u 64u)
        let (result_3.0#0: string, result_3.1#0: bytes, result_3.2#0: uint64, result_3.3#0: biguint) = (aggregate%item0%2#1, aggregate%item1%2#1, aggregate%item2%2#1, aggregate%extract%5#1)
        let tmp%38#0: bool = (== result_3.0#0 result.0#0)
        let tmp%39#0: bool = (== result_3.1#0 result.1#0)
        let tmp%40#0: bool = (&& tmp%38#0 tmp%39#0)
        let tmp%41#0: bool = (== result_3.2#0 result.2#0)
        let tmp%42#0: bool = (&& tmp%40#0 tmp%41#0)
        let tmp%43#0: bool = (b== result_3.3#0 result.3#0)
        let tmp%44#0: bool = (&& tmp%42#0 tmp%43#0)
        (assert tmp%44#0) // expected arc4 arguments to give the same result
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) encoded%0#0)
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%46#0: Encoded((len+utf8[]),(len+uint8[]),uint64,uint512) = ((extract 4 0) awst_tmp%3#0)
        let tmp%47#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%48#0: bool = (== tmp%47#0 0x151f7c75)
        (assert tmp%48#0) // application log value is not the result of an ABI return
        let aggregate%extract_uint16%9#1: uint64 = (extract_uint16 tmp%46#0 0u)
        let aggregate%extract_uint16%10#1: uint64 = (extract_uint16 tmp%46#0 2u)
        let aggregate%substring3%6#1: bytes = (substring3 tmp%46#0 aggregate%extract_uint16%9#1 aggregate%extract_uint16%10#1)
        let aggregate%item0%3#1: bytes = ((extract 2 0) aggregate%substring3%6#1)
        let aggregate%extract_uint16%11#1: uint64 = (extract_uint16 tmp%46#0 2u)
        let aggregate%len%3#1: uint64 = (len tmp%46#0)
        let aggregate%substring3%7#1: bytes = (substring3 tmp%46#0 aggregate%extract_uint16%11#1 aggregate%len%3#1)
        let aggregate%item1%3#1: bytes = ((extract 2 0) aggregate%substring3%7#1)
        let aggregate%extract%6#1: bytes = (extract3 tmp%46#0 4u 8u)
        let aggregate%item2%3#1: uint64 = (btoi aggregate%extract%6#1)
        let aggregate%extract%7#1: bytes = (extract3 tmp%46#0 12u 64u)
        let (result_native.0#0: string, result_native.1#0: bytes, result_native.2#0: uint64, result_native.3#0: biguint) = (aggregate%item0%3#1, aggregate%item1%3#1, aggregate%item2%3#1, aggregate%extract%7#1)
        let tmp%53#0: bool = (== result_native.0#0 result.0#0)
        let tmp%54#0: bool = (== result_native.1#0 result.1#0)
        let tmp%55#0: bool = (&& tmp%53#0 tmp%54#0)
        let tmp%56#0: bool = (== result_native.2#0 result.2#0)
        let tmp%57#0: bool = (&& tmp%55#0 tmp%56#0)
        let tmp%58#0: bool = (b== result_native.3#0 result.3#0)
        let tmp%59#0: bool = (&& tmp%57#0 tmp%58#0)
        (assert tmp%59#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples(app: uint64) -> void:
    block@0: // L299
        itxn_begin
        let aggregate%length%0#1: uint64 = (len 0x7331)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x7331)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let aggregate%length%1#1: uint64 = (len 0x7332)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 0x7332)
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let encoded%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let aggregate%length%2#1: uint64 = (len 0x33)
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 0x33)
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%2#1
        let tmp%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#1
        let aggregate%data_length%0#1: uint64 = (len encoded%0#0)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 4u aggregate%data_length%0#1)
        let aggregate%as_bytes%3#1: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%0#1: bytes = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%data_length%1#1: uint64 = (len encoded%1#0)
        let aggregate%current_tail_offset%1#1: uint64 = (+ aggregate%current_tail_offset%0#1 aggregate%data_length%1#1)
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%current_tail_offset%0#1)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded%1#1: bytes = (concat aggregate%encoded%0#1 aggregate%offset_as_uint16%1#1)
        let aggregate%concat%0#1: bytes = (concat aggregate%encoded%1#1 encoded%0#0)
        let aggregate%concat%1#1: bytes = (concat aggregate%concat%0#1 encoded%1#0)
        let aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#1: Encoded((len+utf8[]),(len+utf8[])) = aggregate%concat%1#1
        let aggregate%data_length%2#1: uint64 = (len aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#1)
        let aggregate%current_tail_offset%2#1: uint64 = (+ 4u aggregate%data_length%2#1)
        let aggregate%as_bytes%5#1: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded%2#1: bytes = (concat 0x aggregate%offset_as_uint16%2#1)
        let aggregate%encoded%3#1: bytes = (concat 0x 0x0000000000000001)
        let aggregate%encoded%4#1: bytes = (concat aggregate%encoded%3#1 0x0000000000000002)
        let aggregate%data_length%3#1: uint64 = (len tmp%0#0)
        let aggregate%current_tail_offset%3#1: uint64 = (+ 18u aggregate%data_length%3#1)
        let aggregate%as_bytes%6#1: bytes[8] = (itob 18u)
        let aggregate%offset_as_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%encoded%5#1: bytes = (concat aggregate%encoded%4#1 aggregate%offset_as_uint16%3#1)
        let aggregate%concat%2#1: bytes = (concat aggregate%encoded%5#1 tmp%0#0)
        let aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#1: Encoded(uint64,uint64,(len+uint8[])) = aggregate%concat%2#1
        let aggregate%data_length%4#1: uint64 = (len aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#1)
        let aggregate%current_tail_offset%4#1: uint64 = (+ aggregate%current_tail_offset%2#1 aggregate%data_length%4#1)
        let aggregate%as_bytes%7#1: bytes[8] = (itob aggregate%current_tail_offset%2#1)
        let aggregate%offset_as_uint16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%7#1)
        let aggregate%encoded%6#1: bytes = (concat aggregate%encoded%2#1 aggregate%offset_as_uint16%4#1)
        let aggregate%concat%3#1: bytes = (concat aggregate%encoded%6#1 aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#1)
        let aggregate%concat%4#1: bytes = (concat aggregate%concat%3#1 aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#1)
        let aggregate%as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#1: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = aggregate%concat%4#1
        let tmp%1#0: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = aggregate%as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))")
        ((itxn_field ApplicationArgs) tmp%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%2#0: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 tmp%2#0 0u)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 tmp%2#0 2u)
        let aggregate%substring3%0#1: bytes = (substring3 tmp%2#0 aggregate%extract_uint16%0#1 aggregate%extract_uint16%1#1)
        let aggregate%extract_uint16%2#1: uint64 = (extract_uint16 aggregate%substring3%0#1 0u)
        let aggregate%extract_uint16%3#1: uint64 = (extract_uint16 aggregate%substring3%0#1 2u)
        let aggregate%substring3%1#1: bytes = (substring3 aggregate%substring3%0#1 aggregate%extract_uint16%2#1 aggregate%extract_uint16%3#1)
        let aggregate%item0%0#1: bytes = ((extract 2 0) aggregate%substring3%1#1)
        let aggregate%extract_uint16%4#1: uint64 = (extract_uint16 aggregate%substring3%0#1 2u)
        let aggregate%len%0#1: uint64 = (len aggregate%substring3%0#1)
        let aggregate%substring3%2#1: bytes = (substring3 aggregate%substring3%0#1 aggregate%extract_uint16%4#1 aggregate%len%0#1)
        let aggregate%extract_uint16%5#1: uint64 = (extract_uint16 tmp%2#0 2u)
        let aggregate%len%1#1: uint64 = (len tmp%2#0)
        let aggregate%substring3%3#1: bytes = (substring3 tmp%2#0 aggregate%extract_uint16%5#1 aggregate%len%1#1)
        let aggregate%extract%0#1: bytes = (extract3 aggregate%substring3%3#1 0u 8u)
        let aggregate%item0%1#1: uint64 = (btoi aggregate%extract%0#1)
        let aggregate%extract%1#1: bytes = (extract3 aggregate%substring3%3#1 8u 8u)
        let aggregate%extract_uint16%6#1: uint64 = (extract_uint16 aggregate%substring3%3#1 16u)
        let aggregate%len%2#1: uint64 = (len aggregate%substring3%3#1)
        let aggregate%substring3%4#1: bytes = (substring3 aggregate%substring3%3#1 aggregate%extract_uint16%6#1 aggregate%len%2#1)
        let aggregate%item2%0#1: bytes = ((extract 2 0) aggregate%substring3%4#1)
        let (result.0.0#0: string, result.0.1#0: Encoded(len+utf8[]), result.1.0#0: uint64, result.1.1#0: Encoded(uint64), result.1.2#0: bytes) = (aggregate%item0%0#1, aggregate%substring3%2#1, aggregate%item0%1#1, aggregate%extract%1#1, aggregate%item2%0#1)
        let tmp%10#0: bool = (== result.0.0#0 "echo: s1")
        (assert tmp%10#0)
        let aggregate%length%3#1: uint64 = (len 0x6563686f3a207332)
        let aggregate%as_bytes%8#1: bytes[8] = (itob aggregate%length%3#1)
        let aggregate%length_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%8#1)
        let aggregate%encoded_value%3#1: bytes = (concat aggregate%length_uint16%3#1 0x6563686f3a207332)
        let aggregate%as_Encoded(len+utf8[])%2#1: Encoded(len+utf8[]) = aggregate%encoded_value%3#1
        let encoded%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%2#1
        let tmp%11#0: bool = (== result.0.1#0 encoded%2#0)
        (assert tmp%11#0)
        let tmp%12#0: bool = (== result.1.0#0 2u)
        (assert tmp%12#0)
        let tmp%13#0: bool = (b== result.1.1#0 0x0000000000000003)
        (assert tmp%13#0)
        let tmp%14#0: bool = (== result.1.2#0 0x6563686f3a2033)
        (assert tmp%14#0)
        itxn_begin
        let aggregate%length%4#1: uint64 = (len "s1")
        let aggregate%as_bytes%9#1: bytes[8] = (itob aggregate%length%4#1)
        let aggregate%length_uint16%4#1: bytes = ((extract 6 2) aggregate%as_bytes%9#1)
        let aggregate%encoded_value%4#1: bytes = (concat aggregate%length_uint16%4#1 "s1")
        let aggregate%as_Encoded(len+utf8[])%3#1: Encoded(len+utf8[]) = aggregate%encoded_value%4#1
        let aggregate%data_length%5#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%3#1)
        let aggregate%current_tail_offset%5#1: uint64 = (+ 4u aggregate%data_length%5#1)
        let aggregate%as_bytes%10#1: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%5#1: bytes = ((extract 6 2) aggregate%as_bytes%10#1)
        let aggregate%encoded%7#1: bytes = (concat 0x aggregate%offset_as_uint16%5#1)
        let aggregate%data_length%6#1: uint64 = (len encoded%1#0)
        let aggregate%current_tail_offset%6#1: uint64 = (+ aggregate%current_tail_offset%5#1 aggregate%data_length%6#1)
        let aggregate%as_bytes%11#1: bytes[8] = (itob aggregate%current_tail_offset%5#1)
        let aggregate%offset_as_uint16%6#1: bytes = ((extract 6 2) aggregate%as_bytes%11#1)
        let aggregate%encoded%8#1: bytes = (concat aggregate%encoded%7#1 aggregate%offset_as_uint16%6#1)
        let aggregate%concat%5#1: bytes = (concat aggregate%encoded%8#1 aggregate%as_Encoded(len+utf8[])%3#1)
        let aggregate%concat%6#1: bytes = (concat aggregate%concat%5#1 encoded%1#0)
        let aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#1: Encoded((len+utf8[]),(len+utf8[])) = aggregate%concat%6#1
        let aggregate%data_length%7#1: uint64 = (len aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#1)
        let aggregate%current_tail_offset%7#1: uint64 = (+ 4u aggregate%data_length%7#1)
        let aggregate%as_bytes%12#1: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%7#1: bytes = ((extract 6 2) aggregate%as_bytes%12#1)
        let aggregate%encoded%9#1: bytes = (concat 0x aggregate%offset_as_uint16%7#1)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%10#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%encoded%11#1: bytes = (concat aggregate%encoded%10#1 0x0000000000000002)
        let aggregate%length%5#1: uint64 = (len 0x33)
        let aggregate%as_bytes%13#1: bytes[8] = (itob aggregate%length%5#1)
        let aggregate%length_uint16%5#1: bytes = ((extract 6 2) aggregate%as_bytes%13#1)
        let aggregate%encoded_value%5#1: bytes = (concat aggregate%length_uint16%5#1 0x33)
        let aggregate%as_Encoded(len+uint8[])%1#1: Encoded(len+uint8[]) = aggregate%encoded_value%5#1
        let aggregate%data_length%8#1: uint64 = (len aggregate%as_Encoded(len+uint8[])%1#1)
        let aggregate%current_tail_offset%8#1: uint64 = (+ 18u aggregate%data_length%8#1)
        let aggregate%as_bytes%14#1: bytes[8] = (itob 18u)
        let aggregate%offset_as_uint16%8#1: bytes = ((extract 6 2) aggregate%as_bytes%14#1)
        let aggregate%encoded%12#1: bytes = (concat aggregate%encoded%11#1 aggregate%offset_as_uint16%8#1)
        let aggregate%concat%7#1: bytes = (concat aggregate%encoded%12#1 aggregate%as_Encoded(len+uint8[])%1#1)
        let aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%1#1: Encoded(uint64,uint64,(len+uint8[])) = aggregate%concat%7#1
        let aggregate%data_length%9#1: uint64 = (len aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%1#1)
        let aggregate%current_tail_offset%9#1: uint64 = (+ aggregate%current_tail_offset%7#1 aggregate%data_length%9#1)
        let aggregate%as_bytes%15#1: bytes[8] = (itob aggregate%current_tail_offset%7#1)
        let aggregate%offset_as_uint16%9#1: bytes = ((extract 6 2) aggregate%as_bytes%15#1)
        let aggregate%encoded%13#1: bytes = (concat aggregate%encoded%9#1 aggregate%offset_as_uint16%9#1)
        let aggregate%concat%8#1: bytes = (concat aggregate%encoded%13#1 aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#1)
        let aggregate%concat%9#1: bytes = (concat aggregate%concat%8#1 aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%1#1)
        let aggregate%as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#1: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = aggregate%concat%9#1
        let tmp%15#0: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = aggregate%as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))")
        ((itxn_field ApplicationArgs) tmp%15#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%16#0: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = ((extract 4 0) awst_tmp%1#0)
        let tmp%17#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%18#0: bool = (== tmp%17#0 0x151f7c75)
        (assert tmp%18#0) // application log value is not the result of an ABI return
        let aggregate%extract_uint16%7#1: uint64 = (extract_uint16 tmp%16#0 0u)
        let aggregate%extract_uint16%8#1: uint64 = (extract_uint16 tmp%16#0 2u)
        let aggregate%substring3%5#1: bytes = (substring3 tmp%16#0 aggregate%extract_uint16%7#1 aggregate%extract_uint16%8#1)
        let aggregate%extract_uint16%9#1: uint64 = (extract_uint16 aggregate%substring3%5#1 0u)
        let aggregate%extract_uint16%10#1: uint64 = (extract_uint16 aggregate%substring3%5#1 2u)
        let aggregate%substring3%6#1: bytes = (substring3 aggregate%substring3%5#1 aggregate%extract_uint16%9#1 aggregate%extract_uint16%10#1)
        let aggregate%item0%2#1: bytes = ((extract 2 0) aggregate%substring3%6#1)
        let aggregate%extract_uint16%11#1: uint64 = (extract_uint16 aggregate%substring3%5#1 2u)
        let aggregate%len%3#1: uint64 = (len aggregate%substring3%5#1)
        let aggregate%substring3%7#1: bytes = (substring3 aggregate%substring3%5#1 aggregate%extract_uint16%11#1 aggregate%len%3#1)
        let aggregate%extract_uint16%12#1: uint64 = (extract_uint16 tmp%16#0 2u)
        let aggregate%len%4#1: uint64 = (len tmp%16#0)
        let aggregate%substring3%8#1: bytes = (substring3 tmp%16#0 aggregate%extract_uint16%12#1 aggregate%len%4#1)
        let aggregate%extract%2#1: bytes = (extract3 aggregate%substring3%8#1 0u 8u)
        let aggregate%item0%3#1: uint64 = (btoi aggregate%extract%2#1)
        let aggregate%extract%3#1: bytes = (extract3 aggregate%substring3%8#1 8u 8u)
        let aggregate%extract_uint16%13#1: uint64 = (extract_uint16 aggregate%substring3%8#1 16u)
        let aggregate%len%5#1: uint64 = (len aggregate%substring3%8#1)
        let aggregate%substring3%9#1: bytes = (substring3 aggregate%substring3%8#1 aggregate%extract_uint16%13#1 aggregate%len%5#1)
        let aggregate%item2%1#1: bytes = ((extract 2 0) aggregate%substring3%9#1)
        let (result.0.0#1: string, result.0.1#1: Encoded(len+utf8[]), result.1.0#1: uint64, result.1.1#1: Encoded(uint64), result.1.2#1: bytes) = (aggregate%item0%2#1, aggregate%substring3%7#1, aggregate%item0%3#1, aggregate%extract%3#1, aggregate%item2%1#1)
        let tmp%24#0: bool = (== result.0.0#1 "echo: s1")
        (assert tmp%24#0)
        let tmp%25#0: bool = (== result.0.1#1 encoded%2#0)
        (assert tmp%25#0)
        let tmp%26#0: bool = (== result.1.0#1 2u)
        (assert tmp%26#0)
        let tmp%27#0: bool = (b== result.1.1#1 0x0000000000000003)
        (assert tmp%27#0)
        let tmp%28#0: bool = (== result.1.2#1 0x6563686f3a2033)
        (assert tmp%28#0)
        itxn_begin
        let aggregate%length%6#1: uint64 = (len 0x733162)
        let aggregate%as_bytes%16#1: bytes[8] = (itob aggregate%length%6#1)
        let aggregate%length_uint16%6#1: bytes = ((extract 6 2) aggregate%as_bytes%16#1)
        let aggregate%encoded_value%6#1: bytes = (concat aggregate%length_uint16%6#1 0x733162)
        let aggregate%as_Encoded(len+utf8[])%4#1: Encoded(len+utf8[]) = aggregate%encoded_value%6#1
        let encoded%5#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%4#1
        let aggregate%length%7#1: uint64 = (len 0x733262)
        let aggregate%as_bytes%17#1: bytes[8] = (itob aggregate%length%7#1)
        let aggregate%length_uint16%7#1: bytes = ((extract 6 2) aggregate%as_bytes%17#1)
        let aggregate%encoded_value%7#1: bytes = (concat aggregate%length_uint16%7#1 0x733262)
        let aggregate%as_Encoded(len+utf8[])%5#1: Encoded(len+utf8[]) = aggregate%encoded_value%7#1
        let encoded%6#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%5#1
        let aggregate%data_length%10#1: uint64 = (len encoded%5#0)
        let aggregate%current_tail_offset%10#1: uint64 = (+ 4u aggregate%data_length%10#1)
        let aggregate%as_bytes%18#1: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%10#1: bytes = ((extract 6 2) aggregate%as_bytes%18#1)
        let aggregate%encoded%14#1: bytes = (concat 0x aggregate%offset_as_uint16%10#1)
        let aggregate%data_length%11#1: uint64 = (len encoded%6#0)
        let aggregate%current_tail_offset%11#1: uint64 = (+ aggregate%current_tail_offset%10#1 aggregate%data_length%11#1)
        let aggregate%as_bytes%19#1: bytes[8] = (itob aggregate%current_tail_offset%10#1)
        let aggregate%offset_as_uint16%11#1: bytes = ((extract 6 2) aggregate%as_bytes%19#1)
        let aggregate%encoded%15#1: bytes = (concat aggregate%encoded%14#1 aggregate%offset_as_uint16%11#1)
        let aggregate%concat%10#1: bytes = (concat aggregate%encoded%15#1 encoded%5#0)
        let aggregate%concat%11#1: bytes = (concat aggregate%concat%10#1 encoded%6#0)
        let aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%2#1: Encoded((len+utf8[]),(len+utf8[])) = aggregate%concat%11#1
        let tmp%29#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%2#1
        let aggregate%length%8#1: uint64 = (len 0x3362)
        let aggregate%as_bytes%20#1: bytes[8] = (itob aggregate%length%8#1)
        let aggregate%length_uint16%8#1: bytes = ((extract 6 2) aggregate%as_bytes%20#1)
        let aggregate%encoded_value%8#1: bytes = (concat aggregate%length_uint16%8#1 0x3362)
        let aggregate%as_Encoded(len+uint8[])%2#1: Encoded(len+uint8[]) = aggregate%encoded_value%8#1
        let tmp%30#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%2#1
        let aggregate%encoded%16#1: bytes = (concat 0x 0x000000000000000b)
        let aggregate%encoded%17#1: bytes = (concat aggregate%encoded%16#1 0x0000000000000015)
        let aggregate%data_length%12#1: uint64 = (len tmp%30#0)
        let aggregate%current_tail_offset%12#1: uint64 = (+ 18u aggregate%data_length%12#1)
        let aggregate%as_bytes%21#1: bytes[8] = (itob 18u)
        let aggregate%offset_as_uint16%12#1: bytes = ((extract 6 2) aggregate%as_bytes%21#1)
        let aggregate%encoded%18#1: bytes = (concat aggregate%encoded%17#1 aggregate%offset_as_uint16%12#1)
        let aggregate%concat%12#1: bytes = (concat aggregate%encoded%18#1 tmp%30#0)
        let aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%2#1: Encoded(uint64,uint64,(len+uint8[])) = aggregate%concat%12#1
        let tmp%31#0: Encoded(uint64,uint64,(len+uint8[])) = aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%2#1
        let aggregate%data_length%13#1: uint64 = (len tmp%29#0)
        let aggregate%current_tail_offset%13#1: uint64 = (+ 4u aggregate%data_length%13#1)
        let aggregate%as_bytes%22#1: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%13#1: bytes = ((extract 6 2) aggregate%as_bytes%22#1)
        let aggregate%encoded%19#1: bytes = (concat 0x aggregate%offset_as_uint16%13#1)
        let aggregate%data_length%14#1: uint64 = (len tmp%31#0)
        let aggregate%current_tail_offset%14#1: uint64 = (+ aggregate%current_tail_offset%13#1 aggregate%data_length%14#1)
        let aggregate%as_bytes%23#1: bytes[8] = (itob aggregate%current_tail_offset%13#1)
        let aggregate%offset_as_uint16%14#1: bytes = ((extract 6 2) aggregate%as_bytes%23#1)
        let aggregate%encoded%20#1: bytes = (concat aggregate%encoded%19#1 aggregate%offset_as_uint16%14#1)
        let aggregate%concat%13#1: bytes = (concat aggregate%encoded%20#1 tmp%29#0)
        let aggregate%concat%14#1: bytes = (concat aggregate%concat%13#1 tmp%31#0)
        let aggregate%as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#1: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = aggregate%concat%14#1
        let tmp%32#0: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = aggregate%as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))")
        ((itxn_field ApplicationArgs) tmp%32#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%33#0: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = ((extract 4 0) awst_tmp%2#0)
        let tmp%34#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%35#0: bool = (== tmp%34#0 0x151f7c75)
        (assert tmp%35#0) // application log value is not the result of an ABI return
        let aggregate%extract_uint16%14#1: uint64 = (extract_uint16 tmp%33#0 0u)
        let aggregate%extract_uint16%15#1: uint64 = (extract_uint16 tmp%33#0 2u)
        let aggregate%substring3%10#1: bytes = (substring3 tmp%33#0 aggregate%extract_uint16%14#1 aggregate%extract_uint16%15#1)
        let aggregate%extract_uint16%16#1: uint64 = (extract_uint16 aggregate%substring3%10#1 0u)
        let aggregate%extract_uint16%17#1: uint64 = (extract_uint16 aggregate%substring3%10#1 2u)
        let aggregate%substring3%11#1: bytes = (substring3 aggregate%substring3%10#1 aggregate%extract_uint16%16#1 aggregate%extract_uint16%17#1)
        let aggregate%item0%4#1: bytes = ((extract 2 0) aggregate%substring3%11#1)
        let aggregate%extract_uint16%18#1: uint64 = (extract_uint16 aggregate%substring3%10#1 2u)
        let aggregate%len%6#1: uint64 = (len aggregate%substring3%10#1)
        let aggregate%substring3%12#1: bytes = (substring3 aggregate%substring3%10#1 aggregate%extract_uint16%18#1 aggregate%len%6#1)
        let aggregate%extract_uint16%19#1: uint64 = (extract_uint16 tmp%33#0 2u)
        let aggregate%len%7#1: uint64 = (len tmp%33#0)
        let aggregate%substring3%13#1: bytes = (substring3 tmp%33#0 aggregate%extract_uint16%19#1 aggregate%len%7#1)
        let aggregate%extract%4#1: bytes = (extract3 aggregate%substring3%13#1 0u 8u)
        let aggregate%item0%5#1: uint64 = (btoi aggregate%extract%4#1)
        let aggregate%extract%5#1: bytes = (extract3 aggregate%substring3%13#1 8u 8u)
        let aggregate%extract_uint16%20#1: uint64 = (extract_uint16 aggregate%substring3%13#1 16u)
        let aggregate%len%8#1: uint64 = (len aggregate%substring3%13#1)
        let aggregate%substring3%14#1: bytes = (substring3 aggregate%substring3%13#1 aggregate%extract_uint16%20#1 aggregate%len%8#1)
        let aggregate%item2%2#1: bytes = ((extract 2 0) aggregate%substring3%14#1)
        let (result.0.0#2: string, result.0.1#2: Encoded(len+utf8[]), result.1.0#2: uint64, result.1.1#2: Encoded(uint64), result.1.2#2: bytes) = (aggregate%item0%4#1, aggregate%substring3%12#1, aggregate%item0%5#1, aggregate%extract%5#1, aggregate%item2%2#1)
        let tmp%41#0: bool = (== result.0.0#2 "echo: s1b")
        (assert tmp%41#0)
        let aggregate%length%9#1: uint64 = (len 0x6563686f3a20733262)
        let aggregate%as_bytes%24#1: bytes[8] = (itob aggregate%length%9#1)
        let aggregate%length_uint16%9#1: bytes = ((extract 6 2) aggregate%as_bytes%24#1)
        let aggregate%encoded_value%9#1: bytes = (concat aggregate%length_uint16%9#1 0x6563686f3a20733262)
        let aggregate%as_Encoded(len+utf8[])%6#1: Encoded(len+utf8[]) = aggregate%encoded_value%9#1
        let encoded%7#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%6#1
        let tmp%42#0: bool = (== result.0.1#2 encoded%7#0)
        (assert tmp%42#0)
        let tmp%43#0: bool = (== result.1.0#2 12u)
        (assert tmp%43#0)
        let tmp%44#0: bool = (b== result.1.1#2 0x0000000000000016)
        (assert tmp%44#0)
        let tmp%45#0: bool = (== result.1.2#2 0x6563686f3a203362)
        (assert tmp%45#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args(app: uint64) -> void:
    block@0: // L345
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "no_args()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: Encoded(uint64) = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let result#0: uint64 = (btoi tmp%0#0)
        let tmp%4#0: bool = (== result#0 42u)
        (assert tmp%4#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "no_args()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let arc4_result#0: Encoded(uint64) = ((extract 4 0) awst_tmp%1#0)
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // application log value is not the result of an ABI return
        let tmp%8#0: bool = (b== arc4_result#0 0x000000000000002a)
        (assert tmp%8#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "no_args()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%9#0: Encoded(uint64) = ((extract 4 0) awst_tmp%2#0)
        let tmp%10#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%11#0: bool = (== tmp%10#0 0x151f7c75)
        (assert tmp%11#0) // application log value is not the result of an ABI return
        let tmp%12#0: uint64 = (btoi tmp%9#0)
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%13#0: Encoded(uint64) = ((extract 4 0) awst_tmp%3#0)
        let tmp%14#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%15#0: bool = (== tmp%14#0 0x151f7c75)
        (assert tmp%15#0) // application log value is not the result of an ABI return
        let tmp%16#0: bool = (b== tmp%13#0 0x000000000000002a)
        (assert tmp%16#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples(app: uint64) -> void:
    block@0: // L355
        itxn_begin
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let tmp%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#1
        let aggregate%length%0#1: uint64 = (len "log 1")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "log 1")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let aggregate%encoded%0#1: bytes = (concat 0x tmp%0#0)
        let aggregate%data_length%0#1: uint64 = (len tmp%1#0)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 10u aggregate%data_length%0#1)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded%1#1: bytes = (concat aggregate%encoded%0#1 aggregate%offset_as_uint16%0#1)
        let aggregate%concat%0#1: bytes = (concat aggregate%encoded%1#1 tmp%1#0)
        let aggregate%as_Encoded(uint64,(len+utf8[]))%0#1: Encoded(uint64,(len+utf8[])) = aggregate%concat%0#1
        let tmp%2#0: Encoded(uint64,(len+utf8[])) = aggregate%as_Encoded(uint64,(len+utf8[]))%0#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "logs_are_equal((uint64,string),(uint64,string))bool")
        ((itxn_field ApplicationArgs) tmp%2#0)
        ((itxn_field ApplicationArgs) tmp%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%6#0: Encoded(bool8) = ((extract 4 0) awst_tmp%0#0)
        let tmp%7#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%8#0: bool = (== tmp%7#0 0x151f7c75)
        (assert tmp%8#0) // application log value is not the result of an ABI return
        let aggregate%get_bit%0#1: bool = (getbit tmp%6#0 0u)
        let result#0: bool = aggregate%get_bit%0#1
        (assert result#0)
        itxn_begin
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let tmp%10#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#1
        let aggregate%length%1#1: uint64 = (len "log 2")
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 "log 2")
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let tmp%11#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let aggregate%encoded%2#1: bytes = (concat 0x tmp%10#0)
        let aggregate%data_length%1#1: uint64 = (len tmp%11#0)
        let aggregate%current_tail_offset%1#1: uint64 = (+ 10u aggregate%data_length%1#1)
        let aggregate%as_bytes%3#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%3#1: bytes = (concat aggregate%encoded%2#1 aggregate%offset_as_uint16%1#1)
        let aggregate%concat%1#1: bytes = (concat aggregate%encoded%3#1 tmp%11#0)
        let aggregate%as_Encoded(uint64,(len+utf8[]))%1#1: Encoded(uint64,(len+utf8[])) = aggregate%concat%1#1
        let tmp%12#0: Encoded(uint64,(len+utf8[])) = aggregate%as_Encoded(uint64,(len+utf8[]))%1#1
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "logs_are_equal((uint64,string),(uint64,string))bool")
        ((itxn_field ApplicationArgs) tmp%12#0)
        ((itxn_field ApplicationArgs) tmp%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%16#0: Encoded(bool8) = ((extract 4 0) awst_tmp%1#0)
        let tmp%17#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%18#0: bool = (== tmp%17#0 0x151f7c75)
        (assert tmp%18#0) // application log value is not the result of an ABI return
        let aggregate%get_bit%1#1: bool = (getbit tmp%16#0 0u)
        let result#1: bool = aggregate%get_bit%1#1
        let tmp%20#0: bool = (! result#1)
        (assert tmp%20#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct(app: uint64) -> void:
    block@0: // L372
        let aggregate%length%0#1: uint64 = (len 0x6c6f672031)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x6c6f672031)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let aggregate%encoded%0#1: bytes = (concat 0x 0x0000000000000001)
        let aggregate%data_length%0#1: uint64 = (len encoded%0#0)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 10u aggregate%data_length%0#1)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded%1#1: bytes = (concat aggregate%encoded%0#1 aggregate%offset_as_uint16%0#1)
        let aggregate%concat%0#1: bytes = (concat aggregate%encoded%1#1 encoded%0#0)
        let aggregate%as_Encoded(uint64,(len+utf8[]))%0#1: Encoded(uint64,(len+utf8[])) = aggregate%concat%0#1
        let log#0: Encoded(uint64,(len+utf8[])) = aggregate%as_Encoded(uint64,(len+utf8[]))%0#1
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_log_struct((uint64,string))(uint64,string)")
        ((itxn_field ApplicationArgs) log#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let result#0: Encoded(uint64,(len+utf8[])) = ((extract 4 0) awst_tmp%0#0)
        let tmp%2#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // application log value is not the result of an ABI return
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%4#0: bool = (== result#0 log#0)
        (assert tmp%4#0) // expected output to match input
        let tmp%5#0: Encoded(uint64,(len+utf8[])) = ((extract 4 0) txn.LastLog#0)
        let tmp%6#0: bytes = ((extract 0 4) txn.LastLog#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // application log value is not the result of an ABI return
        let tmp%8#0: bool = (== tmp%5#0 log#0)
        (assert tmp%8#0) // expected output to match input
        return 