main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@21
    block@2: // abi_routing_L17
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_is_a_b(byte[],byte[],application)void" => block@3, method "test_method_selector_kinds(application)void" => block@4, method "test_method_overload(application)void" => block@5, method "test_arg_conversion(application)void" => block@6, method "test_15plus_args(application)void" => block@7, method "test_void(application)void" => block@8, method "test_ref_types(application,asset)void" => block@9, method "test_native_string(application)void" => block@10, method "test_native_bytes(application)void" => block@11, method "test_native_uint64(application)void" => block@12, method "test_native_biguint(application)void" => block@13, method "test_native_tuple(application)void" => block@14, method "test_native_tuple_method_ref(application)void" => block@15, method "test_nested_tuples(application)void" => block@16, method "test_no_args(application)void" => block@17, method "test_named_tuples(application)void" => block@18, * => block@25}
    block@3: // test_is_a_b_route_L18
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%5#0) // can only call when not creating
        let tmp%7#0: bytes = (txna ApplicationArgs 1)
        let tmp%8#0: bytes = ((extract 2 0) tmp%7#0)
        let tmp%9#0: bytes = (txna ApplicationArgs 2)
        let tmp%10#0: bytes = ((extract 2 0) tmp%9#0)
        let reinterpret_bytes[1]%0#0: bytes[1] = (txna ApplicationArgs 3)
        let tmp%11#0: uint64 = (btoi reinterpret_bytes[1]%0#0)
        let tmp%12#0: uint64 = ((txnas Applications) tmp%11#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b(tmp%8#0, tmp%10#0, tmp%12#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        goto block@26
    block@4: // test_method_selector_kinds_route_L27
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_bytes[1]%1#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%17#0: uint64 = (btoi reinterpret_bytes[1]%1#0)
        let tmp%18#0: uint64 = ((txnas Applications) tmp%17#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(tmp%18#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#1: bool = 1u
        goto block@26
    block@5: // test_method_overload_route_L41
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (!= tmp%21#0 0u)
        (assert tmp%21#0) // can only call when not creating
        let reinterpret_bytes[1]%2#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%23#0: uint64 = (btoi reinterpret_bytes[1]%2#0)
        let tmp%24#0: uint64 = ((txnas Applications) tmp%23#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(tmp%24#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#2: bool = 1u
        goto block@26
    block@6: // test_arg_conversion_route_L56
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (! tmp%25#0)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        let tmp%28#0: bool = (!= tmp%27#0 0u)
        (assert tmp%27#0) // can only call when not creating
        let reinterpret_bytes[1]%3#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%29#0: uint64 = (btoi reinterpret_bytes[1]%3#0)
        let tmp%30#0: uint64 = ((txnas Applications) tmp%29#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(tmp%30#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#3: bool = 1u
        goto block@26
    block@7: // test_15plus_args_route_L73
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (! tmp%31#0)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        let tmp%34#0: bool = (!= tmp%33#0 0u)
        (assert tmp%33#0) // can only call when not creating
        let reinterpret_bytes[1]%4#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%35#0: uint64 = (btoi reinterpret_bytes[1]%4#0)
        let tmp%36#0: uint64 = ((txnas Applications) tmp%35#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(tmp%36#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#4: bool = 1u
        goto block@26
    block@8: // test_void_route_L101
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (! tmp%37#0)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        let tmp%40#0: bool = (!= tmp%39#0 0u)
        (assert tmp%39#0) // can only call when not creating
        let reinterpret_bytes[1]%5#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%41#0: uint64 = (btoi reinterpret_bytes[1]%5#0)
        let tmp%42#0: uint64 = ((txnas Applications) tmp%41#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_void(tmp%42#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#5: bool = 1u
        goto block@26
    block@9: // test_ref_types_route_L115
        let tmp%43#0: uint64 = (txn OnCompletion)
        let tmp%44#0: bool = (! tmp%43#0)
        (assert tmp%44#0) // OnCompletion is not NoOp
        let tmp%45#0: uint64 = (txn ApplicationID)
        let tmp%46#0: bool = (!= tmp%45#0 0u)
        (assert tmp%45#0) // can only call when not creating
        let reinterpret_bytes[1]%6#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%47#0: uint64 = (btoi reinterpret_bytes[1]%6#0)
        let tmp%48#0: uint64 = ((txnas Applications) tmp%47#0)
        let reinterpret_bytes[1]%7#0: bytes[1] = (txna ApplicationArgs 2)
        let tmp%49#0: uint64 = (btoi reinterpret_bytes[1]%7#0)
        let tmp%50#0: uint64 = ((txnas Assets) tmp%49#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(tmp%48#0, tmp%50#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#6: bool = 1u
        goto block@26
    block@10: // test_native_string_route_L129
        let tmp%51#0: uint64 = (txn OnCompletion)
        let tmp%52#0: bool = (! tmp%51#0)
        (assert tmp%52#0) // OnCompletion is not NoOp
        let tmp%53#0: uint64 = (txn ApplicationID)
        let tmp%54#0: bool = (!= tmp%53#0 0u)
        (assert tmp%53#0) // can only call when not creating
        let reinterpret_bytes[1]%8#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%55#0: uint64 = (btoi reinterpret_bytes[1]%8#0)
        let tmp%56#0: uint64 = ((txnas Applications) tmp%55#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(tmp%56#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#7: bool = 1u
        goto block@26
    block@11: // test_native_bytes_route_L140
        let tmp%57#0: uint64 = (txn OnCompletion)
        let tmp%58#0: bool = (! tmp%57#0)
        (assert tmp%58#0) // OnCompletion is not NoOp
        let tmp%59#0: uint64 = (txn ApplicationID)
        let tmp%60#0: bool = (!= tmp%59#0 0u)
        (assert tmp%59#0) // can only call when not creating
        let reinterpret_bytes[1]%9#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%61#0: uint64 = (btoi reinterpret_bytes[1]%9#0)
        let tmp%62#0: uint64 = ((txnas Applications) tmp%61#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(tmp%62#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#8: bool = 1u
        goto block@26
    block@12: // test_native_uint64_route_L153
        let tmp%63#0: uint64 = (txn OnCompletion)
        let tmp%64#0: bool = (! tmp%63#0)
        (assert tmp%64#0) // OnCompletion is not NoOp
        let tmp%65#0: uint64 = (txn ApplicationID)
        let tmp%66#0: bool = (!= tmp%65#0 0u)
        (assert tmp%65#0) // can only call when not creating
        let reinterpret_bytes[1]%10#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%67#0: uint64 = (btoi reinterpret_bytes[1]%10#0)
        let tmp%68#0: uint64 = ((txnas Applications) tmp%67#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(tmp%68#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#9: bool = 1u
        goto block@26
    block@13: // test_native_biguint_route_L164
        let tmp%69#0: uint64 = (txn OnCompletion)
        let tmp%70#0: bool = (! tmp%69#0)
        (assert tmp%70#0) // OnCompletion is not NoOp
        let tmp%71#0: uint64 = (txn ApplicationID)
        let tmp%72#0: bool = (!= tmp%71#0 0u)
        (assert tmp%71#0) // can only call when not creating
        let reinterpret_bytes[1]%11#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%73#0: uint64 = (btoi reinterpret_bytes[1]%11#0)
        let tmp%74#0: uint64 = ((txnas Applications) tmp%73#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(tmp%74#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#10: bool = 1u
        goto block@26
    block@14: // test_native_tuple_route_L175
        let tmp%75#0: uint64 = (txn OnCompletion)
        let tmp%76#0: bool = (! tmp%75#0)
        (assert tmp%76#0) // OnCompletion is not NoOp
        let tmp%77#0: uint64 = (txn ApplicationID)
        let tmp%78#0: bool = (!= tmp%77#0 0u)
        (assert tmp%77#0) // can only call when not creating
        let reinterpret_bytes[1]%12#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%79#0: uint64 = (btoi reinterpret_bytes[1]%12#0)
        let tmp%80#0: uint64 = ((txnas Applications) tmp%79#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(tmp%80#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#11: bool = 1u
        goto block@26
    block@15: // test_native_tuple_method_ref_route_L234
        let tmp%81#0: uint64 = (txn OnCompletion)
        let tmp%82#0: bool = (! tmp%81#0)
        (assert tmp%82#0) // OnCompletion is not NoOp
        let tmp%83#0: uint64 = (txn ApplicationID)
        let tmp%84#0: bool = (!= tmp%83#0 0u)
        (assert tmp%83#0) // can only call when not creating
        let reinterpret_bytes[1]%13#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%85#0: uint64 = (btoi reinterpret_bytes[1]%13#0)
        let tmp%86#0: uint64 = ((txnas Applications) tmp%85#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref(tmp%86#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#12: bool = 1u
        goto block@26
    block@16: // test_nested_tuples_route_L284
        let tmp%87#0: uint64 = (txn OnCompletion)
        let tmp%88#0: bool = (! tmp%87#0)
        (assert tmp%88#0) // OnCompletion is not NoOp
        let tmp%89#0: uint64 = (txn ApplicationID)
        let tmp%90#0: bool = (!= tmp%89#0 0u)
        (assert tmp%89#0) // can only call when not creating
        let reinterpret_bytes[1]%14#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%91#0: uint64 = (btoi reinterpret_bytes[1]%14#0)
        let tmp%92#0: uint64 = ((txnas Applications) tmp%91#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples(tmp%92#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#13: bool = 1u
        goto block@26
    block@17: // test_no_args_route_L330
        let tmp%93#0: uint64 = (txn OnCompletion)
        let tmp%94#0: bool = (! tmp%93#0)
        (assert tmp%94#0) // OnCompletion is not NoOp
        let tmp%95#0: uint64 = (txn ApplicationID)
        let tmp%96#0: bool = (!= tmp%95#0 0u)
        (assert tmp%95#0) // can only call when not creating
        let reinterpret_bytes[1]%15#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%97#0: uint64 = (btoi reinterpret_bytes[1]%15#0)
        let tmp%98#0: uint64 = ((txnas Applications) tmp%97#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args(tmp%98#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#14: bool = 1u
        goto block@26
    block@18: // test_named_tuples_route_L340
        let tmp%99#0: uint64 = (txn OnCompletion)
        let tmp%100#0: bool = (! tmp%99#0)
        (assert tmp%100#0) // OnCompletion is not NoOp
        let tmp%101#0: uint64 = (txn ApplicationID)
        let tmp%102#0: bool = (!= tmp%101#0 0u)
        (assert tmp%101#0) // can only call when not creating
        let reinterpret_bytes[1]%16#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%103#0: uint64 = (btoi reinterpret_bytes[1]%16#0)
        let tmp%104#0: uint64 = ((txnas Applications) tmp%103#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples(tmp%104#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#15: bool = 1u
        goto block@26
    block@21: // bare_routing_L17
        let tmp%105#0: uint64 = (txn OnCompletion)
        goto tmp%105#0 ? block@25 : block@22
    block@22: // __algopy_default_create_L1
        let tmp%106#0: uint64 = (txn ApplicationID)
        let tmp%107#0: bool = (! tmp%106#0)
        (assert tmp%107#0) // can only call when creating
        test_cases.typed_abi_call.typed_c2c.Greeter.__algopy_default_create()
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#16: bool = 1u
        goto block@26
    block@25: // after_if_else_L17
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#17: bool = 0u
        goto block@26
    block@26: // after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0 <- block@3, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#1 <- block@4, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#2 <- block@5, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#3 <- block@6, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#4 <- block@7, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#5 <- block@8, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#6 <- block@9, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#7 <- block@10, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#8 <- block@11, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#9 <- block@12, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#10 <- block@13, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#11 <- block@14, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#12 <- block@15, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#13 <- block@16, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#14 <- block@17, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#15 <- block@18, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#16 <- block@22, test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#17 <- block@25)
        return tmp%0#0

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b(a: bytes, b: bytes, app: uint64) -> void:
    block@0: // L18
        itxn_begin
        let length%0#0: uint64 = (len a#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 a#0)
        let length%1#0: uint64 = (len b#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 b#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "is_a_b(byte[],byte[])void")
        ((itxn_field ApplicationArgs) encoded_value%0#0)
        ((itxn_field ApplicationArgs) encoded_value%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(app: uint64) -> void:
    block@0: // L27
        let tmp%0#0: bool = 1u
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) 0x00057465737431)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let result#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%2#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // ARC4 prefix is valid
        let tmp%4#0: bool = (== result#0 0x000b6563686f3a207465737431)
        (assert tmp%4#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) 0x00057465737432)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let result#1: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // ARC4 prefix is valid
        let tmp%8#0: bool = (== result#1 0x000b6563686f3a207465737432)
        (assert tmp%8#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) 0x00057465737433)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let result#2: bytes = ((extract 4 0) awst_tmp%2#0)
        let tmp%10#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%11#0: bool = (== tmp%10#0 0x151f7c75)
        (assert tmp%11#0) // ARC4 prefix is valid
        let tmp%12#0: bool = (== result#2 0x000b6563686f3a207465737433)
        (assert tmp%12#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) 0x00057465737434)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let result#3: bytes = ((extract 4 0) awst_tmp%3#0)
        let tmp%14#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%15#0: bool = (== tmp%14#0 0x151f7c75)
        (assert tmp%15#0) // ARC4 prefix is valid
        let tmp%16#0: bool = (== result#3 0x000b6563686f3a207465737434)
        (assert tmp%16#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) 0x00057465737435)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%4#0: bytes = (itxn LastLog)
        let result#4: bytes = ((extract 4 0) awst_tmp%4#0)
        let tmp%18#0: bytes = ((extract 0 4) awst_tmp%4#0)
        let tmp%19#0: bool = (== tmp%18#0 0x151f7c75)
        (assert tmp%19#0) // ARC4 prefix is valid
        let tmp%20#0: bool = (== result#4 0x000b6563686f3a207465737435)
        (assert tmp%20#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(app: uint64) -> void:
    block@0: // L41
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) 0x000e7479706564202b2069676e6f7265)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // ARC4 prefix is valid
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%3#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%4#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%5#0: bool = (== tmp%4#0 0x151f7c75)
        (assert tmp%5#0) // ARC4 prefix is valid
        let tmp%6#0: bool = (== tmp%3#0 0x00146563686f3a207479706564202b2069676e6f7265)
        (assert tmp%6#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) 0x0010756e7479706564202b2069676e6f7265)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%7#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let tmp%8#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%9#0: bool = (== tmp%8#0 0x151f7c75)
        (assert tmp%9#0) // ARC4 prefix is valid
        let tmp%10#0: bool = (== tmp%7#0 0x00166563686f3a20756e7479706564202b2069676e6f7265)
        (assert tmp%10#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) 0x00057475706c65)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let result.0#0: bytes = ((extract 4 0) awst_tmp%3#0)
        let tmp%12#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%13#0: bool = (== tmp%12#0 0x151f7c75)
        (assert tmp%13#0) // ARC4 prefix is valid
        let result.1.LastLog#0: bytes = (itxn LastLog)
        let tmp%14#0: bool = (== result.0#0 0x000b6563686f3a207475706c65)
        (assert tmp%14#0)
        let tmp%15#0: bytes = ((extract 4 0) result.1.LastLog#0)
        let tmp%16#0: bytes = ((extract 0 4) result.1.LastLog#0)
        let tmp%17#0: bool = (== tmp%16#0 0x151f7c75)
        (assert tmp%17#0) // ARC4 prefix is valid
        let tmp%18#0: bool = (== tmp%15#0 0x000b6563686f3a207475706c65)
        (assert tmp%18#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) 0x0007756e7479706564)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn_result.LastLog#0: bytes = (itxn LastLog)
        let tmp%19#0: bytes = ((extract 4 0) txn_result.LastLog#0)
        let tmp%20#0: bytes = ((extract 0 4) txn_result.LastLog#0)
        let tmp%21#0: bool = (== tmp%20#0 0x151f7c75)
        (assert tmp%21#0) // ARC4 prefix is valid
        let tmp%22#0: bool = (== tmp%19#0 0x000d6563686f3a20756e7479706564)
        (assert tmp%22#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(app: uint64) -> void:
    block@0: // L56
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) 0x000a636f6e76657274656431)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%0#0: bool = (== txn.LastLog#0 0x636f6e76657274656431)
        (assert tmp%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(uint64)void")
        ((itxn_field ApplicationArgs) 0x0000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#1: bytes = (itxn LastLog)
        let tmp%1#0: bytes = (itob 2u)
        let tmp%2#0: bool = (== txn.LastLog#1 tmp%1#0)
        (assert tmp%2#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(uint512)void")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#2: bytes = (itxn LastLog)
        let tmp%3#0: bytes = (bzero 56u)
        let tmp%4#0: bytes = (itob 3u)
        let tmp%5#0: bytes = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003
        let tmp%6#0: bool = (== txn.LastLog#2 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)
        (assert tmp%6#0)
        itxn_begin
        let length%0#0: uint64 = 1u
        let as_bytes%0#0: bytes[8] = (itob 1u)
        let length_uint16%0#0: bytes = 0x0001
        let encoded_value%0#0: bytes = 0x000134
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(byte[])void")
        ((itxn_field ApplicationArgs) 0x000134)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#3: bytes = (itxn LastLog)
        let tmp%7#0: bool = (== txn.LastLog#3 0x34)
        (assert tmp%7#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(bool)void")
        ((itxn_field ApplicationArgs) 0x80)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#4: bytes = (itxn LastLog)
        let tmp%8#0: bool = (== txn.LastLog#4 0x54727565)
        (assert tmp%8#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(app: uint64) -> void:
    block@0: // L73
        itxn_begin
        let encoded_tuple_buffer%1#0: bytes = 0xde
        let encoded_tuple_buffer%2#0: bytes = 0xdead
        let encoded_tuple_buffer%3#0: bytes = 0xdeadbe
        let encoded_tuple_buffer%4#0: bytes = 0xdeadbeef
        let encoded_tuple_buffer%6#0: bytes = 0x0f
        let encoded_tuple_buffer%7#0: bytes = 0x0f10
        let encoded_tuple_buffer%8#0: bytes = 0x0f1011
        let encoded_tuple_buffer%9#0: bytes = 0x0f101112
        let encoded_tuple_buffer%10#0: bytes = 0x0f101112deadbeef
        let encoded_tuple_buffer%11#0: bytes = 0x0f101112deadbeef14
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]")
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x0000000000000002)
        ((itxn_field ApplicationArgs) 0x0000000000000003)
        ((itxn_field ApplicationArgs) 0x0000000000000004)
        ((itxn_field ApplicationArgs) 0x0000000000000005)
        ((itxn_field ApplicationArgs) 0x0000000000000006)
        ((itxn_field ApplicationArgs) 0x0000000000000007)
        ((itxn_field ApplicationArgs) 0x0000000000000008)
        ((itxn_field ApplicationArgs) 0x0000000000000009)
        ((itxn_field ApplicationArgs) 0x000000000000000a)
        ((itxn_field ApplicationArgs) 0x000000000000000b)
        ((itxn_field ApplicationArgs) 0x000000000000000c)
        ((itxn_field ApplicationArgs) 0x000000000000000d)
        ((itxn_field ApplicationArgs) 0x000000000000000e)
        ((itxn_field ApplicationArgs) 0x0f101112deadbeef14)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let result#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // ARC4 prefix is valid
        let tmp%3#0: bytes = ((extract 6 0) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x0f101112deadbeef14)
        (assert tmp%4#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_void(app: uint64) -> void:
    block@0: // L101
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) 0x0006576f726c6431)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%0#0: bool = (== txn.LastLog#0 0x576f726c6431)
        (assert tmp%0#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) 0x0006576f726c6432)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#1: bytes = (itxn LastLog)
        let tmp%1#0: bool = (== txn.LastLog#1 0x576f726c6432)
        (assert tmp%1#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) 0x0006576f726c6433)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#2: bytes = (itxn LastLog)
        let tmp%2#0: bool = (== txn.LastLog#2 0x576f726c6433)
        (assert tmp%2#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) 0x0006576f726c6434)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#3: bytes = (itxn LastLog)
        let tmp%3#0: bool = (== txn.LastLog#3 0x576f726c6434)
        (assert tmp%3#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(app: uint64, asset: uint64) -> void:
    block@0: // L115
        itxn_begin
        let tmp%0#0: bytes[32] = (global CurrentApplicationAddress)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field Assets) asset#0)
        ((itxn_field Applications) app#0)
        ((itxn_field Accounts) tmp%0#0)
        ((itxn_field ApplicationArgs) method "log(asset,account,application)void")
        ((itxn_field ApplicationArgs) 0x00)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
        (assert check%0#0) // asset exists
        let tmp%1#0: bytes[32] = (global CurrentApplicationAddress)
        let tmp%2#0: bytes = (concat value%0#0 tmp%1#0)
        let (value%1#0: bytes[32], check%1#0: bool) = ((app_params_get AppAddress) app#0)
        (assert check%1#0) // application exists
        let tmp%3#0: bytes = (concat tmp%2#0 value%1#0)
        let tmp%4#0: bool = (== txn.LastLog#0 tmp%3#0)
        (assert tmp%4#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(app: uint64) -> void:
    block@0: // L129
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
        ((itxn_field ApplicationArgs) 0x000173)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // ARC4 prefix is valid
        let result1#0: bytes = ((extract 6 0) awst_tmp%0#0)
        let tmp%4#0: bool = (== result1#0 "echo: s")
        (assert tmp%4#0)
        itxn_begin
        let length%0#0: uint64 = 1u
        let as_bytes%0#0: bytes[8] = (itob 1u)
        let length_uint16%0#0: bytes = 0x0001
        let encoded_value%0#0: bytes = 0x000173
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
        ((itxn_field ApplicationArgs) 0x000173)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%5#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // ARC4 prefix is valid
        let result2#0: bytes = ((extract 6 0) awst_tmp%1#0)
        let tmp%9#0: bool = (== result2#0 result1#0)
        (assert tmp%9#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
        ((itxn_field ApplicationArgs) 0x000173)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%10#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let tmp%11#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%12#0: bool = (== tmp%11#0 0x151f7c75)
        (assert tmp%12#0) // ARC4 prefix is valid
        let result3#0: bytes = ((extract 6 0) awst_tmp%2#0)
        let tmp%14#0: bool = (== result3#0 result1#0)
        (assert tmp%14#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(app: uint64) -> void:
    block@0: // L140
        itxn_begin
        let length%0#0: uint64 = 1u
        let as_bytes%0#0: bytes[8] = (itob 1u)
        let length_uint16%0#0: bytes = 0x0001
        let encoded_value%0#0: bytes = 0x000162
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
        ((itxn_field ApplicationArgs) 0x000162)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // ARC4 prefix is valid
        let result1#0: bytes = ((extract 6 0) awst_tmp%0#0)
        let tmp%4#0: bool = (== result1#0 0x6563686f3a2062)
        (assert tmp%4#0)
        itxn_begin
        let length%1#0: uint64 = 1u
        let length_uint16%1#0: bytes = 0x0001
        let encoded_value%1#0: bytes = 0x000162
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
        ((itxn_field ApplicationArgs) 0x000162)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%5#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // ARC4 prefix is valid
        let result2#0: bytes = ((extract 6 0) awst_tmp%1#0)
        let tmp%9#0: bool = (== result2#0 result1#0)
        (assert tmp%9#0)
        itxn_begin
        let length%2#0: uint64 = 1u
        let length_uint16%2#0: bytes = 0x0001
        let encoded_value%2#0: bytes = 0x000162
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
        ((itxn_field ApplicationArgs) 0x000162)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%10#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let tmp%11#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%12#0: bool = (== tmp%11#0 0x151f7c75)
        (assert tmp%12#0) // ARC4 prefix is valid
        let result3#0: bytes = ((extract 6 0) awst_tmp%2#0)
        let tmp%14#0: bool = (== result3#0 result1#0)
        (assert tmp%14#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(app: uint64) -> void:
    block@0: // L153
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: bytes[8] = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // ARC4 prefix is valid
        let result1#0: uint64 = (btoi tmp%0#0)
        let tmp%4#0: bool = (== result1#0 2u)
        (assert tmp%4#0)
        itxn_begin
        let val_as_bytes%0#0: bytes[8] = (itob 1u)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
        ((itxn_field ApplicationArgs) val_as_bytes%0#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%5#0: bytes[8] = ((extract 4 0) awst_tmp%1#0)
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // ARC4 prefix is valid
        let result2#0: uint64 = (btoi tmp%5#0)
        let tmp%9#0: bool = (== result2#0 result1#0)
        (assert tmp%9#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%10#0: bytes[8] = ((extract 4 0) awst_tmp%2#0)
        let tmp%11#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%12#0: bool = (== tmp%11#0 0x151f7c75)
        (assert tmp%12#0) // ARC4 prefix is valid
        let result3#0: uint64 = (btoi tmp%10#0)
        let tmp%14#0: bool = (== result3#0 result1#0)
        (assert tmp%14#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(app: uint64) -> void:
    block@0: // L164
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let result1#0: biguint = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // ARC4 prefix is valid
        let tmp%3#0: bool = (b== result1#0 3b)
        (assert tmp%3#0)
        itxn_begin
        let len_%0#0: uint64 = 1u
        let no_overflow%0#0: bool = 1u
        let b_zeros%0#0: bytes = (bzero 64u)
        let tmp%4#0: bytes = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let result2#0: biguint = ((extract 4 0) awst_tmp%1#0)
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // ARC4 prefix is valid
        let tmp%8#0: bool = (b== result2#0 result1#0)
        (assert tmp%8#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let result3#0: biguint = ((extract 4 0) awst_tmp%2#0)
        let tmp%10#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%11#0: bool = (== tmp%10#0 0x151f7c75)
        (assert tmp%11#0) // ARC4 prefix is valid
        let tmp%12#0: bool = (b== result3#0 result1#0)
        (assert tmp%12#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(app: uint64) -> void:
    block@0: // L175
        itxn_begin
        let length%0#0: uint64 = 2u
        let as_bytes%0#0: bytes[8] = (itob 2u)
        let length_uint16%0#0: bytes = 0x0002
        let encoded_value%0#0: bytes = 0x00026231
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) 0x00027331)
        ((itxn_field ApplicationArgs) 0x00026231)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let result1#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // ARC4 prefix is valid
        let item_start_offset%0#0: uint64 = (extract_uint16 result1#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 result1#0 2u)
        let s#0: bytes = (substring3 result1#0 item_start_offset%0#0 item_end_offset%0#0)
        let item_end_offset%1#0: uint64 = (len result1#0)
        let b#0: bytes = (substring3 result1#0 item_end_offset%0#0 item_end_offset%1#0)
        let u#0: bytes[8] = ((extract 8 8) awst_tmp%0#0)
        let bu#0: bytes[64] = ((extract 16 64) awst_tmp%0#0)
        let tmp%3#0: bytes = ((extract 2 0) s#0)
        let tmp%4#0: bool = (== tmp%3#0 "echo: s1")
        (assert tmp%4#0)
        let tmp%5#0: bytes = ((extract 2 0) b#0)
        let tmp%6#0: bool = (== tmp%5#0 0x6563686f3a206231)
        (assert tmp%6#0)
        let tmp%7#0: uint64 = (extract_uint64 awst_tmp%0#0 8u)
        let tmp%8#0: bool = (== tmp%7#0 2u)
        (assert tmp%8#0)
        let tmp%9#0: bool = (b== bu#0 3b)
        (assert tmp%9#0)
        itxn_begin
        let length%1#0: uint64 = 2u
        let length_uint16%1#0: bytes = 0x0002
        let encoded_value%1#0: bytes = 0x00027331
        let length%2#0: uint64 = 2u
        let length_uint16%2#0: bytes = 0x0002
        let encoded_value%2#0: bytes = 0x00026231
        let val_as_bytes%0#0: bytes[8] = (itob 1u)
        let len_%0#0: uint64 = 1u
        let no_overflow%0#0: bool = 1u
        let b_zeros%0#0: bytes = (bzero 64u)
        let tmp%10#0: bytes = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) 0x00027331)
        ((itxn_field ApplicationArgs) 0x00026231)
        ((itxn_field ApplicationArgs) val_as_bytes%0#0)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let result2#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%12#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%13#0: bool = (== tmp%12#0 0x151f7c75)
        (assert tmp%13#0) // ARC4 prefix is valid
        let tmp%14#0: bool = (== result1#0 result2#0)
        (assert tmp%14#0)
        itxn_begin
        let length%3#0: uint64 = 2u
        let length_uint16%3#0: bytes = 0x0002
        let encoded_value%3#0: bytes = 0x00026231
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) 0x00027331)
        ((itxn_field ApplicationArgs) 0x00026231)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let result3#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let tmp%16#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%17#0: bool = (== tmp%16#0 0x151f7c75)
        (assert tmp%17#0) // ARC4 prefix is valid
        let tmp%18#0: bool = (== result1#0 result3#0)
        (assert tmp%18#0)
        itxn_begin
        let length%4#0: uint64 = 2u
        let length_uint16%4#0: bytes = 0x0002
        let encoded_value%4#0: bytes = 0x00026231
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) 0x00027331)
        ((itxn_field ApplicationArgs) 0x00026231)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%19#0: bytes = ((extract 4 0) awst_tmp%3#0)
        let tmp%20#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%21#0: bool = (== tmp%20#0 0x151f7c75)
        (assert tmp%21#0) // ARC4 prefix is valid
        let item_start_offset%2#0: uint64 = (extract_uint16 tmp%19#0 0u)
        let item_end_offset%2#0: uint64 = (extract_uint16 tmp%19#0 2u)
        let item0%1#0: bytes = (substring3 tmp%19#0 item_start_offset%2#0 item_end_offset%2#0)
        let result_native.0#0: bytes = ((extract 2 0) item0%1#0)
        let item_end_offset%3#0: uint64 = (len tmp%19#0)
        let item1%1#0: bytes = (substring3 tmp%19#0 item_end_offset%2#0 item_end_offset%3#0)
        let result_native.1#0: bytes = ((extract 2 0) item1%1#0)
        let item2%1#0: bytes = ((extract 8 8) awst_tmp%3#0)
        let result_native.2#0: uint64 = (extract_uint64 awst_tmp%3#0 8u)
        let result_native.3#0: biguint = ((extract 16 64) awst_tmp%3#0)
        let tmp%23#0: bool = (== tmp%3#0 result_native.0#0)
        (assert tmp%23#0)
        let tmp%25#0: bool = (== tmp%5#0 result_native.1#0)
        (assert tmp%25#0)
        let tmp%27#0: bool = (== tmp%7#0 result_native.2#0)
        (assert tmp%27#0)
        let tmp%28#0: bool = (b== bu#0 result_native.3#0)
        (assert tmp%28#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref(app: uint64) -> void:
    block@0: // L234
        itxn_begin
        let length%0#0: uint64 = 2u
        let as_bytes%0#0: bytes[8] = (itob 2u)
        let length_uint16%0#0: bytes = 0x0002
        let encoded_value%0#0: bytes = 0x00026231
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) 0x00027331)
        ((itxn_field ApplicationArgs) 0x00026231)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // ARC4 prefix is valid
        let item_start_offset%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 tmp%0#0 2u)
        let item0%0#0: bytes = (substring3 tmp%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let result.0#0: bytes = ((extract 2 0) item0%0#0)
        let item_end_offset%1#0: uint64 = (len tmp%0#0)
        let item1%0#0: bytes = (substring3 tmp%0#0 item_end_offset%0#0 item_end_offset%1#0)
        let result.1#0: bytes = ((extract 2 0) item1%0#0)
        let item2%0#0: bytes = ((extract 8 8) awst_tmp%0#0)
        let result.2#0: uint64 = (extract_uint64 awst_tmp%0#0 8u)
        let result.3#0: biguint = ((extract 16 64) awst_tmp%0#0)
        let tmp%3#0: bool = (== result.0#0 "echo: s1")
        (assert tmp%3#0)
        let tmp%4#0: bool = (== result.1#0 0x6563686f3a206231)
        (assert tmp%4#0)
        let tmp%5#0: bool = (== result.2#0 2u)
        (assert tmp%5#0)
        let tmp%6#0: bool = (b== result.3#0 3b)
        (assert tmp%6#0)
        itxn_begin
        let length%1#0: uint64 = 2u
        let length_uint16%1#0: bytes = 0x0002
        let encoded_value%1#0: bytes = 0x00027331
        let length%2#0: uint64 = 2u
        let length_uint16%2#0: bytes = 0x0002
        let encoded_value%2#0: bytes = 0x00026231
        let val_as_bytes%0#0: bytes[8] = (itob 1u)
        let len_%0#0: uint64 = 1u
        let no_overflow%0#0: bool = 1u
        let b_zeros%0#0: bytes = (bzero 64u)
        let tmp%7#0: bytes = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) 0x00027331)
        ((itxn_field ApplicationArgs) 0x00026231)
        ((itxn_field ApplicationArgs) val_as_bytes%0#0)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%8#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%9#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
        (assert tmp%10#0) // ARC4 prefix is valid
        let item_start_offset%2#0: uint64 = (extract_uint16 tmp%8#0 0u)
        let item_end_offset%2#0: uint64 = (extract_uint16 tmp%8#0 2u)
        let item0%1#0: bytes = (substring3 tmp%8#0 item_start_offset%2#0 item_end_offset%2#0)
        let result_2.0#0: bytes = ((extract 2 0) item0%1#0)
        let item_end_offset%3#0: uint64 = (len tmp%8#0)
        let item1%1#0: bytes = (substring3 tmp%8#0 item_end_offset%2#0 item_end_offset%3#0)
        let result_2.1#0: bytes = ((extract 2 0) item1%1#0)
        let item2%1#0: bytes = ((extract 8 8) awst_tmp%1#0)
        let result_2.2#0: uint64 = (extract_uint64 awst_tmp%1#0 8u)
        let result_2.3#0: biguint = ((extract 16 64) awst_tmp%1#0)
        let tmp%11#0: bool = (== result_2.0#0 result.0#0)
        let tmp%12#0: bool = (== result_2.1#0 result.1#0)
        let tmp%13#0: bool = (&& tmp%11#0 tmp%12#0)
        let tmp%14#0: bool = (== result_2.2#0 result.2#0)
        let tmp%15#0: bool = (&& tmp%13#0 tmp%14#0)
        let tmp%16#0: bool = (b== result_2.3#0 result.3#0)
        let tmp%17#0: bool = (&& tmp%15#0 tmp%16#0)
        (assert tmp%17#0) // expected native arguments to give the same result
        itxn_begin
        let length%3#0: uint64 = 2u
        let length_uint16%3#0: bytes = 0x0002
        let encoded_value%3#0: bytes = 0x00026231
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) 0x00027331)
        ((itxn_field ApplicationArgs) 0x00026231)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%18#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let tmp%19#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%20#0: bool = (== tmp%19#0 0x151f7c75)
        (assert tmp%20#0) // ARC4 prefix is valid
        let item_start_offset%4#0: uint64 = (extract_uint16 tmp%18#0 0u)
        let item_end_offset%4#0: uint64 = (extract_uint16 tmp%18#0 2u)
        let item0%2#0: bytes = (substring3 tmp%18#0 item_start_offset%4#0 item_end_offset%4#0)
        let result_3.0#0: bytes = ((extract 2 0) item0%2#0)
        let item_end_offset%5#0: uint64 = (len tmp%18#0)
        let item1%2#0: bytes = (substring3 tmp%18#0 item_end_offset%4#0 item_end_offset%5#0)
        let result_3.1#0: bytes = ((extract 2 0) item1%2#0)
        let item2%2#0: bytes = ((extract 8 8) awst_tmp%2#0)
        let result_3.2#0: uint64 = (extract_uint64 awst_tmp%2#0 8u)
        let result_3.3#0: biguint = ((extract 16 64) awst_tmp%2#0)
        let tmp%21#0: bool = (== result_3.0#0 result.0#0)
        let tmp%22#0: bool = (== result_3.1#0 result.1#0)
        let tmp%23#0: bool = (&& tmp%21#0 tmp%22#0)
        let tmp%24#0: bool = (== result_3.2#0 result.2#0)
        let tmp%25#0: bool = (&& tmp%23#0 tmp%24#0)
        let tmp%26#0: bool = (b== result_3.3#0 result.3#0)
        let tmp%27#0: bool = (&& tmp%25#0 tmp%26#0)
        (assert tmp%27#0) // expected arc4 arguments to give the same result
        itxn_begin
        let length%4#0: uint64 = 2u
        let length_uint16%4#0: bytes = 0x0002
        let encoded_value%4#0: bytes = 0x00026231
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) 0x00027331)
        ((itxn_field ApplicationArgs) 0x00026231)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%28#0: bytes = ((extract 4 0) awst_tmp%3#0)
        let tmp%29#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%30#0: bool = (== tmp%29#0 0x151f7c75)
        (assert tmp%30#0) // ARC4 prefix is valid
        let item_start_offset%6#0: uint64 = (extract_uint16 tmp%28#0 0u)
        let item_end_offset%6#0: uint64 = (extract_uint16 tmp%28#0 2u)
        let item0%3#0: bytes = (substring3 tmp%28#0 item_start_offset%6#0 item_end_offset%6#0)
        let result_native.0#0: bytes = ((extract 2 0) item0%3#0)
        let item_end_offset%7#0: uint64 = (len tmp%28#0)
        let item1%3#0: bytes = (substring3 tmp%28#0 item_end_offset%6#0 item_end_offset%7#0)
        let result_native.1#0: bytes = ((extract 2 0) item1%3#0)
        let item2%3#0: bytes = ((extract 8 8) awst_tmp%3#0)
        let result_native.2#0: uint64 = (extract_uint64 awst_tmp%3#0 8u)
        let result_native.3#0: biguint = ((extract 16 64) awst_tmp%3#0)
        let tmp%31#0: bool = (== result_native.0#0 result.0#0)
        let tmp%32#0: bool = (== result_native.1#0 result.1#0)
        let tmp%33#0: bool = (&& tmp%31#0 tmp%32#0)
        let tmp%34#0: bool = (== result_native.2#0 result.2#0)
        let tmp%35#0: bool = (&& tmp%33#0 tmp%34#0)
        let tmp%36#0: bool = (b== result_native.3#0 result.3#0)
        let tmp%37#0: bool = (&& tmp%35#0 tmp%36#0)
        (assert tmp%37#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples(app: uint64) -> void:
    block@0: // L284
        itxn_begin
        let length%0#0: uint64 = 1u
        let as_bytes%0#0: bytes[8] = (itob 1u)
        let length_uint16%0#0: bytes = 0x0001
        let encoded_value%0#0: bytes = 0x000133
        let as_bytes%1#0: bytes[8] = (itob 4u)
        let offset_as_uint16%0#0: bytes = 0x0004
        let encoded_tuple_buffer%1#0: bytes = 0x0004
        let data_length%0#0: uint64 = 4u
        let current_tail_offset%1#0: uint64 = 8u
        let as_bytes%2#0: bytes[8] = (itob 8u)
        let offset_as_uint16%1#0: bytes = 0x0008
        let encoded_tuple_buffer%2#0: bytes = 0x00040008
        let data_length%1#0: uint64 = 4u
        let encoded_tuple_buffer%3#0: bytes = 0x0004000800027331
        let encoded_tuple_buffer%4#0: bytes = 0x000400080002733100027332
        let encoded_tuple_buffer%6#0: bytes = 0x0000000000000001
        let encoded_tuple_buffer%7#0: bytes = 0x00000000000000010000000000000002
        let as_bytes%3#0: bytes[8] = (itob 18u)
        let offset_as_uint16%2#0: bytes = 0x0012
        let encoded_tuple_buffer%8#0: bytes = 0x000000000000000100000000000000020012
        let data_length%2#0: uint64 = 3u
        let encoded_tuple_buffer%9#0: bytes = 0x000000000000000100000000000000020012000133
        let offset_as_uint16%3#0: bytes = 0x0004
        let encoded_tuple_buffer%11#0: bytes = 0x0004
        let data_length%3#0: uint64 = 12u
        let current_tail_offset%6#0: uint64 = 16u
        let as_bytes%5#0: bytes[8] = (itob 16u)
        let offset_as_uint16%4#0: bytes = 0x0010
        let encoded_tuple_buffer%12#0: bytes = 0x00040010
        let data_length%4#0: uint64 = 21u
        let encoded_tuple_buffer%13#0: bytes = 0x00040010000400080002733100027332
        let encoded_tuple_buffer%14#0: bytes = 0x00040010000400080002733100027332000000000000000100000000000000020012000133
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))")
        ((itxn_field ApplicationArgs) 0x00040010000400080002733100027332000000000000000100000000000000020012000133)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // ARC4 prefix is valid
        let item_start_offset%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 tmp%0#0 2u)
        let item0%0#0: bytes = (substring3 tmp%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item_start_offset%1#0: uint64 = (extract_uint16 item0%0#0 0u)
        let item_end_offset%1#0: uint64 = (extract_uint16 item0%0#0 2u)
        let item0%1#0: bytes = (substring3 item0%0#0 item_start_offset%1#0 item_end_offset%1#0)
        let result.0.0#0: bytes = ((extract 2 0) item0%1#0)
        let item_end_offset%2#0: uint64 = (len item0%0#0)
        let result.0.1#0: bytes = (substring3 item0%0#0 item_end_offset%1#0 item_end_offset%2#0)
        let item_end_offset%3#0: uint64 = (len tmp%0#0)
        let item1%1#0: bytes = (substring3 tmp%0#0 item_end_offset%0#0 item_end_offset%3#0)
        let item0%2#0: bytes = ((extract 0 8) item1%1#0) // on error: Index access is out of bounds
        let result.1.0#0: uint64 = (extract_uint64 item1%1#0 0u)
        let result.1.1#0: bytes[8] = ((extract 8 8) item1%1#0) // on error: Index access is out of bounds
        let item_start_offset%4#0: uint64 = (extract_uint16 item1%1#0 16u)
        let item_end_offset%4#0: uint64 = (len item1%1#0)
        let item2%0#0: bytes = (substring3 item1%1#0 item_start_offset%4#0 item_end_offset%4#0)
        let result.1.2#0: bytes = ((extract 2 0) item2%0#0)
        let tmp%3#0: bool = (== result.0.0#0 "echo: s1")
        (assert tmp%3#0)
        let tmp%4#0: bool = (== result.0.1#0 0x00086563686f3a207332)
        (assert tmp%4#0)
        let tmp%5#0: bool = (== result.1.0#0 2u)
        (assert tmp%5#0)
        let tmp%6#0: bool = (b== result.1.1#0 0x0000000000000003)
        (assert tmp%6#0)
        let tmp%7#0: bool = (== result.1.2#0 0x6563686f3a2033)
        (assert tmp%7#0)
        itxn_begin
        let length%1#0: uint64 = 2u
        let as_bytes%6#0: bytes[8] = (itob 2u)
        let length_uint16%1#0: bytes = 0x0002
        let encoded_value%1#0: bytes = 0x00027331
        let offset_as_uint16%5#0: bytes = 0x0004
        let encoded_tuple_buffer%16#0: bytes = 0x0004
        let data_length%5#0: uint64 = 4u
        let current_tail_offset%9#0: uint64 = 8u
        let offset_as_uint16%6#0: bytes = 0x0008
        let encoded_tuple_buffer%17#0: bytes = 0x00040008
        let data_length%6#0: uint64 = 4u
        let encoded_tuple_buffer%18#0: bytes = 0x0004000800027331
        let encoded_tuple_buffer%19#0: bytes = 0x000400080002733100027332
        let length%2#0: uint64 = 1u
        let length_uint16%2#0: bytes = 0x0001
        let encoded_value%2#0: bytes = 0x000133
        let encoded_tuple_buffer%22#0: bytes = 0x00000000000000010000000000000002
        let offset_as_uint16%7#0: bytes = 0x0012
        let encoded_tuple_buffer%23#0: bytes = 0x000000000000000100000000000000020012
        let data_length%7#0: uint64 = 3u
        let encoded_tuple_buffer%24#0: bytes = 0x000000000000000100000000000000020012000133
        let offset_as_uint16%8#0: bytes = 0x0004
        let encoded_tuple_buffer%26#0: bytes = 0x0004
        let data_length%8#0: uint64 = 12u
        let current_tail_offset%14#0: uint64 = 16u
        let offset_as_uint16%9#0: bytes = 0x0010
        let encoded_tuple_buffer%27#0: bytes = 0x00040010
        let data_length%9#0: uint64 = 21u
        let encoded_tuple_buffer%28#0: bytes = 0x00040010000400080002733100027332
        let encoded_tuple_buffer%29#0: bytes = 0x00040010000400080002733100027332000000000000000100000000000000020012000133
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))")
        ((itxn_field ApplicationArgs) 0x00040010000400080002733100027332000000000000000100000000000000020012000133)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%8#0: bytes = ((extract 4 0) awst_tmp%1#0)
        let tmp%9#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
        (assert tmp%10#0) // ARC4 prefix is valid
        let item_start_offset%5#0: uint64 = (extract_uint16 tmp%8#0 0u)
        let item_end_offset%5#0: uint64 = (extract_uint16 tmp%8#0 2u)
        let item0%3#0: bytes = (substring3 tmp%8#0 item_start_offset%5#0 item_end_offset%5#0)
        let item_start_offset%6#0: uint64 = (extract_uint16 item0%3#0 0u)
        let item_end_offset%6#0: uint64 = (extract_uint16 item0%3#0 2u)
        let item0%4#0: bytes = (substring3 item0%3#0 item_start_offset%6#0 item_end_offset%6#0)
        let result.0.0#1: bytes = ((extract 2 0) item0%4#0)
        let item_end_offset%7#0: uint64 = (len item0%3#0)
        let result.0.1#1: bytes = (substring3 item0%3#0 item_end_offset%6#0 item_end_offset%7#0)
        let item_end_offset%8#0: uint64 = (len tmp%8#0)
        let item1%4#0: bytes = (substring3 tmp%8#0 item_end_offset%5#0 item_end_offset%8#0)
        let item0%5#0: bytes = ((extract 0 8) item1%4#0) // on error: Index access is out of bounds
        let result.1.0#1: uint64 = (extract_uint64 item1%4#0 0u)
        let result.1.1#1: bytes[8] = ((extract 8 8) item1%4#0) // on error: Index access is out of bounds
        let item_start_offset%9#0: uint64 = (extract_uint16 item1%4#0 16u)
        let item_end_offset%9#0: uint64 = (len item1%4#0)
        let item2%1#0: bytes = (substring3 item1%4#0 item_start_offset%9#0 item_end_offset%9#0)
        let result.1.2#1: bytes = ((extract 2 0) item2%1#0)
        let tmp%11#0: bool = (== result.0.0#1 "echo: s1")
        (assert tmp%11#0)
        let tmp%12#0: bool = (== result.0.1#1 0x00086563686f3a207332)
        (assert tmp%12#0)
        let tmp%13#0: bool = (== result.1.0#1 2u)
        (assert tmp%13#0)
        let tmp%14#0: bool = (b== result.1.1#1 0x0000000000000003)
        (assert tmp%14#0)
        let tmp%15#0: bool = (== result.1.2#1 0x6563686f3a2033)
        (assert tmp%15#0)
        itxn_begin
        let offset_as_uint16%10#0: bytes = 0x0004
        let encoded_tuple_buffer%31#0: bytes = 0x0004
        let data_length%10#0: uint64 = 5u
        let current_tail_offset%17#0: uint64 = 9u
        let as_bytes%14#0: bytes[8] = (itob 9u)
        let offset_as_uint16%11#0: bytes = 0x0009
        let encoded_tuple_buffer%32#0: bytes = 0x00040009
        let data_length%11#0: uint64 = 5u
        let encoded_tuple_buffer%33#0: bytes = 0x000400090003733162
        let encoded_tuple_buffer%34#0: bytes = 0x0004000900037331620003733262
        let length%3#0: uint64 = 2u
        let length_uint16%3#0: bytes = 0x0002
        let encoded_value%3#0: bytes = 0x00023362
        let encoded_tuple_buffer%36#0: bytes = 0x000000000000000b
        let encoded_tuple_buffer%37#0: bytes = 0x000000000000000b0000000000000015
        let offset_as_uint16%12#0: bytes = 0x0012
        let encoded_tuple_buffer%38#0: bytes = 0x000000000000000b00000000000000150012
        let data_length%12#0: uint64 = 4u
        let encoded_tuple_buffer%39#0: bytes = 0x000000000000000b0000000000000015001200023362
        let offset_as_uint16%13#0: bytes = 0x0004
        let encoded_tuple_buffer%41#0: bytes = 0x0004
        let data_length%13#0: uint64 = 14u
        let current_tail_offset%22#0: uint64 = 18u
        let offset_as_uint16%14#0: bytes = 0x0012
        let encoded_tuple_buffer%42#0: bytes = 0x00040012
        let data_length%14#0: uint64 = 22u
        let encoded_tuple_buffer%43#0: bytes = 0x000400120004000900037331620003733262
        let encoded_tuple_buffer%44#0: bytes = 0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))")
        ((itxn_field ApplicationArgs) 0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%16#0: bytes = ((extract 4 0) awst_tmp%2#0)
        let tmp%17#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%18#0: bool = (== tmp%17#0 0x151f7c75)
        (assert tmp%18#0) // ARC4 prefix is valid
        let item_start_offset%10#0: uint64 = (extract_uint16 tmp%16#0 0u)
        let item_end_offset%10#0: uint64 = (extract_uint16 tmp%16#0 2u)
        let item0%6#0: bytes = (substring3 tmp%16#0 item_start_offset%10#0 item_end_offset%10#0)
        let item_start_offset%11#0: uint64 = (extract_uint16 item0%6#0 0u)
        let item_end_offset%11#0: uint64 = (extract_uint16 item0%6#0 2u)
        let item0%7#0: bytes = (substring3 item0%6#0 item_start_offset%11#0 item_end_offset%11#0)
        let result.0.0#2: bytes = ((extract 2 0) item0%7#0)
        let item_end_offset%12#0: uint64 = (len item0%6#0)
        let result.0.1#2: bytes = (substring3 item0%6#0 item_end_offset%11#0 item_end_offset%12#0)
        let item_end_offset%13#0: uint64 = (len tmp%16#0)
        let item1%7#0: bytes = (substring3 tmp%16#0 item_end_offset%10#0 item_end_offset%13#0)
        let item0%8#0: bytes = ((extract 0 8) item1%7#0) // on error: Index access is out of bounds
        let result.1.0#2: uint64 = (extract_uint64 item1%7#0 0u)
        let result.1.1#2: bytes[8] = ((extract 8 8) item1%7#0) // on error: Index access is out of bounds
        let item_start_offset%14#0: uint64 = (extract_uint16 item1%7#0 16u)
        let item_end_offset%14#0: uint64 = (len item1%7#0)
        let item2%2#0: bytes = (substring3 item1%7#0 item_start_offset%14#0 item_end_offset%14#0)
        let result.1.2#2: bytes = ((extract 2 0) item2%2#0)
        let tmp%19#0: bool = (== result.0.0#2 "echo: s1b")
        (assert tmp%19#0)
        let tmp%20#0: bool = (== result.0.1#2 0x00096563686f3a20733262)
        (assert tmp%20#0)
        let tmp%21#0: bool = (== result.1.0#2 12u)
        (assert tmp%21#0)
        let tmp%22#0: bool = (b== result.1.1#2 0x0000000000000016)
        (assert tmp%22#0)
        let tmp%23#0: bool = (== result.1.2#2 0x6563686f3a203362)
        (assert tmp%23#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args(app: uint64) -> void:
    block@0: // L330
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "no_args()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: bytes[8] = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // ARC4 prefix is valid
        let result#0: uint64 = (btoi tmp%0#0)
        let tmp%4#0: bool = (== result#0 42u)
        (assert tmp%4#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "no_args()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let arc4_result#0: bytes[8] = ((extract 4 0) awst_tmp%1#0)
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // ARC4 prefix is valid
        let tmp%8#0: bool = (b== arc4_result#0 0x000000000000002a)
        (assert tmp%8#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "no_args()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%9#0: bytes[8] = ((extract 4 0) awst_tmp%2#0)
        let tmp%10#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%11#0: bool = (== tmp%10#0 0x151f7c75)
        (assert tmp%11#0) // ARC4 prefix is valid
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%13#0: bytes[8] = ((extract 4 0) awst_tmp%3#0)
        let tmp%14#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%15#0: bool = (== tmp%14#0 0x151f7c75)
        (assert tmp%15#0) // ARC4 prefix is valid
        let tmp%16#0: bool = (b== tmp%13#0 0x000000000000002a)
        (assert tmp%16#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples(app: uint64) -> void:
    block@0: // L340
        itxn_begin
        let val_as_bytes%0#0: bytes[8] = (itob 1u)
        let length%0#0: uint64 = 5u
        let as_bytes%0#0: bytes[8] = (itob 5u)
        let length_uint16%0#0: bytes = 0x0005
        let encoded_value%0#0: bytes = 0x00056c6f672031
        let as_bytes%1#0: bytes[8] = (itob 10u)
        let offset_as_uint16%0#0: bytes = 0x000a
        let encoded_tuple_buffer%2#0: bytes = 0x0000000000000001000a
        let data_length%0#0: uint64 = 7u
        let encoded_tuple_buffer%3#0: bytes = 0x0000000000000001000a00056c6f672031
        let length%1#0: uint64 = 5u
        let length_uint16%1#0: bytes = 0x0005
        let encoded_value%1#0: bytes = 0x00056c6f672031
        let offset_as_uint16%1#0: bytes = 0x000a
        let encoded_tuple_buffer%6#0: bytes = 0x0000000000000001000a
        let data_length%1#0: uint64 = 7u
        let encoded_tuple_buffer%7#0: bytes = 0x0000000000000001000a00056c6f672031
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "logs_are_equal((uint64,string),(uint64,string))bool")
        ((itxn_field ApplicationArgs) 0x0000000000000001000a00056c6f672031)
        ((itxn_field ApplicationArgs) 0x0000000000000001000a00056c6f672031)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: bytes[1] = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // ARC4 prefix is valid
        let result#0: bool = (getbit tmp%0#0 0u)
        (assert result#0)
        itxn_begin
        let val_as_bytes%2#0: bytes[8] = (itob 2u)
        let length%2#0: uint64 = 5u
        let length_uint16%2#0: bytes = 0x0005
        let encoded_value%2#0: bytes = 0x00056c6f672032
        let offset_as_uint16%2#0: bytes = 0x000a
        let encoded_tuple_buffer%10#0: bytes = 0x0000000000000002000a
        let data_length%2#0: uint64 = 7u
        let encoded_tuple_buffer%11#0: bytes = 0x0000000000000002000a00056c6f672032
        let length%3#0: uint64 = 5u
        let length_uint16%3#0: bytes = 0x0005
        let encoded_value%3#0: bytes = 0x00056c6f672031
        let offset_as_uint16%3#0: bytes = 0x000a
        let encoded_tuple_buffer%14#0: bytes = 0x0000000000000001000a
        let data_length%3#0: uint64 = 7u
        let encoded_tuple_buffer%15#0: bytes = 0x0000000000000001000a00056c6f672031
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "logs_are_equal((uint64,string),(uint64,string))bool")
        ((itxn_field ApplicationArgs) 0x0000000000000002000a00056c6f672032)
        ((itxn_field ApplicationArgs) 0x0000000000000001000a00056c6f672031)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%4#0: bytes[1] = ((extract 4 0) awst_tmp%1#0)
        let tmp%5#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
        (assert tmp%6#0) // ARC4 prefix is valid
        let result#1: bool = (getbit tmp%4#0 0u)
        let tmp%8#0: bool = (! result#1)
        (assert tmp%8#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.__algopy_default_create() -> void:
    block@0: // L1
        return 