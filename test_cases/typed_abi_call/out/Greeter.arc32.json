{
    "hints": {
        "test_is_a_b(byte[],byte[],application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_method_selector_kinds(application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_method_overload(application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_arg_conversion(application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_15plus_args(application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_void(application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_ref_types(application,asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_native_string(application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_native_bytes(application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_native_uint64(application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_native_biguint(application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_native_tuple(application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_native_tuple_method_ref(application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_nested_tuples(application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_no_args(application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLnR5cGVkX2FiaV9jYWxsLnR5cGVkX2MyYy5HcmVldGVyLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Greeter",
        "methods": [
            {
                "name": "test_is_a_b",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    },
                    {
                        "type": "application",
                        "name": "app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_method_selector_kinds",
                "args": [
                    {
                        "type": "application",
                        "name": "app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_method_overload",
                "args": [
                    {
                        "type": "application",
                        "name": "app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_arg_conversion",
                "args": [
                    {
                        "type": "application",
                        "name": "app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_15plus_args",
                "args": [
                    {
                        "type": "application",
                        "name": "app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_void",
                "args": [
                    {
                        "type": "application",
                        "name": "app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_ref_types",
                "args": [
                    {
                        "type": "application",
                        "name": "app"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_native_string",
                "args": [
                    {
                        "type": "application",
                        "name": "app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_native_bytes",
                "args": [
                    {
                        "type": "application",
                        "name": "app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_native_uint64",
                "args": [
                    {
                        "type": "application",
                        "name": "app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_native_biguint",
                "args": [
                    {
                        "type": "application",
                        "name": "app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_native_tuple",
                "args": [
                    {
                        "type": "application",
                        "name": "app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_native_tuple_method_ref",
                "args": [
                    {
                        "type": "application",
                        "name": "app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_nested_tuples",
                "args": [
                    {
                        "type": "application",
                        "name": "app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_no_args",
                "args": [
                    {
                        "type": "application",
                        "name": "app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}