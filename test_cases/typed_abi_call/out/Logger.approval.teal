#pragma version 10

test_cases.typed_abi_call.logger.Logger.approval_program:
    callsub __puya_arc4_router__
    return


// test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // typed_abi_call/logger.py:20
    // class Logger(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@19
    method "is_a_b(byte[],byte[])void"
    method "echo(string)string"
    method "no_args()uint64"
    method "log(uint64)void"
    method "log(uint512)void"
    method "log(string)void"
    method "log(bool)void"
    method "log(byte[])void"
    method "log(asset,account,application)void"
    method "echo_native_string(string)string"
    method "echo_native_bytes(byte[])byte[]"
    method "echo_native_uint64(uint64)uint64"
    method "echo_native_biguint(uint512)uint512"
    method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]"
    txna ApplicationArgs 0
    match __puya_arc4_router___is_a_b_route@2 __puya_arc4_router___echo_route@3 __puya_arc4_router___no_args_route@4 __puya_arc4_router___log_route@5 __puya_arc4_router___log_route@6 __puya_arc4_router___log_route@7 __puya_arc4_router___log_route@8 __puya_arc4_router___log_route@9 __puya_arc4_router___log_route@10 __puya_arc4_router___echo_native_string_route@11 __puya_arc4_router___echo_native_bytes_route@12 __puya_arc4_router___echo_native_uint64_route@13 __puya_arc4_router___echo_native_biguint_route@14 __puya_arc4_router___echo_native_tuple_route@15 __puya_arc4_router___return_args_after_14th_route@16
    int 0
    retsub

__puya_arc4_router___is_a_b_route@2:
    // typed_abi_call/logger.py:21
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:20
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // typed_abi_call/logger.py:21
    // @arc4.abimethod
    callsub is_a_b
    int 1
    retsub

__puya_arc4_router___echo_route@3:
    // typed_abi_call/logger.py:26
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:20
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:26
    // @arc4.abimethod
    callsub echo
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___no_args_route@4:
    // typed_abi_call/logger.py:30
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub no_args
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___log_route@5:
    // typed_abi_call/logger.py:34
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:20
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:34
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_uint64
    int 1
    retsub

__puya_arc4_router___log_route@6:
    // typed_abi_call/logger.py:38
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:20
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:38
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_uint512
    int 1
    retsub

__puya_arc4_router___log_route@7:
    // typed_abi_call/logger.py:42
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:20
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:42
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_string
    int 1
    retsub

__puya_arc4_router___log_route@8:
    // typed_abi_call/logger.py:46
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:20
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:46
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_bool
    int 1
    retsub

__puya_arc4_router___log_route@9:
    // typed_abi_call/logger.py:50
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:20
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:50
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_bytes
    int 1
    retsub

__puya_arc4_router___log_route@10:
    // typed_abi_call/logger.py:54
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:20
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txna ApplicationArgs 3
    btoi
    txnas Applications
    // typed_abi_call/logger.py:54
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_asset_account_app
    int 1
    retsub

__puya_arc4_router___echo_native_string_route@11:
    // typed_abi_call/logger.py:58
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:20
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // typed_abi_call/logger.py:58
    // @arc4.abimethod
    callsub echo_native_string
    dup
    len
    itob
    extract 6 2
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___echo_native_bytes_route@12:
    // typed_abi_call/logger.py:62
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:20
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // typed_abi_call/logger.py:62
    // @arc4.abimethod
    callsub echo_native_bytes
    dup
    len
    itob
    extract 6 2
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___echo_native_uint64_route@13:
    // typed_abi_call/logger.py:66
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:20
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/logger.py:66
    // @arc4.abimethod
    callsub echo_native_uint64
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___echo_native_biguint_route@14:
    // typed_abi_call/logger.py:70
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:20
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:70
    // @arc4.abimethod
    callsub echo_native_biguint
    dup
    len
    int 64
    <=
    assert // overflow
    int 64
    bzero
    b|
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___echo_native_tuple_route@15:
    // typed_abi_call/logger.py:74
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:20
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    // typed_abi_call/logger.py:74
    // @arc4.abimethod
    callsub echo_native_tuple
    cover 3
    cover 2
    swap
    dup
    len
    itob
    extract 6 2
    swap
    concat
    cover 3
    dup
    len
    itob
    extract 6 2
    swap
    concat
    cover 3
    itob
    cover 2
    dup
    len
    int 64
    <=
    assert // overflow
    int 64
    bzero
    b|
    dig 1
    len
    int 76
    +
    itob
    extract 6 2
    byte 0x004c
    swap
    concat
    uncover 3
    concat
    swap
    concat
    swap
    concat
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___return_args_after_14th_route@16:
    // typed_abi_call/logger.py:80
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:20
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    txna ApplicationArgs 5
    txna ApplicationArgs 6
    txna ApplicationArgs 7
    txna ApplicationArgs 8
    txna ApplicationArgs 9
    txna ApplicationArgs 10
    txna ApplicationArgs 11
    txna ApplicationArgs 12
    txna ApplicationArgs 13
    txna ApplicationArgs 14
    txna ApplicationArgs 15
    extract 0 1 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 1 1 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 2 1 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 3 1 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 4 4 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 8 1 // on error: Index access is out of bounds
    // typed_abi_call/logger.py:80
    // @arc4.abimethod
    callsub return_args_after_14th
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___bare_routing@19:
    // typed_abi_call/logger.py:20
    // class Logger(ARC4Contract):
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@23
    txn ApplicationID
    !
    assert // is creating
    int 1
    retsub

__puya_arc4_router___after_if_else@23:
    // typed_abi_call/logger.py:20
    // class Logger(ARC4Contract):
    int 0
    retsub


// test_cases.typed_abi_call.logger.Logger.is_a_b(a: bytes, b: bytes) -> void:
is_a_b:
    // typed_abi_call/logger.py:21-22
    // @arc4.abimethod
    // def is_a_b(self, a: Bytes, b: Bytes) -> None:
    proto 2 0
    // typed_abi_call/logger.py:23
    // assert a == b"a", "a is not a"
    frame_dig -2
    byte 0x61
    ==
    assert // a is not a
    // typed_abi_call/logger.py:24
    // assert b == b"b", "b is not b"
    frame_dig -1
    byte 0x62
    ==
    assert // b is not b
    retsub


// test_cases.typed_abi_call.logger.Logger.echo(value: bytes) -> bytes:
echo:
    // typed_abi_call/logger.py:26-27
    // @arc4.abimethod
    // def echo(self, value: arc4.String) -> arc4.String:
    proto 1 1
    // typed_abi_call/logger.py:28
    // return "echo: " + value
    frame_dig -1
    extract 2 0
    byte 0x6563686f3a20
    swap
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    retsub


// test_cases.typed_abi_call.logger.Logger.no_args() -> uint64:
no_args:
    // typed_abi_call/logger.py:30-31
    // @arc4.abimethod
    // def no_args(self) -> UInt64:
    proto 0 1
    // typed_abi_call/logger.py:32
    // return UInt64(42)
    int 42
    retsub


// test_cases.typed_abi_call.logger.Logger.log_uint64(value: bytes) -> void:
log_uint64:
    // typed_abi_call/logger.py:34-35
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_uint64(self, value: arc4.UInt64) -> None:
    proto 1 0
    // typed_abi_call/logger.py:36
    // log(value)
    frame_dig -1
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_uint512(value: bytes) -> void:
log_uint512:
    // typed_abi_call/logger.py:38-39
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_uint512(self, value: arc4.UInt512) -> None:
    proto 1 0
    // typed_abi_call/logger.py:40
    // log(value)
    frame_dig -1
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_string(value: bytes) -> void:
log_string:
    // typed_abi_call/logger.py:42-43
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_string(self, value: arc4.String) -> None:
    proto 1 0
    // typed_abi_call/logger.py:44
    // log(value.native)  # decode to remove header
    frame_dig -1
    extract 2 0
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_bool(value: bytes) -> void:
log_bool:
    // typed_abi_call/logger.py:46-47
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_bool(self, value: arc4.Bool) -> None:
    proto 1 0
    // typed_abi_call/logger.py:48
    // log(Bytes(b"True") if value.native else Bytes(b"False"))
    frame_dig -1
    int 0
    getbit
    byte 0x46616c7365
    byte 0x54727565
    uncover 2
    select
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_bytes(value: bytes) -> void:
log_bytes:
    // typed_abi_call/logger.py:50-51
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_bytes(self, value: arc4.DynamicBytes) -> None:
    proto 1 0
    // typed_abi_call/logger.py:52
    // log(value.native)
    frame_dig -1
    extract 2 0
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_asset_account_app(asset: uint64, account: bytes, app: uint64) -> void:
log_asset_account_app:
    // typed_abi_call/logger.py:54-55
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_asset_account_app(self, asset: Asset, account: Account, app: Application) -> None:
    proto 3 0
    // typed_abi_call/logger.py:56
    // log(asset.name, account.bytes, app.address)
    frame_dig -3
    asset_params_get AssetName
    assert // asset exists
    frame_dig -2
    concat
    frame_dig -1
    app_params_get AppAddress
    assert // application exists
    concat
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_string(value: bytes) -> bytes:
echo_native_string:
    // typed_abi_call/logger.py:58-59
    // @arc4.abimethod
    // def echo_native_string(self, value: String) -> String:
    proto 1 1
    // typed_abi_call/logger.py:60
    // return "echo: " + value
    byte "echo: "
    frame_dig -1
    concat
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_bytes(value: bytes) -> bytes:
echo_native_bytes:
    // typed_abi_call/logger.py:62-63
    // @arc4.abimethod
    // def echo_native_bytes(self, value: Bytes) -> Bytes:
    proto 1 1
    // typed_abi_call/logger.py:64
    // return b"echo: " + value
    byte 0x6563686f3a20
    frame_dig -1
    concat
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_uint64(value: uint64) -> uint64:
echo_native_uint64:
    // typed_abi_call/logger.py:66-67
    // @arc4.abimethod
    // def echo_native_uint64(self, value: UInt64) -> UInt64:
    proto 1 1
    // typed_abi_call/logger.py:68
    // return value + 1
    frame_dig -1
    int 1
    +
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_biguint(value: bytes) -> bytes:
echo_native_biguint:
    // typed_abi_call/logger.py:70-71
    // @arc4.abimethod
    // def echo_native_biguint(self, value: BigUInt) -> BigUInt:
    proto 1 1
    // typed_abi_call/logger.py:72
    // return value + 1
    frame_dig -1
    byte 0x01
    b+
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_tuple(s: bytes, b: bytes, u: uint64, bu: bytes) -> bytes, bytes, uint64, bytes:
echo_native_tuple:
    // typed_abi_call/logger.py:74-77
    // @arc4.abimethod
    // def echo_native_tuple(
    //     self, s: String, b: Bytes, u: UInt64, bu: BigUInt
    // ) -> tuple[String, Bytes, UInt64, BigUInt]:
    proto 4 4
    // typed_abi_call/logger.py:78
    // return "echo: " + s, b"echo: " + b, u + 1, bu + 1
    byte "echo: "
    frame_dig -4
    concat
    byte 0x6563686f3a20
    frame_dig -3
    concat
    frame_dig -2
    int 1
    +
    frame_dig -1
    byte 0x01
    b+
    retsub


// test_cases.typed_abi_call.logger.Logger.return_args_after_14th(_a1: bytes, _a2: bytes, _a3: bytes, _a4: bytes, _a5: bytes, _a6: bytes, _a7: bytes, _a8: bytes, _a9: bytes, _a10: bytes, _a11: bytes, _a12: bytes, _a13: bytes, _a14: bytes, a15: bytes, a16: bytes, a17: bytes, a18: bytes, a19: bytes, a20: bytes) -> bytes:
return_args_after_14th:
    // typed_abi_call/logger.py:80-103
    // @arc4.abimethod
    // def return_args_after_14th(
    //     self,
    //     _a1: arc4.UInt64,
    //     _a2: arc4.UInt64,
    //     _a3: arc4.UInt64,
    //     _a4: arc4.UInt64,
    //     _a5: arc4.UInt64,
    //     _a6: arc4.UInt64,
    //     _a7: arc4.UInt64,
    //     _a8: arc4.UInt64,
    //     _a9: arc4.UInt64,
    //     _a10: arc4.UInt64,
    //     _a11: arc4.UInt64,
    //     _a12: arc4.UInt64,
    //     _a13: arc4.UInt64,
    //     _a14: arc4.UInt64,
    //     a15: arc4.UInt8,
    //     a16: arc4.UInt8,
    //     a17: arc4.UInt8,
    //     a18: arc4.UInt8,
    //     a19: arc4.Tuple[arc4.UInt8, arc4.UInt8, arc4.UInt8, arc4.UInt8],
    //     a20: arc4.UInt8,
    // ) -> arc4.DynamicBytes:
    proto 20 1
    // typed_abi_call/logger.py:104
    // last_arg = arc4.Tuple((a15, a16, a17, a18, a19, a20))
    frame_dig -6
    frame_dig -5
    concat
    frame_dig -4
    concat
    frame_dig -3
    concat
    frame_dig -2
    concat
    frame_dig -1
    concat
    // typed_abi_call/logger.py:105
    // assert Txn.application_args(15) == last_arg.bytes
    txna ApplicationArgs 15
    dig 1
    ==
    assert
    // typed_abi_call/logger.py:106
    // return arc4.DynamicBytes(last_arg.bytes)
    dup
    len
    itob
    extract 6 2
    swap
    concat
    retsub
