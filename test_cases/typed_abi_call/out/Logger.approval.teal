#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 64 8
    bytecblock 0x151f7c75 0x6563686f3a20 0x0004 0x01
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@23
    pushbytess 0xc77212bc 0x9bf81913 0xb862ee19 0x3c1058d9 0x6af45930 0xb4b4334e 0x6eed7ec3 0xb500e111 0xcd727b71 0x0437b17e 0x4a444c77 0x2659e818 0xa9fb6cf1 0xd8cc363b 0x16e03919 0xab271ce4 0xba0b4381 0xddd07185 // method "is_a_b(byte[],byte[])void", method "echo(string)string", method "no_args()uint64", method "log(uint64)void", method "log(uint512)void", method "log(string)void", method "log(bool)void", method "log(byte[])void", method "log(asset,account,application)void", method "log(address)void", method "echo_native_string(string)string", method "echo_native_bytes(byte[])byte[]", method "echo_native_uint64(uint64)uint64", method "echo_native_biguint(uint512)uint512", method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)", method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))", method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]", method "logs_are_equal((uint64,string),(uint64,string))bool"
    txna ApplicationArgs 0
    match main_is_a_b_route@3 main_echo_route@4 main_no_args_route@5 main_log_route@6 main_log_route@7 main_log_route@8 main_log_route@9 main_log_route@10 main_log_route@11 main_log_route@12 main_echo_native_string_route@13 main_echo_native_bytes_route@14 main_echo_native_uint64_route@15 main_echo_native_biguint_route@16 main_echo_native_tuple_route@17 main_echo_nested_tuple_route@18 main_return_args_after_14th_route@19 main_logs_are_equal_route@20

main_after_if_else@27:
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    intc_1 // 0
    return

main_logs_are_equal_route@20:
    // typed_abi_call/logger.py:128
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    len
    uncover 3
    cover 2
    substring3
    extract 2 0
    txna ApplicationArgs 2
    dup
    intc_1 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    len
    uncover 3
    cover 2
    substring3
    extract 2 0
    // typed_abi_call/logger.py:128
    // @arc4.abimethod
    callsub logs_are_equal
    pushbytes 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_return_args_after_14th_route@19:
    // typed_abi_call/logger.py:100
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    txna ApplicationArgs 5
    txna ApplicationArgs 6
    txna ApplicationArgs 7
    txna ApplicationArgs 8
    txna ApplicationArgs 9
    txna ApplicationArgs 10
    txna ApplicationArgs 11
    txna ApplicationArgs 12
    txna ApplicationArgs 13
    txna ApplicationArgs 14
    txna ApplicationArgs 15
    extract 0 1 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 1 1 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 2 1 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 3 1 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 4 4 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 8 1 // on error: Index access is out of bounds
    // typed_abi_call/logger.py:100
    // @arc4.abimethod
    callsub return_args_after_14th
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_echo_nested_tuple_route@18:
    // typed_abi_call/logger.py:89
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint16
    dig 1
    pushint 2 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    intc_1 // 0
    extract_uint16
    dig 1
    pushint 2 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    uncover 3
    uncover 3
    uncover 2
    substring3
    dig 3
    len
    uncover 4
    uncover 4
    uncover 2
    substring3
    dup
    intc_1 // 0
    extract_uint64
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    dig 2
    pushint 16 // 16
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    extract 2 0
    // typed_abi_call/logger.py:89
    // @arc4.abimethod
    callsub echo_nested_tuple
    dig 4
    len
    itob
    extract 6 2
    uncover 5
    concat
    dup
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    bytec_2 // 0x0004
    swap
    concat
    swap
    concat
    uncover 4
    concat
    uncover 3
    itob
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    swap
    uncover 3
    concat
    pushbytes 0x0012
    concat
    swap
    concat
    dig 1
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    bytec_2 // 0x0004
    swap
    concat
    uncover 2
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_echo_native_tuple_route@17:
    // typed_abi_call/logger.py:83
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    // typed_abi_call/logger.py:83
    // @arc4.abimethod
    callsub echo_native_tuple
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    uncover 3
    itob
    dig 3
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    uncover 4
    b|
    dig 3
    len
    pushint 76 // 76
    +
    itob
    extract 6 2
    pushbytes 0x004c
    swap
    concat
    uncover 2
    concat
    swap
    concat
    uncover 2
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_echo_native_biguint_route@16:
    // typed_abi_call/logger.py:79
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:79
    // @arc4.abimethod
    callsub echo_native_biguint
    dup
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    b|
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_echo_native_uint64_route@15:
    // typed_abi_call/logger.py:75
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/logger.py:75
    // @arc4.abimethod
    callsub echo_native_uint64
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_echo_native_bytes_route@14:
    // typed_abi_call/logger.py:71
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // typed_abi_call/logger.py:71
    // @arc4.abimethod
    callsub echo_native_bytes
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_echo_native_string_route@13:
    // typed_abi_call/logger.py:67
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // typed_abi_call/logger.py:67
    // @arc4.abimethod
    callsub echo_native_string
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_log_route@12:
    // typed_abi_call/logger.py:63
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:63
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_address
    intc_0 // 1
    return

main_log_route@11:
    // typed_abi_call/logger.py:59
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txna ApplicationArgs 3
    btoi
    txnas Applications
    // typed_abi_call/logger.py:59
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_asset_account_app
    intc_0 // 1
    return

main_log_route@10:
    // typed_abi_call/logger.py:55
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:55
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_bytes
    intc_0 // 1
    return

main_log_route@9:
    // typed_abi_call/logger.py:51
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:51
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_bool
    intc_0 // 1
    return

main_log_route@8:
    // typed_abi_call/logger.py:47
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:47
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_string
    intc_0 // 1
    return

main_log_route@7:
    // typed_abi_call/logger.py:43
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:43
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_uint512
    intc_0 // 1
    return

main_log_route@6:
    // typed_abi_call/logger.py:39
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:39
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_uint64
    intc_0 // 1
    return

main_no_args_route@5:
    // typed_abi_call/logger.py:35
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c75000000000000002a
    log
    intc_0 // 1
    return

main_echo_route@4:
    // typed_abi_call/logger.py:31
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:31
    // @arc4.abimethod
    callsub echo
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_is_a_b_route@3:
    // typed_abi_call/logger.py:26
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // typed_abi_call/logger.py:26
    // @arc4.abimethod
    callsub is_a_b
    intc_0 // 1
    return

main_bare_routing@23:
    // typed_abi_call/logger.py:25
    // class Logger(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@27
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.is_a_b(a: bytes, b: bytes) -> void:
is_a_b:
    // typed_abi_call/logger.py:26-27
    // @arc4.abimethod
    // def is_a_b(self, a: Bytes, b: Bytes) -> None:
    proto 2 0
    // typed_abi_call/logger.py:28
    // assert a == b"a", "a is not a"
    frame_dig -2
    pushbytes 0x61
    ==
    assert // a is not a
    // typed_abi_call/logger.py:29
    // assert b == b"b", "b is not b"
    frame_dig -1
    pushbytes 0x62
    ==
    assert // b is not b
    retsub


// test_cases.typed_abi_call.logger.Logger.echo(value: bytes) -> bytes:
echo:
    // typed_abi_call/logger.py:31-32
    // @arc4.abimethod
    // def echo(self, value: arc4.String) -> arc4.String:
    proto 1 1
    // typed_abi_call/logger.py:33
    // return "echo: " + value
    frame_dig -1
    extract 2 0
    bytec_1 // 0x6563686f3a20
    swap
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    retsub


// test_cases.typed_abi_call.logger.Logger.log_uint64(value: bytes) -> void:
log_uint64:
    // typed_abi_call/logger.py:39-40
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_uint64(self, value: arc4.UInt64) -> None:
    proto 1 0
    // typed_abi_call/logger.py:41
    // log(value)
    frame_dig -1
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_uint512(value: bytes) -> void:
log_uint512:
    // typed_abi_call/logger.py:43-44
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_uint512(self, value: arc4.UInt512) -> None:
    proto 1 0
    // typed_abi_call/logger.py:45
    // log(value)
    frame_dig -1
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_string(value: bytes) -> void:
log_string:
    // typed_abi_call/logger.py:47-48
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_string(self, value: arc4.String) -> None:
    proto 1 0
    // typed_abi_call/logger.py:49
    // log(value.native)  # decode to remove header
    frame_dig -1
    extract 2 0
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_bool(value: bytes) -> void:
log_bool:
    // typed_abi_call/logger.py:51-52
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_bool(self, value: arc4.Bool) -> None:
    proto 1 0
    // typed_abi_call/logger.py:53
    // log(Bytes(b"True") if value.native else Bytes(b"False"))
    frame_dig -1
    intc_1 // 0
    getbit
    pushbytess 0x46616c7365 0x54727565 // 0x46616c7365, 0x54727565
    uncover 2
    select
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_bytes(value: bytes) -> void:
log_bytes:
    // typed_abi_call/logger.py:55-56
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_bytes(self, value: arc4.DynamicBytes) -> None:
    proto 1 0
    // typed_abi_call/logger.py:57
    // log(value.native)
    frame_dig -1
    extract 2 0
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_asset_account_app(asset: uint64, account: bytes, app: uint64) -> void:
log_asset_account_app:
    // typed_abi_call/logger.py:59-60
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_asset_account_app(self, asset: Asset, account: Account, app: Application) -> None:
    proto 3 0
    // typed_abi_call/logger.py:61
    // log(asset.name, account.bytes, app.address)
    frame_dig -3
    asset_params_get AssetName
    assert // asset exists
    frame_dig -2
    concat
    frame_dig -1
    app_params_get AppAddress
    assert // application exists
    concat
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_address(address: bytes) -> void:
log_address:
    // typed_abi_call/logger.py:63-64
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_address(self, address: arc4.Address) -> None:
    proto 1 0
    // typed_abi_call/logger.py:65
    // log(address)
    frame_dig -1
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_string(value: bytes) -> bytes:
echo_native_string:
    // typed_abi_call/logger.py:67-68
    // @arc4.abimethod
    // def echo_native_string(self, value: String) -> String:
    proto 1 1
    // typed_abi_call/logger.py:69
    // return "echo: " + value
    bytec_1 // "echo: "
    frame_dig -1
    concat
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_bytes(value: bytes) -> bytes:
echo_native_bytes:
    // typed_abi_call/logger.py:71-72
    // @arc4.abimethod
    // def echo_native_bytes(self, value: Bytes) -> Bytes:
    proto 1 1
    // typed_abi_call/logger.py:73
    // return b"echo: " + value
    bytec_1 // 0x6563686f3a20
    frame_dig -1
    concat
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_uint64(value: uint64) -> uint64:
echo_native_uint64:
    // typed_abi_call/logger.py:75-76
    // @arc4.abimethod
    // def echo_native_uint64(self, value: UInt64) -> UInt64:
    proto 1 1
    // typed_abi_call/logger.py:77
    // return value + 1
    frame_dig -1
    intc_0 // 1
    +
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_biguint(value: bytes) -> bytes:
echo_native_biguint:
    // typed_abi_call/logger.py:79-80
    // @arc4.abimethod
    // def echo_native_biguint(self, value: BigUInt) -> BigUInt:
    proto 1 1
    // typed_abi_call/logger.py:81
    // return value + 1
    frame_dig -1
    bytec_3 // 0x01
    b+
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_tuple(s: bytes, b: bytes, u: uint64, bu: bytes) -> bytes, bytes, uint64, bytes:
echo_native_tuple:
    // typed_abi_call/logger.py:83-86
    // @arc4.abimethod
    // def echo_native_tuple(
    //     self, s: String, b: Bytes, u: UInt64, bu: BigUInt
    // ) -> tuple[String, Bytes, UInt64, BigUInt]:
    proto 4 4
    // typed_abi_call/logger.py:87
    // return "echo: " + s, b"echo: " + b, u + 1, bu + 1
    bytec_1 // "echo: "
    frame_dig -4
    concat
    bytec_1 // 0x6563686f3a20
    frame_dig -3
    concat
    frame_dig -2
    intc_0 // 1
    +
    frame_dig -1
    bytec_3 // 0x01
    b+
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_nested_tuple(tuple_of_tuples.0.0: bytes, tuple_of_tuples.0.1: bytes, tuple_of_tuples.1.0: uint64, tuple_of_tuples.1.1: bytes, tuple_of_tuples.1.2: bytes) -> bytes, bytes, uint64, bytes, bytes:
echo_nested_tuple:
    // typed_abi_call/logger.py:89-92
    // @arc4.abimethod
    // def echo_nested_tuple(
    //     self, tuple_of_tuples: tuple[tuple[String, arc4.String], tuple[UInt64, arc4.UInt64, Bytes]]
    // ) -> tuple[tuple[String, arc4.String], tuple[UInt64, arc4.UInt64, Bytes]]:
    proto 5 5
    // typed_abi_call/logger.py:94
    // return ("echo: " + string, "echo: " + arc4_string), (
    bytec_1 // "echo: "
    frame_dig -5
    concat
    frame_dig -4
    extract 2 0
    bytec_1 // 0x6563686f3a20
    swap
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    // typed_abi_call/logger.py:95
    // u64 + 1,
    frame_dig -3
    intc_0 // 1
    +
    // typed_abi_call/logger.py:96
    // arc4.UInt64(arc4_u64.native + 1),
    frame_dig -2
    btoi
    intc_0 // 1
    +
    itob
    // typed_abi_call/logger.py:97
    // b"echo: " + bytez,
    bytec_1 // 0x6563686f3a20
    frame_dig -1
    concat
    // typed_abi_call/logger.py:94-98
    // return ("echo: " + string, "echo: " + arc4_string), (
    //     u64 + 1,
    //     arc4.UInt64(arc4_u64.native + 1),
    //     b"echo: " + bytez,
    // )
    retsub


// test_cases.typed_abi_call.logger.Logger.return_args_after_14th(_a1: bytes, _a2: bytes, _a3: bytes, _a4: bytes, _a5: bytes, _a6: bytes, _a7: bytes, _a8: bytes, _a9: bytes, _a10: bytes, _a11: bytes, _a12: bytes, _a13: bytes, _a14: bytes, a15: bytes, a16: bytes, a17: bytes, a18: bytes, a19: bytes, a20: bytes) -> bytes:
return_args_after_14th:
    // typed_abi_call/logger.py:100-123
    // @arc4.abimethod
    // def return_args_after_14th(
    //     self,
    //     _a1: arc4.UInt64,
    //     _a2: arc4.UInt64,
    //     _a3: arc4.UInt64,
    //     _a4: arc4.UInt64,
    //     _a5: arc4.UInt64,
    //     _a6: arc4.UInt64,
    //     _a7: arc4.UInt64,
    //     _a8: arc4.UInt64,
    //     _a9: arc4.UInt64,
    //     _a10: arc4.UInt64,
    //     _a11: arc4.UInt64,
    //     _a12: arc4.UInt64,
    //     _a13: arc4.UInt64,
    //     _a14: arc4.UInt64,
    //     a15: arc4.UInt8,
    //     a16: arc4.UInt8,
    //     a17: arc4.UInt8,
    //     a18: arc4.UInt8,
    //     a19: arc4.Tuple[arc4.UInt8, arc4.UInt8, arc4.UInt8, arc4.UInt8],
    //     a20: arc4.UInt8,
    // ) -> arc4.DynamicBytes:
    proto 20 1
    // typed_abi_call/logger.py:124
    // last_arg = arc4.Tuple((a15, a16, a17, a18, a19, a20))
    frame_dig -6
    frame_dig -5
    concat
    frame_dig -4
    concat
    frame_dig -3
    concat
    frame_dig -2
    concat
    frame_dig -1
    concat
    // typed_abi_call/logger.py:125
    // assert Txn.application_args(15) == last_arg.bytes
    txna ApplicationArgs 15
    dig 1
    ==
    assert
    // typed_abi_call/logger.py:126
    // return arc4.DynamicBytes(last_arg.bytes)
    pushbytes 0x0009
    swap
    concat
    retsub


// test_cases.typed_abi_call.logger.Logger.logs_are_equal(log_1.level: uint64, log_1.message: bytes, log_2.level: uint64, log_2.message: bytes) -> uint64:
logs_are_equal:
    // typed_abi_call/logger.py:128-129
    // @arc4.abimethod
    // def logs_are_equal(self, log_1: LogMessage, log_2: LogMessage) -> bool:
    proto 4 1
    // typed_abi_call/logger.py:130
    // return log_1 == log_2
    frame_dig -4
    frame_dig -2
    ==
    frame_dig -3
    frame_dig -1
    ==
    &&
    retsub
