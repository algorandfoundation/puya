#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 64 8
    bytecblock 0x151f7c75 0x6563686f3a20 0x00066563686f3a20 0x01 0x0004
    // typed_abi_call/logger.py:41
    // @arc4.abimethod
    intc_0 // 1
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@29
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert
    pushbytess 0xc77212bc 0x9bf81913 0xb862ee19 0x3c1058d9 0x6af45930 0xb4b4334e 0x6eed7ec3 0xb500e111 0x46b50faf 0x0437b17e 0x4a444c77 0x2659e818 0xa9fb6cf1 0xd8cc363b 0xd6c2ac7f 0x48142d5e 0x16e03919 0xab271ce4 0xba0b4381 0xddd07185 0xdc4f1992 // method "is_a_b(byte[],byte[])void", method "echo(string)string", method "no_args()uint64", method "log(uint64)void", method "log(uint512)void", method "log(string)void", method "log(bool)void", method "log(byte[])void", method "log(uint64,address,uint64)void", method "log(address)void", method "echo_native_string(string)string", method "echo_native_bytes(byte[])byte[]", method "echo_native_uint64(uint64)uint64", method "echo_native_biguint(uint512)uint512", method "echo_resource_by_index(asset,application,account)(uint64,uint64,address)", method "echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)", method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)", method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))", method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]", method "logs_are_equal((uint64,string),(uint64,string))bool", method "echo_log_struct((uint64,string))(uint64,string)"
    txna ApplicationArgs 0
    match is_a_b echo main_no_args_route@6 log_uint64 log_uint512 log_string log_bool log_bytes log_asset_account_app log_address echo_native_string echo_native_bytes echo_native_uint64 echo_native_biguint echo_resource_by_index echo_resource_by_value echo_native_tuple echo_nested_tuple return_args_after_14th logs_are_equal echo_log_struct
    err

main_no_args_route@6:
    // typed_abi_call/logger.py:41
    // @arc4.abimethod
    pushbytes 0x151f7c75000000000000002a
    log
    return

main___algopy_default_create@29:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// test_cases.typed_abi_call.logger.Logger.is_a_b[routing]() -> void:
is_a_b:
    // typed_abi_call/logger.py:32
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // typed_abi_call/logger.py:34
    // assert a == b"a", "a is not a"
    swap
    pushbytes 0x61
    ==
    assert // a is not a
    // typed_abi_call/logger.py:35
    // assert b == b"b", "b is not b"
    pushbytes 0x62
    ==
    // typed_abi_call/logger.py:32
    // @arc4.abimethod
    return // on error: b is not b


// test_cases.typed_abi_call.logger.Logger.echo[routing]() -> void:
echo:
    // typed_abi_call/logger.py:37
    // @arc4.abimethod
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:39
    // return "echo: " + value
    extract 2 0
    bytec_2 // 0x00066563686f3a20
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    itob
    extract 6 2
    replace2 0
    // typed_abi_call/logger.py:37
    // @arc4.abimethod
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.log_uint64[routing]() -> void:
log_uint64:
    // typed_abi_call/logger.py:45
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:47
    // log(value)
    log
    // typed_abi_call/logger.py:45
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.log_uint512[routing]() -> void:
log_uint512:
    // typed_abi_call/logger.py:49
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:51
    // log(value)
    log
    // typed_abi_call/logger.py:49
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.log_string[routing]() -> void:
log_string:
    // typed_abi_call/logger.py:53
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:55
    // log(value.native)  # decode to remove header
    extract 2 0
    log
    // typed_abi_call/logger.py:53
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.log_bool[routing]() -> void:
log_bool:
    // typed_abi_call/logger.py:57
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:59
    // log(Bytes(b"True") if value.native else Bytes(b"False"))
    intc_1 // 0
    getbit
    pushbytess 0x46616c7365 0x54727565 // 0x46616c7365, 0x54727565
    uncover 2
    select
    log
    // typed_abi_call/logger.py:57
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.log_bytes[routing]() -> void:
log_bytes:
    // typed_abi_call/logger.py:61
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:63
    // log(value.native)
    extract 2 0
    log
    // typed_abi_call/logger.py:61
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.log_asset_account_app[routing]() -> void:
log_asset_account_app:
    // typed_abi_call/logger.py:65
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    // typed_abi_call/logger.py:67
    // log(asset.name, account.bytes, app.address)
    uncover 2
    asset_params_get AssetName
    assert // asset exists
    uncover 2
    concat
    swap
    app_params_get AppAddress
    assert // application exists
    concat
    log
    // typed_abi_call/logger.py:65
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.log_address[routing]() -> void:
log_address:
    // typed_abi_call/logger.py:69
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:71
    // log(address)
    log
    // typed_abi_call/logger.py:69
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.echo_native_string[routing]() -> void:
echo_native_string:
    // typed_abi_call/logger.py:73
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    // typed_abi_call/logger.py:75
    // return "echo: " + value
    bytec_1 // "echo: "
    swap
    concat
    // typed_abi_call/logger.py:73
    // @arc4.abimethod
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.echo_native_bytes[routing]() -> void:
echo_native_bytes:
    // typed_abi_call/logger.py:77
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    // typed_abi_call/logger.py:79
    // return b"echo: " + value
    bytec_1 // 0x6563686f3a20
    swap
    concat
    // typed_abi_call/logger.py:77
    // @arc4.abimethod
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.echo_native_uint64[routing]() -> void:
echo_native_uint64:
    // typed_abi_call/logger.py:81
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/logger.py:83
    // return value + 1
    intc_0 // 1
    +
    // typed_abi_call/logger.py:81
    // @arc4.abimethod
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.echo_native_biguint[routing]() -> void:
echo_native_biguint:
    // typed_abi_call/logger.py:85
    // @arc4.abimethod
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:87
    // return value + 1
    bytec_3 // 0x01
    b+
    // typed_abi_call/logger.py:85
    // @arc4.abimethod
    dup
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    b|
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.echo_resource_by_index[routing]() -> void:
echo_resource_by_index:
    // typed_abi_call/logger.py:89-91
    // @arc4.abimethod(
    //     resource_encoding="index",
    // )
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Applications
    txna ApplicationArgs 3
    btoi
    txnas Accounts
    // typed_abi_call/logger.py:95
    // asset_idx = op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/logger.py:96
    // assert asset == Txn.assets(asset_idx), "expected asset to be passed by index"
    txnas Assets
    dig 3
    ==
    assert // expected asset to be passed by index
    // typed_abi_call/logger.py:97
    // app_idx = op.btoi(Txn.application_args(2))
    txna ApplicationArgs 2
    btoi
    // typed_abi_call/logger.py:98
    // assert app == Txn.applications(app_idx), "expected application to be passed by index"
    txnas Applications
    dig 2
    ==
    assert // expected application to be passed by index
    // typed_abi_call/logger.py:99
    // acc_idx = op.btoi(Txn.application_args(3))
    txna ApplicationArgs 3
    btoi
    // typed_abi_call/logger.py:100
    // assert acc == Txn.accounts(acc_idx), "expected account to be passed by index"
    txnas Accounts
    dig 1
    ==
    assert // expected account to be passed by index
    // typed_abi_call/logger.py:89-91
    // @arc4.abimethod(
    //     resource_encoding="index",
    // )
    uncover 2
    itob
    uncover 2
    itob
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.echo_resource_by_value[routing]() -> void:
echo_resource_by_value:
    // typed_abi_call/logger.py:103-105
    // @arc4.abimethod(
    //     resource_encoding="value",
    // )
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    // typed_abi_call/logger.py:109
    // asset_id = op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/logger.py:110
    // assert asset.id == asset_id, "expected asset to be passed by value"
    dig 3
    ==
    assert // expected asset to be passed by value
    // typed_abi_call/logger.py:111
    // app_id = op.btoi(Txn.application_args(2))
    txna ApplicationArgs 2
    btoi
    // typed_abi_call/logger.py:112
    // assert app.id == app_id, "expected application to be passed by value"
    dig 2
    ==
    assert // expected application to be passed by value
    // typed_abi_call/logger.py:114
    // assert acc.bytes == address, "expected account to be passed by value"
    dup
    // typed_abi_call/logger.py:113
    // address = Txn.application_args(3)
    txna ApplicationArgs 3
    // typed_abi_call/logger.py:114
    // assert acc.bytes == address, "expected account to be passed by value"
    ==
    assert // expected account to be passed by value
    // typed_abi_call/logger.py:103-105
    // @arc4.abimethod(
    //     resource_encoding="value",
    // )
    uncover 2
    itob
    uncover 2
    itob
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.echo_native_tuple[routing]() -> void:
echo_native_tuple:
    // typed_abi_call/logger.py:117
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    // typed_abi_call/logger.py:121
    // return "echo: " + s, b"echo: " + b, u + 1, bu + 1
    bytec_1 // "echo: "
    uncover 4
    concat
    bytec_1 // 0x6563686f3a20
    uncover 4
    concat
    uncover 3
    intc_0 // 1
    +
    uncover 3
    bytec_3 // 0x01
    b+
    // typed_abi_call/logger.py:117
    // @arc4.abimethod
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    dup
    len
    pushint 76 // 76
    +
    dig 4
    len
    itob
    extract 6 2
    uncover 5
    concat
    swap
    itob
    extract 6 2
    pushbytes 0x004c
    swap
    concat
    uncover 4
    itob
    concat
    dig 3
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    uncover 4
    b|
    concat
    uncover 2
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.echo_nested_tuple[routing]() -> void:
echo_nested_tuple:
    // typed_abi_call/logger.py:123
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint16
    dig 1
    pushint 2 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    intc_1 // 0
    extract_uint16
    dig 1
    pushint 2 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    uncover 3
    uncover 3
    uncover 2
    substring3
    dig 3
    len
    uncover 4
    uncover 4
    uncover 2
    substring3
    dup
    intc_1 // 0
    extract_uint64
    dig 1
    pushint 16 // 16
    extract_uint16
    dig 2
    len
    dig 3
    cover 2
    substring3
    extract 2 0
    // typed_abi_call/logger.py:128
    // return ("echo: " + string, "echo: " + arc4_string), (
    bytec_1 // "echo: "
    uncover 5
    concat
    uncover 4
    extract 2 0
    bytec_2 // 0x00066563686f3a20
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    itob
    extract 6 2
    replace2 0
    // typed_abi_call/logger.py:129
    // u64 + 1,
    uncover 3
    intc_0 // 1
    +
    // typed_abi_call/logger.py:130
    // arc4.UInt64(arc4_u64.native + 1),
    uncover 4
    // typed_abi_call/logger.py:123
    // @arc4.abimethod
    intc_3 // 8
    // typed_abi_call/logger.py:130
    // arc4.UInt64(arc4_u64.native + 1),
    extract_uint64
    intc_0 // 1
    +
    itob
    // typed_abi_call/logger.py:131
    // b"echo: " + bytez,
    bytec_1 // 0x6563686f3a20
    uncover 5
    concat
    // typed_abi_call/logger.py:123
    // @arc4.abimethod
    dig 4
    len
    itob
    extract 6 2
    uncover 5
    concat
    dup
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    bytec 4 // 0x0004
    swap
    concat
    swap
    concat
    uncover 4
    concat
    dup
    len
    pushint 4 // 4
    +
    uncover 4
    itob
    uncover 4
    concat
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    swap
    pushbytes 0x0012
    concat
    swap
    concat
    swap
    itob
    extract 6 2
    bytec 4 // 0x0004
    swap
    concat
    uncover 2
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.return_args_after_14th[routing]() -> void:
return_args_after_14th:
    // typed_abi_call/logger.py:134
    // @arc4.abimethod
    txna ApplicationArgs 15
    extract 0 1
    txna ApplicationArgs 15
    extract 1 1
    txna ApplicationArgs 15
    extract 2 1
    txna ApplicationArgs 15
    extract 3 1
    txna ApplicationArgs 15
    extract 4 4
    txna ApplicationArgs 15
    extract 8 1
    // typed_abi_call/logger.py:158
    // last_arg = arc4.Tuple((a15, a16, a17, a18, a19, a20))
    uncover 5
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // typed_abi_call/logger.py:159
    // assert Txn.application_args(15) == last_arg.bytes
    txna ApplicationArgs 15
    dig 1
    ==
    assert
    // typed_abi_call/logger.py:160
    // return arc4.DynamicBytes(last_arg.bytes)
    dup
    len
    itob
    extract 6 2
    swap
    concat
    // typed_abi_call/logger.py:134
    // @arc4.abimethod
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.logs_are_equal[routing]() -> void:
logs_are_equal:
    // typed_abi_call/logger.py:162
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    len
    uncover 3
    cover 2
    substring3
    extract 2 0
    txna ApplicationArgs 2
    dup
    intc_1 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    len
    uncover 3
    cover 2
    substring3
    extract 2 0
    // typed_abi_call/logger.py:164
    // return log_1 == log_2
    uncover 3
    uncover 2
    ==
    cover 2
    ==
    &&
    // typed_abi_call/logger.py:162
    // @arc4.abimethod
    pushbytes 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.echo_log_struct[routing]() -> void:
echo_log_struct:
    // typed_abi_call/logger.py:166
    // @arc4.abimethod
    bytec_0 // 0x151f7c75
    txna ApplicationArgs 1
    concat
    log
    intc_0 // 1
    return
