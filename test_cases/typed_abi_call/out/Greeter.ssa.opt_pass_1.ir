contract test_cases.typed_abi_call.typed_c2c.Greeter:
    program approval:
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.approval_program() -> uint64:
            block@0: // L6
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@8
            block@1: // abi_routing_L6
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "test_method_selector_kinds(application)void" => block@2, method "test_arg_conversion(application)void" => block@3, method "test_15plus_args(application)void" => block@4, method "test_void(application)void" => block@5, * => fail // reject transaction}
            block@2: // test_method_selector_kinds_route_L7
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: uint64 = (! tmp%2#0)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: uint64 = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: bytes = (txna ApplicationArgs 1)
                let tmp%6#0: uint64 = (btoi tmp%5#0)
                let tmp%7#0: uint64 = ((txnas Applications) tmp%6#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(tmp%7#0)
                return 1u
            block@3: // test_arg_conversion_route_L22
                let tmp%8#0: uint64 = (txn OnCompletion)
                let tmp%9#0: uint64 = (! tmp%8#0)
                (assert tmp%9#0) // OnCompletion is NoOp
                let tmp%10#0: uint64 = (txn ApplicationID)
                (assert tmp%10#0) // is not creating
                let tmp%11#0: bytes = (txna ApplicationArgs 1)
                let tmp%12#0: uint64 = (btoi tmp%11#0)
                let tmp%13#0: uint64 = ((txnas Applications) tmp%12#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(tmp%13#0)
                return 1u
            block@4: // test_15plus_args_route_L39
                let tmp%14#0: uint64 = (txn OnCompletion)
                let tmp%15#0: uint64 = (! tmp%14#0)
                (assert tmp%15#0) // OnCompletion is NoOp
                let tmp%16#0: uint64 = (txn ApplicationID)
                (assert tmp%16#0) // is not creating
                let tmp%17#0: bytes = (txna ApplicationArgs 1)
                let tmp%18#0: uint64 = (btoi tmp%17#0)
                let tmp%19#0: uint64 = ((txnas Applications) tmp%18#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(tmp%19#0)
                return 1u
            block@5: // test_void_route_L68
                let tmp%20#0: uint64 = (txn OnCompletion)
                let tmp%21#0: uint64 = (! tmp%20#0)
                (assert tmp%21#0) // OnCompletion is NoOp
                let tmp%22#0: uint64 = (txn ApplicationID)
                (assert tmp%22#0) // is not creating
                let tmp%23#0: bytes = (txna ApplicationArgs 1)
                let tmp%24#0: uint64 = (btoi tmp%23#0)
                let tmp%25#0: uint64 = ((txnas Applications) tmp%24#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_void(tmp%25#0)
                return 1u
            block@8: // bare_routing_L6
                let tmp%26#0: uint64 = (txn OnCompletion)
                let not%tmp%26#0: uint64 = (! tmp%26#0)
                (assert not%tmp%26#0) // reject transaction
                let tmp%27#0: uint64 = (txn ApplicationID)
                let tmp%28#0: uint64 = (! tmp%27#0)
                (assert tmp%28#0) // is creating
                return 1u
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(app: uint64) -> void:
            block@0: // L7
                itxn_begin
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05test1")
                itxn_submit
                let tmp_itxn_0%%LastLog#0: bytes = (itxn LastLog)
                let result#0: bytes = ((extract 4 0) tmp_itxn_0%%LastLog#0)
                let tmp%3#0: bytes = ((extract 0 4) tmp_itxn_0%%LastLog#0)
                let tmp%4#0: uint64 = (== tmp%3#0 0x151f7c75)
                (assert tmp%4#0) // ARC4 prefix is valid
                let tmp%7#0: uint64 = (== result#0 "\x00\x0becho: test1")
                (assert tmp%7#0)
                itxn_begin
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05test2")
                itxn_submit
                let tmp_itxn_1%%LastLog#0: bytes = (itxn LastLog)
                let result#1: bytes = ((extract 4 0) tmp_itxn_1%%LastLog#0)
                let tmp%11#0: bytes = ((extract 0 4) tmp_itxn_1%%LastLog#0)
                let tmp%12#0: uint64 = (== tmp%11#0 0x151f7c75)
                (assert tmp%12#0) // ARC4 prefix is valid
                let tmp%15#0: uint64 = (== result#1 "\x00\x0becho: test2")
                (assert tmp%15#0)
                itxn_begin
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05test3")
                itxn_submit
                let tmp_itxn_2%%LastLog#0: bytes = (itxn LastLog)
                let result#2: bytes = ((extract 4 0) tmp_itxn_2%%LastLog#0)
                let tmp%19#0: bytes = ((extract 0 4) tmp_itxn_2%%LastLog#0)
                let tmp%20#0: uint64 = (== tmp%19#0 0x151f7c75)
                (assert tmp%20#0) // ARC4 prefix is valid
                let tmp%23#0: uint64 = (== result#2 "\x00\x0becho: test3")
                (assert tmp%23#0)
                itxn_begin
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05test4")
                itxn_submit
                let tmp_itxn_3%%LastLog#0: bytes = (itxn LastLog)
                let result#3: bytes = ((extract 4 0) tmp_itxn_3%%LastLog#0)
                let tmp%27#0: bytes = ((extract 0 4) tmp_itxn_3%%LastLog#0)
                let tmp%28#0: uint64 = (== tmp%27#0 0x151f7c75)
                (assert tmp%28#0) // ARC4 prefix is valid
                let tmp%31#0: uint64 = (== result#3 "\x00\x0becho: test4")
                (assert tmp%31#0)
                itxn_begin
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05test5")
                itxn_submit
                let tmp_itxn_4%%LastLog#0: bytes = (itxn LastLog)
                let result#4: bytes = ((extract 4 0) tmp_itxn_4%%LastLog#0)
                let tmp%35#0: bytes = ((extract 0 4) tmp_itxn_4%%LastLog#0)
                let tmp%36#0: uint64 = (== tmp%35#0 0x151f7c75)
                (assert tmp%36#0) // ARC4 prefix is valid
                let tmp%39#0: uint64 = (== result#4 "\x00\x0becho: test5")
                (assert tmp%39#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(app: uint64) -> void:
            block@0: // L22
                itxn_begin
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log_string(string)void")
                ((itxn_field ApplicationArgs) "\x00\nconverted1")
                itxn_submit
                let itxn%%LastLog#0: bytes = (itxn LastLog)
                let tmp%1#0: uint64 = (== itxn%%LastLog#0 "converted1")
                (assert tmp%1#0)
                itxn_begin
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log_uint64(uint64)void")
                ((itxn_field ApplicationArgs) 0x0000000000000002)
                itxn_submit
                let itxn%%LastLog#1: bytes = (itxn LastLog)
                let tmp%3#0: bytes = (itob 2u)
                let tmp%4#0: uint64 = (== itxn%%LastLog#1 tmp%3#0)
                (assert tmp%4#0)
                itxn_begin
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log_uint512(uint512)void")
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)
                itxn_submit
                let itxn%%LastLog#2: bytes = (itxn LastLog)
                let tmp%8#0: bytes = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003
                let tmp%9#0: uint64 = (== itxn%%LastLog#2 tmp%8#0)
                (assert tmp%9#0)
                itxn_begin
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log_bytes(byte[])void")
                ((itxn_field ApplicationArgs) "\x00\x014")
                itxn_submit
                let itxn%%LastLog#3: bytes = (itxn LastLog)
                let tmp%11#0: uint64 = (== itxn%%LastLog#3 "4")
                (assert tmp%11#0)
                itxn_begin
                let tmp%13#0: any = 0x80
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log_bool(bool)void")
                ((itxn_field ApplicationArgs) tmp%13#0)
                itxn_submit
                let itxn%%LastLog#4: bytes = (itxn LastLog)
                let tmp%14#0: uint64 = (== itxn%%LastLog#4 "True")
                (assert tmp%14#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(app: uint64) -> void:
            block@0: // L39
                itxn_begin
                let encoded_tuple_buffer%2#1: bytes = 0xde
                let encoded_tuple_buffer%2#2: bytes = (concat encoded_tuple_buffer%2#1 0xad)
                let encoded_tuple_buffer%2#3: bytes = (concat encoded_tuple_buffer%2#2 0xbe)
                let encoded_tuple_buffer%2#4: bytes = (concat encoded_tuple_buffer%2#3 0xef)
                let encoded_tuple_buffer%4#1: bytes = 0x0f
                let encoded_tuple_buffer%4#2: bytes = (concat encoded_tuple_buffer%4#1 0x10)
                let encoded_tuple_buffer%4#3: bytes = (concat encoded_tuple_buffer%4#2 0x11)
                let encoded_tuple_buffer%4#4: bytes = (concat encoded_tuple_buffer%4#3 0x12)
                let encoded_tuple_buffer%4#5: bytes = (concat encoded_tuple_buffer%4#4 encoded_tuple_buffer%2#4)
                let encoded_tuple_buffer%4#6: bytes = (concat encoded_tuple_buffer%4#5 0x14)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]")
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field ApplicationArgs) 0x0000000000000002)
                ((itxn_field ApplicationArgs) 0x0000000000000003)
                ((itxn_field ApplicationArgs) 0x0000000000000004)
                ((itxn_field ApplicationArgs) 0x0000000000000005)
                ((itxn_field ApplicationArgs) 0x0000000000000006)
                ((itxn_field ApplicationArgs) 0x0000000000000007)
                ((itxn_field ApplicationArgs) 0x0000000000000008)
                ((itxn_field ApplicationArgs) 0x0000000000000009)
                ((itxn_field ApplicationArgs) 0x000000000000000a)
                ((itxn_field ApplicationArgs) 0x000000000000000b)
                ((itxn_field ApplicationArgs) 0x000000000000000c)
                ((itxn_field ApplicationArgs) 0x000000000000000d)
                ((itxn_field ApplicationArgs) 0x000000000000000e)
                ((itxn_field ApplicationArgs) encoded_tuple_buffer%4#6)
                itxn_submit
                let tmp_itxn_0%%LastLog#0: bytes = (itxn LastLog)
                let result#0: bytes = ((extract 4 0) tmp_itxn_0%%LastLog#0)
                let tmp%7#0: bytes = ((extract 0 4) tmp_itxn_0%%LastLog#0)
                let tmp%8#0: uint64 = (== tmp%7#0 0x151f7c75)
                (assert tmp%8#0) // ARC4 prefix is valid
                let tmp%11#0: bytes = ((extract 2 0) result#0)
                let tmp%12#0: uint64 = (== tmp%11#0 0x0f101112deadbeef14)
                (assert tmp%12#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_void(app: uint64) -> void:
            block@0: // L68
                itxn_begin
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log_string(string)void")
                ((itxn_field ApplicationArgs) "\x00\x06World1")
                itxn_submit
                let itxn%%LastLog#0: bytes = (itxn LastLog)
                let tmp%1#0: uint64 = (== itxn%%LastLog#0 "World1")
                (assert tmp%1#0)
                itxn_begin
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log_string(string)void")
                ((itxn_field ApplicationArgs) "\x00\x06World2")
                itxn_submit
                let itxn%%LastLog#1: bytes = (itxn LastLog)
                let tmp%3#0: uint64 = (== itxn%%LastLog#1 "World2")
                (assert tmp%3#0)
                itxn_begin
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log_string(string)void")
                ((itxn_field ApplicationArgs) "\x00\x06World3")
                itxn_submit
                let itxn%%LastLog#2: bytes = (itxn LastLog)
                let tmp%5#0: uint64 = (== itxn%%LastLog#2 "World3")
                (assert tmp%5#0)
                itxn_begin
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log_string(string)void")
                ((itxn_field ApplicationArgs) "\x00\x06World4")
                itxn_submit
                let itxn%%LastLog#3: bytes = (itxn LastLog)
                let tmp%7#0: uint64 = (== itxn%%LastLog#3 "World4")
                (assert tmp%7#0)
                return 
    
    program clear-state:
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.clear_state_program() -> uint64:
            block@0: // L6
                return 1u