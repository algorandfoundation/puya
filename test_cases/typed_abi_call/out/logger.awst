contract Logger
{
  abimethod echo(value: algopy.arc4.String): algopy.arc4.String
  {
    return arc4_encode('echo: ', algopy.arc4.String) + value
  }
  
  abimethod[name_override=log] log_uint64(value: algopy.arc4.UInt64): None
  {
    log(value)
  }
  
  abimethod[name_override=log] log_uint512(value: algopy.arc4.UInt512): None
  {
    log(value)
  }
  
  abimethod[name_override=log] log_string(value: algopy.arc4.String): None
  {
    log(arc4_decode(value, algopy.String))
  }
  
  abimethod[name_override=log] log_bool(value: algopy.arc4.Bool): None
  {
    log((arc4_decode(value, bool)) ? ('True') : ('False'))
  }
  
  abimethod[name_override=log] log_bytes(value: algopy.arc4.DynamicBytes): None
  {
    log(arc4_decode(value, algopy.Bytes))
  }
  
  abimethod[name_override=log] log_asset_account_app(asset: algopy.Asset, account: algopy.Account, app: algopy.Application): None
  {
    log(concat(concat(concat(concat(checked_maybe(asset_params_get<AssetName>(asset)), ''), reinterpret_cast<algopy.Bytes>(account)), ''), checked_maybe(app_params_get<AppAddress>(app))))
  }
  
  abimethod return_args_after_14th(_a1: algopy.arc4.UInt64, _a2: algopy.arc4.UInt64, _a3: algopy.arc4.UInt64, _a4: algopy.arc4.UInt64, _a5: algopy.arc4.UInt64, _a6: algopy.arc4.UInt64, _a7: algopy.arc4.UInt64, _a8: algopy.arc4.UInt64, _a9: algopy.arc4.UInt64, _a10: algopy.arc4.UInt64, _a11: algopy.arc4.UInt64, _a12: algopy.arc4.UInt64, _a13: algopy.arc4.UInt64, _a14: algopy.arc4.UInt64, a15: algopy.arc4.UInt8, a16: algopy.arc4.UInt8, a17: algopy.arc4.UInt8, a18: algopy.arc4.UInt8, a19: algopy.arc4.Tuple[algopy.arc4.UInt8, algopy.arc4.UInt8, algopy.arc4.UInt8, algopy.arc4.UInt8], a20: algopy.arc4.UInt8): algopy.arc4.DynamicBytes
  {
    last_arg: algopy.arc4.Tuple[algopy.arc4.UInt8, algopy.arc4.UInt8, algopy.arc4.UInt8, algopy.arc4.UInt8, algopy.arc4.Tuple[algopy.arc4.UInt8, algopy.arc4.UInt8, algopy.arc4.UInt8, algopy.arc4.UInt8], algopy.arc4.UInt8] = arc4_encode((a15, a16, a17, a18, a19, a20), algopy.arc4.Tuple[algopy.arc4.UInt8, algopy.arc4.UInt8, algopy.arc4.UInt8, algopy.arc4.UInt8, algopy.arc4.Tuple[algopy.arc4.UInt8, algopy.arc4.UInt8, algopy.arc4.UInt8, algopy.arc4.UInt8], algopy.arc4.UInt8])
    assert(txna<ApplicationArgs, 15>() == reinterpret_cast<algopy.Bytes>(last_arg))
    return arc4_encode(reinterpret_cast<algopy.Bytes>(last_arg), algopy.arc4.DynamicBytes)
  }
}