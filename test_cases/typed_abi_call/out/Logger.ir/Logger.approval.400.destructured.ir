main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@28
    block@2: // abi_routing_L31
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "is_a_b(byte[],byte[])void" => block@4, method "echo(string)string" => block@5, method "no_args()uint64" => block@6, method "log(uint64)void" => block@7, method "log(uint512)void" => block@8, method "log(string)void" => block@9, method "log(bool)void" => block@10, method "log(byte[])void" => block@11, method "log(uint64,address,uint64)void" => block@12, method "log(address)void" => block@13, method "echo_native_string(string)string" => block@14, method "echo_native_bytes(byte[])byte[]" => block@15, method "echo_native_uint64(uint64)uint64" => block@16, method "echo_native_biguint(uint512)uint512" => block@17, method "echo_resource_by_index(asset,application,account)(uint64,uint64,address)" => block@18, method "echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)" => block@19, method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)" => block@20, method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))" => block@21, method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]" => block@22, method "logs_are_equal((uint64,string),(uint64,string))bool" => block@23, method "echo_log_struct((uint64,string))(uint64,string)" => block@24, * => block@27}
    block@4: // is_a_b_route_L32
        test_cases.typed_abi_call.logger.Logger.is_a_b[routing]()
        goto block@27
    block@5: // echo_route_L37
        test_cases.typed_abi_call.logger.Logger.echo[routing]()
        goto block@27
    block@6: // no_args_route_L41
        (log 0x151f7c75000000000000002a)
        exit 1u
    block@7: // log_route_L45
        test_cases.typed_abi_call.logger.Logger.log_uint64[routing]()
        goto block@27
    block@8: // log_route_L49
        test_cases.typed_abi_call.logger.Logger.log_uint512[routing]()
        goto block@27
    block@9: // log_route_L53
        test_cases.typed_abi_call.logger.Logger.log_string[routing]()
        goto block@27
    block@10: // log_route_L57
        test_cases.typed_abi_call.logger.Logger.log_bool[routing]()
        goto block@27
    block@11: // log_route_L61
        test_cases.typed_abi_call.logger.Logger.log_bytes[routing]()
        goto block@27
    block@12: // log_route_L65
        test_cases.typed_abi_call.logger.Logger.log_asset_account_app[routing]()
        goto block@27
    block@13: // log_route_L69
        test_cases.typed_abi_call.logger.Logger.log_address[routing]()
        goto block@27
    block@14: // echo_native_string_route_L73
        test_cases.typed_abi_call.logger.Logger.echo_native_string[routing]()
        goto block@27
    block@15: // echo_native_bytes_route_L77
        test_cases.typed_abi_call.logger.Logger.echo_native_bytes[routing]()
        goto block@27
    block@16: // echo_native_uint64_route_L81
        test_cases.typed_abi_call.logger.Logger.echo_native_uint64[routing]()
        goto block@27
    block@17: // echo_native_biguint_route_L85
        test_cases.typed_abi_call.logger.Logger.echo_native_biguint[routing]()
        goto block@27
    block@18: // echo_resource_by_index_route_L89
        test_cases.typed_abi_call.logger.Logger.echo_resource_by_index[routing]()
        goto block@27
    block@19: // echo_resource_by_value_route_L103
        test_cases.typed_abi_call.logger.Logger.echo_resource_by_value[routing]()
        goto block@27
    block@20: // echo_native_tuple_route_L117
        test_cases.typed_abi_call.logger.Logger.echo_native_tuple[routing]()
        goto block@27
    block@21: // echo_nested_tuple_route_L123
        test_cases.typed_abi_call.logger.Logger.echo_nested_tuple[routing]()
        goto block@27
    block@22: // return_args_after_14th_route_L134
        test_cases.typed_abi_call.logger.Logger.return_args_after_14th[routing]()
        goto block@27
    block@23: // logs_are_equal_route_L162
        test_cases.typed_abi_call.logger.Logger.logs_are_equal[routing]()
        goto block@27
    block@24: // echo_log_struct_route_L166
        test_cases.typed_abi_call.logger.Logger.echo_log_struct[routing]()
        goto block@27
    block@27: // after_if_else_L31
        fail
    block@28: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.is_a_b[routing]() -> void:
    block@0: // L32
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let add%0#0: uint64 = (+ aggregate%array_length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let a#0: bytes = ((extract 2 0) tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%2#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%1#0 2u)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let b#0: bytes = ((extract 2 0) tmp%2#0)
        let tmp%0#1: bool = (== a#0 0x61)
        (assert tmp%0#1) // a is not a
        let tmp%1#1: bool = (== b#0 0x62)
        (assert tmp%1#1) // b is not b
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo[routing]() -> void:
    block@0: // L37
        let value#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 value#0 0u) // on error: invalid array length header
        let add%0#0: uint64 = (+ aggregate%array_length%0#0 2u)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let extract_to_end%0#0: bytes = ((extract 2 0) value#0)
        let concat%0#0: Encoded(len+utf8[]) = (concat 0x00066563686f3a20 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let as_bytes%0#0: bytes[8] = (itob len%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 replace%0#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_uint64[routing]() -> void:
    block@0: // L45
        let value#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        (log value#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_uint512[routing]() -> void:
    block@0: // L49
        let value#0: Encoded(uint512) = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 64u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint512
        (log value#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_string[routing]() -> void:
    block@0: // L53
        let value#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 value#0 0u) // on error: invalid array length header
        let add%0#0: uint64 = (+ aggregate%array_length%0#0 2u)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%0#1: string = ((extract 2 0) value#0)
        (log tmp%0#1)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_bool[routing]() -> void:
    block@0: // L57
        let value#0: Encoded(bool8) = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for arc4.bool
        let aggregate%get_bit%0#0: bool = (getbit value#0 0u)
        let select%0#0: bytes = (select 0x46616c7365 0x54727565 aggregate%get_bit%0#0)
        (log select%0#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_bytes[routing]() -> void:
    block@0: // L61
        let value#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 value#0 0u) // on error: invalid array length header
        let add%0#0: uint64 = (+ aggregate%array_length%0#0 2u)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%0#1: bytes = ((extract 2 0) value#0)
        (log tmp%0#1)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_asset_account_app[routing]() -> void:
    block@0: // L65
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let asset#0: uint64 = (btoi tmp%0#0)
        let account#0: account = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len account#0)
        let eq%1#0: bool = (== len%1#0 32u)
        (assert eq%1#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = (btoi tmp%4#0)
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
        (assert check%0#0) // asset exists
        let tmp%1#1: bytes = (concat value%0#0 account#0)
        let (value%1#0: account, check%1#0: bool) = ((app_params_get AppAddress) app#0)
        (assert check%1#0) // application exists
        let tmp%3#1: bytes = (concat tmp%1#1 value%1#0)
        (log tmp%3#1)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_address[routing]() -> void:
    block@0: // L69
        let address#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len address#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        (log address#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_string[routing]() -> void:
    block@0: // L73
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let add%0#0: uint64 = (+ aggregate%array_length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let value#0: string = ((extract 2 0) tmp%0#0)
        let tmp%0#0: bytes = (concat "echo: " value#0)
        let aggregate%length%0#0: uint64 = (len tmp%0#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%0#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 aggregate%encoded_value%0#0)
        (log tmp%4#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_bytes[routing]() -> void:
    block@0: // L77
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let add%0#0: uint64 = (+ aggregate%array_length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let value#0: bytes = ((extract 2 0) tmp%0#0)
        let tmp%0#0: bytes = (concat 0x6563686f3a20 value#0)
        let aggregate%length%0#0: uint64 = (len tmp%0#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%0#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 aggregate%encoded_value%0#0)
        (log tmp%4#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_uint64[routing]() -> void:
    block@0: // L81
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let value#0: uint64 = (btoi tmp%0#0)
        let tmp%0#1: uint64 = (+ value#0 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#1)
        let tmp%4#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%4#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_biguint[routing]() -> void:
    block@0: // L85
        let value#0: biguint = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len value#0)
        let eq%0#0: bool = (== len%0#0 64u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint512
        let tmp%0#1: biguint = (b+ value#0 1b)
        let aggregate%value_len%0#0: uint64 = (len tmp%0#1)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| tmp%0#1 aggregate%bzero%0#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 aggregate%arc4_encoded%0#0)
        (log tmp%4#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_resource_by_index[routing]() -> void:
    block@0: // L89
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint8
        let tmp%1#0: uint64 = (btoi tmp%0#0)
        let asset#0: uint64 = ((txnas Assets) tmp%1#0)
        let tmp%3#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%3#0)
        let eq%1#0: bool = (== len%1#0 1u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint8
        let tmp%4#0: uint64 = (btoi tmp%3#0)
        let app#0: uint64 = ((txnas Applications) tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%6#0)
        let eq%2#0: bool = (== len%2#0 1u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint8
        let tmp%7#0: uint64 = (btoi tmp%6#0)
        let acc#0: account = ((txnas Accounts) tmp%7#0)
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let asset_idx#0: uint64 = (btoi tmp%0#0)
        let tmp%2#1: uint64 = ((txnas Assets) asset_idx#0)
        let tmp%3#1: bool = (== asset#0 tmp%2#1)
        (assert tmp%3#1) // expected asset to be passed by index
        let tmp%4#1: bytes = (txna ApplicationArgs 2)
        let app_idx#0: uint64 = (btoi tmp%4#1)
        let tmp%6#1: uint64 = ((txnas Applications) app_idx#0)
        let tmp%7#1: bool = (== app#0 tmp%6#1)
        (assert tmp%7#1) // expected application to be passed by index
        let tmp%8#1: bytes = (txna ApplicationArgs 3)
        let acc_idx#0: uint64 = (btoi tmp%8#1)
        let tmp%10#1: account = ((txnas Accounts) acc_idx#0)
        let tmp%11#1: bool = (== acc#0 tmp%10#1)
        (assert tmp%11#1) // expected account to be passed by index
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob app#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 acc#0)
        let tmp%13#0: bytes = (concat 0x151f7c75 aggregate%head%2#0)
        (log tmp%13#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_resource_by_value[routing]() -> void:
    block@0: // L103
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let asset#0: uint64 = (btoi tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let app#0: uint64 = (btoi tmp%2#0)
        let acc#0: account = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len acc#0)
        let eq%2#0: bool = (== len%2#0 32u)
        (assert eq%2#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let asset_id#0: uint64 = (btoi tmp%0#0)
        let tmp%2#1: bool = (== asset#0 asset_id#0)
        (assert tmp%2#1) // expected asset to be passed by value
        let tmp%3#1: bytes = (txna ApplicationArgs 2)
        let app_id#0: uint64 = (btoi tmp%3#1)
        let tmp%5#1: bool = (== app#0 app_id#0)
        (assert tmp%5#1) // expected application to be passed by value
        let address#0: bytes = (txna ApplicationArgs 3)
        let tmp%7#1: bool = (== acc#0 address#0)
        (assert tmp%7#1) // expected account to be passed by value
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob app#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 acc#0)
        let tmp%10#0: bytes = (concat 0x151f7c75 aggregate%head%2#0)
        (log tmp%10#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_tuple[routing]() -> void:
    block@0: // L117
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let add%0#0: uint64 = (+ aggregate%array_length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let s#0: string = ((extract 2 0) tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%2#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%1#0 2u)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let b#0: bytes = ((extract 2 0) tmp%2#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint64
        let u#0: uint64 = (btoi tmp%4#0)
        let bu#0: biguint = (txna ApplicationArgs 4)
        let len%3#0: uint64 = (len bu#0)
        let eq%3#0: bool = (== len%3#0 64u)
        (assert eq%3#0) // invalid number of bytes for arc4.uint512
        let tmp%0#0: bytes = (concat "echo: " s#0)
        let tmp%1#1: bytes = (concat 0x6563686f3a20 b#0)
        let tmp%2#1: uint64 = (+ u#0 1u)
        let tmp%3#1: biguint = (b+ bu#0 1b)
        let aggregate%length%0#0: uint64 = (len tmp%0#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%encoded_value%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 76u aggregate%data_length%0#0)
        let aggregate%length%1#0: uint64 = (len tmp%1#1)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%1#1)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%1#0: bytes = (concat 0x004c aggregate%offset_as_uint16%1#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#1)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%val_as_bytes%0#0)
        let aggregate%value_len%0#0: uint64 = (len tmp%3#1)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| tmp%3#1 aggregate%bzero%0#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%arc4_encoded%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 aggregate%encoded_value%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%encoded_value%1#0)
        let tmp%13#0: bytes = (concat 0x151f7c75 aggregate%concat%1#0)
        (log tmp%13#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_nested_tuple[routing]() -> void:
    block@0: // L123
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 4u)
        (assert eq%0#0) // invalid tail pointer at index 0 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 tmp%0#0 2u)
        let aggregate%substring3%0#0: bytes = (substring3 tmp%0#0 extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let extract_uint16%1#0: uint64 = (extract_uint16 aggregate%substring3%0#0 0u) // on error: invalid tuple encoding
        let eq%1#0: bool = (== extract_uint16%1#0 4u)
        (assert eq%1#0) // invalid tail pointer at index 0 of ((len+utf8[]),(len+utf8[]))
        let aggregate%extract_uint16%5#0: uint64 = (extract_uint16 aggregate%substring3%0#0 2u)
        let aggregate%substring3%2#0: bytes = (substring3 aggregate%substring3%0#0 extract_uint16%1#0 aggregate%extract_uint16%5#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 aggregate%substring3%2#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%0#0 6u)
        let eq%2#0: bool = (== aggregate%extract_uint16%5#0 add%1#0)
        (assert eq%2#0) // invalid tail pointer at index 1 of ((len+utf8[]),(len+utf8[]))
        let aggregate%len%0#0: uint64 = (len aggregate%substring3%0#0)
        let tuple_of_tuples.0.1#0: Encoded(len+utf8[]) = (substring3 aggregate%substring3%0#0 aggregate%extract_uint16%5#0 aggregate%len%0#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tuple_of_tuples.0.1#0 0u) // on error: invalid array length header
        let add%2#0: uint64 = (+ aggregate%array_length%1#0 2u)
        let add%3#0: uint64 = (+ add%1#0 add%2#0)
        let add%4#0: uint64 = (+ 4u add%3#0)
        let eq%3#0: bool = (== aggregate%extract_uint16%1#0 add%4#0)
        (assert eq%3#0) // invalid tail pointer at index 1 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))
        let aggregate%len%1#0: uint64 = (len tmp%0#0)
        let aggregate%substring3%5#0: bytes = (substring3 tmp%0#0 aggregate%extract_uint16%1#0 aggregate%len%1#0)
        let extract_uint16%4#0: uint64 = (extract_uint16 aggregate%substring3%5#0 16u) // on error: invalid tuple encoding
        let eq%4#0: bool = (== extract_uint16%4#0 18u)
        (assert eq%4#0) // invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]))
        let aggregate%len%3#0: uint64 = (len aggregate%substring3%5#0)
        let aggregate%substring3%7#0: bytes = (substring3 aggregate%substring3%5#0 extract_uint16%4#0 aggregate%len%3#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 aggregate%substring3%7#0 0u) // on error: invalid array length header
        let add%6#0: uint64 = (+ aggregate%array_length%2#0 20u)
        let add%7#0: uint64 = (+ add%4#0 add%6#0)
        let eq%5#0: bool = (== aggregate%len%1#0 add%7#0)
        (assert eq%5#0) // invalid number of bytes for arc4.tuple<arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>>,arc4.tuple<arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>>>
        let tuple_of_tuples.0.0#0: string = ((extract 2 0) aggregate%substring3%2#0)
        let tuple_of_tuples.1.0#0: uint64 = (extract_uint64 aggregate%substring3%5#0 0u)
        let tuple_of_tuples.1.2#0: bytes = ((extract 2 0) aggregate%substring3%7#0)
        let tmp%0#0: bytes = (concat "echo: " tuple_of_tuples.0.0#0)
        let extract_to_end%0#0: bytes = ((extract 2 0) tuple_of_tuples.0.1#0)
        let concat%0#0: Encoded(len+utf8[]) = (concat 0x00066563686f3a20 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#1: uint64 = (len extract_to_end%1#0)
        let as_bytes%0#0: bytes[8] = (itob len%0#1)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let tmp%2#1: uint64 = (+ tuple_of_tuples.1.0#0 1u)
        let tmp%3#1: uint64 = (extract_uint64 aggregate%substring3%5#0 8u)
        let tmp%4#1: uint64 = (+ tmp%3#1 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%4#1)
        let tmp%6#1: bytes = (concat 0x6563686f3a20 tuple_of_tuples.1.2#0)
        let aggregate%length%1#0: uint64 = (len tmp%0#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%encoded_value%1#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 4u aggregate%data_length%0#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%1#0: bytes = (concat 0x0004 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 aggregate%encoded_value%1#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 replace%0#0)
        let aggregate%data_length%2#0: uint64 = (len aggregate%concat%1#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ 4u aggregate%data_length%2#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%2#1)
        let aggregate%head%4#0: bytes = (concat aggregate%val_as_bytes%1#0 aggregate%val_as_bytes%0#0)
        let aggregate%length%2#0: uint64 = (len tmp%6#1)
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 tmp%6#1)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 0x0012)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%5#0 aggregate%encoded_value%2#0)
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%current_tail_offset%2#0)
        let aggregate%offset_as_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%head%6#0: bytes = (concat 0x0004 aggregate%offset_as_uint16%4#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%head%6#0 aggregate%concat%1#0)
        let aggregate%concat%4#0: bytes = (concat aggregate%concat%3#0 aggregate%concat%2#0)
        let tmp%17#0: bytes = (concat 0x151f7c75 aggregate%concat%4#0)
        (log tmp%17#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.return_args_after_14th[routing]() -> void:
    block@0: // L134
        let _a1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len _a1#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let _a2#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len _a2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let _a3#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len _a3#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint64
        let _a4#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let len%3#0: uint64 = (len _a4#0)
        let eq%3#0: bool = (== len%3#0 8u)
        (assert eq%3#0) // invalid number of bytes for arc4.uint64
        let _a5#0: Encoded(uint64) = (txna ApplicationArgs 5)
        let len%4#0: uint64 = (len _a5#0)
        let eq%4#0: bool = (== len%4#0 8u)
        (assert eq%4#0) // invalid number of bytes for arc4.uint64
        let _a6#0: Encoded(uint64) = (txna ApplicationArgs 6)
        let len%5#0: uint64 = (len _a6#0)
        let eq%5#0: bool = (== len%5#0 8u)
        (assert eq%5#0) // invalid number of bytes for arc4.uint64
        let _a7#0: Encoded(uint64) = (txna ApplicationArgs 7)
        let len%6#0: uint64 = (len _a7#0)
        let eq%6#0: bool = (== len%6#0 8u)
        (assert eq%6#0) // invalid number of bytes for arc4.uint64
        let _a8#0: Encoded(uint64) = (txna ApplicationArgs 8)
        let len%7#0: uint64 = (len _a8#0)
        let eq%7#0: bool = (== len%7#0 8u)
        (assert eq%7#0) // invalid number of bytes for arc4.uint64
        let _a9#0: Encoded(uint64) = (txna ApplicationArgs 9)
        let len%8#0: uint64 = (len _a9#0)
        let eq%8#0: bool = (== len%8#0 8u)
        (assert eq%8#0) // invalid number of bytes for arc4.uint64
        let _a10#0: Encoded(uint64) = (txna ApplicationArgs 10)
        let len%9#0: uint64 = (len _a10#0)
        let eq%9#0: bool = (== len%9#0 8u)
        (assert eq%9#0) // invalid number of bytes for arc4.uint64
        let _a11#0: Encoded(uint64) = (txna ApplicationArgs 11)
        let len%10#0: uint64 = (len _a11#0)
        let eq%10#0: bool = (== len%10#0 8u)
        (assert eq%10#0) // invalid number of bytes for arc4.uint64
        let _a12#0: Encoded(uint64) = (txna ApplicationArgs 12)
        let len%11#0: uint64 = (len _a12#0)
        let eq%11#0: bool = (== len%11#0 8u)
        (assert eq%11#0) // invalid number of bytes for arc4.uint64
        let _a13#0: Encoded(uint64) = (txna ApplicationArgs 13)
        let len%12#0: uint64 = (len _a13#0)
        let eq%12#0: bool = (== len%12#0 8u)
        (assert eq%12#0) // invalid number of bytes for arc4.uint64
        let _a14#0: Encoded(uint64) = (txna ApplicationArgs 14)
        let len%13#0: uint64 = (len _a14#0)
        let eq%13#0: bool = (== len%13#0 8u)
        (assert eq%13#0) // invalid number of bytes for arc4.uint64
        let tmp%14#0: bytes = (txna ApplicationArgs 15)
        let len%14#0: uint64 = (len tmp%14#0)
        let eq%14#0: bool = (== len%14#0 9u)
        (assert eq%14#0) // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>
        let a15#0: Encoded(uint8) = ((extract 0 1) tmp%14#0)
        let tmp%15#0: bytes = (txna ApplicationArgs 15)
        let len%15#0: uint64 = (len tmp%15#0)
        let eq%15#0: bool = (== len%15#0 9u)
        (assert eq%15#0) // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>
        let a16#0: Encoded(uint8) = ((extract 1 1) tmp%15#0)
        let tmp%16#0: bytes = (txna ApplicationArgs 15)
        let len%16#0: uint64 = (len tmp%16#0)
        let eq%16#0: bool = (== len%16#0 9u)
        (assert eq%16#0) // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>
        let a17#0: Encoded(uint8) = ((extract 2 1) tmp%16#0)
        let tmp%17#0: bytes = (txna ApplicationArgs 15)
        let len%17#0: uint64 = (len tmp%17#0)
        let eq%17#0: bool = (== len%17#0 9u)
        (assert eq%17#0) // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>
        let a18#0: Encoded(uint8) = ((extract 3 1) tmp%17#0)
        let tmp%18#0: bytes = (txna ApplicationArgs 15)
        let len%18#0: uint64 = (len tmp%18#0)
        let eq%18#0: bool = (== len%18#0 9u)
        (assert eq%18#0) // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>
        let a19#0: Encoded(uint8,uint8,uint8,uint8) = ((extract 4 4) tmp%18#0)
        let tmp%19#0: bytes = (txna ApplicationArgs 15)
        let len%19#0: uint64 = (len tmp%19#0)
        let eq%19#0: bool = (== len%19#0 9u)
        (assert eq%19#0) // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>
        let a20#0: Encoded(uint8) = ((extract 8 1) tmp%19#0)
        let aggregate%head%1#0: bytes = (concat a15#0 a16#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 a17#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 a18#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 a19#0)
        let last_arg#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (concat aggregate%head%4#0 a20#0)
        let tmp%1#1: bytes = (txna ApplicationArgs 15)
        let tmp%2#1: bool = (== tmp%1#1 last_arg#0)
        (assert tmp%2#1)
        let aggregate%length%0#0: uint64 = (len last_arg#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 last_arg#0)
        let tmp%21#0: bytes = (concat 0x151f7c75 aggregate%encoded_value%0#0)
        (log tmp%21#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.logs_are_equal[routing]() -> void:
    block@0: // L162
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 8u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 10u)
        (assert eq%0#0) // invalid tail pointer at index 1 of (uint64,(len+utf8[]))
        let aggregate%len%0#0: uint64 = (len tmp%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 tmp%0#0 extract_uint16%0#0 aggregate%len%0#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 aggregate%substring3%0#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%0#0 12u)
        let eq%1#0: bool = (== aggregate%len%0#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for test_cases.typed_abi_call.logger.LogMessage
        let log_1.level#0: uint64 = (extract_uint64 tmp%0#0 0u)
        let log_1.message#0: string = ((extract 2 0) aggregate%substring3%0#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 2)
        let extract_uint16%1#0: uint64 = (extract_uint16 tmp%4#0 8u) // on error: invalid tuple encoding
        let eq%2#0: bool = (== extract_uint16%1#0 10u)
        (assert eq%2#0) // invalid tail pointer at index 1 of (uint64,(len+utf8[]))
        let aggregate%len%2#0: uint64 = (len tmp%4#0)
        let aggregate%substring3%2#0: bytes = (substring3 tmp%4#0 extract_uint16%1#0 aggregate%len%2#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 aggregate%substring3%2#0 0u) // on error: invalid array length header
        let add%3#0: uint64 = (+ aggregate%array_length%1#0 12u)
        let eq%3#0: bool = (== aggregate%len%2#0 add%3#0)
        (assert eq%3#0) // invalid number of bytes for test_cases.typed_abi_call.logger.LogMessage
        let log_2.level#0: uint64 = (extract_uint64 tmp%4#0 0u)
        let log_2.message#0: string = ((extract 2 0) aggregate%substring3%2#0)
        let tmp%0#1: bool = (== log_1.level#0 log_2.level#0)
        let tmp%1#1: bool = (== log_1.message#0 log_2.message#0)
        let tmp%2#1: bool = (&& tmp%0#1 tmp%1#1)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%2#1)
        let tmp%10#0: bytes = (concat 0x151f7c75 aggregate%encoded_bool%0#0)
        (log tmp%10#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_log_struct[routing]() -> void:
    block@0: // L166
        let log#0: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 1)
        let extract_uint16%0#0: uint64 = (extract_uint16 log#0 8u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 10u)
        (assert eq%0#0) // invalid tail pointer at index 1 of (uint64,(len+utf8[]))
        let aggregate%len%0#0: uint64 = (len log#0)
        let aggregate%substring3%0#0: bytes = (substring3 log#0 extract_uint16%0#0 aggregate%len%0#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 aggregate%substring3%0#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%0#0 12u)
        let eq%1#0: bool = (== aggregate%len%0#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for test_cases.typed_abi_call.logger.LogStruct
        let tmp%3#0: bytes = (concat 0x151f7c75 log#0)
        (log tmp%3#0)
        exit 1u