main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@24
    block@2: // abi_routing_L30
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "is_a_b(byte[],byte[])void" => block@3, method "echo(string)string" => block@4, method "no_args()uint64" => block@5, method "log(uint64)void" => block@6, method "log(uint512)void" => block@7, method "log(string)void" => block@8, method "log(bool)void" => block@9, method "log(byte[])void" => block@10, method "log(asset,account,application)void" => block@11, method "log(address)void" => block@12, method "echo_native_string(string)string" => block@13, method "echo_native_bytes(byte[])byte[]" => block@14, method "echo_native_uint64(uint64)uint64" => block@15, method "echo_native_biguint(uint512)uint512" => block@16, method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)" => block@17, method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))" => block@18, method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]" => block@19, method "logs_are_equal((uint64,string),(uint64,string))bool" => block@20, method "echo_log_struct((uint64,string))(uint64,string)" => block@21, * => block@28}
    block@3: // is_a_b_route_L31
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%7#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%8#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        test_cases.typed_abi_call.logger.Logger.is_a_b(tmp%7#0, tmp%8#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0: bool = 1u
        goto block@29
    block@4: // echo_route_L36
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (!= tmp%11#0 0u)
        (assert tmp%11#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%13#0: Encoded(len+utf8[]) = test_cases.typed_abi_call.logger.Logger.echo(reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%14#0: bytes = (concat 0x151f7c75 tmp%13#0)
        (log tmp%14#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#1: bool = 1u
        goto block@29
    block@5: // no_args_route_L40
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%17#0) // can only call when not creating
        let to_encode%0#0: uint64 = test_cases.typed_abi_call.logger.Logger.no_args()
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%19#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%19#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#2: bool = 1u
        goto block@29
    block@6: // log_route_L44
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        let tmp%23#0: bool = (!= tmp%22#0 0u)
        (assert tmp%22#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        test_cases.typed_abi_call.logger.Logger.log_uint64(reinterpret_Encoded(uint64)%0#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#3: bool = 1u
        goto block@29
    block@7: // log_route_L48
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        let tmp%27#0: bool = (!= tmp%26#0 0u)
        (assert tmp%26#0) // can only call when not creating
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = (txna ApplicationArgs 1)
        test_cases.typed_abi_call.logger.Logger.log_uint512(reinterpret_Encoded(uint512)%0#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#4: bool = 1u
        goto block@29
    block@8: // log_route_L52
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (!= tmp%30#0 0u)
        (assert tmp%30#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        test_cases.typed_abi_call.logger.Logger.log_string(reinterpret_Encoded(len+utf8[])%1#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#5: bool = 1u
        goto block@29
    block@9: // log_route_L56
        let tmp%32#0: uint64 = (txn OnCompletion)
        let tmp%33#0: bool = (! tmp%32#0)
        (assert tmp%33#0) // OnCompletion is not NoOp
        let tmp%34#0: uint64 = (txn ApplicationID)
        let tmp%35#0: bool = (!= tmp%34#0 0u)
        (assert tmp%34#0) // can only call when not creating
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 1)
        test_cases.typed_abi_call.logger.Logger.log_bool(reinterpret_Encoded(bool8)%0#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#6: bool = 1u
        goto block@29
    block@10: // log_route_L60
        let tmp%36#0: uint64 = (txn OnCompletion)
        let tmp%37#0: bool = (! tmp%36#0)
        (assert tmp%37#0) // OnCompletion is not NoOp
        let tmp%38#0: uint64 = (txn ApplicationID)
        let tmp%39#0: bool = (!= tmp%38#0 0u)
        (assert tmp%38#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        test_cases.typed_abi_call.logger.Logger.log_bytes(reinterpret_Encoded(len+uint8[])%2#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#7: bool = 1u
        goto block@29
    block@11: // log_route_L64
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (! tmp%40#0)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        let tmp%43#0: bool = (!= tmp%42#0 0u)
        (assert tmp%42#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%44#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let tmp%45#0: uint64 = ((txnas Assets) tmp%44#0)
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%46#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let tmp%47#0: bytes[32] = ((txnas Accounts) tmp%46#0)
        let reinterpret_Encoded(uint8)%2#0: Encoded(uint8) = (txna ApplicationArgs 3)
        let tmp%48#0: uint64 = (btoi reinterpret_Encoded(uint8)%2#0)
        let tmp%49#0: uint64 = ((txnas Applications) tmp%48#0)
        test_cases.typed_abi_call.logger.Logger.log_asset_account_app(tmp%45#0, tmp%47#0, tmp%49#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#8: bool = 1u
        goto block@29
    block@12: // log_route_L68
        let tmp%50#0: uint64 = (txn OnCompletion)
        let tmp%51#0: bool = (! tmp%50#0)
        (assert tmp%51#0) // OnCompletion is not NoOp
        let tmp%52#0: uint64 = (txn ApplicationID)
        let tmp%53#0: bool = (!= tmp%52#0 0u)
        (assert tmp%52#0) // can only call when not creating
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        test_cases.typed_abi_call.logger.Logger.log_address(reinterpret_Encoded(uint8[32])%0#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#9: bool = 1u
        goto block@29
    block@13: // echo_native_string_route_L72
        let tmp%54#0: uint64 = (txn OnCompletion)
        let tmp%55#0: bool = (! tmp%54#0)
        (assert tmp%55#0) // OnCompletion is not NoOp
        let tmp%56#0: uint64 = (txn ApplicationID)
        let tmp%57#0: bool = (!= tmp%56#0 0u)
        (assert tmp%56#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%58#0: bytes = ((extract 2 0) reinterpret_Encoded(len+utf8[])%2#0)
        let to_encode%1#0: string = test_cases.typed_abi_call.logger.Logger.echo_native_string(tmp%58#0)
        let length%0#0: uint64 = (len to_encode%1#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 to_encode%1#0)
        let tmp%59#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
        (log tmp%59#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#10: bool = 1u
        goto block@29
    block@14: // echo_native_bytes_route_L76
        let tmp%60#0: uint64 = (txn OnCompletion)
        let tmp%61#0: bool = (! tmp%60#0)
        (assert tmp%61#0) // OnCompletion is not NoOp
        let tmp%62#0: uint64 = (txn ApplicationID)
        let tmp%63#0: bool = (!= tmp%62#0 0u)
        (assert tmp%62#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%64#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%3#0)
        let to_encode%2#0: bytes = test_cases.typed_abi_call.logger.Logger.echo_native_bytes(tmp%64#0)
        let length%1#0: uint64 = (len to_encode%2#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 to_encode%2#0)
        let tmp%65#0: bytes = (concat 0x151f7c75 encoded_value%1#0)
        (log tmp%65#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#11: bool = 1u
        goto block@29
    block@15: // echo_native_uint64_route_L80
        let tmp%66#0: uint64 = (txn OnCompletion)
        let tmp%67#0: bool = (! tmp%66#0)
        (assert tmp%67#0) // OnCompletion is not NoOp
        let tmp%68#0: uint64 = (txn ApplicationID)
        let tmp%69#0: bool = (!= tmp%68#0 0u)
        (assert tmp%68#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%70#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let to_encode%3#0: uint64 = test_cases.typed_abi_call.logger.Logger.echo_native_uint64(tmp%70#0)
        let val_as_bytes%1#0: bytes[8] = (itob to_encode%3#0)
        let tmp%71#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
        (log tmp%71#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#12: bool = 1u
        goto block@29
    block@16: // echo_native_biguint_route_L84
        let tmp%72#0: uint64 = (txn OnCompletion)
        let tmp%73#0: bool = (! tmp%72#0)
        (assert tmp%73#0) // OnCompletion is not NoOp
        let tmp%74#0: uint64 = (txn ApplicationID)
        let tmp%75#0: bool = (!= tmp%74#0 0u)
        (assert tmp%74#0) // can only call when not creating
        let reinterpret_Encoded(uint512)%1#0: Encoded(uint512) = (txna ApplicationArgs 1)
        let to_encode%4#0: biguint = test_cases.typed_abi_call.logger.Logger.echo_native_biguint(reinterpret_Encoded(uint512)%1#0)
        let value_len%0#0: uint64 = (len to_encode%4#0)
        let len_ok%0#0: bool = (<= value_len%0#0 64u)
        (assert len_ok%0#0) // overflow
        let bzero%0#0: bytes = (bzero 64u)
        let arc4_encoded%0#0: bytes[64] = (b| to_encode%4#0 bzero%0#0)
        let tmp%76#0: bytes = (concat 0x151f7c75 arc4_encoded%0#0)
        (log tmp%76#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#13: bool = 1u
        goto block@29
    block@17: // echo_native_tuple_route_L88
        let tmp%77#0: uint64 = (txn OnCompletion)
        let tmp%78#0: bool = (! tmp%77#0)
        (assert tmp%78#0) // OnCompletion is not NoOp
        let tmp%79#0: uint64 = (txn ApplicationID)
        let tmp%80#0: bool = (!= tmp%79#0 0u)
        (assert tmp%79#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%81#0: bytes = ((extract 2 0) reinterpret_Encoded(len+utf8[])%3#0)
        let reinterpret_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%82#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%4#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%83#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let reinterpret_Encoded(uint512)%2#0: Encoded(uint512) = (txna ApplicationArgs 4)
        let (to_encode%5#0: string, to_encode%6#0: bytes, to_encode%7#0: uint64, to_encode%8#0: biguint) = test_cases.typed_abi_call.logger.Logger.echo_native_tuple(tmp%81#0, tmp%82#0, tmp%83#0, reinterpret_Encoded(uint512)%2#0)
        let length%2#0: uint64 = (len to_encode%5#0)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 to_encode%5#0)
        let data_length%0#0: uint64 = (len encoded_value%2#0)
        let current_tail_offset%0#0: uint64 = (+ 76u data_length%0#0)
        let as_bytes%3#0: bytes[8] = (itob 76u)
        let offset_as_uint16%0#0: bytes = 0x004c
        let encoded%0#0: Encoded((len+utf8[])) = 0x004c
        let length%3#0: uint64 = (len to_encode%6#0)
        let as_bytes%4#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 to_encode%6#0)
        let tail%1#0: bytes = (concat encoded_value%2#0 encoded_value%3#0)
        let as_bytes%5#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded%1#0: Encoded((len+utf8[],len+uint8[])) = (concat 0x004c offset_as_uint16%1#0)
        let val_as_bytes%2#0: bytes[8] = (itob to_encode%7#0)
        let encoded%2#0: Encoded((len+utf8[],len+uint8[],uint64)) = (concat encoded%1#0 val_as_bytes%2#0)
        let value_len%1#0: uint64 = (len to_encode%8#0)
        let len_ok%1#0: bool = (<= value_len%1#0 64u)
        (assert len_ok%1#0) // overflow
        let bzero%1#0: bytes = (bzero 64u)
        let arc4_encoded%1#0: bytes[64] = (b| to_encode%8#0 bzero%1#0)
        let encoded%3#0: Encoded((len+utf8[],len+uint8[],uint64,uint512)) = (concat encoded%2#0 arc4_encoded%1#0)
        let encoded%4#0: bytes = (concat encoded%3#0 tail%1#0)
        let tmp%84#0: bytes = (concat 0x151f7c75 encoded%4#0)
        (log tmp%84#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#14: bool = 1u
        goto block@29
    block@18: // echo_nested_tuple_route_L94
        let tmp%85#0: uint64 = (txn OnCompletion)
        let tmp%86#0: bool = (! tmp%85#0)
        (assert tmp%86#0) // OnCompletion is not NoOp
        let tmp%87#0: uint64 = (txn ApplicationID)
        let tmp%88#0: bool = (!= tmp%87#0 0u)
        (assert tmp%87#0) // can only call when not creating
        let reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0: Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[]))) = (txna ApplicationArgs 1)
        let item_start_offset%0#0: uint64 = (extract_uint16 reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0 2u)
        let encoded_item0%0#0: bytes = (substring3 reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item_start_offset%1#0: uint64 = (extract_uint16 encoded_item0%0#0 0u)
        let item_end_offset%1#0: uint64 = (extract_uint16 encoded_item0%0#0 2u)
        let encoded_item0%1#0: bytes = (substring3 encoded_item0%0#0 item_start_offset%1#0 item_end_offset%1#0)
        let item0%0#0: bytes = ((extract 2 0) encoded_item0%1#0)
        let item_end_offset%2#0: uint64 = (len encoded_item0%0#0)
        let item1%0#0: bytes = (substring3 encoded_item0%0#0 item_end_offset%1#0 item_end_offset%2#0)
        let item_end_offset%3#0: uint64 = (len reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0)
        let encoded_item1%0#0: bytes = (substring3 reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0 item_end_offset%0#0 item_end_offset%3#0)
        let encoded_item0%2#0: bytes = ((extract 0 8) encoded_item1%0#0) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (extract_uint64 encoded_item1%0#0 0u)
        let item1%1#0: bytes = ((extract 8 8) encoded_item1%0#0) // on error: Index access is out of bounds
        let item_start_offset%4#0: uint64 = (extract_uint16 encoded_item1%0#0 16u)
        let item_end_offset%4#0: uint64 = (len encoded_item1%0#0)
        let encoded_item2%0#0: bytes = (substring3 encoded_item1%0#0 item_start_offset%4#0 item_end_offset%4#0)
        let item2%0#0: bytes = ((extract 2 0) encoded_item2%0#0)
        let (to_encode%9#0: string, to_encode%10#0: Encoded(len+utf8[]), to_encode%11#0: uint64, to_encode%12#0: Encoded(uint64), to_encode%13#0: bytes) = test_cases.typed_abi_call.logger.Logger.echo_nested_tuple(item0%0#0, item1%0#0, item0%1#0, item1%1#0, item2%0#0)
        let length%4#0: uint64 = (len to_encode%9#0)
        let as_bytes%6#0: bytes[8] = (itob length%4#0)
        let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_value%4#0: bytes = (concat length_uint16%4#0 to_encode%9#0)
        let data_length%2#0: uint64 = (len encoded_value%4#0)
        let current_tail_offset%2#0: uint64 = (+ 4u data_length%2#0)
        let as_bytes%7#0: bytes[8] = (itob 4u)
        let offset_as_uint16%2#0: bytes = 0x0004
        let encoded%5#0: Encoded((len+utf8[])) = 0x0004
        let tail%3#0: bytes = (concat encoded_value%4#0 to_encode%10#0)
        let as_bytes%8#0: bytes[8] = (itob current_tail_offset%2#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded%6#0: Encoded((len+utf8[],len+utf8[])) = (concat 0x0004 offset_as_uint16%3#0)
        let encoded%7#0: bytes = (concat encoded%6#0 tail%3#0)
        let data_length%4#0: uint64 = (len encoded%7#0)
        let current_tail_offset%4#0: uint64 = (+ 4u data_length%4#0)
        let offset_as_uint16%4#0: bytes = 0x0004
        let encoded%8#0: Encoded(((len+utf8[],len+utf8[]))) = 0x0004
        let val_as_bytes%3#0: bytes[8] = (itob to_encode%11#0)
        let encoded%10#0: Encoded((uint64,uint64)) = (concat val_as_bytes%3#0 to_encode%12#0)
        let length%5#0: uint64 = (len to_encode%13#0)
        let as_bytes%10#0: bytes[8] = (itob length%5#0)
        let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%10#0)
        let encoded_value%5#0: bytes = (concat length_uint16%5#0 to_encode%13#0)
        let as_bytes%11#0: bytes[8] = (itob 18u)
        let offset_as_uint16%5#0: bytes = 0x0012
        let encoded%11#0: Encoded((uint64,uint64,len+uint8[])) = (concat encoded%10#0 0x0012)
        let encoded%12#0: bytes = (concat encoded%11#0 encoded_value%5#0)
        let tail%6#0: bytes = (concat encoded%7#0 encoded%12#0)
        let as_bytes%12#0: bytes[8] = (itob current_tail_offset%4#0)
        let offset_as_uint16%6#0: bytes = ((extract 6 2) as_bytes%12#0)
        let encoded%13#0: Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[]))) = (concat 0x0004 offset_as_uint16%6#0)
        let encoded%14#0: bytes = (concat encoded%13#0 tail%6#0)
        let tmp%89#0: bytes = (concat 0x151f7c75 encoded%14#0)
        (log tmp%89#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#15: bool = 1u
        goto block@29
    block@19: // return_args_after_14th_route_L105
        let tmp%90#0: uint64 = (txn OnCompletion)
        let tmp%91#0: bool = (! tmp%90#0)
        (assert tmp%91#0) // OnCompletion is not NoOp
        let tmp%92#0: uint64 = (txn ApplicationID)
        let tmp%93#0: bool = (!= tmp%92#0 0u)
        (assert tmp%92#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(uint64)%5#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let reinterpret_Encoded(uint64)%6#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let reinterpret_Encoded(uint64)%7#0: Encoded(uint64) = (txna ApplicationArgs 5)
        let reinterpret_Encoded(uint64)%8#0: Encoded(uint64) = (txna ApplicationArgs 6)
        let reinterpret_Encoded(uint64)%9#0: Encoded(uint64) = (txna ApplicationArgs 7)
        let reinterpret_Encoded(uint64)%10#0: Encoded(uint64) = (txna ApplicationArgs 8)
        let reinterpret_Encoded(uint64)%11#0: Encoded(uint64) = (txna ApplicationArgs 9)
        let reinterpret_Encoded(uint64)%12#0: Encoded(uint64) = (txna ApplicationArgs 10)
        let reinterpret_Encoded(uint64)%13#0: Encoded(uint64) = (txna ApplicationArgs 11)
        let reinterpret_Encoded(uint64)%14#0: Encoded(uint64) = (txna ApplicationArgs 12)
        let reinterpret_Encoded(uint64)%15#0: Encoded(uint64) = (txna ApplicationArgs 13)
        let reinterpret_Encoded(uint64)%16#0: Encoded(uint64) = (txna ApplicationArgs 14)
        let reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%0#0: Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)) = (txna ApplicationArgs 15)
        let tmp%94#0: bytes = ((extract 0 1) reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%0#0) // on error: Index access is out of bounds
        let reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%1#0: Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)) = (txna ApplicationArgs 15)
        let tmp%95#0: bytes = ((extract 1 1) reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%1#0) // on error: Index access is out of bounds
        let reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%2#0: Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)) = (txna ApplicationArgs 15)
        let tmp%96#0: bytes = ((extract 2 1) reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%2#0) // on error: Index access is out of bounds
        let reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%3#0: Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)) = (txna ApplicationArgs 15)
        let tmp%97#0: bytes = ((extract 3 1) reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%3#0) // on error: Index access is out of bounds
        let reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%4#0: Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)) = (txna ApplicationArgs 15)
        let tmp%98#0: bytes = ((extract 4 4) reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%4#0) // on error: Index access is out of bounds
        let reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%5#0: Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)) = (txna ApplicationArgs 15)
        let tmp%99#0: bytes = ((extract 8 1) reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%5#0) // on error: Index access is out of bounds
        let tmp%100#0: Encoded(len+uint8[]) = test_cases.typed_abi_call.logger.Logger.return_args_after_14th(reinterpret_Encoded(uint64)%3#0, reinterpret_Encoded(uint64)%4#0, reinterpret_Encoded(uint64)%5#0, reinterpret_Encoded(uint64)%6#0, reinterpret_Encoded(uint64)%7#0, reinterpret_Encoded(uint64)%8#0, reinterpret_Encoded(uint64)%9#0, reinterpret_Encoded(uint64)%10#0, reinterpret_Encoded(uint64)%11#0, reinterpret_Encoded(uint64)%12#0, reinterpret_Encoded(uint64)%13#0, reinterpret_Encoded(uint64)%14#0, reinterpret_Encoded(uint64)%15#0, reinterpret_Encoded(uint64)%16#0, tmp%94#0, tmp%95#0, tmp%96#0, tmp%97#0, tmp%98#0, tmp%99#0)
        let tmp%101#0: bytes = (concat 0x151f7c75 tmp%100#0)
        (log tmp%101#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#16: bool = 1u
        goto block@29
    block@20: // logs_are_equal_route_L133
        let tmp%102#0: uint64 = (txn OnCompletion)
        let tmp%103#0: bool = (! tmp%102#0)
        (assert tmp%103#0) // OnCompletion is not NoOp
        let tmp%104#0: uint64 = (txn ApplicationID)
        let tmp%105#0: bool = (!= tmp%104#0 0u)
        (assert tmp%104#0) // can only call when not creating
        let reinterpret_Encoded((uint64,len+utf8[]))%0#0: Encoded((uint64,len+utf8[])) = (txna ApplicationArgs 1)
        let encoded_item0%3#0: bytes = ((extract 0 8) reinterpret_Encoded((uint64,len+utf8[]))%0#0) // on error: Index access is out of bounds
        let item0%2#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,len+utf8[]))%0#0 0u)
        let item_start_offset%5#0: uint64 = (extract_uint16 reinterpret_Encoded((uint64,len+utf8[]))%0#0 8u)
        let item_end_offset%5#0: uint64 = (len reinterpret_Encoded((uint64,len+utf8[]))%0#0)
        let encoded_item1%1#0: bytes = (substring3 reinterpret_Encoded((uint64,len+utf8[]))%0#0 item_start_offset%5#0 item_end_offset%5#0)
        let item1%2#0: bytes = ((extract 2 0) encoded_item1%1#0)
        let reinterpret_Encoded((uint64,len+utf8[]))%1#0: Encoded((uint64,len+utf8[])) = (txna ApplicationArgs 2)
        let encoded_item0%4#0: bytes = ((extract 0 8) reinterpret_Encoded((uint64,len+utf8[]))%1#0) // on error: Index access is out of bounds
        let item0%3#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,len+utf8[]))%1#0 0u)
        let item_start_offset%6#0: uint64 = (extract_uint16 reinterpret_Encoded((uint64,len+utf8[]))%1#0 8u)
        let item_end_offset%6#0: uint64 = (len reinterpret_Encoded((uint64,len+utf8[]))%1#0)
        let encoded_item1%2#0: bytes = (substring3 reinterpret_Encoded((uint64,len+utf8[]))%1#0 item_start_offset%6#0 item_end_offset%6#0)
        let item1%3#0: bytes = ((extract 2 0) encoded_item1%2#0)
        let to_encode%14#0: bool = test_cases.typed_abi_call.logger.Logger.logs_are_equal(item0%2#0, item1%2#0, item0%3#0, item1%3#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u to_encode%14#0)
        let tmp%106#0: bytes = (concat 0x151f7c75 encoded_bool%0#0)
        (log tmp%106#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#17: bool = 1u
        goto block@29
    block@21: // echo_log_struct_route_L137
        let tmp%107#0: uint64 = (txn OnCompletion)
        let tmp%108#0: bool = (! tmp%107#0)
        (assert tmp%108#0) // OnCompletion is not NoOp
        let tmp%109#0: uint64 = (txn ApplicationID)
        let tmp%110#0: bool = (!= tmp%109#0 0u)
        (assert tmp%109#0) // can only call when not creating
        let reinterpret_Encoded((uint64,len+utf8[]))%2#0: Encoded((uint64,len+utf8[])) = (txna ApplicationArgs 1)
        let tmp%111#0: Encoded((uint64,len+utf8[])) = test_cases.typed_abi_call.logger.Logger.echo_log_struct(reinterpret_Encoded((uint64,len+utf8[]))%2#0)
        let tmp%112#0: bytes = (concat 0x151f7c75 tmp%111#0)
        (log tmp%112#0)
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#18: bool = 1u
        goto block@29
    block@24: // bare_routing_L30
        let tmp%113#0: uint64 = (txn OnCompletion)
        goto tmp%113#0 ? block@28 : block@25
    block@25: // __algopy_default_create_L1
        let tmp%114#0: uint64 = (txn ApplicationID)
        let tmp%115#0: bool = (! tmp%114#0)
        (assert tmp%115#0) // can only call when creating
        test_cases.typed_abi_call.logger.Logger.__algopy_default_create()
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#19: bool = 1u
        goto block@29
    block@28: // after_if_else_L30
        let test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#20: bool = 0u
        goto block@29
    block@29: // after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0 <- block@3, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#1 <- block@4, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#2 <- block@5, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#3 <- block@6, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#4 <- block@7, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#5 <- block@8, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#6 <- block@9, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#7 <- block@10, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#8 <- block@11, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#9 <- block@12, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#10 <- block@13, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#11 <- block@14, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#12 <- block@15, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#13 <- block@16, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#14 <- block@17, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#15 <- block@18, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#16 <- block@19, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#17 <- block@20, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#18 <- block@21, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#19 <- block@25, test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#20 <- block@28)
        return tmp%0#0

subroutine test_cases.typed_abi_call.logger.Logger.is_a_b(a: bytes, b: bytes) -> void:
    block@0: // L31
        let tmp%0#0: bool = (== a#0 0x61)
        (assert tmp%0#0) // a is not a
        let tmp%1#0: bool = (== b#0 0x62)
        (assert tmp%1#0) // b is not b
        return 

subroutine test_cases.typed_abi_call.logger.Logger.echo(value: Encoded(len+utf8[])) -> Encoded(len+utf8[]):
    block@0: // L36
        let expr_value_trimmed%0#0: bytes = 0x6563686f3a20
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) value#0)
        let concatenated%0#0: bytes = (concat 0x6563686f3a20 expr_value_trimmed%1#0)
        let len_%0#0: uint64 = (len concatenated%0#0)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        return concat_result%0#0

subroutine test_cases.typed_abi_call.logger.Logger.no_args() -> uint64:
    block@0: // L40
        return 42u

subroutine test_cases.typed_abi_call.logger.Logger.log_uint64(value: Encoded(uint64)) -> void:
    block@0: // L44
        (log value#0)
        return 

subroutine test_cases.typed_abi_call.logger.Logger.log_uint512(value: Encoded(uint512)) -> void:
    block@0: // L48
        (log value#0)
        return 

subroutine test_cases.typed_abi_call.logger.Logger.log_string(value: Encoded(len+utf8[])) -> void:
    block@0: // L52
        let tmp%0#0: bytes = ((extract 2 0) value#0)
        (log tmp%0#0)
        return 

subroutine test_cases.typed_abi_call.logger.Logger.log_bool(value: Encoded(bool8)) -> void:
    block@0: // L56
        let tmp%0#0: bool = (getbit value#0 0u)
        let select%0#0: bytes = (select 0x46616c7365 0x54727565 tmp%0#0)
        (log select%0#0)
        return 

subroutine test_cases.typed_abi_call.logger.Logger.log_bytes(value: Encoded(len+uint8[])) -> void:
    block@0: // L60
        let tmp%0#0: bytes = ((extract 2 0) value#0)
        (log tmp%0#0)
        return 

subroutine test_cases.typed_abi_call.logger.Logger.log_asset_account_app(asset: uint64, account: bytes[32], app: uint64) -> void:
    block@0: // L64
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
        (assert check%0#0) // asset exists
        let tmp%0#0: bytes = value%0#0
        let tmp%1#0: bytes = (concat value%0#0 account#0)
        let tmp%2#0: bytes = tmp%1#0
        let (value%1#0: bytes[32], check%1#0: bool) = ((app_params_get AppAddress) app#0)
        (assert check%1#0) // application exists
        let tmp%3#0: bytes = (concat tmp%1#0 value%1#0)
        (log tmp%3#0)
        return 

subroutine test_cases.typed_abi_call.logger.Logger.log_address(address: Encoded(uint8[32])) -> void:
    block@0: // L68
        (log address#0)
        return 

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_string(value: string) -> string:
    block@0: // L72
        let tmp%0#0: bytes = (concat "echo: " value#0)
        return tmp%0#0

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_bytes(value: bytes) -> bytes:
    block@0: // L76
        let tmp%0#0: bytes = (concat 0x6563686f3a20 value#0)
        return tmp%0#0

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_uint64(value: uint64) -> uint64:
    block@0: // L80
        let tmp%0#0: uint64 = (+ value#0 1u)
        return tmp%0#0

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_biguint(value: biguint) -> biguint:
    block@0: // L84
        let tmp%0#0: biguint = (b+ value#0 1b)
        return tmp%0#0

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_tuple(s: string, b: bytes, u: uint64, bu: biguint) -> <string, bytes, uint64, biguint>:
    block@0: // L88
        let tmp%0#0: bytes = (concat "echo: " s#0)
        let tmp%1#0: bytes = (concat 0x6563686f3a20 b#0)
        let tmp%2#0: uint64 = (+ u#0 1u)
        let tmp%3#0: biguint = (b+ bu#0 1b)
        return tmp%0#0 tmp%1#0 tmp%2#0 tmp%3#0

subroutine test_cases.typed_abi_call.logger.Logger.echo_nested_tuple(tuple_of_tuples.0.0: string, tuple_of_tuples.0.1: Encoded(len+utf8[]), tuple_of_tuples.1.0: uint64, tuple_of_tuples.1.1: Encoded(uint64), tuple_of_tuples.1.2: bytes) -> <string, Encoded(len+utf8[]), uint64, Encoded(uint64), bytes>:
    block@0: // L94
        let tmp%0#0: bytes = (concat "echo: " tuple_of_tuples.0.0#0)
        let expr_value_trimmed%0#0: bytes = 0x6563686f3a20
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) tuple_of_tuples.0.1#0)
        let concatenated%0#0: bytes = (concat 0x6563686f3a20 expr_value_trimmed%1#0)
        let len_%0#0: uint64 = (len concatenated%0#0)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let tmp%1#0: uint64 = (+ tuple_of_tuples.1.0#0 1u)
        let tmp%2#0: uint64 = (btoi tuple_of_tuples.1.1#0)
        let to_encode%0#0: uint64 = (+ tmp%2#0 1u)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%3#0: bytes = (concat 0x6563686f3a20 tuple_of_tuples.1.2#0)
        return tmp%0#0 concat_result%0#0 tmp%1#0 val_as_bytes%0#0 tmp%3#0

subroutine test_cases.typed_abi_call.logger.Logger.return_args_after_14th(_a1: Encoded(uint64), _a2: Encoded(uint64), _a3: Encoded(uint64), _a4: Encoded(uint64), _a5: Encoded(uint64), _a6: Encoded(uint64), _a7: Encoded(uint64), _a8: Encoded(uint64), _a9: Encoded(uint64), _a10: Encoded(uint64), _a11: Encoded(uint64), _a12: Encoded(uint64), _a13: Encoded(uint64), _a14: Encoded(uint64), a15: Encoded(uint8), a16: Encoded(uint8), a17: Encoded(uint8), a18: Encoded(uint8), a19: Encoded((uint8,uint8,uint8,uint8)), a20: Encoded(uint8)) -> Encoded(len+uint8[]):
    block@0: // L105
        let encoded%0#0: Encoded((uint8)) = a15#0
        let encoded%1#0: Encoded((uint8,uint8)) = (concat a15#0 a16#0)
        let encoded%2#0: Encoded((uint8,uint8,uint8)) = (concat encoded%1#0 a17#0)
        let encoded%3#0: Encoded((uint8,uint8,uint8,uint8)) = (concat encoded%2#0 a18#0)
        let encoded%4#0: Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8))) = (concat encoded%3#0 a19#0)
        let encoded%5#0: Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)) = (concat encoded%4#0 a20#0)
        let last_arg#0: Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)) = encoded%5#0
        let tmp%0#0: bytes = (txna ApplicationArgs 15)
        let tmp%1#0: bool = (== tmp%0#0 encoded%5#0)
        (assert tmp%1#0)
        let length%0#0: uint64 = (len encoded%5#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 encoded%5#0)
        return encoded_value%0#0

subroutine test_cases.typed_abi_call.logger.Logger.logs_are_equal(log_1.level: uint64, log_1.message: string, log_2.level: uint64, log_2.message: string) -> bool:
    block@0: // L133
        let tmp%0#0: bool = (== log_1.level#0 log_2.level#0)
        let tmp%1#0: bool = (== log_1.message#0 log_2.message#0)
        let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
        return tmp%2#0

subroutine test_cases.typed_abi_call.logger.Logger.echo_log_struct(log: Encoded((uint64,len+utf8[]))) -> Encoded((uint64,len+utf8[])):
    block@0: // L137
        return log#0

subroutine test_cases.typed_abi_call.logger.Logger.__algopy_default_create() -> void:
    block@0: // L1
        return 