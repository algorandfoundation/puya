main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@29
    block@2: // abi_routing_L31
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion is not NoOp
        let tmp%4#0: bool = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "is_a_b(byte[],byte[])void" => block@4, method "echo(string)string" => block@5, method "no_args()uint64" => block@6, method "log(uint64)void" => block@7, method "log(uint512)void" => block@8, method "log(string)void" => block@9, method "log(bool)void" => block@10, method "log(byte[])void" => block@11, method "log(uint64,address,uint64)void" => block@12, method "log(address)void" => block@13, method "echo_native_string(string)string" => block@14, method "echo_native_bytes(byte[])byte[]" => block@15, method "echo_native_uint64(uint64)uint64" => block@16, method "echo_native_biguint(uint512)uint512" => block@17, method "echo_resource_by_index(asset,application,account)(uint64,uint64,address)" => block@18, method "echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)" => block@19, method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)" => block@20, method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))" => block@21, method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]" => block@22, method "logs_are_equal((uint64,string),(uint64,string))bool" => block@23, method "echo_log_struct((uint64,string))(uint64,string)" => block@24, * => block@28}
    block@4: // is_a_b_route_L32
        test_cases.typed_abi_call.logger.Logger.is_a_b[routing]()
        goto block@28
    block@5: // echo_route_L37
        test_cases.typed_abi_call.logger.Logger.echo[routing]()
        goto block@28
    block@6: // no_args_route_L41
        test_cases.typed_abi_call.logger.Logger.no_args[routing]()
        goto block@28
    block@7: // log_route_L45
        test_cases.typed_abi_call.logger.Logger.log_uint64[routing]()
        goto block@28
    block@8: // log_route_L49
        test_cases.typed_abi_call.logger.Logger.log_uint512[routing]()
        goto block@28
    block@9: // log_route_L53
        test_cases.typed_abi_call.logger.Logger.log_string[routing]()
        goto block@28
    block@10: // log_route_L57
        test_cases.typed_abi_call.logger.Logger.log_bool[routing]()
        goto block@28
    block@11: // log_route_L61
        test_cases.typed_abi_call.logger.Logger.log_bytes[routing]()
        goto block@28
    block@12: // log_route_L65
        test_cases.typed_abi_call.logger.Logger.log_asset_account_app[routing]()
        goto block@28
    block@13: // log_route_L69
        test_cases.typed_abi_call.logger.Logger.log_address[routing]()
        goto block@28
    block@14: // echo_native_string_route_L73
        test_cases.typed_abi_call.logger.Logger.echo_native_string[routing]()
        goto block@28
    block@15: // echo_native_bytes_route_L77
        test_cases.typed_abi_call.logger.Logger.echo_native_bytes[routing]()
        goto block@28
    block@16: // echo_native_uint64_route_L81
        test_cases.typed_abi_call.logger.Logger.echo_native_uint64[routing]()
        goto block@28
    block@17: // echo_native_biguint_route_L85
        test_cases.typed_abi_call.logger.Logger.echo_native_biguint[routing]()
        goto block@28
    block@18: // echo_resource_by_index_route_L89
        test_cases.typed_abi_call.logger.Logger.echo_resource_by_index[routing]()
        goto block@28
    block@19: // echo_resource_by_value_route_L103
        test_cases.typed_abi_call.logger.Logger.echo_resource_by_value[routing]()
        goto block@28
    block@20: // echo_native_tuple_route_L117
        test_cases.typed_abi_call.logger.Logger.echo_native_tuple[routing]()
        goto block@28
    block@21: // echo_nested_tuple_route_L123
        test_cases.typed_abi_call.logger.Logger.echo_nested_tuple[routing]()
        goto block@28
    block@22: // return_args_after_14th_route_L134
        test_cases.typed_abi_call.logger.Logger.return_args_after_14th[routing]()
        goto block@28
    block@23: // logs_are_equal_route_L162
        test_cases.typed_abi_call.logger.Logger.logs_are_equal[routing]()
        goto block@28
    block@24: // echo_log_struct_route_L166
        test_cases.typed_abi_call.logger.Logger.echo_log_struct[routing]()
        goto block@28
    block@28: // after_if_else_L31
        fail
    block@29: // __algopy_default_create_L1
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (! tmp%6#0)
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: bool = (&& tmp%7#0 tmp%9#0)
        (assert tmp%10#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.is_a_b[routing]() -> void:
    block@0: // L32
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let a#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%1#0)
        let tmp%0#1: bool = (== a#0 0x61)
        (assert tmp%0#1) // a is not a
        let tmp%1#1: bool = (== b#0 0x62)
        (assert tmp%1#1) // b is not b
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo[routing]() -> void:
    block@0: // L37
        let value#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%0#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("echo: ")
        let extract_to_end%0#0: bytes = ((extract 2 0) value#0)
        let concat%0#0: Encoded(len+utf8[]) = (concat tmp%0#1 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let as_bytes%0#0: bytes[8] = (itob len%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 replace%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.no_args[routing]() -> void:
    block@0: // L41
        let tmp%1#0: Encoded(uint64) = bytes_encode<uint64>(42u)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_uint64[routing]() -> void:
    block@0: // L45
        let value#0: Encoded(uint64) = (txna ApplicationArgs 1)
        (log value#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_uint512[routing]() -> void:
    block@0: // L49
        let value#0: Encoded(uint512) = (txna ApplicationArgs 1)
        (log value#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_string[routing]() -> void:
    block@0: // L53
        let value#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: string = decode_bytes<string>(value#0)
        (log tmp%0#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_bool[routing]() -> void:
    block@0: // L57
        let value#0: Encoded(bool8) = (txna ApplicationArgs 1)
        let tmp%0#0: bool = decode_bytes<bool>(value#0)
        let select%0#0: bytes = (select 0x46616c7365 0x54727565 tmp%0#0)
        (log select%0#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_bytes[routing]() -> void:
    block@0: // L61
        let value#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = decode_bytes<bytes>(value#0)
        (log tmp%0#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_asset_account_app[routing]() -> void:
    block@0: // L65
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 2)
        let account#0: account = decode_bytes<account>(reinterpret_Encoded(uint8[32])%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let app#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
        (assert check%0#0) // asset exists
        let tmp%1#1: bytes = (concat value%0#0 account#0)
        let (value%1#0: account, check%1#0: bool) = ((app_params_get AppAddress) app#0)
        (assert check%1#0) // application exists
        let tmp%3#0: bytes = (concat tmp%1#1 value%1#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_address[routing]() -> void:
    block@0: // L69
        let address#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        (log address#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_string[routing]() -> void:
    block@0: // L73
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let value#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%0#1: bytes = (concat "echo: " value#0)
        let tmp%2#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(tmp%0#1)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_bytes[routing]() -> void:
    block@0: // L77
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let value#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%0#1: bytes = (concat 0x6563686f3a20 value#0)
        let tmp%2#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%0#1)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_uint64[routing]() -> void:
    block@0: // L81
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let value#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let tmp%0#1: uint64 = (+ value#0 1u)
        let tmp%2#0: Encoded(uint64) = bytes_encode<uint64>(tmp%0#1)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_biguint[routing]() -> void:
    block@0: // L85
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = (txna ApplicationArgs 1)
        let value#0: biguint = decode_bytes<biguint>(reinterpret_Encoded(uint512)%0#0)
        let tmp%0#1: biguint = (b+ value#0 1b)
        let tmp%2#0: Encoded(uint512) = bytes_encode<uint512>(tmp%0#1)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_resource_by_index[routing]() -> void:
    block@0: // L89
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let asset#0: uint64 = ((txnas Assets) tmp%0#0)
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%2#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let app#0: uint64 = ((txnas Applications) tmp%2#0)
        let reinterpret_Encoded(uint8)%2#0: Encoded(uint8) = (txna ApplicationArgs 3)
        let tmp%4#0: uint64 = (btoi reinterpret_Encoded(uint8)%2#0)
        let acc#0: account = ((txnas Accounts) tmp%4#0)
        let tmp%0#1: bytes = (txna ApplicationArgs 1)
        let asset_idx#0: uint64 = (btoi tmp%0#1)
        let tmp%2#1: uint64 = ((txnas Assets) asset_idx#0)
        let tmp%3#1: bool = (== asset#0 tmp%2#1)
        (assert tmp%3#1) // expected asset to be passed by index
        let tmp%4#1: bytes = (txna ApplicationArgs 2)
        let app_idx#0: uint64 = (btoi tmp%4#1)
        let tmp%6#1: uint64 = ((txnas Applications) app_idx#0)
        let tmp%7#1: bool = (== app#0 tmp%6#1)
        (assert tmp%7#1) // expected application to be passed by index
        let tmp%8#1: bytes = (txna ApplicationArgs 3)
        let acc_idx#0: uint64 = (btoi tmp%8#1)
        let tmp%10#1: account = ((txnas Accounts) acc_idx#0)
        let tmp%11#0: bool = (== acc#0 tmp%10#1)
        (assert tmp%11#0) // expected account to be passed by index
        let tmp%9#0: Encoded(uint64,uint64,uint8[32]) = bytes_encode<(uint64,uint64,uint8[32])>(asset#0, app#0, acc#0)
        let tmp%10#0: bytes = (concat 0x151f7c75 tmp%9#0)
        (log tmp%10#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_resource_by_value[routing]() -> void:
    block@0: // L103
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let app#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 3)
        let acc#0: account = decode_bytes<account>(reinterpret_Encoded(uint8[32])%0#0)
        let tmp%0#1: bytes = (txna ApplicationArgs 1)
        let asset_id#0: uint64 = (btoi tmp%0#1)
        let tmp%2#1: bool = (== asset#0 asset_id#0)
        (assert tmp%2#1) // expected asset to be passed by value
        let tmp%3#1: bytes = (txna ApplicationArgs 2)
        let app_id#0: uint64 = (btoi tmp%3#1)
        let tmp%5#1: bool = (== app#0 app_id#0)
        (assert tmp%5#1) // expected application to be passed by value
        let address#0: bytes = (txna ApplicationArgs 3)
        let tmp%7#1: bool = (== acc#0 address#0)
        (assert tmp%7#1) // expected account to be passed by value
        let tmp%6#0: Encoded(uint64,uint64,uint8[32]) = bytes_encode<(uint64,uint64,uint8[32])>(asset#0, app#0, acc#0)
        let tmp%7#0: bytes = (concat 0x151f7c75 tmp%6#0)
        (log tmp%7#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_tuple[routing]() -> void:
    block@0: // L117
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let s#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let u#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = (txna ApplicationArgs 4)
        let bu#0: biguint = decode_bytes<biguint>(reinterpret_Encoded(uint512)%0#0)
        let tmp%0#1: bytes = (concat "echo: " s#0)
        let tmp%1#1: bytes = (concat 0x6563686f3a20 b#0)
        let tmp%2#1: uint64 = (+ u#0 1u)
        let tmp%3#1: biguint = (b+ bu#0 1b)
        let tmp%8#0: Encoded((len+utf8[]),(len+uint8[]),uint64,uint512) = bytes_encode<((len+utf8[]),(len+uint8[]),uint64,uint512)>(tmp%0#1, tmp%1#1, tmp%2#1, tmp%3#1)
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_nested_tuple[routing]() -> void:
    block@0: // L123
        let reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = (txna ApplicationArgs 1)
        let (tuple_of_tuples.0.0#0: string, tuple_of_tuples.0.1#0: Encoded(len+utf8[]), tuple_of_tuples.1.0#0: uint64, tuple_of_tuples.1.1#0: Encoded(uint64), tuple_of_tuples.1.2#0: bytes) = decode_bytes<((string,Encoded(len+utf8[]),),(uint64,Encoded(uint64),bytes,),)>(reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0)
        let tmp%0#1: bytes = (concat "echo: " tuple_of_tuples.0.0#0)
        let tmp%1#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("echo: ")
        let extract_to_end%0#0: bytes = ((extract 2 0) tuple_of_tuples.0.1#0)
        let concat%0#0: Encoded(len+utf8[]) = (concat tmp%1#1 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let as_bytes%0#0: bytes[8] = (itob len%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let tmp%2#1: uint64 = (+ tuple_of_tuples.1.0#0 1u)
        let tmp%3#1: uint64 = decode_bytes<uint64>(tuple_of_tuples.1.1#0)
        let tmp%4#1: uint64 = (+ tmp%3#1 1u)
        let tmp%5#1: Encoded(uint64) = bytes_encode<uint64>(tmp%4#1)
        let tmp%6#1: bytes = (concat 0x6563686f3a20 tuple_of_tuples.1.2#0)
        let tmp%10#0: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = bytes_encode<(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))>(tmp%0#1, replace%0#0, tmp%2#1, tmp%5#1, tmp%6#1)
        let tmp%11#0: bytes = (concat 0x151f7c75 tmp%10#0)
        (log tmp%11#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.return_args_after_14th[routing]() -> void:
    block@0: // L134
        let reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (txna ApplicationArgs 15)
        let a15#0: Encoded(uint8) = extract_value(reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0, 0)
        let reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%1#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (txna ApplicationArgs 15)
        let a16#0: Encoded(uint8) = extract_value(reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%1#0, 1)
        let reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (txna ApplicationArgs 15)
        let a17#0: Encoded(uint8) = extract_value(reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0, 2)
        let reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (txna ApplicationArgs 15)
        let a18#0: Encoded(uint8) = extract_value(reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0, 3)
        let reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (txna ApplicationArgs 15)
        let a19#0: Encoded(uint8,uint8,uint8,uint8) = extract_value(reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0, 4)
        let reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = (txna ApplicationArgs 15)
        let a20#0: Encoded(uint8) = extract_value(reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0, 5)
        let last_arg#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = bytes_encode<(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)>(a15#0, a16#0, a17#0, a18#0, a19#0, a20#0)
        let tmp%1#1: bytes = (txna ApplicationArgs 15)
        let tmp%2#0: bool = (== tmp%1#1 last_arg#0)
        (assert tmp%2#0)
        let tmp%3#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(last_arg#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.logs_are_equal[routing]() -> void:
    block@0: // L162
        let reinterpret_Encoded(uint64,(len+utf8[]))%0#0: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 1)
        let (log_1.level#0: uint64, log_1.message#0: string) = decode_bytes<(uint64,string,)>(reinterpret_Encoded(uint64,(len+utf8[]))%0#0)
        let reinterpret_Encoded(uint64,(len+utf8[]))%1#0: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 2)
        let (log_2.level#0: uint64, log_2.message#0: string) = decode_bytes<(uint64,string,)>(reinterpret_Encoded(uint64,(len+utf8[]))%1#0)
        let tmp%0#1: bool = (== log_1.level#0 log_2.level#0)
        let tmp%1#1: bool = (== log_1.message#0 log_2.message#0)
        let tmp%2#1: bool = (&& tmp%0#1 tmp%1#1)
        let tmp%5#0: Encoded(bool8) = bytes_encode<bool8>(tmp%2#1)
        let tmp%6#0: bytes = (concat 0x151f7c75 tmp%5#0)
        (log tmp%6#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_log_struct[routing]() -> void:
    block@0: // L166
        let log#0: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 1)
        let tmp%1#0: bytes = (concat 0x151f7c75 log#0)
        (log tmp%1#0)
        exit 1u