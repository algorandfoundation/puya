{
    "name": "Logger",
    "structs": {
        "LogMessage": [
            {
                "name": "level",
                "type": "uint64"
            },
            {
                "name": "message",
                "type": "string"
            }
        ],
        "LogStruct": [
            {
                "name": "level",
                "type": "uint64"
            },
            {
                "name": "message",
                "type": "string"
            }
        ]
    },
    "methods": [
        {
            "name": "is_a_b",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo",
            "args": [
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "no_args",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "uint512",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "bool",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "byte[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "account",
                    "name": "account"
                },
                {
                    "type": "application",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "address",
                    "name": "address"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_native_string",
            "args": [
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_native_bytes",
            "args": [
                {
                    "type": "byte[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_native_uint64",
            "args": [
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_native_biguint",
            "args": [
                {
                    "type": "uint512",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "uint512"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_native_tuple",
            "args": [
                {
                    "type": "string",
                    "name": "s"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "u"
                },
                {
                    "type": "uint512",
                    "name": "bu"
                }
            ],
            "returns": {
                "type": "(string,byte[],uint64,uint512)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_nested_tuple",
            "args": [
                {
                    "type": "((string,string),(uint64,uint64,byte[]))",
                    "name": "tuple_of_tuples"
                }
            ],
            "returns": {
                "type": "((string,string),(uint64,uint64,byte[]))"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "return_args_after_14th",
            "args": [
                {
                    "type": "uint64",
                    "name": "_a1"
                },
                {
                    "type": "uint64",
                    "name": "_a2"
                },
                {
                    "type": "uint64",
                    "name": "_a3"
                },
                {
                    "type": "uint64",
                    "name": "_a4"
                },
                {
                    "type": "uint64",
                    "name": "_a5"
                },
                {
                    "type": "uint64",
                    "name": "_a6"
                },
                {
                    "type": "uint64",
                    "name": "_a7"
                },
                {
                    "type": "uint64",
                    "name": "_a8"
                },
                {
                    "type": "uint64",
                    "name": "_a9"
                },
                {
                    "type": "uint64",
                    "name": "_a10"
                },
                {
                    "type": "uint64",
                    "name": "_a11"
                },
                {
                    "type": "uint64",
                    "name": "_a12"
                },
                {
                    "type": "uint64",
                    "name": "_a13"
                },
                {
                    "type": "uint64",
                    "name": "_a14"
                },
                {
                    "type": "uint8",
                    "name": "a15"
                },
                {
                    "type": "uint8",
                    "name": "a16"
                },
                {
                    "type": "uint8",
                    "name": "a17"
                },
                {
                    "type": "uint8",
                    "name": "a18"
                },
                {
                    "type": "(uint8,uint8,uint8,uint8)",
                    "name": "a19"
                },
                {
                    "type": "uint8",
                    "name": "a20"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "logs_are_equal",
            "args": [
                {
                    "type": "(uint64,string)",
                    "struct": "LogMessage",
                    "name": "log_1"
                },
                {
                    "type": "(uint64,string)",
                    "struct": "LogMessage",
                    "name": "log_2"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_log_struct",
            "args": [
                {
                    "type": "(uint64,string)",
                    "struct": "LogStruct",
                    "name": "log"
                }
            ],
            "returns": {
                "type": "(uint64,string)",
                "struct": "LogStruct"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        183,
                        198,
                        263,
                        357,
                        525,
                        618,
                        645,
                        666,
                        696,
                        726,
                        741,
                        771,
                        786,
                        801,
                        816,
                        831,
                        846,
                        870,
                        889
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        930
                    ],
                    "errorMessage": "a is not a"
                },
                {
                    "pc": [
                        1036
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        1028
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        937
                    ],
                    "errorMessage": "b is not b"
                },
                {
                    "pc": [
                        918
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        186,
                        201,
                        266,
                        360,
                        528,
                        621,
                        648,
                        669,
                        699,
                        729,
                        744,
                        774,
                        789,
                        804,
                        819,
                        834,
                        849,
                        873,
                        892
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        949,
                        1117
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        600,
                        632
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQBACCYEBBUffHUGZWNobzogAgAECAAGZWNobzogMRtBA2iCEwTHchK8BJv4GRMEuGLuGQQ8EFjZBGr0WTAEtLQzTgRu7X7DBLUA4REEzXJ7cQQEN7F+BEpETHcEJlnoGASp+2zxBNjMNjsEFuA5GQSrJxzkBLoLQ4EE3dBxhQTcTxmSNhoAjhMCxAKxApkCigJ7AmwCXQJOAjACIQIDAeUB0AG1AVgAsABSABEAAiNDMRkURDEYRCg2GgFQsCJDMRkURDEYRDYaAUkjW0sBJVlLAhVPA04CUlcCADYaAkkjW0sBJVlLAhVPA04CUlcCAIgDpYABACNPAlQoTFCwIkMxGRREMRhENhoBNhoCNhoDNhoENhoFNhoGNhoHNhoINhoJNhoKNhoLNhoMNhoNNhoONhoPVwABNhoPVwEBNhoPVwIBNhoPVwMBNhoPVwQENhoPVwgBiAMcKExQsCJDMRkURDEYRDYaAUkjWUsBgQJZSwJPAksCUkkjWUsBgQJZSwJPAksCUlcCAEsCFU8DTwNPAlJLAxVPBE8ETwJSSSNbSwFXCAhLAoEQWUsDFU8ETgJSVwIAiAKTSwQVFlcGAk8FUEkVgQQITE8FUEwWVwYCKkxQTFBJFYEECE8EFk8EUEsDFRZXBgJPBFBMgAIAElBMUE8CTFBMFlcGAipMUExQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaAxc2GgSIAhJLAxUWVwYCTwRQSRWBTAhLBBUWVwYCTwVQTwJMUEwWVwYCgAIATExQTwMWUEsCFSQORCSvTwOrUExQKExQsCJDMRkURDEYRDYaAYgBu0kVJA5EJK+rKExQsCJDMRkURDEYRDYaAReIAZcWKExQsCJDMRkURDEYRDYaAVcCAIgBeEkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCAIgBUkkVFlcGAkxQKExQsCJDMRkURDEYRDYaAYgBMCJDMRkURDEYRDYaARfAMDYaAhfAHDYaAxfAMogA/yJDMRkURDEYRDYaAYgA5iJDMRkURDEYRDYaAYgAviJDMRkURDEYRDYaAYgApSJDMRkURDEYRDYaAYgAjyJDMRkURDEYRDYaAYgAeSJDMRkURDEYRIAMFR98dQAAAAAAAAAqsCJDMRkURDEYRDYaAYgAOyhMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgCIAA0iQzEZQP0fMRgURCJDigIAi/6AAWESRIv/gAFiEkSJigEBi/9XAgArTFBJVwIAFRZXBgJcAImKAQCL/7CJigEAi/+wiYoBAIv/VwIAsImKAQCL/yNTggIFRmFsc2UEVHJ1ZU8CTbCJigEAi/9XAgCwiYoDAIv9cQREi/5Qi/9yCERQsImKAQCL/7CJigEBKYv/UImKAQEpi/9QiYoBAYv/IgiJigEBi/+AAQGgiYoEBCmL/FApi/1Qi/4iCIv/gAEBoImKBQUpi/tQi/xXAgArTFBJVwIAFRZXBgJcAIv9IgiL/hciCBYpi/9QiYoUAYv6i/tQi/xQi/1Qi/5Qi/9QNhoPSwESREkVFlcGAkxQiYoEAYv8i/4Si/2L/xIQiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}