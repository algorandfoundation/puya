{
    "name": "Logger",
    "structs": {
        "LogMessage": [
            {
                "name": "level",
                "type": "uint64"
            },
            {
                "name": "message",
                "type": "string"
            }
        ]
    },
    "methods": [
        {
            "name": "is_a_b",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo",
            "args": [
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "no_args",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "uint512",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "bool",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "byte[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "account",
                    "name": "account"
                },
                {
                    "type": "application",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_native_string",
            "args": [
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_native_bytes",
            "args": [
                {
                    "type": "byte[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_native_uint64",
            "args": [
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_native_biguint",
            "args": [
                {
                    "type": "uint512",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "uint512"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_native_tuple",
            "args": [
                {
                    "type": "string",
                    "name": "s"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "u"
                },
                {
                    "type": "uint512",
                    "name": "bu"
                }
            ],
            "returns": {
                "type": "(string,byte[],uint64,uint512)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_nested_tuple",
            "args": [
                {
                    "type": "((string,string),(uint64,uint64,byte[]))",
                    "name": "tuple_of_tuples"
                }
            ],
            "returns": {
                "type": "((string,string),(uint64,uint64,byte[]))"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "return_args_after_14th",
            "args": [
                {
                    "type": "uint64",
                    "name": "_a1"
                },
                {
                    "type": "uint64",
                    "name": "_a2"
                },
                {
                    "type": "uint64",
                    "name": "_a3"
                },
                {
                    "type": "uint64",
                    "name": "_a4"
                },
                {
                    "type": "uint64",
                    "name": "_a5"
                },
                {
                    "type": "uint64",
                    "name": "_a6"
                },
                {
                    "type": "uint64",
                    "name": "_a7"
                },
                {
                    "type": "uint64",
                    "name": "_a8"
                },
                {
                    "type": "uint64",
                    "name": "_a9"
                },
                {
                    "type": "uint64",
                    "name": "_a10"
                },
                {
                    "type": "uint64",
                    "name": "_a11"
                },
                {
                    "type": "uint64",
                    "name": "_a12"
                },
                {
                    "type": "uint64",
                    "name": "_a13"
                },
                {
                    "type": "uint64",
                    "name": "_a14"
                },
                {
                    "type": "uint8",
                    "name": "a15"
                },
                {
                    "type": "uint8",
                    "name": "a16"
                },
                {
                    "type": "uint8",
                    "name": "a17"
                },
                {
                    "type": "uint8",
                    "name": "a18"
                },
                {
                    "type": "(uint8,uint8,uint8,uint8)",
                    "name": "a19"
                },
                {
                    "type": "uint8",
                    "name": "a20"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "logs_are_equal",
            "args": [
                {
                    "type": "(uint64,string)",
                    "struct": "LogMessage",
                    "name": "log_1"
                },
                {
                    "type": "(uint64,string)",
                    "struct": "LogMessage",
                    "name": "log_2"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        170,
                        193,
                        280,
                        286,
                        292,
                        298,
                        304,
                        310,
                        386,
                        392
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        162,
                        231,
                        325,
                        492,
                        587,
                        614,
                        635,
                        665,
                        695,
                        725,
                        740,
                        755,
                        770,
                        785,
                        800,
                        824,
                        843
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        884
                    ],
                    "errorMessage": "a is not a"
                },
                {
                    "pc": [
                        987
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        979
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        891
                    ],
                    "errorMessage": "b is not b"
                },
                {
                    "pc": [
                        872
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        165,
                        234,
                        328,
                        495,
                        590,
                        617,
                        638,
                        668,
                        698,
                        728,
                        743,
                        758,
                        773,
                        788,
                        803,
                        827,
                        846
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        546,
                        601
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAxIDAgNjQgOAogICAgYnl0ZWNibG9jayAweDE1MWY3Yzc1IDB4NjU2MzY4NmYzYTIwIDB4MDAwNCAweDAxCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6MjUKICAgIC8vIGNsYXNzIExvZ2dlcihBUkM0Q29udHJhY3QpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDIyCiAgICBwdXNoYnl0ZXNzIDB4Yzc3MjEyYmMgMHg5YmY4MTkxMyAweGI4NjJlZTE5IDB4M2MxMDU4ZDkgMHg2YWY0NTkzMCAweGI0YjQzMzRlIDB4NmVlZDdlYzMgMHhiNTAwZTExMSAweGNkNzI3YjcxIDB4NGE0NDRjNzcgMHgyNjU5ZTgxOCAweGE5ZmI2Y2YxIDB4ZDhjYzM2M2IgMHgxNmUwMzkxOSAweGFiMjcxY2U0IDB4YmEwYjQzODEgMHhkZGQwNzE4NSAvLyBtZXRob2QgImlzX2FfYihieXRlW10sYnl0ZVtdKXZvaWQiLCBtZXRob2QgImVjaG8oc3RyaW5nKXN0cmluZyIsIG1ldGhvZCAibm9fYXJncygpdWludDY0IiwgbWV0aG9kICJsb2codWludDY0KXZvaWQiLCBtZXRob2QgImxvZyh1aW50NTEyKXZvaWQiLCBtZXRob2QgImxvZyhzdHJpbmcpdm9pZCIsIG1ldGhvZCAibG9nKGJvb2wpdm9pZCIsIG1ldGhvZCAibG9nKGJ5dGVbXSl2b2lkIiwgbWV0aG9kICJsb2coYXNzZXQsYWNjb3VudCxhcHBsaWNhdGlvbil2b2lkIiwgbWV0aG9kICJlY2hvX25hdGl2ZV9zdHJpbmcoc3RyaW5nKXN0cmluZyIsIG1ldGhvZCAiZWNob19uYXRpdmVfYnl0ZXMoYnl0ZVtdKWJ5dGVbXSIsIG1ldGhvZCAiZWNob19uYXRpdmVfdWludDY0KHVpbnQ2NCl1aW50NjQiLCBtZXRob2QgImVjaG9fbmF0aXZlX2JpZ3VpbnQodWludDUxMil1aW50NTEyIiwgbWV0aG9kICJlY2hvX25hdGl2ZV90dXBsZShzdHJpbmcsYnl0ZVtdLHVpbnQ2NCx1aW50NTEyKShzdHJpbmcsYnl0ZVtdLHVpbnQ2NCx1aW50NTEyKSIsIG1ldGhvZCAiZWNob19uZXN0ZWRfdHVwbGUoKChzdHJpbmcsc3RyaW5nKSwodWludDY0LHVpbnQ2NCxieXRlW10pKSkoKHN0cmluZyxzdHJpbmcpLCh1aW50NjQsdWludDY0LGJ5dGVbXSkpIiwgbWV0aG9kICJyZXR1cm5fYXJnc19hZnRlcl8xNHRoKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDgsdWludDgsdWludDgsdWludDgsKHVpbnQ4LHVpbnQ4LHVpbnQ4LHVpbnQ4KSx1aW50OClieXRlW10iLCBtZXRob2QgImxvZ3NfYXJlX2VxdWFsKCh1aW50NjQsc3RyaW5nKSwodWludDY0LHN0cmluZykpYm9vbCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5faXNfYV9iX3JvdXRlQDMgbWFpbl9lY2hvX3JvdXRlQDQgbWFpbl9ub19hcmdzX3JvdXRlQDUgbWFpbl9sb2dfcm91dGVANiBtYWluX2xvZ19yb3V0ZUA3IG1haW5fbG9nX3JvdXRlQDggbWFpbl9sb2dfcm91dGVAOSBtYWluX2xvZ19yb3V0ZUAxMCBtYWluX2xvZ19yb3V0ZUAxMSBtYWluX2VjaG9fbmF0aXZlX3N0cmluZ19yb3V0ZUAxMiBtYWluX2VjaG9fbmF0aXZlX2J5dGVzX3JvdXRlQDEzIG1haW5fZWNob19uYXRpdmVfdWludDY0X3JvdXRlQDE0IG1haW5fZWNob19uYXRpdmVfYmlndWludF9yb3V0ZUAxNSBtYWluX2VjaG9fbmF0aXZlX3R1cGxlX3JvdXRlQDE2IG1haW5fZWNob19uZXN0ZWRfdHVwbGVfcm91dGVAMTcgbWFpbl9yZXR1cm5fYXJnc19hZnRlcl8xNHRoX3JvdXRlQDE4IG1haW5fbG9nc19hcmVfZXF1YWxfcm91dGVAMTkKCm1haW5fYWZ0ZXJfaWZfZWxzZUAyNjoKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weToyNQogICAgLy8gY2xhc3MgTG9nZ2VyKEFSQzRDb250cmFjdCk6CiAgICBpbnRjXzEgLy8gMAogICAgcmV0dXJuCgptYWluX2xvZ3NfYXJlX2VxdWFsX3JvdXRlQDE5OgogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjEyNAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weToyNQogICAgLy8gY2xhc3MgTG9nZ2VyKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBkdXAKICAgIGV4dHJhY3QgMCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgZGlnIDEKICAgIGludGNfMyAvLyA4CiAgICBleHRyYWN0X3VpbnQxNgogICAgZGlnIDIKICAgIGxlbgogICAgdW5jb3ZlciAzCiAgICBjb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgZHVwCiAgICBleHRyYWN0IDAgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGRpZyAxCiAgICBpbnRjXzMgLy8gOAogICAgZXh0cmFjdF91aW50MTYKICAgIGRpZyAyCiAgICBsZW4KICAgIHVuY292ZXIgMwogICAgY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgZXh0cmFjdCAyIDAKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weToxMjQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBsb2dzX2FyZV9lcXVhbAogICAgcHVzaGJ5dGVzIDB4MDAKICAgIGludGNfMSAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9yZXR1cm5fYXJnc19hZnRlcl8xNHRoX3JvdXRlQDE4OgogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5Ojk2CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjI1CiAgICAvLyBjbGFzcyBMb2dnZXIoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDUKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDYKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDcKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDgKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDkKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMTIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxNAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMTUKICAgIGV4dHJhY3QgMCAxIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMTUKICAgIGV4dHJhY3QgMSAxIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMTUKICAgIGV4dHJhY3QgMiAxIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMTUKICAgIGV4dHJhY3QgMyAxIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMTUKICAgIGV4dHJhY3QgNCA0IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMTUKICAgIGV4dHJhY3QgOCAxIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5Ojk2CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgcmV0dXJuX2FyZ3NfYWZ0ZXJfMTR0aAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9lY2hvX25lc3RlZF90dXBsZV9yb3V0ZUAxNzoKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo4NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weToyNQogICAgLy8gY2xhc3MgTG9nZ2VyKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBkdXAKICAgIGludGNfMSAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZGlnIDEKICAgIHB1c2hpbnQgMiAvLyAyCiAgICBleHRyYWN0X3VpbnQxNgogICAgZGlnIDIKICAgIHVuY292ZXIgMgogICAgZGlnIDIKICAgIHN1YnN0cmluZzMKICAgIGR1cAogICAgaW50Y18xIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBkaWcgMQogICAgcHVzaGludCAyIC8vIDIKICAgIGV4dHJhY3RfdWludDE2CiAgICBkaWcgMgogICAgdW5jb3ZlciAyCiAgICBkaWcgMgogICAgc3Vic3RyaW5nMwogICAgZXh0cmFjdCAyIDAKICAgIGRpZyAyCiAgICBsZW4KICAgIHVuY292ZXIgMwogICAgdW5jb3ZlciAzCiAgICB1bmNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgIGRpZyAzCiAgICBsZW4KICAgIHVuY292ZXIgNAogICAgdW5jb3ZlciA0CiAgICB1bmNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgIGR1cAogICAgZXh0cmFjdCAwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBkaWcgMQogICAgZXh0cmFjdCA4IDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBkaWcgMgogICAgcHVzaGludCAxNiAvLyAxNgogICAgZXh0cmFjdF91aW50MTYKICAgIGRpZyAzCiAgICBsZW4KICAgIHVuY292ZXIgNAogICAgY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgZXh0cmFjdCAyIDAKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo4NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGVjaG9fbmVzdGVkX3R1cGxlCiAgICBkaWcgNAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciA1CiAgICBjb25jYXQKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDQgLy8gNAogICAgKwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGJ5dGVjXzIgLy8gMHgwMDA0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgdW5jb3ZlciA0CiAgICBjb25jYXQKICAgIHVuY292ZXIgMwogICAgaXRvYgogICAgZGlnIDIKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHVuY292ZXIgMwogICAgY29uY2F0CiAgICBzd2FwCiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzIDB4MDAxMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGRpZyAxCiAgICBsZW4KICAgIHB1c2hpbnQgNCAvLyA0CiAgICArCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgYnl0ZWNfMiAvLyAweDAwMDQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9lY2hvX25hdGl2ZV90dXBsZV9yb3V0ZUAxNjoKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo3OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weToyNQogICAgLy8gY2xhc3MgTG9nZ2VyKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo3OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGVjaG9fbmF0aXZlX3R1cGxlCiAgICBkaWcgMwogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciA0CiAgICBjb25jYXQKICAgIGRpZyAzCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDQKICAgIGNvbmNhdAogICAgdW5jb3ZlciAzCiAgICBpdG9iCiAgICBkaWcgMwogICAgbGVuCiAgICBpbnRjXzIgLy8gNjQKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludGNfMiAvLyA2NAogICAgYnplcm8KICAgIHVuY292ZXIgNAogICAgYnwKICAgIGRpZyAzCiAgICBsZW4KICAgIHB1c2hpbnQgNzYgLy8gNzYKICAgICsKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBwdXNoYnl0ZXMgMHgwMDRjCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZWNob19uYXRpdmVfYmlndWludF9yb3V0ZUAxNToKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo3NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weToyNQogICAgLy8gY2xhc3MgTG9nZ2VyKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6NzUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBlY2hvX25hdGl2ZV9iaWd1aW50CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18yIC8vIDY0CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBpbnRjXzIgLy8gNjQKICAgIGJ6ZXJvCiAgICBifAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9lY2hvX25hdGl2ZV91aW50NjRfcm91dGVAMTQ6CiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6NzEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6MjUKICAgIC8vIGNsYXNzIExvZ2dlcihBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjcxCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgZWNob19uYXRpdmVfdWludDY0CiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2VjaG9fbmF0aXZlX2J5dGVzX3JvdXRlQDEzOgogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjY3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjI1CiAgICAvLyBjbGFzcyBMb2dnZXIoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6NjcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBlY2hvX25hdGl2ZV9ieXRlcwogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZWNob19uYXRpdmVfc3RyaW5nX3JvdXRlQDEyOgogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjYzCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjI1CiAgICAvLyBjbGFzcyBMb2dnZXIoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6NjMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBlY2hvX25hdGl2ZV9zdHJpbmcKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2xvZ19yb3V0ZUAxMToKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo1OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKG5hbWU9TE9HX01FVEhPRF9OQU1FKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6MjUKICAgIC8vIGNsYXNzIExvZ2dlcihBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQXNzZXRzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgYnRvaQogICAgdHhuYXMgQXBwbGljYXRpb25zCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6NTkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChuYW1lPUxPR19NRVRIT0RfTkFNRSkKICAgIGNhbGxzdWIgbG9nX2Fzc2V0X2FjY291bnRfYXBwCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2xvZ19yb3V0ZUAxMDoKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo1NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKG5hbWU9TE9HX01FVEhPRF9OQU1FKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6MjUKICAgIC8vIGNsYXNzIExvZ2dlcihBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjU1CiAgICAvLyBAYXJjNC5hYmltZXRob2QobmFtZT1MT0dfTUVUSE9EX05BTUUpCiAgICBjYWxsc3ViIGxvZ19ieXRlcwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9sb2dfcm91dGVAOToKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo1MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKG5hbWU9TE9HX01FVEhPRF9OQU1FKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6MjUKICAgIC8vIGNsYXNzIExvZ2dlcihBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjUxCiAgICAvLyBAYXJjNC5hYmltZXRob2QobmFtZT1MT0dfTUVUSE9EX05BTUUpCiAgICBjYWxsc3ViIGxvZ19ib29sCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2xvZ19yb3V0ZUA4OgogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjQ3CiAgICAvLyBAYXJjNC5hYmltZXRob2QobmFtZT1MT0dfTUVUSE9EX05BTUUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weToyNQogICAgLy8gY2xhc3MgTG9nZ2VyKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6NDcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChuYW1lPUxPR19NRVRIT0RfTkFNRSkKICAgIGNhbGxzdWIgbG9nX3N0cmluZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9sb2dfcm91dGVANzoKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo0MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKG5hbWU9TE9HX01FVEhPRF9OQU1FKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6MjUKICAgIC8vIGNsYXNzIExvZ2dlcihBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjQzCiAgICAvLyBAYXJjNC5hYmltZXRob2QobmFtZT1MT0dfTUVUSE9EX05BTUUpCiAgICBjYWxsc3ViIGxvZ191aW50NTEyCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2xvZ19yb3V0ZUA2OgogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjM5CiAgICAvLyBAYXJjNC5hYmltZXRob2QobmFtZT1MT0dfTUVUSE9EX05BTUUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weToyNQogICAgLy8gY2xhc3MgTG9nZ2VyKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6MzkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChuYW1lPUxPR19NRVRIT0RfTkFNRSkKICAgIGNhbGxzdWIgbG9nX3VpbnQ2NAogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9ub19hcmdzX3JvdXRlQDU6CiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6MzUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwMDAwMDAwMDAwMDAwMmEKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9lY2hvX3JvdXRlQDQ6CiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6MzEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6MjUKICAgIC8vIGNsYXNzIExvZ2dlcihBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjMxCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgZWNobwogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9pc19hX2Jfcm91dGVAMzoKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weToyNgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weToyNQogICAgLy8gY2xhc3MgTG9nZ2VyKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgZXh0cmFjdCAyIDAKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weToyNgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGlzX2FfYgogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdAMjI6CiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6MjUKICAgIC8vIGNsYXNzIExvZ2dlcihBUkM0Q29udHJhY3QpOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAyNgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0X2Nhc2VzLnR5cGVkX2FiaV9jYWxsLmxvZ2dlci5Mb2dnZXIuaXNfYV9iKGE6IGJ5dGVzLCBiOiBieXRlcykgLT4gdm9pZDoKaXNfYV9iOgogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjI2LTI3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBpc19hX2Ioc2VsZiwgYTogQnl0ZXMsIGI6IEJ5dGVzKSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6MjgKICAgIC8vIGFzc2VydCBhID09IGIiYSIsICJhIGlzIG5vdCBhIgogICAgZnJhbWVfZGlnIC0yCiAgICBwdXNoYnl0ZXMgMHg2MQogICAgPT0KICAgIGFzc2VydCAvLyBhIGlzIG5vdCBhCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6MjkKICAgIC8vIGFzc2VydCBiID09IGIiYiIsICJiIGlzIG5vdCBiIgogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoYnl0ZXMgMHg2MgogICAgPT0KICAgIGFzc2VydCAvLyBiIGlzIG5vdCBiCiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLnR5cGVkX2FiaV9jYWxsLmxvZ2dlci5Mb2dnZXIuZWNobyh2YWx1ZTogYnl0ZXMpIC0+IGJ5dGVzOgplY2hvOgogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjMxLTMyCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBlY2hvKHNlbGYsIHZhbHVlOiBhcmM0LlN0cmluZykgLT4gYXJjNC5TdHJpbmc6CiAgICBwcm90byAxIDEKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTozMwogICAgLy8gcmV0dXJuICJlY2hvOiAiICsgdmFsdWUKICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdCAyIDAKICAgIGJ5dGVjXzEgLy8gMHg2NTYzNjg2ZjNhMjAKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHlwZWRfYWJpX2NhbGwubG9nZ2VyLkxvZ2dlci5sb2dfdWludDY0KHZhbHVlOiBieXRlcykgLT4gdm9pZDoKbG9nX3VpbnQ2NDoKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTozOS00MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKG5hbWU9TE9HX01FVEhPRF9OQU1FKQogICAgLy8gZGVmIGxvZ191aW50NjQoc2VsZiwgdmFsdWU6IGFyYzQuVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6NDEKICAgIC8vIGxvZyh2YWx1ZSkKICAgIGZyYW1lX2RpZyAtMQogICAgbG9nCiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLnR5cGVkX2FiaV9jYWxsLmxvZ2dlci5Mb2dnZXIubG9nX3VpbnQ1MTIodmFsdWU6IGJ5dGVzKSAtPiB2b2lkOgpsb2dfdWludDUxMjoKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo0My00NAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKG5hbWU9TE9HX01FVEhPRF9OQU1FKQogICAgLy8gZGVmIGxvZ191aW50NTEyKHNlbGYsIHZhbHVlOiBhcmM0LlVJbnQ1MTIpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo0NQogICAgLy8gbG9nKHZhbHVlKQogICAgZnJhbWVfZGlnIC0xCiAgICBsb2cKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHlwZWRfYWJpX2NhbGwubG9nZ2VyLkxvZ2dlci5sb2dfc3RyaW5nKHZhbHVlOiBieXRlcykgLT4gdm9pZDoKbG9nX3N0cmluZzoKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo0Ny00OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKG5hbWU9TE9HX01FVEhPRF9OQU1FKQogICAgLy8gZGVmIGxvZ19zdHJpbmcoc2VsZiwgdmFsdWU6IGFyYzQuU3RyaW5nKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6NDkKICAgIC8vIGxvZyh2YWx1ZS5uYXRpdmUpICAjIGRlY29kZSB0byByZW1vdmUgaGVhZGVyCiAgICBmcmFtZV9kaWcgLTEKICAgIGV4dHJhY3QgMiAwCiAgICBsb2cKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHlwZWRfYWJpX2NhbGwubG9nZ2VyLkxvZ2dlci5sb2dfYm9vbCh2YWx1ZTogYnl0ZXMpIC0+IHZvaWQ6CmxvZ19ib29sOgogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjUxLTUyCiAgICAvLyBAYXJjNC5hYmltZXRob2QobmFtZT1MT0dfTUVUSE9EX05BTUUpCiAgICAvLyBkZWYgbG9nX2Jvb2woc2VsZiwgdmFsdWU6IGFyYzQuQm9vbCkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjUzCiAgICAvLyBsb2coQnl0ZXMoYiJUcnVlIikgaWYgdmFsdWUubmF0aXZlIGVsc2UgQnl0ZXMoYiJGYWxzZSIpKQogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzEgLy8gMAogICAgZ2V0Yml0CiAgICBwdXNoYnl0ZXNzIDB4NDY2MTZjNzM2NSAweDU0NzI3NTY1IC8vIDB4NDY2MTZjNzM2NSwgMHg1NDcyNzU2NQogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIGxvZwogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50eXBlZF9hYmlfY2FsbC5sb2dnZXIuTG9nZ2VyLmxvZ19ieXRlcyh2YWx1ZTogYnl0ZXMpIC0+IHZvaWQ6CmxvZ19ieXRlczoKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo1NS01NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKG5hbWU9TE9HX01FVEhPRF9OQU1FKQogICAgLy8gZGVmIGxvZ19ieXRlcyhzZWxmLCB2YWx1ZTogYXJjNC5EeW5hbWljQnl0ZXMpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo1NwogICAgLy8gbG9nKHZhbHVlLm5hdGl2ZSkKICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdCAyIDAKICAgIGxvZwogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50eXBlZF9hYmlfY2FsbC5sb2dnZXIuTG9nZ2VyLmxvZ19hc3NldF9hY2NvdW50X2FwcChhc3NldDogdWludDY0LCBhY2NvdW50OiBieXRlcywgYXBwOiB1aW50NjQpIC0+IHZvaWQ6CmxvZ19hc3NldF9hY2NvdW50X2FwcDoKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo1OS02MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKG5hbWU9TE9HX01FVEhPRF9OQU1FKQogICAgLy8gZGVmIGxvZ19hc3NldF9hY2NvdW50X2FwcChzZWxmLCBhc3NldDogQXNzZXQsIGFjY291bnQ6IEFjY291bnQsIGFwcDogQXBwbGljYXRpb24pIC0+IE5vbmU6CiAgICBwcm90byAzIDAKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo2MQogICAgLy8gbG9nKGFzc2V0Lm5hbWUsIGFjY291bnQuYnl0ZXMsIGFwcC5hZGRyZXNzKQogICAgZnJhbWVfZGlnIC0zCiAgICBhc3NldF9wYXJhbXNfZ2V0IEFzc2V0TmFtZQogICAgYXNzZXJ0IC8vIGFzc2V0IGV4aXN0cwogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwogICAgYXNzZXJ0IC8vIGFwcGxpY2F0aW9uIGV4aXN0cwogICAgY29uY2F0CiAgICBsb2cKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHlwZWRfYWJpX2NhbGwubG9nZ2VyLkxvZ2dlci5lY2hvX25hdGl2ZV9zdHJpbmcodmFsdWU6IGJ5dGVzKSAtPiBieXRlczoKZWNob19uYXRpdmVfc3RyaW5nOgogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjYzLTY0CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBlY2hvX25hdGl2ZV9zdHJpbmcoc2VsZiwgdmFsdWU6IFN0cmluZykgLT4gU3RyaW5nOgogICAgcHJvdG8gMSAxCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6NjUKICAgIC8vIHJldHVybiAiZWNobzogIiArIHZhbHVlCiAgICBieXRlY18xIC8vICJlY2hvOiAiCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50eXBlZF9hYmlfY2FsbC5sb2dnZXIuTG9nZ2VyLmVjaG9fbmF0aXZlX2J5dGVzKHZhbHVlOiBieXRlcykgLT4gYnl0ZXM6CmVjaG9fbmF0aXZlX2J5dGVzOgogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjY3LTY4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBlY2hvX25hdGl2ZV9ieXRlcyhzZWxmLCB2YWx1ZTogQnl0ZXMpIC0+IEJ5dGVzOgogICAgcHJvdG8gMSAxCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6NjkKICAgIC8vIHJldHVybiBiImVjaG86ICIgKyB2YWx1ZQogICAgYnl0ZWNfMSAvLyAweDY1NjM2ODZmM2EyMAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHlwZWRfYWJpX2NhbGwubG9nZ2VyLkxvZ2dlci5lY2hvX25hdGl2ZV91aW50NjQodmFsdWU6IHVpbnQ2NCkgLT4gdWludDY0OgplY2hvX25hdGl2ZV91aW50NjQ6CiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6NzEtNzIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGVjaG9fbmF0aXZlX3VpbnQ2NChzZWxmLCB2YWx1ZTogVUludDY0KSAtPiBVSW50NjQ6CiAgICBwcm90byAxIDEKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo3MwogICAgLy8gcmV0dXJuIHZhbHVlICsgMQogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50eXBlZF9hYmlfY2FsbC5sb2dnZXIuTG9nZ2VyLmVjaG9fbmF0aXZlX2JpZ3VpbnQodmFsdWU6IGJ5dGVzKSAtPiBieXRlczoKZWNob19uYXRpdmVfYmlndWludDoKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo3NS03NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgZWNob19uYXRpdmVfYmlndWludChzZWxmLCB2YWx1ZTogQmlnVUludCkgLT4gQmlnVUludDoKICAgIHByb3RvIDEgMQogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5Ojc3CiAgICAvLyByZXR1cm4gdmFsdWUgKyAxCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ5dGVjXzMgLy8gMHgwMQogICAgYisKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHlwZWRfYWJpX2NhbGwubG9nZ2VyLkxvZ2dlci5lY2hvX25hdGl2ZV90dXBsZShzOiBieXRlcywgYjogYnl0ZXMsIHU6IHVpbnQ2NCwgYnU6IGJ5dGVzKSAtPiBieXRlcywgYnl0ZXMsIHVpbnQ2NCwgYnl0ZXM6CmVjaG9fbmF0aXZlX3R1cGxlOgogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5Ojc5LTgyCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBlY2hvX25hdGl2ZV90dXBsZSgKICAgIC8vICAgICBzZWxmLCBzOiBTdHJpbmcsIGI6IEJ5dGVzLCB1OiBVSW50NjQsIGJ1OiBCaWdVSW50CiAgICAvLyApIC0+IHR1cGxlW1N0cmluZywgQnl0ZXMsIFVJbnQ2NCwgQmlnVUludF06CiAgICBwcm90byA0IDQKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo4MwogICAgLy8gcmV0dXJuICJlY2hvOiAiICsgcywgYiJlY2hvOiAiICsgYiwgdSArIDEsIGJ1ICsgMQogICAgYnl0ZWNfMSAvLyAiZWNobzogIgogICAgZnJhbWVfZGlnIC00CiAgICBjb25jYXQKICAgIGJ5dGVjXzEgLy8gMHg2NTYzNjg2ZjNhMjAKICAgIGZyYW1lX2RpZyAtMwogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ5dGVjXzMgLy8gMHgwMQogICAgYisKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHlwZWRfYWJpX2NhbGwubG9nZ2VyLkxvZ2dlci5lY2hvX25lc3RlZF90dXBsZSh0dXBsZV9vZl90dXBsZXMuMC4wOiBieXRlcywgdHVwbGVfb2ZfdHVwbGVzLjAuMTogYnl0ZXMsIHR1cGxlX29mX3R1cGxlcy4xLjA6IHVpbnQ2NCwgdHVwbGVfb2ZfdHVwbGVzLjEuMTogYnl0ZXMsIHR1cGxlX29mX3R1cGxlcy4xLjI6IGJ5dGVzKSAtPiBieXRlcywgYnl0ZXMsIHVpbnQ2NCwgYnl0ZXMsIGJ5dGVzOgplY2hvX25lc3RlZF90dXBsZToKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo4NS04OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgZWNob19uZXN0ZWRfdHVwbGUoCiAgICAvLyAgICAgc2VsZiwgdHVwbGVfb2ZfdHVwbGVzOiB0dXBsZVt0dXBsZVtTdHJpbmcsIGFyYzQuU3RyaW5nXSwgdHVwbGVbVUludDY0LCBhcmM0LlVJbnQ2NCwgQnl0ZXNdXQogICAgLy8gKSAtPiB0dXBsZVt0dXBsZVtTdHJpbmcsIGFyYzQuU3RyaW5nXSwgdHVwbGVbVUludDY0LCBhcmM0LlVJbnQ2NCwgQnl0ZXNdXToKICAgIHByb3RvIDUgNQogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjkwCiAgICAvLyByZXR1cm4gKCJlY2hvOiAiICsgc3RyaW5nLCAiZWNobzogIiArIGFyYzRfc3RyaW5nKSwgKAogICAgYnl0ZWNfMSAvLyAiZWNobzogIgogICAgZnJhbWVfZGlnIC01CiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtNAogICAgZXh0cmFjdCAyIDAKICAgIGJ5dGVjXzEgLy8gMHg2NTYzNjg2ZjNhMjAKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo5MQogICAgLy8gdTY0ICsgMSwKICAgIGZyYW1lX2RpZyAtMwogICAgaW50Y18wIC8vIDEKICAgICsKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo5MgogICAgLy8gYXJjNC5VSW50NjQoYXJjNF91NjQubmF0aXZlICsgMSksCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ0b2kKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBpdG9iCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6OTMKICAgIC8vIGIiZWNobzogIiArIGJ5dGV6LAogICAgYnl0ZWNfMSAvLyAweDY1NjM2ODZmM2EyMAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo5MC05NAogICAgLy8gcmV0dXJuICgiZWNobzogIiArIHN0cmluZywgImVjaG86ICIgKyBhcmM0X3N0cmluZyksICgKICAgIC8vICAgICB1NjQgKyAxLAogICAgLy8gICAgIGFyYzQuVUludDY0KGFyYzRfdTY0Lm5hdGl2ZSArIDEpLAogICAgLy8gICAgIGIiZWNobzogIiArIGJ5dGV6LAogICAgLy8gKQogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50eXBlZF9hYmlfY2FsbC5sb2dnZXIuTG9nZ2VyLnJldHVybl9hcmdzX2FmdGVyXzE0dGgoX2ExOiBieXRlcywgX2EyOiBieXRlcywgX2EzOiBieXRlcywgX2E0OiBieXRlcywgX2E1OiBieXRlcywgX2E2OiBieXRlcywgX2E3OiBieXRlcywgX2E4OiBieXRlcywgX2E5OiBieXRlcywgX2ExMDogYnl0ZXMsIF9hMTE6IGJ5dGVzLCBfYTEyOiBieXRlcywgX2ExMzogYnl0ZXMsIF9hMTQ6IGJ5dGVzLCBhMTU6IGJ5dGVzLCBhMTY6IGJ5dGVzLCBhMTc6IGJ5dGVzLCBhMTg6IGJ5dGVzLCBhMTk6IGJ5dGVzLCBhMjA6IGJ5dGVzKSAtPiBieXRlczoKcmV0dXJuX2FyZ3NfYWZ0ZXJfMTR0aDoKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weTo5Ni0xMTkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHJldHVybl9hcmdzX2FmdGVyXzE0dGgoCiAgICAvLyAgICAgc2VsZiwKICAgIC8vICAgICBfYTE6IGFyYzQuVUludDY0LAogICAgLy8gICAgIF9hMjogYXJjNC5VSW50NjQsCiAgICAvLyAgICAgX2EzOiBhcmM0LlVJbnQ2NCwKICAgIC8vICAgICBfYTQ6IGFyYzQuVUludDY0LAogICAgLy8gICAgIF9hNTogYXJjNC5VSW50NjQsCiAgICAvLyAgICAgX2E2OiBhcmM0LlVJbnQ2NCwKICAgIC8vICAgICBfYTc6IGFyYzQuVUludDY0LAogICAgLy8gICAgIF9hODogYXJjNC5VSW50NjQsCiAgICAvLyAgICAgX2E5OiBhcmM0LlVJbnQ2NCwKICAgIC8vICAgICBfYTEwOiBhcmM0LlVJbnQ2NCwKICAgIC8vICAgICBfYTExOiBhcmM0LlVJbnQ2NCwKICAgIC8vICAgICBfYTEyOiBhcmM0LlVJbnQ2NCwKICAgIC8vICAgICBfYTEzOiBhcmM0LlVJbnQ2NCwKICAgIC8vICAgICBfYTE0OiBhcmM0LlVJbnQ2NCwKICAgIC8vICAgICBhMTU6IGFyYzQuVUludDgsCiAgICAvLyAgICAgYTE2OiBhcmM0LlVJbnQ4LAogICAgLy8gICAgIGExNzogYXJjNC5VSW50OCwKICAgIC8vICAgICBhMTg6IGFyYzQuVUludDgsCiAgICAvLyAgICAgYTE5OiBhcmM0LlR1cGxlW2FyYzQuVUludDgsIGFyYzQuVUludDgsIGFyYzQuVUludDgsIGFyYzQuVUludDhdLAogICAgLy8gICAgIGEyMDogYXJjNC5VSW50OCwKICAgIC8vICkgLT4gYXJjNC5EeW5hbWljQnl0ZXM6CiAgICBwcm90byAyMCAxCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6MTIwCiAgICAvLyBsYXN0X2FyZyA9IGFyYzQuVHVwbGUoKGExNSwgYTE2LCBhMTcsIGExOCwgYTE5LCBhMjApKQogICAgZnJhbWVfZGlnIC02CiAgICBmcmFtZV9kaWcgLTUKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC00CiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMwogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIC8vIHR5cGVkX2FiaV9jYWxsL2xvZ2dlci5weToxMjEKICAgIC8vIGFzc2VydCBUeG4uYXBwbGljYXRpb25fYXJncygxNSkgPT0gbGFzdF9hcmcuYnl0ZXMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDE1CiAgICBkaWcgMQogICAgPT0KICAgIGFzc2VydAogICAgLy8gdHlwZWRfYWJpX2NhbGwvbG9nZ2VyLnB5OjEyMgogICAgLy8gcmV0dXJuIGFyYzQuRHluYW1pY0J5dGVzKGxhc3RfYXJnLmJ5dGVzKQogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHlwZWRfYWJpX2NhbGwubG9nZ2VyLkxvZ2dlci5sb2dzX2FyZV9lcXVhbChsb2dfMS5sZXZlbDogdWludDY0LCBsb2dfMS5tZXNzYWdlOiBieXRlcywgbG9nXzIubGV2ZWw6IHVpbnQ2NCwgbG9nXzIubWVzc2FnZTogYnl0ZXMpIC0+IHVpbnQ2NDoKbG9nc19hcmVfZXF1YWw6CiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6MTI0LTEyNQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgbG9nc19hcmVfZXF1YWwoc2VsZiwgbG9nXzE6IExvZ01lc3NhZ2UsIGxvZ18yOiBMb2dNZXNzYWdlKSAtPiBib29sOgogICAgcHJvdG8gNCAxCiAgICAvLyB0eXBlZF9hYmlfY2FsbC9sb2dnZXIucHk6MTI2CiAgICAvLyByZXR1cm4gbG9nXzEgPT0gbG9nXzIKICAgIGZyYW1lX2RpZyAtNAogICAgZnJhbWVfZGlnIC0yCiAgICA9PQogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgLTEKICAgID09CiAgICAmJgogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQBACCYEBBUffHUGZWNobzogAgAEAQExG0EDQYIRBMdyErwEm/gZEwS4Yu4ZBDwQWNkEavRZMAS0tDNOBG7tfsMEtQDhEQTNcntxBEpETHcEJlnoGASp+2zxBNjMNjsEFuA5GQSrJxzkBLoLQ4EE3dBxhTYaAI4RAqsCmAKAAnECYgJTAkQCNQIXAfkB2wHGAasBTAClAEcAAiNDMRkURDEYRDYaAUlXAAgXSwElWUsCFU8DTgJSVwIANhoCSVcACBdLASVZSwIVTwNOAlJXAgCIA4aAAQAjTwJUKExQsCJDMRkURDEYRDYaATYaAjYaAzYaBDYaBTYaBjYaBzYaCDYaCTYaCjYaCzYaDDYaDTYaDjYaD1cAATYaD1cBATYaD1cCATYaD1cDATYaD1cEBDYaD1cIAYgC/ShMULAiQzEZFEQxGEQ2GgFJI1lLAYECWUsCTwJLAlJJI1lLAYECWUsCTwJLAlJXAgBLAhVPA08DTwJSSwMVTwRPBE8CUklXAAgXSwFXCAhLAoEQWUsDFU8ETgJSVwIAiAJ1SwQVFlcGAk8FUEkVgQQIFlcGAipMUExQTwRQTwMWSwIVFlcGAk8DUExPA1CAAgASUExQSwEVgQQIFlcGAipMUE8CUExQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaAxc2GgSIAflLAxUWVwYCTwRQSwMVFlcGAk8EUE8DFksDFSQORCSvTwSrSwMVgUwIFlcGAoACAExMUE8CUExQTwJQTFAoTFCwIkMxGRREMRhENhoBiAGiSRUkDkQkr6soTFCwIkMxGRREMRhENhoBF4gBfhYoTFCwIkMxGRREMRhENhoBVwIAiAFfSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIAiAE5SRUWVwYCTFAoTFCwIkMxGRREMRhENhoBF8AwNhoCF8AcNhoDF8AyiAD8IkMxGRREMRhENhoBiADjIkMxGRREMRhENhoBiAC7IkMxGRREMRhENhoBiACiIkMxGRREMRhENhoBiACMIkMxGRREMRhENhoBiAB2IkMxGRREMRhEgAwVH3x1AAAAAAAAACqwIkMxGRREMRhENhoBiAA7KExQsCJDMRkURDEYRDYaAVcCADYaAlcCAIgADSJDMRlA/TgxGBREIkOKAgCL/oABYRJEi/+AAWISRImKAQGL/1cCAClMUEkVFlcGAkxQiYoBAIv/sImKAQCL/7CJigEAi/9XAgCwiYoBAIv/I1OCAgVGYWxzZQRUcnVlTwJNsImKAQCL/1cCALCJigMAi/1xBESL/lCL/3IIRFCwiYoBASmL/1CJigEBKYv/UImKAQGL/yIIiYoBAYv/K6CJigQEKYv8UCmL/VCL/iIIi/8roImKBQUpi/tQi/xXAgApTFBJFRZXBgJMUIv9IgiL/hciCBYpi/9QiYoUAYv6i/tQi/xQi/1Qi/5Qi/9QNhoPSwESREkVFlcGAkxQiYoEAYv8i/4Si/2L/xIQiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}