{
    "name": "Logger",
    "structs": {
        "LogMessage": [
            {
                "name": "level",
                "type": "uint64"
            },
            {
                "name": "message",
                "type": "string"
            }
        ],
        "LogStruct": [
            {
                "name": "level",
                "type": "uint64"
            },
            {
                "name": "message",
                "type": "string"
            }
        ]
    },
    "methods": [
        {
            "name": "is_a_b",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo",
            "args": [
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "no_args",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "uint512",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "bool",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "byte[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "address",
                    "name": "account"
                },
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log",
            "args": [
                {
                    "type": "address",
                    "name": "address"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_native_string",
            "args": [
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_native_bytes",
            "args": [
                {
                    "type": "byte[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_native_uint64",
            "args": [
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_native_biguint",
            "args": [
                {
                    "type": "uint512",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "uint512"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_resource_by_index",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "application",
                    "name": "app"
                },
                {
                    "type": "account",
                    "name": "acc"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,address)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_resource_by_value",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "app"
                },
                {
                    "type": "address",
                    "name": "acc"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,address)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_native_tuple",
            "args": [
                {
                    "type": "string",
                    "name": "s"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "u"
                },
                {
                    "type": "uint512",
                    "name": "bu"
                }
            ],
            "returns": {
                "type": "(string,byte[],uint64,uint512)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_nested_tuple",
            "args": [
                {
                    "type": "((string,string),(uint64,uint64,byte[]))",
                    "name": "tuple_of_tuples"
                }
            ],
            "returns": {
                "type": "((string,string),(uint64,uint64,byte[]))"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "return_args_after_14th",
            "args": [
                {
                    "type": "uint64",
                    "name": "_a1"
                },
                {
                    "type": "uint64",
                    "name": "_a2"
                },
                {
                    "type": "uint64",
                    "name": "_a3"
                },
                {
                    "type": "uint64",
                    "name": "_a4"
                },
                {
                    "type": "uint64",
                    "name": "_a5"
                },
                {
                    "type": "uint64",
                    "name": "_a6"
                },
                {
                    "type": "uint64",
                    "name": "_a7"
                },
                {
                    "type": "uint64",
                    "name": "_a8"
                },
                {
                    "type": "uint64",
                    "name": "_a9"
                },
                {
                    "type": "uint64",
                    "name": "_a10"
                },
                {
                    "type": "uint64",
                    "name": "_a11"
                },
                {
                    "type": "uint64",
                    "name": "_a12"
                },
                {
                    "type": "uint64",
                    "name": "_a13"
                },
                {
                    "type": "uint64",
                    "name": "_a14"
                },
                {
                    "type": "uint8",
                    "name": "a15"
                },
                {
                    "type": "uint8",
                    "name": "a16"
                },
                {
                    "type": "uint8",
                    "name": "a17"
                },
                {
                    "type": "uint8",
                    "name": "a18"
                },
                {
                    "type": "(uint8,uint8,uint8,uint8)",
                    "name": "a19"
                },
                {
                    "type": "uint8",
                    "name": "a20"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "logs_are_equal",
            "args": [
                {
                    "type": "(uint64,string)",
                    "struct": "LogMessage",
                    "name": "log_1"
                },
                {
                    "type": "(uint64,string)",
                    "struct": "LogMessage",
                    "name": "log_2"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "echo_log_struct",
            "args": [
                {
                    "type": "(uint64,string)",
                    "struct": "LogStruct",
                    "name": "log"
                }
            ],
            "returns": {
                "type": "(uint64,string)",
                "struct": "LogStruct"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        197,
                        212,
                        277,
                        371,
                        536,
                        628,
                        664,
                        707,
                        734,
                        755,
                        785,
                        815,
                        830,
                        853,
                        868,
                        883,
                        898,
                        913,
                        928,
                        952,
                        971
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1012
                    ],
                    "errorMessage": "a is not a"
                },
                {
                    "pc": [
                        1124
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        1116
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        1019
                    ],
                    "errorMessage": "b is not b"
                },
                {
                    "pc": [
                        1000
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        200,
                        215,
                        280,
                        374,
                        539,
                        631,
                        667,
                        710,
                        737,
                        758,
                        788,
                        818,
                        833,
                        856,
                        871,
                        886,
                        901,
                        916,
                        931,
                        955,
                        974
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1201
                    ],
                    "errorMessage": "expected account to be passed by index"
                },
                {
                    "pc": [
                        1234
                    ],
                    "errorMessage": "expected account to be passed by value"
                },
                {
                    "pc": [
                        1191
                    ],
                    "errorMessage": "expected application to be passed by index"
                },
                {
                    "pc": [
                        1227
                    ],
                    "errorMessage": "expected application to be passed by value"
                },
                {
                    "pc": [
                        1181
                    ],
                    "errorMessage": "expected asset to be passed by index"
                },
                {
                    "pc": [
                        1219
                    ],
                    "errorMessage": "expected asset to be passed by value"
                },
                {
                    "pc": [
                        1036,
                        1283
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        607,
                        721
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQBACCYEBBUffHUGZWNobzogAgAECAAGZWNobzogMRtBA7qCFQTHchK8BJv4GRMEuGLuGQQ8EFjZBGr0WTAEtLQzTgRu7X7DBLUA4REERrUPrwQEN7F+BEpETHcEJlnoGASp+2zxBNjMNjsE1sKsfwRIFC1eBBbgORkEqycc5AS6C0OBBN3QcYUE3E8ZkjYaAI4VAwgC9QLdAs4CvwKwAqECkgJ7AmwCTgIwAhsCAAHVAbEBVQCwAFIAEQACI0MxGRREMRhEKDYaAVCwIkMxGRREMRhENhoBSSNbSwElWUsCFU8DTgJSVwIANhoCSSNbSwElWUsCFU8DTgJSVwIAiAQ+gAEAI08CVChMULAiQzEZFEQxGEQ2GgE2GgI2GgM2GgQ2GgU2GgY2Ggc2Ggg2Ggk2Ggo2Ggs2Ggw2Gg02Gg42Gg9XAAE2Gg9XAQE2Gg9XAgE2Gg9XAwE2Gg9XBAQ2Gg9XCAGIA7UoTFCwIkMxGRREMRhENhoBSSNZSwGBAllLAk8CSwJSSSNZSwGBAllLAk8CSwJSVwIASwIVTwNPA08CUksDFU8ETwRPAlJJI1tLAVcICEsCgRBZSwMVTwROAlJXAgCIAyZLBBUWVwYCTwVQSRWBBAgWVwYCKkxQTFBPBFBJFYEECE8EFk8EUEsDFRZXBgJPBFBMgAIAElBMUEwWVwYCKkxQTwJQTFAoTFCwIkMxGRREMRhENhoBVwIANhoCVwIANhoDFzYaBIgCqEsDFRZXBgJPBFBJFYFMCEsEFRZXBgJPBVBMFlcGAoACAExMUE8EFlBLAxUkDkQkr08Eq1BPAlBMUChMULAiQzEZFEQxGEQ2GgEXNhoCFzYaA4gCM08CFk8CFlBMUChMULAiQzEZFEQxGEQ2GgEXwDA2GgIXwDI2GgMXwByIAeBPAhZPAhZQTFAoTFCwIkMxGRREMRhENhoBiAG6SRUkDkQkr6soTFCwIkMxGRREMRhENhoBF4gBlhYoTFCwIkMxGRREMRhENhoBVwIAiAF3SRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIAiAFRSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBiAEvIkMxGRREMRhENhoBFzYaAjYaAxeIAQUiQzEZFEQxGEQ2GgGIAOwiQzEZFEQxGEQ2GgGIAMQiQzEZFEQxGEQ2GgGIAKsiQzEZFEQxGEQ2GgGIAJUiQzEZFEQxGEQ2GgGIAH8iQzEZFEQxGESADBUffHUAAAAAAAAAKrAiQzEZFEQxGEQ2GgGIADsoTFCwIkMxGRREMRhENhoBVwIANhoCVwIAiAANIkMxGUD82zEYFEQiQ4oCAIv+gAFhEkSL/4ABYhJEiYoBAYv/VwIAi/8jWStPAlBJI1lPAggWVwYCXACJigEAi/+wiYoBAIv/sImKAQCL/1cCALCJigEAi/8jU4ICBUZhbHNlBFRydWVPAk2wiYoBAIv/VwIAsImKAwCL/XEERIv+UIv/cghEULCJigEAi/+wiYoBASmL/1CJigEBKYv/UImKAQGL/yIIiYoBAYv/gAEBoImKAwM2GgEXwDCL/RJENhoCF8Ayi/4SRDYaAxfAHIv/EkSL/Yv+i/+JigMDNhoBF4v9EkQ2GgIXi/4SRIv/NhoDEkSL/Yv+i/+JigQEKYv8UCmL/VCL/iIIi/+AAQGgiYoFBSmL+1CL/FcCAIv8I1krTwJQSSNZTwIIFlcGAlwAi/0iCIv+FyIIFimL/1CJihQBi/qL+1CL/FCL/VCL/lCL/1A2Gg9LARJESRUWVwYCTFCJigQBi/yL/hKL/Yv/EhCJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}