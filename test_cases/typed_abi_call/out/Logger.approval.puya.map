{
  "version": 3,
  "sources": [
    "../logger.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAUK;;;;;;;;;;;;;;AAAA;AAAA;AAAA;;;;;;;;;;;AATA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAEU;AAAK;;;AAAL;AAAP;AACY;;;AAAL;AAAP;AAHH;AAAA;AAKA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEU;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEG;AAFH;AAAA;AAIA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEG;AAFH;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEO;;;AAAJ;AAFH;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEyB;AAAA;AAAlB;;;;;;;;;;;;;AAAA;;AAAA;AAAJ;AAFH;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEO;;;AAAJ;AAFH;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEO;;AAAA;;AAAA;AAAY;;AAAA;AAAe;AAAA;;AAAA;AAAA;AAA/B;AAFH;AAAA;AAIA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEG;AAFH;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAEU;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAEU;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEkB;AAAR;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEkB;AAAR;AAFV;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMuB;;;AAAR;AACI;;AAAT;;AAAA;AAAP;AACkB;;;AAAR;AACI;;AAAP;;AAAA;AAAP;AACkB;;;AAAR;AACI;;AAAP;;AAAA;AAAP;AAXH;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAMsB;;;AAAR;AACJ;;AAAA;AAAP;AACiB;;;AAAR;AACF;;AAAA;AAAP;AAEO;AADG;;;AACH;AAAP;AAXH;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAIU;AAAA;;AAAA;AAAc;AAAA;;AAAA;AAAe;;AAAI;AAAJ;AAAO;;AAAK;AAAL;AAJ9C;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAKW;AAAA;;AAAA;AAAmB;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;;AACvB;;AAAM;AAAN;AACY;;AAPnB;AAOmB;AAAuB;AAAvB;AAAZ;AACA;AAAA;;AAAA;AARP;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAwBc;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AACJ;;;AAAA;;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;;;AAAA;AAAA;AA1BV;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEU;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAFV;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 8 0 2"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x6563686f3a20 0x00066563686f3a20 0x01 0x0004"
    },
    "35": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "37": {
      "op": "bz main___algopy_default_create@28",
      "stack_out": []
    },
    "40": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "42": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "43": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "44": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "46": {
      "op": "assert",
      "stack_out": []
    },
    "47": {
      "op": "pushbytess 0xc77212bc 0x9bf81913 0xb862ee19 0x3c1058d9 0x6af45930 0xb4b4334e 0x6eed7ec3 0xb500e111 0x46b50faf 0x0437b17e 0x4a444c77 0x2659e818 0xa9fb6cf1 0xd8cc363b 0xd6c2ac7f 0x48142d5e 0x16e03919 0xab271ce4 0xba0b4381 0xddd07185 0xdc4f1992 // method \"is_a_b(byte[],byte[])void\", method \"echo(string)string\", method \"no_args()uint64\", method \"log(uint64)void\", method \"log(uint512)void\", method \"log(string)void\", method \"log(bool)void\", method \"log(byte[])void\", method \"log(uint64,address,uint64)void\", method \"log(address)void\", method \"echo_native_string(string)string\", method \"echo_native_bytes(byte[])byte[]\", method \"echo_native_uint64(uint64)uint64\", method \"echo_native_biguint(uint512)uint512\", method \"echo_resource_by_index(asset,application,account)(uint64,uint64,address)\", method \"echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)\", method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\", method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\", method \"return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]\", method \"logs_are_equal((uint64,string),(uint64,string))bool\", method \"echo_log_struct((uint64,string))(uint64,string)\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_log_struct((uint64,string))(uint64,string))",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(no_args()uint64)",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])"
      ],
      "stack_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(echo_log_struct((uint64,string))(uint64,string))"
      ]
    },
    "154": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_log_struct((uint64,string))(uint64,string))",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(no_args()uint64)",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(echo_log_struct((uint64,string))(uint64,string))",
        "tmp%6#0"
      ]
    },
    "157": {
      "op": "match is_a_b echo main_no_args_route@6 log_uint64 log_uint512 log_string log_bool log_bytes log_asset_account_app log_address echo_native_string echo_native_bytes echo_native_uint64 echo_native_biguint echo_resource_by_index echo_resource_by_value echo_native_tuple echo_nested_tuple return_args_after_14th logs_are_equal echo_log_struct",
      "stack_out": []
    },
    "201": {
      "op": "err"
    },
    "202": {
      "block": "main_no_args_route@6",
      "stack_in": [],
      "op": "pushbytes 0x151f7c75000000000000002a",
      "defined_out": [
        "0x151f7c75000000000000002a"
      ],
      "stack_out": [
        "0x151f7c75000000000000002a"
      ]
    },
    "216": {
      "op": "log",
      "stack_out": []
    },
    "217": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "218": {
      "op": "return",
      "stack_out": []
    },
    "219": {
      "block": "main___algopy_default_create@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "221": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "222": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "224": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "225": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "226": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "227": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "228": {
      "op": "return",
      "stack_out": []
    },
    "229": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.is_a_b[routing]",
      "params": {},
      "block": "is_a_b",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "232": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "233": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "234": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "235": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "236": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "237": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "239": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "240": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "241": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "242": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "245": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%2#0"
      ]
    },
    "248": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "249": {
      "op": "intc_2 // 0",
      "stack_out": [
        "a#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "250": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "a#0",
        "aggregate%array_length%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%2#0",
        "aggregate%array_length%1#0"
      ]
    },
    "251": {
      "op": "intc_3 // 2",
      "stack_out": [
        "a#0",
        "tmp%2#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "252": {
      "op": "+",
      "defined_out": [
        "a#0",
        "add%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%2#0",
        "add%1#0"
      ]
    },
    "253": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "255": {
      "op": "len",
      "defined_out": [
        "a#0",
        "add%1#0",
        "len%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%2#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "256": {
      "op": "==",
      "defined_out": [
        "a#0",
        "eq%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "257": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": [
        "a#0",
        "tmp%2#0"
      ]
    },
    "258": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "261": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "a#0"
      ]
    },
    "262": {
      "op": "pushbytes 0x61",
      "defined_out": [
        "0x61",
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "b#0",
        "a#0",
        "0x61"
      ]
    },
    "265": {
      "op": "==",
      "defined_out": [
        "b#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "b#0",
        "tmp%0#1"
      ]
    },
    "266": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": [
        "b#0"
      ]
    },
    "267": {
      "op": "pushbytes 0x62",
      "defined_out": [
        "0x62",
        "b#0"
      ],
      "stack_out": [
        "b#0",
        "0x62"
      ]
    },
    "270": {
      "op": "==",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "271": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "272": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "273": {
      "op": "return",
      "stack_out": []
    },
    "274": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo[routing]",
      "params": {},
      "block": "echo",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "277": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "278": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)",
        "0"
      ]
    },
    "279": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0"
      ]
    },
    "280": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "281": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0"
      ]
    },
    "282": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "add%0#0",
        "value#0 (copy)"
      ]
    },
    "284": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "285": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "eq%0#0"
      ]
    },
    "286": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": [
        "value#0"
      ]
    },
    "287": {
      "op": "extract 2 0",
      "defined_out": [
        "extract_to_end%0#0"
      ],
      "stack_out": [
        "extract_to_end%0#0"
      ]
    },
    "290": {
      "op": "bytec_2 // 0x00066563686f3a20",
      "defined_out": [
        "0x00066563686f3a20",
        "extract_to_end%0#0"
      ],
      "stack_out": [
        "extract_to_end%0#0",
        "0x00066563686f3a20"
      ]
    },
    "291": {
      "op": "swap",
      "stack_out": [
        "0x00066563686f3a20",
        "extract_to_end%0#0"
      ]
    },
    "292": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0"
      ]
    },
    "293": {
      "op": "dup",
      "defined_out": [
        "concat%0#0",
        "concat%0#0 (copy)"
      ],
      "stack_out": [
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "294": {
      "op": "extract 2 0",
      "defined_out": [
        "concat%0#0",
        "extract_to_end%1#0"
      ],
      "stack_out": [
        "concat%0#0",
        "extract_to_end%1#0"
      ]
    },
    "297": {
      "op": "len",
      "stack_out": [
        "concat%0#0",
        "len%0#0"
      ]
    },
    "298": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "299": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "302": {
      "op": "replace2 0",
      "defined_out": [
        "replace%0#0"
      ],
      "stack_out": [
        "replace%0#0"
      ]
    },
    "304": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "replace%0#0"
      ],
      "stack_out": [
        "replace%0#0",
        "0x151f7c75"
      ]
    },
    "305": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "replace%0#0"
      ]
    },
    "306": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "307": {
      "op": "log",
      "stack_out": []
    },
    "308": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "309": {
      "op": "return",
      "stack_out": []
    },
    "310": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_uint64[routing]",
      "params": {},
      "block": "log_uint64",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "313": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "314": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "len%0#0"
      ]
    },
    "315": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "len%0#0",
        "8"
      ]
    },
    "316": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "eq%0#0"
      ]
    },
    "317": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "value#0"
      ]
    },
    "318": {
      "op": "log",
      "stack_out": []
    },
    "319": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "320": {
      "op": "return",
      "stack_out": []
    },
    "321": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_uint512[routing]",
      "params": {},
      "block": "log_uint512",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "324": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "325": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "len%0#0"
      ]
    },
    "326": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "len%0#0",
        "64"
      ]
    },
    "328": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "eq%0#0"
      ]
    },
    "329": {
      "error": "invalid number of bytes for arc4.uint512",
      "op": "assert // invalid number of bytes for arc4.uint512",
      "stack_out": [
        "value#0"
      ]
    },
    "330": {
      "op": "log",
      "stack_out": []
    },
    "331": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "332": {
      "op": "return",
      "stack_out": []
    },
    "333": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_string[routing]",
      "params": {},
      "block": "log_string",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "336": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "337": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)",
        "0"
      ]
    },
    "338": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0"
      ]
    },
    "339": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "340": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0"
      ]
    },
    "341": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "add%0#0",
        "value#0 (copy)"
      ]
    },
    "343": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "344": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "eq%0#0"
      ]
    },
    "345": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": [
        "value#0"
      ]
    },
    "346": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "349": {
      "op": "log",
      "stack_out": []
    },
    "350": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "351": {
      "op": "return",
      "stack_out": []
    },
    "352": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_bool[routing]",
      "params": {},
      "block": "log_bool",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "355": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "356": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "len%0#0"
      ]
    },
    "357": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "len%0#0",
        "1"
      ]
    },
    "358": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "eq%0#0"
      ]
    },
    "359": {
      "error": "invalid number of bytes for arc4.bool",
      "op": "assert // invalid number of bytes for arc4.bool",
      "stack_out": [
        "value#0"
      ]
    },
    "360": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "0"
      ]
    },
    "361": {
      "op": "getbit",
      "defined_out": [
        "aggregate%get_bit%0#0"
      ],
      "stack_out": [
        "aggregate%get_bit%0#0"
      ]
    },
    "362": {
      "op": "pushbytess 0x46616c7365 0x54727565 // 0x46616c7365, 0x54727565",
      "defined_out": [
        "0x46616c7365",
        "0x54727565",
        "aggregate%get_bit%0#0"
      ],
      "stack_out": [
        "aggregate%get_bit%0#0",
        "0x46616c7365",
        "0x54727565"
      ]
    },
    "375": {
      "op": "uncover 2",
      "stack_out": [
        "0x46616c7365",
        "0x54727565",
        "aggregate%get_bit%0#0"
      ]
    },
    "377": {
      "op": "select",
      "defined_out": [
        "select%0#0"
      ],
      "stack_out": [
        "select%0#0"
      ]
    },
    "378": {
      "op": "log",
      "stack_out": []
    },
    "379": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "380": {
      "op": "return",
      "stack_out": []
    },
    "381": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_bytes[routing]",
      "params": {},
      "block": "log_bytes",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "384": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "385": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)",
        "0"
      ]
    },
    "386": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0"
      ]
    },
    "387": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "388": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0"
      ]
    },
    "389": {
      "op": "dig 1",
      "stack_out": [
        "value#0",
        "add%0#0",
        "value#0 (copy)"
      ]
    },
    "391": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "392": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "eq%0#0"
      ]
    },
    "393": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": [
        "value#0"
      ]
    },
    "394": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "397": {
      "op": "log",
      "stack_out": []
    },
    "398": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "399": {
      "op": "return",
      "stack_out": []
    },
    "400": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_asset_account_app[routing]",
      "params": {},
      "block": "log_asset_account_app",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "403": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "404": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "405": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "406": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "407": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "408": {
      "op": "btoi",
      "defined_out": [
        "asset#0"
      ],
      "stack_out": [
        "asset#0"
      ]
    },
    "409": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "account#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "account#0"
      ]
    },
    "412": {
      "op": "dup",
      "defined_out": [
        "account#0",
        "account#0 (copy)",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "account#0",
        "account#0 (copy)"
      ]
    },
    "413": {
      "op": "len",
      "defined_out": [
        "account#0",
        "asset#0",
        "len%1#0"
      ],
      "stack_out": [
        "asset#0",
        "account#0",
        "len%1#0"
      ]
    },
    "414": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "account#0",
        "asset#0",
        "len%1#0"
      ],
      "stack_out": [
        "asset#0",
        "account#0",
        "len%1#0",
        "32"
      ]
    },
    "416": {
      "op": "==",
      "defined_out": [
        "account#0",
        "asset#0",
        "eq%1#0"
      ],
      "stack_out": [
        "asset#0",
        "account#0",
        "eq%1#0"
      ]
    },
    "417": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "stack_out": [
        "asset#0",
        "account#0"
      ]
    },
    "418": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "account#0",
        "asset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "asset#0",
        "account#0",
        "tmp%4#0"
      ]
    },
    "421": {
      "op": "dup",
      "defined_out": [
        "account#0",
        "asset#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "account#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "422": {
      "op": "len",
      "defined_out": [
        "account#0",
        "asset#0",
        "len%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "asset#0",
        "account#0",
        "tmp%4#0",
        "len%2#0"
      ]
    },
    "423": {
      "op": "intc_1 // 8",
      "stack_out": [
        "asset#0",
        "account#0",
        "tmp%4#0",
        "len%2#0",
        "8"
      ]
    },
    "424": {
      "op": "==",
      "defined_out": [
        "account#0",
        "asset#0",
        "eq%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "asset#0",
        "account#0",
        "tmp%4#0",
        "eq%2#0"
      ]
    },
    "425": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "asset#0",
        "account#0",
        "tmp%4#0"
      ]
    },
    "426": {
      "op": "btoi",
      "defined_out": [
        "account#0",
        "app#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "account#0",
        "app#0"
      ]
    },
    "427": {
      "op": "uncover 2",
      "stack_out": [
        "account#0",
        "app#0",
        "asset#0"
      ]
    },
    "429": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "account#0",
        "app#0",
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "account#0",
        "app#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "431": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "account#0",
        "app#0",
        "value%0#0"
      ]
    },
    "432": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "value%0#0",
        "account#0"
      ]
    },
    "434": {
      "op": "concat",
      "defined_out": [
        "app#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "tmp%1#1"
      ]
    },
    "435": {
      "op": "swap",
      "stack_out": [
        "tmp%1#1",
        "app#0"
      ]
    },
    "436": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "tmp%1#1",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%1#1",
        "value%1#0",
        "check%1#0"
      ]
    },
    "438": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%1#1",
        "value%1#0"
      ]
    },
    "439": {
      "op": "concat",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1"
      ]
    },
    "440": {
      "op": "log",
      "stack_out": []
    },
    "441": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "442": {
      "op": "return",
      "stack_out": []
    },
    "443": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_address[routing]",
      "params": {},
      "block": "log_address",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "address#0"
      ],
      "stack_out": [
        "address#0"
      ]
    },
    "446": {
      "op": "dup",
      "defined_out": [
        "address#0",
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0",
        "address#0 (copy)"
      ]
    },
    "447": {
      "op": "len",
      "defined_out": [
        "address#0",
        "len%0#0"
      ],
      "stack_out": [
        "address#0",
        "len%0#0"
      ]
    },
    "448": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "address#0",
        "len%0#0"
      ],
      "stack_out": [
        "address#0",
        "len%0#0",
        "32"
      ]
    },
    "450": {
      "op": "==",
      "defined_out": [
        "address#0",
        "eq%0#0"
      ],
      "stack_out": [
        "address#0",
        "eq%0#0"
      ]
    },
    "451": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "stack_out": [
        "address#0"
      ]
    },
    "452": {
      "op": "log",
      "stack_out": []
    },
    "453": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "454": {
      "op": "return",
      "stack_out": []
    },
    "455": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_string[routing]",
      "params": {},
      "block": "echo_native_string",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "458": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "459": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "460": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "461": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "462": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "463": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "465": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "466": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "467": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "468": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "471": {
      "op": "bytec_1 // \"echo: \"",
      "defined_out": [
        "\"echo: \"",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "\"echo: \""
      ]
    },
    "472": {
      "op": "swap",
      "stack_out": [
        "\"echo: \"",
        "value#0"
      ]
    },
    "473": {
      "op": "concat",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "474": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "475": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%0#0"
      ]
    },
    "476": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "477": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "480": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "481": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "482": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "483": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "484": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "485": {
      "op": "log",
      "stack_out": []
    },
    "486": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "487": {
      "op": "return",
      "stack_out": []
    },
    "488": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_bytes[routing]",
      "params": {},
      "block": "echo_native_bytes",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "491": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "492": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "493": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "494": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "495": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "496": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "498": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "499": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "500": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "501": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "504": {
      "op": "bytec_1 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "0x6563686f3a20"
      ]
    },
    "505": {
      "op": "swap",
      "stack_out": [
        "0x6563686f3a20",
        "value#0"
      ]
    },
    "506": {
      "op": "concat",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "507": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "508": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%0#0"
      ]
    },
    "509": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "510": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "513": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "514": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "515": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "516": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "517": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "518": {
      "op": "log",
      "stack_out": []
    },
    "519": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "520": {
      "op": "return",
      "stack_out": []
    },
    "521": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_uint64[routing]",
      "params": {},
      "block": "echo_native_uint64",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "524": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "525": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "526": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "527": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "528": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "529": {
      "op": "btoi",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "530": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "1"
      ]
    },
    "531": {
      "op": "+",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "532": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "533": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "534": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "535": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "536": {
      "op": "log",
      "stack_out": []
    },
    "537": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "538": {
      "op": "return",
      "stack_out": []
    },
    "539": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_biguint[routing]",
      "params": {},
      "block": "echo_native_biguint",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "542": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "543": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "len%0#0"
      ]
    },
    "544": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "len%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "len%0#0",
        "64"
      ]
    },
    "546": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "eq%0#0"
      ]
    },
    "547": {
      "error": "invalid number of bytes for arc4.uint512",
      "op": "assert // invalid number of bytes for arc4.uint512",
      "stack_out": [
        "value#0"
      ]
    },
    "548": {
      "op": "bytec_3 // 0x01",
      "defined_out": [
        "0x01",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "0x01"
      ]
    },
    "549": {
      "op": "b+",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "550": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "551": {
      "op": "len",
      "defined_out": [
        "aggregate%value_len%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "aggregate%value_len%0#0"
      ]
    },
    "552": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "tmp%0#1",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "554": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "aggregate%len_ok%0#0"
      ]
    },
    "555": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "556": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "tmp%0#1",
        "64"
      ]
    },
    "558": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "aggregate%bzero%0#0"
      ]
    },
    "559": {
      "op": "b|",
      "defined_out": [
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "560": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "0x151f7c75"
      ]
    },
    "561": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "562": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "563": {
      "op": "log",
      "stack_out": []
    },
    "564": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "565": {
      "op": "return",
      "stack_out": []
    },
    "566": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_resource_by_index[routing]",
      "params": {},
      "block": "echo_resource_by_index",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "569": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "570": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "571": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "1"
      ]
    },
    "572": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "573": {
      "error": "invalid number of bytes for arc4.uint8",
      "op": "assert // invalid number of bytes for arc4.uint8",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "574": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "575": {
      "op": "txnas Assets",
      "defined_out": [
        "asset#0"
      ],
      "stack_out": [
        "asset#0"
      ]
    },
    "577": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "asset#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%3#0"
      ]
    },
    "580": {
      "op": "dup",
      "defined_out": [
        "asset#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "581": {
      "op": "len",
      "defined_out": [
        "asset#0",
        "len%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%3#0",
        "len%1#0"
      ]
    },
    "582": {
      "op": "intc_0 // 1",
      "stack_out": [
        "asset#0",
        "tmp%3#0",
        "len%1#0",
        "1"
      ]
    },
    "583": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "eq%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%3#0",
        "eq%1#0"
      ]
    },
    "584": {
      "error": "invalid number of bytes for arc4.uint8",
      "op": "assert // invalid number of bytes for arc4.uint8",
      "stack_out": [
        "asset#0",
        "tmp%3#0"
      ]
    },
    "585": {
      "op": "btoi",
      "defined_out": [
        "asset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%4#0"
      ]
    },
    "586": {
      "op": "txnas Applications",
      "defined_out": [
        "app#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0"
      ]
    },
    "588": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "app#0",
        "asset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "tmp%6#0"
      ]
    },
    "591": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "asset#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "592": {
      "op": "len",
      "defined_out": [
        "app#0",
        "asset#0",
        "len%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "tmp%6#0",
        "len%2#0"
      ]
    },
    "593": {
      "op": "intc_0 // 1",
      "stack_out": [
        "asset#0",
        "app#0",
        "tmp%6#0",
        "len%2#0",
        "1"
      ]
    },
    "594": {
      "op": "==",
      "defined_out": [
        "app#0",
        "asset#0",
        "eq%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "tmp%6#0",
        "eq%2#0"
      ]
    },
    "595": {
      "error": "invalid number of bytes for arc4.uint8",
      "op": "assert // invalid number of bytes for arc4.uint8",
      "stack_out": [
        "asset#0",
        "app#0",
        "tmp%6#0"
      ]
    },
    "596": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "asset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "tmp%7#0"
      ]
    },
    "597": {
      "op": "txnas Accounts",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "599": {
      "op": "txna ApplicationArgs 1",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%0#0"
      ]
    },
    "602": {
      "op": "btoi",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "asset_idx#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "asset_idx#0"
      ]
    },
    "603": {
      "op": "txnas Assets",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%2#1"
      ]
    },
    "605": {
      "op": "dig 3",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "asset#0 (copy)",
        "tmp%2#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%2#1",
        "asset#0 (copy)"
      ]
    },
    "607": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%3#1"
      ]
    },
    "608": {
      "error": "expected asset to be passed by index",
      "op": "assert // expected asset to be passed by index",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "609": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%4#1"
      ]
    },
    "612": {
      "op": "btoi",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_idx#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "app_idx#0"
      ]
    },
    "613": {
      "op": "txnas Applications",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%6#1"
      ]
    },
    "615": {
      "op": "dig 2",
      "defined_out": [
        "acc#0",
        "app#0",
        "app#0 (copy)",
        "asset#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%6#1",
        "app#0 (copy)"
      ]
    },
    "617": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%7#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%7#1"
      ]
    },
    "618": {
      "error": "expected application to be passed by index",
      "op": "assert // expected application to be passed by index",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "619": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%8#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%8#1"
      ]
    },
    "622": {
      "op": "btoi",
      "defined_out": [
        "acc#0",
        "acc_idx#0",
        "app#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "acc_idx#0"
      ]
    },
    "623": {
      "op": "txnas Accounts",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%10#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%10#1"
      ]
    },
    "625": {
      "op": "dig 1",
      "defined_out": [
        "acc#0",
        "acc#0 (copy)",
        "app#0",
        "asset#0",
        "tmp%10#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%10#1",
        "acc#0 (copy)"
      ]
    },
    "627": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%11#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%11#1"
      ]
    },
    "628": {
      "error": "expected account to be passed by index",
      "op": "assert // expected account to be passed by index",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "629": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "asset#0"
      ]
    },
    "631": {
      "op": "itob",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "632": {
      "op": "uncover 2",
      "stack_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0"
      ]
    },
    "634": {
      "op": "itob",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "635": {
      "op": "concat",
      "defined_out": [
        "acc#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "acc#0",
        "aggregate%head%1#0"
      ]
    },
    "636": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%1#0",
        "acc#0"
      ]
    },
    "637": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0"
      ]
    },
    "638": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "0x151f7c75"
      ]
    },
    "639": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%head%2#0"
      ]
    },
    "640": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "641": {
      "op": "log",
      "stack_out": []
    },
    "642": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "643": {
      "op": "return",
      "stack_out": []
    },
    "644": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_resource_by_value[routing]",
      "params": {},
      "block": "echo_resource_by_value",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "647": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "648": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "649": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "650": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "651": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "652": {
      "op": "btoi",
      "defined_out": [
        "asset#0"
      ],
      "stack_out": [
        "asset#0"
      ]
    },
    "653": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%2#0"
      ]
    },
    "656": {
      "op": "dup",
      "defined_out": [
        "asset#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "657": {
      "op": "len",
      "defined_out": [
        "asset#0",
        "len%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%2#0",
        "len%1#0"
      ]
    },
    "658": {
      "op": "intc_1 // 8",
      "stack_out": [
        "asset#0",
        "tmp%2#0",
        "len%1#0",
        "8"
      ]
    },
    "659": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "eq%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "660": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "asset#0",
        "tmp%2#0"
      ]
    },
    "661": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0"
      ]
    },
    "662": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "665": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "acc#0 (copy)",
        "app#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "acc#0 (copy)"
      ]
    },
    "666": {
      "op": "len",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "len%2#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "len%2#0"
      ]
    },
    "667": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "acc#0",
        "app#0",
        "asset#0",
        "len%2#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "len%2#0",
        "32"
      ]
    },
    "669": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "eq%2#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "eq%2#0"
      ]
    },
    "670": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "671": {
      "op": "txna ApplicationArgs 1",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%0#0"
      ]
    },
    "674": {
      "op": "btoi",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "asset_id#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "asset_id#0"
      ]
    },
    "675": {
      "op": "dig 3",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "asset#0 (copy)",
        "asset_id#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "asset_id#0",
        "asset#0 (copy)"
      ]
    },
    "677": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%2#1"
      ]
    },
    "678": {
      "error": "expected asset to be passed by value",
      "op": "assert // expected asset to be passed by value",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "679": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%3#1"
      ]
    },
    "682": {
      "op": "btoi",
      "defined_out": [
        "acc#0",
        "app#0",
        "app_id#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "app_id#0"
      ]
    },
    "683": {
      "op": "dig 2",
      "defined_out": [
        "acc#0",
        "app#0",
        "app#0 (copy)",
        "app_id#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "app_id#0",
        "app#0 (copy)"
      ]
    },
    "685": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%5#1"
      ]
    },
    "686": {
      "error": "expected application to be passed by value",
      "op": "assert // expected application to be passed by value",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "687": {
      "op": "dup"
    },
    "688": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "acc#0",
        "acc#0 (copy)",
        "address#0",
        "app#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "acc#0 (copy)",
        "address#0"
      ]
    },
    "691": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "asset#0",
        "tmp%7#1"
      ],
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0",
        "tmp%7#1"
      ]
    },
    "692": {
      "error": "expected account to be passed by value",
      "op": "assert // expected account to be passed by value",
      "stack_out": [
        "asset#0",
        "app#0",
        "acc#0"
      ]
    },
    "693": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "asset#0"
      ]
    },
    "695": {
      "op": "itob",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "696": {
      "op": "uncover 2",
      "stack_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "app#0"
      ]
    },
    "698": {
      "op": "itob",
      "defined_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "acc#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "699": {
      "op": "concat",
      "defined_out": [
        "acc#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "acc#0",
        "aggregate%head%1#0"
      ]
    },
    "700": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%1#0",
        "acc#0"
      ]
    },
    "701": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0"
      ]
    },
    "702": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "0x151f7c75"
      ]
    },
    "703": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%head%2#0"
      ]
    },
    "704": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "705": {
      "op": "log",
      "stack_out": []
    },
    "706": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "707": {
      "op": "return",
      "stack_out": []
    },
    "708": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_tuple[routing]",
      "params": {},
      "block": "echo_native_tuple",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "711": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "712": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "713": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "714": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "715": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "716": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "718": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "719": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "720": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "721": {
      "op": "extract 2 0",
      "defined_out": [
        "s#0"
      ],
      "stack_out": [
        "s#0"
      ]
    },
    "724": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "s#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "s#0",
        "tmp%2#0"
      ]
    },
    "727": {
      "op": "dup",
      "defined_out": [
        "s#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "s#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "728": {
      "op": "intc_2 // 0",
      "stack_out": [
        "s#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "729": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%1#0",
        "s#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "s#0",
        "tmp%2#0",
        "aggregate%array_length%1#0"
      ]
    },
    "730": {
      "op": "intc_3 // 2",
      "stack_out": [
        "s#0",
        "tmp%2#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "731": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "s#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "s#0",
        "tmp%2#0",
        "add%1#0"
      ]
    },
    "732": {
      "op": "dig 1",
      "stack_out": [
        "s#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "734": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%1#0",
        "s#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "s#0",
        "tmp%2#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "735": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "s#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "s#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "736": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": [
        "s#0",
        "tmp%2#0"
      ]
    },
    "737": {
      "op": "extract 2 0",
      "defined_out": [
        "b#0",
        "s#0"
      ],
      "stack_out": [
        "s#0",
        "b#0"
      ]
    },
    "740": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "b#0",
        "s#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "tmp%4#0"
      ]
    },
    "743": {
      "op": "dup",
      "defined_out": [
        "b#0",
        "s#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "744": {
      "op": "len",
      "defined_out": [
        "b#0",
        "len%2#0",
        "s#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "tmp%4#0",
        "len%2#0"
      ]
    },
    "745": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "b#0",
        "len%2#0",
        "s#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "tmp%4#0",
        "len%2#0",
        "8"
      ]
    },
    "746": {
      "op": "==",
      "defined_out": [
        "b#0",
        "eq%2#0",
        "s#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "tmp%4#0",
        "eq%2#0"
      ]
    },
    "747": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "s#0",
        "b#0",
        "tmp%4#0"
      ]
    },
    "748": {
      "op": "btoi",
      "defined_out": [
        "b#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "u#0"
      ]
    },
    "749": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "b#0",
        "bu#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "u#0",
        "bu#0"
      ]
    },
    "752": {
      "op": "dup",
      "defined_out": [
        "b#0",
        "bu#0",
        "bu#0 (copy)",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "u#0",
        "bu#0",
        "bu#0 (copy)"
      ]
    },
    "753": {
      "op": "len",
      "defined_out": [
        "b#0",
        "bu#0",
        "len%3#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "u#0",
        "bu#0",
        "len%3#0"
      ]
    },
    "754": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "b#0",
        "bu#0",
        "len%3#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "u#0",
        "bu#0",
        "len%3#0",
        "64"
      ]
    },
    "756": {
      "op": "==",
      "defined_out": [
        "b#0",
        "bu#0",
        "eq%3#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "u#0",
        "bu#0",
        "eq%3#0"
      ]
    },
    "757": {
      "error": "invalid number of bytes for arc4.uint512",
      "op": "assert // invalid number of bytes for arc4.uint512",
      "stack_out": [
        "s#0",
        "b#0",
        "u#0",
        "bu#0"
      ]
    },
    "758": {
      "op": "bytec_1 // \"echo: \"",
      "defined_out": [
        "\"echo: \"",
        "b#0",
        "bu#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "u#0",
        "bu#0",
        "\"echo: \""
      ]
    },
    "759": {
      "op": "uncover 4",
      "stack_out": [
        "b#0",
        "u#0",
        "bu#0",
        "\"echo: \"",
        "s#0"
      ]
    },
    "761": {
      "op": "concat",
      "stack_out": [
        "b#0",
        "u#0",
        "bu#0",
        "tmp%0#0"
      ]
    },
    "762": {
      "op": "bytec_1 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "b#0",
        "bu#0",
        "tmp%0#0",
        "u#0"
      ],
      "stack_out": [
        "b#0",
        "u#0",
        "bu#0",
        "tmp%0#0",
        "0x6563686f3a20"
      ]
    },
    "763": {
      "op": "uncover 4",
      "stack_out": [
        "u#0",
        "bu#0",
        "tmp%0#0",
        "0x6563686f3a20",
        "b#0"
      ]
    },
    "765": {
      "op": "concat",
      "defined_out": [
        "bu#0",
        "tmp%0#0",
        "tmp%1#1",
        "u#0"
      ],
      "stack_out": [
        "u#0",
        "bu#0",
        "tmp%0#0",
        "tmp%1#1"
      ]
    },
    "766": {
      "op": "uncover 3",
      "stack_out": [
        "bu#0",
        "tmp%0#0",
        "tmp%1#1",
        "u#0"
      ]
    },
    "768": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "bu#0",
        "tmp%0#0",
        "tmp%1#1",
        "u#0"
      ],
      "stack_out": [
        "bu#0",
        "tmp%0#0",
        "tmp%1#1",
        "u#0",
        "1"
      ]
    },
    "769": {
      "op": "+",
      "defined_out": [
        "bu#0",
        "tmp%0#0",
        "tmp%1#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "bu#0",
        "tmp%0#0",
        "tmp%1#1",
        "tmp%2#1"
      ]
    },
    "770": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#1",
        "tmp%2#1",
        "bu#0"
      ]
    },
    "772": {
      "op": "bytec_3 // 0x01",
      "defined_out": [
        "0x01",
        "bu#0",
        "tmp%0#0",
        "tmp%1#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#1",
        "tmp%2#1",
        "bu#0",
        "0x01"
      ]
    },
    "773": {
      "op": "b+",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ]
    },
    "774": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1",
        "tmp%0#0 (copy)"
      ]
    },
    "776": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%0#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%length%0#0"
      ]
    },
    "777": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%0#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%as_bytes%0#0"
      ]
    },
    "778": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%length_uint16%0#0"
      ]
    },
    "781": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "783": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%encoded_value%0#0"
      ]
    },
    "784": {
      "op": "dup",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%0#0 (copy)",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%0#0 (copy)"
      ]
    },
    "785": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "786": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%data_length%0#0",
        "76"
      ]
    },
    "788": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "789": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "tmp%1#1",
        "tmp%1#1 (copy)",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%1#1 (copy)"
      ]
    },
    "791": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%length%1#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length%1#0"
      ]
    },
    "792": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "793": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%length_uint16%1#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "796": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0",
        "tmp%1#1"
      ]
    },
    "798": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "799": {
      "op": "swap",
      "stack_out": [
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "800": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "801": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "804": {
      "op": "pushbytes 0x004c",
      "defined_out": [
        "0x004c",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%1#0",
        "0x004c"
      ]
    },
    "808": {
      "op": "swap",
      "stack_out": [
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "0x004c",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "809": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%1#0",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%1#0"
      ]
    },
    "810": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%1#0",
        "tmp%2#1"
      ]
    },
    "812": {
      "op": "itob",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "813": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0"
      ]
    },
    "814": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "tmp%3#1",
        "tmp%3#1 (copy)"
      ],
      "stack_out": [
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "tmp%3#1 (copy)"
      ]
    },
    "816": {
      "op": "len",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "aggregate%value_len%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "aggregate%value_len%0#0"
      ]
    },
    "817": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "819": {
      "op": "<=",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "aggregate%len_ok%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "820": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0"
      ]
    },
    "821": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "64"
      ]
    },
    "823": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "aggregate%bzero%0#0"
      ]
    },
    "824": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "aggregate%bzero%0#0",
        "tmp%3#1"
      ]
    },
    "826": {
      "op": "b|",
      "defined_out": [
        "aggregate%arc4_encoded%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "827": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0"
      ]
    },
    "828": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "830": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "aggregate%concat%0#0"
      ]
    },
    "831": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "832": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0"
      ]
    },
    "833": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "0x151f7c75"
      ]
    },
    "834": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ]
    },
    "835": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "836": {
      "op": "log",
      "stack_out": []
    },
    "837": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "838": {
      "op": "return",
      "stack_out": []
    },
    "839": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_nested_tuple[routing]",
      "params": {},
      "block": "echo_nested_tuple",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "842": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "843": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "844": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0"
      ]
    },
    "845": {
      "op": "dup",
      "defined_out": [
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ]
    },
    "846": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "4"
      ]
    },
    "848": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0",
        "eq%0#0"
      ]
    },
    "849": {
      "error": "invalid tail pointer at index 0 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))",
      "op": "assert // invalid tail pointer at index 0 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))",
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0"
      ]
    },
    "850": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "852": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "853": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "854": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "856": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0 (copy)",
        "extract_uint16%0#0"
      ]
    },
    "858": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0 (copy)",
        "extract_uint16%0#0",
        "aggregate%extract_uint16%1#0 (copy)"
      ]
    },
    "860": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0"
      ]
    },
    "861": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "862": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "0"
      ]
    },
    "863": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "extract_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "extract_uint16%1#0"
      ]
    },
    "864": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "extract_uint16%1#0",
        "extract_uint16%1#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "extract_uint16%1#0",
        "extract_uint16%1#0 (copy)"
      ]
    },
    "865": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "extract_uint16%1#0",
        "extract_uint16%1#0 (copy)",
        "4"
      ]
    },
    "867": {
      "op": "==",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "eq%1#0",
        "extract_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "extract_uint16%1#0",
        "eq%1#0"
      ]
    },
    "868": {
      "error": "invalid tail pointer at index 0 of ((len+utf8[]),(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 0 of ((len+utf8[]),(len+utf8[]))",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "extract_uint16%1#0"
      ]
    },
    "869": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "extract_uint16%1#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "871": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "extract_uint16%1#0",
        "aggregate%substring3%0#0 (copy)",
        "2"
      ]
    },
    "872": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%0#0",
        "extract_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "extract_uint16%1#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "873": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "extract_uint16%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "875": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%0#0 (copy)",
        "extract_uint16%1#0"
      ]
    },
    "877": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%extract_uint16%5#0 (copy)",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "extract_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%0#0 (copy)",
        "extract_uint16%1#0",
        "aggregate%extract_uint16%5#0 (copy)"
      ]
    },
    "879": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%2#0"
      ]
    },
    "880": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%2#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%2#0 (copy)"
      ]
    },
    "881": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%2#0 (copy)",
        "0"
      ]
    },
    "882": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%2#0",
        "aggregate%array_length%0#0"
      ]
    },
    "883": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "aggregate%array_length%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%2#0",
        "aggregate%array_length%0#0",
        "6"
      ]
    },
    "885": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%2#0",
        "add%1#0"
      ]
    },
    "886": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%2#0",
        "add%1#0",
        "aggregate%extract_uint16%5#0 (copy)"
      ]
    },
    "888": {
      "op": "dig 1",
      "defined_out": [
        "add%1#0",
        "add%1#0 (copy)",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%extract_uint16%5#0 (copy)",
        "aggregate%substring3%0#0",
        "aggregate%substring3%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%2#0",
        "add%1#0",
        "aggregate%extract_uint16%5#0 (copy)",
        "add%1#0 (copy)"
      ]
    },
    "890": {
      "op": "==",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%2#0",
        "eq%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%2#0",
        "add%1#0",
        "eq%2#0"
      ]
    },
    "891": {
      "error": "invalid tail pointer at index 1 of ((len+utf8[]),(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 1 of ((len+utf8[]),(len+utf8[]))",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%2#0",
        "add%1#0"
      ]
    },
    "892": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%2#0",
        "add%1#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "894": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%2#0",
        "add%1#0",
        "aggregate%len%0#0"
      ]
    },
    "895": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%2#0",
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "897": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "899": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "add%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%0#0"
      ]
    },
    "901": {
      "op": "substring3",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "tmp%0#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "add%1#0",
        "tuple_of_tuples.0.1#0"
      ]
    },
    "902": {
      "op": "dup",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "tmp%0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.0.1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "add%1#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.0.1#0 (copy)"
      ]
    },
    "903": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "add%1#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.0.1#0 (copy)",
        "0"
      ]
    },
    "904": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%1#0",
        "aggregate%array_length%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "tmp%0#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "add%1#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%array_length%1#0"
      ]
    },
    "905": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "add%1#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "906": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "add%2#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "tmp%0#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "add%1#0",
        "tuple_of_tuples.0.1#0",
        "add%2#0"
      ]
    },
    "907": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%2#0",
        "add%1#0"
      ]
    },
    "909": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "tmp%0#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%3#0"
      ]
    },
    "910": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%3#0",
        "4"
      ]
    },
    "912": {
      "op": "+",
      "defined_out": [
        "add%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "tmp%0#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0"
      ]
    },
    "913": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%extract_uint16%1#0 (copy)"
      ]
    },
    "915": {
      "op": "dig 1",
      "defined_out": [
        "add%4#0",
        "add%4#0 (copy)",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "aggregate%substring3%2#0",
        "tmp%0#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "add%4#0 (copy)"
      ]
    },
    "917": {
      "op": "==",
      "defined_out": [
        "add%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "eq%3#0",
        "tmp%0#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "eq%3#0"
      ]
    },
    "918": {
      "error": "invalid tail pointer at index 1 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))",
      "op": "assert // invalid tail pointer at index 1 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0"
      ]
    },
    "919": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "tmp%0#0 (copy)"
      ]
    },
    "921": {
      "op": "len",
      "defined_out": [
        "add%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0",
        "aggregate%substring3%2#0",
        "tmp%0#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0"
      ]
    },
    "922": {
      "op": "uncover 5",
      "stack_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "tmp%0#0"
      ]
    },
    "924": {
      "op": "uncover 5",
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "tmp%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "926": {
      "op": "dig 2",
      "defined_out": [
        "add%4#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0",
        "aggregate%len%1#0 (copy)",
        "aggregate%substring3%2#0",
        "tmp%0#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0 (copy)"
      ]
    },
    "928": {
      "op": "substring3",
      "defined_out": [
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%5#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0"
      ]
    },
    "929": {
      "op": "dup",
      "defined_out": [
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "930": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "16"
      ]
    },
    "932": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%5#0",
        "extract_uint16%4#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0",
        "extract_uint16%4#0"
      ]
    },
    "933": {
      "op": "dup",
      "defined_out": [
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%5#0",
        "extract_uint16%4#0",
        "extract_uint16%4#0 (copy)",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0",
        "extract_uint16%4#0",
        "extract_uint16%4#0 (copy)"
      ]
    },
    "934": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%5#0",
        "extract_uint16%4#0",
        "extract_uint16%4#0 (copy)",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0",
        "extract_uint16%4#0",
        "extract_uint16%4#0 (copy)",
        "18"
      ]
    },
    "936": {
      "op": "==",
      "defined_out": [
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%5#0",
        "eq%4#0",
        "extract_uint16%4#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0",
        "extract_uint16%4#0",
        "eq%4#0"
      ]
    },
    "937": {
      "error": "invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]))",
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0",
        "extract_uint16%4#0"
      ]
    },
    "938": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0",
        "extract_uint16%4#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "940": {
      "op": "len",
      "defined_out": [
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%len%3#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%5#0",
        "extract_uint16%4#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0",
        "extract_uint16%4#0",
        "aggregate%len%3#0"
      ]
    },
    "941": {
      "op": "dig 2",
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0",
        "extract_uint16%4#0",
        "aggregate%len%3#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "943": {
      "op": "cover 2",
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "extract_uint16%4#0",
        "aggregate%len%3#0"
      ]
    },
    "945": {
      "op": "substring3",
      "defined_out": [
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0"
      ]
    },
    "946": {
      "op": "dup",
      "defined_out": [
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%7#0 (copy)",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%7#0 (copy)"
      ]
    },
    "947": {
      "op": "intc_2 // 0",
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%7#0 (copy)",
        "0"
      ]
    },
    "948": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%4#0",
        "aggregate%array_length%2#0",
        "aggregate%len%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "aggregate%array_length%2#0"
      ]
    },
    "949": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "20",
        "add%4#0",
        "aggregate%array_length%2#0",
        "aggregate%len%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "aggregate%array_length%2#0",
        "20"
      ]
    },
    "951": {
      "op": "+",
      "defined_out": [
        "add%4#0",
        "add%6#0",
        "aggregate%len%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "add%4#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "add%6#0"
      ]
    },
    "952": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "add%6#0",
        "add%4#0"
      ]
    },
    "954": {
      "op": "+",
      "defined_out": [
        "add%7#0",
        "aggregate%len%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%len%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "add%7#0"
      ]
    },
    "955": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "add%7#0",
        "aggregate%len%1#0"
      ]
    },
    "957": {
      "op": "==",
      "defined_out": [
        "aggregate%substring3%2#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "eq%5#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "eq%5#0"
      ]
    },
    "958": {
      "error": "invalid number of bytes for arc4.tuple<arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>>,arc4.tuple<arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>>>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>>,arc4.tuple<arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>>>",
      "stack_out": [
        "aggregate%substring3%2#0",
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0"
      ]
    },
    "959": {
      "op": "uncover 3",
      "stack_out": [
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%2#0"
      ]
    },
    "961": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "tuple_of_tuples.0.0#0"
      ]
    },
    "964": {
      "op": "dig 2",
      "stack_out": [
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "tuple_of_tuples.0.0#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "966": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "tuple_of_tuples.0.0#0",
        "aggregate%substring3%5#0 (copy)",
        "0"
      ]
    },
    "967": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%7#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.1.0#0"
      ]
    },
    "968": {
      "op": "uncover 2",
      "stack_out": [
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%5#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.1.0#0",
        "aggregate%substring3%7#0"
      ]
    },
    "970": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%substring3%5#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%5#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ]
    },
    "973": {
      "op": "bytec_1 // \"echo: \"",
      "defined_out": [
        "\"echo: \"",
        "aggregate%substring3%5#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.0.1#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%5#0",
        "tuple_of_tuples.0.0#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "\"echo: \""
      ]
    },
    "974": {
      "op": "uncover 3",
      "stack_out": [
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%5#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "\"echo: \"",
        "tuple_of_tuples.0.0#0"
      ]
    },
    "976": {
      "op": "concat",
      "stack_out": [
        "tuple_of_tuples.0.1#0",
        "aggregate%substring3%5#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#0"
      ]
    },
    "977": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%substring3%5#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "tuple_of_tuples.0.1#0"
      ]
    },
    "979": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%substring3%5#0",
        "extract_to_end%0#0",
        "tmp%0#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%5#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "extract_to_end%0#0"
      ]
    },
    "982": {
      "op": "bytec_2 // 0x00066563686f3a20",
      "defined_out": [
        "0x00066563686f3a20",
        "aggregate%substring3%5#0",
        "extract_to_end%0#0",
        "tmp%0#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%5#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "extract_to_end%0#0",
        "0x00066563686f3a20"
      ]
    },
    "983": {
      "op": "swap",
      "stack_out": [
        "aggregate%substring3%5#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "0x00066563686f3a20",
        "extract_to_end%0#0"
      ]
    },
    "984": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%substring3%5#0",
        "concat%0#0",
        "tmp%0#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%5#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "concat%0#0"
      ]
    },
    "985": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%5#0",
        "concat%0#0",
        "concat%0#0 (copy)",
        "tmp%0#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%5#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "986": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%substring3%5#0",
        "concat%0#0",
        "extract_to_end%1#0",
        "tmp%0#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%5#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "concat%0#0",
        "extract_to_end%1#0"
      ]
    },
    "989": {
      "op": "len",
      "defined_out": [
        "aggregate%substring3%5#0",
        "concat%0#0",
        "len%0#1",
        "tmp%0#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%5#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "concat%0#0",
        "len%0#1"
      ]
    },
    "990": {
      "op": "itob",
      "defined_out": [
        "aggregate%substring3%5#0",
        "as_bytes%0#0",
        "concat%0#0",
        "tmp%0#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%5#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "991": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%substring3%5#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "tmp%0#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%5#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "994": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%substring3%5#0",
        "replace%0#0",
        "tmp%0#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%5#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "replace%0#0"
      ]
    },
    "996": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%substring3%5#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "replace%0#0",
        "tuple_of_tuples.1.0#0"
      ]
    },
    "998": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%substring3%5#0",
        "replace%0#0",
        "tmp%0#0",
        "tuple_of_tuples.1.0#0",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%5#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "replace%0#0",
        "tuple_of_tuples.1.0#0",
        "1"
      ]
    },
    "999": {
      "op": "+",
      "defined_out": [
        "aggregate%substring3%5#0",
        "replace%0#0",
        "tmp%0#0",
        "tmp%2#1",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "aggregate%substring3%5#0",
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "replace%0#0",
        "tmp%2#1"
      ]
    },
    "1000": {
      "op": "uncover 4",
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "replace%0#0",
        "tmp%2#1",
        "aggregate%substring3%5#0"
      ]
    },
    "1002": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "aggregate%substring3%5#0",
        "replace%0#0",
        "tmp%0#0",
        "tmp%2#1",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "replace%0#0",
        "tmp%2#1",
        "aggregate%substring3%5#0",
        "8"
      ]
    },
    "1003": {
      "op": "extract_uint64",
      "defined_out": [
        "replace%0#0",
        "tmp%0#0",
        "tmp%2#1",
        "tmp%3#1",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "replace%0#0",
        "tmp%2#1",
        "tmp%3#1"
      ]
    },
    "1004": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "replace%0#0",
        "tmp%2#1",
        "tmp%3#1",
        "1"
      ]
    },
    "1005": {
      "op": "+",
      "defined_out": [
        "replace%0#0",
        "tmp%0#0",
        "tmp%2#1",
        "tmp%4#1",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "replace%0#0",
        "tmp%2#1",
        "tmp%4#1"
      ]
    },
    "1006": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "replace%0#0",
        "tmp%0#0",
        "tmp%2#1",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1007": {
      "op": "bytec_1 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "aggregate%val_as_bytes%0#0",
        "replace%0#0",
        "tmp%0#0",
        "tmp%2#1",
        "tuple_of_tuples.1.2#0"
      ],
      "stack_out": [
        "tuple_of_tuples.1.2#0",
        "tmp%0#0",
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "0x6563686f3a20"
      ]
    },
    "1008": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "0x6563686f3a20",
        "tuple_of_tuples.1.2#0"
      ]
    },
    "1010": {
      "op": "concat",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "replace%0#0",
        "tmp%0#0",
        "tmp%2#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1"
      ]
    },
    "1011": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "tmp%0#0 (copy)"
      ]
    },
    "1013": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "aggregate%val_as_bytes%0#0",
        "replace%0#0",
        "tmp%0#0",
        "tmp%2#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%length%1#0"
      ]
    },
    "1014": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%val_as_bytes%0#0",
        "replace%0#0",
        "tmp%0#0",
        "tmp%2#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%as_bytes%1#0"
      ]
    },
    "1015": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "aggregate%val_as_bytes%0#0",
        "replace%0#0",
        "tmp%0#0",
        "tmp%2#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%length_uint16%1#0"
      ]
    },
    "1018": {
      "op": "uncover 5",
      "stack_out": [
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%length_uint16%1#0",
        "tmp%0#0"
      ]
    },
    "1020": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%1#0",
        "aggregate%val_as_bytes%0#0",
        "replace%0#0",
        "tmp%2#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%encoded_value%1#0"
      ]
    },
    "1021": {
      "op": "dup",
      "defined_out": [
        "aggregate%encoded_value%1#0",
        "aggregate%encoded_value%1#0 (copy)",
        "aggregate%val_as_bytes%0#0",
        "replace%0#0",
        "tmp%2#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%encoded_value%1#0",
        "aggregate%encoded_value%1#0 (copy)"
      ]
    },
    "1022": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%val_as_bytes%0#0",
        "replace%0#0",
        "tmp%2#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%encoded_value%1#0",
        "aggregate%data_length%0#0"
      ]
    },
    "1023": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%encoded_value%1#0",
        "aggregate%data_length%0#0",
        "4"
      ]
    },
    "1025": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%val_as_bytes%0#0",
        "replace%0#0",
        "tmp%2#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%encoded_value%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "1026": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "aggregate%encoded_value%1#0",
        "aggregate%val_as_bytes%0#0",
        "replace%0#0",
        "tmp%2#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%encoded_value%1#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "1027": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%val_as_bytes%0#0",
        "replace%0#0",
        "tmp%2#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "1030": {
      "op": "bytec 4 // 0x0004",
      "defined_out": [
        "0x0004",
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%val_as_bytes%0#0",
        "replace%0#0",
        "tmp%2#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%1#0",
        "0x0004"
      ]
    },
    "1032": {
      "op": "swap",
      "stack_out": [
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%encoded_value%1#0",
        "0x0004",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "1033": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%1#0",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%0#0",
        "replace%0#0",
        "tmp%2#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%encoded_value%1#0",
        "aggregate%head%1#0"
      ]
    },
    "1034": {
      "op": "swap",
      "stack_out": [
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%head%1#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "1035": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%val_as_bytes%0#0",
        "replace%0#0",
        "tmp%2#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "replace%0#0",
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%concat%0#0"
      ]
    },
    "1036": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%concat%0#0",
        "replace%0#0"
      ]
    },
    "1038": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%2#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%concat%1#0"
      ]
    },
    "1039": {
      "op": "dup",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%concat%1#0 (copy)",
        "aggregate%val_as_bytes%0#0",
        "tmp%2#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%concat%1#0",
        "aggregate%concat%1#0 (copy)"
      ]
    },
    "1040": {
      "op": "len",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%data_length%2#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%2#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%concat%1#0",
        "aggregate%data_length%2#0"
      ]
    },
    "1041": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%concat%1#0",
        "aggregate%data_length%2#0",
        "4"
      ]
    },
    "1043": {
      "op": "+",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%2#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0"
      ]
    },
    "1044": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "tmp%2#1"
      ]
    },
    "1046": {
      "op": "itob",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%6#1",
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1047": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%6#1",
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1049": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%6#1",
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0"
      ]
    },
    "1050": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "tmp%6#1",
        "tmp%6#1 (copy)"
      ],
      "stack_out": [
        "tmp%6#1",
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "tmp%6#1 (copy)"
      ]
    },
    "1052": {
      "op": "len",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "aggregate%length%2#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%6#1",
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "aggregate%length%2#0"
      ]
    },
    "1053": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%5#0",
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%6#1",
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "1054": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "aggregate%length_uint16%2#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%6#1",
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "aggregate%length_uint16%2#0"
      ]
    },
    "1057": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "aggregate%length_uint16%2#0",
        "tmp%6#1"
      ]
    },
    "1059": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "aggregate%encoded_value%2#0"
      ]
    },
    "1060": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%4#0"
      ]
    },
    "1061": {
      "op": "pushbytes 0x0012",
      "defined_out": [
        "0x0012",
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%4#0",
        "0x0012"
      ]
    },
    "1065": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%5#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%5#0"
      ]
    },
    "1066": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%5#0",
        "aggregate%encoded_value%2#0"
      ]
    },
    "1067": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%concat%2#0",
        "aggregate%current_tail_offset%2#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%concat%2#0"
      ]
    },
    "1068": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%concat%2#0",
        "aggregate%current_tail_offset%2#0"
      ]
    },
    "1069": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%7#0",
        "aggregate%concat%1#0",
        "aggregate%concat%2#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%concat%2#0",
        "aggregate%as_bytes%7#0"
      ]
    },
    "1070": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%concat%2#0",
        "aggregate%offset_as_uint16%4#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%concat%2#0",
        "aggregate%offset_as_uint16%4#0"
      ]
    },
    "1073": {
      "op": "bytec 4 // 0x0004",
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%concat%2#0",
        "aggregate%offset_as_uint16%4#0",
        "0x0004"
      ]
    },
    "1075": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%concat%2#0",
        "0x0004",
        "aggregate%offset_as_uint16%4#0"
      ]
    },
    "1076": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%concat%2#0",
        "aggregate%head%6#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%concat%2#0",
        "aggregate%head%6#0"
      ]
    },
    "1077": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%concat%2#0",
        "aggregate%head%6#0",
        "aggregate%concat%1#0"
      ]
    },
    "1079": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%2#0",
        "aggregate%concat%3#0"
      ],
      "stack_out": [
        "aggregate%concat%2#0",
        "aggregate%concat%3#0"
      ]
    },
    "1080": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%3#0",
        "aggregate%concat%2#0"
      ]
    },
    "1081": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%4#0"
      ],
      "stack_out": [
        "aggregate%concat%4#0"
      ]
    },
    "1082": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%4#0"
      ],
      "stack_out": [
        "aggregate%concat%4#0",
        "0x151f7c75"
      ]
    },
    "1083": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%concat%4#0"
      ]
    },
    "1084": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1085": {
      "op": "log",
      "stack_out": []
    },
    "1086": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1087": {
      "op": "return",
      "stack_out": []
    },
    "1088": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.return_args_after_14th[routing]",
      "params": {},
      "block": "return_args_after_14th",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "_a1#0"
      ],
      "stack_out": [
        "_a1#0"
      ]
    },
    "1091": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "1092": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "8"
      ]
    },
    "1093": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "1094": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": []
    },
    "1095": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "_a2#0"
      ],
      "stack_out": [
        "_a2#0"
      ]
    },
    "1098": {
      "op": "len",
      "defined_out": [
        "len%1#0"
      ],
      "stack_out": [
        "len%1#0"
      ]
    },
    "1099": {
      "op": "intc_1 // 8",
      "stack_out": [
        "len%1#0",
        "8"
      ]
    },
    "1100": {
      "op": "==",
      "defined_out": [
        "eq%1#0"
      ],
      "stack_out": [
        "eq%1#0"
      ]
    },
    "1101": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": []
    },
    "1102": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "_a3#0"
      ],
      "stack_out": [
        "_a3#0"
      ]
    },
    "1105": {
      "op": "len",
      "defined_out": [
        "len%2#0"
      ],
      "stack_out": [
        "len%2#0"
      ]
    },
    "1106": {
      "op": "intc_1 // 8",
      "stack_out": [
        "len%2#0",
        "8"
      ]
    },
    "1107": {
      "op": "==",
      "defined_out": [
        "eq%2#0"
      ],
      "stack_out": [
        "eq%2#0"
      ]
    },
    "1108": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": []
    },
    "1109": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "_a4#0"
      ],
      "stack_out": [
        "_a4#0"
      ]
    },
    "1112": {
      "op": "len",
      "defined_out": [
        "len%3#0"
      ],
      "stack_out": [
        "len%3#0"
      ]
    },
    "1113": {
      "op": "intc_1 // 8",
      "stack_out": [
        "len%3#0",
        "8"
      ]
    },
    "1114": {
      "op": "==",
      "defined_out": [
        "eq%3#0"
      ],
      "stack_out": [
        "eq%3#0"
      ]
    },
    "1115": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": []
    },
    "1116": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "_a5#0"
      ],
      "stack_out": [
        "_a5#0"
      ]
    },
    "1119": {
      "op": "len",
      "defined_out": [
        "len%4#0"
      ],
      "stack_out": [
        "len%4#0"
      ]
    },
    "1120": {
      "op": "intc_1 // 8",
      "stack_out": [
        "len%4#0",
        "8"
      ]
    },
    "1121": {
      "op": "==",
      "defined_out": [
        "eq%4#0"
      ],
      "stack_out": [
        "eq%4#0"
      ]
    },
    "1122": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": []
    },
    "1123": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "_a6#0"
      ],
      "stack_out": [
        "_a6#0"
      ]
    },
    "1126": {
      "op": "len",
      "defined_out": [
        "len%5#0"
      ],
      "stack_out": [
        "len%5#0"
      ]
    },
    "1127": {
      "op": "intc_1 // 8",
      "stack_out": [
        "len%5#0",
        "8"
      ]
    },
    "1128": {
      "op": "==",
      "defined_out": [
        "eq%5#0"
      ],
      "stack_out": [
        "eq%5#0"
      ]
    },
    "1129": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": []
    },
    "1130": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "_a7#0"
      ],
      "stack_out": [
        "_a7#0"
      ]
    },
    "1133": {
      "op": "len",
      "defined_out": [
        "len%6#0"
      ],
      "stack_out": [
        "len%6#0"
      ]
    },
    "1134": {
      "op": "intc_1 // 8",
      "stack_out": [
        "len%6#0",
        "8"
      ]
    },
    "1135": {
      "op": "==",
      "defined_out": [
        "eq%6#0"
      ],
      "stack_out": [
        "eq%6#0"
      ]
    },
    "1136": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": []
    },
    "1137": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "_a8#0"
      ],
      "stack_out": [
        "_a8#0"
      ]
    },
    "1140": {
      "op": "len",
      "defined_out": [
        "len%7#0"
      ],
      "stack_out": [
        "len%7#0"
      ]
    },
    "1141": {
      "op": "intc_1 // 8",
      "stack_out": [
        "len%7#0",
        "8"
      ]
    },
    "1142": {
      "op": "==",
      "defined_out": [
        "eq%7#0"
      ],
      "stack_out": [
        "eq%7#0"
      ]
    },
    "1143": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": []
    },
    "1144": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "_a9#0"
      ],
      "stack_out": [
        "_a9#0"
      ]
    },
    "1147": {
      "op": "len",
      "defined_out": [
        "len%8#0"
      ],
      "stack_out": [
        "len%8#0"
      ]
    },
    "1148": {
      "op": "intc_1 // 8",
      "stack_out": [
        "len%8#0",
        "8"
      ]
    },
    "1149": {
      "op": "==",
      "defined_out": [
        "eq%8#0"
      ],
      "stack_out": [
        "eq%8#0"
      ]
    },
    "1150": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": []
    },
    "1151": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "_a10#0"
      ],
      "stack_out": [
        "_a10#0"
      ]
    },
    "1154": {
      "op": "len",
      "defined_out": [
        "len%9#0"
      ],
      "stack_out": [
        "len%9#0"
      ]
    },
    "1155": {
      "op": "intc_1 // 8",
      "stack_out": [
        "len%9#0",
        "8"
      ]
    },
    "1156": {
      "op": "==",
      "defined_out": [
        "eq%9#0"
      ],
      "stack_out": [
        "eq%9#0"
      ]
    },
    "1157": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": []
    },
    "1158": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "_a11#0"
      ],
      "stack_out": [
        "_a11#0"
      ]
    },
    "1161": {
      "op": "len",
      "defined_out": [
        "len%10#0"
      ],
      "stack_out": [
        "len%10#0"
      ]
    },
    "1162": {
      "op": "intc_1 // 8",
      "stack_out": [
        "len%10#0",
        "8"
      ]
    },
    "1163": {
      "op": "==",
      "defined_out": [
        "eq%10#0"
      ],
      "stack_out": [
        "eq%10#0"
      ]
    },
    "1164": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": []
    },
    "1165": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "_a12#0"
      ],
      "stack_out": [
        "_a12#0"
      ]
    },
    "1168": {
      "op": "len",
      "defined_out": [
        "len%11#0"
      ],
      "stack_out": [
        "len%11#0"
      ]
    },
    "1169": {
      "op": "intc_1 // 8",
      "stack_out": [
        "len%11#0",
        "8"
      ]
    },
    "1170": {
      "op": "==",
      "defined_out": [
        "eq%11#0"
      ],
      "stack_out": [
        "eq%11#0"
      ]
    },
    "1171": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": []
    },
    "1172": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "_a13#0"
      ],
      "stack_out": [
        "_a13#0"
      ]
    },
    "1175": {
      "op": "len",
      "defined_out": [
        "len%12#0"
      ],
      "stack_out": [
        "len%12#0"
      ]
    },
    "1176": {
      "op": "intc_1 // 8",
      "stack_out": [
        "len%12#0",
        "8"
      ]
    },
    "1177": {
      "op": "==",
      "defined_out": [
        "eq%12#0"
      ],
      "stack_out": [
        "eq%12#0"
      ]
    },
    "1178": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": []
    },
    "1179": {
      "op": "txna ApplicationArgs 14",
      "defined_out": [
        "_a14#0"
      ],
      "stack_out": [
        "_a14#0"
      ]
    },
    "1182": {
      "op": "len",
      "defined_out": [
        "len%13#0"
      ],
      "stack_out": [
        "len%13#0"
      ]
    },
    "1183": {
      "op": "intc_1 // 8",
      "stack_out": [
        "len%13#0",
        "8"
      ]
    },
    "1184": {
      "op": "==",
      "defined_out": [
        "eq%13#0"
      ],
      "stack_out": [
        "eq%13#0"
      ]
    },
    "1185": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": []
    },
    "1186": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1189": {
      "op": "dup",
      "defined_out": [
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "1190": {
      "op": "len",
      "defined_out": [
        "len%14#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "len%14#0"
      ]
    },
    "1191": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "9",
        "len%14#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "len%14#0",
        "9"
      ]
    },
    "1193": {
      "op": "==",
      "defined_out": [
        "eq%14#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "eq%14#0"
      ]
    },
    "1194": {
      "error": "invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>",
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1195": {
      "op": "extract 0 1",
      "defined_out": [
        "a15#0"
      ],
      "stack_out": [
        "a15#0"
      ]
    },
    "1198": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a15#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "a15#0",
        "tmp%15#0"
      ]
    },
    "1201": {
      "op": "dup",
      "defined_out": [
        "a15#0",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ],
      "stack_out": [
        "a15#0",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ]
    },
    "1202": {
      "op": "len",
      "defined_out": [
        "a15#0",
        "len%15#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "a15#0",
        "tmp%15#0",
        "len%15#0"
      ]
    },
    "1203": {
      "op": "pushint 9 // 9",
      "stack_out": [
        "a15#0",
        "tmp%15#0",
        "len%15#0",
        "9"
      ]
    },
    "1205": {
      "op": "==",
      "defined_out": [
        "a15#0",
        "eq%15#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "a15#0",
        "tmp%15#0",
        "eq%15#0"
      ]
    },
    "1206": {
      "error": "invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>",
      "stack_out": [
        "a15#0",
        "tmp%15#0"
      ]
    },
    "1207": {
      "op": "extract 1 1",
      "defined_out": [
        "a15#0",
        "a16#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0"
      ]
    },
    "1210": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a15#0",
        "a16#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "tmp%16#0"
      ]
    },
    "1213": {
      "op": "dup",
      "defined_out": [
        "a15#0",
        "a16#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "1214": {
      "op": "len",
      "defined_out": [
        "a15#0",
        "a16#0",
        "len%16#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "tmp%16#0",
        "len%16#0"
      ]
    },
    "1215": {
      "op": "pushint 9 // 9",
      "stack_out": [
        "a15#0",
        "a16#0",
        "tmp%16#0",
        "len%16#0",
        "9"
      ]
    },
    "1217": {
      "op": "==",
      "defined_out": [
        "a15#0",
        "a16#0",
        "eq%16#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "tmp%16#0",
        "eq%16#0"
      ]
    },
    "1218": {
      "error": "invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>",
      "stack_out": [
        "a15#0",
        "a16#0",
        "tmp%16#0"
      ]
    },
    "1219": {
      "op": "extract 2 1",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0"
      ]
    },
    "1222": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "tmp%17#0"
      ]
    },
    "1225": {
      "op": "dup",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ]
    },
    "1226": {
      "op": "len",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "len%17#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "tmp%17#0",
        "len%17#0"
      ]
    },
    "1227": {
      "op": "pushint 9 // 9",
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "tmp%17#0",
        "len%17#0",
        "9"
      ]
    },
    "1229": {
      "op": "==",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "eq%17#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "tmp%17#0",
        "eq%17#0"
      ]
    },
    "1230": {
      "error": "invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>",
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "tmp%17#0"
      ]
    },
    "1231": {
      "op": "extract 3 1",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0"
      ]
    },
    "1234": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "tmp%18#0"
      ]
    },
    "1237": {
      "op": "dup",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "1238": {
      "op": "len",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "len%18#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "tmp%18#0",
        "len%18#0"
      ]
    },
    "1239": {
      "op": "pushint 9 // 9",
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "tmp%18#0",
        "len%18#0",
        "9"
      ]
    },
    "1241": {
      "op": "==",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "eq%18#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "tmp%18#0",
        "eq%18#0"
      ]
    },
    "1242": {
      "error": "invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>",
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "tmp%18#0"
      ]
    },
    "1243": {
      "op": "extract 4 4",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0"
      ]
    },
    "1246": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "tmp%19#0"
      ]
    },
    "1249": {
      "op": "dup",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ]
    },
    "1250": {
      "op": "len",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "len%19#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "tmp%19#0",
        "len%19#0"
      ]
    },
    "1251": {
      "op": "pushint 9 // 9",
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "tmp%19#0",
        "len%19#0",
        "9"
      ]
    },
    "1253": {
      "op": "==",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "eq%19#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "tmp%19#0",
        "eq%19#0"
      ]
    },
    "1254": {
      "error": "invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>",
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "tmp%19#0"
      ]
    },
    "1255": {
      "op": "extract 8 1",
      "defined_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "a20#0"
      ],
      "stack_out": [
        "a15#0",
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "a20#0"
      ]
    },
    "1258": {
      "op": "uncover 5",
      "stack_out": [
        "a16#0",
        "a17#0",
        "a18#0",
        "a19#0",
        "a20#0",
        "a15#0"
      ]
    },
    "1260": {
      "op": "uncover 5",
      "stack_out": [
        "a17#0",
        "a18#0",
        "a19#0",
        "a20#0",
        "a15#0",
        "a16#0"
      ]
    },
    "1262": {
      "op": "concat",
      "defined_out": [
        "a17#0",
        "a18#0",
        "a19#0",
        "a20#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "a17#0",
        "a18#0",
        "a19#0",
        "a20#0",
        "aggregate%head%1#0"
      ]
    },
    "1263": {
      "op": "uncover 4",
      "stack_out": [
        "a18#0",
        "a19#0",
        "a20#0",
        "aggregate%head%1#0",
        "a17#0"
      ]
    },
    "1265": {
      "op": "concat",
      "defined_out": [
        "a18#0",
        "a19#0",
        "a20#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "a18#0",
        "a19#0",
        "a20#0",
        "aggregate%head%2#0"
      ]
    },
    "1266": {
      "op": "uncover 3",
      "stack_out": [
        "a19#0",
        "a20#0",
        "aggregate%head%2#0",
        "a18#0"
      ]
    },
    "1268": {
      "op": "concat",
      "defined_out": [
        "a19#0",
        "a20#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "a19#0",
        "a20#0",
        "aggregate%head%3#0"
      ]
    },
    "1269": {
      "op": "uncover 2",
      "stack_out": [
        "a20#0",
        "aggregate%head%3#0",
        "a19#0"
      ]
    },
    "1271": {
      "op": "concat",
      "defined_out": [
        "a20#0",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "a20#0",
        "aggregate%head%4#0"
      ]
    },
    "1272": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%4#0",
        "a20#0"
      ]
    },
    "1273": {
      "op": "concat",
      "defined_out": [
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0"
      ]
    },
    "1274": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "last_arg#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%1#1"
      ]
    },
    "1277": {
      "op": "dig 1",
      "defined_out": [
        "last_arg#0",
        "last_arg#0 (copy)",
        "tmp%1#1"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%1#1",
        "last_arg#0 (copy)"
      ]
    },
    "1279": {
      "op": "==",
      "defined_out": [
        "last_arg#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%2#1"
      ]
    },
    "1280": {
      "op": "assert",
      "stack_out": [
        "last_arg#0"
      ]
    },
    "1281": {
      "op": "dup",
      "stack_out": [
        "last_arg#0",
        "last_arg#0 (copy)"
      ]
    },
    "1282": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0",
        "aggregate%length%0#0"
      ]
    },
    "1283": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "1284": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "1287": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "last_arg#0"
      ]
    },
    "1288": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "1289": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "1290": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "1291": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1292": {
      "op": "log",
      "stack_out": []
    },
    "1293": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1294": {
      "op": "return",
      "stack_out": []
    },
    "1295": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.logs_are_equal[routing]",
      "params": {},
      "block": "logs_are_equal",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1298": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1299": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "8"
      ]
    },
    "1300": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0"
      ]
    },
    "1301": {
      "op": "dup",
      "defined_out": [
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ]
    },
    "1302": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "10"
      ]
    },
    "1304": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0",
        "eq%0#0"
      ]
    },
    "1305": {
      "error": "invalid tail pointer at index 1 of (uint64,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 1 of (uint64,(len+utf8[]))",
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0"
      ]
    },
    "1306": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1308": {
      "op": "len",
      "defined_out": [
        "aggregate%len%0#0",
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1309": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0",
        "aggregate%len%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1311": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%len%0#0",
        "tmp%0#0 (copy)",
        "extract_uint16%0#0"
      ]
    },
    "1313": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%len%0#0",
        "aggregate%len%0#0 (copy)",
        "extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%len%0#0",
        "tmp%0#0 (copy)",
        "extract_uint16%0#0",
        "aggregate%len%0#0 (copy)"
      ]
    },
    "1315": {
      "op": "substring3",
      "defined_out": [
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "1316": {
      "op": "dup",
      "defined_out": [
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "1317": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "0"
      ]
    },
    "1318": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "1319": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "aggregate%array_length%0#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "aggregate%array_length%0#0",
        "12"
      ]
    },
    "1321": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "add%1#0"
      ]
    },
    "1322": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "add%1#0",
        "aggregate%len%0#0"
      ]
    },
    "1324": {
      "op": "==",
      "defined_out": [
        "aggregate%substring3%0#0",
        "eq%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "eq%1#0"
      ]
    },
    "1325": {
      "error": "invalid number of bytes for test_cases.typed_abi_call.logger.LogMessage",
      "op": "assert // invalid number of bytes for test_cases.typed_abi_call.logger.LogMessage",
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "1326": {
      "op": "swap",
      "stack_out": [
        "aggregate%substring3%0#0",
        "tmp%0#0"
      ]
    },
    "1327": {
      "op": "intc_2 // 0",
      "stack_out": [
        "aggregate%substring3%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "1328": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%substring3%0#0",
        "log_1.level#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "log_1.level#0"
      ]
    },
    "1329": {
      "op": "swap",
      "stack_out": [
        "log_1.level#0",
        "aggregate%substring3%0#0"
      ]
    },
    "1330": {
      "op": "extract 2 0",
      "defined_out": [
        "log_1.level#0",
        "log_1.message#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0"
      ]
    },
    "1333": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0"
      ]
    },
    "1336": {
      "op": "dup",
      "defined_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "1337": {
      "op": "intc_1 // 8",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "8"
      ]
    },
    "1338": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%1#0",
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "extract_uint16%1#0"
      ]
    },
    "1339": {
      "op": "dup",
      "defined_out": [
        "extract_uint16%1#0",
        "extract_uint16%1#0 (copy)",
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "extract_uint16%1#0",
        "extract_uint16%1#0 (copy)"
      ]
    },
    "1340": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "extract_uint16%1#0",
        "extract_uint16%1#0 (copy)",
        "10"
      ]
    },
    "1342": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "extract_uint16%1#0",
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "extract_uint16%1#0",
        "eq%2#0"
      ]
    },
    "1343": {
      "error": "invalid tail pointer at index 1 of (uint64,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 1 of (uint64,(len+utf8[]))",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "extract_uint16%1#0"
      ]
    },
    "1344": {
      "op": "dig 1",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "extract_uint16%1#0",
        "tmp%4#0 (copy)"
      ]
    },
    "1346": {
      "op": "len",
      "defined_out": [
        "aggregate%len%2#0",
        "extract_uint16%1#0",
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "extract_uint16%1#0",
        "aggregate%len%2#0"
      ]
    },
    "1347": {
      "op": "dig 2",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "extract_uint16%1#0",
        "aggregate%len%2#0",
        "tmp%4#0 (copy)"
      ]
    },
    "1349": {
      "op": "uncover 2",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "aggregate%len%2#0",
        "tmp%4#0 (copy)",
        "extract_uint16%1#0"
      ]
    },
    "1351": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%len%2#0",
        "aggregate%len%2#0 (copy)",
        "extract_uint16%1#0",
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "aggregate%len%2#0",
        "tmp%4#0 (copy)",
        "extract_uint16%1#0",
        "aggregate%len%2#0 (copy)"
      ]
    },
    "1353": {
      "op": "substring3",
      "defined_out": [
        "aggregate%len%2#0",
        "aggregate%substring3%2#0",
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "aggregate%len%2#0",
        "aggregate%substring3%2#0"
      ]
    },
    "1354": {
      "op": "dup",
      "defined_out": [
        "aggregate%len%2#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%2#0 (copy)",
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "aggregate%len%2#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%2#0 (copy)"
      ]
    },
    "1355": {
      "op": "intc_2 // 0",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "aggregate%len%2#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%2#0 (copy)",
        "0"
      ]
    },
    "1356": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%1#0",
        "aggregate%len%2#0",
        "aggregate%substring3%2#0",
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "aggregate%len%2#0",
        "aggregate%substring3%2#0",
        "aggregate%array_length%1#0"
      ]
    },
    "1357": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "aggregate%len%2#0",
        "aggregate%substring3%2#0",
        "aggregate%array_length%1#0",
        "12"
      ]
    },
    "1359": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "aggregate%len%2#0",
        "aggregate%substring3%2#0",
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "aggregate%len%2#0",
        "aggregate%substring3%2#0",
        "add%3#0"
      ]
    },
    "1360": {
      "op": "uncover 2",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "aggregate%substring3%2#0",
        "add%3#0",
        "aggregate%len%2#0"
      ]
    },
    "1362": {
      "op": "==",
      "defined_out": [
        "aggregate%substring3%2#0",
        "eq%3#0",
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "aggregate%substring3%2#0",
        "eq%3#0"
      ]
    },
    "1363": {
      "error": "invalid number of bytes for test_cases.typed_abi_call.logger.LogMessage",
      "op": "assert // invalid number of bytes for test_cases.typed_abi_call.logger.LogMessage",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "tmp%4#0",
        "aggregate%substring3%2#0"
      ]
    },
    "1364": {
      "op": "swap",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "aggregate%substring3%2#0",
        "tmp%4#0"
      ]
    },
    "1365": {
      "op": "intc_2 // 0",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "aggregate%substring3%2#0",
        "tmp%4#0",
        "0"
      ]
    },
    "1366": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%substring3%2#0",
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "aggregate%substring3%2#0",
        "log_2.level#0"
      ]
    },
    "1367": {
      "op": "swap",
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0",
        "aggregate%substring3%2#0"
      ]
    },
    "1368": {
      "op": "extract 2 0",
      "defined_out": [
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0",
        "log_2.message#0"
      ],
      "stack_out": [
        "log_1.level#0",
        "log_1.message#0",
        "log_2.level#0",
        "log_2.message#0"
      ]
    },
    "1371": {
      "op": "uncover 3",
      "stack_out": [
        "log_1.message#0",
        "log_2.level#0",
        "log_2.message#0",
        "log_1.level#0"
      ]
    },
    "1373": {
      "op": "uncover 2",
      "stack_out": [
        "log_1.message#0",
        "log_2.message#0",
        "log_1.level#0",
        "log_2.level#0"
      ]
    },
    "1375": {
      "op": "==",
      "defined_out": [
        "log_1.message#0",
        "log_2.message#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "log_1.message#0",
        "log_2.message#0",
        "tmp%0#1"
      ]
    },
    "1376": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#1",
        "log_1.message#0",
        "log_2.message#0"
      ]
    },
    "1378": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "1379": {
      "op": "&&",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "1380": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "0x00"
      ]
    },
    "1383": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%2#1",
        "0x00",
        "0"
      ]
    },
    "1384": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%2#1"
      ]
    },
    "1386": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0"
      ]
    },
    "1387": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "1388": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "1389": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1390": {
      "op": "log",
      "stack_out": []
    },
    "1391": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1392": {
      "op": "return",
      "stack_out": []
    },
    "1393": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_log_struct[routing]",
      "params": {},
      "block": "echo_log_struct",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "log#0"
      ],
      "stack_out": [
        "log#0"
      ]
    },
    "1396": {
      "op": "dup",
      "defined_out": [
        "log#0",
        "log#0 (copy)"
      ],
      "stack_out": [
        "log#0",
        "log#0 (copy)"
      ]
    },
    "1397": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "log#0",
        "log#0 (copy)"
      ],
      "stack_out": [
        "log#0",
        "log#0 (copy)",
        "8"
      ]
    },
    "1398": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%0#0",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "extract_uint16%0#0"
      ]
    },
    "1399": {
      "op": "dup",
      "defined_out": [
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ]
    },
    "1400": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "10"
      ]
    },
    "1402": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "extract_uint16%0#0",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "extract_uint16%0#0",
        "eq%0#0"
      ]
    },
    "1403": {
      "error": "invalid tail pointer at index 1 of (uint64,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 1 of (uint64,(len+utf8[]))",
      "stack_out": [
        "log#0",
        "extract_uint16%0#0"
      ]
    },
    "1404": {
      "op": "dig 1",
      "stack_out": [
        "log#0",
        "extract_uint16%0#0",
        "log#0 (copy)"
      ]
    },
    "1406": {
      "op": "len",
      "defined_out": [
        "aggregate%len%0#0",
        "extract_uint16%0#0",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1407": {
      "op": "dig 2",
      "stack_out": [
        "log#0",
        "extract_uint16%0#0",
        "aggregate%len%0#0",
        "log#0 (copy)"
      ]
    },
    "1409": {
      "op": "uncover 2",
      "stack_out": [
        "log#0",
        "aggregate%len%0#0",
        "log#0 (copy)",
        "extract_uint16%0#0"
      ]
    },
    "1411": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%len%0#0",
        "aggregate%len%0#0 (copy)",
        "extract_uint16%0#0",
        "log#0",
        "log#0 (copy)"
      ],
      "stack_out": [
        "log#0",
        "aggregate%len%0#0",
        "log#0 (copy)",
        "extract_uint16%0#0",
        "aggregate%len%0#0 (copy)"
      ]
    },
    "1413": {
      "op": "substring3",
      "defined_out": [
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "1414": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "0"
      ]
    },
    "1415": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%len%0#0",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "aggregate%len%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "1416": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "aggregate%array_length%0#0",
        "aggregate%len%0#0",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "aggregate%len%0#0",
        "aggregate%array_length%0#0",
        "12"
      ]
    },
    "1418": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "aggregate%len%0#0",
        "add%1#0"
      ]
    },
    "1419": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "eq%1#0"
      ]
    },
    "1420": {
      "error": "invalid number of bytes for test_cases.typed_abi_call.logger.LogStruct",
      "op": "assert // invalid number of bytes for test_cases.typed_abi_call.logger.LogStruct",
      "stack_out": [
        "log#0"
      ]
    },
    "1421": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "0x151f7c75"
      ]
    },
    "1422": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "log#0"
      ]
    },
    "1423": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1424": {
      "op": "log",
      "stack_out": []
    },
    "1425": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1426": {
      "op": "return",
      "stack_out": []
    }
  }
}