{
  "version": 3,
  "sources": [
    "../logger.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA2GK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA3GL;;;AA2GK;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAvGL;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAuGK;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AA3EL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA2EK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAhEL;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAgEK;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA1DL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AA0DK;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAtDL;;;AAsDK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAlDL;;;AAAA;AAkDK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA9CL;;;AAAA;;;AA8CK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA1CL;;;AAAA;;;AA0CK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAtCL;;;AAsCK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAlCL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAkCK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA9BL;;;AA8BK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA1BL;;;AA0BK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAtBL;;;AAsBK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAlBL;;;AAkBK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAdL;;;AAcK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AANL;;;AAMK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;;;AACK;;;AAAA;;AADL;;AAAA;;;;;;;;;AACA;;;AAEe;;AAAK;;;AAAL;AAAP;AACO;;AAAK;;;AAAL;AAAP;;AAER;;;AAEe;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAP;AAMR;;;AAEQ;;AAAA;;AAER;;;AAEQ;;AAAA;;AAER;;;AAEY;;AAAA;;;AAAJ;;AAER;;;AAE8B;;;AAAA;AAAlB;;;;;;;;;;;;;AAAA;;AAAA;AAAJ;;AAER;;;AAEY;;AAAA;;;AAAJ;;AAER;;;AAEY;;AAAA;;AAAA;AAAY;;AAAA;AAAe;;AAAA;;AAAA;AAAA;AAA/B;;AAER;;;AAEQ;;AAAA;;AAER;;;AAEe;AAAA;;AAAA;AAAP;AAER;;;AAEe;AAAA;;AAAA;AAAP;AAER;;;AAEe;;AAAQ;AAAR;AAAP;AAER;;;AAEe;;AAAQ;AAAR;AAAP;AAER;;;AAIe;AAAA;;AAAA;AAAc;AAAA;;AAAA;AAAe;;AAAI;AAAJ;AAAO;;AAAK;AAAL;AAA3C;AAER;;;AAKgB;AAAA;;AAAA;AAAmB;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACvB;;AAAM;AAAN;AACY;;AAAA;AAAkB;AAAlB;AAAZ;AACA;AAAA;;AAAA;AAHJ;AAMR;;;AAwBmB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACJ;;;AAAA;;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAP;AAER;;;AAEe;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 64 8"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x6563686f3a20 0x0004 0x01"
    },
    "26": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "28": {
      "op": "bz main_bare_routing@24",
      "stack_out": []
    },
    "31": {
      "op": "pushbytess 0xc77212bc 0x9bf81913 0xb862ee19 0x3c1058d9 0x6af45930 0xb4b4334e 0x6eed7ec3 0xb500e111 0xcd727b71 0x0437b17e 0x4a444c77 0x2659e818 0xa9fb6cf1 0xd8cc363b 0x16e03919 0xab271ce4 0xba0b4381 0xddd07185 0xdc4f1992 // method \"is_a_b(byte[],byte[])void\", method \"echo(string)string\", method \"no_args()uint64\", method \"log(uint64)void\", method \"log(uint512)void\", method \"log(string)void\", method \"log(bool)void\", method \"log(byte[])void\", method \"log(asset,account,application)void\", method \"log(address)void\", method \"echo_native_string(string)string\", method \"echo_native_bytes(byte[])byte[]\", method \"echo_native_uint64(uint64)uint64\", method \"echo_native_biguint(uint512)uint512\", method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\", method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\", method \"return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]\", method \"logs_are_equal((uint64,string),(uint64,string))bool\", method \"echo_log_struct((uint64,string))(uint64,string)\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_log_struct((uint64,string))(uint64,string))",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(no_args()uint64)",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])"
      ],
      "stack_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(echo_log_struct((uint64,string))(uint64,string))"
      ]
    },
    "128": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_log_struct((uint64,string))(uint64,string))",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(no_args()uint64)",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(echo_log_struct((uint64,string))(uint64,string))",
        "tmp%2#0"
      ]
    },
    "131": {
      "op": "match main_is_a_b_route@3 main_echo_route@4 main_no_args_route@5 main_log_route@6 main_log_route@7 main_log_route@8 main_log_route@9 main_log_route@10 main_log_route@11 main_log_route@12 main_echo_native_string_route@13 main_echo_native_bytes_route@14 main_echo_native_uint64_route@15 main_echo_native_biguint_route@16 main_echo_native_tuple_route@17 main_echo_nested_tuple_route@18 main_return_args_after_14th_route@19 main_logs_are_equal_route@20 main_echo_log_struct_route@21",
      "stack_out": []
    },
    "171": {
      "block": "main_after_if_else@28",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "172": {
      "op": "return",
      "stack_out": []
    },
    "173": {
      "block": "main_echo_log_struct_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "175": {
      "op": "!",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "176": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "177": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "179": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "180": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75"
      ],
      "stack_out": [
        "0x151f7c75"
      ]
    },
    "181": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "0x151f7c75",
        "log#0"
      ],
      "stack_out": [
        "0x151f7c75",
        "log#0"
      ]
    },
    "184": {
      "op": "concat",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "185": {
      "op": "log",
      "stack_out": []
    },
    "186": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "187": {
      "op": "return",
      "stack_out": []
    },
    "188": {
      "block": "main_logs_are_equal_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "190": {
      "op": "!",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "191": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "192": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "194": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "195": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0"
      ]
    },
    "198": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0 (copy)"
      ]
    },
    "199": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0 (copy)",
        "0"
      ]
    },
    "200": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%6#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0",
        "item0%6#0"
      ]
    },
    "201": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0",
        "item0%6#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0 (copy)"
      ]
    },
    "203": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "item0%6#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0",
        "item0%6#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0 (copy)",
        "8"
      ]
    },
    "204": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%6#0",
        "item_start_offset%5#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0",
        "item0%6#0",
        "item_start_offset%5#0"
      ]
    },
    "205": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0",
        "item0%6#0",
        "item_start_offset%5#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0 (copy)"
      ]
    },
    "207": {
      "op": "len",
      "defined_out": [
        "item0%6#0",
        "item_end_offset%5#0",
        "item_start_offset%5#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0",
        "item0%6#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0"
      ]
    },
    "208": {
      "op": "uncover 3",
      "stack_out": [
        "item0%6#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0"
      ]
    },
    "210": {
      "op": "cover 2",
      "stack_out": [
        "item0%6#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%0#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0"
      ]
    },
    "212": {
      "op": "substring3",
      "defined_out": [
        "item0%6#0",
        "item1%3#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%3#0"
      ]
    },
    "213": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%6#0",
        "item1%4#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%4#0"
      ]
    },
    "216": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "item0%6#0",
        "item1%4#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0"
      ]
    },
    "219": {
      "op": "dup",
      "defined_out": [
        "item0%6#0",
        "item1%4#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0 (copy)"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0 (copy)"
      ]
    },
    "220": {
      "op": "intc_1 // 0",
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0 (copy)",
        "0"
      ]
    },
    "221": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%6#0",
        "item0%8#0",
        "item1%4#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0",
        "item0%8#0"
      ]
    },
    "222": {
      "op": "dig 1",
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0",
        "item0%8#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0 (copy)"
      ]
    },
    "224": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0",
        "item0%8#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0 (copy)",
        "8"
      ]
    },
    "225": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%6#0",
        "item0%8#0",
        "item1%4#0",
        "item_start_offset%6#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0",
        "item0%8#0",
        "item_start_offset%6#0"
      ]
    },
    "226": {
      "op": "dig 2",
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0",
        "item0%8#0",
        "item_start_offset%6#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0 (copy)"
      ]
    },
    "228": {
      "op": "len",
      "defined_out": [
        "item0%6#0",
        "item0%8#0",
        "item1%4#0",
        "item_end_offset%6#0",
        "item_start_offset%6#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0",
        "item0%8#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0"
      ]
    },
    "229": {
      "op": "uncover 3",
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "item0%8#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0"
      ]
    },
    "231": {
      "op": "cover 2",
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "item0%8#0",
        "reinterpret_Encoded((uint64,len+utf8[]))%1#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0"
      ]
    },
    "233": {
      "op": "substring3",
      "defined_out": [
        "item0%6#0",
        "item0%8#0",
        "item1%4#0",
        "item1%5#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "item0%8#0",
        "item1%5#0"
      ]
    },
    "234": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%6#0",
        "item0%8#0",
        "item1%4#0",
        "item1%6#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "item0%8#0",
        "item1%6#0"
      ]
    },
    "237": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.logs_are_equal",
      "op": "callsub logs_are_equal",
      "defined_out": [
        "to_encode%14#0"
      ],
      "stack_out": [
        "to_encode%14#0"
      ]
    },
    "240": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%14#0"
      ],
      "stack_out": [
        "to_encode%14#0",
        "0x00"
      ]
    },
    "243": {
      "op": "intc_1 // 0",
      "stack_out": [
        "to_encode%14#0",
        "0x00",
        "0"
      ]
    },
    "244": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%14#0"
      ]
    },
    "246": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "247": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "248": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "249": {
      "op": "concat",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "250": {
      "op": "log",
      "stack_out": []
    },
    "251": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "252": {
      "op": "return",
      "stack_out": []
    },
    "253": {
      "block": "main_return_args_after_14th_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "255": {
      "op": "!",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "256": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "257": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "259": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "260": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "263": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "266": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0"
      ]
    },
    "269": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0"
      ]
    },
    "272": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0"
      ]
    },
    "275": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0"
      ]
    },
    "278": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ]
    },
    "281": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0"
      ]
    },
    "284": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0"
      ]
    },
    "287": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0"
      ]
    },
    "290": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0"
      ]
    },
    "293": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0"
      ]
    },
    "296": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0"
      ]
    },
    "299": {
      "op": "txna ApplicationArgs 14",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0"
      ]
    },
    "302": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%0#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%0#0"
      ]
    },
    "305": {
      "error": "Index access is out of bounds",
      "op": "extract 0 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "tmp%94#0"
      ]
    },
    "308": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "tmp%94#0",
        "reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%1#0"
      ]
    },
    "311": {
      "error": "Index access is out of bounds",
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tmp%94#0",
        "tmp%95#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "tmp%94#0",
        "tmp%95#0"
      ]
    },
    "314": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%2#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tmp%94#0",
        "tmp%95#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "tmp%94#0",
        "tmp%95#0",
        "reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%2#0"
      ]
    },
    "317": {
      "error": "Index access is out of bounds",
      "op": "extract 2 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0"
      ]
    },
    "320": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%3#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%3#0"
      ]
    },
    "323": {
      "error": "Index access is out of bounds",
      "op": "extract 3 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0"
      ]
    },
    "326": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%4#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%4#0"
      ]
    },
    "329": {
      "error": "Index access is out of bounds",
      "op": "extract 4 4 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0"
      ]
    },
    "332": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%5#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "reinterpret_Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8))%5#0"
      ]
    },
    "335": {
      "error": "Index access is out of bounds",
      "op": "extract 8 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ]
    },
    "338": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.return_args_after_14th",
      "op": "callsub return_args_after_14th",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "341": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0",
        "0x151f7c75"
      ]
    },
    "342": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%100#0"
      ]
    },
    "343": {
      "op": "concat",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "344": {
      "op": "log",
      "stack_out": []
    },
    "345": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "346": {
      "op": "return",
      "stack_out": []
    },
    "347": {
      "block": "main_echo_nested_tuple_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "349": {
      "op": "!",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "350": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "351": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "353": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "354": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0"
      ]
    },
    "357": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0 (copy)"
      ]
    },
    "358": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0 (copy)",
        "0"
      ]
    },
    "359": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_start_offset%0#0"
      ]
    },
    "360": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_start_offset%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0 (copy)"
      ]
    },
    "362": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_start_offset%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0 (copy)",
        "2"
      ]
    },
    "364": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "365": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0 (copy)"
      ]
    },
    "367": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "369": {
      "op": "dig 2",
      "defined_out": [
        "item_end_offset%0#0",
        "item_end_offset%0#0 (copy)",
        "item_start_offset%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0 (copy)"
      ]
    },
    "371": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item0%0#0"
      ]
    },
    "372": {
      "op": "dup",
      "defined_out": [
        "item0%0#0",
        "item0%0#0 (copy)",
        "item_end_offset%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "373": {
      "op": "intc_1 // 0",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "0"
      ]
    },
    "374": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%0#0",
        "item_start_offset%1#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_start_offset%1#0"
      ]
    },
    "375": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item0%0#0 (copy)"
      ]
    },
    "377": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item0%0#0 (copy)",
        "2"
      ]
    },
    "379": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "380": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "item0%0#0 (copy)"
      ]
    },
    "382": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item0%0#0 (copy)",
        "item_start_offset%1#0"
      ]
    },
    "384": {
      "op": "dig 2",
      "defined_out": [
        "item0%0#0",
        "item0%0#0 (copy)",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "item_end_offset%1#0 (copy)",
        "item_start_offset%1#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item0%0#0 (copy)",
        "item_start_offset%1#0",
        "item_end_offset%1#0 (copy)"
      ]
    },
    "386": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "item0%1#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item0%1#0"
      ]
    },
    "387": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item0%2#0"
      ]
    },
    "390": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item0%2#0",
        "item0%0#0 (copy)"
      ]
    },
    "392": {
      "op": "len",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "item_end_offset%2#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item0%2#0",
        "item_end_offset%2#0"
      ]
    },
    "393": {
      "op": "uncover 3",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "item0%2#0",
        "item_end_offset%2#0",
        "item0%0#0"
      ]
    },
    "395": {
      "op": "uncover 3",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item0%2#0",
        "item_end_offset%2#0",
        "item0%0#0",
        "item_end_offset%1#0"
      ]
    },
    "397": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item0%2#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item_end_offset%2#0"
      ]
    },
    "399": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item1%0#0",
        "item_end_offset%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item0%2#0",
        "item1%0#0"
      ]
    },
    "400": {
      "op": "dig 3",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item0%2#0",
        "item1%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0 (copy)"
      ]
    },
    "402": {
      "op": "len",
      "defined_out": [
        "item0%2#0",
        "item1%0#0",
        "item_end_offset%0#0",
        "item_end_offset%3#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item0%2#0",
        "item1%0#0",
        "item_end_offset%3#0"
      ]
    },
    "403": {
      "op": "uncover 4",
      "stack_out": [
        "item_end_offset%0#0",
        "item0%2#0",
        "item1%0#0",
        "item_end_offset%3#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0"
      ]
    },
    "405": {
      "op": "uncover 4",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item_end_offset%3#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0"
      ]
    },
    "407": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "reinterpret_Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[])))%0#0",
        "item_end_offset%0#0",
        "item_end_offset%3#0"
      ]
    },
    "409": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0"
      ]
    },
    "410": {
      "op": "dup",
      "defined_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ]
    },
    "411": {
      "op": "intc_1 // 0",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "0"
      ]
    },
    "412": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0",
        "item0%4#0"
      ]
    },
    "413": {
      "op": "dig 1",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0",
        "item0%4#0",
        "item1%1#0 (copy)"
      ]
    },
    "415": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%1#0",
        "item1%2#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0",
        "item0%4#0",
        "item1%2#0"
      ]
    },
    "418": {
      "op": "dig 2",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0",
        "item0%4#0",
        "item1%2#0",
        "item1%1#0 (copy)"
      ]
    },
    "420": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "item1%2#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0",
        "item0%4#0",
        "item1%2#0",
        "item1%1#0 (copy)",
        "16"
      ]
    },
    "422": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%1#0",
        "item1%2#0",
        "item_start_offset%4#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0"
      ]
    },
    "423": {
      "op": "dig 3",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item1%1#0 (copy)"
      ]
    },
    "425": {
      "op": "len",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%1#0",
        "item1%2#0",
        "item_end_offset%4#0",
        "item_start_offset%4#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "426": {
      "op": "uncover 4",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "item1%1#0"
      ]
    },
    "428": {
      "op": "cover 2",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item1%1#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "430": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0"
      ]
    },
    "431": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%1#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%1#0"
      ]
    },
    "434": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_nested_tuple",
      "op": "callsub echo_nested_tuple",
      "defined_out": [
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0",
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0"
      ]
    },
    "437": {
      "op": "dig 4",
      "defined_out": [
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "to_encode%9#0",
        "to_encode%9#0 (copy)"
      ],
      "stack_out": [
        "to_encode%9#0",
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "to_encode%9#0 (copy)"
      ]
    },
    "439": {
      "op": "len",
      "defined_out": [
        "length%4#0",
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0",
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "length%4#0"
      ]
    },
    "440": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0",
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "as_bytes%6#0"
      ]
    },
    "441": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%4#0",
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0",
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "length_uint16%4#0"
      ]
    },
    "444": {
      "op": "uncover 5",
      "stack_out": [
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "length_uint16%4#0",
        "to_encode%9#0"
      ]
    },
    "446": {
      "op": "concat",
      "defined_out": [
        "encoded_value%4#0",
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "encoded_value%4#0"
      ]
    },
    "447": {
      "op": "dup",
      "defined_out": [
        "encoded_value%4#0",
        "encoded_value%4#0 (copy)",
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "encoded_value%4#0",
        "encoded_value%4#0 (copy)"
      ]
    },
    "448": {
      "op": "len",
      "defined_out": [
        "data_length%2#0",
        "encoded_value%4#0",
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "encoded_value%4#0",
        "data_length%2#0"
      ]
    },
    "449": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "data_length%2#0",
        "encoded_value%4#0",
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "encoded_value%4#0",
        "data_length%2#0",
        "4"
      ]
    },
    "451": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_value%4#0",
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "encoded_value%4#0",
        "current_tail_offset%2#0"
      ]
    },
    "452": {
      "op": "swap",
      "stack_out": [
        "to_encode%10#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "current_tail_offset%2#0",
        "encoded_value%4#0"
      ]
    },
    "453": {
      "op": "uncover 5",
      "stack_out": [
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "current_tail_offset%2#0",
        "encoded_value%4#0",
        "to_encode%10#0"
      ]
    },
    "455": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "tail%3#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "current_tail_offset%2#0",
        "tail%3#0"
      ]
    },
    "456": {
      "op": "swap",
      "stack_out": [
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "tail%3#0",
        "current_tail_offset%2#0"
      ]
    },
    "457": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "tail%3#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "tail%3#0",
        "as_bytes%8#0"
      ]
    },
    "458": {
      "op": "extract 6 2",
      "defined_out": [
        "offset_as_uint16%3#0",
        "tail%3#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "tail%3#0",
        "offset_as_uint16%3#0"
      ]
    },
    "461": {
      "op": "bytec_2 // 0x0004",
      "defined_out": [
        "0x0004",
        "offset_as_uint16%3#0",
        "tail%3#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "tail%3#0",
        "offset_as_uint16%3#0",
        "0x0004"
      ]
    },
    "462": {
      "op": "swap",
      "stack_out": [
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "tail%3#0",
        "0x0004",
        "offset_as_uint16%3#0"
      ]
    },
    "463": {
      "op": "concat",
      "defined_out": [
        "encoded%6#0",
        "tail%3#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "tail%3#0",
        "encoded%6#0"
      ]
    },
    "464": {
      "op": "swap",
      "stack_out": [
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "encoded%6#0",
        "tail%3#0"
      ]
    },
    "465": {
      "op": "concat",
      "defined_out": [
        "encoded%7#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "encoded%7#0"
      ]
    },
    "466": {
      "op": "dup",
      "defined_out": [
        "encoded%7#0",
        "encoded%7#0 (copy)",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "encoded%7#0",
        "encoded%7#0 (copy)"
      ]
    },
    "467": {
      "op": "len",
      "defined_out": [
        "data_length%4#0",
        "encoded%7#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "encoded%7#0",
        "data_length%4#0"
      ]
    },
    "468": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "encoded%7#0",
        "data_length%4#0",
        "4"
      ]
    },
    "470": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%4#0",
        "encoded%7#0",
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "encoded%7#0",
        "current_tail_offset%4#0"
      ]
    },
    "471": {
      "op": "uncover 4",
      "stack_out": [
        "to_encode%12#0",
        "to_encode%13#0",
        "encoded%7#0",
        "current_tail_offset%4#0",
        "to_encode%11#0"
      ]
    },
    "473": {
      "op": "itob",
      "defined_out": [
        "current_tail_offset%4#0",
        "encoded%7#0",
        "to_encode%12#0",
        "to_encode%13#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "to_encode%12#0",
        "to_encode%13#0",
        "encoded%7#0",
        "current_tail_offset%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "474": {
      "op": "uncover 4",
      "stack_out": [
        "to_encode%13#0",
        "encoded%7#0",
        "current_tail_offset%4#0",
        "val_as_bytes%3#0",
        "to_encode%12#0"
      ]
    },
    "476": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%4#0",
        "encoded%10#0",
        "encoded%7#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0",
        "encoded%7#0",
        "current_tail_offset%4#0",
        "encoded%10#0"
      ]
    },
    "477": {
      "op": "dig 3",
      "defined_out": [
        "current_tail_offset%4#0",
        "encoded%10#0",
        "encoded%7#0",
        "to_encode%13#0",
        "to_encode%13#0 (copy)"
      ],
      "stack_out": [
        "to_encode%13#0",
        "encoded%7#0",
        "current_tail_offset%4#0",
        "encoded%10#0",
        "to_encode%13#0 (copy)"
      ]
    },
    "479": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%4#0",
        "encoded%10#0",
        "encoded%7#0",
        "length%5#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0",
        "encoded%7#0",
        "current_tail_offset%4#0",
        "encoded%10#0",
        "length%5#0"
      ]
    },
    "480": {
      "op": "itob",
      "defined_out": [
        "as_bytes%10#0",
        "current_tail_offset%4#0",
        "encoded%10#0",
        "encoded%7#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0",
        "encoded%7#0",
        "current_tail_offset%4#0",
        "encoded%10#0",
        "as_bytes%10#0"
      ]
    },
    "481": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%4#0",
        "encoded%10#0",
        "encoded%7#0",
        "length_uint16%5#0",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0",
        "encoded%7#0",
        "current_tail_offset%4#0",
        "encoded%10#0",
        "length_uint16%5#0"
      ]
    },
    "484": {
      "op": "uncover 4",
      "stack_out": [
        "encoded%7#0",
        "current_tail_offset%4#0",
        "encoded%10#0",
        "length_uint16%5#0",
        "to_encode%13#0"
      ]
    },
    "486": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%4#0",
        "encoded%10#0",
        "encoded%7#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded%7#0",
        "current_tail_offset%4#0",
        "encoded%10#0",
        "encoded_value%5#0"
      ]
    },
    "487": {
      "op": "swap",
      "stack_out": [
        "encoded%7#0",
        "current_tail_offset%4#0",
        "encoded_value%5#0",
        "encoded%10#0"
      ]
    },
    "488": {
      "op": "pushbytes 0x0012",
      "defined_out": [
        "0x0012",
        "current_tail_offset%4#0",
        "encoded%10#0",
        "encoded%7#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded%7#0",
        "current_tail_offset%4#0",
        "encoded_value%5#0",
        "encoded%10#0",
        "0x0012"
      ]
    },
    "492": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%4#0",
        "encoded%11#0",
        "encoded%7#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded%7#0",
        "current_tail_offset%4#0",
        "encoded_value%5#0",
        "encoded%11#0"
      ]
    },
    "493": {
      "op": "swap",
      "stack_out": [
        "encoded%7#0",
        "current_tail_offset%4#0",
        "encoded%11#0",
        "encoded_value%5#0"
      ]
    },
    "494": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%4#0",
        "encoded%12#0",
        "encoded%7#0"
      ],
      "stack_out": [
        "encoded%7#0",
        "current_tail_offset%4#0",
        "encoded%12#0"
      ]
    },
    "495": {
      "op": "uncover 2",
      "stack_out": [
        "current_tail_offset%4#0",
        "encoded%12#0",
        "encoded%7#0"
      ]
    },
    "497": {
      "op": "swap",
      "stack_out": [
        "current_tail_offset%4#0",
        "encoded%7#0",
        "encoded%12#0"
      ]
    },
    "498": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%4#0",
        "tail%6#0"
      ],
      "stack_out": [
        "current_tail_offset%4#0",
        "tail%6#0"
      ]
    },
    "499": {
      "op": "swap",
      "stack_out": [
        "tail%6#0",
        "current_tail_offset%4#0"
      ]
    },
    "500": {
      "op": "itob",
      "defined_out": [
        "as_bytes%12#0",
        "tail%6#0"
      ],
      "stack_out": [
        "tail%6#0",
        "as_bytes%12#0"
      ]
    },
    "501": {
      "op": "extract 6 2",
      "defined_out": [
        "offset_as_uint16%6#0",
        "tail%6#0"
      ],
      "stack_out": [
        "tail%6#0",
        "offset_as_uint16%6#0"
      ]
    },
    "504": {
      "op": "bytec_2 // 0x0004",
      "stack_out": [
        "tail%6#0",
        "offset_as_uint16%6#0",
        "0x0004"
      ]
    },
    "505": {
      "op": "swap",
      "stack_out": [
        "tail%6#0",
        "0x0004",
        "offset_as_uint16%6#0"
      ]
    },
    "506": {
      "op": "concat",
      "defined_out": [
        "encoded%13#0",
        "tail%6#0"
      ],
      "stack_out": [
        "tail%6#0",
        "encoded%13#0"
      ]
    },
    "507": {
      "op": "swap",
      "stack_out": [
        "encoded%13#0",
        "tail%6#0"
      ]
    },
    "508": {
      "op": "concat",
      "defined_out": [
        "encoded%14#0"
      ],
      "stack_out": [
        "encoded%14#0"
      ]
    },
    "509": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded%14#0"
      ],
      "stack_out": [
        "encoded%14#0",
        "0x151f7c75"
      ]
    },
    "510": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded%14#0"
      ]
    },
    "511": {
      "op": "concat",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "512": {
      "op": "log",
      "stack_out": []
    },
    "513": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "514": {
      "op": "return",
      "stack_out": []
    },
    "515": {
      "block": "main_echo_native_tuple_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "517": {
      "op": "!",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "518": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "519": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "521": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "522": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%3#0"
      ]
    },
    "525": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "528": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "reinterpret_Encoded(len+uint8[])%4#0"
      ]
    },
    "531": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%81#0",
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0"
      ]
    },
    "534": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0",
        "tmp%81#0",
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "537": {
      "op": "btoi",
      "defined_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0"
      ]
    },
    "538": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_Encoded(uint512)%2#0",
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "reinterpret_Encoded(uint512)%2#0"
      ]
    },
    "541": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_tuple",
      "op": "callsub echo_native_tuple",
      "defined_out": [
        "to_encode%5#0",
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ]
    },
    "544": {
      "op": "dig 3",
      "defined_out": [
        "to_encode%5#0",
        "to_encode%5#0 (copy)",
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0",
        "to_encode%5#0 (copy)"
      ]
    },
    "546": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "to_encode%5#0",
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0",
        "length%2#0"
      ]
    },
    "547": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "to_encode%5#0",
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0",
        "as_bytes%2#0"
      ]
    },
    "548": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "to_encode%5#0",
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0",
        "length_uint16%2#0"
      ]
    },
    "551": {
      "op": "uncover 4",
      "stack_out": [
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0",
        "length_uint16%2#0",
        "to_encode%5#0"
      ]
    },
    "553": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0",
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0",
        "encoded_value%2#0"
      ]
    },
    "554": {
      "op": "dup",
      "defined_out": [
        "encoded_value%2#0",
        "encoded_value%2#0 (copy)",
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0",
        "encoded_value%2#0",
        "encoded_value%2#0 (copy)"
      ]
    },
    "555": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_value%2#0",
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0",
        "encoded_value%2#0",
        "data_length%0#0"
      ]
    },
    "556": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "data_length%0#0",
        "encoded_value%2#0",
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0",
        "encoded_value%2#0",
        "data_length%0#0",
        "76"
      ]
    },
    "558": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded_value%2#0",
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0",
        "encoded_value%2#0",
        "current_tail_offset%0#0"
      ]
    },
    "559": {
      "op": "dig 4",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded_value%2#0",
        "to_encode%6#0",
        "to_encode%6#0 (copy)",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0",
        "encoded_value%2#0",
        "current_tail_offset%0#0",
        "to_encode%6#0 (copy)"
      ]
    },
    "561": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded_value%2#0",
        "length%3#0",
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0",
        "encoded_value%2#0",
        "current_tail_offset%0#0",
        "length%3#0"
      ]
    },
    "562": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "current_tail_offset%0#0",
        "encoded_value%2#0",
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0",
        "encoded_value%2#0",
        "current_tail_offset%0#0",
        "as_bytes%4#0"
      ]
    },
    "563": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded_value%2#0",
        "length_uint16%3#0",
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "to_encode%7#0",
        "to_encode%8#0",
        "encoded_value%2#0",
        "current_tail_offset%0#0",
        "length_uint16%3#0"
      ]
    },
    "566": {
      "op": "uncover 5",
      "stack_out": [
        "to_encode%7#0",
        "to_encode%8#0",
        "encoded_value%2#0",
        "current_tail_offset%0#0",
        "length_uint16%3#0",
        "to_encode%6#0"
      ]
    },
    "568": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "to_encode%8#0",
        "encoded_value%2#0",
        "current_tail_offset%0#0",
        "encoded_value%3#0"
      ]
    },
    "569": {
      "op": "uncover 2",
      "stack_out": [
        "to_encode%7#0",
        "to_encode%8#0",
        "current_tail_offset%0#0",
        "encoded_value%3#0",
        "encoded_value%2#0"
      ]
    },
    "571": {
      "op": "swap",
      "stack_out": [
        "to_encode%7#0",
        "to_encode%8#0",
        "current_tail_offset%0#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ]
    },
    "572": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "tail%1#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "to_encode%8#0",
        "current_tail_offset%0#0",
        "tail%1#0"
      ]
    },
    "573": {
      "op": "swap",
      "stack_out": [
        "to_encode%7#0",
        "to_encode%8#0",
        "tail%1#0",
        "current_tail_offset%0#0"
      ]
    },
    "574": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "tail%1#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "to_encode%8#0",
        "tail%1#0",
        "as_bytes%5#0"
      ]
    },
    "575": {
      "op": "extract 6 2",
      "defined_out": [
        "offset_as_uint16%1#0",
        "tail%1#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "to_encode%8#0",
        "tail%1#0",
        "offset_as_uint16%1#0"
      ]
    },
    "578": {
      "op": "pushbytes 0x004c",
      "defined_out": [
        "0x004c",
        "offset_as_uint16%1#0",
        "tail%1#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "to_encode%8#0",
        "tail%1#0",
        "offset_as_uint16%1#0",
        "0x004c"
      ]
    },
    "582": {
      "op": "swap",
      "stack_out": [
        "to_encode%7#0",
        "to_encode%8#0",
        "tail%1#0",
        "0x004c",
        "offset_as_uint16%1#0"
      ]
    },
    "583": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0",
        "tail%1#0",
        "to_encode%7#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "to_encode%8#0",
        "tail%1#0",
        "encoded%1#0"
      ]
    },
    "584": {
      "op": "uncover 3",
      "stack_out": [
        "to_encode%8#0",
        "tail%1#0",
        "encoded%1#0",
        "to_encode%7#0"
      ]
    },
    "586": {
      "op": "itob",
      "defined_out": [
        "encoded%1#0",
        "tail%1#0",
        "to_encode%8#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "tail%1#0",
        "encoded%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "587": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0",
        "tail%1#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "tail%1#0",
        "encoded%2#0"
      ]
    },
    "588": {
      "op": "dig 2",
      "defined_out": [
        "encoded%2#0",
        "tail%1#0",
        "to_encode%8#0",
        "to_encode%8#0 (copy)"
      ],
      "stack_out": [
        "to_encode%8#0",
        "tail%1#0",
        "encoded%2#0",
        "to_encode%8#0 (copy)"
      ]
    },
    "590": {
      "op": "len",
      "defined_out": [
        "encoded%2#0",
        "tail%1#0",
        "to_encode%8#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "tail%1#0",
        "encoded%2#0",
        "value_len%1#0"
      ]
    },
    "591": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "encoded%2#0",
        "tail%1#0",
        "to_encode%8#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "tail%1#0",
        "encoded%2#0",
        "value_len%1#0",
        "64"
      ]
    },
    "592": {
      "op": "<=",
      "defined_out": [
        "encoded%2#0",
        "len_ok%1#0",
        "tail%1#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "tail%1#0",
        "encoded%2#0",
        "len_ok%1#0"
      ]
    },
    "593": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "to_encode%8#0",
        "tail%1#0",
        "encoded%2#0"
      ]
    },
    "594": {
      "op": "intc_2 // 64",
      "stack_out": [
        "to_encode%8#0",
        "tail%1#0",
        "encoded%2#0",
        "64"
      ]
    },
    "595": {
      "op": "bzero",
      "defined_out": [
        "bzero%1#0",
        "encoded%2#0",
        "tail%1#0",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "tail%1#0",
        "encoded%2#0",
        "bzero%1#0"
      ]
    },
    "596": {
      "op": "uncover 3",
      "stack_out": [
        "tail%1#0",
        "encoded%2#0",
        "bzero%1#0",
        "to_encode%8#0"
      ]
    },
    "598": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "encoded%2#0",
        "tail%1#0"
      ],
      "stack_out": [
        "tail%1#0",
        "encoded%2#0",
        "arc4_encoded%1#0"
      ]
    },
    "599": {
      "op": "concat",
      "defined_out": [
        "encoded%3#0",
        "tail%1#0"
      ],
      "stack_out": [
        "tail%1#0",
        "encoded%3#0"
      ]
    },
    "600": {
      "op": "swap",
      "stack_out": [
        "encoded%3#0",
        "tail%1#0"
      ]
    },
    "601": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0"
      ],
      "stack_out": [
        "encoded%4#0"
      ]
    },
    "602": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded%4#0"
      ],
      "stack_out": [
        "encoded%4#0",
        "0x151f7c75"
      ]
    },
    "603": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded%4#0"
      ]
    },
    "604": {
      "op": "concat",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "605": {
      "op": "log",
      "stack_out": []
    },
    "606": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "607": {
      "op": "return",
      "stack_out": []
    },
    "608": {
      "block": "main_echo_native_biguint_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "610": {
      "op": "!",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "611": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "612": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "614": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "615": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint512)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint512)%1#0"
      ]
    },
    "618": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_biguint",
      "op": "callsub echo_native_biguint",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "621": {
      "op": "dup",
      "defined_out": [
        "to_encode%4#0",
        "to_encode%4#0 (copy)"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%4#0 (copy)"
      ]
    },
    "622": {
      "op": "len",
      "defined_out": [
        "to_encode%4#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "value_len%0#0"
      ]
    },
    "623": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "to_encode%4#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "value_len%0#0",
        "64"
      ]
    },
    "624": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "len_ok%0#0"
      ]
    },
    "625": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "626": {
      "op": "intc_2 // 64",
      "stack_out": [
        "to_encode%4#0",
        "64"
      ]
    },
    "627": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "bzero%0#0"
      ]
    },
    "628": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0"
      ],
      "stack_out": [
        "arc4_encoded%0#0"
      ]
    },
    "629": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "arc4_encoded%0#0"
      ],
      "stack_out": [
        "arc4_encoded%0#0",
        "0x151f7c75"
      ]
    },
    "630": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "arc4_encoded%0#0"
      ]
    },
    "631": {
      "op": "concat",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "632": {
      "op": "log",
      "stack_out": []
    },
    "633": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "634": {
      "op": "return",
      "stack_out": []
    },
    "635": {
      "block": "main_echo_native_uint64_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "637": {
      "op": "!",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "638": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "639": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "641": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "642": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "645": {
      "op": "btoi",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "646": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_uint64",
      "op": "callsub echo_native_uint64",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "649": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "650": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "651": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "652": {
      "op": "concat",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "653": {
      "op": "log",
      "stack_out": []
    },
    "654": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "655": {
      "op": "return",
      "stack_out": []
    },
    "656": {
      "block": "main_echo_native_bytes_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "658": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "659": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "660": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "662": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "663": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%3#0"
      ]
    },
    "666": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "669": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_bytes",
      "op": "callsub echo_native_bytes",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "672": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "673": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%1#0"
      ]
    },
    "674": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%1#0"
      ]
    },
    "675": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%1#0"
      ]
    },
    "678": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%2#0"
      ]
    },
    "679": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "680": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "681": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "682": {
      "op": "concat",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "683": {
      "op": "log",
      "stack_out": []
    },
    "684": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "685": {
      "op": "return",
      "stack_out": []
    },
    "686": {
      "block": "main_echo_native_string_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "688": {
      "op": "!",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "689": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "690": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "692": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "693": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%2#0"
      ]
    },
    "696": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "699": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_string",
      "op": "callsub echo_native_string",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "702": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "703": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%0#0"
      ]
    },
    "704": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%0#0"
      ]
    },
    "705": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%0#0"
      ]
    },
    "708": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ]
    },
    "709": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "710": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "711": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "712": {
      "op": "concat",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "713": {
      "op": "log",
      "stack_out": []
    },
    "714": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "715": {
      "op": "return",
      "stack_out": []
    },
    "716": {
      "block": "main_log_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "718": {
      "op": "!",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "719": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "720": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "722": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "723": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ]
    },
    "726": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_address",
      "op": "callsub log_address",
      "stack_out": []
    },
    "729": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "730": {
      "op": "return",
      "stack_out": []
    },
    "731": {
      "block": "main_log_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "733": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "734": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "735": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "737": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "738": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%0#0"
      ]
    },
    "741": {
      "op": "btoi",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "742": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "744": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint8)%1#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "reinterpret_Encoded(uint8)%1#0"
      ]
    },
    "747": {
      "op": "btoi",
      "defined_out": [
        "tmp%45#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%46#0"
      ]
    },
    "748": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%45#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%47#0"
      ]
    },
    "750": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint8)%2#0",
        "tmp%45#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint8)%2#0"
      ]
    },
    "753": {
      "op": "btoi",
      "defined_out": [
        "tmp%45#0",
        "tmp%47#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%47#0",
        "tmp%48#0"
      ]
    },
    "754": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%45#0",
        "tmp%47#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%47#0",
        "tmp%49#0"
      ]
    },
    "756": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_asset_account_app",
      "op": "callsub log_asset_account_app",
      "stack_out": []
    },
    "759": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "760": {
      "op": "return",
      "stack_out": []
    },
    "761": {
      "block": "main_log_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "763": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "764": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "765": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "767": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "768": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0"
      ]
    },
    "771": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_bytes",
      "op": "callsub log_bytes",
      "stack_out": []
    },
    "774": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "775": {
      "op": "return",
      "stack_out": []
    },
    "776": {
      "block": "main_log_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "778": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "779": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "780": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "782": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "783": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "786": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_bool",
      "op": "callsub log_bool",
      "stack_out": []
    },
    "789": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "790": {
      "op": "return",
      "stack_out": []
    },
    "791": {
      "block": "main_log_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "793": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "794": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "795": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "797": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "798": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%1#0"
      ]
    },
    "801": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_string",
      "op": "callsub log_string",
      "stack_out": []
    },
    "804": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "805": {
      "op": "return",
      "stack_out": []
    },
    "806": {
      "block": "main_log_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "808": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "809": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "810": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "812": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "813": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint512)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint512)%0#0"
      ]
    },
    "816": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_uint512",
      "op": "callsub log_uint512",
      "stack_out": []
    },
    "819": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "820": {
      "op": "return",
      "stack_out": []
    },
    "821": {
      "block": "main_log_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "823": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "824": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "825": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "827": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "828": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "831": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_uint64",
      "op": "callsub log_uint64",
      "stack_out": []
    },
    "834": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "835": {
      "op": "return",
      "stack_out": []
    },
    "836": {
      "block": "main_no_args_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "838": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "839": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "840": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "842": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "843": {
      "op": "pushbytes 0x151f7c75000000000000002a",
      "defined_out": [
        "0x151f7c75000000000000002a"
      ],
      "stack_out": [
        "0x151f7c75000000000000002a"
      ]
    },
    "857": {
      "op": "log",
      "stack_out": []
    },
    "858": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "859": {
      "op": "return",
      "stack_out": []
    },
    "860": {
      "block": "main_echo_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "862": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "863": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "864": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "866": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "867": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "870": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo",
      "op": "callsub echo",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "873": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0x151f7c75"
      ]
    },
    "874": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%13#0"
      ]
    },
    "875": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "876": {
      "op": "log",
      "stack_out": []
    },
    "877": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "878": {
      "op": "return",
      "stack_out": []
    },
    "879": {
      "block": "main_is_a_b_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "881": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "882": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "883": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "885": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "886": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "889": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "892": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "895": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "898": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.is_a_b",
      "op": "callsub is_a_b",
      "stack_out": []
    },
    "901": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "902": {
      "op": "return",
      "stack_out": []
    },
    "903": {
      "block": "main_bare_routing@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "905": {
      "op": "bnz main_after_if_else@28",
      "stack_out": []
    },
    "908": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "910": {
      "op": "!",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "911": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "912": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "913": {
      "op": "return",
      "stack_out": []
    },
    "914": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.is_a_b",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "is_a_b",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "917": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "919": {
      "op": "pushbytes 0x61",
      "defined_out": [
        "0x61",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "0x61"
      ]
    },
    "922": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "923": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": []
    },
    "924": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "926": {
      "op": "pushbytes 0x62",
      "defined_out": [
        "0x62",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0x62"
      ]
    },
    "929": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "930": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "931": {
      "retsub": true,
      "op": "retsub"
    },
    "932": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo",
      "params": {
        "value#0": "bytes"
      },
      "block": "echo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "935": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "937": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0"
      ]
    },
    "940": {
      "op": "bytec_1 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0",
        "0x6563686f3a20"
      ]
    },
    "941": {
      "op": "swap",
      "stack_out": [
        "0x6563686f3a20",
        "expr_value_trimmed%1#0"
      ]
    },
    "942": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0"
      ]
    },
    "943": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ],
      "stack_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "944": {
      "op": "len",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "945": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "946": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "949": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "950": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0"
      ],
      "stack_out": [
        "concat_result%0#0"
      ]
    },
    "951": {
      "retsub": true,
      "op": "retsub"
    },
    "952": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_uint64",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_uint64",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "955": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "957": {
      "op": "log",
      "stack_out": []
    },
    "958": {
      "retsub": true,
      "op": "retsub"
    },
    "959": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_uint512",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_uint512",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "962": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "964": {
      "op": "log",
      "stack_out": []
    },
    "965": {
      "retsub": true,
      "op": "retsub"
    },
    "966": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_string",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_string",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "969": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "971": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "974": {
      "op": "log",
      "stack_out": []
    },
    "975": {
      "retsub": true,
      "op": "retsub"
    },
    "976": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_bool",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_bool",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "979": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "981": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "0"
      ]
    },
    "982": {
      "op": "getbit",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "983": {
      "op": "pushbytess 0x46616c7365 0x54727565 // 0x46616c7365, 0x54727565",
      "defined_out": [
        "0x46616c7365",
        "0x54727565",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x46616c7365",
        "0x54727565"
      ]
    },
    "996": {
      "op": "uncover 2",
      "stack_out": [
        "0x46616c7365",
        "0x54727565",
        "tmp%0#0"
      ]
    },
    "998": {
      "op": "select",
      "defined_out": [
        "select%0#0"
      ],
      "stack_out": [
        "select%0#0"
      ]
    },
    "999": {
      "op": "log",
      "stack_out": []
    },
    "1000": {
      "retsub": true,
      "op": "retsub"
    },
    "1001": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_bytes",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_bytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1004": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1006": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1009": {
      "op": "log",
      "stack_out": []
    },
    "1010": {
      "retsub": true,
      "op": "retsub"
    },
    "1011": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_asset_account_app",
      "params": {
        "asset#0": "uint64",
        "account#0": "bytes",
        "app#0": "uint64"
      },
      "block": "log_asset_account_app",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1014": {
      "op": "frame_dig -3",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "1016": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1018": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1019": {
      "op": "frame_dig -2",
      "defined_out": [
        "account#0 (copy)",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "account#0 (copy)"
      ]
    },
    "1021": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1022": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "app#0 (copy)"
      ]
    },
    "1024": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "tmp%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "1026": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%1#0",
        "value%1#0"
      ]
    },
    "1027": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1028": {
      "op": "log",
      "stack_out": []
    },
    "1029": {
      "retsub": true,
      "op": "retsub"
    },
    "1030": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_address",
      "params": {
        "address#0": "bytes"
      },
      "block": "log_address",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1033": {
      "op": "frame_dig -1",
      "defined_out": [
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)"
      ]
    },
    "1035": {
      "op": "log",
      "stack_out": []
    },
    "1036": {
      "retsub": true,
      "op": "retsub"
    },
    "1037": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_string",
      "params": {
        "value#0": "bytes"
      },
      "block": "echo_native_string",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1040": {
      "op": "bytec_1 // \"echo: \"",
      "defined_out": [
        "\"echo: \""
      ],
      "stack_out": [
        "\"echo: \""
      ]
    },
    "1041": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"echo: \"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"echo: \"",
        "value#0 (copy)"
      ]
    },
    "1043": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1044": {
      "retsub": true,
      "op": "retsub"
    },
    "1045": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_bytes",
      "params": {
        "value#0": "bytes"
      },
      "block": "echo_native_bytes",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1048": {
      "op": "bytec_1 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20"
      ],
      "stack_out": [
        "0x6563686f3a20"
      ]
    },
    "1049": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6563686f3a20",
        "value#0 (copy)"
      ],
      "stack_out": [
        "0x6563686f3a20",
        "value#0 (copy)"
      ]
    },
    "1051": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1052": {
      "retsub": true,
      "op": "retsub"
    },
    "1053": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_uint64",
      "params": {
        "value#0": "uint64"
      },
      "block": "echo_native_uint64",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1056": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1058": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "1"
      ]
    },
    "1059": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1060": {
      "retsub": true,
      "op": "retsub"
    },
    "1061": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_biguint",
      "params": {
        "value#0": "bytes"
      },
      "block": "echo_native_biguint",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1064": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1066": {
      "op": "bytec_3 // 0x01",
      "defined_out": [
        "0x01",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "0x01"
      ]
    },
    "1067": {
      "op": "b+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1068": {
      "retsub": true,
      "op": "retsub"
    },
    "1069": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_tuple",
      "params": {
        "s#0": "bytes",
        "b#0": "bytes",
        "u#0": "uint64",
        "bu#0": "bytes"
      },
      "block": "echo_native_tuple",
      "stack_in": [],
      "op": "proto 4 4"
    },
    "1072": {
      "op": "bytec_1 // \"echo: \"",
      "defined_out": [
        "\"echo: \""
      ],
      "stack_out": [
        "\"echo: \""
      ]
    },
    "1073": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"echo: \"",
        "s#0 (copy)"
      ],
      "stack_out": [
        "\"echo: \"",
        "s#0 (copy)"
      ]
    },
    "1075": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1076": {
      "op": "bytec_1 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x6563686f3a20"
      ]
    },
    "1077": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x6563686f3a20",
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x6563686f3a20",
        "b#0 (copy)"
      ]
    },
    "1079": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1080": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)"
      ]
    },
    "1082": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)",
        "1"
      ]
    },
    "1083": {
      "op": "+",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1084": {
      "op": "frame_dig -1",
      "defined_out": [
        "bu#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "bu#0 (copy)"
      ]
    },
    "1086": {
      "op": "bytec_3 // 0x01",
      "defined_out": [
        "0x01",
        "bu#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "bu#0 (copy)",
        "0x01"
      ]
    },
    "1087": {
      "op": "b+",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1088": {
      "retsub": true,
      "op": "retsub"
    },
    "1089": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_nested_tuple",
      "params": {
        "tuple_of_tuples.0.0#0": "bytes",
        "tuple_of_tuples.0.1#0": "bytes",
        "tuple_of_tuples.1.0#0": "uint64",
        "tuple_of_tuples.1.1#0": "bytes",
        "tuple_of_tuples.1.2#0": "bytes"
      },
      "block": "echo_nested_tuple",
      "stack_in": [],
      "op": "proto 5 5"
    },
    "1092": {
      "op": "bytec_1 // \"echo: \"",
      "defined_out": [
        "\"echo: \""
      ],
      "stack_out": [
        "\"echo: \""
      ]
    },
    "1093": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"echo: \"",
        "tuple_of_tuples.0.0#0 (copy)"
      ],
      "stack_out": [
        "\"echo: \"",
        "tuple_of_tuples.0.0#0 (copy)"
      ]
    },
    "1095": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1096": {
      "op": "frame_dig -4",
      "defined_out": [
        "tmp%0#0",
        "tuple_of_tuples.0.1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tuple_of_tuples.0.1#0 (copy)"
      ]
    },
    "1098": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "1101": {
      "op": "bytec_1 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "expr_value_trimmed%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "expr_value_trimmed%1#0",
        "0x6563686f3a20"
      ]
    },
    "1102": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "0x6563686f3a20",
        "expr_value_trimmed%1#0"
      ]
    },
    "1103": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "concatenated%0#0"
      ]
    },
    "1104": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "1105": {
      "op": "len",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "1106": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "1107": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "1110": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "1111": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0"
      ]
    },
    "1112": {
      "op": "frame_dig -3",
      "defined_out": [
        "concat_result%0#0",
        "tmp%0#0",
        "tuple_of_tuples.1.0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0",
        "tuple_of_tuples.1.0#0 (copy)"
      ]
    },
    "1114": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "concat_result%0#0",
        "tmp%0#0",
        "tuple_of_tuples.1.0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0",
        "tuple_of_tuples.1.0#0 (copy)",
        "1"
      ]
    },
    "1115": {
      "op": "+",
      "defined_out": [
        "concat_result%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0"
      ]
    },
    "1116": {
      "op": "frame_dig -2",
      "defined_out": [
        "concat_result%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tuple_of_tuples.1.1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "tuple_of_tuples.1.1#0 (copy)"
      ]
    },
    "1118": {
      "op": "btoi",
      "defined_out": [
        "concat_result%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1119": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "1120": {
      "op": "+",
      "defined_out": [
        "concat_result%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "1121": {
      "op": "itob",
      "defined_out": [
        "concat_result%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "1122": {
      "op": "bytec_1 // 0x6563686f3a20",
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "0x6563686f3a20"
      ]
    },
    "1123": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6563686f3a20",
        "concat_result%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tuple_of_tuples.1.2#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "0x6563686f3a20",
        "tuple_of_tuples.1.2#0 (copy)"
      ]
    },
    "1125": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "tmp%3#0"
      ]
    },
    "1126": {
      "retsub": true,
      "op": "retsub"
    },
    "1127": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.return_args_after_14th",
      "params": {
        "_a1#0": "bytes",
        "_a2#0": "bytes",
        "_a3#0": "bytes",
        "_a4#0": "bytes",
        "_a5#0": "bytes",
        "_a6#0": "bytes",
        "_a7#0": "bytes",
        "_a8#0": "bytes",
        "_a9#0": "bytes",
        "_a10#0": "bytes",
        "_a11#0": "bytes",
        "_a12#0": "bytes",
        "_a13#0": "bytes",
        "_a14#0": "bytes",
        "a15#0": "bytes",
        "a16#0": "bytes",
        "a17#0": "bytes",
        "a18#0": "bytes",
        "a19#0": "bytes",
        "a20#0": "bytes"
      },
      "block": "return_args_after_14th",
      "stack_in": [],
      "op": "proto 20 1"
    },
    "1130": {
      "op": "frame_dig -6",
      "defined_out": [
        "a15#0 (copy)"
      ],
      "stack_out": [
        "a15#0 (copy)"
      ]
    },
    "1132": {
      "op": "frame_dig -5",
      "defined_out": [
        "a15#0 (copy)",
        "a16#0 (copy)"
      ],
      "stack_out": [
        "a15#0 (copy)",
        "a16#0 (copy)"
      ]
    },
    "1134": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0"
      ],
      "stack_out": [
        "encoded%1#0"
      ]
    },
    "1135": {
      "op": "frame_dig -4",
      "defined_out": [
        "a17#0 (copy)",
        "encoded%1#0"
      ],
      "stack_out": [
        "encoded%1#0",
        "a17#0 (copy)"
      ]
    },
    "1137": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0"
      ],
      "stack_out": [
        "encoded%2#0"
      ]
    },
    "1138": {
      "op": "frame_dig -3",
      "defined_out": [
        "a18#0 (copy)",
        "encoded%2#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "a18#0 (copy)"
      ]
    },
    "1140": {
      "op": "concat",
      "defined_out": [
        "encoded%3#0"
      ],
      "stack_out": [
        "encoded%3#0"
      ]
    },
    "1141": {
      "op": "frame_dig -2",
      "defined_out": [
        "a19#0 (copy)",
        "encoded%3#0"
      ],
      "stack_out": [
        "encoded%3#0",
        "a19#0 (copy)"
      ]
    },
    "1143": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0"
      ],
      "stack_out": [
        "encoded%4#0"
      ]
    },
    "1144": {
      "op": "frame_dig -1",
      "defined_out": [
        "a20#0 (copy)",
        "encoded%4#0"
      ],
      "stack_out": [
        "encoded%4#0",
        "a20#0 (copy)"
      ]
    },
    "1146": {
      "op": "concat",
      "defined_out": [
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0"
      ]
    },
    "1147": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "last_arg#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%0#0"
      ]
    },
    "1150": {
      "op": "dig 1",
      "defined_out": [
        "last_arg#0",
        "last_arg#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%0#0",
        "last_arg#0 (copy)"
      ]
    },
    "1152": {
      "op": "==",
      "defined_out": [
        "last_arg#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%1#0"
      ]
    },
    "1153": {
      "op": "assert",
      "stack_out": [
        "last_arg#0"
      ]
    },
    "1154": {
      "op": "dup",
      "stack_out": [
        "last_arg#0",
        "last_arg#0 (copy)"
      ]
    },
    "1155": {
      "op": "len",
      "defined_out": [
        "last_arg#0",
        "length%0#0"
      ],
      "stack_out": [
        "last_arg#0",
        "length%0#0"
      ]
    },
    "1156": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0",
        "as_bytes%0#0"
      ]
    },
    "1157": {
      "op": "extract 6 2",
      "defined_out": [
        "last_arg#0",
        "length_uint16%0#0"
      ],
      "stack_out": [
        "last_arg#0",
        "length_uint16%0#0"
      ]
    },
    "1160": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "last_arg#0"
      ]
    },
    "1161": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1162": {
      "retsub": true,
      "op": "retsub"
    },
    "1163": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.logs_are_equal",
      "params": {
        "log_1.level#0": "uint64",
        "log_1.message#0": "bytes",
        "log_2.level#0": "uint64",
        "log_2.message#0": "bytes"
      },
      "block": "logs_are_equal",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "1166": {
      "op": "frame_dig -4",
      "defined_out": [
        "log_1.level#0 (copy)"
      ],
      "stack_out": [
        "log_1.level#0 (copy)"
      ]
    },
    "1168": {
      "op": "frame_dig -2",
      "defined_out": [
        "log_1.level#0 (copy)",
        "log_2.level#0 (copy)"
      ],
      "stack_out": [
        "log_1.level#0 (copy)",
        "log_2.level#0 (copy)"
      ]
    },
    "1170": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1171": {
      "op": "frame_dig -3",
      "defined_out": [
        "log_1.message#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "log_1.message#0 (copy)"
      ]
    },
    "1173": {
      "op": "frame_dig -1",
      "defined_out": [
        "log_1.message#0 (copy)",
        "log_2.message#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "log_1.message#0 (copy)",
        "log_2.message#0 (copy)"
      ]
    },
    "1175": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1176": {
      "op": "&&",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1177": {
      "retsub": true,
      "op": "retsub"
    }
  }
}