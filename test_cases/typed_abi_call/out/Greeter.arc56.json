{
    "name": "Greeter",
    "structs": {},
    "methods": [
        {
            "name": "test_is_a_b",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_method_selector_kinds",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_method_overload",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arg_conversion",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_15plus_args",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_void",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_ref_types",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_account_to_address",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_string",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_bytes",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_uint64",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_biguint",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_tuple",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_tuple_method_ref",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_nested_tuples",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_no_args",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_named_tuples",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_struct",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_resource_encoding",
            "args": [
                {
                    "type": "uint64",
                    "name": "app_to_call"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        389
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        541
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        1896
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        659,
                        724,
                        789,
                        854,
                        918,
                        999,
                        1022,
                        1107,
                        1183,
                        1211,
                        1264,
                        1659,
                        1987,
                        2044,
                        2092,
                        2147,
                        2204,
                        2252,
                        2302,
                        2346,
                        2387,
                        2436,
                        2479,
                        2520,
                        2574,
                        2682,
                        2729,
                        2777,
                        2886,
                        2993,
                        3099,
                        3205,
                        3308,
                        3441,
                        3613,
                        3793,
                        3831,
                        3865,
                        3883,
                        3938,
                        3999,
                        4047,
                        4065,
                        4149,
                        4228,
                        4317,
                        4393,
                        4482,
                        4556
                    ],
                    "errorMessage": "application log value is not the result of an ABI return"
                },
                {
                    "pc": [
                        1888
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        3161
                    ],
                    "errorMessage": "expected arc4 arguments to give the same result"
                },
                {
                    "pc": [
                        4180,
                        4259,
                        4348,
                        4424,
                        4513,
                        4587
                    ],
                    "errorMessage": "expected echo to return same resources"
                },
                {
                    "pc": [
                        3055
                    ],
                    "errorMessage": "expected native arguments to give the same result"
                },
                {
                    "pc": [
                        4054,
                        4069
                    ],
                    "errorMessage": "expected output to match input"
                },
                {
                    "pc": [
                        554,
                        567,
                        1652,
                        2140,
                        2197,
                        2245
                    ],
                    "errorMessage": "invalid number of bytes for (len+uint8[])"
                },
                {
                    "pc": [
                        652,
                        717,
                        782,
                        847,
                        911,
                        993,
                        1015,
                        1100,
                        1176,
                        1204,
                        1257,
                        1980,
                        2037,
                        2085
                    ],
                    "errorMessage": "invalid number of bytes for (len+utf8[])"
                },
                {
                    "pc": [
                        4142,
                        4221,
                        4310,
                        4386,
                        4475,
                        4549
                    ],
                    "errorMessage": "invalid number of bytes for (uint64,uint64,uint8[32])"
                },
                {
                    "pc": [
                        3931,
                        3992
                    ],
                    "errorMessage": "invalid number of bytes for bool8"
                },
                {
                    "pc": [
                        2429,
                        2472,
                        2513
                    ],
                    "errorMessage": "invalid number of bytes for uint512"
                },
                {
                    "pc": [
                        575,
                        610,
                        943,
                        1291,
                        1471,
                        1674,
                        1838,
                        1848,
                        1907,
                        1945,
                        2105,
                        2265,
                        2295,
                        2339,
                        2380,
                        2398,
                        2530,
                        2842,
                        3275,
                        3759,
                        3786,
                        3824,
                        3859,
                        3876,
                        3895,
                        4011,
                        4077,
                        4086
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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gAgABldvcmxkNLIaI7IQIrIBs7Q+gAZXb3JsZDQSQzYaAUkVJRJESRc2GgJJFSUSREkXsTIKSwOyGIAERrUPr7IaTwKyGrIaTwKyGiOyECKyAbO0PkxxBEQyClBPAnIIRFASQzYaAUkVJRJEF7EyCkyyGIAEBDexfrIashojshAisgGztD4yChJDNhoBSRUlEkQXsUmyGCcMshonDbIaI7IQIrIBs7Q+SVcEAEkiWSQITBUSRElXAAQoEkRXBgBJgAdlY2hvOiBzEkSxSwGyGCcMshonDbIaI7IQIrIBs7Q+SVcEAEkiWSQITBUSRElXAAQoEkRXBgBLARJEsUyyGCcMshonDbIaI7IQIrIBs7Q+SVcEAEkiWSQITBUSRElXAAQoEkRXBgASQzYaAUkVJRJEF7FJshgnDrIaJw+yGiOyECKyAbO0PklXBABJIlkkCEwVEkRJVwAEKBJEVwYASYAHZWNobzogYhJEsUsBshgnDrIaJw+yGiOyECKyAbO0PklXBABJIlkkCEwVEkRJVwAEKBJEVwYASwESRLFMshgnDrIaJw+yGiOyECKyAbO0PklXBABJIlkkCEwVEkRJVwAEKBJEVwYAEkM2GgFJFSUSRBexSbIYJxCyGiuyGiOyECKyAbO0PklXBABJFSUSRExXAAQoEkQXSSQSRLGBARZLArIYJxCyGrIaI7IQIrIBs7Q+SVcEAEkVJRJETFcABCgSRBdLARJEsUyyGCcQshorshojshAisgGztD5JVwQASRUlEkRMVwAEKBJEFxJDNhoBSRUlEkQXsUmyGCcRshopshojshAisgGztD5JVwQASRWBQBJETFcABCgSREknEqhEsUsBshgnEbIaKbIaI7IQIrIBs7Q+SVcEAEkVgUASRExXAAQoEkRLAahEsUyyGCcRshopshojshAisgGztD5JVwQASRWBQBJETFcABCgSRKhDNhoBSRUlEkQXsUmyGCcEshonBbIaJwayGiuyGimyGiOyECKyAbO0PklXBABLAVcABCgSREkiWUsBJFlLAk8CSwJSSwIVSwNPA08CUksDVxBATwJXAgBJJwoSRE8CVwIASSccEkRPBCVbSSQSREsDJxKoRLGBARZLBrIYJwSyGicFshonBrIashopshojshAisgGztD5JVwQATFcABCgSREsFEkSxSwWyGCcEshonBbIaJwayGiuyGimyGiOyECKyAbO0PklXBABMVwAEKBJETwUSRLFPBLIYJwSyGicFshonBrIaK7IaKbIaI7IQIrIBs7Q+SVcEAEsBVwAEKBJESSJZSwEkWUsCTwJLAlJXAgBLAhVPA08DTwJSVwIASwIlW08DVxBATwZPBBJETwRPAxJETgISRKhDNhoBSRUlEkQXsUmyGCcEshonBbIaJwayGiuyGimyGiOyECKyAbO0PklXBABLAVcABCgSREkiWUsBJFlLAk8CSwJSVwIASwIVTwNPA08CUlcCAEsCJVtPA1cQQEsDJwoSREsCJxwSREsBJBJESScSqESxgQEWSwWyGCcEshonBbIaJwayGrIaKbIaI7IQIrIBs7Q+SVcEAEsBVwAEKBJESSJZSwEkWUsCTwJLAlJXAgBLAhVPA08DTwJSVwIASwIlW08DVxBATwNLBxJPA0sGEhBPAksEEhBMSwKoEESxSwSyGCcEshonBbIaJwayGiuyGimyGiOyECKyAbO0PklXBABLAVcABCgSREkiWUsBJFlLAk8CSwJSVwIASwIVTwNPA08CUlcCAEsCJVtPA1cQQE8DSwcSTwNLBhIQTwJLBBIQTEsCqBBEsU8EshgnBLIaJwWyGicGshorshopshojshAisgGztD5JVwQASwFXAAQoEkRJIllLASRZSwJPAksCUlcCAEsCFU8DTwNPAlJXAgBLAiVbTwNXEEBPA08HEk8DTwYSEE8CTwQSEExPAqgQQzYaAUkVJRJEF7FJshgnE7IaJx2yGiOyECKyAbO0PklXBABMVwAEKBJESSJZSwEkWUsCTwJLAlJJIllLASRZSwJPAksCUlcCAEsCFU8DTwNPAlJLAxVPBE8ETwJSSSJbSwFXCAhLAoEQWUsDFU8ETgJSVwIATwQnChJETwMnHhJETwIkEkRMJwuoRCcfEkSxSbIYJxOyGicdshojshAisgGztD5JVwQATFcABCgSREkiWUsBJFlLAk8CSwJSSSJZSwEkWUsCTwJLAlJXAgBLAhVPA08DTwJSSwMVTwRPBE8CUkkiW0sBVwgISwKBEFlLAxVPBE4CUlcCAE8EJwoSRE8DJx4SRE8CJBJETCcLqEQnHxJEsbIYJxOyGoAoAAQAEgAEAAkAA3MxYgADczJiAAAAAAAAAAsAAAAAAAAAFQASAAIzYrIaI7IQIrIBs7Q+SVcEAExXAAQoEkRJIllLASRZSwJPAksCUkkiWUsBJFlLAk8CSwJSVwIASwIVTwNPA08CUksDFU8ETwRPAlJJIltLAVcICEsCgRBZSwMVTwROAlJXAgBPBIAJZWNobzogczFiEkRPA4ALAAllY2hvOiBzMmISRE8CgQwSREyACAAAAAAAAAAWqESACGVjaG86IDNiEkM2GgFJFSUSRBexSbIYJxSyGiOyECKyAbO0PklXBABJFSUSRExXAAQoEkQXgSoSRLFJshgnFLIaI7IQIrIBs7Q+SVcEAEkVJRJETFcABCgSRCcgqESxshgnFLIaI7IQIrIBs7Q+SVcEABUlEkRXAAQoEkS0PklXBABJFSUSRExXAAQoEkQnIKhDNhoBSRUlEkQXsUmyGCchshonB7IaJweyGiOyECKyAbO0PklXBABJFYEBEkRMVwAEKBJEIlNEsbIYJyGyGoARAAAAAAAAAAIACgAFbG9nIDKyGicHshojshAisgGztD5JVwQASRWBARJETFcABCgSRCJTFEM2GgFJFSUSRBexshiABNxPGZKyGicHshojshAisgGztD5JVwQATFcABCgSRLQ+TCcHEkRJVwQATFcABCgSRCcHEkM2GgFJFSUSRBc2GgJJFSUSREkXMggyCrFLBLIYSwKyMEsBsjJJshwnFbIaJxayGicIshonCLIaI7IQIrIBs7Q+SVcEABWBMBJESVcABCgSREmBBFtLAYEMW08CVxQgTwJLBRJPAksEEhBMSwISEESxSwEWSwWyGCcXshpLBLIaSbIaSwGyGiOyECKyAbO0PklXBAAVgTASRElXAAQoEkRJgQRbSwGBDFtPAlcUIE8CSwYSTwJLBRIQTEsDEhBEsUsFshhLA7IwSwKyMksBshwnFbIaJxayGicIshonCLIaI7IQIrIBs7Q+SVcEABWBMBJESVcABCgSREmBBFtLAYEMW08CVxQgTwJLBhJPAksFEhBMSwMSEESxSwWyGCcXshpLBLIaSbIaSwGyGiOyECKyAbO0PklXBAAVgTASRElXAAQoEkRJgQRbSwGBDFtPAlcUIE8CSwYSTwJLBRIQTEsDEhBEsUsFshhLA7IwSwKyMksBshwnFbIaJxayGicIshonCLIaI7IQIrIBs7Q+SVcEABWBMBJESVcABCgSREmBBFtLAYEMW08CVxQgTwJLBhJPAksFEhBMSwMSEESxTwWyGCcXshpPBLIashpJshojshAisgGztD5JVwQAFYEwEkRJVwAEKBJESYEEW0sBgQxbTwJXFCBPAk8FEk8CTwQSEExPAhIQQw==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}