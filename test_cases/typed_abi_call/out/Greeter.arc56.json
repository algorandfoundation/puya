{
    "name": "Greeter",
    "structs": {},
    "methods": [
        {
            "name": "test_is_a_b",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_method_selector_kinds",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_method_overload",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arg_conversion",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_15plus_args",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_void",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_ref_types",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_account_to_address",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_string",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_bytes",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_uint64",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_biguint",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_tuple",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_native_tuple_method_ref",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_nested_tuples",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_no_args",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_named_tuples",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_struct",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_resource_encoding",
            "args": [
                {
                    "type": "uint64",
                    "name": "app_to_call"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        389
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        541
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        1710
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        619,
                        674,
                        729,
                        784,
                        838,
                        901,
                        914,
                        989,
                        1055,
                        1073,
                        1116,
                        1488,
                        1778,
                        1822,
                        1857,
                        1894,
                        1938,
                        1973,
                        2013,
                        2052,
                        2088,
                        2126,
                        2163,
                        2198,
                        2247,
                        2356,
                        2403,
                        2451,
                        2556,
                        2664,
                        2771,
                        2878,
                        2977,
                        3110,
                        3282,
                        3451,
                        3484,
                        3510,
                        3523,
                        3567,
                        3622,
                        3665,
                        3683,
                        3748,
                        3817,
                        3896,
                        3962,
                        4041,
                        4105
                    ],
                    "errorMessage": "application log value is not the result of an ABI return"
                },
                {
                    "pc": [
                        1702
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        2834
                    ],
                    "errorMessage": "expected arc4 arguments to give the same result"
                },
                {
                    "pc": [
                        3778,
                        3847,
                        3926,
                        3992,
                        4071,
                        4135
                    ],
                    "errorMessage": "expected echo to return same resources"
                },
                {
                    "pc": [
                        2727
                    ],
                    "errorMessage": "expected native arguments to give the same result"
                },
                {
                    "pc": [
                        3672,
                        3687
                    ],
                    "errorMessage": "expected output to match input"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAYCDCYiBBUffHVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgSb+BkTCAAAAAAAAAABBBbgORkEAAJzMQQAAmIxEQAAAAAAAAABAAoABWxvZyAxAQEEtLQzTghlY2hvOiBzMQgAAAAAAAAAAwRKREx3AwABcwQmWegYAwABYgSp+2zxBNjMNjsBAwSrJxzkBLhi7hkE1sKsfwEABEgULV4NAAtlY2hvOiB0dXBsZQgAAAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADCQ8QERLerb7vFAhlY2hvOiBiMSUABAAQAAQACAACczEAAnMyAAAAAAAAAAEAAAAAAAAAAgASAAEzCgAIZWNobzogczIHZWNobzogMwgAAAAAAAAAKgTd0HGFMRtBAJQxGRREMRhEghMECUQYzQQx6OISBLXc8LoEvzskKwQGO+rHBOnzCH0EyIkg+QTC8htzBIYFKlwE6F8kQQSSCC0IBGIRzVkEGe7XJASS917iBOdI744Ex7lJWQSGjknnBKzNUHIE9/PYrDYaAI4TAAkALQFDAlsDCgPDBGIEnQS+BTIFpgYXBoQHuQlpC0cLswwWDFMAMRkUMRgUEEM2GgE2GgI2GgMXsbIYgATHchK8shpMshqyGiOyECKyAbOBAUM2GgEXsUmyGCqyGoAHAAV0ZXN0MbIaI7IQIrIBs7Q+SVcEAExXAAQoEkSADQALZWNobzogdGVzdDESRLFJshgqshqABwAFdGVzdDKyGiOyECKyAbO0PklXBABMVwAEKBJEgA0AC2VjaG86IHRlc3QyEkSxSbIYKrIagAcABXRlc3QzshojshAisgGztD5JVwQATFcABCgSRIANAAtlY2hvOiB0ZXN0MxJEsUmyGCqyGoAHAAV0ZXN0NLIaI7IQIrIBs7Q+SVcEAExXAAQoEkSADQALZWNobzogdGVzdDQSRLGyGCqyGoAHAAV0ZXN0NbIaI7IQIrIBs7Q+SVcEAExXAAQoEkSADQALZWNobzogdGVzdDUSQzYaARexSbIYKrIagBAADnR5cGVkICsgaWdub3JlshojshAisgGztD5XAAQoEkS0PklXBABMVwAEKBJEgBYAFGVjaG86IHR5cGVkICsgaWdub3JlEkSxSbIYKrIagBIAEHVudHlwZWQgKyBpZ25vcmWyGiOyECKyAbO0PklXBABMVwAEKBJEgBgAFmVjaG86IHVudHlwZWQgKyBpZ25vcmUSRLFJshgqshqABwAFdHVwbGWyGiOyECKyAbO0PklXBABMVwAEKBJEtD5MJxgSRElXBABMVwAEKBJEJxgSRLGyGCqyGoAJAAd1bnR5cGVkshojshAisgGztD5JVwQATFcABCgSRIAPAA1lY2hvOiB1bnR5cGVkEkM2GgEXsUmyGCcJshqADAAKY29udmVydGVkMbIaI7IQIrIBs7Q+gApjb252ZXJ0ZWQxEkSxSbIYgAQ8EFjZshonGbIaI7IQIrIBs7Q+JBYSRLFJshiABGr0WTCyGicashojshAisgGztD4nGhJEsUmyGIAEtQDhEbIagAMAATSyGiOyECKyAbO0PoABNBJEsbIYgARu7X7DshqAAYCyGiOyECKyAbO0PoAEVHJ1ZRJDNhoBF7GyGIAEugtDgbIaK7IaJxmyGicLshqACAAAAAAAAAAEshqACAAAAAAAAAAFshqACAAAAAAAAAAGshqACAAAAAAAAAAHshqACAAAAAAAAAAIshqACAAAAAAAAAAJshqACAAAAAAAAAAKshqACAAAAAAAAAALshqACAAAAAAAAAAMshqACAAAAAAAAAANshqACAAAAAAAAAAOshonG7IaI7IQIrIBs7Q+SVcABCgSRFcGACcbEkM2GgEXsUmyGCcJshqACAAGV29ybGQxshojshAisgGztD6ABldvcmxkMRJEsUmyGCcJshqACAAGV29ybGQyshojshAisgGztD6ABldvcmxkMhJEsUmyGCcJshqACAAGV29ybGQzshojshAisgGztD6ABldvcmxkMxJEsbIYJwmyGoAIAAZXb3JsZDSyGiOyECKyAbO0PoAGV29ybGQ0EkM2GgFJFzYaAkkXsTIKSwOyGIAERrUPr7IaTwKyGrIaTwKyGiOyECKyAbO0PkxxBEQyClBPAnIIRFASQzYaARexMgpMshiABAQ3sX6yGrIaI7IQIrIBs7Q+MgoSQzYaARexSbIYJwyyGicNshojshAisgGztD5JVwAEKBJEVwYASYAHZWNobzogcxJEsUsBshgnDLIaJw2yGiOyECKyAbO0PklXAAQoEkRXBgBLARJEsUyyGCcMshonDbIaI7IQIrIBs7Q+SVcABCgSRFcGABJDNhoBF7FJshgnDrIaJw+yGiOyECKyAbO0PklXAAQoEkRXBgBJgAdlY2hvOiBiEkSxSwGyGCcOshonD7IaI7IQIrIBs7Q+SVcABCgSRFcGAEsBEkSxTLIYJw6yGicPshojshAisgGztD5JVwAEKBJEVwYAEkM2GgEXsUmyGCcQshorshojshAisgGztD5JVwQATFcABCgSRBdJJBJEsYEBFksCshgnELIashojshAisgGztD5JVwQATFcABCgSRBdLARJEsUyyGCcQshorshojshAisgGztD5JVwQATFcABCgSRBcSQzYaARexSbIYJxGyGimyGiOyECKyAbO0PklXBABMVwAEKBJESScSqESxSwGyGCcRshopshojshAisgGztD5JVwQATFcABCgSREsBqESxTLIYJxGyGimyGiOyECKyAbO0PklXBABMVwAEKBJEqEM2GgEXsUmyGCcEshonBbIaJwayGiuyGimyGiOyECKyAbO0PklXBABLAVcABCgSREkiWUsBJFlLAk8CSwJSSwIVSwNPA08CUksDVxBATwJXAgBJJwoSRE8CVwIASSccEkRPBIEIW0kkEkRLAycSqESxgQEWSwayGCcEshonBbIaJwayGrIaKbIaI7IQIrIBs7Q+SVcEAExXAAQoEkRLBRJEsUsFshgnBLIaJwWyGicGshorshopshojshAisgGztD5JVwQATFcABCgSRE8FEkSxTwSyGCcEshonBbIaJwayGiuyGimyGiOyECKyAbO0PklXBABLAVcABCgSREkiWUsBJFlLAk8CSwJSVwIASwIVTwNPA08CUlcCAEsCgQhbTwNXEEBPBk8EEkRPBE8DEkROAhJEqEM2GgEXsUmyGCcEshonBbIaJwayGiuyGimyGiOyECKyAbO0PklXBABLAVcABCgSREkiWUsBJFlLAk8CSwJSVwIASwIVTwNPA08CUlcCAEsCgQhbTwNXEEBLAycKEkRLAiccEkRLASQSREknEqhEsYEBFksFshgnBLIaJwWyGicGshqyGimyGiOyECKyAbO0PklXBABLAVcABCgSREkiWUsBJFlLAk8CSwJSVwIASwIVTwNPA08CUlcCAEsCgQhbTwNXEEBPA0sHEk8DSwYSEE8CSwQSEExLAqgQRLFLBLIYJwSyGicFshonBrIaK7IaKbIaI7IQIrIBs7Q+SVcEAEsBVwAEKBJESSJZSwEkWUsCTwJLAlJXAgBLAhVPA08DTwJSVwIASwKBCFtPA1cQQE8DSwcSTwNLBhIQTwJLBBIQTEsCqBBEsU8EshgnBLIaJwWyGicGshorshopshojshAisgGztD5JVwQASwFXAAQoEkRJIllLASRZSwJPAksCUlcCAEsCFU8DTwNPAlJXAgBLAoEIW08DVxBATwNPBxJPA08GEhBPAk8EEhBMTwKoEEM2GgEXsUmyGCcTshonHbIaI7IQIrIBs7Q+SVcEAExXAAQoEkRJIllLASRZSwJPAksCUkkiWUsBJFlLAk8CSwJSVwIASwIVTwNPA08CUksDFU8ETwRPAlJJIltLAVcICEsCgRBZSwMVTwROAlJXAgBPBCcKEkRPAyceEkRPAiQSREwnC6hEJx8SRLFJshgnE7IaJx2yGiOyECKyAbO0PklXBABMVwAEKBJESSJZSwEkWUsCTwJLAlJJIllLASRZSwJPAksCUlcCAEsCFU8DTwNPAlJLAxVPBE8ETwJSSSJbSwFXCAhLAoEQWUsDFU8ETgJSVwIATwQnChJETwMnHhJETwIkEkRMJwuoRCcfEkSxshgnE7IagCgABAASAAQACQADczFiAANzMmIAAAAAAAAACwAAAAAAAAAVABIAAjNishojshAisgGztD5JVwQATFcABCgSREkiWUsBJFlLAk8CSwJSSSJZSwEkWUsCTwJLAlJXAgBLAhVPA08DTwJSSwMVTwRPBE8CUkkiW0sBVwgISwKBEFlLAxVPBE4CUlcCAE8EgAllY2hvOiBzMWISRE8DgAsACWVjaG86IHMyYhJETwIlEkRMgAgAAAAAAAAAFqhEgAhlY2hvOiAzYhJDNhoBF7FJshgnFLIaI7IQIrIBs7Q+SVcEAExXAAQoEkQXgSoSRLFJshgnFLIaI7IQIrIBs7Q+SVcEAExXAAQoEkQnIKhEsbIYJxSyGiOyECKyAbO0PlcABCgSRLQ+SVcEAExXAAQoEkQnIKhDNhoBF7FJshgnIbIaJweyGicHshojshAisgGztD5JVwQATFcABCgSRCJTRLGyGCchshqAEQAAAAAAAAACAAoABWxvZyAyshonB7IaI7IQIrIBs7Q+SVcEAExXAAQoEkQiUxRDNhoBF7GyGIAE3E8ZkrIaJweyGiOyECKyAbO0PklXBABMVwAEKBJEtD5MJwcSRElXBABMVwAEKBJEJwcSQzYaARc2GgJJFzIIMgqxSwSyGEsCsjBLAbIySbIcJxWyGicWshonCLIaJwiyGiOyECKyAbO0PklXAAQoEkRJgQRbSwElW08CVxQgTwJLBRJPAksEEhBMSwISEESxSwEWSwWyGCcXshpLBLIaSbIaSwGyGiOyECKyAbO0PklXAAQoEkRJgQRbSwElW08CVxQgTwJLBhJPAksFEhBMSwMSEESxSwWyGEsDsjBLArIySwGyHCcVshonFrIaJwiyGicIshojshAisgGztD5JVwAEKBJESYEEW0sBJVtPAlcUIE8CSwYSTwJLBRIQTEsDEhBEsUsFshgnF7IaSwSyGkmyGksBshojshAisgGztD5JVwAEKBJESYEEW0sBJVtPAlcUIE8CSwYSTwJLBRIQTEsDEhBEsUsFshhLA7IwSwKyMksBshwnFbIaJxayGicIshonCLIaI7IQIrIBs7Q+SVcABCgSREmBBFtLASVbTwJXFCBPAksGEk8CSwUSEExLAxIQRLFPBbIYJxeyGk8EshqyGkmyGiOyECKyAbO0PklXAAQoEkRJgQRbSwElW08CVxQgTwJPBRJPAk8EEhBMTwISEEM=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}