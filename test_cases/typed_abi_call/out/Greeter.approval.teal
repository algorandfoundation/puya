#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 6 1 2
    bytecblock 0x151f7c75 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x9bf81913 0x0000000000000001 0x16e03919 0x00027331 0x00026231 0x0000000000000001000a00056c6f672031 0x01 0xb4b4334e "echo: s1" 0x0000000000000003 0x4a444c77 0x000173 0x2659e818 0x000162 0xa9fb6cf1 0xd8cc363b 0x03 0xab271ce4 0xb862ee19 0xd6c2ac7f 0x00 0x48142d5e 0x000b6563686f3a207475706c65 0x0000000000000002 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003 0x0f101112deadbeef14 0x6563686f3a206231 0x00040010000400080002733100027332000000000000000100000000000000020012000133 0x00086563686f3a207332 0x6563686f3a2033 0x000000000000002a 0xddd07185
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@24
    pushbytess 0x094418cd 0x31e8e212 0xb5dcf0ba 0xbf3b242b 0x063beac7 0xe9f3087d 0xc88920f9 0xc2f21b73 0x86052a5c 0xe85f2441 0x92082d08 0x6211cd59 0x19eed724 0x92f75ee2 0xe748ef8e 0xc7b94959 0x868e49e7 0xaccd5072 0xf7f3d8ac // method "test_is_a_b(byte[],byte[],uint64)void", method "test_method_selector_kinds(uint64)void", method "test_method_overload(uint64)void", method "test_arg_conversion(uint64)void", method "test_15plus_args(uint64)void", method "test_void(uint64)void", method "test_ref_types(uint64,uint64)void", method "test_account_to_address(uint64)void", method "test_native_string(uint64)void", method "test_native_bytes(uint64)void", method "test_native_uint64(uint64)void", method "test_native_biguint(uint64)void", method "test_native_tuple(uint64)void", method "test_native_tuple_method_ref(uint64)void", method "test_nested_tuples(uint64)void", method "test_no_args(uint64)void", method "test_named_tuples(uint64)void", method "test_arc4_struct(uint64)void", method "test_resource_encoding(uint64,uint64)void"
    txna ApplicationArgs 0
    match main_test_is_a_b_route@3 main_test_method_selector_kinds_route@4 main_test_method_overload_route@5 main_test_arg_conversion_route@6 main_test_15plus_args_route@7 main_test_void_route@8 main_test_ref_types_route@9 main_test_account_to_address_route@10 main_test_native_string_route@11 main_test_native_bytes_route@12 main_test_native_uint64_route@13 main_test_native_biguint_route@14 main_test_native_tuple_route@15 main_test_native_tuple_method_ref_route@16 main_test_nested_tuples_route@17 main_test_no_args_route@18 main_test_named_tuples_route@19 main_test_arc4_struct_route@20 main_test_resource_encoding_route@21

main_after_if_else@28:
    err

main_test_resource_encoding_route@21:
    // typed_abi_call/typed_c2c.py:384
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // typed_abi_call/typed_c2c.py:384
    // @arc4.abimethod()
    callsub test_resource_encoding
    intc_2 // 1
    return

main_test_arc4_struct_route@20:
    // typed_abi_call/typed_c2c.py:373
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/typed_c2c.py:373
    // @arc4.abimethod()
    callsub test_arc4_struct
    intc_2 // 1
    return

main_test_named_tuples_route@19:
    // typed_abi_call/typed_c2c.py:356
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/typed_c2c.py:356
    // @arc4.abimethod()
    callsub test_named_tuples
    intc_2 // 1
    return

main_test_no_args_route@18:
    // typed_abi_call/typed_c2c.py:346
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/typed_c2c.py:346
    // @arc4.abimethod()
    callsub test_no_args
    intc_2 // 1
    return

main_test_nested_tuples_route@17:
    // typed_abi_call/typed_c2c.py:300
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/typed_c2c.py:300
    // @arc4.abimethod()
    callsub test_nested_tuples
    intc_2 // 1
    return

main_test_native_tuple_method_ref_route@16:
    // typed_abi_call/typed_c2c.py:250
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/typed_c2c.py:250
    // @arc4.abimethod()
    callsub test_native_tuple_method_ref
    intc_2 // 1
    return

main_test_native_tuple_route@15:
    // typed_abi_call/typed_c2c.py:191
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/typed_c2c.py:191
    // @arc4.abimethod()
    callsub test_native_tuple
    intc_2 // 1
    return

main_test_native_biguint_route@14:
    // typed_abi_call/typed_c2c.py:180
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/typed_c2c.py:180
    // @arc4.abimethod()
    callsub test_native_biguint
    intc_2 // 1
    return

main_test_native_uint64_route@13:
    // typed_abi_call/typed_c2c.py:169
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/typed_c2c.py:169
    // @arc4.abimethod()
    callsub test_native_uint64
    intc_2 // 1
    return

main_test_native_bytes_route@12:
    // typed_abi_call/typed_c2c.py:156
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/typed_c2c.py:156
    // @arc4.abimethod()
    callsub test_native_bytes
    intc_2 // 1
    return

main_test_native_string_route@11:
    // typed_abi_call/typed_c2c.py:145
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/typed_c2c.py:145
    // @arc4.abimethod()
    callsub test_native_string
    intc_2 // 1
    return

main_test_account_to_address_route@10:
    // typed_abi_call/typed_c2c.py:136
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/typed_c2c.py:136
    // @arc4.abimethod()
    callsub test_account_to_address
    intc_2 // 1
    return

main_test_ref_types_route@9:
    // typed_abi_call/typed_c2c.py:122
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // typed_abi_call/typed_c2c.py:122
    // @arc4.abimethod()
    callsub test_ref_types
    intc_2 // 1
    return

main_test_void_route@8:
    // typed_abi_call/typed_c2c.py:108
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/typed_c2c.py:108
    // @arc4.abimethod()
    callsub test_void
    intc_2 // 1
    return

main_test_15plus_args_route@7:
    // typed_abi_call/typed_c2c.py:80
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/typed_c2c.py:80
    // @arc4.abimethod()
    callsub test_15plus_args
    intc_2 // 1
    return

main_test_arg_conversion_route@6:
    // typed_abi_call/typed_c2c.py:63
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/typed_c2c.py:63
    // @arc4.abimethod()
    callsub test_arg_conversion
    intc_2 // 1
    return

main_test_method_overload_route@5:
    // typed_abi_call/typed_c2c.py:48
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/typed_c2c.py:48
    // @arc4.abimethod()
    callsub test_method_overload
    intc_2 // 1
    return

main_test_method_selector_kinds_route@4:
    // typed_abi_call/typed_c2c.py:34
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/typed_c2c.py:34
    // @arc4.abimethod()
    callsub test_method_selector_kinds
    intc_2 // 1
    return

main_test_is_a_b_route@3:
    // typed_abi_call/typed_c2c.py:25
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    // typed_abi_call/typed_c2c.py:25
    // @arc4.abimethod
    callsub test_is_a_b
    intc_2 // 1
    return

main_bare_routing@24:
    // typed_abi_call/typed_c2c.py:24
    // class Greeter(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@28
    txn ApplicationID
    !
    assert // can only call when creating
    intc_2 // 1
    return


// test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b(a: bytes, b: bytes, app: uint64) -> void:
test_is_a_b:
    // typed_abi_call/typed_c2c.py:25-26
    // @arc4.abimethod
    // def test_is_a_b(self, a: Bytes, b: Bytes, app: Application) -> None:
    proto 3 0
    // typed_abi_call/typed_c2c.py:27-32
    // arc4.abi_call(
    //     "is_a_b(byte[],byte[])void",
    //     a,
    //     b,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:29
    // a,
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    // typed_abi_call/typed_c2c.py:30
    // b,
    frame_dig -2
    len
    itob
    extract 6 2
    frame_dig -2
    concat
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:27-32
    // arc4.abi_call(
    //     "is_a_b(byte[],byte[])void",
    //     a,
    //     b,
    //     app_id=app,
    // )
    pushbytes 0xc77212bc // method "is_a_b(byte[],byte[])void"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(app: uint64) -> void:
test_method_selector_kinds:
    // typed_abi_call/typed_c2c.py:34-35
    // @arc4.abimethod()
    // def test_method_selector_kinds(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:37
    // result, _txn = arc4.abi_call(Logger.echo, arc4.String("test1"), app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_2 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00057465737431
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:38
    // assert result == "echo: test1"
    pushbytes 0x000b6563686f3a207465737431
    ==
    assert
    // typed_abi_call/typed_c2c.py:39
    // result, _txn = arc4.abi_call(LoggerClient.echo, "test2", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_2 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00057465737432
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:40
    // assert result == "echo: test2"
    pushbytes 0x000b6563686f3a207465737432
    ==
    assert
    // typed_abi_call/typed_c2c.py:41
    // result, _txn = arc4.abi_call[arc4.String]("echo", "test3", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_2 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00057465737433
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:42
    // assert result == "echo: test3"
    pushbytes 0x000b6563686f3a207465737433
    ==
    assert
    // typed_abi_call/typed_c2c.py:43
    // result, _txn = arc4.abi_call[arc4.String]("echo(string)", "test4", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_2 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00057465737434
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:44
    // assert result == "echo: test4"
    pushbytes 0x000b6563686f3a207465737434
    ==
    assert
    // typed_abi_call/typed_c2c.py:45
    // result, _txn = arc4.abi_call[arc4.String]("echo(string)string", "test5", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_2 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00057465737435
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:46
    // assert result == "echo: test5"
    pushbytes 0x000b6563686f3a207465737435
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(app: uint64) -> void:
test_method_overload:
    // typed_abi_call/typed_c2c.py:48-49
    // @arc4.abimethod()
    // def test_method_overload(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:50
    // arc4.abi_call[arc4.String]("echo(string)string", "typed + ignore", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_2 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x000e7479706564202b2069676e6f7265
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:51
    // assert arc4.String.from_log(op.ITxn.last_log()) == "echo: typed + ignore"
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    pushbytes 0x00146563686f3a207479706564202b2069676e6f7265
    ==
    assert
    // typed_abi_call/typed_c2c.py:53
    // arc4.abi_call("echo(string)string", "untyped + ignore", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_2 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x0010756e7479706564202b2069676e6f7265
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // typed_abi_call/typed_c2c.py:54
    // assert arc4.String.from_log(op.ITxn.last_log()) == "echo: untyped + ignore"
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    pushbytes 0x00166563686f3a20756e7479706564202b2069676e6f7265
    ==
    assert
    // typed_abi_call/typed_c2c.py:56
    // result = arc4.abi_call[arc4.String]("echo(string)string", "tuple", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_2 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00057475706c65
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    itxn LastLog
    // typed_abi_call/typed_c2c.py:57
    // assert result[0] == "echo: tuple"
    swap
    bytec 24 // 0x000b6563686f3a207475706c65
    ==
    assert
    // typed_abi_call/typed_c2c.py:58
    // assert arc4.String.from_log(result[1].last_log) == "echo: tuple"
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:57
    // assert result[0] == "echo: tuple"
    bytec 24 // 0x000b6563686f3a207475706c65
    // typed_abi_call/typed_c2c.py:58
    // assert arc4.String.from_log(result[1].last_log) == "echo: tuple"
    ==
    assert
    // typed_abi_call/typed_c2c.py:60
    // txn_result = arc4.abi_call("echo(string)string", "untyped", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_2 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x0007756e7479706564
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:61
    // assert arc4.String.from_log(txn_result.last_log) == "echo: untyped"
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    pushbytes 0x000d6563686f3a20756e7479706564
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(app: uint64) -> void:
test_arg_conversion:
    // typed_abi_call/typed_c2c.py:63-64
    // @arc4.abimethod()
    // def test_arg_conversion(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:65
    // txn = arc4.abi_call(Logger.log_string, "converted1", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 9 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes 0x000a636f6e76657274656431
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:66
    // assert txn.last_log == b"converted1"
    pushbytes 0x636f6e76657274656431
    ==
    assert
    // typed_abi_call/typed_c2c.py:68
    // txn = arc4.abi_call(Logger.log_uint64, 2, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0x3c1058d9 // method "log(uint64)void"
    itxn_field ApplicationArgs
    bytec 25 // 0x0000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:69
    // assert txn.last_log == op.itob(2)
    intc_3 // 2
    itob
    ==
    assert
    // typed_abi_call/typed_c2c.py:71
    // txn = arc4.abi_call(Logger.log_uint512, 3, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0x6af45930 // method "log(uint512)void"
    itxn_field ApplicationArgs
    bytec 26 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:72
    // assert txn.last_log == (op.bzero(56) + op.itob(3))
    bytec 26 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003
    ==
    assert
    // typed_abi_call/typed_c2c.py:74
    // txn = arc4.abi_call(Logger.log_bytes, b"4", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0xb500e111 // method "log(byte[])void"
    itxn_field ApplicationArgs
    pushbytes 0x000134
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:75
    // assert txn.last_log == b"4"
    pushbytes 0x34
    ==
    assert
    // typed_abi_call/typed_c2c.py:77
    // txn = arc4.abi_call(Logger.log_bool, True, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0x6eed7ec3 // method "log(bool)void"
    itxn_field ApplicationArgs
    pushbytes 0x80
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:78
    // assert txn.last_log == b"True"
    pushbytes 0x54727565
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(app: uint64) -> void:
test_15plus_args:
    // typed_abi_call/typed_c2c.py:80-81
    // @arc4.abimethod()
    // def test_15plus_args(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:82-105
    // result, txn = arc4.abi_call(
    //     Logger.return_args_after_14th,
    //     1,
    //     2,
    //     3,
    //     4,
    //     5,
    //     6,
    //     7,
    //     8,
    //     9,
    //     10,
    //     11,
    //     12,
    //     13,
    //     14,
    //     15,
    //     16,
    //     17,
    //     18,
    //     arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    //     20,
    //     app_id=app,
    // )
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0xba0b4381 // method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:84
    // 1,
    bytec_3 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:85
    // 2,
    bytec 25 // 0x0000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:86
    // 3,
    bytec 11 // 0x0000000000000003
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:87
    // 4,
    pushbytes 0x0000000000000004
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:88
    // 5,
    pushbytes 0x0000000000000005
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:89
    // 6,
    pushbytes 0x0000000000000006
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:90
    // 7,
    pushbytes 0x0000000000000007
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:91
    // 8,
    pushbytes 0x0000000000000008
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:92
    // 9,
    pushbytes 0x0000000000000009
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:93
    // 10,
    pushbytes 0x000000000000000a
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:94
    // 11,
    pushbytes 0x000000000000000b
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:95
    // 12,
    pushbytes 0x000000000000000c
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:96
    // 13,
    pushbytes 0x000000000000000d
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:97
    // 14,
    pushbytes 0x000000000000000e
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:98-103
    // 15,
    // 16,
    // 17,
    // 18,
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    // 20,
    bytec 27 // 0x0f101112deadbeef14
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:82-105
    // result, txn = arc4.abi_call(
    //     Logger.return_args_after_14th,
    //     1,
    //     2,
    //     3,
    //     4,
    //     5,
    //     6,
    //     7,
    //     8,
    //     9,
    //     10,
    //     11,
    //     12,
    //     13,
    //     14,
    //     15,
    //     16,
    //     17,
    //     18,
    //     arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    //     20,
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:106
    // assert result.native == Bytes.from_hex("0F101112DEADBEEF14")
    extract 6 0
    bytec 27 // 0x0f101112deadbeef14
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_void(app: uint64) -> void:
test_void:
    // typed_abi_call/typed_c2c.py:108-109
    // @arc4.abimethod()
    // def test_void(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:110
    // txn = arc4.abi_call(LOG_METHOD_NAME + "(string)void", "World1", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 9 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes 0x0006576f726c6431
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:111
    // assert txn.last_log == b"World1"
    pushbytes 0x576f726c6431
    ==
    assert
    // typed_abi_call/typed_c2c.py:113
    // txn = arc4.abi_call(LOG_METHOD_NAME + "(string)", "World2", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 9 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes 0x0006576f726c6432
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:114
    // assert txn.last_log == b"World2"
    pushbytes 0x576f726c6432
    ==
    assert
    // typed_abi_call/typed_c2c.py:116
    // txn = arc4.abi_call(LOG_METHOD_NAME, arc4.String("World3"), app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 9 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes 0x0006576f726c6433
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:117
    // assert txn.last_log == b"World3"
    pushbytes 0x576f726c6433
    ==
    assert
    // typed_abi_call/typed_c2c.py:119
    // txn = arc4.abi_call(Logger.log_string, "World4", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 9 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes 0x0006576f726c6434
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:120
    // assert txn.last_log == b"World4"
    pushbytes 0x576f726c6434
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(app: uint64, asset: uint64) -> void:
test_ref_types:
    // typed_abi_call/typed_c2c.py:122-123
    // @arc4.abimethod()
    // def test_ref_types(self, app: Application, asset: Asset) -> None:
    proto 2 0
    // typed_abi_call/typed_c2c.py:124-130
    // txn = arc4.abi_call(
    //     Logger.log_asset_account_app,
    //     asset,
    //     Global.current_application_address,
    //     app,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:126
    // asset,
    frame_dig -1
    itob
    // typed_abi_call/typed_c2c.py:127
    // Global.current_application_address,
    global CurrentApplicationAddress
    // typed_abi_call/typed_c2c.py:128
    // app,
    frame_dig -2
    itob
    frame_dig -2
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:124-130
    // txn = arc4.abi_call(
    //     Logger.log_asset_account_app,
    //     asset,
    //     Global.current_application_address,
    //     app,
    //     app_id=app,
    // )
    pushbytes 0x46b50faf // method "log(uint64,address,uint64)void"
    itxn_field ApplicationArgs
    uncover 2
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:133
    // == asset.name + Global.current_application_address.bytes + app.address.bytes
    frame_dig -1
    asset_params_get AssetName
    assert // asset exists
    global CurrentApplicationAddress
    concat
    frame_dig -2
    app_params_get AppAddress
    assert // application exists
    concat
    // typed_abi_call/typed_c2c.py:132-133
    // txn.last_log
    // == asset.name + Global.current_application_address.bytes + app.address.bytes
    ==
    // typed_abi_call/typed_c2c.py:131-134
    // assert (
    //     txn.last_log
    //     == asset.name + Global.current_application_address.bytes + app.address.bytes
    // )
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address(app: uint64) -> void:
test_account_to_address:
    // typed_abi_call/typed_c2c.py:136-137
    // @arc4.abimethod()
    // def test_account_to_address(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:138-142
    // txn = arc4.abi_call(
    //     Logger.log_address,
    //     Global.current_application_address,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:140
    // Global.current_application_address,
    global CurrentApplicationAddress
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:138-142
    // txn = arc4.abi_call(
    //     Logger.log_address,
    //     Global.current_application_address,
    //     app_id=app,
    // )
    pushbytes 0x0437b17e // method "log(address)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:143
    // assert txn.last_log == Global.current_application_address.bytes
    global CurrentApplicationAddress
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(app: uint64) -> void:
test_native_string:
    // typed_abi_call/typed_c2c.py:145-146
    // @arc4.abimethod()
    // def test_native_string(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:147
    // result1, _txn = arc4.abi_call(Logger.echo_native_string, "s", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 12 // method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    bytec 13 // 0x000173
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    extract 6 0
    // typed_abi_call/typed_c2c.py:148
    // assert result1 == "echo: s"
    dup
    pushbytes "echo: s"
    ==
    assert
    // typed_abi_call/typed_c2c.py:150
    // result2, _txn = arc4.abi_call(Logger.echo_native_string, String("s"), app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 12 // method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:147
    // result1, _txn = arc4.abi_call(Logger.echo_native_string, "s", app_id=app)
    bytec 13 // 0x000173
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:150
    // result2, _txn = arc4.abi_call(Logger.echo_native_string, String("s"), app_id=app)
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    extract 6 0
    // typed_abi_call/typed_c2c.py:151
    // assert result2 == result1
    dig 1
    ==
    assert
    // typed_abi_call/typed_c2c.py:153
    // result3, _txn = arc4.abi_call(Logger.echo_native_string, arc4.String("s"), app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 12 // method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:147
    // result1, _txn = arc4.abi_call(Logger.echo_native_string, "s", app_id=app)
    bytec 13 // 0x000173
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:153
    // result3, _txn = arc4.abi_call(Logger.echo_native_string, arc4.String("s"), app_id=app)
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    extract 6 0
    // typed_abi_call/typed_c2c.py:154
    // assert result3 == result1
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(app: uint64) -> void:
test_native_bytes:
    // typed_abi_call/typed_c2c.py:156-157
    // @arc4.abimethod()
    // def test_native_bytes(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:158
    // result1, _txn = arc4.abi_call(Logger.echo_native_bytes, b"b", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 14 // method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    bytec 15 // 0x000162
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    extract 6 0
    // typed_abi_call/typed_c2c.py:159
    // assert result1 == b"echo: b"
    dup
    pushbytes 0x6563686f3a2062
    ==
    assert
    // typed_abi_call/typed_c2c.py:161
    // result2, _txn = arc4.abi_call(Logger.echo_native_bytes, Bytes(b"b"), app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 14 // method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:158
    // result1, _txn = arc4.abi_call(Logger.echo_native_bytes, b"b", app_id=app)
    bytec 15 // 0x000162
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:161
    // result2, _txn = arc4.abi_call(Logger.echo_native_bytes, Bytes(b"b"), app_id=app)
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    extract 6 0
    // typed_abi_call/typed_c2c.py:162
    // assert result2 == result1
    dig 1
    ==
    assert
    // typed_abi_call/typed_c2c.py:164-166
    // result3, _txn = arc4.abi_call(
    //     Logger.echo_native_bytes, arc4.DynamicBytes(b"b"), app_id=app
    // )
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 14 // method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:158
    // result1, _txn = arc4.abi_call(Logger.echo_native_bytes, b"b", app_id=app)
    bytec 15 // 0x000162
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:164-166
    // result3, _txn = arc4.abi_call(
    //     Logger.echo_native_bytes, arc4.DynamicBytes(b"b"), app_id=app
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    extract 6 0
    // typed_abi_call/typed_c2c.py:167
    // assert result3 == result1
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(app: uint64) -> void:
test_native_uint64:
    // typed_abi_call/typed_c2c.py:169-170
    // @arc4.abimethod()
    // def test_native_uint64(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:171
    // result1, _txn = arc4.abi_call(Logger.echo_native_uint64, 1, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 16 // method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    bytec_3 // 0x0000000000000001
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    btoi
    // typed_abi_call/typed_c2c.py:172
    // assert result1 == 2
    dup
    intc_3 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:174
    // result2, _txn = arc4.abi_call(Logger.echo_native_uint64, UInt64(1), app_id=app)
    itxn_begin
    intc_2 // 1
    itob
    frame_dig -1
    itxn_field ApplicationID
    bytec 16 // method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    btoi
    // typed_abi_call/typed_c2c.py:175
    // assert result2 == result1
    dig 1
    ==
    assert
    // typed_abi_call/typed_c2c.py:177
    // result3, _txn = arc4.abi_call(Logger.echo_native_uint64, arc4.UInt64(1), app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 16 // method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    bytec_3 // 0x0000000000000001
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    btoi
    // typed_abi_call/typed_c2c.py:178
    // assert result3 == result1
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(app: uint64) -> void:
test_native_biguint:
    // typed_abi_call/typed_c2c.py:180-181
    // @arc4.abimethod()
    // def test_native_biguint(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:182
    // result1, _txn = arc4.abi_call(Logger.echo_native_biguint, 2, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 17 // method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:183
    // assert result1 == 3
    dup
    bytec 18 // 0x03
    b==
    assert
    // typed_abi_call/typed_c2c.py:185
    // result2, _txn = arc4.abi_call(Logger.echo_native_biguint, BigUInt(2), app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 17 // method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:186
    // assert result2 == result1
    dig 1
    b==
    assert
    // typed_abi_call/typed_c2c.py:188
    // result3, _txn = arc4.abi_call(Logger.echo_native_biguint, arc4.UInt512(2), app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 17 // method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:189
    // assert result3 == result1
    b==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(app: uint64) -> void:
test_native_tuple:
    // typed_abi_call/typed_c2c.py:191-192
    // @arc4.abimethod()
    // def test_native_tuple(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:193-203
    // # python literals
    // result1, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:198
    // "s1",
    bytec 5 // 0x00027331
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:199
    // b"b1",
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:200
    // 1,
    bytec_3 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:201
    // 2,
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:193-203
    // # python literals
    // result1, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    dig 1
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:204
    // s, b, u, bu = result1.native
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dig 2
    len
    dig 3
    uncover 3
    uncover 2
    substring3
    dig 3
    extract 16 64
    // typed_abi_call/typed_c2c.py:205
    // assert s.native == "echo: s1"
    uncover 2
    extract 2 0
    dup
    bytec 10 // "echo: s1"
    ==
    assert
    // typed_abi_call/typed_c2c.py:206
    // assert b.native == b"echo: b1"
    uncover 2
    extract 2 0
    dup
    bytec 28 // 0x6563686f3a206231
    ==
    assert
    // typed_abi_call/typed_c2c.py:207
    // assert u.native == 2
    uncover 4
    pushint 8 // 8
    extract_uint64
    dup
    intc_3 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:208
    // assert bu.native == 3
    dig 3
    bytec 18 // 0x03
    b==
    assert
    // typed_abi_call/typed_c2c.py:210-220
    // # test again using native types in arguments
    // result2, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:217
    // UInt64(1),
    intc_2 // 1
    itob
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:210-220
    // # test again using native types in arguments
    // result2, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:198
    // "s1",
    bytec 5 // 0x00027331
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:199
    // b"b1",
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:218
    // BigUInt(2),
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:210-220
    // # test again using native types in arguments
    // result2, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:221
    // assert result1 == result2
    dig 5
    ==
    assert
    // typed_abi_call/typed_c2c.py:223-233
    // # test again using arc4 types in arguments
    // result3, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:198
    // "s1",
    bytec 5 // 0x00027331
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:199
    // b"b1",
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:230
    // arc4.UInt64(1),
    bytec_3 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:231
    // arc4.UInt512(2),
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:223-233
    // # test again using arc4 types in arguments
    // result3, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:234
    // assert result1 == result3
    uncover 5
    ==
    assert
    // typed_abi_call/typed_c2c.py:236-244
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:198
    // "s1",
    bytec 5 // 0x00027331
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:199
    // b"b1",
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:241
    // arc4.UInt64(1),
    bytec_3 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:242
    // arc4.UInt512(2),
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:236-244
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    dig 1
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    uncover 3
    uncover 3
    uncover 2
    substring3
    extract 2 0
    dig 2
    pushint 8 // 8
    extract_uint64
    uncover 3
    extract 16 64
    // typed_abi_call/typed_c2c.py:245
    // assert result1.native[0].native == result_native[0]
    uncover 6
    uncover 4
    ==
    assert
    // typed_abi_call/typed_c2c.py:246
    // assert result1.native[1].native == result_native[1]
    uncover 4
    uncover 3
    ==
    assert
    // typed_abi_call/typed_c2c.py:247
    // assert result1.native[2].native == result_native[2]
    cover 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:248
    // assert result1.native[3].native == result_native[3]
    b==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref(app: uint64) -> void:
test_native_tuple_method_ref:
    // typed_abi_call/typed_c2c.py:250-251
    // @arc4.abimethod()
    // def test_native_tuple_method_ref(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:252-260
    // # test with literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:255
    // "s1",
    bytec 5 // 0x00027331
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:256
    // b"b1",
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:257
    // 1,
    bytec_3 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:258
    // 2,
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:252-260
    // # test with literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    dig 1
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    uncover 3
    uncover 3
    uncover 2
    substring3
    extract 2 0
    dig 2
    pushint 8 // 8
    extract_uint64
    uncover 3
    extract 16 64
    // typed_abi_call/typed_c2c.py:262
    // assert s == "echo: s1"
    dig 3
    bytec 10 // "echo: s1"
    ==
    assert
    // typed_abi_call/typed_c2c.py:263
    // assert b == b"echo: b1"
    dig 2
    bytec 28 // 0x6563686f3a206231
    ==
    assert
    // typed_abi_call/typed_c2c.py:264
    // assert u == 2
    dig 1
    intc_3 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:265
    // assert bu == 3
    dup
    bytec 18 // 0x03
    b==
    assert
    // typed_abi_call/typed_c2c.py:267-275
    // # test with native args
    // result_2, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:272
    // UInt64(1),
    intc_2 // 1
    itob
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:267-275
    // # test with native args
    // result_2, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:255
    // "s1",
    bytec 5 // 0x00027331
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:256
    // b"b1",
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:273
    // BigUInt(2),
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:267-275
    // # test with native args
    // result_2, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    dig 1
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    uncover 3
    uncover 3
    uncover 2
    substring3
    extract 2 0
    dig 2
    pushint 8 // 8
    extract_uint64
    uncover 3
    extract 16 64
    // typed_abi_call/typed_c2c.py:276
    // assert result_2 == result, "expected native arguments to give the same result"
    uncover 3
    dig 7
    ==
    uncover 3
    dig 6
    ==
    &&
    uncover 2
    dig 4
    ==
    &&
    swap
    dig 2
    b==
    &&
    assert // expected native arguments to give the same result
    // typed_abi_call/typed_c2c.py:278-286
    // # test with arc4 args
    // result_3, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:255
    // "s1",
    bytec 5 // 0x00027331
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:256
    // b"b1",
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:283
    // arc4.UInt64(1),
    bytec_3 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:284
    // arc4.UInt512(2),
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:278-286
    // # test with arc4 args
    // result_3, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    dig 1
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    uncover 3
    uncover 3
    uncover 2
    substring3
    extract 2 0
    dig 2
    pushint 8 // 8
    extract_uint64
    uncover 3
    extract 16 64
    // typed_abi_call/typed_c2c.py:287
    // assert result_3 == result, "expected arc4 arguments to give the same result"
    uncover 3
    dig 7
    ==
    uncover 3
    dig 6
    ==
    &&
    uncover 2
    dig 4
    ==
    &&
    swap
    dig 2
    b==
    &&
    assert // expected arc4 arguments to give the same result
    // typed_abi_call/typed_c2c.py:289-297
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 4 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:255
    // "s1",
    bytec 5 // 0x00027331
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:256
    // b"b1",
    bytec 6 // 0x00026231
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:294
    // arc4.UInt64(1),
    bytec_3 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:295
    // arc4.UInt512(2),
    bytec_1 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:289-297
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    dig 1
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    uncover 3
    uncover 3
    uncover 2
    substring3
    extract 2 0
    dig 2
    pushint 8 // 8
    extract_uint64
    uncover 3
    extract 16 64
    // typed_abi_call/typed_c2c.py:298
    // assert result_native == result
    uncover 3
    uncover 7
    ==
    uncover 3
    uncover 6
    ==
    &&
    uncover 2
    uncover 4
    ==
    &&
    swap
    uncover 2
    b==
    &&
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples(app: uint64) -> void:
test_nested_tuples:
    // typed_abi_call/typed_c2c.py:300-301
    // @arc4.abimethod()
    // def test_nested_tuples(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:302-307
    // # literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     (("s1", "s2"), (1, 2, b"3")),
    //     app_id=app,
    // )
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 19 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:305
    // (("s1", "s2"), (1, 2, b"3")),
    bytec 29 // 0x00040010000400080002733100027332000000000000000100000000000000020012000133
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:302-307
    // # literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     (("s1", "s2"), (1, 2, b"3")),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    uncover 3
    uncover 3
    uncover 2
    substring3
    dig 3
    len
    uncover 4
    uncover 4
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    extract 8 8
    dig 2
    pushint 16 // 16
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    extract 2 0
    // typed_abi_call/typed_c2c.py:309
    // assert s1 == "echo: s1"
    uncover 4
    bytec 10 // "echo: s1"
    ==
    assert
    // typed_abi_call/typed_c2c.py:310
    // assert s2 == "echo: s2"
    uncover 3
    bytec 30 // 0x00086563686f3a207332
    ==
    assert
    // typed_abi_call/typed_c2c.py:311
    // assert u64_1 == 2
    uncover 2
    intc_3 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:312
    // assert u64_2 == 3
    swap
    bytec 11 // 0x0000000000000003
    b==
    assert
    // typed_abi_call/typed_c2c.py:313
    // assert bytez == b"echo: 3"
    bytec 31 // 0x6563686f3a2033
    ==
    assert
    // typed_abi_call/typed_c2c.py:315-320
    // # native args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     ((String("s1"), arc4.String("s2")), (UInt64(1), arc4.UInt64(2), Bytes(b"3"))),
    //     app_id=app,
    // )
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 19 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:318
    // ((String("s1"), arc4.String("s2")), (UInt64(1), arc4.UInt64(2), Bytes(b"3"))),
    bytec 29 // 0x00040010000400080002733100027332000000000000000100000000000000020012000133
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:315-320
    // # native args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     ((String("s1"), arc4.String("s2")), (UInt64(1), arc4.UInt64(2), Bytes(b"3"))),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    uncover 3
    uncover 3
    uncover 2
    substring3
    dig 3
    len
    uncover 4
    uncover 4
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    extract 8 8
    dig 2
    pushint 16 // 16
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    extract 2 0
    // typed_abi_call/typed_c2c.py:322
    // assert s1 == "echo: s1"
    uncover 4
    bytec 10 // "echo: s1"
    ==
    assert
    // typed_abi_call/typed_c2c.py:323
    // assert s2 == "echo: s2"
    uncover 3
    // typed_abi_call/typed_c2c.py:310
    // assert s2 == "echo: s2"
    bytec 30 // 0x00086563686f3a207332
    // typed_abi_call/typed_c2c.py:323
    // assert s2 == "echo: s2"
    ==
    assert
    // typed_abi_call/typed_c2c.py:324
    // assert u64_1 == 2
    uncover 2
    intc_3 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:325
    // assert u64_2 == 3
    swap
    bytec 11 // 0x0000000000000003
    b==
    assert
    // typed_abi_call/typed_c2c.py:326
    // assert bytez == b"echo: 3"
    bytec 31 // 0x6563686f3a2033
    ==
    assert
    // typed_abi_call/typed_c2c.py:328-338
    // # arc4 args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     arc4.Tuple(
    //         (
    //             arc4.Tuple((arc4.String("s1b"), arc4.String("s2b"))),
    //             arc4.Tuple((arc4.UInt64(11), arc4.UInt64(21), arc4.DynamicBytes(b"3b"))),
    //         )
    //     ),
    //     app_id=app,
    // )
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 19 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:331-336
    // arc4.Tuple(
    //     (
    //         arc4.Tuple((arc4.String("s1b"), arc4.String("s2b"))),
    //         arc4.Tuple((arc4.UInt64(11), arc4.UInt64(21), arc4.DynamicBytes(b"3b"))),
    //     )
    // ),
    pushbytes 0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:328-338
    // # arc4 args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     arc4.Tuple(
    //         (
    //             arc4.Tuple((arc4.String("s1b"), arc4.String("s2b"))),
    //             arc4.Tuple((arc4.UInt64(11), arc4.UInt64(21), arc4.DynamicBytes(b"3b"))),
    //         )
    //     ),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_3 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    uncover 3
    uncover 3
    uncover 2
    substring3
    dig 3
    len
    uncover 4
    uncover 4
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    extract 8 8
    dig 2
    pushint 16 // 16
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    extract 2 0
    // typed_abi_call/typed_c2c.py:340
    // assert s1 == "echo: s1b"
    uncover 4
    pushbytes "echo: s1b"
    ==
    assert
    // typed_abi_call/typed_c2c.py:341
    // assert s2 == "echo: s2b"
    uncover 3
    pushbytes 0x00096563686f3a20733262
    ==
    assert
    // typed_abi_call/typed_c2c.py:342
    // assert u64_1 == 12
    uncover 2
    pushint 12 // 12
    ==
    assert
    // typed_abi_call/typed_c2c.py:343
    // assert u64_2 == 22
    swap
    pushbytes 0x0000000000000016
    b==
    assert
    // typed_abi_call/typed_c2c.py:344
    // assert bytez == b"echo: 3b"
    pushbytes 0x6563686f3a203362
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args(app: uint64) -> void:
test_no_args:
    // typed_abi_call/typed_c2c.py:346-347
    // @arc4.abimethod()
    // def test_no_args(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:348
    // result, _txn = arc4.abi_call(Logger.no_args, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 20 // method "no_args()uint64"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    btoi
    // typed_abi_call/typed_c2c.py:349
    // assert result == 42
    pushint 42 // 42
    ==
    assert
    // typed_abi_call/typed_c2c.py:350
    // arc4_result, _txn = arc4.abi_call[arc4.UInt64]("no_args()uint64", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 20 // method "no_args()uint64"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:351
    // assert arc4_result == 42
    bytec 32 // 0x000000000000002a
    b==
    assert
    // typed_abi_call/typed_c2c.py:353
    // arc4.abi_call(Logger.no_args, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 20 // method "no_args()uint64"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:354
    // assert arc4.UInt64.from_log(op.ITxn.last_log()) == 42
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    bytec 32 // 0x000000000000002a
    b==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples(app: uint64) -> void:
test_named_tuples:
    // typed_abi_call/typed_c2c.py:356-357
    // @arc4.abimethod()
    // def test_named_tuples(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:358-363
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(1), String("log 1")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 33 // method "logs_are_equal((uint64,string),(uint64,string))bool"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:360
    // (UInt64(1), String("log 1")),
    bytec 7 // 0x0000000000000001000a00056c6f672031
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:361
    // LogMessage(level=UInt64(1), message=String("log 1")),
    bytec 7 // 0x0000000000000001000a00056c6f672031
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:358-363
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(1), String("log 1")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    intc_0 // 0
    getbit
    // typed_abi_call/typed_c2c.py:364
    // assert result
    assert
    // typed_abi_call/typed_c2c.py:365-370
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(2), String("log 2")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 33 // method "logs_are_equal((uint64,string),(uint64,string))bool"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:367
    // (UInt64(2), String("log 2")),
    pushbytes 0x0000000000000002000a00056c6f672032
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:361
    // LogMessage(level=UInt64(1), message=String("log 1")),
    bytec 7 // 0x0000000000000001000a00056c6f672031
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:365-370
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(2), String("log 2")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    intc_0 // 0
    getbit
    // typed_abi_call/typed_c2c.py:371
    // assert not result
    !
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct(app: uint64) -> void:
test_arc4_struct:
    // typed_abi_call/typed_c2c.py:373-374
    // @arc4.abimethod()
    // def test_arc4_struct(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:376-380
    // result, txn = arc4.abi_call(
    //     Logger.echo_log_struct,
    //     log,
    //     app_id=app,
    // )
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0xdc4f1992 // method "echo_log_struct((uint64,string))(uint64,string)"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:375
    // log = LogStruct(level=arc4.UInt64(1), message=arc4.String("log 1"))
    bytec 7 // 0x0000000000000001000a00056c6f672031
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:376-380
    // result, txn = arc4.abi_call(
    //     Logger.echo_log_struct,
    //     log,
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    itxn LastLog
    // typed_abi_call/typed_c2c.py:381
    // assert result == log, "expected output to match input"
    swap
    // typed_abi_call/typed_c2c.py:375
    // log = LogStruct(level=arc4.UInt64(1), message=arc4.String("log 1"))
    bytec 7 // 0x0000000000000001000a00056c6f672031
    // typed_abi_call/typed_c2c.py:381
    // assert result == log, "expected output to match input"
    ==
    assert // expected output to match input
    // typed_abi_call/typed_c2c.py:382
    // assert LogStruct.from_log(txn.last_log) == log, "expected output to match input"
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:375
    // log = LogStruct(level=arc4.UInt64(1), message=arc4.String("log 1"))
    bytec 7 // 0x0000000000000001000a00056c6f672031
    // typed_abi_call/typed_c2c.py:382
    // assert LogStruct.from_log(txn.last_log) == log, "expected output to match input"
    ==
    assert // expected output to match input
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding(app_to_call: uint64, asset: uint64) -> void:
test_resource_encoding:
    // typed_abi_call/typed_c2c.py:384-385
    // @arc4.abimethod()
    // def test_resource_encoding(self, app_to_call: Application, asset: Asset) -> None:
    proto 2 0
    // typed_abi_call/typed_c2c.py:386
    // app = Global.current_application_id
    global CurrentApplicationID
    // typed_abi_call/typed_c2c.py:387
    // acc = Global.current_application_address
    global CurrentApplicationAddress
    // typed_abi_call/typed_c2c.py:389-391
    // result, txn = arc4.abi_call(
    //     Logger.echo_resource_by_index, asset, app, acc, app_id=app_to_call
    // )
    itxn_begin
    frame_dig -2
    itxn_field ApplicationID
    frame_dig -1
    itxn_field Assets
    dig 1
    itxn_field Applications
    dup
    itxn_field Accounts
    bytec 21 // method "echo_resource_by_index(asset,application,account)(uint64,uint64,address)"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:390
    // Logger.echo_resource_by_index, asset, app, acc, app_id=app_to_call
    bytec 22 // 0x00
    itxn_field ApplicationArgs
    bytec 8 // 0x01
    itxn_field ApplicationArgs
    bytec 8 // 0x01
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:389-391
    // result, txn = arc4.abi_call(
    //     Logger.echo_resource_by_index, asset, app, acc, app_id=app_to_call
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    pushint 4 // 4
    extract_uint64
    dig 1
    pushint 12 // 12
    extract_uint64
    uncover 2
    extract 20 32
    // typed_abi_call/typed_c2c.py:392
    // assert result == (asset, app, acc), "expected echo to return same resources"
    uncover 2
    frame_dig -1
    ==
    uncover 2
    dig 4
    ==
    &&
    swap
    dig 2
    ==
    &&
    assert // expected echo to return same resources
    // typed_abi_call/typed_c2c.py:394-396
    // result, txn = arc4.abi_call(
    //     Logger.echo_resource_by_value, asset, app, acc, app_id=app_to_call
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:395
    // Logger.echo_resource_by_value, asset, app, acc, app_id=app_to_call
    frame_dig -1
    itob
    dig 2
    itob
    frame_dig -2
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:394-396
    // result, txn = arc4.abi_call(
    //     Logger.echo_resource_by_value, asset, app, acc, app_id=app_to_call
    // )
    bytec 23 // method "echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)"
    itxn_field ApplicationArgs
    dig 1
    itxn_field ApplicationArgs
    dup
    itxn_field ApplicationArgs
    dig 2
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    pushint 4 // 4
    extract_uint64
    dig 1
    pushint 12 // 12
    extract_uint64
    uncover 2
    extract 20 32
    // typed_abi_call/typed_c2c.py:397
    // assert result == (asset, app, acc), "expected echo to return same resources"
    uncover 2
    frame_dig -1
    ==
    uncover 2
    dig 6
    ==
    &&
    swap
    dig 4
    ==
    &&
    assert // expected echo to return same resources
    // typed_abi_call/typed_c2c.py:399-401
    // result, txn = arc4.abi_call(
    //     LoggerClient.echo_resource_by_index, asset, app, acc, app_id=app_to_call
    // )
    itxn_begin
    frame_dig -2
    itxn_field ApplicationID
    frame_dig -1
    itxn_field Assets
    dig 3
    itxn_field Applications
    dig 2
    itxn_field Accounts
    bytec 21 // method "echo_resource_by_index(asset,application,account)(uint64,uint64,address)"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:400
    // LoggerClient.echo_resource_by_index, asset, app, acc, app_id=app_to_call
    bytec 22 // 0x00
    itxn_field ApplicationArgs
    bytec 8 // 0x01
    itxn_field ApplicationArgs
    bytec 8 // 0x01
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:399-401
    // result, txn = arc4.abi_call(
    //     LoggerClient.echo_resource_by_index, asset, app, acc, app_id=app_to_call
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    pushint 4 // 4
    extract_uint64
    dig 1
    pushint 12 // 12
    extract_uint64
    uncover 2
    extract 20 32
    // typed_abi_call/typed_c2c.py:402
    // assert result == (asset, app, acc), "expected echo to return same resources"
    uncover 2
    frame_dig -1
    ==
    uncover 2
    dig 6
    ==
    &&
    swap
    dig 4
    ==
    &&
    assert // expected echo to return same resources
    // typed_abi_call/typed_c2c.py:404-406
    // result, txn = arc4.abi_call(
    //     LoggerClient.echo_resource_by_value, asset, app, acc, app_id=app_to_call
    // )
    itxn_begin
    frame_dig -2
    itxn_field ApplicationID
    bytec 23 // method "echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)"
    itxn_field ApplicationArgs
    dig 1
    itxn_field ApplicationArgs
    dup
    itxn_field ApplicationArgs
    dig 2
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    pushint 4 // 4
    extract_uint64
    dig 1
    pushint 12 // 12
    extract_uint64
    uncover 2
    extract 20 32
    // typed_abi_call/typed_c2c.py:407
    // assert result == (asset, app, acc), "expected echo to return same resources"
    uncover 2
    frame_dig -1
    ==
    uncover 2
    dig 6
    ==
    &&
    swap
    dig 4
    ==
    &&
    assert // expected echo to return same resources
    // typed_abi_call/typed_c2c.py:409-415
    // result, txn = arc4.abi_call[tuple[Asset, Application, Account]](
    //     "echo_resource_by_index(asset,application,account)(uint64,uint64,address)",
    //     asset,
    //     app,
    //     acc,
    //     app_id=app_to_call,
    // )
    itxn_begin
    frame_dig -2
    itxn_field ApplicationID
    frame_dig -1
    itxn_field Assets
    dig 3
    itxn_field Applications
    dig 2
    itxn_field Accounts
    bytec 21 // method "echo_resource_by_index(asset,application,account)(uint64,uint64,address)"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:411
    // asset,
    bytec 22 // 0x00
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:412
    // app,
    bytec 8 // 0x01
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:413
    // acc,
    bytec 8 // 0x01
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:409-415
    // result, txn = arc4.abi_call[tuple[Asset, Application, Account]](
    //     "echo_resource_by_index(asset,application,account)(uint64,uint64,address)",
    //     asset,
    //     app,
    //     acc,
    //     app_id=app_to_call,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    pushint 4 // 4
    extract_uint64
    dig 1
    pushint 12 // 12
    extract_uint64
    uncover 2
    extract 20 32
    // typed_abi_call/typed_c2c.py:416
    // assert result == (asset, app, acc), "expected echo to return same resources"
    uncover 2
    frame_dig -1
    ==
    uncover 2
    dig 6
    ==
    &&
    swap
    dig 4
    ==
    &&
    assert // expected echo to return same resources
    // typed_abi_call/typed_c2c.py:418-424
    // result, txn = arc4.abi_call[tuple[Asset, Application, Account]](
    //     "echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)",
    //     asset,
    //     app,
    //     acc,
    //     app_id=app_to_call,
    // )
    itxn_begin
    frame_dig -2
    itxn_field ApplicationID
    bytec 23 // method "echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    dup
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    pushint 4 // 4
    extract_uint64
    dig 1
    pushint 12 // 12
    extract_uint64
    uncover 2
    extract 20 32
    // typed_abi_call/typed_c2c.py:425
    // assert result == (asset, app, acc), "expected echo to return same resources"
    uncover 2
    frame_dig -1
    ==
    uncover 2
    uncover 4
    ==
    &&
    swap
    uncover 2
    ==
    &&
    assert // expected echo to return same resources
    retsub
