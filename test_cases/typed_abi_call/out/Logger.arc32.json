{
    "hints": {
        "is_a_b(byte[],byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "echo(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "no_args()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "log(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "log(uint512)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "log(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "log(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "log(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "log(asset,account,application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "echo_native_string(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "echo_native_bytes(byte[])byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "echo_native_uint64(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "echo_native_biguint(uint512)uint512": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "logs_are_equal((uint64,string),(uint64,string))bool": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "log_1": {
                    "name": "LogMessage",
                    "elements": [
                        [
                            "level",
                            "uint64"
                        ],
                        [
                            "message",
                            "string"
                        ]
                    ]
                },
                "log_2": {
                    "name": "LogMessage",
                    "elements": [
                        [
                            "level",
                            "uint64"
                        ],
                        [
                            "message",
                            "string"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLnR5cGVkX2FiaV9jYWxsLmxvZ2dlci5Mb2dnZXIuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Logger",
        "methods": [
            {
                "name": "is_a_b",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "echo",
                "args": [
                    {
                        "type": "string",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "no_args",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "log",
                "args": [
                    {
                        "type": "uint64",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "log",
                "args": [
                    {
                        "type": "uint512",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "log",
                "args": [
                    {
                        "type": "string",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "log",
                "args": [
                    {
                        "type": "bool",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "log",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "log",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "account",
                        "name": "account"
                    },
                    {
                        "type": "application",
                        "name": "app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "echo_native_string",
                "args": [
                    {
                        "type": "string",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "echo_native_bytes",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "echo_native_uint64",
                "args": [
                    {
                        "type": "uint64",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "echo_native_biguint",
                "args": [
                    {
                        "type": "uint512",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint512"
                }
            },
            {
                "name": "echo_native_tuple",
                "args": [
                    {
                        "type": "string",
                        "name": "s"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    },
                    {
                        "type": "uint64",
                        "name": "u"
                    },
                    {
                        "type": "uint512",
                        "name": "bu"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(string,byte[],uint64,uint512)"
                }
            },
            {
                "name": "echo_nested_tuple",
                "args": [
                    {
                        "type": "((string,string),(uint64,uint64,byte[]))",
                        "name": "tuple_of_tuples"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "((string,string),(uint64,uint64,byte[]))"
                }
            },
            {
                "name": "return_args_after_14th",
                "args": [
                    {
                        "type": "uint64",
                        "name": "_a1"
                    },
                    {
                        "type": "uint64",
                        "name": "_a2"
                    },
                    {
                        "type": "uint64",
                        "name": "_a3"
                    },
                    {
                        "type": "uint64",
                        "name": "_a4"
                    },
                    {
                        "type": "uint64",
                        "name": "_a5"
                    },
                    {
                        "type": "uint64",
                        "name": "_a6"
                    },
                    {
                        "type": "uint64",
                        "name": "_a7"
                    },
                    {
                        "type": "uint64",
                        "name": "_a8"
                    },
                    {
                        "type": "uint64",
                        "name": "_a9"
                    },
                    {
                        "type": "uint64",
                        "name": "_a10"
                    },
                    {
                        "type": "uint64",
                        "name": "_a11"
                    },
                    {
                        "type": "uint64",
                        "name": "_a12"
                    },
                    {
                        "type": "uint64",
                        "name": "_a13"
                    },
                    {
                        "type": "uint64",
                        "name": "_a14"
                    },
                    {
                        "type": "uint8",
                        "name": "a15"
                    },
                    {
                        "type": "uint8",
                        "name": "a16"
                    },
                    {
                        "type": "uint8",
                        "name": "a17"
                    },
                    {
                        "type": "uint8",
                        "name": "a18"
                    },
                    {
                        "type": "(uint8,uint8,uint8,uint8)",
                        "name": "a19"
                    },
                    {
                        "type": "uint8",
                        "name": "a20"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "logs_are_equal",
                "args": [
                    {
                        "type": "(uint64,string)",
                        "name": "log_1"
                    },
                    {
                        "type": "(uint64,string)",
                        "name": "log_2"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}