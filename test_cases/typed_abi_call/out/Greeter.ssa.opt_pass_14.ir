contract test_cases.typed_abi_call.typed_c2c.Greeter:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L1
                let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__() -> bool:
            block@0: // L17
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@20
            block@1: // abi_routing_L17
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "test_is_a_b(byte[],byte[],application)void" => block@2, method "test_method_selector_kinds(application)void" => block@3, method "test_method_overload(application)void" => block@4, method "test_arg_conversion(application)void" => block@5, method "test_15plus_args(application)void" => block@6, method "test_void(application)void" => block@7, method "test_ref_types(application,asset)void" => block@8, method "test_native_string(application)void" => block@9, method "test_native_bytes(application)void" => block@10, method "test_native_uint64(application)void" => block@11, method "test_native_biguint(application)void" => block@12, method "test_native_tuple(application)void" => block@13, method "test_native_tuple_method_ref(application)void" => block@14, method "test_nested_tuples(application)void" => block@15, method "test_no_args(application)void" => block@16, method "test_named_tuples(application)void" => block@17, * => return 0u}
            block@2: // test_is_a_b_route_L18
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // OnCompletion is not NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                (assert tmp%5#0) // can only call when not creating
                let tmp%7#0: bytes = (txna ApplicationArgs 1)
                let tmp%8#0: bytes = ((extract 2 0) tmp%7#0)
                let tmp%9#0: bytes = (txna ApplicationArgs 2)
                let tmp%10#0: bytes = ((extract 2 0) tmp%9#0)
                let tmp%11#0: bytes = (txna ApplicationArgs 3)
                let tmp%12#0: uint64 = (btoi tmp%11#0)
                let tmp%13#0: uint64 = ((txnas Applications) tmp%12#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b(tmp%8#0, tmp%10#0, tmp%13#0)
                return 1u
            block@3: // test_method_selector_kinds_route_L27
                let tmp%14#0: uint64 = (txn OnCompletion)
                let tmp%15#0: bool = (! tmp%14#0)
                (assert tmp%15#0) // OnCompletion is not NoOp
                let tmp%16#0: uint64 = (txn ApplicationID)
                (assert tmp%16#0) // can only call when not creating
                let tmp%18#0: bytes = (txna ApplicationArgs 1)
                let tmp%19#0: uint64 = (btoi tmp%18#0)
                let tmp%20#0: uint64 = ((txnas Applications) tmp%19#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(tmp%20#0)
                return 1u
            block@4: // test_method_overload_route_L40
                let tmp%21#0: uint64 = (txn OnCompletion)
                let tmp%22#0: bool = (! tmp%21#0)
                (assert tmp%22#0) // OnCompletion is not NoOp
                let tmp%23#0: uint64 = (txn ApplicationID)
                (assert tmp%23#0) // can only call when not creating
                let tmp%25#0: bytes = (txna ApplicationArgs 1)
                let tmp%26#0: uint64 = (btoi tmp%25#0)
                let tmp%27#0: uint64 = ((txnas Applications) tmp%26#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(tmp%27#0)
                return 1u
            block@5: // test_arg_conversion_route_L55
                let tmp%28#0: uint64 = (txn OnCompletion)
                let tmp%29#0: bool = (! tmp%28#0)
                (assert tmp%29#0) // OnCompletion is not NoOp
                let tmp%30#0: uint64 = (txn ApplicationID)
                (assert tmp%30#0) // can only call when not creating
                let tmp%32#0: bytes = (txna ApplicationArgs 1)
                let tmp%33#0: uint64 = (btoi tmp%32#0)
                let tmp%34#0: uint64 = ((txnas Applications) tmp%33#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(tmp%34#0)
                return 1u
            block@6: // test_15plus_args_route_L72
                let tmp%35#0: uint64 = (txn OnCompletion)
                let tmp%36#0: bool = (! tmp%35#0)
                (assert tmp%36#0) // OnCompletion is not NoOp
                let tmp%37#0: uint64 = (txn ApplicationID)
                (assert tmp%37#0) // can only call when not creating
                let tmp%39#0: bytes = (txna ApplicationArgs 1)
                let tmp%40#0: uint64 = (btoi tmp%39#0)
                let tmp%41#0: uint64 = ((txnas Applications) tmp%40#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(tmp%41#0)
                return 1u
            block@7: // test_void_route_L100
                let tmp%42#0: uint64 = (txn OnCompletion)
                let tmp%43#0: bool = (! tmp%42#0)
                (assert tmp%43#0) // OnCompletion is not NoOp
                let tmp%44#0: uint64 = (txn ApplicationID)
                (assert tmp%44#0) // can only call when not creating
                let tmp%46#0: bytes = (txna ApplicationArgs 1)
                let tmp%47#0: uint64 = (btoi tmp%46#0)
                let tmp%48#0: uint64 = ((txnas Applications) tmp%47#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_void(tmp%48#0)
                return 1u
            block@8: // test_ref_types_route_L114
                let tmp%49#0: uint64 = (txn OnCompletion)
                let tmp%50#0: bool = (! tmp%49#0)
                (assert tmp%50#0) // OnCompletion is not NoOp
                let tmp%51#0: uint64 = (txn ApplicationID)
                (assert tmp%51#0) // can only call when not creating
                let tmp%53#0: bytes = (txna ApplicationArgs 1)
                let tmp%54#0: uint64 = (btoi tmp%53#0)
                let tmp%55#0: uint64 = ((txnas Applications) tmp%54#0)
                let tmp%56#0: bytes = (txna ApplicationArgs 2)
                let tmp%57#0: uint64 = (btoi tmp%56#0)
                let tmp%58#0: uint64 = ((txnas Assets) tmp%57#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(tmp%55#0, tmp%58#0)
                return 1u
            block@9: // test_native_string_route_L128
                let tmp%59#0: uint64 = (txn OnCompletion)
                let tmp%60#0: bool = (! tmp%59#0)
                (assert tmp%60#0) // OnCompletion is not NoOp
                let tmp%61#0: uint64 = (txn ApplicationID)
                (assert tmp%61#0) // can only call when not creating
                let tmp%63#0: bytes = (txna ApplicationArgs 1)
                let tmp%64#0: uint64 = (btoi tmp%63#0)
                let tmp%65#0: uint64 = ((txnas Applications) tmp%64#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(tmp%65#0)
                return 1u
            block@10: // test_native_bytes_route_L139
                let tmp%66#0: uint64 = (txn OnCompletion)
                let tmp%67#0: bool = (! tmp%66#0)
                (assert tmp%67#0) // OnCompletion is not NoOp
                let tmp%68#0: uint64 = (txn ApplicationID)
                (assert tmp%68#0) // can only call when not creating
                let tmp%70#0: bytes = (txna ApplicationArgs 1)
                let tmp%71#0: uint64 = (btoi tmp%70#0)
                let tmp%72#0: uint64 = ((txnas Applications) tmp%71#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(tmp%72#0)
                return 1u
            block@11: // test_native_uint64_route_L152
                let tmp%73#0: uint64 = (txn OnCompletion)
                let tmp%74#0: bool = (! tmp%73#0)
                (assert tmp%74#0) // OnCompletion is not NoOp
                let tmp%75#0: uint64 = (txn ApplicationID)
                (assert tmp%75#0) // can only call when not creating
                let tmp%77#0: bytes = (txna ApplicationArgs 1)
                let tmp%78#0: uint64 = (btoi tmp%77#0)
                let tmp%79#0: uint64 = ((txnas Applications) tmp%78#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(tmp%79#0)
                return 1u
            block@12: // test_native_biguint_route_L163
                let tmp%80#0: uint64 = (txn OnCompletion)
                let tmp%81#0: bool = (! tmp%80#0)
                (assert tmp%81#0) // OnCompletion is not NoOp
                let tmp%82#0: uint64 = (txn ApplicationID)
                (assert tmp%82#0) // can only call when not creating
                let tmp%84#0: bytes = (txna ApplicationArgs 1)
                let tmp%85#0: uint64 = (btoi tmp%84#0)
                let tmp%86#0: uint64 = ((txnas Applications) tmp%85#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(tmp%86#0)
                return 1u
            block@13: // test_native_tuple_route_L174
                let tmp%87#0: uint64 = (txn OnCompletion)
                let tmp%88#0: bool = (! tmp%87#0)
                (assert tmp%88#0) // OnCompletion is not NoOp
                let tmp%89#0: uint64 = (txn ApplicationID)
                (assert tmp%89#0) // can only call when not creating
                let tmp%91#0: bytes = (txna ApplicationArgs 1)
                let tmp%92#0: uint64 = (btoi tmp%91#0)
                let tmp%93#0: uint64 = ((txnas Applications) tmp%92#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(tmp%93#0)
                return 1u
            block@14: // test_native_tuple_method_ref_route_L233
                let tmp%94#0: uint64 = (txn OnCompletion)
                let tmp%95#0: bool = (! tmp%94#0)
                (assert tmp%95#0) // OnCompletion is not NoOp
                let tmp%96#0: uint64 = (txn ApplicationID)
                (assert tmp%96#0) // can only call when not creating
                let tmp%98#0: bytes = (txna ApplicationArgs 1)
                let tmp%99#0: uint64 = (btoi tmp%98#0)
                let tmp%100#0: uint64 = ((txnas Applications) tmp%99#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref(tmp%100#0)
                return 1u
            block@15: // test_nested_tuples_route_L283
                let tmp%101#0: uint64 = (txn OnCompletion)
                let tmp%102#0: bool = (! tmp%101#0)
                (assert tmp%102#0) // OnCompletion is not NoOp
                let tmp%103#0: uint64 = (txn ApplicationID)
                (assert tmp%103#0) // can only call when not creating
                let tmp%105#0: bytes = (txna ApplicationArgs 1)
                let tmp%106#0: uint64 = (btoi tmp%105#0)
                let tmp%107#0: uint64 = ((txnas Applications) tmp%106#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples(tmp%107#0)
                return 1u
            block@16: // test_no_args_route_L329
                let tmp%108#0: uint64 = (txn OnCompletion)
                let tmp%109#0: bool = (! tmp%108#0)
                (assert tmp%109#0) // OnCompletion is not NoOp
                let tmp%110#0: uint64 = (txn ApplicationID)
                (assert tmp%110#0) // can only call when not creating
                let tmp%112#0: bytes = (txna ApplicationArgs 1)
                let tmp%113#0: uint64 = (btoi tmp%112#0)
                let tmp%114#0: uint64 = ((txnas Applications) tmp%113#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args(tmp%114#0)
                return 1u
            block@17: // test_named_tuples_route_L339
                let tmp%115#0: uint64 = (txn OnCompletion)
                let tmp%116#0: bool = (! tmp%115#0)
                (assert tmp%116#0) // OnCompletion is not NoOp
                let tmp%117#0: uint64 = (txn ApplicationID)
                (assert tmp%117#0) // can only call when not creating
                let tmp%119#0: bytes = (txna ApplicationArgs 1)
                let tmp%120#0: uint64 = (btoi tmp%119#0)
                let tmp%121#0: uint64 = ((txnas Applications) tmp%120#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples(tmp%121#0)
                return 1u
            block@20: // bare_routing_L17
                let tmp%122#0: uint64 = (txn OnCompletion)
                goto tmp%122#0 ? block@24 : block@21
            block@21: // __algopy_default_create_L1
                let tmp%123#0: uint64 = (txn ApplicationID)
                let tmp%124#0: bool = (! tmp%123#0)
                (assert tmp%124#0) // can only call when creating
                return 1u
            block@24: // after_if_else_L17
                return 0u
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b(a: bytes, b: bytes, app: uint64) -> void:
            block@0: // L18
                itxn_begin
                let length%0#0: uint64 = (len a#0)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 a#0)
                let length%1#0: uint64 = (len b#0)
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 b#0)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "is_a_b(byte[],byte[])void")
                ((itxn_field ApplicationArgs) encoded_value%0#0)
                ((itxn_field ApplicationArgs) encoded_value%1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(app: uint64) -> void:
            block@0: // L27
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) 0x00057465737431)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let result#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let tmp%3#0: bool = (== result#0 0x000b6563686f3a207465737431)
                (assert tmp%3#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) 0x00057465737432)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let result#1: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%5#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
                (assert tmp%6#0) // ARC4 prefix is valid
                let tmp%7#0: bool = (== result#1 0x000b6563686f3a207465737432)
                (assert tmp%7#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) 0x00057465737433)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%2#0: bytes = (itxn LastLog)
                let result#2: bytes = ((extract 4 0) awst_tmp%2#0)
                let tmp%9#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
                (assert tmp%10#0) // ARC4 prefix is valid
                let tmp%11#0: bool = (== result#2 0x000b6563686f3a207465737433)
                (assert tmp%11#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) 0x00057465737434)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%3#0: bytes = (itxn LastLog)
                let result#3: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%13#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%14#0: bool = (== tmp%13#0 0x151f7c75)
                (assert tmp%14#0) // ARC4 prefix is valid
                let tmp%15#0: bool = (== result#3 0x000b6563686f3a207465737434)
                (assert tmp%15#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) 0x00057465737435)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%4#0: bytes = (itxn LastLog)
                let result#4: bytes = ((extract 4 0) awst_tmp%4#0)
                let tmp%17#0: bytes = ((extract 0 4) awst_tmp%4#0)
                let tmp%18#0: bool = (== tmp%17#0 0x151f7c75)
                (assert tmp%18#0) // ARC4 prefix is valid
                let tmp%19#0: bool = (== result#4 0x000b6563686f3a207465737435)
                (assert tmp%19#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(app: uint64) -> void:
            block@0: // L40
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) 0x000e7479706564202b2069676e6f7265)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%3#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%4#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%5#0: bool = (== tmp%4#0 0x151f7c75)
                (assert tmp%5#0) // ARC4 prefix is valid
                let tmp%6#0: bool = (== tmp%3#0 0x00146563686f3a207479706564202b2069676e6f7265)
                (assert tmp%6#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) 0x0010756e7479706564202b2069676e6f7265)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%2#0: bytes = (itxn LastLog)
                let tmp%7#0: bytes = ((extract 4 0) awst_tmp%2#0)
                let tmp%8#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%9#0: bool = (== tmp%8#0 0x151f7c75)
                (assert tmp%9#0) // ARC4 prefix is valid
                let tmp%10#0: bool = (== tmp%7#0 0x00166563686f3a20756e7479706564202b2069676e6f7265)
                (assert tmp%10#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) 0x00057475706c65)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%3#0: bytes = (itxn LastLog)
                let result.0#0: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%12#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%13#0: bool = (== tmp%12#0 0x151f7c75)
                (assert tmp%13#0) // ARC4 prefix is valid
                let result.1.LastLog#0: bytes = (itxn LastLog)
                let tmp%14#0: bool = (== result.0#0 0x000b6563686f3a207475706c65)
                (assert tmp%14#0)
                let tmp%15#0: bytes = ((extract 4 0) result.1.LastLog#0)
                let tmp%16#0: bytes = ((extract 0 4) result.1.LastLog#0)
                let tmp%17#0: bool = (== tmp%16#0 0x151f7c75)
                (assert tmp%17#0) // ARC4 prefix is valid
                let tmp%18#0: bool = (== tmp%15#0 0x000b6563686f3a207475706c65)
                (assert tmp%18#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) 0x0007756e7479706564)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn_result.LastLog#0: bytes = (itxn LastLog)
                let tmp%19#0: bytes = ((extract 4 0) txn_result.LastLog#0)
                let tmp%20#0: bytes = ((extract 0 4) txn_result.LastLog#0)
                let tmp%21#0: bool = (== tmp%20#0 0x151f7c75)
                (assert tmp%21#0) // ARC4 prefix is valid
                let tmp%22#0: bool = (== tmp%19#0 0x000d6563686f3a20756e7479706564)
                (assert tmp%22#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(app: uint64) -> void:
            block@0: // L55
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log(string)void")
                ((itxn_field ApplicationArgs) 0x000a636f6e76657274656431)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%0#0: bool = (== txn.LastLog#0 0x636f6e76657274656431)
                (assert tmp%0#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log(uint64)void")
                ((itxn_field ApplicationArgs) 0x0000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#1: bytes = (itxn LastLog)
                let tmp%1#0: bytes = (itob 2u)
                let tmp%2#0: bool = (== txn.LastLog#1 tmp%1#0)
                (assert tmp%2#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log(uint512)void")
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#2: bytes = (itxn LastLog)
                let tmp%6#0: bool = (== txn.LastLog#2 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)
                (assert tmp%6#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log(byte[])void")
                ((itxn_field ApplicationArgs) 0x000134)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#3: bytes = (itxn LastLog)
                let tmp%7#0: bool = (== txn.LastLog#3 0x34)
                (assert tmp%7#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log(bool)void")
                ((itxn_field ApplicationArgs) 0x80)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#4: bytes = (itxn LastLog)
                let tmp%8#0: bool = (== txn.LastLog#4 0x54727565)
                (assert tmp%8#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(app: uint64) -> void:
            block@0: // L72
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]")
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field ApplicationArgs) 0x0000000000000002)
                ((itxn_field ApplicationArgs) 0x0000000000000003)
                ((itxn_field ApplicationArgs) 0x0000000000000004)
                ((itxn_field ApplicationArgs) 0x0000000000000005)
                ((itxn_field ApplicationArgs) 0x0000000000000006)
                ((itxn_field ApplicationArgs) 0x0000000000000007)
                ((itxn_field ApplicationArgs) 0x0000000000000008)
                ((itxn_field ApplicationArgs) 0x0000000000000009)
                ((itxn_field ApplicationArgs) 0x000000000000000a)
                ((itxn_field ApplicationArgs) 0x000000000000000b)
                ((itxn_field ApplicationArgs) 0x000000000000000c)
                ((itxn_field ApplicationArgs) 0x000000000000000d)
                ((itxn_field ApplicationArgs) 0x000000000000000e)
                ((itxn_field ApplicationArgs) 0x0f101112deadbeef14)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let result#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let tmp%3#0: bytes = ((extract 2 0) result#0)
                let tmp%4#0: bool = (== tmp%3#0 0x0f101112deadbeef14)
                (assert tmp%4#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_void(app: uint64) -> void:
            block@0: // L100
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log(string)void")
                ((itxn_field ApplicationArgs) 0x0006576f726c6431)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%0#0: bool = (== txn.LastLog#0 0x576f726c6431)
                (assert tmp%0#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log(string)void")
                ((itxn_field ApplicationArgs) 0x0006576f726c6432)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#1: bytes = (itxn LastLog)
                let tmp%1#0: bool = (== txn.LastLog#1 0x576f726c6432)
                (assert tmp%1#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log(string)void")
                ((itxn_field ApplicationArgs) 0x0006576f726c6433)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#2: bytes = (itxn LastLog)
                let tmp%2#0: bool = (== txn.LastLog#2 0x576f726c6433)
                (assert tmp%2#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log(string)void")
                ((itxn_field ApplicationArgs) 0x0006576f726c6434)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#3: bytes = (itxn LastLog)
                let tmp%3#0: bool = (== txn.LastLog#3 0x576f726c6434)
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(app: uint64, asset: uint64) -> void:
            block@0: // L114
                itxn_begin
                let tmp%0#0: bytes = (global CurrentApplicationAddress)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field Assets) asset#0)
                ((itxn_field Applications) app#0)
                ((itxn_field Accounts) tmp%0#0)
                ((itxn_field ApplicationArgs) method "log(asset,account,application)void")
                ((itxn_field ApplicationArgs) 0x00)
                ((itxn_field ApplicationArgs) 0x01)
                ((itxn_field ApplicationArgs) 0x01)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
                (assert check%0#0) // asset exists
                let tmp%1#0: bytes = (global CurrentApplicationAddress)
                let tmp%2#0: bytes = (concat value%0#0 tmp%1#0)
                let (value%1#0: bytes, check%1#0: bool) = ((app_params_get AppAddress) app#0)
                (assert check%1#0) // application exists
                let tmp%3#0: bytes = (concat tmp%2#0 value%1#0)
                let tmp%4#0: bool = (== txn.LastLog#0 tmp%3#0)
                (assert tmp%4#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(app: uint64) -> void:
            block@0: // L128
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
                ((itxn_field ApplicationArgs) 0x000173)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result1#0: bytes = ((extract 2 0) tmp%0#0)
                let tmp%4#0: bool = (== result1#0 "echo: s")
                (assert tmp%4#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
                ((itxn_field ApplicationArgs) 0x000173)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%5#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
                (assert tmp%7#0) // ARC4 prefix is valid
                let result2#0: bytes = ((extract 2 0) tmp%5#0)
                let tmp%9#0: bool = (== result2#0 result1#0)
                (assert tmp%9#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
                ((itxn_field ApplicationArgs) 0x000173)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%2#0: bytes = (itxn LastLog)
                let tmp%10#0: bytes = ((extract 4 0) awst_tmp%2#0)
                let tmp%11#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%12#0: bool = (== tmp%11#0 0x151f7c75)
                (assert tmp%12#0) // ARC4 prefix is valid
                let result3#0: bytes = ((extract 2 0) tmp%10#0)
                let tmp%14#0: bool = (== result3#0 result1#0)
                (assert tmp%14#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(app: uint64) -> void:
            block@0: // L139
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
                ((itxn_field ApplicationArgs) 0x000162)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result1#0: bytes = ((extract 2 0) tmp%0#0)
                let tmp%4#0: bool = (== result1#0 0x6563686f3a2062)
                (assert tmp%4#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
                ((itxn_field ApplicationArgs) 0x000162)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%5#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
                (assert tmp%7#0) // ARC4 prefix is valid
                let result2#0: bytes = ((extract 2 0) tmp%5#0)
                let tmp%9#0: bool = (== result2#0 result1#0)
                (assert tmp%9#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
                ((itxn_field ApplicationArgs) 0x000162)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%2#0: bytes = (itxn LastLog)
                let tmp%10#0: bytes = ((extract 4 0) awst_tmp%2#0)
                let tmp%11#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%12#0: bool = (== tmp%11#0 0x151f7c75)
                (assert tmp%12#0) // ARC4 prefix is valid
                let result3#0: bytes = ((extract 2 0) tmp%10#0)
                let tmp%14#0: bool = (== result3#0 result1#0)
                (assert tmp%14#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(app: uint64) -> void:
            block@0: // L152
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result1#0: uint64 = (btoi tmp%0#0)
                let tmp%4#0: bool = (== result1#0 2u)
                (assert tmp%4#0)
                itxn_begin
                let val_as_bytes%0#0: bytes = (itob 1u)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
                ((itxn_field ApplicationArgs) val_as_bytes%0#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%5#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
                (assert tmp%7#0) // ARC4 prefix is valid
                let result2#0: uint64 = (btoi tmp%5#0)
                let tmp%9#0: bool = (== result2#0 result1#0)
                (assert tmp%9#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%2#0: bytes = (itxn LastLog)
                let tmp%10#0: bytes = ((extract 4 0) awst_tmp%2#0)
                let tmp%11#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%12#0: bool = (== tmp%11#0 0x151f7c75)
                (assert tmp%12#0) // ARC4 prefix is valid
                let result3#0: uint64 = (btoi tmp%10#0)
                let tmp%14#0: bool = (== result3#0 result1#0)
                (assert tmp%14#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(app: uint64) -> void:
            block@0: // L163
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let result1#0: biguint = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let tmp%3#0: bool = (b== result1#0 3b)
                (assert tmp%3#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let result2#0: biguint = ((extract 4 0) awst_tmp%1#0)
                let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
                (assert tmp%7#0) // ARC4 prefix is valid
                let tmp%8#0: bool = (b== result2#0 result1#0)
                (assert tmp%8#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%2#0: bytes = (itxn LastLog)
                let result3#0: biguint = ((extract 4 0) awst_tmp%2#0)
                let tmp%10#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%11#0: bool = (== tmp%10#0 0x151f7c75)
                (assert tmp%11#0) // ARC4 prefix is valid
                let tmp%12#0: bool = (b== result3#0 result1#0)
                (assert tmp%12#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(app: uint64) -> void:
            block@0: // L174
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
                ((itxn_field ApplicationArgs) 0x00027331)
                ((itxn_field ApplicationArgs) 0x00026231)
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let result1#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let item_start_offset%0#0: uint64 = (extract_uint16 result1#0 0u)
                let item_end_offset%0#0: uint64 = (extract_uint16 result1#0 2u)
                let s#0: bytes = (substring3 result1#0 item_start_offset%0#0 item_end_offset%0#0)
                let item_end_offset%1#0: uint64 = (len result1#0)
                let b#0: bytes = (substring3 result1#0 item_end_offset%0#0 item_end_offset%1#0)
                let u#0: bytes = ((extract 4 8) result1#0) // on error: Index access is out of bounds
                let bu#0: bytes = ((extract 12 64) result1#0) // on error: Index access is out of bounds
                let tmp%3#0: bytes = ((extract 2 0) s#0)
                let tmp%4#0: bool = (== tmp%3#0 "echo: s1")
                (assert tmp%4#0)
                let tmp%5#0: bytes = ((extract 2 0) b#0)
                let tmp%6#0: bool = (== tmp%5#0 0x6563686f3a206231)
                (assert tmp%6#0)
                let tmp%7#0: uint64 = (btoi u#0)
                let tmp%8#0: bool = (== tmp%7#0 2u)
                (assert tmp%8#0)
                let tmp%9#0: bool = (b== bu#0 3b)
                (assert tmp%9#0)
                itxn_begin
                let val_as_bytes%0#0: bytes = (itob 1u)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
                ((itxn_field ApplicationArgs) 0x00027331)
                ((itxn_field ApplicationArgs) 0x00026231)
                ((itxn_field ApplicationArgs) val_as_bytes%0#0)
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let result2#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%12#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%13#0: bool = (== tmp%12#0 0x151f7c75)
                (assert tmp%13#0) // ARC4 prefix is valid
                let tmp%14#0: bool = (== result1#0 result2#0)
                (assert tmp%14#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
                ((itxn_field ApplicationArgs) 0x00027331)
                ((itxn_field ApplicationArgs) 0x00026231)
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%2#0: bytes = (itxn LastLog)
                let result3#0: bytes = ((extract 4 0) awst_tmp%2#0)
                let tmp%16#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%17#0: bool = (== tmp%16#0 0x151f7c75)
                (assert tmp%17#0) // ARC4 prefix is valid
                let tmp%18#0: bool = (== result1#0 result3#0)
                (assert tmp%18#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
                ((itxn_field ApplicationArgs) 0x00027331)
                ((itxn_field ApplicationArgs) 0x00026231)
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%3#0: bytes = (itxn LastLog)
                let tmp%19#0: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%20#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%21#0: bool = (== tmp%20#0 0x151f7c75)
                (assert tmp%21#0) // ARC4 prefix is valid
                let item_start_offset%2#0: uint64 = (extract_uint16 tmp%19#0 0u)
                let item_end_offset%2#0: uint64 = (extract_uint16 tmp%19#0 2u)
                let item0%1#0: bytes = (substring3 tmp%19#0 item_start_offset%2#0 item_end_offset%2#0)
                let result_native.0#0: bytes = ((extract 2 0) item0%1#0)
                let item_end_offset%3#0: uint64 = (len tmp%19#0)
                let item1%1#0: bytes = (substring3 tmp%19#0 item_end_offset%2#0 item_end_offset%3#0)
                let result_native.1#0: bytes = ((extract 2 0) item1%1#0)
                let item2%1#0: bytes = ((extract 4 8) tmp%19#0) // on error: Index access is out of bounds
                let result_native.2#0: uint64 = (btoi item2%1#0)
                let result_native.3#0: biguint = ((extract 12 64) tmp%19#0) // on error: Index access is out of bounds
                let tmp%23#0: bool = (== tmp%3#0 result_native.0#0)
                (assert tmp%23#0)
                let tmp%25#0: bool = (== tmp%5#0 result_native.1#0)
                (assert tmp%25#0)
                let tmp%27#0: bool = (== tmp%7#0 result_native.2#0)
                (assert tmp%27#0)
                let tmp%28#0: bool = (b== bu#0 result_native.3#0)
                (assert tmp%28#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref(app: uint64) -> void:
            block@0: // L233
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
                ((itxn_field ApplicationArgs) 0x00027331)
                ((itxn_field ApplicationArgs) 0x00026231)
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let item_start_offset%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
                let item_end_offset%0#0: uint64 = (extract_uint16 tmp%0#0 2u)
                let item0%0#0: bytes = (substring3 tmp%0#0 item_start_offset%0#0 item_end_offset%0#0)
                let result.0#0: bytes = ((extract 2 0) item0%0#0)
                let item_end_offset%1#0: uint64 = (len tmp%0#0)
                let item1%0#0: bytes = (substring3 tmp%0#0 item_end_offset%0#0 item_end_offset%1#0)
                let result.1#0: bytes = ((extract 2 0) item1%0#0)
                let item2%0#0: bytes = ((extract 4 8) tmp%0#0) // on error: Index access is out of bounds
                let result.2#0: uint64 = (btoi item2%0#0)
                let result.3#0: biguint = ((extract 12 64) tmp%0#0) // on error: Index access is out of bounds
                let tmp%3#0: bool = (== result.0#0 "echo: s1")
                (assert tmp%3#0)
                let tmp%4#0: bool = (== result.1#0 0x6563686f3a206231)
                (assert tmp%4#0)
                let tmp%5#0: bool = (== result.2#0 2u)
                (assert tmp%5#0)
                let tmp%6#0: bool = (b== result.3#0 3b)
                (assert tmp%6#0)
                itxn_begin
                let val_as_bytes%0#0: bytes = (itob 1u)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
                ((itxn_field ApplicationArgs) 0x00027331)
                ((itxn_field ApplicationArgs) 0x00026231)
                ((itxn_field ApplicationArgs) val_as_bytes%0#0)
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%8#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%9#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
                (assert tmp%10#0) // ARC4 prefix is valid
                let item_start_offset%2#0: uint64 = (extract_uint16 tmp%8#0 0u)
                let item_end_offset%2#0: uint64 = (extract_uint16 tmp%8#0 2u)
                let item0%1#0: bytes = (substring3 tmp%8#0 item_start_offset%2#0 item_end_offset%2#0)
                let result_2.0#0: bytes = ((extract 2 0) item0%1#0)
                let item_end_offset%3#0: uint64 = (len tmp%8#0)
                let item1%1#0: bytes = (substring3 tmp%8#0 item_end_offset%2#0 item_end_offset%3#0)
                let result_2.1#0: bytes = ((extract 2 0) item1%1#0)
                let item2%1#0: bytes = ((extract 4 8) tmp%8#0) // on error: Index access is out of bounds
                let result_2.2#0: uint64 = (btoi item2%1#0)
                let result_2.3#0: biguint = ((extract 12 64) tmp%8#0) // on error: Index access is out of bounds
                let tmp%11#0: bool = (== result_2.0#0 result.0#0)
                let tmp%12#0: bool = (== result_2.1#0 result.1#0)
                let tmp%13#0: bool = (&& tmp%11#0 tmp%12#0)
                let tmp%14#0: bool = (== result_2.2#0 result.2#0)
                let tmp%15#0: bool = (&& tmp%13#0 tmp%14#0)
                let tmp%16#0: bool = (b== result_2.3#0 result.3#0)
                let tmp%17#0: bool = (&& tmp%15#0 tmp%16#0)
                (assert tmp%17#0) // expected native arguments to give the same result
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
                ((itxn_field ApplicationArgs) 0x00027331)
                ((itxn_field ApplicationArgs) 0x00026231)
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%2#0: bytes = (itxn LastLog)
                let tmp%18#0: bytes = ((extract 4 0) awst_tmp%2#0)
                let tmp%19#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%20#0: bool = (== tmp%19#0 0x151f7c75)
                (assert tmp%20#0) // ARC4 prefix is valid
                let item_start_offset%4#0: uint64 = (extract_uint16 tmp%18#0 0u)
                let item_end_offset%4#0: uint64 = (extract_uint16 tmp%18#0 2u)
                let item0%2#0: bytes = (substring3 tmp%18#0 item_start_offset%4#0 item_end_offset%4#0)
                let result_3.0#0: bytes = ((extract 2 0) item0%2#0)
                let item_end_offset%5#0: uint64 = (len tmp%18#0)
                let item1%2#0: bytes = (substring3 tmp%18#0 item_end_offset%4#0 item_end_offset%5#0)
                let result_3.1#0: bytes = ((extract 2 0) item1%2#0)
                let item2%2#0: bytes = ((extract 4 8) tmp%18#0) // on error: Index access is out of bounds
                let result_3.2#0: uint64 = (btoi item2%2#0)
                let result_3.3#0: biguint = ((extract 12 64) tmp%18#0) // on error: Index access is out of bounds
                let tmp%21#0: bool = (== result_3.0#0 result.0#0)
                let tmp%22#0: bool = (== result_3.1#0 result.1#0)
                let tmp%23#0: bool = (&& tmp%21#0 tmp%22#0)
                let tmp%24#0: bool = (== result_3.2#0 result.2#0)
                let tmp%25#0: bool = (&& tmp%23#0 tmp%24#0)
                let tmp%26#0: bool = (b== result_3.3#0 result.3#0)
                let tmp%27#0: bool = (&& tmp%25#0 tmp%26#0)
                (assert tmp%27#0) // expected arc4 arguments to give the same result
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
                ((itxn_field ApplicationArgs) 0x00027331)
                ((itxn_field ApplicationArgs) 0x00026231)
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%3#0: bytes = (itxn LastLog)
                let tmp%28#0: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%29#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%30#0: bool = (== tmp%29#0 0x151f7c75)
                (assert tmp%30#0) // ARC4 prefix is valid
                let item_start_offset%6#0: uint64 = (extract_uint16 tmp%28#0 0u)
                let item_end_offset%6#0: uint64 = (extract_uint16 tmp%28#0 2u)
                let item0%3#0: bytes = (substring3 tmp%28#0 item_start_offset%6#0 item_end_offset%6#0)
                let result_native.0#0: bytes = ((extract 2 0) item0%3#0)
                let item_end_offset%7#0: uint64 = (len tmp%28#0)
                let item1%3#0: bytes = (substring3 tmp%28#0 item_end_offset%6#0 item_end_offset%7#0)
                let result_native.1#0: bytes = ((extract 2 0) item1%3#0)
                let item2%3#0: bytes = ((extract 4 8) tmp%28#0) // on error: Index access is out of bounds
                let result_native.2#0: uint64 = (btoi item2%3#0)
                let result_native.3#0: biguint = ((extract 12 64) tmp%28#0) // on error: Index access is out of bounds
                let tmp%31#0: bool = (== result_native.0#0 result.0#0)
                let tmp%32#0: bool = (== result_native.1#0 result.1#0)
                let tmp%33#0: bool = (&& tmp%31#0 tmp%32#0)
                let tmp%34#0: bool = (== result_native.2#0 result.2#0)
                let tmp%35#0: bool = (&& tmp%33#0 tmp%34#0)
                let tmp%36#0: bool = (b== result_native.3#0 result.3#0)
                let tmp%37#0: bool = (&& tmp%35#0 tmp%36#0)
                (assert tmp%37#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples(app: uint64) -> void:
            block@0: // L283
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))")
                ((itxn_field ApplicationArgs) 0x00040010000400080002733100027332000000000000000100000000000000020012000133)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let item_start_offset%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
                let item_end_offset%0#0: uint64 = (extract_uint16 tmp%0#0 2u)
                let item0%0#0: bytes = (substring3 tmp%0#0 item_start_offset%0#0 item_end_offset%0#0)
                let item_start_offset%1#0: uint64 = (extract_uint16 item0%0#0 0u)
                let item_end_offset%1#0: uint64 = (extract_uint16 item0%0#0 2u)
                let item0%1#0: bytes = (substring3 item0%0#0 item_start_offset%1#0 item_end_offset%1#0)
                let result.0.0#0: bytes = ((extract 2 0) item0%1#0)
                let item_end_offset%2#0: uint64 = (len item0%0#0)
                let result.0.1#0: bytes = (substring3 item0%0#0 item_end_offset%1#0 item_end_offset%2#0)
                let item_end_offset%3#0: uint64 = (len tmp%0#0)
                let item1%1#0: bytes = (substring3 tmp%0#0 item_end_offset%0#0 item_end_offset%3#0)
                let item0%2#0: bytes = ((extract 0 8) item1%1#0) // on error: Index access is out of bounds
                let result.1.0#0: uint64 = (btoi item0%2#0)
                let result.1.1#0: bytes = ((extract 8 8) item1%1#0) // on error: Index access is out of bounds
                let item_start_offset%4#0: uint64 = (extract_uint16 item1%1#0 16u)
                let item_end_offset%4#0: uint64 = (len item1%1#0)
                let item2%0#0: bytes = (substring3 item1%1#0 item_start_offset%4#0 item_end_offset%4#0)
                let result.1.2#0: bytes = ((extract 2 0) item2%0#0)
                let tmp%3#0: bool = (== result.0.0#0 "echo: s1")
                (assert tmp%3#0)
                let tmp%4#0: bool = (== result.0.1#0 0x00086563686f3a207332)
                (assert tmp%4#0)
                let tmp%5#0: bool = (== result.1.0#0 2u)
                (assert tmp%5#0)
                let tmp%6#0: bool = (b== result.1.1#0 0x0000000000000003)
                (assert tmp%6#0)
                let tmp%7#0: bool = (== result.1.2#0 0x6563686f3a2033)
                (assert tmp%7#0)
                itxn_begin
                let encoded_tuple_buffer%28#0: bytes = 0x00040010000400080002733100027332
                let encoded_tuple_buffer%29#0: bytes = (concat encoded_tuple_buffer%28#0 0x000000000000000100000000000000020012000133)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))")
                ((itxn_field ApplicationArgs) encoded_tuple_buffer%29#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%8#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%9#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
                (assert tmp%10#0) // ARC4 prefix is valid
                let item_start_offset%5#0: uint64 = (extract_uint16 tmp%8#0 0u)
                let item_end_offset%5#0: uint64 = (extract_uint16 tmp%8#0 2u)
                let item0%3#0: bytes = (substring3 tmp%8#0 item_start_offset%5#0 item_end_offset%5#0)
                let item_start_offset%6#0: uint64 = (extract_uint16 item0%3#0 0u)
                let item_end_offset%6#0: uint64 = (extract_uint16 item0%3#0 2u)
                let item0%4#0: bytes = (substring3 item0%3#0 item_start_offset%6#0 item_end_offset%6#0)
                let result.0.0#1: bytes = ((extract 2 0) item0%4#0)
                let item_end_offset%7#0: uint64 = (len item0%3#0)
                let result.0.1#1: bytes = (substring3 item0%3#0 item_end_offset%6#0 item_end_offset%7#0)
                let item_end_offset%8#0: uint64 = (len tmp%8#0)
                let item1%4#0: bytes = (substring3 tmp%8#0 item_end_offset%5#0 item_end_offset%8#0)
                let item0%5#0: bytes = ((extract 0 8) item1%4#0) // on error: Index access is out of bounds
                let result.1.0#1: uint64 = (btoi item0%5#0)
                let result.1.1#1: bytes = ((extract 8 8) item1%4#0) // on error: Index access is out of bounds
                let item_start_offset%9#0: uint64 = (extract_uint16 item1%4#0 16u)
                let item_end_offset%9#0: uint64 = (len item1%4#0)
                let item2%1#0: bytes = (substring3 item1%4#0 item_start_offset%9#0 item_end_offset%9#0)
                let result.1.2#1: bytes = ((extract 2 0) item2%1#0)
                let tmp%11#0: bool = (== result.0.0#1 "echo: s1")
                (assert tmp%11#0)
                let tmp%12#0: bool = (== result.0.1#1 0x00086563686f3a207332)
                (assert tmp%12#0)
                let tmp%13#0: bool = (== result.1.0#1 2u)
                (assert tmp%13#0)
                let tmp%14#0: bool = (b== result.1.1#1 0x0000000000000003)
                (assert tmp%14#0)
                let tmp%15#0: bool = (== result.1.2#1 0x6563686f3a2033)
                (assert tmp%15#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))")
                ((itxn_field ApplicationArgs) 0x000400120004000900037331620003733262000000000000000b0000000000000015001200023362)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%2#0: bytes = (itxn LastLog)
                let tmp%16#0: bytes = ((extract 4 0) awst_tmp%2#0)
                let tmp%17#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%18#0: bool = (== tmp%17#0 0x151f7c75)
                (assert tmp%18#0) // ARC4 prefix is valid
                let item_start_offset%10#0: uint64 = (extract_uint16 tmp%16#0 0u)
                let item_end_offset%10#0: uint64 = (extract_uint16 tmp%16#0 2u)
                let item0%6#0: bytes = (substring3 tmp%16#0 item_start_offset%10#0 item_end_offset%10#0)
                let item_start_offset%11#0: uint64 = (extract_uint16 item0%6#0 0u)
                let item_end_offset%11#0: uint64 = (extract_uint16 item0%6#0 2u)
                let item0%7#0: bytes = (substring3 item0%6#0 item_start_offset%11#0 item_end_offset%11#0)
                let result.0.0#2: bytes = ((extract 2 0) item0%7#0)
                let item_end_offset%12#0: uint64 = (len item0%6#0)
                let result.0.1#2: bytes = (substring3 item0%6#0 item_end_offset%11#0 item_end_offset%12#0)
                let item_end_offset%13#0: uint64 = (len tmp%16#0)
                let item1%7#0: bytes = (substring3 tmp%16#0 item_end_offset%10#0 item_end_offset%13#0)
                let item0%8#0: bytes = ((extract 0 8) item1%7#0) // on error: Index access is out of bounds
                let result.1.0#2: uint64 = (btoi item0%8#0)
                let result.1.1#2: bytes = ((extract 8 8) item1%7#0) // on error: Index access is out of bounds
                let item_start_offset%14#0: uint64 = (extract_uint16 item1%7#0 16u)
                let item_end_offset%14#0: uint64 = (len item1%7#0)
                let item2%2#0: bytes = (substring3 item1%7#0 item_start_offset%14#0 item_end_offset%14#0)
                let result.1.2#2: bytes = ((extract 2 0) item2%2#0)
                let tmp%19#0: bool = (== result.0.0#2 "echo: s1b")
                (assert tmp%19#0)
                let tmp%20#0: bool = (== result.0.1#2 0x00096563686f3a20733262)
                (assert tmp%20#0)
                let tmp%21#0: bool = (== result.1.0#2 12u)
                (assert tmp%21#0)
                let tmp%22#0: bool = (b== result.1.1#2 0x0000000000000016)
                (assert tmp%22#0)
                let tmp%23#0: bool = (== result.1.2#2 0x6563686f3a203362)
                (assert tmp%23#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args(app: uint64) -> void:
            block@0: // L329
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "no_args()uint64")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: uint64 = (btoi tmp%0#0)
                let tmp%4#0: bool = (== result#0 42u)
                (assert tmp%4#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "no_args()uint64")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let arc4_result#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
                (assert tmp%7#0) // ARC4 prefix is valid
                let tmp%8#0: bool = (b== arc4_result#0 0x000000000000002a)
                (assert tmp%8#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "no_args()uint64")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%2#0: bytes = (itxn LastLog)
                let tmp%10#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%11#0: bool = (== tmp%10#0 0x151f7c75)
                (assert tmp%11#0) // ARC4 prefix is valid
                let awst_tmp%3#0: bytes = (itxn LastLog)
                let tmp%13#0: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%14#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%15#0: bool = (== tmp%14#0 0x151f7c75)
                (assert tmp%15#0) // ARC4 prefix is valid
                let tmp%16#0: bool = (b== tmp%13#0 0x000000000000002a)
                (assert tmp%16#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples(app: uint64) -> void:
            block@0: // L339
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "logs_are_equal((uint64,string),(uint64,string))bool")
                ((itxn_field ApplicationArgs) 0x0000000000000001000a00056c6f672031)
                ((itxn_field ApplicationArgs) 0x0000000000000001000a00056c6f672031)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: bool = (getbit tmp%0#0 0u)
                (assert result#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "logs_are_equal((uint64,string),(uint64,string))bool")
                ((itxn_field ApplicationArgs) 0x0000000000000002000a00056c6f672032)
                ((itxn_field ApplicationArgs) 0x0000000000000001000a00056c6f672031)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%4#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%5#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
                (assert tmp%6#0) // ARC4 prefix is valid
                let result#1: bool = (getbit tmp%4#0 0u)
                let tmp%8#0: bool = (! result#1)
                (assert tmp%8#0)
                return 
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u