contract test_cases.typed_abi_call.typed_c2c.Greeter:
    program approval:
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.approval_program() -> bool:
            block@0: // L17
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@15
            block@1: // abi_routing_L17
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "test_method_selector_kinds(application)void" => block@2, method "test_method_overload(application)void" => block@3, method "test_arg_conversion(application)void" => block@4, method "test_15plus_args(application)void" => block@5, method "test_void(application)void" => block@6, method "test_ref_types(application,asset)void" => block@7, method "test_native_string(application)void" => block@8, method "test_native_bytes(application)void" => block@9, method "test_native_uint64(application)void" => block@10, method "test_native_biguint(application)void" => block@11, method "test_native_tuple(application)void" => block@12, * => fail // reject transaction}
            block@2: // test_method_selector_kinds_route_L18
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (! tmp%2#0)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: bytes = (txna ApplicationArgs 1)
                let tmp%6#0: uint64 = (btoi tmp%5#0)
                let tmp%7#0: uint64 = ((txnas Applications) tmp%6#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(tmp%7#0)
                return 1u
            block@3: // test_method_overload_route_L31
                let tmp%8#0: uint64 = (txn OnCompletion)
                let tmp%9#0: bool = (! tmp%8#0)
                (assert tmp%9#0) // OnCompletion is NoOp
                let tmp%10#0: bool = (txn ApplicationID)
                (assert tmp%10#0) // is not creating
                let tmp%11#0: bytes = (txna ApplicationArgs 1)
                let tmp%12#0: uint64 = (btoi tmp%11#0)
                let tmp%13#0: uint64 = ((txnas Applications) tmp%12#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(tmp%13#0)
                return 1u
            block@4: // test_arg_conversion_route_L46
                let tmp%14#0: uint64 = (txn OnCompletion)
                let tmp%15#0: bool = (! tmp%14#0)
                (assert tmp%15#0) // OnCompletion is NoOp
                let tmp%16#0: bool = (txn ApplicationID)
                (assert tmp%16#0) // is not creating
                let tmp%17#0: bytes = (txna ApplicationArgs 1)
                let tmp%18#0: uint64 = (btoi tmp%17#0)
                let tmp%19#0: uint64 = ((txnas Applications) tmp%18#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(tmp%19#0)
                return 1u
            block@5: // test_15plus_args_route_L63
                let tmp%20#0: uint64 = (txn OnCompletion)
                let tmp%21#0: bool = (! tmp%20#0)
                (assert tmp%21#0) // OnCompletion is NoOp
                let tmp%22#0: bool = (txn ApplicationID)
                (assert tmp%22#0) // is not creating
                let tmp%23#0: bytes = (txna ApplicationArgs 1)
                let tmp%24#0: uint64 = (btoi tmp%23#0)
                let tmp%25#0: uint64 = ((txnas Applications) tmp%24#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(tmp%25#0)
                return 1u
            block@6: // test_void_route_L91
                let tmp%26#0: uint64 = (txn OnCompletion)
                let tmp%27#0: bool = (! tmp%26#0)
                (assert tmp%27#0) // OnCompletion is NoOp
                let tmp%28#0: bool = (txn ApplicationID)
                (assert tmp%28#0) // is not creating
                let tmp%29#0: bytes = (txna ApplicationArgs 1)
                let tmp%30#0: uint64 = (btoi tmp%29#0)
                let tmp%31#0: uint64 = ((txnas Applications) tmp%30#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_void(tmp%31#0)
                return 1u
            block@7: // test_ref_types_route_L105
                let tmp%32#0: uint64 = (txn OnCompletion)
                let tmp%33#0: bool = (! tmp%32#0)
                (assert tmp%33#0) // OnCompletion is NoOp
                let tmp%34#0: bool = (txn ApplicationID)
                (assert tmp%34#0) // is not creating
                let tmp%35#0: bytes = (txna ApplicationArgs 1)
                let tmp%36#0: uint64 = (btoi tmp%35#0)
                let tmp%37#0: uint64 = ((txnas Applications) tmp%36#0)
                let tmp%38#0: bytes = (txna ApplicationArgs 2)
                let tmp%39#0: uint64 = (btoi tmp%38#0)
                let tmp%40#0: uint64 = ((txnas Assets) tmp%39#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(tmp%37#0, tmp%40#0)
                return 1u
            block@8: // test_native_string_route_L119
                let tmp%41#0: uint64 = (txn OnCompletion)
                let tmp%42#0: bool = (! tmp%41#0)
                (assert tmp%42#0) // OnCompletion is NoOp
                let tmp%43#0: bool = (txn ApplicationID)
                (assert tmp%43#0) // is not creating
                let tmp%44#0: bytes = (txna ApplicationArgs 1)
                let tmp%45#0: uint64 = (btoi tmp%44#0)
                let tmp%46#0: uint64 = ((txnas Applications) tmp%45#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(tmp%46#0)
                return 1u
            block@9: // test_native_bytes_route_L130
                let tmp%47#0: uint64 = (txn OnCompletion)
                let tmp%48#0: bool = (! tmp%47#0)
                (assert tmp%48#0) // OnCompletion is NoOp
                let tmp%49#0: bool = (txn ApplicationID)
                (assert tmp%49#0) // is not creating
                let tmp%50#0: bytes = (txna ApplicationArgs 1)
                let tmp%51#0: uint64 = (btoi tmp%50#0)
                let tmp%52#0: uint64 = ((txnas Applications) tmp%51#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(tmp%52#0)
                return 1u
            block@10: // test_native_uint64_route_L143
                let tmp%53#0: uint64 = (txn OnCompletion)
                let tmp%54#0: bool = (! tmp%53#0)
                (assert tmp%54#0) // OnCompletion is NoOp
                let tmp%55#0: bool = (txn ApplicationID)
                (assert tmp%55#0) // is not creating
                let tmp%56#0: bytes = (txna ApplicationArgs 1)
                let tmp%57#0: uint64 = (btoi tmp%56#0)
                let tmp%58#0: uint64 = ((txnas Applications) tmp%57#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(tmp%58#0)
                return 1u
            block@11: // test_native_biguint_route_L154
                let tmp%59#0: uint64 = (txn OnCompletion)
                let tmp%60#0: bool = (! tmp%59#0)
                (assert tmp%60#0) // OnCompletion is NoOp
                let tmp%61#0: bool = (txn ApplicationID)
                (assert tmp%61#0) // is not creating
                let tmp%62#0: bytes = (txna ApplicationArgs 1)
                let tmp%63#0: uint64 = (btoi tmp%62#0)
                let tmp%64#0: uint64 = ((txnas Applications) tmp%63#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(tmp%64#0)
                return 1u
            block@12: // test_native_tuple_route_L165
                let tmp%65#0: uint64 = (txn OnCompletion)
                let tmp%66#0: bool = (! tmp%65#0)
                (assert tmp%66#0) // OnCompletion is NoOp
                let tmp%67#0: bool = (txn ApplicationID)
                (assert tmp%67#0) // is not creating
                let tmp%68#0: bytes = (txna ApplicationArgs 1)
                let tmp%69#0: uint64 = (btoi tmp%68#0)
                let tmp%70#0: uint64 = ((txnas Applications) tmp%69#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(tmp%70#0)
                return 1u
            block@15: // bare_routing_L17
                let tmp%71#0: uint64 = (txn OnCompletion)
                let not%tmp%71#0: bool = (! tmp%71#0)
                (assert not%tmp%71#0) // reject transaction
                let tmp%72#0: bool = (txn ApplicationID)
                let tmp%73#0: bool = (! tmp%72#0)
                (assert tmp%73#0) // is creating
                return 1u
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(app: uint64) -> void:
            block@0: // L18
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05test1")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let result#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let tmp%3#0: bool = (== result#0 "\x00\x0becho: test1")
                (assert tmp%3#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05test2")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%3#0: bytes = (itxn LastLog)
                let result#1: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%5#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
                (assert tmp%6#0) // ARC4 prefix is valid
                let tmp%7#0: bool = (== result#1 "\x00\x0becho: test2")
                (assert tmp%7#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05test3")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%5#0: bytes = (itxn LastLog)
                let result#2: bytes = ((extract 4 0) awst_tmp%5#0)
                let tmp%9#0: bytes = ((extract 0 4) awst_tmp%5#0)
                let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
                (assert tmp%10#0) // ARC4 prefix is valid
                let tmp%11#0: bool = (== result#2 "\x00\x0becho: test3")
                (assert tmp%11#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05test4")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%7#0: bytes = (itxn LastLog)
                let result#3: bytes = ((extract 4 0) awst_tmp%7#0)
                let tmp%13#0: bytes = ((extract 0 4) awst_tmp%7#0)
                let tmp%14#0: bool = (== tmp%13#0 0x151f7c75)
                (assert tmp%14#0) // ARC4 prefix is valid
                let tmp%15#0: bool = (== result#3 "\x00\x0becho: test4")
                (assert tmp%15#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05test5")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%9#0: bytes = (itxn LastLog)
                let result#4: bytes = ((extract 4 0) awst_tmp%9#0)
                let tmp%17#0: bytes = ((extract 0 4) awst_tmp%9#0)
                let tmp%18#0: bool = (== tmp%17#0 0x151f7c75)
                (assert tmp%18#0) // ARC4 prefix is valid
                let tmp%19#0: bool = (== result#4 "\x00\x0becho: test5")
                (assert tmp%19#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(app: uint64) -> void:
            block@0: // L31
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) "\x00\x0etyped + ignore")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let awst_tmp%2#0: bytes = (itxn LastLog)
                let tmp%3#0: bytes = ((extract 4 0) awst_tmp%2#0)
                let tmp%4#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%5#0: bool = (== tmp%4#0 0x151f7c75)
                (assert tmp%5#0) // ARC4 prefix is valid
                let tmp%6#0: bool = (== tmp%3#0 "\x00\x14echo: typed + ignore")
                (assert tmp%6#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) "\x00\x10untyped + ignore")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%3#0: bytes = (itxn LastLog)
                let tmp%7#0: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%8#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%9#0: bool = (== tmp%8#0 0x151f7c75)
                (assert tmp%9#0) // ARC4 prefix is valid
                let tmp%10#0: bool = (== tmp%7#0 "\x00\x16echo: untyped + ignore")
                (assert tmp%10#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05tuple")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%5#0: bytes = (itxn LastLog)
                let result.0#0: bytes = ((extract 4 0) awst_tmp%5#0)
                let tmp%12#0: bytes = ((extract 0 4) awst_tmp%5#0)
                let tmp%13#0: bool = (== tmp%12#0 0x151f7c75)
                (assert tmp%13#0) // ARC4 prefix is valid
                let result.1.LastLog#0: bytes = (itxn LastLog)
                let tmp%14#0: bool = (== result.0#0 "\x00\x0becho: tuple")
                (assert tmp%14#0)
                let tmp%15#0: bytes = ((extract 4 0) result.1.LastLog#0)
                let tmp%16#0: bytes = ((extract 0 4) result.1.LastLog#0)
                let tmp%17#0: bool = (== tmp%16#0 0x151f7c75)
                (assert tmp%17#0) // ARC4 prefix is valid
                let tmp%18#0: bool = (== tmp%15#0 "\x00\x0becho: tuple")
                (assert tmp%18#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) "\x00\x07untyped")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn_result.LastLog#0: bytes = (itxn LastLog)
                let tmp%19#0: bytes = ((extract 4 0) txn_result.LastLog#0)
                let tmp%20#0: bytes = ((extract 0 4) txn_result.LastLog#0)
                let tmp%21#0: bool = (== tmp%20#0 0x151f7c75)
                (assert tmp%21#0) // ARC4 prefix is valid
                let tmp%22#0: bool = (== tmp%19#0 "\x00\recho: untyped")
                (assert tmp%22#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(app: uint64) -> void:
            block@0: // L46
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log_string(string)void")
                ((itxn_field ApplicationArgs) "\x00\nconverted1")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%0#0: bool = (== txn.LastLog#0 "converted1")
                (assert tmp%0#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log_uint64(uint64)void")
                ((itxn_field ApplicationArgs) 0x0000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#1: bytes = (itxn LastLog)
                let tmp%1#0: bytes = (itob 2u)
                let tmp%2#0: bool = (== txn.LastLog#1 tmp%1#0)
                (assert tmp%2#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log_uint512(uint512)void")
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#2: bytes = (itxn LastLog)
                let tmp%6#0: bool = (== txn.LastLog#2 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)
                (assert tmp%6#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log_bytes(byte[])void")
                ((itxn_field ApplicationArgs) 0x000134)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#3: bytes = (itxn LastLog)
                let tmp%7#0: bool = (== txn.LastLog#3 "4")
                (assert tmp%7#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log_bool(bool)void")
                ((itxn_field ApplicationArgs) 0x80)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#4: bytes = (itxn LastLog)
                let tmp%9#0: bool = (== txn.LastLog#4 "True")
                (assert tmp%9#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(app: uint64) -> void:
            block@0: // L63
                itxn_begin
                let encoded_tuple_buffer%0#2: bytes = 0xdead
                let encoded_tuple_buffer%0#3: bytes = (concat encoded_tuple_buffer%0#2 0xbe)
                let encoded_tuple_buffer%0#4: bytes = (concat encoded_tuple_buffer%0#3 0xef)
                let encoded_tuple_buffer%1#2: bytes = 0x0f10
                let encoded_tuple_buffer%1#3: bytes = (concat encoded_tuple_buffer%1#2 0x11)
                let encoded_tuple_buffer%1#4: bytes = (concat encoded_tuple_buffer%1#3 0x12)
                let encoded_tuple_buffer%1#5: bytes = (concat encoded_tuple_buffer%1#4 encoded_tuple_buffer%0#4)
                let encoded_tuple_buffer%1#6: bytes = (concat encoded_tuple_buffer%1#5 0x14)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]")
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field ApplicationArgs) 0x0000000000000002)
                ((itxn_field ApplicationArgs) 0x0000000000000003)
                ((itxn_field ApplicationArgs) 0x0000000000000004)
                ((itxn_field ApplicationArgs) 0x0000000000000005)
                ((itxn_field ApplicationArgs) 0x0000000000000006)
                ((itxn_field ApplicationArgs) 0x0000000000000007)
                ((itxn_field ApplicationArgs) 0x0000000000000008)
                ((itxn_field ApplicationArgs) 0x0000000000000009)
                ((itxn_field ApplicationArgs) 0x000000000000000a)
                ((itxn_field ApplicationArgs) 0x000000000000000b)
                ((itxn_field ApplicationArgs) 0x000000000000000c)
                ((itxn_field ApplicationArgs) 0x000000000000000d)
                ((itxn_field ApplicationArgs) 0x000000000000000e)
                ((itxn_field ApplicationArgs) encoded_tuple_buffer%1#6)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let result#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let tmp%3#0: bytes = ((extract 2 0) result#0)
                let tmp%4#0: bool = (== tmp%3#0 0x0f101112deadbeef14)
                (assert tmp%4#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_void(app: uint64) -> void:
            block@0: // L91
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log_string(string)void")
                ((itxn_field ApplicationArgs) "\x00\x06World1")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%0#0: bool = (== txn.LastLog#0 "World1")
                (assert tmp%0#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log_string(string)void")
                ((itxn_field ApplicationArgs) "\x00\x06World2")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#1: bytes = (itxn LastLog)
                let tmp%1#0: bool = (== txn.LastLog#1 "World2")
                (assert tmp%1#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log_string(string)void")
                ((itxn_field ApplicationArgs) "\x00\x06World3")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#2: bytes = (itxn LastLog)
                let tmp%2#0: bool = (== txn.LastLog#2 "World3")
                (assert tmp%2#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "log_string(string)void")
                ((itxn_field ApplicationArgs) "\x00\x06World4")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#3: bytes = (itxn LastLog)
                let tmp%3#0: bool = (== txn.LastLog#3 "World4")
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(app: uint64, asset: uint64) -> void:
            block@0: // L105
                itxn_begin
                let tmp%0#0: bytes = (global CurrentApplicationAddress)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field Assets) asset#0)
                ((itxn_field Applications) app#0)
                ((itxn_field Accounts) tmp%0#0)
                ((itxn_field ApplicationArgs) method "log_asset_account_app(asset,account,application)void")
                ((itxn_field ApplicationArgs) 0x00)
                ((itxn_field ApplicationArgs) 0x01)
                ((itxn_field ApplicationArgs) 0x01)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
                (assert check%0#0) // asset exists
                let tmp%1#0: bytes = (global CurrentApplicationAddress)
                let tmp%2#0: bytes = (concat value%0#0 tmp%1#0)
                let (value%1#0: bytes, check%1#0: bool) = ((app_params_get AppAddress) app#0)
                (assert check%1#0) // application exists
                let tmp%3#0: bytes = (concat tmp%2#0 value%1#0)
                let tmp%4#0: bool = (== txn.LastLog#0 tmp%3#0)
                (assert tmp%4#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(app: uint64) -> void:
            block@0: // L119
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
                ((itxn_field ApplicationArgs) "\x00\x01s")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result1#0: bytes = ((extract 2 0) tmp%0#0)
                let tmp%3#0: bool = (== result1#0 "echo: s")
                (assert tmp%3#0)
                itxn_begin
                let value_as_uint16%0#0: bytes = 0x0001
                let tmp%4#0: bytes = (concat value_as_uint16%0#0 "s")
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
                ((itxn_field ApplicationArgs) tmp%4#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%3#0: bytes = (itxn LastLog)
                let tmp%5#0: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%6#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
                (assert tmp%7#0) // ARC4 prefix is valid
                let result2#0: bytes = ((extract 2 0) tmp%5#0)
                let tmp%8#0: bool = (== result2#0 result1#0)
                (assert tmp%8#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
                ((itxn_field ApplicationArgs) "\x00\x01s")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%5#0: bytes = (itxn LastLog)
                let tmp%9#0: bytes = ((extract 4 0) awst_tmp%5#0)
                let tmp%10#0: bytes = ((extract 0 4) awst_tmp%5#0)
                let tmp%11#0: bool = (== tmp%10#0 0x151f7c75)
                (assert tmp%11#0) // ARC4 prefix is valid
                let result3#0: bytes = ((extract 2 0) tmp%9#0)
                let tmp%12#0: bool = (== result3#0 result1#0)
                (assert tmp%12#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(app: uint64) -> void:
            block@0: // L130
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
                ((itxn_field ApplicationArgs) 0x000162)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result1#0: bytes = ((extract 2 0) tmp%0#0)
                let tmp%3#0: bool = (== result1#0 "echo: b")
                (assert tmp%3#0)
                itxn_begin
                let tmp%6#0: bytes = 0x0001
                let tmp%7#0: bytes = (concat tmp%6#0 "b")
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
                ((itxn_field ApplicationArgs) tmp%7#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%4#0: bytes = (itxn LastLog)
                let tmp%8#0: bytes = ((extract 4 0) awst_tmp%4#0)
                let tmp%9#0: bytes = ((extract 0 4) awst_tmp%4#0)
                let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
                (assert tmp%10#0) // ARC4 prefix is valid
                let result2#0: bytes = ((extract 2 0) tmp%8#0)
                let tmp%11#0: bool = (== result2#0 result1#0)
                (assert tmp%11#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
                ((itxn_field ApplicationArgs) 0x000162)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%6#0: bytes = (itxn LastLog)
                let tmp%12#0: bytes = ((extract 4 0) awst_tmp%6#0)
                let tmp%13#0: bytes = ((extract 0 4) awst_tmp%6#0)
                let tmp%14#0: bool = (== tmp%13#0 0x151f7c75)
                (assert tmp%14#0) // ARC4 prefix is valid
                let result3#0: bytes = ((extract 2 0) tmp%12#0)
                let tmp%15#0: bool = (== result3#0 result1#0)
                (assert tmp%15#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(app: uint64) -> void:
            block@0: // L143
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result1#0: uint64 = (btoi tmp%0#0)
                let tmp%3#0: bool = (== result1#0 2u)
                (assert tmp%3#0)
                itxn_begin
                let val_as_bytes%0#0: bytes = (itob 1u)
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
                ((itxn_field ApplicationArgs) val_as_bytes%0#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%3#0: bytes = (itxn LastLog)
                let tmp%4#0: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%5#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
                (assert tmp%6#0) // ARC4 prefix is valid
                let result2#0: uint64 = (btoi tmp%4#0)
                let tmp%7#0: bool = (== result2#0 result1#0)
                (assert tmp%7#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%5#0: bytes = (itxn LastLog)
                let tmp%8#0: bytes = ((extract 4 0) awst_tmp%5#0)
                let tmp%9#0: bytes = ((extract 0 4) awst_tmp%5#0)
                let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
                (assert tmp%10#0) // ARC4 prefix is valid
                let result3#0: uint64 = (btoi tmp%8#0)
                let tmp%11#0: bool = (== result3#0 result1#0)
                (assert tmp%11#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(app: uint64) -> void:
            block@0: // L154
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let result1#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let tmp%3#0: bool = (b== result1#0 3b)
                (assert tmp%3#0)
                itxn_begin
                let no_overflow%0#0: bool = 1u
                (assert no_overflow%0#0) // overflow
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%3#0: bytes = (itxn LastLog)
                let result2#0: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%6#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
                (assert tmp%7#0) // ARC4 prefix is valid
                let tmp%8#0: bool = (b== result2#0 result1#0)
                (assert tmp%8#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%5#0: bytes = (itxn LastLog)
                let result3#0: bytes = ((extract 4 0) awst_tmp%5#0)
                let tmp%10#0: bytes = ((extract 0 4) awst_tmp%5#0)
                let tmp%11#0: bool = (== tmp%10#0 0x151f7c75)
                (assert tmp%11#0) // ARC4 prefix is valid
                let tmp%12#0: bool = (b== result3#0 result1#0)
                (assert tmp%12#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(app: uint64) -> void:
            block@0: // L165
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
                ((itxn_field ApplicationArgs) "\x00\x02s1")
                ((itxn_field ApplicationArgs) 0x00026231)
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let result1#0: bytes = ((extract 4 0) txn.LastLog#0)
                let tmp%1#0: bytes = ((extract 0 4) txn.LastLog#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let item_start_offset%0#0: uint64 = (extract_uint16 result1#0 0u)
                let item_end_offset%0#0: uint64 = (extract_uint16 result1#0 2u)
                let s#0: bytes = (substring3 result1#0 item_start_offset%0#0 item_end_offset%0#0)
                let item_end_offset%1#0: uint64 = (len result1#0)
                let b#0: bytes = (substring3 result1#0 item_end_offset%0#0 item_end_offset%1#0)
                let u#0: bytes = ((extract 4 8) result1#0) // on error: Index access is out of bounds
                let bu#0: bytes = ((extract 12 64) result1#0) // on error: Index access is out of bounds
                let tmp%3#0: bytes = ((extract 2 0) s#0)
                let tmp%4#0: bool = (== tmp%3#0 "echo: s1")
                (assert tmp%4#0)
                let tmp%5#0: bytes = ((extract 2 0) b#0)
                let tmp%6#0: bool = (== tmp%5#0 "echo: b1")
                (assert tmp%6#0)
                let tmp%7#0: uint64 = (btoi u#0)
                let tmp%8#0: bool = (== tmp%7#0 2u)
                (assert tmp%8#0)
                let tmp%9#0: bool = (b== bu#0 3b)
                (assert tmp%9#0)
                itxn_begin
                let value_as_uint16%0#0: bytes = 0x0002
                let tmp%10#0: bytes = (concat value_as_uint16%0#0 "s1")
                let tmp%13#0: bytes = 0x0002
                let tmp%14#0: bytes = (concat tmp%13#0 "b1")
                let val_as_bytes%0#0: bytes = (itob 1u)
                let no_overflow%0#0: bool = 1u
                (assert no_overflow%0#0) // overflow
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
                ((itxn_field ApplicationArgs) tmp%10#0)
                ((itxn_field ApplicationArgs) tmp%14#0)
                ((itxn_field ApplicationArgs) val_as_bytes%0#0)
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#1: bytes = (itxn LastLog)
                let result2#0: bytes = ((extract 4 0) txn.LastLog#1)
                let tmp%17#0: bytes = ((extract 0 4) txn.LastLog#1)
                let tmp%18#0: bool = (== tmp%17#0 0x151f7c75)
                (assert tmp%18#0) // ARC4 prefix is valid
                let tmp%19#0: bool = (== result1#0 result2#0)
                (assert tmp%19#0)
                itxn_begin
                ((itxn_field ApplicationID) app#0)
                ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
                ((itxn_field ApplicationArgs) "\x00\x02s1")
                ((itxn_field ApplicationArgs) 0x00026231)
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#2: bytes = (itxn LastLog)
                let result3#0: bytes = ((extract 4 0) txn.LastLog#2)
                let tmp%21#0: bytes = ((extract 0 4) txn.LastLog#2)
                let tmp%22#0: bool = (== tmp%21#0 0x151f7c75)
                (assert tmp%22#0) // ARC4 prefix is valid
                let tmp%23#0: bool = (== result1#0 result3#0)
                (assert tmp%23#0)
                return 
    
    program clear-state:
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.clear_state_program() -> bool:
            block@0: // L17
                return 1u