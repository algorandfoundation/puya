contract test_cases.typed_abi_call.logger.Logger:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L1
                let tmp%0#0: bool = test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__() -> bool:
            block@0: // L20
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bool = (!= tmp%0#0 0u)
                goto tmp%1#0 ? block@1 : block@19
            block@1: // abi_routing_L20
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "is_a_b(byte[],byte[])void" => block@2, method "echo(string)string" => block@3, method "no_args()uint64" => block@4, method "log(uint64)void" => block@5, method "log(uint512)void" => block@6, method "log(string)void" => block@7, method "log(bool)void" => block@8, method "log(byte[])void" => block@9, method "log(asset,account,application)void" => block@10, method "echo_native_string(string)string" => block@11, method "echo_native_bytes(byte[])byte[]" => block@12, method "echo_native_uint64(uint64)uint64" => block@13, method "echo_native_biguint(uint512)uint512" => block@14, method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)" => block@15, method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]" => block@16, * => block@17}
            block@2: // is_a_b_route_L21
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (== tmp%3#0 NoOp)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: bool = (!= tmp%5#0 0u)
                (assert tmp%6#0) // is not creating
                let tmp%7#0: bytes = (txna ApplicationArgs 1)
                let tmp%8#0: bytes = ((extract 2 0) tmp%7#0)
                let tmp%9#0: bytes = (txna ApplicationArgs 2)
                let tmp%10#0: bytes = ((extract 2 0) tmp%9#0)
                test_cases.typed_abi_call.logger.Logger.is_a_b(tmp%8#0, tmp%10#0)
                return 1u
            block@3: // echo_route_L26
                let tmp%11#0: uint64 = (txn OnCompletion)
                let tmp%12#0: bool = (== tmp%11#0 NoOp)
                (assert tmp%12#0) // OnCompletion is NoOp
                let tmp%13#0: uint64 = (txn ApplicationID)
                let tmp%14#0: bool = (!= tmp%13#0 0u)
                (assert tmp%14#0) // is not creating
                let tmp%15#0: bytes = (txna ApplicationArgs 1)
                let tmp%16#0: bytes = test_cases.typed_abi_call.logger.Logger.echo(tmp%15#0)
                let tmp%17#0: bytes = (concat 0x151f7c75 tmp%16#0)
                (log tmp%17#0)
                return 1u
            block@4: // no_args_route_L30
                let tmp%18#0: uint64 = (txn OnCompletion)
                let tmp%19#0: bool = (== tmp%18#0 NoOp)
                (assert tmp%19#0) // OnCompletion is NoOp
                let tmp%20#0: uint64 = (txn ApplicationID)
                let tmp%21#0: bool = (!= tmp%20#0 0u)
                (assert tmp%21#0) // is not creating
                let tmp%22#0: uint64 = test_cases.typed_abi_call.logger.Logger.no_args()
                let val_as_bytes%0#0: bytes = (itob tmp%22#0)
                let tmp%23#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
                (log tmp%23#0)
                return 1u
            block@5: // log_route_L34
                let tmp%24#0: uint64 = (txn OnCompletion)
                let tmp%25#0: bool = (== tmp%24#0 NoOp)
                (assert tmp%25#0) // OnCompletion is NoOp
                let tmp%26#0: uint64 = (txn ApplicationID)
                let tmp%27#0: bool = (!= tmp%26#0 0u)
                (assert tmp%27#0) // is not creating
                let tmp%28#0: bytes = (txna ApplicationArgs 1)
                test_cases.typed_abi_call.logger.Logger.log_uint64(tmp%28#0)
                return 1u
            block@6: // log_route_L38
                let tmp%29#0: uint64 = (txn OnCompletion)
                let tmp%30#0: bool = (== tmp%29#0 NoOp)
                (assert tmp%30#0) // OnCompletion is NoOp
                let tmp%31#0: uint64 = (txn ApplicationID)
                let tmp%32#0: bool = (!= tmp%31#0 0u)
                (assert tmp%32#0) // is not creating
                let tmp%33#0: bytes = (txna ApplicationArgs 1)
                test_cases.typed_abi_call.logger.Logger.log_uint512(tmp%33#0)
                return 1u
            block@7: // log_route_L42
                let tmp%34#0: uint64 = (txn OnCompletion)
                let tmp%35#0: bool = (== tmp%34#0 NoOp)
                (assert tmp%35#0) // OnCompletion is NoOp
                let tmp%36#0: uint64 = (txn ApplicationID)
                let tmp%37#0: bool = (!= tmp%36#0 0u)
                (assert tmp%37#0) // is not creating
                let tmp%38#0: bytes = (txna ApplicationArgs 1)
                test_cases.typed_abi_call.logger.Logger.log_string(tmp%38#0)
                return 1u
            block@8: // log_route_L46
                let tmp%39#0: uint64 = (txn OnCompletion)
                let tmp%40#0: bool = (== tmp%39#0 NoOp)
                (assert tmp%40#0) // OnCompletion is NoOp
                let tmp%41#0: uint64 = (txn ApplicationID)
                let tmp%42#0: bool = (!= tmp%41#0 0u)
                (assert tmp%42#0) // is not creating
                let tmp%43#0: bytes = (txna ApplicationArgs 1)
                test_cases.typed_abi_call.logger.Logger.log_bool(tmp%43#0)
                return 1u
            block@9: // log_route_L50
                let tmp%44#0: uint64 = (txn OnCompletion)
                let tmp%45#0: bool = (== tmp%44#0 NoOp)
                (assert tmp%45#0) // OnCompletion is NoOp
                let tmp%46#0: uint64 = (txn ApplicationID)
                let tmp%47#0: bool = (!= tmp%46#0 0u)
                (assert tmp%47#0) // is not creating
                let tmp%48#0: bytes = (txna ApplicationArgs 1)
                test_cases.typed_abi_call.logger.Logger.log_bytes(tmp%48#0)
                return 1u
            block@10: // log_route_L54
                let tmp%49#0: uint64 = (txn OnCompletion)
                let tmp%50#0: bool = (== tmp%49#0 NoOp)
                (assert tmp%50#0) // OnCompletion is NoOp
                let tmp%51#0: uint64 = (txn ApplicationID)
                let tmp%52#0: bool = (!= tmp%51#0 0u)
                (assert tmp%52#0) // is not creating
                let tmp%53#0: bytes = (txna ApplicationArgs 1)
                let tmp%54#0: uint64 = (btoi tmp%53#0)
                let tmp%55#0: uint64 = ((txnas Assets) tmp%54#0)
                let tmp%56#0: bytes = (txna ApplicationArgs 2)
                let tmp%57#0: uint64 = (btoi tmp%56#0)
                let tmp%58#0: bytes = ((txnas Accounts) tmp%57#0)
                let tmp%59#0: bytes = (txna ApplicationArgs 3)
                let tmp%60#0: uint64 = (btoi tmp%59#0)
                let tmp%61#0: uint64 = ((txnas Applications) tmp%60#0)
                test_cases.typed_abi_call.logger.Logger.log_asset_account_app(tmp%55#0, tmp%58#0, tmp%61#0)
                return 1u
            block@11: // echo_native_string_route_L58
                let tmp%62#0: uint64 = (txn OnCompletion)
                let tmp%63#0: bool = (== tmp%62#0 NoOp)
                (assert tmp%63#0) // OnCompletion is NoOp
                let tmp%64#0: uint64 = (txn ApplicationID)
                let tmp%65#0: bool = (!= tmp%64#0 0u)
                (assert tmp%65#0) // is not creating
                let tmp%66#0: bytes = (txna ApplicationArgs 1)
                let tmp%67#0: bytes = ((extract 2 0) tmp%66#0)
                let tmp%68#0: bytes = test_cases.typed_abi_call.logger.Logger.echo_native_string(tmp%67#0)
                let length%0#0: uint64 = (len tmp%68#0)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 tmp%68#0)
                let tmp%69#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
                (log tmp%69#0)
                return 1u
            block@12: // echo_native_bytes_route_L62
                let tmp%70#0: uint64 = (txn OnCompletion)
                let tmp%71#0: bool = (== tmp%70#0 NoOp)
                (assert tmp%71#0) // OnCompletion is NoOp
                let tmp%72#0: uint64 = (txn ApplicationID)
                let tmp%73#0: bool = (!= tmp%72#0 0u)
                (assert tmp%73#0) // is not creating
                let tmp%74#0: bytes = (txna ApplicationArgs 1)
                let tmp%75#0: bytes = ((extract 2 0) tmp%74#0)
                let tmp%76#0: bytes = test_cases.typed_abi_call.logger.Logger.echo_native_bytes(tmp%75#0)
                let length%1#0: uint64 = (len tmp%76#0)
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 tmp%76#0)
                let tmp%77#0: bytes = (concat 0x151f7c75 encoded_value%1#0)
                (log tmp%77#0)
                return 1u
            block@13: // echo_native_uint64_route_L66
                let tmp%78#0: uint64 = (txn OnCompletion)
                let tmp%79#0: bool = (== tmp%78#0 NoOp)
                (assert tmp%79#0) // OnCompletion is NoOp
                let tmp%80#0: uint64 = (txn ApplicationID)
                let tmp%81#0: bool = (!= tmp%80#0 0u)
                (assert tmp%81#0) // is not creating
                let tmp%82#0: bytes = (txna ApplicationArgs 1)
                let tmp%83#0: uint64 = (btoi tmp%82#0)
                let tmp%84#0: uint64 = test_cases.typed_abi_call.logger.Logger.echo_native_uint64(tmp%83#0)
                let val_as_bytes%1#0: bytes = (itob tmp%84#0)
                let tmp%85#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
                (log tmp%85#0)
                return 1u
            block@14: // echo_native_biguint_route_L70
                let tmp%86#0: uint64 = (txn OnCompletion)
                let tmp%87#0: bool = (== tmp%86#0 NoOp)
                (assert tmp%87#0) // OnCompletion is NoOp
                let tmp%88#0: uint64 = (txn ApplicationID)
                let tmp%89#0: bool = (!= tmp%88#0 0u)
                (assert tmp%89#0) // is not creating
                let tmp%90#0: bytes = (txna ApplicationArgs 1)
                let tmp%91#0: biguint = test_cases.typed_abi_call.logger.Logger.echo_native_biguint(tmp%90#0)
                let len_%0#0: uint64 = (len tmp%91#0)
                let no_overflow%0#0: bool = (<= len_%0#0 64u)
                (assert no_overflow%0#0) // overflow
                let b_zeros%0#0: bytes = (bzero 64u)
                let tmp%92#0: bytes = (b| tmp%91#0 b_zeros%0#0)
                let tmp%93#0: bytes = (concat 0x151f7c75 tmp%92#0)
                (log tmp%93#0)
                return 1u
            block@15: // echo_native_tuple_route_L74
                let tmp%94#0: uint64 = (txn OnCompletion)
                let tmp%95#0: bool = (== tmp%94#0 NoOp)
                (assert tmp%95#0) // OnCompletion is NoOp
                let tmp%96#0: uint64 = (txn ApplicationID)
                let tmp%97#0: bool = (!= tmp%96#0 0u)
                (assert tmp%97#0) // is not creating
                let tmp%98#0: bytes = (txna ApplicationArgs 1)
                let tmp%99#0: bytes = ((extract 2 0) tmp%98#0)
                let tmp%100#0: bytes = (txna ApplicationArgs 2)
                let tmp%101#0: bytes = ((extract 2 0) tmp%100#0)
                let tmp%102#0: bytes = (txna ApplicationArgs 3)
                let tmp%103#0: uint64 = (btoi tmp%102#0)
                let tmp%104#0: bytes = (txna ApplicationArgs 4)
                let (awst_tmp%0#0: bytes, awst_tmp%1#0: bytes, awst_tmp%2#0: uint64, awst_tmp%3#0: biguint) = test_cases.typed_abi_call.logger.Logger.echo_native_tuple(tmp%99#0, tmp%101#0, tmp%103#0, tmp%104#0)
                let length%2#0: uint64 = (len awst_tmp%0#0)
                let as_bytes%2#0: bytes = (itob length%2#0)
                let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
                let encoded_value%2#0: bytes = (concat length_uint16%2#0 awst_tmp%0#0)
                let length%3#0: uint64 = (len awst_tmp%1#0)
                let as_bytes%3#0: bytes = (itob length%3#0)
                let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
                let encoded_value%3#0: bytes = (concat length_uint16%3#0 awst_tmp%1#0)
                let val_as_bytes%2#0: bytes = (itob awst_tmp%2#0)
                let len_%1#0: uint64 = (len awst_tmp%3#0)
                let no_overflow%1#0: bool = (<= len_%1#0 64u)
                (assert no_overflow%1#0) // overflow
                let b_zeros%1#0: bytes = (bzero 64u)
                let tmp%105#0: bytes = (b| awst_tmp%3#0 b_zeros%1#0)
                let as_bytes%4#0: bytes = (itob 76u)
                let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%4#0)
                let encoded_tuple_buffer%1#0: bytes = (concat 0x offset_as_uint16%0#0)
                let data_length%0#0: uint64 = (len encoded_value%2#0)
                let current_tail_offset%1#0: uint64 = (+ 76u data_length%0#0)
                let as_bytes%5#0: bytes = (itob current_tail_offset%1#0)
                let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%5#0)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 offset_as_uint16%1#0)
                let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 val_as_bytes%2#0)
                let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 tmp%105#0)
                let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 encoded_value%2#0)
                let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 encoded_value%3#0)
                let tmp%106#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%6#0)
                (log tmp%106#0)
                return 1u
            block@16: // return_args_after_14th_route_L80
                let tmp%107#0: uint64 = (txn OnCompletion)
                let tmp%108#0: bool = (== tmp%107#0 NoOp)
                (assert tmp%108#0) // OnCompletion is NoOp
                let tmp%109#0: uint64 = (txn ApplicationID)
                let tmp%110#0: bool = (!= tmp%109#0 0u)
                (assert tmp%110#0) // is not creating
                let tmp%111#0: bytes = (txna ApplicationArgs 1)
                let tmp%112#0: bytes = (txna ApplicationArgs 2)
                let tmp%113#0: bytes = (txna ApplicationArgs 3)
                let tmp%114#0: bytes = (txna ApplicationArgs 4)
                let tmp%115#0: bytes = (txna ApplicationArgs 5)
                let tmp%116#0: bytes = (txna ApplicationArgs 6)
                let tmp%117#0: bytes = (txna ApplicationArgs 7)
                let tmp%118#0: bytes = (txna ApplicationArgs 8)
                let tmp%119#0: bytes = (txna ApplicationArgs 9)
                let tmp%120#0: bytes = (txna ApplicationArgs 10)
                let tmp%121#0: bytes = (txna ApplicationArgs 11)
                let tmp%122#0: bytes = (txna ApplicationArgs 12)
                let tmp%123#0: bytes = (txna ApplicationArgs 13)
                let tmp%124#0: bytes = (txna ApplicationArgs 14)
                let tmp%125#0: bytes = (txna ApplicationArgs 15)
                let tmp%126#0: bytes = (extract3 tmp%125#0 0u 1u) // on error: Index access is out of bounds
                let tmp%127#0: bytes = (txna ApplicationArgs 15)
                let tmp%128#0: bytes = (extract3 tmp%127#0 1u 1u) // on error: Index access is out of bounds
                let tmp%129#0: bytes = (txna ApplicationArgs 15)
                let tmp%130#0: bytes = (extract3 tmp%129#0 2u 1u) // on error: Index access is out of bounds
                let tmp%131#0: bytes = (txna ApplicationArgs 15)
                let tmp%132#0: bytes = (extract3 tmp%131#0 3u 1u) // on error: Index access is out of bounds
                let tmp%133#0: bytes = (txna ApplicationArgs 15)
                let tmp%134#0: bytes = (extract3 tmp%133#0 4u 4u) // on error: Index access is out of bounds
                let tmp%135#0: bytes = (txna ApplicationArgs 15)
                let tmp%136#0: bytes = (extract3 tmp%135#0 8u 1u) // on error: Index access is out of bounds
                let tmp%137#0: bytes = test_cases.typed_abi_call.logger.Logger.return_args_after_14th(tmp%111#0, tmp%112#0, tmp%113#0, tmp%114#0, tmp%115#0, tmp%116#0, tmp%117#0, tmp%118#0, tmp%119#0, tmp%120#0, tmp%121#0, tmp%122#0, tmp%123#0, tmp%124#0, tmp%126#0, tmp%128#0, tmp%130#0, tmp%132#0, tmp%134#0, tmp%136#0)
                let tmp%138#0: bytes = (concat 0x151f7c75 tmp%137#0)
                (log tmp%138#0)
                return 1u
            block@17: // switch_case_default_L20
                goto block@18
            block@18: // switch_case_next_L20
                goto block@23
            block@19: // bare_routing_L20
                let tmp%139#0: uint64 = (txn OnCompletion)
                switch tmp%139#0 {0u => block@20, * => block@21}
            block@20: // __algopy_default_create_L20
                let tmp%140#0: uint64 = (txn ApplicationID)
                let tmp%141#0: bool = (== tmp%140#0 0u)
                (assert tmp%141#0) // is creating
                test_cases.typed_abi_call.logger.Logger.__algopy_default_create()
                return 1u
            block@21: // switch_case_default_L20
                goto block@22
            block@22: // switch_case_next_L20
                goto block@23
            block@23: // after_if_else_L20
                return 0u
        
        subroutine test_cases.typed_abi_call.logger.Logger.is_a_b(a: bytes, b: bytes) -> void:
            block@0: // L21
                let tmp%0#0: bool = (== a#0 0x61)
                (assert tmp%0#0) // a is not a
                let tmp%1#0: bool = (== b#0 0x62)
                (assert tmp%1#0) // b is not b
                return 
        
        subroutine test_cases.typed_abi_call.logger.Logger.echo(value: bytes) -> bytes:
            block@0: // L26
                let length%0#0: uint64 = (len "echo: ")
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 "echo: ")
                let expr_value_trimmed%0#0: bytes = ((extract 2 0) encoded_value%0#0)
                let expr_value_trimmed%1#0: bytes = ((extract 2 0) value#0)
                let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 expr_value_trimmed%1#0)
                let len_%0#0: uint64 = (len concatenated%0#0)
                let as_bytes%1#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%1#0)
                let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                return concat_result%0#0
        
        subroutine test_cases.typed_abi_call.logger.Logger.no_args() -> uint64:
            block@0: // L30
                return 42u
        
        subroutine test_cases.typed_abi_call.logger.Logger.log_uint64(value: bytes) -> void:
            block@0: // L34
                (log value#0)
                return 
        
        subroutine test_cases.typed_abi_call.logger.Logger.log_uint512(value: bytes) -> void:
            block@0: // L38
                (log value#0)
                return 
        
        subroutine test_cases.typed_abi_call.logger.Logger.log_string(value: bytes) -> void:
            block@0: // L42
                let tmp%0#0: bytes = ((extract 2 0) value#0)
                (log tmp%0#0)
                return 
        
        subroutine test_cases.typed_abi_call.logger.Logger.log_bool(value: bytes) -> void:
            block@0: // L46
                let tmp%0#0: bool = (getbit value#0 0u)
                let tmp%1#0: bytes = (select 0x46616c7365 0x54727565 tmp%0#0)
                (log tmp%1#0)
                return 
        
        subroutine test_cases.typed_abi_call.logger.Logger.log_bytes(value: bytes) -> void:
            block@0: // L50
                let tmp%0#0: bytes = ((extract 2 0) value#0)
                (log tmp%0#0)
                return 
        
        subroutine test_cases.typed_abi_call.logger.Logger.log_asset_account_app(asset: uint64, account: bytes, app: uint64) -> void:
            block@0: // L54
                let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
                (assert check%0#0) // asset exists
                let tmp%0#0: bytes = (concat value%0#0 "")
                let tmp%1#0: bytes = (concat tmp%0#0 account#0)
                let tmp%2#0: bytes = (concat tmp%1#0 "")
                let (value%1#0: bytes, check%1#0: bool) = ((app_params_get AppAddress) app#0)
                (assert check%1#0) // application exists
                let tmp%3#0: bytes = (concat tmp%2#0 value%1#0)
                (log tmp%3#0)
                return 
        
        subroutine test_cases.typed_abi_call.logger.Logger.echo_native_string(value: bytes) -> bytes:
            block@0: // L58
                let tmp%0#0: bytes = (concat "echo: " value#0)
                return tmp%0#0
        
        subroutine test_cases.typed_abi_call.logger.Logger.echo_native_bytes(value: bytes) -> bytes:
            block@0: // L62
                let tmp%0#0: bytes = (concat 0x6563686f3a20 value#0)
                return tmp%0#0
        
        subroutine test_cases.typed_abi_call.logger.Logger.echo_native_uint64(value: uint64) -> uint64:
            block@0: // L66
                let tmp%0#0: uint64 = (+ value#0 1u)
                return tmp%0#0
        
        subroutine test_cases.typed_abi_call.logger.Logger.echo_native_biguint(value: biguint) -> biguint:
            block@0: // L70
                let tmp%0#0: biguint = (b+ value#0 1b)
                return tmp%0#0
        
        subroutine test_cases.typed_abi_call.logger.Logger.echo_native_tuple(s: bytes, b: bytes, u: uint64, bu: biguint) -> <bytes, bytes, uint64, biguint>:
            block@0: // L74
                let tmp%0#0: bytes = (concat "echo: " s#0)
                let tmp%1#0: bytes = (concat 0x6563686f3a20 b#0)
                let tmp%2#0: uint64 = (+ u#0 1u)
                let tmp%3#0: biguint = (b+ bu#0 1b)
                return tmp%0#0 tmp%1#0 tmp%2#0 tmp%3#0
        
        subroutine test_cases.typed_abi_call.logger.Logger.return_args_after_14th(_a1: bytes, _a2: bytes, _a3: bytes, _a4: bytes, _a5: bytes, _a6: bytes, _a7: bytes, _a8: bytes, _a9: bytes, _a10: bytes, _a11: bytes, _a12: bytes, _a13: bytes, _a14: bytes, a15: bytes, a16: bytes, a17: bytes, a18: bytes, a19: bytes, a20: bytes) -> bytes:
            block@0: // L80
                let encoded_tuple_buffer%1#0: bytes = (concat 0x a15#0)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 a16#0)
                let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 a17#0)
                let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 a18#0)
                let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 a19#0)
                let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 a20#0)
                let last_arg#0: bytes = encoded_tuple_buffer%6#0
                let tmp%0#0: bytes = (txna ApplicationArgs 15)
                let tmp%1#0: bool = (== tmp%0#0 last_arg#0)
                (assert tmp%1#0)
                let length%0#0: uint64 = (len last_arg#0)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 last_arg#0)
                return encoded_value%0#0
        
        subroutine test_cases.typed_abi_call.logger.Logger.__algopy_default_create() -> void:
            block@0: // L20
                return 
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u