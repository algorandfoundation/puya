{
  "version": 3,
  "sources": [
    "../typed_c2c.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAmUK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAnUL;;;AAAA;AAAA;;AAmUK;;;AAAA;;;;AAVA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAzTL;;;AAAA;AAAA;;AAyTK;;;AAAA;;;;AA9CA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA3QL;;;AAAA;AAAA;;AA2QK;;;AAAA;;;;AAlDA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAzNL;;;AAAA;AAAA;;AAyNK;;;AAAA;;;;AA3DA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA9JL;;;AAAA;AAAA;;AA8JK;;;AAAA;;;;AAXA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAnJL;;;AAAA;AAAA;;AAmJK;;;AAAA;;;;AAXA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAxIL;;;AAAA;AAAA;;AAwIK;;;AAAA;;;;AAbA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA3HL;;;AAAA;AAAA;;AA2HK;;;AAAA;;;;AAXA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAhHL;;;AAAA;AAAA;;AAgHK;;;AAAA;;;;AAdA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlGL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAkGK;;;AAAA;;;;AAdA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AApFL;;;AAAA;AAAA;;AAoFK;;;AAAA;;;;AA5BA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAxDL;;;AAAA;AAAA;;AAwDK;;;AAAA;;;;AAjBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAvCL;;;AAAA;AAAA;;AAuCK;;;AAAA;;;;AAfA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAxBL;;;AAAA;AAAA;;AAwBK;;;AAAA;;;;AAdA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAVL;;;AAAA;AAAA;;AAUK;;;AAAA;;;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AACK;;AAAA;;AAAA;;AAAA;;;AAAA;;;;AADL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AACA;;;AAEQ;AAEI;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AACA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AACO;;;;AAJX;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;AAOR;;;AAEe;AAAoC;AAApC;AAAP;AACe;AAAwD;;;;AAAxD;;;AAA2B;;;;;;;;;;;AAA3B;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;AAAiD;;;;AAAjD;;;AAAiC;;;;;;;;;;;AAAjC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;AAAmD;;;;AAAnD;;;AAAmC;;;;;;;;;;;AAAnC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;AAA2D;;;;AAA3D;;;AAA2C;;;;;;;;;;;AAA3C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;AAAiE;;;;AAAjE;;;AAAiD;;;;;;;;;;;AAAjD;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;;AAER;;;AAEQ;AAA0E;;;;AAA1E;;;AAAiD;;;;;;;;;;;;;;;;;;;;AAAjD;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;;;;;;;;;;;;;;;;;;;;;;;AAA5C;AAAP;AAEA;AAA+D;;;;AAA/D;;;AAAoC;;;;;;;;;;;;;;;;;;;;;;AAApC;;;AAAA;;;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;;;;;;;;;;;;;;;;;;;;;;;;;AAA5C;AAAP;AAES;AAAiE;;;;AAAjE;;;AAAiD;;;;;;;;;;;AAAjD;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;AACW;;AAAb;AAAP;AACO;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;AAA5C;AAAP;AAEa;AAAsD;;;;AAAtD;;;AAAoC;;;;;;;;;;;;;AAApC;;;AAAA;;;AAAA;;;AACN;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA6C;;;;;;;;;;;;;;;;;AAA7C;AAAP;;AAER;;;AAEc;AAAsD;;;;AAAtD;;;;AAAiC;;;;;;;;;;;;;;;;AAAjC;;;AAAA;;;AAAA;;;AACiB;;;;;;;;;;;;AAAhB;AAAP;AAEM;AAA2C;;;;AAA3C;;;;;;;;AAAiC;;;;AAAjC;;;AAAA;;;AAAA;;;AACyB;AAAR;AAAhB;AAAP;AAEM;AAA4C;;;;AAA5C;;;;;;;;AAAkC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAlC;;;AAAA;;;AAAA;;;AAC2B;;AAAT;AAAuB;;AAAR;AAAf;AAAjB;AAAP;AAEM;AAAgC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAa;;;;AAA7C;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;AACiB;;AAAhB;AAAP;AAEM;AAA4C;;;;AAA5C;;;;;;;;AAA+B;;;;;AAA/B;;;AAAA;;;AAAA;;;AACiB;;;;;;AAAhB;AAAP;;AAER;;;AAEsB;AAoBV;AAAY;;;AAAZ;AAA8B;;;AAA9B;AAAgD;;;AAAhD;AAAkE;;;AAAlE;AAJA;AAAA;;;AAAA;AACA;;;AADA;AAEA;;;AAFA;AAGA;;;AAHA;AAAA;AAAA;AAKA;;;AALA;AAMO;;;;AAtBG;;;;;;;;AAEV;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;;;AAfU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAwBP;;;AAAiB;;;;;;;;;;;AAAjB;AAAP;;AAER;;;AAEc;AAAiE;;;;AAAjE;;;;AAAgD;;;;;;;;;;;;AAAhD;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;AAEM;AAA6D;;;;AAA7D;;;;AAA4C;;;;;;;;;;;;AAA5C;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;AAEM;AAA6D;;;;AAA7D;;;;AAA+B;;;;;;;;;;;;AAA/B;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;AAEM;AAAkD;;;;AAAlD;;;;AAAiC;;;;;;;;;;;;AAAjC;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;;AAER;;;AAEc;AAGF;;AACA;;AAFA;;AAGO;;;;;;;;;;AALL;;;;;;;;AAEF;;;;;AACA;;;;;AACA;;;;;AAJE;;;AAAA;;;AAAA;;;AASC;;AAAA;;AAAA;AAAa;;AAAb;AAAwD;;AAAA;;AAAA;AAAxD;AADH;AADJ;;AAKR;;;;AAEwB;AAAqD;;;;AAArD;;;;AAAyC;;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAhB;AAAA;;AACkB;;;;;;;;;AAAX;AAAP;AAEgB;AAAyC;;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAoB;;;;AAA7D;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;;AAAA;AAAP;AAEgB;AAAkE;;;;AAAlE;;;;AAAyC;;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;;AAAA;AAAP;;AAER;;;;AAEwB;AAAwC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAa;;;;AAArD;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAhB;AAAA;;AACkB;;;;;;;;;AAAX;AAAP;AAEgB;AAAwC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAoB;;;;AAA5D;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;;AAAA;AAAP;AAEgB;AACc;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAgC;;;;AAD9C;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAGT;;AAAA;AAAP;;AAER;;;;AAEwB;AAAmD;;;;AAAnD;;;;AAAyC;;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAhB;AAAA;;AACkB;AAAX;AAAP;AAEgB;AAAyC;AAAA;AAAkB;;;;AAA3D;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;AAEgB;AAAgE;;;;AAAhE;;;;AAAyC;;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;;AAER;;;;AAEwB;AAAoD;;;;AAApD;;;;AAA0C;;;;AAA1C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAhB;AAAA;;AACkB;;AAAX;AAAP;AAEgB;AAA0C;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAmB;;;;AAA7D;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;AAEgB;AAAkE;;;;AAAlE;;;;AAA0C;;;;AAA1C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;;AAER;;;;AAGuB;AAKX;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAGO;;;;AARI;;;;AAIX;;;;;;AAEA;;;;AACA;;;;AAPW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAf;AAAA;;AAUc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAd;;AAAA;AAAA;;AAAA;;AAAA;;AACO;;;AAAY;;AAAZ;AAAP;AACO;;;AAAY;;AAAZ;AAAP;AACO;AAAY;AAAZ;AAAP;AACoB;;AAAb;AAAP;AAGe;AAIX;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;AAAA;AACA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAHA;;AAAA;AACA;;AAAA;;AAEA;;AACO;;;;AARI;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAUR;;AAAA;AAAP;AAGe;AAKX;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAGO;;;;AARI;;;;AAIX;;;;;;AAEA;;;;AACA;;;;AAPW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAUR;;AAAA;AAAP;AAGqB;AAGjB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAGO;;;;AANU;;;;AAEjB;;;;;;AAEA;;;;AACA;;;;AALiB;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAArB;;AAAA;;AAAA;AAAA;;AAAA;;AAQO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAP;AACO;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;;AAER;;;;;;;AAGsB;AAGV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAGO;;;;AANG;;;;AAEV;;;;;;AAEA;;;;AACA;;;;AALU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAd;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAQA;;AAAA;;AAAA;;AAAA;;AACY;;AAAL;AAAP;AACY;;AAAL;AAAP;AACY;AAAL;AAAP;AACa;;AAAN;AAAP;AAGgB;AAEZ;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;AAAA;AACA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAHA;;AAAA;AACA;;AAAA;;AAEA;;AACO;;;;AANK;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAhB;;AAAA;AAAA;;AAAA;;AAAA;;AAQO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAGgB;AAGZ;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAGO;;;;AANK;;;;AAEZ;;;;;;AAEA;;;;AACA;;;;AALY;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAhB;;AAAA;AAAA;;AAAA;;AAAA;;AAQO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAGqB;AAGjB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAGO;;;;AANU;;;;AAEjB;;;;;;AAEA;;;;AACA;;;;AALiB;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAArB;;AAAA;AAAA;;AAAA;;AAAA;;AAQO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;;AAER;;;AAGsB;AAEY;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAApB;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAM;;AAAN;AAAc;AAAA;;AAAA;AAAG;;AAAH;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAhB;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACO;;;;AAHG;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAd;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAKA;;AAAA;;AAAA;;AAAA;;AAAA;;AACa;;AAAN;AAAP;AACa;;AAAN;AAAP;AACgB;AAAT;AAAP;AACgB;;AAAT;AAAP;AACgB;;AAAT;AAAP;AAGc;AAER;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAmC;AAAA;AAA2B;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAA3B;AAAA;AAAA;AAAW;;AAAX;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAArC;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AACO;;;;AAHG;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAd;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAKA;;AAAA;;AAAA;;AAAA;;AAAA;;AACa;;AAAN;AAAP;AACa;;AAAN;AAAP;AACgB;AAAT;AAAP;AACgB;;AAAT;AAAP;AACgB;;AAAT;AAAP;AAGc;AAIF;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAY;;AAAZ;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAY;;AAAZ;AAAgC;;;;;;;AAAhC;AAC8C;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAA9C;AAAY;;AAAZ;AAA6B;;;;;;;;;;AAA7B;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAHR;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMO;;;;AARG;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAd;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAUA;;AAAA;;AAAA;;AAAA;;AAAA;;AACa;;;;;;;;;;;AAAN;AAAP;AACa;;;;;;;;;;;;;AAAN;AAAP;AACgB;;AAAT;AAAP;AACgB;;;;;;;;;;AAAT;AAAP;AACgB;;;;;;;;;;AAAT;AAAP;;AAER;;;AAEuB;AAAqC;;;;AAArC;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACE;;AAAV;AAAP;AACoB;AAAqD;;;;AAArD;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;AAAf;AAAP;AAEA;AAAqC;;;;AAArC;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;AAA5C;AAAP;;AAER;;;AAEuB;AAEV;AAAA;AAAW;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACiB;AAAjB;AAAoC;;AAApC;AAAA;AAAA;;;AAAoC;;AAApC;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACO;;;;AAJI;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAMf;AACe;AAEV;AAAA;AAAW;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACiB;AAAjB;AAAoC;;AAApC;AAAA;AAAA;;;AAAoC;;AAApC;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACO;;;;AAJI;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAMR;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 6 2 1"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x 0x6231 0x9bf81913 0x0000000000000001 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x16e03919 0x00027331 0x62 0x02 \"s1\" \"log 1\" 0xb4b4334e 0x0000000000000002 \"echo: s1\" 0x33 0x34 0x0000000000000003 0x4a444c77 0x2659e818 0xa9fb6cf1 0xd8cc363b 0x03 0xab271ce4 0xb862ee19 0x000b6563686f3a207475706c65 0x000000000000000b 0x000173 0x6563686f3a206231 0x00027332 0x00086563686f3a207332 0x6563686f3a2033 0x0003733162 0x3362 0x000000000000002a 0xddd07185 \"log 2\""
    },
    "277": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "279": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "280": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "281": {
      "op": "bz main_bare_routing@21",
      "stack_out": []
    },
    "284": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "287": {
      "op": "pushbytes 0x07916bea // method \"test_is_a_b(byte[],byte[],application)void\"",
      "defined_out": [
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)"
      ]
    },
    "293": {
      "op": "pushbytes 0x1859b0ba // method \"test_method_selector_kinds(application)void\"",
      "defined_out": [
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)"
      ]
    },
    "299": {
      "op": "pushbytes 0x4eb11b0d // method \"test_method_overload(application)void\"",
      "defined_out": [
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)"
      ]
    },
    "305": {
      "op": "pushbytes 0x0d176a4a // method \"test_arg_conversion(application)void\"",
      "defined_out": [
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)"
      ]
    },
    "311": {
      "op": "pushbytes 0xb54730c8 // method \"test_15plus_args(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)"
      ]
    },
    "317": {
      "op": "pushbytes 0x7859eaf7 // method \"test_void(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)"
      ]
    },
    "323": {
      "op": "pushbytes 0x24478a3c // method \"test_ref_types(application,asset)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)"
      ]
    },
    "329": {
      "op": "pushbytes 0x7a60c035 // method \"test_native_string(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_native_string(application)void)"
      ]
    },
    "335": {
      "op": "pushbytes 0x6a559cb3 // method \"test_native_bytes(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)"
      ]
    },
    "341": {
      "op": "pushbytes 0x1be60712 // method \"test_native_uint64(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_uint64(application)void)"
      ]
    },
    "347": {
      "op": "pushbytes 0x19cb78a4 // method \"test_native_biguint(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_native_biguint(application)void)"
      ]
    },
    "353": {
      "op": "pushbytes 0xf0ef6873 // method \"test_native_tuple(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_tuple(application)void)"
      ]
    },
    "359": {
      "op": "pushbytes 0x3d2bfe37 // method \"test_native_tuple_method_ref(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)"
      ]
    },
    "365": {
      "op": "pushbytes 0x54e98f56 // method \"test_nested_tuples(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_nested_tuples(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_nested_tuples(application)void)"
      ]
    },
    "371": {
      "op": "pushbytes 0xf55b7567 // method \"test_no_args(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_nested_tuples(application)void)",
        "Method(test_no_args(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_nested_tuples(application)void)",
        "Method(test_no_args(application)void)"
      ]
    },
    "377": {
      "op": "pushbytes 0x8598bb43 // method \"test_named_tuples(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_named_tuples(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_nested_tuples(application)void)",
        "Method(test_no_args(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_nested_tuples(application)void)",
        "Method(test_no_args(application)void)",
        "Method(test_named_tuples(application)void)"
      ]
    },
    "383": {
      "op": "uncover 16",
      "stack_out": [
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_nested_tuples(application)void)",
        "Method(test_no_args(application)void)",
        "Method(test_named_tuples(application)void)",
        "tmp%2#0"
      ]
    },
    "385": {
      "op": "match main_test_is_a_b_route@3 main_test_method_selector_kinds_route@4 main_test_method_overload_route@5 main_test_arg_conversion_route@6 main_test_15plus_args_route@7 main_test_void_route@8 main_test_ref_types_route@9 main_test_native_string_route@10 main_test_native_bytes_route@11 main_test_native_uint64_route@12 main_test_native_biguint_route@13 main_test_native_tuple_route@14 main_test_native_tuple_method_ref_route@15 main_test_nested_tuples_route@16 main_test_no_args_route@17 main_test_named_tuples_route@18",
      "stack_out": []
    },
    "419": {
      "block": "main_after_if_else@25",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "420": {
      "block": "main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "421": {
      "block": "main_test_named_tuples_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "423": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0",
        "NoOp"
      ]
    },
    "424": {
      "op": "==",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "425": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "426": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "428": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0",
        "0"
      ]
    },
    "429": {
      "op": "!=",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "430": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "431": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%16#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%16#0"
      ]
    },
    "434": {
      "op": "btoi",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "435": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "437": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples",
      "op": "callsub test_named_tuples",
      "stack_out": []
    },
    "440": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "441": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26"
    },
    "444": {
      "block": "main_test_no_args_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "446": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0",
        "NoOp"
      ]
    },
    "447": {
      "op": "==",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "448": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "449": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "451": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0",
        "0"
      ]
    },
    "452": {
      "op": "!=",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "453": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "454": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%15#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%15#0"
      ]
    },
    "457": {
      "op": "btoi",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "458": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "460": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args",
      "op": "callsub test_no_args",
      "stack_out": []
    },
    "463": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "464": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26"
    },
    "467": {
      "block": "main_test_nested_tuples_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "469": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0",
        "NoOp"
      ]
    },
    "470": {
      "op": "==",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "471": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "472": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "474": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0",
        "0"
      ]
    },
    "475": {
      "op": "!=",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "476": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "477": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%14#0"
      ]
    },
    "480": {
      "op": "btoi",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "481": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "483": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples",
      "op": "callsub test_nested_tuples",
      "stack_out": []
    },
    "486": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "487": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26"
    },
    "490": {
      "block": "main_test_native_tuple_method_ref_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "492": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "NoOp"
      ]
    },
    "493": {
      "op": "==",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "494": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "495": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "497": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0",
        "0"
      ]
    },
    "498": {
      "op": "!=",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "499": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "500": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%13#0"
      ]
    },
    "503": {
      "op": "btoi",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "504": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "506": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref",
      "op": "callsub test_native_tuple_method_ref",
      "stack_out": []
    },
    "509": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "510": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26"
    },
    "513": {
      "block": "main_test_native_tuple_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "515": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "NoOp"
      ]
    },
    "516": {
      "op": "==",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "517": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "518": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "520": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0",
        "0"
      ]
    },
    "521": {
      "op": "!=",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "522": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "523": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%12#0"
      ]
    },
    "526": {
      "op": "btoi",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "527": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "529": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple",
      "op": "callsub test_native_tuple",
      "stack_out": []
    },
    "532": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "533": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26"
    },
    "536": {
      "block": "main_test_native_biguint_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "538": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "NoOp"
      ]
    },
    "539": {
      "op": "==",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "540": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "541": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "543": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0",
        "0"
      ]
    },
    "544": {
      "op": "!=",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "545": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "546": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%11#0"
      ]
    },
    "549": {
      "op": "btoi",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "550": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "552": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint",
      "op": "callsub test_native_biguint",
      "stack_out": []
    },
    "555": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "556": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26"
    },
    "559": {
      "block": "main_test_native_uint64_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "561": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "NoOp"
      ]
    },
    "562": {
      "op": "==",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "563": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "564": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "566": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "0"
      ]
    },
    "567": {
      "op": "!=",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "568": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "569": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%10#0"
      ]
    },
    "572": {
      "op": "btoi",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "573": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "575": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64",
      "op": "callsub test_native_uint64",
      "stack_out": []
    },
    "578": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "579": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26"
    },
    "582": {
      "block": "main_test_native_bytes_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "584": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "NoOp"
      ]
    },
    "585": {
      "op": "==",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "586": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "587": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "589": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "0"
      ]
    },
    "590": {
      "op": "!=",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "591": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "592": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%9#0"
      ]
    },
    "595": {
      "op": "btoi",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "596": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "598": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes",
      "op": "callsub test_native_bytes",
      "stack_out": []
    },
    "601": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "602": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26"
    },
    "605": {
      "block": "main_test_native_string_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "607": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "NoOp"
      ]
    },
    "608": {
      "op": "==",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "609": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "610": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "612": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "0"
      ]
    },
    "613": {
      "op": "!=",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "614": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "615": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%8#0"
      ]
    },
    "618": {
      "op": "btoi",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "619": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "621": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string",
      "op": "callsub test_native_string",
      "stack_out": []
    },
    "624": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "625": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26"
    },
    "628": {
      "block": "main_test_ref_types_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "630": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "NoOp"
      ]
    },
    "631": {
      "op": "==",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "632": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "633": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "635": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "0"
      ]
    },
    "636": {
      "op": "!=",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "637": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "638": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "641": {
      "op": "btoi",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "642": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "644": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%7#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "reinterpret_bytes[1]%7#0"
      ]
    },
    "647": {
      "op": "btoi",
      "defined_out": [
        "tmp%48#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "tmp%49#0"
      ]
    },
    "648": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%48#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "tmp%50#0"
      ]
    },
    "650": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types",
      "op": "callsub test_ref_types",
      "stack_out": []
    },
    "653": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "654": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26"
    },
    "657": {
      "block": "main_test_void_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "659": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "NoOp"
      ]
    },
    "660": {
      "op": "==",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "661": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "662": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "664": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "0"
      ]
    },
    "665": {
      "op": "!=",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "666": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "667": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "670": {
      "op": "btoi",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "671": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "673": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void",
      "op": "callsub test_void",
      "stack_out": []
    },
    "676": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "677": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26"
    },
    "680": {
      "block": "main_test_15plus_args_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "682": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "NoOp"
      ]
    },
    "683": {
      "op": "==",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "684": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "685": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "687": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "0"
      ]
    },
    "688": {
      "op": "!=",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "689": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "690": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "693": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "694": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "696": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args",
      "op": "callsub test_15plus_args",
      "stack_out": []
    },
    "699": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "700": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26"
    },
    "703": {
      "block": "main_test_arg_conversion_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "705": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "NoOp"
      ]
    },
    "706": {
      "op": "==",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "707": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "708": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "710": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "0"
      ]
    },
    "711": {
      "op": "!=",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "712": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "713": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "716": {
      "op": "btoi",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "717": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "719": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion",
      "op": "callsub test_arg_conversion",
      "stack_out": []
    },
    "722": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "723": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26"
    },
    "726": {
      "block": "main_test_method_overload_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "728": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "NoOp"
      ]
    },
    "729": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "730": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "731": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "733": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0"
      ]
    },
    "734": {
      "op": "!=",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "735": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "736": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "739": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "740": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "742": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload",
      "op": "callsub test_method_overload",
      "stack_out": []
    },
    "745": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "746": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26"
    },
    "749": {
      "block": "main_test_method_selector_kinds_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "751": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "NoOp"
      ]
    },
    "752": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "753": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "754": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "756": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0"
      ]
    },
    "757": {
      "op": "!=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "758": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "759": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "762": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "763": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "765": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds",
      "op": "callsub test_method_selector_kinds",
      "stack_out": []
    },
    "768": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "769": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26"
    },
    "772": {
      "block": "main_test_is_a_b_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "774": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "775": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "776": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "777": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "779": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "780": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "781": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "782": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "785": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "788": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "791": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "794": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "797": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "798": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "800": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%8#0"
      ]
    },
    "802": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%12#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "804": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "806": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b",
      "op": "callsub test_is_a_b",
      "stack_out": []
    },
    "809": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "810": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26"
    },
    "813": {
      "block": "main_bare_routing@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "815": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "0"
      ]
    },
    "816": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%105#0"
      ]
    },
    "817": {
      "op": "match main___algopy_default_create@22",
      "stack_out": []
    },
    "821": {
      "block": "main_switch_case_next@24",
      "stack_in": [],
      "op": "b main_after_if_else@25"
    },
    "824": {
      "block": "main___algopy_default_create@22",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "826": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0",
        "0"
      ]
    },
    "827": {
      "op": "==",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "828": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "829": {
      "block": "main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__algopy_default_create@28",
      "stack_in": [],
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "830": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26"
    },
    "833": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_is_a_b",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "836": {
      "op": "itxn_begin"
    },
    "837": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "839": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "840": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "841": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "844": {
      "op": "frame_dig -3",
      "stack_out": [
        "length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "846": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "847": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "b#0 (copy)"
      ]
    },
    "849": {
      "op": "len",
      "defined_out": [
        "encoded_value%0#0",
        "length%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "850": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "851": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%0#0",
        "length_uint16%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "854": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_value%0#0",
        "length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "856": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "857": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "858": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "860": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "862": {
      "op": "pushbytes 0xc77212bc // method \"is_a_b(byte[],byte[])void\"",
      "defined_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(is_a_b(byte[],byte[])void)"
      ]
    },
    "868": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "870": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "872": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "874": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "875": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "877": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "878": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "880": {
      "block": "test_is_a_b_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "881": {
      "retsub": true,
      "op": "retsub"
    },
    "882": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_method_selector_kinds",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "885": {
      "op": "bytec_3 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "886": {
      "op": "dup",
      "stack_out": [
        "Method(echo(string)string)",
        "Method(echo(string)string)"
      ]
    },
    "887": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "888": {
      "op": "assert",
      "stack_out": []
    },
    "889": {
      "op": "itxn_begin"
    },
    "890": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "892": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "894": {
      "op": "bytec_3 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "895": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "897": {
      "op": "pushbytes 0x00057465737431",
      "defined_out": [
        "0x00057465737431"
      ],
      "stack_out": [
        "0x00057465737431"
      ]
    },
    "906": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "908": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "909": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "911": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "912": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "914": {
      "block": "test_method_selector_kinds_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "915": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "917": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "918": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "921": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "awst_tmp%0#0"
      ]
    },
    "922": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "925": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "926": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "927": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "928": {
      "op": "pushbytes 0x000b6563686f3a207465737431",
      "defined_out": [
        "0x000b6563686f3a207465737431",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737431"
      ]
    },
    "943": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "944": {
      "op": "assert",
      "stack_out": []
    },
    "945": {
      "op": "itxn_begin"
    },
    "946": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "948": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "950": {
      "op": "bytec_3 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "951": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "953": {
      "op": "pushbytes 0x00057465737432",
      "defined_out": [
        "0x00057465737432"
      ],
      "stack_out": [
        "0x00057465737432"
      ]
    },
    "962": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "964": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "965": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "967": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "968": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "970": {
      "block": "test_method_selector_kinds_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "971": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "973": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "974": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%5#0"
      ]
    },
    "977": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "awst_tmp%1#0"
      ]
    },
    "978": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "981": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "982": {
      "op": "==",
      "defined_out": [
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "983": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "984": {
      "op": "pushbytes 0x000b6563686f3a207465737432",
      "defined_out": [
        "0x000b6563686f3a207465737432",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737432"
      ]
    },
    "999": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1000": {
      "op": "assert",
      "stack_out": []
    },
    "1001": {
      "op": "itxn_begin"
    },
    "1002": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "1004": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1006": {
      "op": "bytec_3 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1007": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1009": {
      "op": "pushbytes 0x00057465737433",
      "defined_out": [
        "0x00057465737433"
      ],
      "stack_out": [
        "0x00057465737433"
      ]
    },
    "1018": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1020": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1021": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1023": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1024": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1026": {
      "block": "test_method_selector_kinds_next_txn@3",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1027": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "1029": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "1030": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%9#0"
      ]
    },
    "1033": {
      "op": "swap",
      "stack_out": [
        "tmp%9#0",
        "awst_tmp%2#0"
      ]
    },
    "1034": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1037": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "1038": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "1039": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1040": {
      "op": "pushbytes 0x000b6563686f3a207465737433",
      "defined_out": [
        "0x000b6563686f3a207465737433",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737433"
      ]
    },
    "1055": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1056": {
      "op": "assert",
      "stack_out": []
    },
    "1057": {
      "op": "itxn_begin"
    },
    "1058": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ]
    },
    "1060": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1062": {
      "op": "bytec_3 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1063": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1065": {
      "op": "pushbytes 0x00057465737434",
      "defined_out": [
        "0x00057465737434"
      ],
      "stack_out": [
        "0x00057465737434"
      ]
    },
    "1074": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1076": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1077": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1079": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1080": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1082": {
      "block": "test_method_selector_kinds_next_txn@4",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1083": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%3#0"
      ]
    },
    "1085": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "1086": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%13#0"
      ]
    },
    "1089": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "awst_tmp%3#0"
      ]
    },
    "1090": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "1093": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "1094": {
      "op": "==",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "1095": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1096": {
      "op": "pushbytes 0x000b6563686f3a207465737434",
      "defined_out": [
        "0x000b6563686f3a207465737434",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737434"
      ]
    },
    "1111": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1112": {
      "op": "assert",
      "stack_out": []
    },
    "1113": {
      "op": "itxn_begin"
    },
    "1114": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%4%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%4%%param_ApplicationID_idx_0#0"
      ]
    },
    "1116": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1118": {
      "op": "bytec_3 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1119": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1121": {
      "op": "pushbytes 0x00057465737435",
      "defined_out": [
        "0x00057465737435"
      ],
      "stack_out": [
        "0x00057465737435"
      ]
    },
    "1130": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1132": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1133": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1135": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1136": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1138": {
      "block": "test_method_selector_kinds_next_txn@5",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1139": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%4#0"
      ]
    },
    "1141": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ]
    },
    "1142": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%4#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "tmp%17#0"
      ]
    },
    "1145": {
      "op": "swap",
      "stack_out": [
        "tmp%17#0",
        "awst_tmp%4#0"
      ]
    },
    "1146": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "1149": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "1150": {
      "op": "==",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "1151": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1152": {
      "op": "pushbytes 0x000b6563686f3a207465737435",
      "defined_out": [
        "0x000b6563686f3a207465737435",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737435"
      ]
    },
    "1167": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1168": {
      "op": "assert",
      "stack_out": []
    },
    "1169": {
      "retsub": true,
      "op": "retsub"
    },
    "1170": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_method_overload",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1173": {
      "op": "itxn_begin"
    },
    "1174": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "1176": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1178": {
      "op": "bytec_3 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1179": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1181": {
      "op": "pushbytes 0x000e7479706564202b2069676e6f7265",
      "defined_out": [
        "0x000e7479706564202b2069676e6f7265"
      ],
      "stack_out": [
        "0x000e7479706564202b2069676e6f7265"
      ]
    },
    "1199": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1201": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1202": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1204": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1205": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1207": {
      "block": "test_method_overload_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1208": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1210": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1213": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "1214": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1215": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": []
    },
    "1216": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "1218": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "1219": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%3#0"
      ]
    },
    "1222": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "awst_tmp%1#0"
      ]
    },
    "1223": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1226": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "0x151f7c75"
      ]
    },
    "1227": {
      "op": "==",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1228": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1229": {
      "op": "pushbytes 0x00146563686f3a207479706564202b2069676e6f7265",
      "defined_out": [
        "0x00146563686f3a207479706564202b2069676e6f7265",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x00146563686f3a207479706564202b2069676e6f7265"
      ]
    },
    "1253": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1254": {
      "op": "assert",
      "stack_out": []
    },
    "1255": {
      "op": "itxn_begin"
    },
    "1256": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "1258": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1260": {
      "op": "bytec_3 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1261": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1263": {
      "op": "pushbytes 0x0010756e7479706564202b2069676e6f7265",
      "defined_out": [
        "0x0010756e7479706564202b2069676e6f7265"
      ],
      "stack_out": [
        "0x0010756e7479706564202b2069676e6f7265"
      ]
    },
    "1283": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1285": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1286": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1288": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1289": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1291": {
      "block": "test_method_overload_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1292": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "1294": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "1295": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%7#0"
      ]
    },
    "1298": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "awst_tmp%2#0"
      ]
    },
    "1299": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1302": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "1303": {
      "op": "==",
      "defined_out": [
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "1304": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1305": {
      "op": "pushbytes 0x00166563686f3a20756e7479706564202b2069676e6f7265",
      "defined_out": [
        "0x00166563686f3a20756e7479706564202b2069676e6f7265",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x00166563686f3a20756e7479706564202b2069676e6f7265"
      ]
    },
    "1331": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1332": {
      "op": "assert",
      "stack_out": []
    },
    "1333": {
      "op": "itxn_begin"
    },
    "1334": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "1336": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1338": {
      "op": "bytec_3 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1339": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1341": {
      "op": "pushbytes 0x00057475706c65",
      "defined_out": [
        "0x00057475706c65"
      ],
      "stack_out": [
        "0x00057475706c65"
      ]
    },
    "1350": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1352": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1353": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1355": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1356": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1358": {
      "block": "test_method_overload_next_txn@3",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1359": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%3#0"
      ]
    },
    "1361": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "1362": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%11#0"
      ]
    },
    "1365": {
      "op": "swap",
      "stack_out": [
        "tmp%11#0",
        "awst_tmp%3#0"
      ]
    },
    "1366": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "1369": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0",
        "0x151f7c75"
      ]
    },
    "1370": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "1371": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "defined_out": [
        "result.0#0"
      ],
      "stack_out": [
        "result.0#0"
      ]
    },
    "1372": {
      "op": "itxn LastLog",
      "defined_out": [
        "result.0#0",
        "result.1.LastLog#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1.LastLog#0"
      ]
    },
    "1374": {
      "op": "swap",
      "stack_out": [
        "result.1.LastLog#0",
        "result.0#0"
      ]
    },
    "1375": {
      "op": "bytec 25 // 0x000b6563686f3a207475706c65",
      "defined_out": [
        "0x000b6563686f3a207475706c65",
        "result.0#0",
        "result.1.LastLog#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "result.0#0",
        "0x000b6563686f3a207475706c65"
      ]
    },
    "1377": {
      "op": "==",
      "defined_out": [
        "result.1.LastLog#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%14#0"
      ]
    },
    "1378": {
      "op": "assert",
      "stack_out": [
        "result.1.LastLog#0"
      ]
    },
    "1379": {
      "op": "dup",
      "defined_out": [
        "result.1.LastLog#0",
        "result.1.LastLog#0 (copy)"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "result.1.LastLog#0 (copy)"
      ]
    },
    "1380": {
      "op": "extract 4 0",
      "defined_out": [
        "result.1.LastLog#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%15#0"
      ]
    },
    "1383": {
      "op": "swap",
      "stack_out": [
        "tmp%15#0",
        "result.1.LastLog#0"
      ]
    },
    "1384": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1387": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "0x151f7c75"
      ]
    },
    "1388": {
      "op": "==",
      "defined_out": [
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "1389": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1390": {
      "op": "bytec 25 // 0x000b6563686f3a207475706c65",
      "stack_out": [
        "tmp%15#0",
        "0x000b6563686f3a207475706c65"
      ]
    },
    "1392": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1393": {
      "op": "assert",
      "stack_out": []
    },
    "1394": {
      "op": "itxn_begin"
    },
    "1395": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ]
    },
    "1397": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1399": {
      "op": "bytec_3 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1400": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1402": {
      "op": "pushbytes 0x0007756e7479706564",
      "defined_out": [
        "0x0007756e7479706564"
      ],
      "stack_out": [
        "0x0007756e7479706564"
      ]
    },
    "1413": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1415": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1416": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1418": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1419": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1421": {
      "block": "test_method_overload_next_txn@4",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1422": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0"
      ]
    },
    "1424": {
      "op": "dup",
      "defined_out": [
        "txn_result.LastLog#0",
        "txn_result.LastLog#0 (copy)"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "txn_result.LastLog#0 (copy)"
      ]
    },
    "1425": {
      "op": "extract 4 0",
      "defined_out": [
        "tmp%19#0",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%19#0"
      ]
    },
    "1428": {
      "op": "swap",
      "stack_out": [
        "tmp%19#0",
        "txn_result.LastLog#0"
      ]
    },
    "1429": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "1432": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0",
        "0x151f7c75"
      ]
    },
    "1433": {
      "op": "==",
      "defined_out": [
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "1434": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1435": {
      "op": "pushbytes 0x000d6563686f3a20756e7479706564",
      "defined_out": [
        "0x000d6563686f3a20756e7479706564",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0x000d6563686f3a20756e7479706564"
      ]
    },
    "1452": {
      "op": "==",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1453": {
      "op": "assert",
      "stack_out": []
    },
    "1454": {
      "retsub": true,
      "op": "retsub"
    },
    "1455": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_arg_conversion",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1458": {
      "op": "itxn_begin"
    },
    "1459": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "1461": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1463": {
      "op": "bytec 12 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)"
      ],
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1465": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1467": {
      "op": "pushbytes 0x000a636f6e76657274656431",
      "defined_out": [
        "0x000a636f6e76657274656431"
      ],
      "stack_out": [
        "0x000a636f6e76657274656431"
      ]
    },
    "1481": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1483": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1484": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1486": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1487": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1489": {
      "block": "test_arg_conversion_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1490": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1492": {
      "op": "pushbytes 0x636f6e76657274656431",
      "defined_out": [
        "0x636f6e76657274656431",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x636f6e76657274656431"
      ]
    },
    "1504": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1505": {
      "op": "assert",
      "stack_out": []
    },
    "1506": {
      "op": "itxn_begin"
    },
    "1507": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "1509": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1511": {
      "op": "pushbytes 0x3c1058d9 // method \"log(uint64)void\"",
      "defined_out": [
        "Method(log(uint64)void)"
      ],
      "stack_out": [
        "Method(log(uint64)void)"
      ]
    },
    "1517": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1519": {
      "op": "bytec 13 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002"
      ],
      "stack_out": [
        "0x0000000000000002"
      ]
    },
    "1521": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1523": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1524": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1526": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1527": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1529": {
      "block": "test_arg_conversion_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1530": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1532": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "2"
      ]
    },
    "1533": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%1#0"
      ]
    },
    "1534": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1535": {
      "op": "assert",
      "stack_out": []
    },
    "1536": {
      "op": "itxn_begin"
    },
    "1537": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "1539": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1541": {
      "op": "pushbytes 0x6af45930 // method \"log(uint512)void\"",
      "defined_out": [
        "Method(log(uint512)void)"
      ],
      "stack_out": [
        "Method(log(uint512)void)"
      ]
    },
    "1547": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1549": {
      "op": "pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"
      ]
    },
    "1615": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1617": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1618": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1620": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1621": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1623": {
      "block": "test_arg_conversion_next_txn@3",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1624": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1626": {
      "op": "pushint 56 // 56",
      "defined_out": [
        "56",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "56"
      ]
    },
    "1628": {
      "op": "bzero",
      "defined_out": [
        "tmp%3#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%3#0"
      ]
    },
    "1629": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%3#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%3#0",
        "3"
      ]
    },
    "1631": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1632": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%5#0"
      ]
    },
    "1633": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1634": {
      "op": "assert",
      "stack_out": []
    },
    "1635": {
      "op": "itxn_begin"
    },
    "1636": {
      "op": "bytec 16 // 0x34",
      "defined_out": [
        "0x34"
      ],
      "stack_out": [
        "0x34"
      ]
    },
    "1638": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "1639": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "1640": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "1643": {
      "op": "bytec 16 // 0x34",
      "stack_out": [
        "length_uint16%0#0",
        "0x34"
      ]
    },
    "1645": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1646": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ]
    },
    "1648": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1650": {
      "op": "pushbytes 0xb500e111 // method \"log(byte[])void\"",
      "defined_out": [
        "Method(log(byte[])void)",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "Method(log(byte[])void)"
      ]
    },
    "1656": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1658": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1660": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1661": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1663": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1664": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1666": {
      "block": "test_arg_conversion_next_txn@4",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1667": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1669": {
      "op": "bytec 16 // 0x34",
      "defined_out": [
        "0x34",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x34"
      ]
    },
    "1671": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1672": {
      "op": "assert",
      "stack_out": []
    },
    "1673": {
      "op": "itxn_begin"
    },
    "1674": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%4%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%4%%param_ApplicationID_idx_0#0"
      ]
    },
    "1676": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1678": {
      "op": "pushbytes 0x6eed7ec3 // method \"log(bool)void\"",
      "defined_out": [
        "Method(log(bool)void)"
      ],
      "stack_out": [
        "Method(log(bool)void)"
      ]
    },
    "1684": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1686": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "1689": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1691": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1692": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1694": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1695": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1697": {
      "block": "test_arg_conversion_next_txn@5",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1698": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1700": {
      "op": "pushbytes 0x54727565",
      "defined_out": [
        "0x54727565",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x54727565"
      ]
    },
    "1706": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1707": {
      "op": "assert",
      "stack_out": []
    },
    "1708": {
      "retsub": true,
      "op": "retsub"
    },
    "1709": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_15plus_args",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1712": {
      "op": "itxn_begin"
    },
    "1713": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "1714": {
      "op": "pushbytes 0xde",
      "defined_out": [
        "0x",
        "0xde"
      ],
      "stack_out": [
        "0x",
        "0xde"
      ]
    },
    "1717": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%1#0"
      ]
    },
    "1718": {
      "op": "pushbytes 0xad",
      "defined_out": [
        "0xad",
        "encoded_tuple_buffer%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%1#0",
        "0xad"
      ]
    },
    "1721": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1722": {
      "op": "pushbytes 0xbe",
      "defined_out": [
        "0xbe",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0xbe"
      ]
    },
    "1725": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1726": {
      "op": "pushbytes 0xef",
      "defined_out": [
        "0xef",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "0xef"
      ]
    },
    "1729": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1730": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "0x"
      ]
    },
    "1731": {
      "op": "pushbytes 0x0f",
      "defined_out": [
        "0x",
        "0x0f",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "0x",
        "0x0f"
      ]
    },
    "1734": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1735": {
      "op": "pushbytes 0x10",
      "defined_out": [
        "0x10",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%6#0",
        "0x10"
      ]
    },
    "1738": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1739": {
      "op": "pushbytes 0x11",
      "defined_out": [
        "0x11",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0",
        "0x11"
      ]
    },
    "1742": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1743": {
      "op": "pushbytes 0x12",
      "defined_out": [
        "0x12",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%8#0",
        "0x12"
      ]
    },
    "1746": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1747": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1748": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1749": {
      "op": "pushbytes 0x14",
      "defined_out": [
        "0x14",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "0x14"
      ]
    },
    "1752": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1753": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "1755": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1757": {
      "op": "pushbytes 0xba0b4381 // method \"return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]\"",
      "defined_out": [
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])"
      ]
    },
    "1763": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1765": {
      "op": "bytec 4 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000001"
      ]
    },
    "1767": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1769": {
      "op": "bytec 13 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000002"
      ]
    },
    "1771": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1773": {
      "op": "bytec 17 // 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000003"
      ]
    },
    "1775": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1777": {
      "op": "pushbytes 0x0000000000000004",
      "defined_out": [
        "0x0000000000000004",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000004"
      ]
    },
    "1787": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1789": {
      "op": "pushbytes 0x0000000000000005",
      "defined_out": [
        "0x0000000000000005",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000005"
      ]
    },
    "1799": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1801": {
      "op": "pushbytes 0x0000000000000006",
      "defined_out": [
        "0x0000000000000006",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000006"
      ]
    },
    "1811": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1813": {
      "op": "pushbytes 0x0000000000000007",
      "defined_out": [
        "0x0000000000000007",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000007"
      ]
    },
    "1823": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1825": {
      "op": "pushbytes 0x0000000000000008",
      "defined_out": [
        "0x0000000000000008",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000008"
      ]
    },
    "1835": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1837": {
      "op": "pushbytes 0x0000000000000009",
      "defined_out": [
        "0x0000000000000009",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000009"
      ]
    },
    "1847": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1849": {
      "op": "pushbytes 0x000000000000000a",
      "defined_out": [
        "0x000000000000000a",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x000000000000000a"
      ]
    },
    "1859": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1861": {
      "op": "bytec 26 // 0x000000000000000b",
      "defined_out": [
        "0x000000000000000b",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x000000000000000b"
      ]
    },
    "1863": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1865": {
      "op": "pushbytes 0x000000000000000c",
      "defined_out": [
        "0x000000000000000c",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x000000000000000c"
      ]
    },
    "1875": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1877": {
      "op": "pushbytes 0x000000000000000d",
      "defined_out": [
        "0x000000000000000d",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x000000000000000d"
      ]
    },
    "1887": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1889": {
      "op": "pushbytes 0x000000000000000e",
      "defined_out": [
        "0x000000000000000e",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x000000000000000e"
      ]
    },
    "1899": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1901": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1903": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1904": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1906": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1907": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1909": {
      "block": "test_15plus_args_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1910": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1912": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "1913": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1916": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1917": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1920": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "1921": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1922": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1923": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1926": {
      "op": "pushbytes 0x0f101112deadbeef14",
      "defined_out": [
        "0x0f101112deadbeef14",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x0f101112deadbeef14"
      ]
    },
    "1937": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1938": {
      "op": "assert",
      "stack_out": []
    },
    "1939": {
      "retsub": true,
      "op": "retsub"
    },
    "1940": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_void",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1943": {
      "op": "itxn_begin"
    },
    "1944": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "1946": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1948": {
      "op": "bytec 12 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)"
      ],
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1950": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1952": {
      "op": "pushbytes 0x0006576f726c6431",
      "defined_out": [
        "0x0006576f726c6431"
      ],
      "stack_out": [
        "0x0006576f726c6431"
      ]
    },
    "1962": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1964": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1965": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1967": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1968": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1970": {
      "block": "test_void_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1971": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1973": {
      "op": "pushbytes 0x576f726c6431",
      "defined_out": [
        "0x576f726c6431",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6431"
      ]
    },
    "1981": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1982": {
      "op": "assert",
      "stack_out": []
    },
    "1983": {
      "op": "itxn_begin"
    },
    "1984": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "1986": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1988": {
      "op": "bytec 12 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)"
      ],
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1990": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1992": {
      "op": "pushbytes 0x0006576f726c6432",
      "defined_out": [
        "0x0006576f726c6432"
      ],
      "stack_out": [
        "0x0006576f726c6432"
      ]
    },
    "2002": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2004": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2005": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2007": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2008": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2010": {
      "block": "test_void_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2011": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2013": {
      "op": "pushbytes 0x576f726c6432",
      "defined_out": [
        "0x576f726c6432",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6432"
      ]
    },
    "2021": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2022": {
      "op": "assert",
      "stack_out": []
    },
    "2023": {
      "op": "itxn_begin"
    },
    "2024": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "2026": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2028": {
      "op": "bytec 12 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)"
      ],
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "2030": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2032": {
      "op": "pushbytes 0x0006576f726c6433",
      "defined_out": [
        "0x0006576f726c6433"
      ],
      "stack_out": [
        "0x0006576f726c6433"
      ]
    },
    "2042": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2044": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2045": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2047": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2048": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2050": {
      "block": "test_void_next_txn@3",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2051": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2053": {
      "op": "pushbytes 0x576f726c6433",
      "defined_out": [
        "0x576f726c6433",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6433"
      ]
    },
    "2061": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2062": {
      "op": "assert",
      "stack_out": []
    },
    "2063": {
      "op": "itxn_begin"
    },
    "2064": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ]
    },
    "2066": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2068": {
      "op": "bytec 12 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)"
      ],
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "2070": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2072": {
      "op": "pushbytes 0x0006576f726c6434",
      "defined_out": [
        "0x0006576f726c6434"
      ],
      "stack_out": [
        "0x0006576f726c6434"
      ]
    },
    "2082": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2084": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2085": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2087": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2088": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2090": {
      "block": "test_void_next_txn@4",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2091": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2093": {
      "op": "pushbytes 0x576f726c6434",
      "defined_out": [
        "0x576f726c6434",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6434"
      ]
    },
    "2101": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2102": {
      "op": "assert",
      "stack_out": []
    },
    "2103": {
      "retsub": true,
      "op": "retsub"
    },
    "2104": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types",
      "params": {
        "app#0": "uint64",
        "asset#0": "uint64"
      },
      "block": "test_ref_types",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2107": {
      "op": "itxn_begin"
    },
    "2108": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0"
      ]
    },
    "2110": {
      "op": "frame_dig -2",
      "defined_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0"
      ]
    },
    "2112": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0",
        "inner_txn_params%0%%param_Assets_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0",
        "inner_txn_params%0%%param_Assets_idx_0#0"
      ]
    },
    "2114": {
      "op": "frame_dig -2",
      "defined_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0",
        "inner_txn_params%0%%param_Assets_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0",
        "inner_txn_params%0%%param_Assets_idx_0#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2116": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0",
        "inner_txn_params%0%%param_Assets_idx_0#0"
      ]
    },
    "2118": {
      "op": "itxn_field Assets",
      "stack_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0"
      ]
    },
    "2120": {
      "op": "itxn_field Applications",
      "stack_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0"
      ]
    },
    "2122": {
      "op": "itxn_field Accounts",
      "stack_out": []
    },
    "2124": {
      "op": "pushbytes 0xcd727b71 // method \"log(asset,account,application)void\"",
      "defined_out": [
        "Method(log(asset,account,application)void)"
      ],
      "stack_out": [
        "Method(log(asset,account,application)void)"
      ]
    },
    "2130": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2132": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "2135": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2137": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "2140": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2142": {
      "op": "pushbytes 0x01",
      "stack_out": [
        "0x01"
      ]
    },
    "2145": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2147": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2148": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2150": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2151": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2153": {
      "block": "test_ref_types_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2154": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2156": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "asset#0 (copy)"
      ]
    },
    "2158": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "check%0#0",
        "txn.LastLog#0",
        "value%0#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "2160": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "txn.LastLog#0",
        "value%0#0"
      ]
    },
    "2161": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%1#0",
        "txn.LastLog#0",
        "value%0#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "value%0#0",
        "tmp%1#0"
      ]
    },
    "2163": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0"
      ]
    },
    "2164": {
      "op": "frame_dig -2",
      "defined_out": [
        "app#0 (copy)",
        "tmp%2#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0",
        "app#0 (copy)"
      ]
    },
    "2166": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "tmp%2#0",
        "txn.LastLog#0",
        "value%1#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "2168": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0",
        "value%1#0"
      ]
    },
    "2169": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%3#0"
      ]
    },
    "2170": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2171": {
      "op": "assert",
      "stack_out": []
    },
    "2172": {
      "retsub": true,
      "op": "retsub"
    },
    "2173": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_string",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2176": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0"
      ]
    },
    "2177": {
      "op": "itxn_begin"
    },
    "2178": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2180": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2182": {
      "op": "bytec 18 // method \"echo_native_string(string)string\"",
      "defined_out": [
        "Method(echo_native_string(string)string)"
      ],
      "stack_out": [
        "result1#0",
        "Method(echo_native_string(string)string)"
      ]
    },
    "2184": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2186": {
      "op": "bytec 27 // 0x000173",
      "defined_out": [
        "0x000173"
      ],
      "stack_out": [
        "result1#0",
        "0x000173"
      ]
    },
    "2188": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2190": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2191": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2193": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2194": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2196": {
      "block": "test_native_string_next_txn@1",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2197": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0"
      ]
    },
    "2199": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2200": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2203": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2204": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2207": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2208": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2209": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "tmp%0#0"
      ]
    },
    "2210": {
      "op": "extract 2 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2213": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0"
      ]
    },
    "2214": {
      "op": "frame_bury 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2216": {
      "op": "pushbytes \"echo: s\"",
      "defined_out": [
        "\"echo: s\"",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "\"echo: s\""
      ]
    },
    "2225": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0"
      ]
    },
    "2226": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2227": {
      "op": "itxn_begin"
    },
    "2228": {
      "op": "pushbytes \"s\"",
      "defined_out": [
        "\"s\"",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "\"s\""
      ]
    },
    "2231": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length%0#0"
      ]
    },
    "2232": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "as_bytes%0#0"
      ]
    },
    "2233": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length_uint16%0#0"
      ]
    },
    "2236": {
      "op": "pushbytes \"s\"",
      "stack_out": [
        "result1#0",
        "length_uint16%0#0",
        "\"s\""
      ]
    },
    "2239": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2240": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "2242": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2244": {
      "op": "bytec 18 // method \"echo_native_string(string)string\"",
      "defined_out": [
        "Method(echo_native_string(string)string)",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_string(string)string)"
      ]
    },
    "2246": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2248": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2250": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2251": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2253": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2254": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2256": {
      "block": "test_native_string_next_txn@2",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2257": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2259": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2260": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%5#0"
      ]
    },
    "2263": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "awst_tmp%1#0"
      ]
    },
    "2264": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2267": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "2268": {
      "op": "==",
      "defined_out": [
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2269": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "tmp%5#0"
      ]
    },
    "2270": {
      "op": "extract 2 0",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2273": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "2275": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%9#0"
      ]
    },
    "2276": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2277": {
      "op": "itxn_begin"
    },
    "2278": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "2280": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2282": {
      "op": "bytec 18 // method \"echo_native_string(string)string\"",
      "defined_out": [
        "Method(echo_native_string(string)string)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "Method(echo_native_string(string)string)"
      ]
    },
    "2284": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2286": {
      "op": "bytec 27 // 0x000173",
      "defined_out": [
        "0x000173",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x000173"
      ]
    },
    "2288": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2290": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2291": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2293": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2294": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2296": {
      "block": "test_native_string_next_txn@3",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2297": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2299": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2300": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%10#0"
      ]
    },
    "2303": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "awst_tmp%2#0"
      ]
    },
    "2304": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "2307": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "2308": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "2309": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "tmp%10#0"
      ]
    },
    "2310": {
      "op": "extract 2 0",
      "defined_out": [
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2313": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "result1#0"
      ]
    },
    "2315": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%14#0"
      ]
    },
    "2316": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2317": {
      "retsub": true,
      "op": "retsub"
    },
    "2318": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_bytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2321": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0"
      ]
    },
    "2322": {
      "op": "itxn_begin"
    },
    "2323": {
      "op": "bytec 8 // 0x62",
      "defined_out": [
        "0x62"
      ],
      "stack_out": [
        "result1#0",
        "0x62"
      ]
    },
    "2325": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "result1#0",
        "length%0#0"
      ]
    },
    "2326": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "as_bytes%0#0"
      ]
    },
    "2327": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "result1#0",
        "length_uint16%0#0"
      ]
    },
    "2330": {
      "op": "bytec 8 // 0x62",
      "stack_out": [
        "result1#0",
        "length_uint16%0#0",
        "0x62"
      ]
    },
    "2332": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2333": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2335": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2337": {
      "op": "bytec 19 // method \"echo_native_bytes(byte[])byte[]\"",
      "defined_out": [
        "Method(echo_native_bytes(byte[])byte[])",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "2339": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2341": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2343": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2344": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2346": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2347": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2349": {
      "block": "test_native_bytes_next_txn@1",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2350": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0"
      ]
    },
    "2352": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2353": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2356": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2357": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2360": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2361": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2362": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "tmp%0#0"
      ]
    },
    "2363": {
      "op": "extract 2 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2366": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0"
      ]
    },
    "2367": {
      "op": "frame_bury 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2369": {
      "op": "pushbytes 0x6563686f3a2062",
      "defined_out": [
        "0x6563686f3a2062",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "0x6563686f3a2062"
      ]
    },
    "2378": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0"
      ]
    },
    "2379": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2380": {
      "op": "itxn_begin"
    },
    "2381": {
      "op": "bytec 8 // 0x62",
      "defined_out": [
        "0x62",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x62"
      ]
    },
    "2383": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length%1#0"
      ]
    },
    "2384": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "as_bytes%1#0"
      ]
    },
    "2385": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length_uint16%1#0"
      ]
    },
    "2388": {
      "op": "bytec 8 // 0x62",
      "stack_out": [
        "result1#0",
        "length_uint16%1#0",
        "0x62"
      ]
    },
    "2390": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2391": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "2393": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2395": {
      "op": "bytec 19 // method \"echo_native_bytes(byte[])byte[]\"",
      "defined_out": [
        "Method(echo_native_bytes(byte[])byte[])",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "2397": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2399": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2401": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2402": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2404": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2405": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2407": {
      "block": "test_native_bytes_next_txn@2",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2408": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2410": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2411": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%5#0"
      ]
    },
    "2414": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "awst_tmp%1#0"
      ]
    },
    "2415": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2418": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "2419": {
      "op": "==",
      "defined_out": [
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2420": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "tmp%5#0"
      ]
    },
    "2421": {
      "op": "extract 2 0",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2424": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "2426": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%9#0"
      ]
    },
    "2427": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2428": {
      "op": "itxn_begin"
    },
    "2429": {
      "op": "bytec 8 // 0x62",
      "defined_out": [
        "0x62",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x62"
      ]
    },
    "2431": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length%2#0"
      ]
    },
    "2432": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "as_bytes%2#0"
      ]
    },
    "2433": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length_uint16%2#0"
      ]
    },
    "2436": {
      "op": "bytec 8 // 0x62",
      "stack_out": [
        "result1#0",
        "length_uint16%2#0",
        "0x62"
      ]
    },
    "2438": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2439": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "2441": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2443": {
      "op": "bytec 19 // method \"echo_native_bytes(byte[])byte[]\"",
      "defined_out": [
        "Method(echo_native_bytes(byte[])byte[])",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "2445": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2447": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2449": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2450": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2452": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2453": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2455": {
      "block": "test_native_bytes_next_txn@3",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2456": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2458": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2459": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%10#0"
      ]
    },
    "2462": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "awst_tmp%2#0"
      ]
    },
    "2463": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "2466": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "2467": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "2468": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "tmp%10#0"
      ]
    },
    "2469": {
      "op": "extract 2 0",
      "defined_out": [
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2472": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "result1#0"
      ]
    },
    "2474": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%14#0"
      ]
    },
    "2475": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2476": {
      "retsub": true,
      "op": "retsub"
    },
    "2477": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_uint64",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2480": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "result1#0"
      ]
    },
    "2481": {
      "op": "itxn_begin"
    },
    "2482": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2484": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2486": {
      "op": "bytec 20 // method \"echo_native_uint64(uint64)uint64\"",
      "defined_out": [
        "Method(echo_native_uint64(uint64)uint64)"
      ],
      "stack_out": [
        "result1#0",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "2488": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2490": {
      "op": "bytec 4 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "result1#0",
        "0x0000000000000001"
      ]
    },
    "2492": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2494": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2495": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2497": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2498": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2500": {
      "block": "test_native_uint64_next_txn@1",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2501": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0"
      ]
    },
    "2503": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2504": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2507": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2508": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2511": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2512": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2513": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "tmp%0#0"
      ]
    },
    "2514": {
      "op": "btoi",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2515": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0"
      ]
    },
    "2516": {
      "op": "frame_bury 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2518": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "2"
      ]
    },
    "2519": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0"
      ]
    },
    "2520": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2521": {
      "op": "itxn_begin"
    },
    "2522": {
      "op": "intc_3 // 1",
      "stack_out": [
        "result1#0",
        "1"
      ]
    },
    "2523": {
      "op": "itob",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2524": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "2526": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2528": {
      "op": "bytec 20 // method \"echo_native_uint64(uint64)uint64\"",
      "defined_out": [
        "Method(echo_native_uint64(uint64)uint64)",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "2530": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2532": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2534": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2535": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2537": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2538": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2540": {
      "block": "test_native_uint64_next_txn@2",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2541": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2543": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2544": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%5#0"
      ]
    },
    "2547": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "awst_tmp%1#0"
      ]
    },
    "2548": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2551": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "2552": {
      "op": "==",
      "defined_out": [
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2553": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "tmp%5#0"
      ]
    },
    "2554": {
      "op": "btoi",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2555": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "2557": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%9#0"
      ]
    },
    "2558": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2559": {
      "op": "itxn_begin"
    },
    "2560": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "2562": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2564": {
      "op": "bytec 20 // method \"echo_native_uint64(uint64)uint64\"",
      "defined_out": [
        "Method(echo_native_uint64(uint64)uint64)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "2566": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2568": {
      "op": "bytec 4 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x0000000000000001"
      ]
    },
    "2570": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2572": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2573": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2575": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2576": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2578": {
      "block": "test_native_uint64_next_txn@3",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2579": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2581": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2582": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%10#0"
      ]
    },
    "2585": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "awst_tmp%2#0"
      ]
    },
    "2586": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "2589": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "2590": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "2591": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "tmp%10#0"
      ]
    },
    "2592": {
      "op": "btoi",
      "defined_out": [
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2593": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "result1#0"
      ]
    },
    "2595": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%14#0"
      ]
    },
    "2596": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2597": {
      "retsub": true,
      "op": "retsub"
    },
    "2598": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_biguint",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2601": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0"
      ]
    },
    "2602": {
      "op": "itxn_begin"
    },
    "2603": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2605": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2607": {
      "op": "bytec 21 // method \"echo_native_biguint(uint512)uint512\"",
      "defined_out": [
        "Method(echo_native_biguint(uint512)uint512)"
      ],
      "stack_out": [
        "result1#0",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "2609": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2611": {
      "op": "bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ],
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2613": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2615": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2616": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2618": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2619": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2621": {
      "block": "test_native_biguint_next_txn@1",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2622": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0"
      ]
    },
    "2624": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2625": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2628": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2629": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2632": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2633": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2634": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2635": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0"
      ]
    },
    "2636": {
      "op": "frame_bury 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2638": {
      "op": "bytec 22 // 0x03",
      "defined_out": [
        "0x03",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "0x03"
      ]
    },
    "2640": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%3#0"
      ]
    },
    "2641": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2642": {
      "op": "itxn_begin"
    },
    "2643": {
      "op": "bytec 9 // 0x02",
      "defined_out": [
        "0x02",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x02"
      ]
    },
    "2645": {
      "op": "len",
      "defined_out": [
        "len_%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "len_%0#0"
      ]
    },
    "2646": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "len_%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "len_%0#0",
        "64"
      ]
    },
    "2648": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "no_overflow%0#0"
      ]
    },
    "2649": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "result1#0"
      ]
    },
    "2650": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result1#0",
        "64"
      ]
    },
    "2652": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "b_zeros%0#0"
      ]
    },
    "2653": {
      "op": "bytec 9 // 0x02",
      "stack_out": [
        "result1#0",
        "b_zeros%0#0",
        "0x02"
      ]
    },
    "2655": {
      "op": "b|",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2656": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "2658": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2660": {
      "op": "bytec 21 // method \"echo_native_biguint(uint512)uint512\"",
      "defined_out": [
        "Method(echo_native_biguint(uint512)uint512)",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "2662": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2664": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2666": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2667": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2669": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2670": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2672": {
      "block": "test_native_biguint_next_txn@2",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2673": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2675": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2676": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%5#0"
      ]
    },
    "2679": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "awst_tmp%1#0"
      ]
    },
    "2680": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2683": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "2684": {
      "op": "==",
      "defined_out": [
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2685": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2686": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "2688": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%8#0"
      ]
    },
    "2689": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2690": {
      "op": "itxn_begin"
    },
    "2691": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "2693": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2695": {
      "op": "bytec 21 // method \"echo_native_biguint(uint512)uint512\"",
      "defined_out": [
        "Method(echo_native_biguint(uint512)uint512)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "2697": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2699": {
      "op": "bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2701": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2703": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2704": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2706": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2707": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2709": {
      "block": "test_native_biguint_next_txn@3",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2710": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2712": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2713": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%9#0"
      ]
    },
    "2716": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%9#0",
        "awst_tmp%2#0"
      ]
    },
    "2717": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "2720": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%9#0",
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "2721": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "2722": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "defined_out": [
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2723": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "result1#0"
      ]
    },
    "2725": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%12#0"
      ]
    },
    "2726": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2727": {
      "retsub": true,
      "op": "retsub"
    },
    "2728": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_tuple",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2731": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0"
      ]
    },
    "2732": {
      "op": "itxn_begin"
    },
    "2733": {
      "op": "bytec_2 // 0x6231",
      "defined_out": [
        "0x6231"
      ],
      "stack_out": [
        "result1#0",
        "0x6231"
      ]
    },
    "2734": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "result1#0",
        "length%0#0"
      ]
    },
    "2735": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "as_bytes%0#0"
      ]
    },
    "2736": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "result1#0",
        "length_uint16%0#0"
      ]
    },
    "2739": {
      "op": "bytec_2 // 0x6231",
      "stack_out": [
        "result1#0",
        "length_uint16%0#0",
        "0x6231"
      ]
    },
    "2740": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "2741": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2743": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "2745": {
      "op": "bytec 6 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2747": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "2749": {
      "op": "bytec 7 // 0x00027331",
      "defined_out": [
        "0x00027331",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "0x00027331"
      ]
    },
    "2751": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "2753": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2755": {
      "op": "bytec 4 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "result1#0",
        "0x0000000000000001"
      ]
    },
    "2757": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2759": {
      "op": "bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ],
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2761": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2763": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2764": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2766": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2767": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2769": {
      "block": "test_native_tuple_next_txn@1",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2770": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0"
      ]
    },
    "2772": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2773": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2776": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2777": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2780": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2781": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2782": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2783": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0"
      ]
    },
    "2784": {
      "op": "frame_bury 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2786": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2787": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0 (copy)",
        "0"
      ]
    },
    "2788": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "item_start_offset%0#0"
      ]
    },
    "2789": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item_start_offset%0#0",
        "result1#0"
      ]
    },
    "2790": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item_start_offset%0#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2791": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "item_start_offset%0#0",
        "result1#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "2792": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "item_start_offset%0#0",
        "result1#0",
        "item_end_offset%0#0"
      ]
    },
    "2793": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "item_start_offset%0#0",
        "result1#0",
        "item_end_offset%0#0",
        "result1#0 (copy)"
      ]
    },
    "2795": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "result1#0",
        "item_end_offset%0#0",
        "result1#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "2797": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "2799": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "item0%0#0"
      ]
    },
    "2800": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "result1#0"
      ]
    },
    "2801": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2802": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "result1#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "2803": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item_start_offset%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "result1#0",
        "item_start_offset%1#0"
      ]
    },
    "2804": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "result1#0"
      ]
    },
    "2805": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2806": {
      "op": "len",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "result1#0",
        "item_end_offset%1#0"
      ]
    },
    "2807": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "result1#0"
      ]
    },
    "2808": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2809": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "result1#0",
        "result1#0 (copy)",
        "item_start_offset%1#0"
      ]
    },
    "2811": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "result1#0",
        "result1#0 (copy)",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "2813": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "result1#0",
        "item1%0#0"
      ]
    },
    "2814": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item1%0#0",
        "result1#0"
      ]
    },
    "2815": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item1%0#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2816": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "item0%0#0",
        "item1%0#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item1%0#0",
        "result1#0",
        "result1#0 (copy)",
        "4"
      ]
    },
    "2818": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "4",
        "8",
        "item0%0#0",
        "item1%0#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item1%0#0",
        "result1#0",
        "result1#0 (copy)",
        "4",
        "8"
      ]
    },
    "2820": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item1%0#0",
        "result1#0",
        "item2%0#0"
      ]
    },
    "2821": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "result1#0"
      ]
    },
    "2822": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "result1#0",
        "12"
      ]
    },
    "2824": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "12",
        "64",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "result1#0",
        "12",
        "64"
      ]
    },
    "2826": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0"
      ]
    },
    "2827": {
      "op": "uncover 3",
      "defined_out": [
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "result1#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "s#0"
      ]
    },
    "2829": {
      "op": "swap",
      "defined_out": [
        "b#0",
        "item2%0#0",
        "item3%0#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "result1#0",
        "b#0",
        "item2%0#0",
        "s#0",
        "item3%0#0"
      ]
    },
    "2830": {
      "op": "uncover 2",
      "defined_out": [
        "b#0",
        "item3%0#0",
        "result1#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "b#0",
        "s#0",
        "item3%0#0",
        "u#0"
      ]
    },
    "2832": {
      "op": "cover 3",
      "defined_out": [
        "b#0",
        "bu#0",
        "result1#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "u#0",
        "b#0",
        "s#0",
        "bu#0"
      ]
    },
    "2834": {
      "op": "cover 3",
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "b#0",
        "s#0"
      ]
    },
    "2836": {
      "op": "extract 2 0",
      "defined_out": [
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "b#0",
        "tmp%3#0"
      ]
    },
    "2839": {
      "op": "bytec 14 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "b#0",
        "tmp%3#0",
        "\"echo: s1\""
      ]
    },
    "2841": {
      "op": "==",
      "defined_out": [
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%4#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "b#0",
        "tmp%4#0"
      ]
    },
    "2842": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "b#0"
      ]
    },
    "2843": {
      "op": "extract 2 0",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%5#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "tmp%5#0"
      ]
    },
    "2846": {
      "op": "bytec 28 // 0x6563686f3a206231",
      "defined_out": [
        "0x6563686f3a206231",
        "bu#0",
        "result1#0",
        "tmp%5#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "tmp%5#0",
        "0x6563686f3a206231"
      ]
    },
    "2848": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%6#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "tmp%6#0"
      ]
    },
    "2849": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0"
      ]
    },
    "2850": {
      "op": "btoi",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%7#0"
      ]
    },
    "2851": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%7#0",
        "2"
      ]
    },
    "2852": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%8#0"
      ]
    },
    "2853": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "bu#0"
      ]
    },
    "2854": {
      "op": "bytec 22 // 0x03",
      "defined_out": [
        "0x03",
        "bu#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "0x03"
      ]
    },
    "2856": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%9#0"
      ]
    },
    "2857": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2858": {
      "op": "itxn_begin"
    },
    "2859": {
      "op": "bytec 10 // \"s1\"",
      "defined_out": [
        "\"s1\"",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "\"s1\""
      ]
    },
    "2861": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length%1#0"
      ]
    },
    "2862": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "as_bytes%1#0"
      ]
    },
    "2863": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length_uint16%1#0"
      ]
    },
    "2866": {
      "op": "bytec 10 // \"s1\"",
      "stack_out": [
        "result1#0",
        "length_uint16%1#0",
        "\"s1\""
      ]
    },
    "2868": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0"
      ]
    },
    "2869": {
      "op": "bytec_2 // 0x6231",
      "defined_out": [
        "0x6231",
        "encoded_value%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "0x6231"
      ]
    },
    "2870": {
      "op": "len",
      "defined_out": [
        "encoded_value%1#0",
        "length%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "length%2#0"
      ]
    },
    "2871": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded_value%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "as_bytes%2#0"
      ]
    },
    "2872": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%1#0",
        "length_uint16%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "length_uint16%2#0"
      ]
    },
    "2875": {
      "op": "bytec_2 // 0x6231",
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "length_uint16%2#0",
        "0x6231"
      ]
    },
    "2876": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0"
      ]
    },
    "2877": {
      "op": "intc_3 // 1",
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "1"
      ]
    },
    "2878": {
      "op": "itob",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "2879": {
      "op": "bytec 9 // 0x02",
      "defined_out": [
        "0x02",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "0x02"
      ]
    },
    "2881": {
      "op": "len",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "len_%0#0",
        "result1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "len_%0#0"
      ]
    },
    "2882": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "len_%0#0",
        "64"
      ]
    },
    "2884": {
      "op": "<=",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "no_overflow%0#0",
        "result1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "2885": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "2886": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "64"
      ]
    },
    "2888": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "b_zeros%0#0"
      ]
    },
    "2889": {
      "op": "bytec 9 // 0x02",
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "b_zeros%0#0",
        "0x02"
      ]
    },
    "2891": {
      "op": "b|",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result1#0",
        "tmp%10#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "tmp%10#0"
      ]
    },
    "2892": {
      "op": "uncover 3",
      "defined_out": [
        "encoded_value%2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0",
        "tmp%10#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "tmp%10#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2894": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "tmp%10#0"
      ]
    },
    "2895": {
      "op": "uncover 3",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "result1#0",
        "tmp%10#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "val_as_bytes%0#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "tmp%10#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "2897": {
      "op": "cover 2",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0"
      ]
    },
    "2899": {
      "op": "cover 3",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2901": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "2903": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2905": {
      "op": "bytec 6 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2907": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2909": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "2911": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0"
      ]
    },
    "2913": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0"
      ]
    },
    "2915": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2917": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2918": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2920": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2921": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2923": {
      "block": "test_native_tuple_next_txn@2",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2924": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2926": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2927": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%11#0"
      ]
    },
    "2930": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%11#0",
        "awst_tmp%1#0"
      ]
    },
    "2931": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "2934": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%11#0",
        "tmp%12#0",
        "0x151f7c75"
      ]
    },
    "2935": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2936": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2937": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "2939": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%14#0"
      ]
    },
    "2940": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2941": {
      "op": "itxn_begin"
    },
    "2942": {
      "op": "bytec_2 // 0x6231",
      "defined_out": [
        "0x6231",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x6231"
      ]
    },
    "2943": {
      "op": "len",
      "defined_out": [
        "length%3#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length%3#0"
      ]
    },
    "2944": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "as_bytes%3#0"
      ]
    },
    "2945": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%3#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length_uint16%3#0"
      ]
    },
    "2948": {
      "op": "bytec_2 // 0x6231",
      "stack_out": [
        "result1#0",
        "length_uint16%3#0",
        "0x6231"
      ]
    },
    "2949": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "2950": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "2952": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "2954": {
      "op": "bytec 6 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2956": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "2958": {
      "op": "bytec 7 // 0x00027331",
      "defined_out": [
        "0x00027331",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "0x00027331"
      ]
    },
    "2960": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "2962": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2964": {
      "op": "bytec 4 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x0000000000000001"
      ]
    },
    "2966": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2968": {
      "op": "bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2970": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2972": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2973": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2975": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2976": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2978": {
      "block": "test_native_tuple_next_txn@3",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2979": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2981": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2982": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%15#0"
      ]
    },
    "2985": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%15#0",
        "awst_tmp%2#0"
      ]
    },
    "2986": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "2989": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%15#0",
        "tmp%16#0",
        "0x151f7c75"
      ]
    },
    "2990": {
      "op": "==",
      "defined_out": [
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "2991": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "defined_out": [
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2992": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "result1#0"
      ]
    },
    "2994": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%18#0"
      ]
    },
    "2995": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2996": {
      "op": "itxn_begin"
    },
    "2997": {
      "op": "bytec_2 // 0x6231",
      "defined_out": [
        "0x6231",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x6231"
      ]
    },
    "2998": {
      "op": "len",
      "defined_out": [
        "length%4#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length%4#0"
      ]
    },
    "2999": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "as_bytes%4#0"
      ]
    },
    "3000": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%4#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length_uint16%4#0"
      ]
    },
    "3003": {
      "op": "bytec_2 // 0x6231",
      "stack_out": [
        "result1#0",
        "length_uint16%4#0",
        "0x6231"
      ]
    },
    "3004": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3005": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ]
    },
    "3007": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3009": {
      "op": "bytec 6 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3011": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3013": {
      "op": "bytec 7 // 0x00027331",
      "defined_out": [
        "0x00027331",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "0x00027331"
      ]
    },
    "3015": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3017": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3019": {
      "op": "bytec 4 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x0000000000000001"
      ]
    },
    "3021": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3023": {
      "op": "bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3025": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3027": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "3028": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "3030": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "3031": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "3033": {
      "block": "test_native_tuple_next_txn@4",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "3034": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0"
      ]
    },
    "3036": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3037": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%19#0"
      ]
    },
    "3040": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "awst_tmp%3#0"
      ]
    },
    "3041": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "3044": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%20#0",
        "0x151f7c75"
      ]
    },
    "3045": {
      "op": "==",
      "defined_out": [
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "3046": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result1#0",
        "tmp%19#0"
      ]
    },
    "3047": {
      "op": "dup",
      "defined_out": [
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ]
    },
    "3048": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%19#0 (copy)",
        "0"
      ]
    },
    "3049": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%2#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "item_start_offset%2#0"
      ]
    },
    "3050": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item_start_offset%2#0",
        "tmp%19#0"
      ]
    },
    "3051": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item_start_offset%2#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ]
    },
    "3052": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%2#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "item_start_offset%2#0",
        "tmp%19#0",
        "tmp%19#0 (copy)",
        "2"
      ]
    },
    "3053": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "item_start_offset%2#0",
        "tmp%19#0",
        "item_end_offset%2#0"
      ]
    },
    "3054": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "item_start_offset%2#0",
        "tmp%19#0",
        "item_end_offset%2#0",
        "tmp%19#0 (copy)"
      ]
    },
    "3056": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "item_end_offset%2#0",
        "tmp%19#0 (copy)",
        "item_start_offset%2#0"
      ]
    },
    "3058": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%19#0 (copy)",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "3060": {
      "op": "substring3",
      "defined_out": [
        "item0%1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "item0%1#0"
      ]
    },
    "3061": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%1%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "item0%1%0#0"
      ]
    },
    "3064": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "tmp%19#0"
      ]
    },
    "3065": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ]
    },
    "3066": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "tmp%19#0",
        "tmp%19#0 (copy)",
        "2"
      ]
    },
    "3067": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%1%0#0",
        "item_start_offset%3#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "tmp%19#0",
        "item_start_offset%3#0"
      ]
    },
    "3068": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "item_start_offset%3#0",
        "tmp%19#0"
      ]
    },
    "3069": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "item_start_offset%3#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ]
    },
    "3070": {
      "op": "len",
      "defined_out": [
        "item0%1%0#0",
        "item_end_offset%3#0",
        "item_start_offset%3#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "item_start_offset%3#0",
        "tmp%19#0",
        "item_end_offset%3#0"
      ]
    },
    "3071": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0",
        "tmp%19#0"
      ]
    },
    "3072": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ]
    },
    "3073": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "item_end_offset%3#0",
        "tmp%19#0",
        "tmp%19#0 (copy)",
        "item_start_offset%3#0"
      ]
    },
    "3075": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "tmp%19#0",
        "tmp%19#0 (copy)",
        "item_start_offset%3#0",
        "item_end_offset%3#0"
      ]
    },
    "3077": {
      "op": "substring3",
      "defined_out": [
        "item0%1%0#0",
        "item1%1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "tmp%19#0",
        "item1%1#0"
      ]
    },
    "3078": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%1%0#0",
        "item1%1%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "tmp%19#0",
        "item1%1%0#0"
      ]
    },
    "3081": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "tmp%19#0"
      ]
    },
    "3082": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ]
    },
    "3083": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "item0%1%0#0",
        "item1%1%0#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "tmp%19#0",
        "tmp%19#0 (copy)",
        "4"
      ]
    },
    "3085": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "4",
        "8",
        "item0%1%0#0",
        "item1%1%0#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "tmp%19#0",
        "tmp%19#0 (copy)",
        "4",
        "8"
      ]
    },
    "3087": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%1%0#0",
        "item1%1%0#0",
        "item2%1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "tmp%19#0",
        "item2%1#0"
      ]
    },
    "3088": {
      "op": "btoi",
      "defined_out": [
        "item0%1%0#0",
        "item1%1%0#0",
        "item2%1%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "tmp%19#0",
        "item2%1%0#0"
      ]
    },
    "3089": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "item2%1%0#0",
        "tmp%19#0"
      ]
    },
    "3090": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "item0%1%0#0",
        "item1%1%0#0",
        "item2%1%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "item2%1%0#0",
        "tmp%19#0",
        "12"
      ]
    },
    "3092": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "12",
        "64",
        "item0%1%0#0",
        "item1%1%0#0",
        "item2%1%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "item2%1%0#0",
        "tmp%19#0",
        "12",
        "64"
      ]
    },
    "3094": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item1%1%0#0",
        "item2%1%0#0",
        "item3%1#0",
        "result_native.0#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.0#0",
        "item1%1%0#0",
        "item2%1%0#0",
        "item3%1#0"
      ]
    },
    "3095": {
      "op": "uncover 2",
      "defined_out": [
        "item2%1%0#0",
        "item3%1#0",
        "result_native.0#0",
        "result_native.1#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.0#0",
        "item2%1%0#0",
        "item3%1#0",
        "result_native.1#0"
      ]
    },
    "3097": {
      "op": "cover 3",
      "stack_out": [
        "result1#0",
        "result_native.1#0",
        "result_native.0#0",
        "item2%1%0#0",
        "item3%1#0"
      ]
    },
    "3099": {
      "op": "swap",
      "defined_out": [
        "item3%1#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.1#0",
        "result_native.0#0",
        "item3%1#0",
        "result_native.2#0"
      ]
    },
    "3100": {
      "op": "cover 3",
      "defined_out": [
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result_native.3#0"
      ]
    },
    "3102": {
      "op": "cover 3",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0"
      ]
    },
    "3104": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0"
      ]
    },
    "3106": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3107": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "result1#0 (copy)",
        "0"
      ]
    },
    "3108": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%4#0",
        "result1#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "item_start_offset%4#0"
      ]
    },
    "3109": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "item_start_offset%4#0",
        "result1#0"
      ]
    },
    "3110": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "item_start_offset%4#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3111": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "item_start_offset%4#0",
        "result1#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "3112": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%4#0",
        "item_start_offset%4#0",
        "result1#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "item_start_offset%4#0",
        "result1#0",
        "item_end_offset%4#0"
      ]
    },
    "3113": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "item_start_offset%4#0",
        "result1#0",
        "item_end_offset%4#0",
        "result1#0 (copy)"
      ]
    },
    "3115": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "item_end_offset%4#0",
        "result1#0 (copy)",
        "item_start_offset%4#0"
      ]
    },
    "3117": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "result1#0 (copy)",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "3119": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "result1#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "item0%2#0"
      ]
    },
    "3120": {
      "op": "extract 2 0",
      "defined_out": [
        "result1#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "tmp%22#0"
      ]
    },
    "3123": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "tmp%22#0",
        "result_native.0#0"
      ]
    },
    "3125": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "tmp%23#0"
      ]
    },
    "3126": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0"
      ]
    },
    "3127": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3128": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "3129": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%7#0",
        "result1#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "item_start_offset%7#0"
      ]
    },
    "3130": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "item_start_offset%7#0",
        "result1#0"
      ]
    },
    "3131": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "item_start_offset%7#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3132": {
      "op": "len",
      "defined_out": [
        "item_end_offset%7#0",
        "item_start_offset%7#0",
        "result1#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "item_start_offset%7#0",
        "result1#0",
        "item_end_offset%7#0"
      ]
    },
    "3133": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0",
        "result1#0"
      ]
    },
    "3134": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3135": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "item_end_offset%7#0",
        "result1#0",
        "result1#0 (copy)",
        "item_start_offset%7#0"
      ]
    },
    "3137": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "result1#0 (copy)",
        "item_start_offset%7#0",
        "item_end_offset%7#0"
      ]
    },
    "3139": {
      "op": "substring3",
      "defined_out": [
        "item1%3#0",
        "result1#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "item1%3#0"
      ]
    },
    "3140": {
      "op": "extract 2 0",
      "defined_out": [
        "result1#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "tmp%24#0"
      ]
    },
    "3143": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "tmp%24#0",
        "result_native.1#0"
      ]
    },
    "3145": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "tmp%25#0"
      ]
    },
    "3146": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0"
      ]
    },
    "3147": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3148": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "result1#0 (copy)",
        "4"
      ]
    },
    "3150": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "result1#0 (copy)",
        "4",
        "8"
      ]
    },
    "3152": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item2%4#0",
        "result1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "item2%4#0"
      ]
    },
    "3153": {
      "op": "btoi",
      "defined_out": [
        "result1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "tmp%26#0"
      ]
    },
    "3154": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result1#0",
        "tmp%26#0",
        "result_native.2#0"
      ]
    },
    "3156": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "result_native.3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result1#0",
        "tmp%27#0"
      ]
    },
    "3157": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result1#0"
      ]
    },
    "3158": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result1#0",
        "12"
      ]
    },
    "3160": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result1#0",
        "12",
        "64"
      ]
    },
    "3162": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item3%5#0",
        "result1#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "item3%5#0"
      ]
    },
    "3163": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%28#0"
      ]
    },
    "3164": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "3165": {
      "retsub": true,
      "op": "retsub"
    },
    "3166": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_tuple_method_ref",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3169": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0"
      ]
    },
    "3170": {
      "op": "dupn 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0"
      ]
    },
    "3172": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3173": {
      "op": "itxn_begin"
    },
    "3174": {
      "op": "bytec_2 // 0x6231",
      "defined_out": [
        "0x6231"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x6231"
      ]
    },
    "3175": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length%0#0"
      ]
    },
    "3176": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_bytes%0#0"
      ]
    },
    "3177": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length_uint16%0#0"
      ]
    },
    "3180": {
      "op": "bytec_2 // 0x6231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length_uint16%0#0",
        "0x6231"
      ]
    },
    "3181": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3182": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "3184": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3186": {
      "op": "bytec 6 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3188": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3190": {
      "op": "bytec 7 // 0x00027331",
      "defined_out": [
        "0x00027331",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "0x00027331"
      ]
    },
    "3192": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3194": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3196": {
      "op": "bytec 4 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x0000000000000001"
      ]
    },
    "3198": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3200": {
      "op": "bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3202": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3204": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "appl"
      ]
    },
    "3205": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3207": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0"
      ]
    },
    "3208": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3210": {
      "block": "test_native_tuple_method_ref_next_txn@1",
      "stack_in": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ],
      "op": "itxn_submit"
    },
    "3211": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0"
      ]
    },
    "3213": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3214": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3217": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3218": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3221": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "3222": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3223": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0"
      ]
    },
    "3224": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3225": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "3226": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "item_start_offset%0#0"
      ]
    },
    "3227": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%0#0",
        "tmp%0#0"
      ]
    },
    "3228": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3229": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "3230": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%0#0",
        "tmp%0#0",
        "item_end_offset%0#0"
      ]
    },
    "3231": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%0#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3233": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "3235": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "3237": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "item0%0#0"
      ]
    },
    "3238": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "item0%0%0#0"
      ]
    },
    "3241": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "tmp%0#0"
      ]
    },
    "3242": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3243": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "3244": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0%0#0",
        "item_start_offset%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "tmp%0#0",
        "item_start_offset%1#0"
      ]
    },
    "3245": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "item_start_offset%1#0",
        "tmp%0#0"
      ]
    },
    "3246": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "item_start_offset%1#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3247": {
      "op": "len",
      "defined_out": [
        "item0%0%0#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "item_start_offset%1#0",
        "tmp%0#0",
        "item_end_offset%1#0"
      ]
    },
    "3248": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "tmp%0#0"
      ]
    },
    "3249": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3250": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "item_end_offset%1#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%1#0"
      ]
    },
    "3252": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "3254": {
      "op": "substring3",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "tmp%0#0",
        "item1%0#0"
      ]
    },
    "3255": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "tmp%0#0",
        "item1%0%0#0"
      ]
    },
    "3258": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%0#0"
      ]
    },
    "3259": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3260": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "4"
      ]
    },
    "3262": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "4",
        "8",
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "4",
        "8"
      ]
    },
    "3264": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "item2%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%0#0",
        "item2%0#0"
      ]
    },
    "3265": {
      "op": "btoi",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "item2%0%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%0#0",
        "item2%0%0#0"
      ]
    },
    "3266": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "item1%0%0#0",
        "item2%0%0#0",
        "tmp%0#0"
      ]
    },
    "3267": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "item0%0%0#0",
        "item1%0%0#0",
        "item2%0%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "item1%0%0#0",
        "item2%0%0#0",
        "tmp%0#0",
        "12"
      ]
    },
    "3269": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "12",
        "64",
        "item0%0%0#0",
        "item1%0%0#0",
        "item2%0%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "item1%0%0#0",
        "item2%0%0#0",
        "tmp%0#0",
        "12",
        "64"
      ]
    },
    "3271": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "item2%0%0#0",
        "item3%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0%0#0",
        "item1%0%0#0",
        "item2%0%0#0",
        "item3%0#0"
      ]
    },
    "3272": {
      "op": "uncover 3",
      "defined_out": [
        "item1%0%0#0",
        "item2%0%0#0",
        "item3%0#0",
        "result.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%0%0#0",
        "item2%0%0#0",
        "item3%0#0",
        "result.0#0"
      ]
    },
    "3274": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%0%0#0",
        "item2%0%0#0",
        "item3%0#0",
        "result.0#0",
        "result.0#0 (copy)"
      ]
    },
    "3275": {
      "op": "cover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%0%0#0",
        "item2%0%0#0",
        "result.0#0",
        "item3%0#0",
        "result.0#0"
      ]
    },
    "3277": {
      "op": "frame_bury 0",
      "defined_out": [
        "item1%0%0#0",
        "item2%0%0#0",
        "item3%0#0",
        "result.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%0%0#0",
        "item2%0%0#0",
        "result.0#0",
        "item3%0#0"
      ]
    },
    "3279": {
      "op": "uncover 3",
      "defined_out": [
        "item2%0%0#0",
        "item3%0#0",
        "result.0#0",
        "result.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item2%0%0#0",
        "result.0#0",
        "item3%0#0",
        "result.1#0"
      ]
    },
    "3281": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item2%0%0#0",
        "result.0#0",
        "item3%0#0",
        "result.1#0",
        "result.1#0 (copy)"
      ]
    },
    "3282": {
      "op": "cover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item2%0%0#0",
        "result.1#0",
        "result.0#0",
        "item3%0#0",
        "result.1#0"
      ]
    },
    "3284": {
      "op": "frame_bury 1",
      "defined_out": [
        "item2%0%0#0",
        "item3%0#0",
        "result.0#0",
        "result.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item2%0%0#0",
        "result.1#0",
        "result.0#0",
        "item3%0#0"
      ]
    },
    "3286": {
      "op": "uncover 3",
      "defined_out": [
        "item3%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "item3%0#0",
        "result.2#0"
      ]
    },
    "3288": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "item3%0#0",
        "result.2#0",
        "result.2#0 (copy)"
      ]
    },
    "3289": {
      "op": "cover 4",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "item3%0#0",
        "result.2#0"
      ]
    },
    "3291": {
      "op": "frame_bury 3",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "result.3#0"
      ]
    },
    "3293": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "result.3#0",
        "result.3#0 (copy)"
      ]
    },
    "3294": {
      "op": "cover 4",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "result.3#0"
      ]
    },
    "3296": {
      "op": "frame_bury 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "s#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "s#0"
      ]
    },
    "3298": {
      "op": "cover 3",
      "defined_out": [
        "b#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "s#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "s#0",
        "result.3#0",
        "result.2#0",
        "b#0"
      ]
    },
    "3300": {
      "op": "cover 3",
      "defined_out": [
        "b#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "b#0",
        "s#0",
        "result.3#0",
        "u#0"
      ]
    },
    "3302": {
      "op": "cover 3",
      "defined_out": [
        "b#0",
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "u#0",
        "b#0",
        "s#0",
        "bu#0"
      ]
    },
    "3304": {
      "op": "cover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "b#0",
        "s#0"
      ]
    },
    "3306": {
      "op": "bytec 14 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "b#0",
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "b#0",
        "s#0",
        "\"echo: s1\""
      ]
    },
    "3308": {
      "op": "==",
      "defined_out": [
        "b#0",
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%3#0",
        "u#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "b#0",
        "tmp%3#0"
      ]
    },
    "3309": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "b#0"
      ]
    },
    "3310": {
      "op": "bytec 28 // 0x6563686f3a206231",
      "defined_out": [
        "0x6563686f3a206231",
        "b#0",
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "u#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "b#0",
        "0x6563686f3a206231"
      ]
    },
    "3312": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%4#0",
        "u#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "tmp%4#0"
      ]
    },
    "3313": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0"
      ]
    },
    "3314": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "2"
      ]
    },
    "3315": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "tmp%5#0"
      ]
    },
    "3316": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0"
      ]
    },
    "3317": {
      "op": "bytec 22 // 0x03",
      "defined_out": [
        "0x03",
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "0x03"
      ]
    },
    "3319": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%6#0"
      ]
    },
    "3320": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3321": {
      "op": "itxn_begin"
    },
    "3322": {
      "op": "bytec 10 // \"s1\"",
      "defined_out": [
        "\"s1\"",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "\"s1\""
      ]
    },
    "3324": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length%1#0"
      ]
    },
    "3325": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_bytes%1#0"
      ]
    },
    "3326": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length_uint16%1#0"
      ]
    },
    "3329": {
      "op": "bytec 10 // \"s1\"",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length_uint16%1#0",
        "\"s1\""
      ]
    },
    "3331": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0"
      ]
    },
    "3332": {
      "op": "bytec_2 // 0x6231",
      "defined_out": [
        "0x6231",
        "encoded_value%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "0x6231"
      ]
    },
    "3333": {
      "op": "len",
      "defined_out": [
        "encoded_value%1#0",
        "length%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "length%2#0"
      ]
    },
    "3334": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded_value%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "as_bytes%2#0"
      ]
    },
    "3335": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%1#0",
        "length_uint16%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "length_uint16%2#0"
      ]
    },
    "3338": {
      "op": "bytec_2 // 0x6231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "length_uint16%2#0",
        "0x6231"
      ]
    },
    "3339": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0"
      ]
    },
    "3340": {
      "op": "intc_3 // 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "1"
      ]
    },
    "3341": {
      "op": "itob",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "3342": {
      "op": "bytec 9 // 0x02",
      "defined_out": [
        "0x02",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "0x02"
      ]
    },
    "3344": {
      "op": "len",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "len_%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "len_%0#0"
      ]
    },
    "3345": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "len_%0#0",
        "64"
      ]
    },
    "3347": {
      "op": "<=",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "no_overflow%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "3348": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "3349": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "64"
      ]
    },
    "3351": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "b_zeros%0#0"
      ]
    },
    "3352": {
      "op": "bytec 9 // 0x02",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "b_zeros%0#0",
        "0x02"
      ]
    },
    "3354": {
      "op": "b|",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%7#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "tmp%7#0"
      ]
    },
    "3355": {
      "op": "uncover 3",
      "defined_out": [
        "encoded_value%2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%7#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "tmp%7#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3357": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "tmp%7#0"
      ]
    },
    "3358": {
      "op": "uncover 3",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%7#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "val_as_bytes%0#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "tmp%7#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3360": {
      "op": "cover 2",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0"
      ]
    },
    "3362": {
      "op": "cover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3364": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "3366": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3368": {
      "op": "bytec 6 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3370": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3372": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3374": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0"
      ]
    },
    "3376": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0"
      ]
    },
    "3378": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3380": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "appl"
      ]
    },
    "3381": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3383": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0"
      ]
    },
    "3384": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3386": {
      "block": "test_native_tuple_method_ref_next_txn@2",
      "stack_in": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ],
      "op": "itxn_submit"
    },
    "3387": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0"
      ]
    },
    "3389": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3390": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "3393": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%8#0",
        "awst_tmp%1#0"
      ]
    },
    "3394": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "3397": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%8#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "3398": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "3399": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%8#0"
      ]
    },
    "3400": {
      "op": "dup",
      "defined_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "3401": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "0"
      ]
    },
    "3402": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%8#0",
        "item_start_offset%2#0"
      ]
    },
    "3403": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%2#0",
        "tmp%8#0"
      ]
    },
    "3404": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%2#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "3405": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%2#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%2#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "2"
      ]
    },
    "3406": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%2#0",
        "tmp%8#0",
        "item_end_offset%2#0"
      ]
    },
    "3407": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%2#0",
        "tmp%8#0",
        "item_end_offset%2#0",
        "tmp%8#0 (copy)"
      ]
    },
    "3409": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%8#0",
        "item_end_offset%2#0",
        "tmp%8#0 (copy)",
        "item_start_offset%2#0"
      ]
    },
    "3411": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "3413": {
      "op": "substring3",
      "defined_out": [
        "item0%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%8#0",
        "item0%1#0"
      ]
    },
    "3414": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%1%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%8#0",
        "item0%1%0#0"
      ]
    },
    "3417": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "tmp%8#0"
      ]
    },
    "3418": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "3419": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "2"
      ]
    },
    "3420": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%1%0#0",
        "item_start_offset%3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "tmp%8#0",
        "item_start_offset%3#0"
      ]
    },
    "3421": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "item_start_offset%3#0",
        "tmp%8#0"
      ]
    },
    "3422": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "item_start_offset%3#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "3423": {
      "op": "len",
      "defined_out": [
        "item0%1%0#0",
        "item_end_offset%3#0",
        "item_start_offset%3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "item_start_offset%3#0",
        "tmp%8#0",
        "item_end_offset%3#0"
      ]
    },
    "3424": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0",
        "tmp%8#0"
      ]
    },
    "3425": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "3426": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "item_end_offset%3#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "item_start_offset%3#0"
      ]
    },
    "3428": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "item_start_offset%3#0",
        "item_end_offset%3#0"
      ]
    },
    "3430": {
      "op": "substring3",
      "defined_out": [
        "item0%1%0#0",
        "item1%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "tmp%8#0",
        "item1%1#0"
      ]
    },
    "3431": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%1%0#0",
        "item1%1%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "tmp%8#0",
        "item1%1%0#0"
      ]
    },
    "3434": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "tmp%8#0"
      ]
    },
    "3435": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "3436": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "item0%1%0#0",
        "item1%1%0#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "4"
      ]
    },
    "3438": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "4",
        "8",
        "item0%1%0#0",
        "item1%1%0#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "4",
        "8"
      ]
    },
    "3440": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%1%0#0",
        "item1%1%0#0",
        "item2%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "tmp%8#0",
        "item2%1#0"
      ]
    },
    "3441": {
      "op": "btoi",
      "defined_out": [
        "item0%1%0#0",
        "item1%1%0#0",
        "item2%1%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "tmp%8#0",
        "item2%1%0#0"
      ]
    },
    "3442": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "item2%1%0#0",
        "tmp%8#0"
      ]
    },
    "3443": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "item0%1%0#0",
        "item1%1%0#0",
        "item2%1%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "item2%1%0#0",
        "tmp%8#0",
        "12"
      ]
    },
    "3445": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "12",
        "64",
        "item0%1%0#0",
        "item1%1%0#0",
        "item2%1%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "item2%1%0#0",
        "tmp%8#0",
        "12",
        "64"
      ]
    },
    "3447": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%1%0#0",
        "item1%1%0#0",
        "item2%1%0#0",
        "item3%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1%0#0",
        "item1%1%0#0",
        "item2%1%0#0",
        "item3%1#0"
      ]
    },
    "3448": {
      "op": "uncover 3",
      "defined_out": [
        "item1%1%0#0",
        "item2%1%0#0",
        "item3%1#0",
        "result_2.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%1%0#0",
        "item2%1%0#0",
        "item3%1#0",
        "result_2.0#0"
      ]
    },
    "3450": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%1%0#0",
        "item2%1%0#0",
        "result_2.0#0",
        "item3%1#0"
      ]
    },
    "3451": {
      "op": "uncover 3",
      "defined_out": [
        "item2%1%0#0",
        "item3%1#0",
        "result_2.0#0",
        "result_2.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item2%1%0#0",
        "result_2.0#0",
        "item3%1#0",
        "result_2.1#0"
      ]
    },
    "3453": {
      "op": "cover 2",
      "defined_out": [
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.2#0",
        "result_2.1#0",
        "result_2.0#0",
        "result_2.3#0"
      ]
    },
    "3455": {
      "op": "cover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "result_2.1#0",
        "result_2.0#0"
      ]
    },
    "3457": {
      "op": "frame_dig 0",
      "defined_out": [
        "result.0#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "result_2.1#0",
        "result_2.0#0",
        "result.0#0"
      ]
    },
    "3459": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "result_2.1#0",
        "tmp%11#0"
      ]
    },
    "3460": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "tmp%11#0",
        "result_2.1#0"
      ]
    },
    "3461": {
      "op": "frame_dig 1",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "tmp%11#0",
        "result_2.1#0",
        "result.1#0"
      ]
    },
    "3463": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "3464": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "tmp%13#0"
      ]
    },
    "3465": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "tmp%13#0",
        "result_2.2#0"
      ]
    },
    "3466": {
      "op": "frame_dig 3",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "tmp%13#0",
        "result_2.2#0",
        "result.2#0"
      ]
    },
    "3468": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_2.3#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "3469": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_2.3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "tmp%15#0"
      ]
    },
    "3470": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "result_2.3#0"
      ]
    },
    "3471": {
      "op": "frame_dig 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "result_2.3#0",
        "result.3#0"
      ]
    },
    "3473": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "3474": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%17#0"
      ]
    },
    "3475": {
      "error": "expected native arguments to give the same result",
      "op": "assert // expected native arguments to give the same result",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3476": {
      "op": "itxn_begin"
    },
    "3477": {
      "op": "bytec_2 // 0x6231",
      "defined_out": [
        "0x6231",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x6231"
      ]
    },
    "3478": {
      "op": "len",
      "defined_out": [
        "length%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length%3#0"
      ]
    },
    "3479": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_bytes%3#0"
      ]
    },
    "3480": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length_uint16%3#0"
      ]
    },
    "3483": {
      "op": "bytec_2 // 0x6231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length_uint16%3#0",
        "0x6231"
      ]
    },
    "3484": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3485": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "3487": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3489": {
      "op": "bytec 6 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3491": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3493": {
      "op": "bytec 7 // 0x00027331",
      "defined_out": [
        "0x00027331",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "0x00027331"
      ]
    },
    "3495": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3497": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3499": {
      "op": "bytec 4 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x0000000000000001"
      ]
    },
    "3501": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3503": {
      "op": "bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3505": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3507": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "appl"
      ]
    },
    "3508": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3510": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0"
      ]
    },
    "3511": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3513": {
      "block": "test_native_tuple_method_ref_next_txn@3",
      "stack_in": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ],
      "op": "itxn_submit"
    },
    "3514": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0"
      ]
    },
    "3516": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3517": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%18#0"
      ]
    },
    "3520": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%18#0",
        "awst_tmp%2#0"
      ]
    },
    "3521": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "3524": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%18#0",
        "tmp%19#0",
        "0x151f7c75"
      ]
    },
    "3525": {
      "op": "==",
      "defined_out": [
        "tmp%18#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%18#0",
        "tmp%20#0"
      ]
    },
    "3526": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%18#0"
      ]
    },
    "3527": {
      "op": "dup",
      "defined_out": [
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "3528": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "0"
      ]
    },
    "3529": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%4#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%18#0",
        "item_start_offset%4#0"
      ]
    },
    "3530": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%4#0",
        "tmp%18#0"
      ]
    },
    "3531": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%4#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "3532": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%4#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%4#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "2"
      ]
    },
    "3533": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%4#0",
        "item_start_offset%4#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%4#0",
        "tmp%18#0",
        "item_end_offset%4#0"
      ]
    },
    "3534": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%4#0",
        "tmp%18#0",
        "item_end_offset%4#0",
        "tmp%18#0 (copy)"
      ]
    },
    "3536": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%18#0",
        "item_end_offset%4#0",
        "tmp%18#0 (copy)",
        "item_start_offset%4#0"
      ]
    },
    "3538": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "3540": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%18#0",
        "item0%2#0"
      ]
    },
    "3541": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%2%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%18#0",
        "item0%2%0#0"
      ]
    },
    "3544": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "tmp%18#0"
      ]
    },
    "3545": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "3546": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "2"
      ]
    },
    "3547": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2%0#0",
        "item_start_offset%5#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "tmp%18#0",
        "item_start_offset%5#0"
      ]
    },
    "3548": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "item_start_offset%5#0",
        "tmp%18#0"
      ]
    },
    "3549": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "item_start_offset%5#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "3550": {
      "op": "len",
      "defined_out": [
        "item0%2%0#0",
        "item_end_offset%5#0",
        "item_start_offset%5#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "item_start_offset%5#0",
        "tmp%18#0",
        "item_end_offset%5#0"
      ]
    },
    "3551": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0",
        "tmp%18#0"
      ]
    },
    "3552": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "3553": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "item_end_offset%5#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "item_start_offset%5#0"
      ]
    },
    "3555": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "item_start_offset%5#0",
        "item_end_offset%5#0"
      ]
    },
    "3557": {
      "op": "substring3",
      "defined_out": [
        "item0%2%0#0",
        "item1%2#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "tmp%18#0",
        "item1%2#0"
      ]
    },
    "3558": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%2%0#0",
        "item1%2%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "tmp%18#0",
        "item1%2%0#0"
      ]
    },
    "3561": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "item1%2%0#0",
        "tmp%18#0"
      ]
    },
    "3562": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "item1%2%0#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "3563": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "item0%2%0#0",
        "item1%2%0#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "item1%2%0#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "4"
      ]
    },
    "3565": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "4",
        "8",
        "item0%2%0#0",
        "item1%2%0#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "item1%2%0#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "4",
        "8"
      ]
    },
    "3567": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%2%0#0",
        "item1%2%0#0",
        "item2%2#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "item1%2%0#0",
        "tmp%18#0",
        "item2%2#0"
      ]
    },
    "3568": {
      "op": "btoi",
      "defined_out": [
        "item0%2%0#0",
        "item1%2%0#0",
        "item2%2%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "item1%2%0#0",
        "tmp%18#0",
        "item2%2%0#0"
      ]
    },
    "3569": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "item1%2%0#0",
        "item2%2%0#0",
        "tmp%18#0"
      ]
    },
    "3570": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "item0%2%0#0",
        "item1%2%0#0",
        "item2%2%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "item1%2%0#0",
        "item2%2%0#0",
        "tmp%18#0",
        "12"
      ]
    },
    "3572": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "12",
        "64",
        "item0%2%0#0",
        "item1%2%0#0",
        "item2%2%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "item1%2%0#0",
        "item2%2%0#0",
        "tmp%18#0",
        "12",
        "64"
      ]
    },
    "3574": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%2%0#0",
        "item1%2%0#0",
        "item2%2%0#0",
        "item3%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2%0#0",
        "item1%2%0#0",
        "item2%2%0#0",
        "item3%2#0"
      ]
    },
    "3575": {
      "op": "uncover 3",
      "defined_out": [
        "item1%2%0#0",
        "item2%2%0#0",
        "item3%2#0",
        "result_3.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%2%0#0",
        "item2%2%0#0",
        "item3%2#0",
        "result_3.0#0"
      ]
    },
    "3577": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%2%0#0",
        "item2%2%0#0",
        "result_3.0#0",
        "item3%2#0"
      ]
    },
    "3578": {
      "op": "uncover 3",
      "defined_out": [
        "item2%2%0#0",
        "item3%2#0",
        "result_3.0#0",
        "result_3.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item2%2%0#0",
        "result_3.0#0",
        "item3%2#0",
        "result_3.1#0"
      ]
    },
    "3580": {
      "op": "cover 2",
      "defined_out": [
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.2#0",
        "result_3.1#0",
        "result_3.0#0",
        "result_3.3#0"
      ]
    },
    "3582": {
      "op": "cover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "result_3.1#0",
        "result_3.0#0"
      ]
    },
    "3584": {
      "op": "frame_dig 0",
      "defined_out": [
        "result.0#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "result_3.1#0",
        "result_3.0#0",
        "result.0#0"
      ]
    },
    "3586": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "result_3.1#0",
        "tmp%21#0"
      ]
    },
    "3587": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "tmp%21#0",
        "result_3.1#0"
      ]
    },
    "3588": {
      "op": "frame_dig 1",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "tmp%21#0",
        "result_3.1#0",
        "result.1#0"
      ]
    },
    "3590": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "3591": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "tmp%23#0"
      ]
    },
    "3592": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "tmp%23#0",
        "result_3.2#0"
      ]
    },
    "3593": {
      "op": "frame_dig 3",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "tmp%23#0",
        "result_3.2#0",
        "result.2#0"
      ]
    },
    "3595": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_3.3#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "3596": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_3.3#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "tmp%25#0"
      ]
    },
    "3597": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%25#0",
        "result_3.3#0"
      ]
    },
    "3598": {
      "op": "frame_dig 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%25#0",
        "result_3.3#0",
        "result.3#0"
      ]
    },
    "3600": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "3601": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%27#0"
      ]
    },
    "3602": {
      "error": "expected arc4 arguments to give the same result",
      "op": "assert // expected arc4 arguments to give the same result",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3603": {
      "op": "itxn_begin"
    },
    "3604": {
      "op": "bytec_2 // 0x6231",
      "defined_out": [
        "0x6231",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x6231"
      ]
    },
    "3605": {
      "op": "len",
      "defined_out": [
        "length%4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length%4#0"
      ]
    },
    "3606": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_bytes%4#0"
      ]
    },
    "3607": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length_uint16%4#0"
      ]
    },
    "3610": {
      "op": "bytec_2 // 0x6231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length_uint16%4#0",
        "0x6231"
      ]
    },
    "3611": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3612": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ]
    },
    "3614": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3616": {
      "op": "bytec 6 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3618": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3620": {
      "op": "bytec 7 // 0x00027331",
      "defined_out": [
        "0x00027331",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "0x00027331"
      ]
    },
    "3622": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3624": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3626": {
      "op": "bytec 4 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x0000000000000001"
      ]
    },
    "3628": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3630": {
      "op": "bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3632": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3634": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "appl"
      ]
    },
    "3635": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3637": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0"
      ]
    },
    "3638": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3640": {
      "block": "test_native_tuple_method_ref_next_txn@4",
      "stack_in": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ],
      "op": "itxn_submit"
    },
    "3641": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0"
      ]
    },
    "3643": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3644": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%28#0"
      ]
    },
    "3647": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%28#0",
        "awst_tmp%3#0"
      ]
    },
    "3648": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "3651": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%28#0",
        "tmp%29#0",
        "0x151f7c75"
      ]
    },
    "3652": {
      "op": "==",
      "defined_out": [
        "tmp%28#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%28#0",
        "tmp%30#0"
      ]
    },
    "3653": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%28#0"
      ]
    },
    "3654": {
      "op": "dup",
      "defined_out": [
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ]
    },
    "3655": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%28#0",
        "tmp%28#0 (copy)",
        "0"
      ]
    },
    "3656": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%6#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%28#0",
        "item_start_offset%6#0"
      ]
    },
    "3657": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%6#0",
        "tmp%28#0"
      ]
    },
    "3658": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%6#0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ]
    },
    "3659": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%6#0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%6#0",
        "tmp%28#0",
        "tmp%28#0 (copy)",
        "2"
      ]
    },
    "3660": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%6#0",
        "item_start_offset%6#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%6#0",
        "tmp%28#0",
        "item_end_offset%6#0"
      ]
    },
    "3661": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%6#0",
        "tmp%28#0",
        "item_end_offset%6#0",
        "tmp%28#0 (copy)"
      ]
    },
    "3663": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%28#0",
        "item_end_offset%6#0",
        "tmp%28#0 (copy)",
        "item_start_offset%6#0"
      ]
    },
    "3665": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%28#0",
        "tmp%28#0 (copy)",
        "item_start_offset%6#0",
        "item_end_offset%6#0"
      ]
    },
    "3667": {
      "op": "substring3",
      "defined_out": [
        "item0%3#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%28#0",
        "item0%3#0"
      ]
    },
    "3668": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%3%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%28#0",
        "item0%3%0#0"
      ]
    },
    "3671": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "tmp%28#0"
      ]
    },
    "3672": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ]
    },
    "3673": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "tmp%28#0",
        "tmp%28#0 (copy)",
        "2"
      ]
    },
    "3674": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%3%0#0",
        "item_start_offset%7#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "tmp%28#0",
        "item_start_offset%7#0"
      ]
    },
    "3675": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "item_start_offset%7#0",
        "tmp%28#0"
      ]
    },
    "3676": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "item_start_offset%7#0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ]
    },
    "3677": {
      "op": "len",
      "defined_out": [
        "item0%3%0#0",
        "item_end_offset%7#0",
        "item_start_offset%7#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "item_start_offset%7#0",
        "tmp%28#0",
        "item_end_offset%7#0"
      ]
    },
    "3678": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0",
        "tmp%28#0"
      ]
    },
    "3679": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ]
    },
    "3680": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "item_end_offset%7#0",
        "tmp%28#0",
        "tmp%28#0 (copy)",
        "item_start_offset%7#0"
      ]
    },
    "3682": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "tmp%28#0",
        "tmp%28#0 (copy)",
        "item_start_offset%7#0",
        "item_end_offset%7#0"
      ]
    },
    "3684": {
      "op": "substring3",
      "defined_out": [
        "item0%3%0#0",
        "item1%3#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "tmp%28#0",
        "item1%3#0"
      ]
    },
    "3685": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "tmp%28#0",
        "item1%3%0#0"
      ]
    },
    "3688": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "item1%3%0#0",
        "tmp%28#0"
      ]
    },
    "3689": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "item1%3%0#0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ]
    },
    "3690": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "item0%3%0#0",
        "item1%3%0#0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "item1%3%0#0",
        "tmp%28#0",
        "tmp%28#0 (copy)",
        "4"
      ]
    },
    "3692": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "4",
        "8",
        "item0%3%0#0",
        "item1%3%0#0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "item1%3%0#0",
        "tmp%28#0",
        "tmp%28#0 (copy)",
        "4",
        "8"
      ]
    },
    "3694": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "item2%3#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "item1%3%0#0",
        "tmp%28#0",
        "item2%3#0"
      ]
    },
    "3695": {
      "op": "btoi",
      "defined_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "item2%3%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "item1%3%0#0",
        "tmp%28#0",
        "item2%3%0#0"
      ]
    },
    "3696": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "item1%3%0#0",
        "item2%3%0#0",
        "tmp%28#0"
      ]
    },
    "3697": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "item0%3%0#0",
        "item1%3%0#0",
        "item2%3%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "item1%3%0#0",
        "item2%3%0#0",
        "tmp%28#0",
        "12"
      ]
    },
    "3699": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "12",
        "64",
        "item0%3%0#0",
        "item1%3%0#0",
        "item2%3%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "item1%3%0#0",
        "item2%3%0#0",
        "tmp%28#0",
        "12",
        "64"
      ]
    },
    "3701": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "item2%3%0#0",
        "item3%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3%0#0",
        "item1%3%0#0",
        "item2%3%0#0",
        "item3%3#0"
      ]
    },
    "3702": {
      "op": "uncover 3",
      "defined_out": [
        "item1%3%0#0",
        "item2%3%0#0",
        "item3%3#0",
        "result_native.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%3%0#0",
        "item2%3%0#0",
        "item3%3#0",
        "result_native.0#0"
      ]
    },
    "3704": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%3%0#0",
        "item2%3%0#0",
        "result_native.0#0",
        "item3%3#0"
      ]
    },
    "3705": {
      "op": "uncover 3",
      "defined_out": [
        "item2%3%0#0",
        "item3%3#0",
        "result_native.0#0",
        "result_native.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item2%3%0#0",
        "result_native.0#0",
        "item3%3#0",
        "result_native.1#0"
      ]
    },
    "3707": {
      "op": "cover 2",
      "defined_out": [
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result_native.3#0"
      ]
    },
    "3709": {
      "op": "cover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0"
      ]
    },
    "3711": {
      "op": "frame_dig 0",
      "defined_out": [
        "result.0#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result.0#0"
      ]
    },
    "3713": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "tmp%31#0"
      ]
    },
    "3714": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "tmp%31#0",
        "result_native.1#0"
      ]
    },
    "3715": {
      "op": "frame_dig 1",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "tmp%31#0",
        "result_native.1#0",
        "result.1#0"
      ]
    },
    "3717": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "3718": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "tmp%33#0"
      ]
    },
    "3719": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "tmp%33#0",
        "result_native.2#0"
      ]
    },
    "3720": {
      "op": "frame_dig 3",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "tmp%33#0",
        "result_native.2#0",
        "result.2#0"
      ]
    },
    "3722": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_native.3#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "3723": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_native.3#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "tmp%35#0"
      ]
    },
    "3724": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%35#0",
        "result_native.3#0"
      ]
    },
    "3725": {
      "op": "frame_dig 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.3#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%35#0",
        "result_native.3#0",
        "result.3#0"
      ]
    },
    "3727": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "3728": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%37#0"
      ]
    },
    "3729": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3730": {
      "retsub": true,
      "op": "retsub"
    },
    "3731": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_nested_tuples",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3734": {
      "op": "itxn_begin"
    },
    "3735": {
      "op": "bytec 15 // 0x33",
      "defined_out": [
        "0x33"
      ],
      "stack_out": [
        "0x33"
      ]
    },
    "3737": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "3738": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "3739": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "3742": {
      "op": "bytec 15 // 0x33",
      "stack_out": [
        "length_uint16%0#0",
        "0x33"
      ]
    },
    "3744": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "3745": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "4"
      ]
    },
    "3747": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "3748": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%0#0",
        "offset_as_uint16%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "offset_as_uint16%0#0"
      ]
    },
    "3751": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "encoded_value%0#0",
        "offset_as_uint16%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "offset_as_uint16%0#0",
        "0x"
      ]
    },
    "3752": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "0x",
        "offset_as_uint16%0#0"
      ]
    },
    "3753": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "3754": {
      "op": "bytec 7 // 0x00027331",
      "defined_out": [
        "0x00027331",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "0x00027331"
      ]
    },
    "3756": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "data_length%0#0"
      ]
    },
    "3757": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "data_length%0#0",
        "4"
      ]
    },
    "3759": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "current_tail_offset%1#0"
      ]
    },
    "3760": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "as_bytes%2#0"
      ]
    },
    "3761": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "offset_as_uint16%1#0"
      ]
    },
    "3764": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3765": {
      "op": "bytec 7 // 0x00027331",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "0x00027331"
      ]
    },
    "3767": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3768": {
      "op": "bytec 29 // 0x00027332",
      "defined_out": [
        "0x00027332",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "0x00027332"
      ]
    },
    "3770": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3771": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0",
        "0x"
      ]
    },
    "3772": {
      "op": "bytec 4 // 0x0000000000000001",
      "defined_out": [
        "0x",
        "0x0000000000000001",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0",
        "0x",
        "0x0000000000000001"
      ]
    },
    "3774": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3775": {
      "op": "bytec 13 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%6#0",
        "0x0000000000000002"
      ]
    },
    "3777": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3778": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0",
        "18"
      ]
    },
    "3780": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0",
        "as_bytes%3#0"
      ]
    },
    "3781": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0",
        "offset_as_uint16%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%7#0",
        "offset_as_uint16%2#0"
      ]
    },
    "3784": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3785": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%0#0"
      ]
    },
    "3787": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "3788": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3789": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%4#0",
        "4"
      ]
    },
    "3791": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%4#0",
        "as_bytes%4#0"
      ]
    },
    "3792": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%9#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%4#0",
        "offset_as_uint16%3#0"
      ]
    },
    "3795": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%4#0",
        "offset_as_uint16%3#0",
        "0x"
      ]
    },
    "3796": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%4#0",
        "0x",
        "offset_as_uint16%3#0"
      ]
    },
    "3797": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3798": {
      "op": "dig 1",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%4#0 (copy)",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%4#0 (copy)"
      ]
    },
    "3800": {
      "op": "len",
      "defined_out": [
        "data_length%3#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%11#0",
        "data_length%3#0"
      ]
    },
    "3801": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%11#0",
        "data_length%3#0",
        "4"
      ]
    },
    "3803": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%6#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%11#0",
        "current_tail_offset%6#0"
      ]
    },
    "3804": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%11#0",
        "as_bytes%5#0"
      ]
    },
    "3805": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%9#0",
        "offset_as_uint16%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%11#0",
        "offset_as_uint16%4#0"
      ]
    },
    "3808": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%4#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "3809": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3810": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "3811": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%13#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "3812": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3813": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "3815": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3817": {
      "op": "bytec 23 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "defined_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "3819": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3821": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3823": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "3824": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3826": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3827": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3829": {
      "block": "test_nested_tuples_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "3830": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3832": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3833": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3836": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3837": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3840": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "3841": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3842": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3843": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3844": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "3845": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%0#0"
      ]
    },
    "3846": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%0#0"
      ]
    },
    "3847": {
      "op": "dup",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3848": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "3849": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%0#0",
        "item_end_offset%0#0"
      ]
    },
    "3850": {
      "op": "dig 1",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3852": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "3854": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "3856": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item0%0#0"
      ]
    },
    "3857": {
      "op": "dup",
      "defined_out": [
        "item0%0#0",
        "item0%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "3858": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "0"
      ]
    },
    "3859": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item_start_offset%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item0%0#0",
        "item_start_offset%1#0"
      ]
    },
    "3860": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%1#0",
        "item0%0#0"
      ]
    },
    "3861": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "3862": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "2"
      ]
    },
    "3863": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item_end_offset%1#0"
      ]
    },
    "3864": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item0%0#0 (copy)"
      ]
    },
    "3866": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item0%0#0 (copy)",
        "item_start_offset%1#0"
      ]
    },
    "3868": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "3870": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "item0%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item0%0#0",
        "item0%1#0"
      ]
    },
    "3871": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0#0",
        "item0%1%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item0%0#0",
        "item0%1%0#0"
      ]
    },
    "3874": {
      "op": "cover 2",
      "stack_out": [
        "item0%1%0#0",
        "tmp%0#0",
        "item0%0#0"
      ]
    },
    "3876": {
      "op": "dup",
      "stack_out": [
        "item0%1%0#0",
        "tmp%0#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "3877": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item0%1%0#0",
        "tmp%0#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "2"
      ]
    },
    "3878": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item0%1%0#0",
        "item_start_offset%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "tmp%0#0",
        "item0%0#0",
        "item_start_offset%2#0"
      ]
    },
    "3879": {
      "op": "swap",
      "stack_out": [
        "item0%1%0#0",
        "tmp%0#0",
        "item_start_offset%2#0",
        "item0%0#0"
      ]
    },
    "3880": {
      "op": "dup",
      "stack_out": [
        "item0%1%0#0",
        "tmp%0#0",
        "item_start_offset%2#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "3881": {
      "op": "len",
      "defined_out": [
        "item0%0#0",
        "item0%1%0#0",
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "tmp%0#0",
        "item_start_offset%2#0",
        "item0%0#0",
        "item_end_offset%2#0"
      ]
    },
    "3882": {
      "op": "swap",
      "stack_out": [
        "item0%1%0#0",
        "tmp%0#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0",
        "item0%0#0"
      ]
    },
    "3883": {
      "op": "uncover 2",
      "stack_out": [
        "item0%1%0#0",
        "tmp%0#0",
        "item_end_offset%2#0",
        "item0%0#0",
        "item_start_offset%2#0"
      ]
    },
    "3885": {
      "op": "uncover 2",
      "stack_out": [
        "item0%1%0#0",
        "tmp%0#0",
        "item0%0#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "3887": {
      "op": "substring3",
      "defined_out": [
        "item0%1%0#0",
        "item1%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "tmp%0#0",
        "item1%0#0"
      ]
    },
    "3888": {
      "op": "swap",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "tmp%0#0"
      ]
    },
    "3889": {
      "op": "dup",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3890": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "3891": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "tmp%0#0",
        "item_start_offset%3#0"
      ]
    },
    "3892": {
      "op": "swap",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "tmp%0#0"
      ]
    },
    "3893": {
      "op": "dup",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3894": {
      "op": "len",
      "defined_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item_end_offset%3#0",
        "item_start_offset%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "tmp%0#0",
        "item_end_offset%3#0"
      ]
    },
    "3895": {
      "op": "swap",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0",
        "tmp%0#0"
      ]
    },
    "3896": {
      "op": "uncover 2",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item_end_offset%3#0",
        "tmp%0#0",
        "item_start_offset%3#0"
      ]
    },
    "3898": {
      "op": "uncover 2",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "tmp%0#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0"
      ]
    },
    "3900": {
      "op": "substring3",
      "defined_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item1%1#0"
      ]
    },
    "3901": {
      "op": "dup",
      "defined_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ]
    },
    "3902": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "0"
      ]
    },
    "3903": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "8",
        "item0%1%0#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "0",
        "8"
      ]
    },
    "3905": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%1%0#0",
        "item0%2#0",
        "item1%0#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item1%1#0",
        "item0%2#0"
      ]
    },
    "3906": {
      "op": "btoi",
      "defined_out": [
        "item0%1%0#0",
        "item0%2%0#0",
        "item1%0#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item1%1#0",
        "item0%2%0#0"
      ]
    },
    "3907": {
      "op": "swap",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%1#0"
      ]
    },
    "3908": {
      "op": "dup",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ]
    },
    "3909": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "8"
      ]
    },
    "3911": {
      "op": "dup",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "8",
        "8"
      ]
    },
    "3912": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%1%0#0",
        "item0%2%0#0",
        "item1%0#0",
        "item1%1#0",
        "item1%2#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%1#0",
        "item1%2#0"
      ]
    },
    "3913": {
      "op": "swap",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item1%1#0"
      ]
    },
    "3914": {
      "op": "dup",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ]
    },
    "3915": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "item0%1%0#0",
        "item0%2%0#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "item1%2#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "16"
      ]
    },
    "3917": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%1%0#0",
        "item0%2%0#0",
        "item1%0#0",
        "item1%1#0",
        "item1%2#0",
        "item_start_offset%4#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item1%1#0",
        "item_start_offset%4#0"
      ]
    },
    "3918": {
      "op": "swap",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item1%1#0"
      ]
    },
    "3919": {
      "op": "dup",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ]
    },
    "3920": {
      "op": "len",
      "defined_out": [
        "item0%1%0#0",
        "item0%2%0#0",
        "item1%0#0",
        "item1%1#0",
        "item1%2#0",
        "item_end_offset%4#0",
        "item_start_offset%4#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item1%1#0",
        "item_end_offset%4#0"
      ]
    },
    "3921": {
      "op": "swap",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "item1%1#0"
      ]
    },
    "3922": {
      "op": "uncover 2",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item_end_offset%4#0",
        "item1%1#0",
        "item_start_offset%4#0"
      ]
    },
    "3924": {
      "op": "uncover 2",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item1%1#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "3926": {
      "op": "substring3",
      "defined_out": [
        "item0%1%0#0",
        "item0%2%0#0",
        "item1%0#0",
        "item1%2#0",
        "item2%0#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item2%0#0"
      ]
    },
    "3927": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%1%0#0",
        "item0%2%0#0",
        "item1%0#0",
        "item1%2#0",
        "item2%0%0#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item2%0%0#0"
      ]
    },
    "3930": {
      "op": "uncover 4",
      "defined_out": [
        "item0%2%0#0",
        "item1%0#0",
        "item1%2#0",
        "item2%0%0#0",
        "result.0.0#0"
      ],
      "stack_out": [
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item2%0%0#0",
        "result.0.0#0"
      ]
    },
    "3932": {
      "op": "swap",
      "stack_out": [
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "result.0.0#0",
        "item2%0%0#0"
      ]
    },
    "3933": {
      "op": "uncover 4",
      "defined_out": [
        "item0%2%0#0",
        "item1%2#0",
        "item2%0%0#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "item0%2%0#0",
        "item1%2#0",
        "result.0.0#0",
        "item2%0%0#0",
        "result.0.1#0"
      ]
    },
    "3935": {
      "op": "cover 2",
      "stack_out": [
        "item0%2%0#0",
        "item1%2#0",
        "result.0.1#0",
        "result.0.0#0",
        "item2%0%0#0"
      ]
    },
    "3937": {
      "op": "uncover 4",
      "defined_out": [
        "item1%2#0",
        "item2%0%0#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0"
      ],
      "stack_out": [
        "item1%2#0",
        "result.0.1#0",
        "result.0.0#0",
        "item2%0%0#0",
        "result.1.0#0"
      ]
    },
    "3939": {
      "op": "cover 3",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0",
        "result.0.0#0",
        "result.1.2#0"
      ]
    },
    "3941": {
      "op": "cover 4",
      "defined_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "s1#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0",
        "s1#0"
      ]
    },
    "3943": {
      "op": "cover 4",
      "defined_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "s1#0",
        "s2#0"
      ],
      "stack_out": [
        "s1#0",
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0",
        "s2#0"
      ]
    },
    "3945": {
      "op": "cover 4",
      "defined_out": [
        "result.1.1#0",
        "result.1.2#0",
        "s1#0",
        "s2#0",
        "u64_1#0"
      ],
      "stack_out": [
        "s2#0",
        "s1#0",
        "result.1.2#0",
        "result.1.1#0",
        "u64_1#0"
      ]
    },
    "3947": {
      "op": "cover 4",
      "defined_out": [
        "result.1.2#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "u64_1#0",
        "s2#0",
        "s1#0",
        "result.1.2#0",
        "u64_2#0"
      ]
    },
    "3949": {
      "op": "cover 4",
      "defined_out": [
        "bytez#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0",
        "bytez#0"
      ]
    },
    "3951": {
      "op": "cover 4",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0"
      ]
    },
    "3953": {
      "op": "bytec 14 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "bytez#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0",
        "\"echo: s1\""
      ]
    },
    "3955": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "s2#0",
        "tmp%3#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "tmp%3#0"
      ]
    },
    "3956": {
      "op": "assert",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0"
      ]
    },
    "3957": {
      "op": "bytec 30 // 0x00086563686f3a207332",
      "defined_out": [
        "0x00086563686f3a207332",
        "bytez#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "0x00086563686f3a207332"
      ]
    },
    "3959": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "tmp%4#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "tmp%4#0"
      ]
    },
    "3960": {
      "op": "assert",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0"
      ]
    },
    "3961": {
      "op": "intc_2 // 2",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "2"
      ]
    },
    "3962": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "tmp%5#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "tmp%5#0"
      ]
    },
    "3963": {
      "op": "assert",
      "defined_out": [
        "bytez#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "bytez#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "3964": {
      "op": "bytec 17 // 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003",
        "bytez#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "bytez#0",
        "reinterpret_biguint%0#0",
        "0x0000000000000003"
      ]
    },
    "3966": {
      "op": "b==",
      "defined_out": [
        "bytez#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%6#0"
      ]
    },
    "3967": {
      "op": "assert",
      "stack_out": [
        "bytez#0"
      ]
    },
    "3968": {
      "op": "bytec 31 // 0x6563686f3a2033",
      "defined_out": [
        "0x6563686f3a2033",
        "bytez#0"
      ],
      "stack_out": [
        "bytez#0",
        "0x6563686f3a2033"
      ]
    },
    "3970": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "3971": {
      "op": "assert",
      "stack_out": []
    },
    "3972": {
      "op": "itxn_begin"
    },
    "3973": {
      "op": "bytec 10 // \"s1\"",
      "defined_out": [
        "\"s1\""
      ],
      "stack_out": [
        "\"s1\""
      ]
    },
    "3975": {
      "op": "len",
      "defined_out": [
        "length%1#0"
      ],
      "stack_out": [
        "length%1#0"
      ]
    },
    "3976": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0"
      ],
      "stack_out": [
        "as_bytes%6#0"
      ]
    },
    "3977": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0"
      ],
      "stack_out": [
        "length_uint16%1#0"
      ]
    },
    "3980": {
      "op": "bytec 10 // \"s1\"",
      "stack_out": [
        "length_uint16%1#0",
        "\"s1\""
      ]
    },
    "3982": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "3983": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "4"
      ]
    },
    "3985": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "as_bytes%7#0"
      ]
    },
    "3986": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%1#0",
        "offset_as_uint16%5#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "offset_as_uint16%5#0"
      ]
    },
    "3989": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "encoded_value%1#0",
        "offset_as_uint16%5#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "offset_as_uint16%5#0",
        "0x"
      ]
    },
    "3990": {
      "op": "swap",
      "stack_out": [
        "encoded_value%1#0",
        "0x",
        "offset_as_uint16%5#0"
      ]
    },
    "3991": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "3992": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_value%1#0"
      ]
    },
    "3993": {
      "op": "dup",
      "defined_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_value%1#0",
        "encoded_value%1#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_value%1#0",
        "encoded_value%1#0 (copy)"
      ]
    },
    "3994": {
      "op": "len",
      "defined_out": [
        "data_length%5#0",
        "encoded_tuple_buffer%16#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_value%1#0",
        "data_length%5#0"
      ]
    },
    "3995": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_value%1#0",
        "data_length%5#0",
        "4"
      ]
    },
    "3997": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%9#0",
        "encoded_tuple_buffer%16#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_value%1#0",
        "current_tail_offset%9#0"
      ]
    },
    "3998": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "encoded_tuple_buffer%16#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_value%1#0",
        "as_bytes%8#0"
      ]
    },
    "3999": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_value%1#0",
        "offset_as_uint16%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_value%1#0",
        "offset_as_uint16%6#0"
      ]
    },
    "4002": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%1#0",
        "offset_as_uint16%6#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "4004": {
      "op": "swap",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%16#0",
        "offset_as_uint16%6#0"
      ]
    },
    "4005": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%17#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%17#0"
      ]
    },
    "4006": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%17#0",
        "encoded_value%1#0"
      ]
    },
    "4007": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%18#0"
      ]
    },
    "4008": {
      "op": "bytec 29 // 0x00027332",
      "defined_out": [
        "0x00027332",
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%18#0",
        "0x00027332"
      ]
    },
    "4010": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%19#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0"
      ]
    },
    "4011": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1",
        "encoded_tuple_buffer%19#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "1"
      ]
    },
    "4012": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "val_as_bytes%0#0"
      ]
    },
    "4013": {
      "op": "bytec 15 // 0x33",
      "defined_out": [
        "0x33",
        "encoded_tuple_buffer%19#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "val_as_bytes%0#0",
        "0x33"
      ]
    },
    "4015": {
      "op": "len",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "length%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "val_as_bytes%0#0",
        "length%2#0"
      ]
    },
    "4016": {
      "op": "itob",
      "defined_out": [
        "as_bytes%9#0",
        "encoded_tuple_buffer%19#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "val_as_bytes%0#0",
        "as_bytes%9#0"
      ]
    },
    "4017": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "length_uint16%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "val_as_bytes%0#0",
        "length_uint16%2#0"
      ]
    },
    "4020": {
      "op": "bytec 15 // 0x33",
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "val_as_bytes%0#0",
        "length_uint16%2#0",
        "0x33"
      ]
    },
    "4022": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "val_as_bytes%0#0",
        "encoded_value%2#0"
      ]
    },
    "4023": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "4024": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "4025": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_value%2#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "4026": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%21#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%21#0"
      ]
    },
    "4027": {
      "op": "bytec 13 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002",
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%21#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%21#0",
        "0x0000000000000002"
      ]
    },
    "4029": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%22#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%22#0"
      ]
    },
    "4030": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%22#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%22#0",
        "18"
      ]
    },
    "4032": {
      "op": "itob",
      "defined_out": [
        "as_bytes%10#0",
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%22#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%22#0",
        "as_bytes%10#0"
      ]
    },
    "4033": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%22#0",
        "encoded_value%2#0",
        "offset_as_uint16%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%22#0",
        "offset_as_uint16%7#0"
      ]
    },
    "4036": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%23#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%23#0"
      ]
    },
    "4037": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%23#0",
        "encoded_value%2#0"
      ]
    },
    "4038": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0"
      ]
    },
    "4039": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "4"
      ]
    },
    "4041": {
      "op": "itob",
      "defined_out": [
        "as_bytes%11#0",
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "as_bytes%11#0"
      ]
    },
    "4042": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "offset_as_uint16%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "offset_as_uint16%8#0"
      ]
    },
    "4045": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "offset_as_uint16%8#0",
        "0x"
      ]
    },
    "4046": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "0x",
        "offset_as_uint16%8#0"
      ]
    },
    "4047": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "encoded_tuple_buffer%26#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "encoded_tuple_buffer%26#0"
      ]
    },
    "4048": {
      "op": "dig 2",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%19#0 (copy)",
        "encoded_tuple_buffer%24#0",
        "encoded_tuple_buffer%26#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "encoded_tuple_buffer%26#0",
        "encoded_tuple_buffer%19#0 (copy)"
      ]
    },
    "4050": {
      "op": "len",
      "defined_out": [
        "data_length%8#0",
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "encoded_tuple_buffer%26#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "encoded_tuple_buffer%26#0",
        "data_length%8#0"
      ]
    },
    "4051": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "encoded_tuple_buffer%26#0",
        "data_length%8#0",
        "4"
      ]
    },
    "4053": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%14#0",
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "encoded_tuple_buffer%26#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "encoded_tuple_buffer%26#0",
        "current_tail_offset%14#0"
      ]
    },
    "4054": {
      "op": "itob",
      "defined_out": [
        "as_bytes%12#0",
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "encoded_tuple_buffer%26#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "encoded_tuple_buffer%26#0",
        "as_bytes%12#0"
      ]
    },
    "4055": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "encoded_tuple_buffer%26#0",
        "offset_as_uint16%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "encoded_tuple_buffer%26#0",
        "offset_as_uint16%9#0"
      ]
    },
    "4058": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "encoded_tuple_buffer%27#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%24#0",
        "encoded_tuple_buffer%27#0"
      ]
    },
    "4059": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%24#0",
        "encoded_tuple_buffer%27#0",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "4061": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%24#0",
        "encoded_tuple_buffer%28#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%24#0",
        "encoded_tuple_buffer%28#0"
      ]
    },
    "4062": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%28#0",
        "encoded_tuple_buffer%24#0"
      ]
    },
    "4063": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4064": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "4066": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4068": {
      "op": "bytec 23 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "defined_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "4070": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4072": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4074": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "4075": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4077": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4078": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4080": {
      "block": "test_nested_tuples_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "4081": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "4083": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "4084": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "4087": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "awst_tmp%1#0"
      ]
    },
    "4088": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "4091": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "4092": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "4093": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "4094": {
      "op": "dup",
      "defined_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "4095": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "0"
      ]
    },
    "4096": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%5#0"
      ]
    },
    "4097": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%8#0"
      ]
    },
    "4098": {
      "op": "dup",
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "4099": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%5#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "2"
      ]
    },
    "4100": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%5#0",
        "item_start_offset%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%8#0",
        "item_end_offset%5#0"
      ]
    },
    "4101": {
      "op": "dig 1",
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%8#0",
        "item_end_offset%5#0",
        "tmp%8#0 (copy)"
      ]
    },
    "4103": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "tmp%8#0 (copy)",
        "item_start_offset%5#0"
      ]
    },
    "4105": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "item_start_offset%5#0",
        "item_end_offset%5#0"
      ]
    },
    "4107": {
      "op": "substring3",
      "defined_out": [
        "item0%3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item0%3#0"
      ]
    },
    "4108": {
      "op": "dup",
      "defined_out": [
        "item0%3#0",
        "item0%3#0 (copy)",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item0%3#0",
        "item0%3#0 (copy)"
      ]
    },
    "4109": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%8#0",
        "item0%3#0",
        "item0%3#0 (copy)",
        "0"
      ]
    },
    "4110": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%3#0",
        "item_start_offset%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item0%3#0",
        "item_start_offset%6#0"
      ]
    },
    "4111": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%6#0",
        "item0%3#0"
      ]
    },
    "4112": {
      "op": "dup",
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%6#0",
        "item0%3#0",
        "item0%3#0 (copy)"
      ]
    },
    "4113": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%6#0",
        "item0%3#0",
        "item0%3#0 (copy)",
        "2"
      ]
    },
    "4114": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%3#0",
        "item_end_offset%6#0",
        "item_start_offset%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%6#0",
        "item0%3#0",
        "item_end_offset%6#0"
      ]
    },
    "4115": {
      "op": "dig 1",
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%6#0",
        "item0%3#0",
        "item_end_offset%6#0",
        "item0%3#0 (copy)"
      ]
    },
    "4117": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%8#0",
        "item0%3#0",
        "item_end_offset%6#0",
        "item0%3#0 (copy)",
        "item_start_offset%6#0"
      ]
    },
    "4119": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "item0%3#0",
        "item0%3#0 (copy)",
        "item_start_offset%6#0",
        "item_end_offset%6#0"
      ]
    },
    "4121": {
      "op": "substring3",
      "defined_out": [
        "item0%3#0",
        "item0%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item0%3#0",
        "item0%4#0"
      ]
    },
    "4122": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%3#0",
        "item0%4%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item0%3#0",
        "item0%4%0#0"
      ]
    },
    "4125": {
      "op": "cover 2",
      "stack_out": [
        "item0%4%0#0",
        "tmp%8#0",
        "item0%3#0"
      ]
    },
    "4127": {
      "op": "dup",
      "stack_out": [
        "item0%4%0#0",
        "tmp%8#0",
        "item0%3#0",
        "item0%3#0 (copy)"
      ]
    },
    "4128": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item0%4%0#0",
        "tmp%8#0",
        "item0%3#0",
        "item0%3#0 (copy)",
        "2"
      ]
    },
    "4129": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%3#0",
        "item0%4%0#0",
        "item_start_offset%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "tmp%8#0",
        "item0%3#0",
        "item_start_offset%7#0"
      ]
    },
    "4130": {
      "op": "swap",
      "stack_out": [
        "item0%4%0#0",
        "tmp%8#0",
        "item_start_offset%7#0",
        "item0%3#0"
      ]
    },
    "4131": {
      "op": "dup",
      "stack_out": [
        "item0%4%0#0",
        "tmp%8#0",
        "item_start_offset%7#0",
        "item0%3#0",
        "item0%3#0 (copy)"
      ]
    },
    "4132": {
      "op": "len",
      "defined_out": [
        "item0%3#0",
        "item0%4%0#0",
        "item_end_offset%7#0",
        "item_start_offset%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "tmp%8#0",
        "item_start_offset%7#0",
        "item0%3#0",
        "item_end_offset%7#0"
      ]
    },
    "4133": {
      "op": "swap",
      "stack_out": [
        "item0%4%0#0",
        "tmp%8#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0",
        "item0%3#0"
      ]
    },
    "4134": {
      "op": "uncover 2",
      "stack_out": [
        "item0%4%0#0",
        "tmp%8#0",
        "item_end_offset%7#0",
        "item0%3#0",
        "item_start_offset%7#0"
      ]
    },
    "4136": {
      "op": "uncover 2",
      "stack_out": [
        "item0%4%0#0",
        "tmp%8#0",
        "item0%3#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0"
      ]
    },
    "4138": {
      "op": "substring3",
      "defined_out": [
        "item0%4%0#0",
        "item1%3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "tmp%8#0",
        "item1%3#0"
      ]
    },
    "4139": {
      "op": "swap",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "tmp%8#0"
      ]
    },
    "4140": {
      "op": "dup",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "4141": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "2"
      ]
    },
    "4142": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item_start_offset%8#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "tmp%8#0",
        "item_start_offset%8#0"
      ]
    },
    "4143": {
      "op": "swap",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item_start_offset%8#0",
        "tmp%8#0"
      ]
    },
    "4144": {
      "op": "dup",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item_start_offset%8#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "4145": {
      "op": "len",
      "defined_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item_end_offset%8#0",
        "item_start_offset%8#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item_start_offset%8#0",
        "tmp%8#0",
        "item_end_offset%8#0"
      ]
    },
    "4146": {
      "op": "swap",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item_start_offset%8#0",
        "item_end_offset%8#0",
        "tmp%8#0"
      ]
    },
    "4147": {
      "op": "uncover 2",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item_end_offset%8#0",
        "tmp%8#0",
        "item_start_offset%8#0"
      ]
    },
    "4149": {
      "op": "uncover 2",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "tmp%8#0",
        "item_start_offset%8#0",
        "item_end_offset%8#0"
      ]
    },
    "4151": {
      "op": "substring3",
      "defined_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item1%4#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item1%4#0"
      ]
    },
    "4152": {
      "op": "dup",
      "defined_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item1%4#0",
        "item1%4#0 (copy)"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item1%4#0",
        "item1%4#0 (copy)"
      ]
    },
    "4153": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item1%4#0",
        "item1%4#0 (copy)",
        "0"
      ]
    },
    "4154": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "8",
        "item0%4%0#0",
        "item1%3#0",
        "item1%4#0",
        "item1%4#0 (copy)"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item1%4#0",
        "item1%4#0 (copy)",
        "0",
        "8"
      ]
    },
    "4156": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%4%0#0",
        "item0%5#0",
        "item1%3#0",
        "item1%4#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item1%4#0",
        "item0%5#0"
      ]
    },
    "4157": {
      "op": "btoi",
      "defined_out": [
        "item0%4%0#0",
        "item0%5%0#0",
        "item1%3#0",
        "item1%4#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item1%4#0",
        "item0%5%0#0"
      ]
    },
    "4158": {
      "op": "swap",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%4#0"
      ]
    },
    "4159": {
      "op": "dup",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%4#0",
        "item1%4#0 (copy)"
      ]
    },
    "4160": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%4#0",
        "item1%4#0 (copy)",
        "8"
      ]
    },
    "4162": {
      "op": "dup",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%4#0",
        "item1%4#0 (copy)",
        "8",
        "8"
      ]
    },
    "4163": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%4%0#0",
        "item0%5%0#0",
        "item1%3#0",
        "item1%4#0",
        "item1%5#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%4#0",
        "item1%5#0"
      ]
    },
    "4164": {
      "op": "swap",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%5#0",
        "item1%4#0"
      ]
    },
    "4165": {
      "op": "dup",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%5#0",
        "item1%4#0",
        "item1%4#0 (copy)"
      ]
    },
    "4166": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "item0%4%0#0",
        "item0%5%0#0",
        "item1%3#0",
        "item1%4#0",
        "item1%4#0 (copy)",
        "item1%5#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%5#0",
        "item1%4#0",
        "item1%4#0 (copy)",
        "16"
      ]
    },
    "4168": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%4%0#0",
        "item0%5%0#0",
        "item1%3#0",
        "item1%4#0",
        "item1%5#0",
        "item_start_offset%9#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%5#0",
        "item1%4#0",
        "item_start_offset%9#0"
      ]
    },
    "4169": {
      "op": "swap",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%5#0",
        "item_start_offset%9#0",
        "item1%4#0"
      ]
    },
    "4170": {
      "op": "dup",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%5#0",
        "item_start_offset%9#0",
        "item1%4#0",
        "item1%4#0 (copy)"
      ]
    },
    "4171": {
      "op": "len",
      "defined_out": [
        "item0%4%0#0",
        "item0%5%0#0",
        "item1%3#0",
        "item1%4#0",
        "item1%5#0",
        "item_end_offset%9#0",
        "item_start_offset%9#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%5#0",
        "item_start_offset%9#0",
        "item1%4#0",
        "item_end_offset%9#0"
      ]
    },
    "4172": {
      "op": "swap",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%5#0",
        "item_start_offset%9#0",
        "item_end_offset%9#0",
        "item1%4#0"
      ]
    },
    "4173": {
      "op": "uncover 2",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%5#0",
        "item_end_offset%9#0",
        "item1%4#0",
        "item_start_offset%9#0"
      ]
    },
    "4175": {
      "op": "uncover 2",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%5#0",
        "item1%4#0",
        "item_start_offset%9#0",
        "item_end_offset%9#0"
      ]
    },
    "4177": {
      "op": "substring3",
      "defined_out": [
        "item0%4%0#0",
        "item0%5%0#0",
        "item1%3#0",
        "item1%5#0",
        "item2%1#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%5#0",
        "item2%1#0"
      ]
    },
    "4178": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%4%0#0",
        "item0%5%0#0",
        "item1%3#0",
        "item1%5#0",
        "item2%1%0#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%5#0",
        "item2%1%0#0"
      ]
    },
    "4181": {
      "op": "uncover 4",
      "defined_out": [
        "item0%5%0#0",
        "item1%3#0",
        "item1%5#0",
        "item2%1%0#0",
        "result.0.0#0"
      ],
      "stack_out": [
        "item1%3#0",
        "item0%5%0#0",
        "item1%5#0",
        "item2%1%0#0",
        "result.0.0#0"
      ]
    },
    "4183": {
      "op": "swap",
      "stack_out": [
        "item1%3#0",
        "item0%5%0#0",
        "item1%5#0",
        "result.0.0#0",
        "item2%1%0#0"
      ]
    },
    "4184": {
      "op": "uncover 4",
      "defined_out": [
        "item0%5%0#0",
        "item1%5#0",
        "item2%1%0#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "item0%5%0#0",
        "item1%5#0",
        "result.0.0#0",
        "item2%1%0#0",
        "result.0.1#0"
      ]
    },
    "4186": {
      "op": "cover 2",
      "stack_out": [
        "item0%5%0#0",
        "item1%5#0",
        "result.0.1#0",
        "result.0.0#0",
        "item2%1%0#0"
      ]
    },
    "4188": {
      "op": "uncover 4",
      "defined_out": [
        "item1%5#0",
        "item2%1%0#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0"
      ],
      "stack_out": [
        "item1%5#0",
        "result.0.1#0",
        "result.0.0#0",
        "item2%1%0#0",
        "result.1.0#0"
      ]
    },
    "4190": {
      "op": "cover 3",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0",
        "result.0.0#0",
        "result.1.2#0"
      ]
    },
    "4192": {
      "op": "cover 4",
      "defined_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "s1#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0",
        "s1#0"
      ]
    },
    "4194": {
      "op": "cover 4",
      "defined_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "s1#0",
        "s2#0"
      ],
      "stack_out": [
        "s1#0",
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0",
        "s2#0"
      ]
    },
    "4196": {
      "op": "cover 4",
      "defined_out": [
        "result.1.1#0",
        "result.1.2#0",
        "s1#0",
        "s2#0",
        "u64_1#0"
      ],
      "stack_out": [
        "s2#0",
        "s1#0",
        "result.1.2#0",
        "result.1.1#0",
        "u64_1#0"
      ]
    },
    "4198": {
      "op": "cover 4",
      "defined_out": [
        "result.1.2#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "u64_1#0",
        "s2#0",
        "s1#0",
        "result.1.2#0",
        "u64_2#0"
      ]
    },
    "4200": {
      "op": "cover 4",
      "defined_out": [
        "bytez#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0",
        "bytez#0"
      ]
    },
    "4202": {
      "op": "cover 4",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0"
      ]
    },
    "4204": {
      "op": "bytec 14 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "bytez#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0",
        "\"echo: s1\""
      ]
    },
    "4206": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "s2#0",
        "tmp%11#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "tmp%11#0"
      ]
    },
    "4207": {
      "op": "assert",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0"
      ]
    },
    "4208": {
      "op": "bytec 30 // 0x00086563686f3a207332",
      "defined_out": [
        "0x00086563686f3a207332",
        "bytez#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "0x00086563686f3a207332"
      ]
    },
    "4210": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "tmp%12#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "tmp%12#0"
      ]
    },
    "4211": {
      "op": "assert",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0"
      ]
    },
    "4212": {
      "op": "intc_2 // 2",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "2"
      ]
    },
    "4213": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "tmp%13#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "tmp%13#0"
      ]
    },
    "4214": {
      "op": "assert",
      "defined_out": [
        "bytez#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "bytez#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "4215": {
      "op": "bytec 17 // 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003",
        "bytez#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "bytez#0",
        "reinterpret_biguint%2#0",
        "0x0000000000000003"
      ]
    },
    "4217": {
      "op": "b==",
      "defined_out": [
        "bytez#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%14#0"
      ]
    },
    "4218": {
      "op": "assert",
      "stack_out": [
        "bytez#0"
      ]
    },
    "4219": {
      "op": "bytec 31 // 0x6563686f3a2033",
      "defined_out": [
        "0x6563686f3a2033",
        "bytez#0"
      ],
      "stack_out": [
        "bytez#0",
        "0x6563686f3a2033"
      ]
    },
    "4221": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "4222": {
      "op": "assert",
      "stack_out": []
    },
    "4223": {
      "op": "itxn_begin"
    },
    "4224": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "4226": {
      "op": "itob",
      "defined_out": [
        "as_bytes%13#0"
      ],
      "stack_out": [
        "as_bytes%13#0"
      ]
    },
    "4227": {
      "op": "extract 6 2",
      "defined_out": [
        "offset_as_uint16%10#0"
      ],
      "stack_out": [
        "offset_as_uint16%10#0"
      ]
    },
    "4230": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "offset_as_uint16%10#0"
      ],
      "stack_out": [
        "offset_as_uint16%10#0",
        "0x"
      ]
    },
    "4231": {
      "op": "swap",
      "stack_out": [
        "0x",
        "offset_as_uint16%10#0"
      ]
    },
    "4232": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%31#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%31#0"
      ]
    },
    "4233": {
      "op": "bytec 32 // 0x0003733162",
      "defined_out": [
        "0x0003733162",
        "encoded_tuple_buffer%31#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%31#0",
        "0x0003733162"
      ]
    },
    "4235": {
      "op": "len",
      "defined_out": [
        "data_length%10#0",
        "encoded_tuple_buffer%31#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%31#0",
        "data_length%10#0"
      ]
    },
    "4236": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_tuple_buffer%31#0",
        "data_length%10#0",
        "4"
      ]
    },
    "4238": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%17#0",
        "encoded_tuple_buffer%31#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%31#0",
        "current_tail_offset%17#0"
      ]
    },
    "4239": {
      "op": "itob",
      "defined_out": [
        "as_bytes%14#0",
        "encoded_tuple_buffer%31#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%31#0",
        "as_bytes%14#0"
      ]
    },
    "4240": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%31#0",
        "offset_as_uint16%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%31#0",
        "offset_as_uint16%11#0"
      ]
    },
    "4243": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%32#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%32#0"
      ]
    },
    "4244": {
      "op": "bytec 32 // 0x0003733162",
      "stack_out": [
        "encoded_tuple_buffer%32#0",
        "0x0003733162"
      ]
    },
    "4246": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%33#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%33#0"
      ]
    },
    "4247": {
      "op": "pushbytes 0x0003733262",
      "defined_out": [
        "0x0003733262",
        "encoded_tuple_buffer%33#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%33#0",
        "0x0003733262"
      ]
    },
    "4254": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%34#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0"
      ]
    },
    "4255": {
      "op": "bytec 33 // 0x3362",
      "defined_out": [
        "0x3362",
        "encoded_tuple_buffer%34#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "0x3362"
      ]
    },
    "4257": {
      "op": "len",
      "defined_out": [
        "encoded_tuple_buffer%34#0",
        "length%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "length%3#0"
      ]
    },
    "4258": {
      "op": "itob",
      "defined_out": [
        "as_bytes%15#0",
        "encoded_tuple_buffer%34#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "as_bytes%15#0"
      ]
    },
    "4259": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%34#0",
        "length_uint16%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "length_uint16%3#0"
      ]
    },
    "4262": {
      "op": "bytec 33 // 0x3362",
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "length_uint16%3#0",
        "0x3362"
      ]
    },
    "4264": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_value%3#0"
      ]
    },
    "4265": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_value%3#0",
        "0x"
      ]
    },
    "4266": {
      "op": "bytec 26 // 0x000000000000000b",
      "defined_out": [
        "0x",
        "0x000000000000000b",
        "encoded_tuple_buffer%34#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_value%3#0",
        "0x",
        "0x000000000000000b"
      ]
    },
    "4268": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%36#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%36#0"
      ]
    },
    "4269": {
      "op": "pushbytes 0x0000000000000015",
      "defined_out": [
        "0x0000000000000015",
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%36#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%36#0",
        "0x0000000000000015"
      ]
    },
    "4279": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%37#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%37#0"
      ]
    },
    "4280": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%37#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%37#0",
        "18"
      ]
    },
    "4282": {
      "op": "itob",
      "defined_out": [
        "as_bytes%16#0",
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%37#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%37#0",
        "as_bytes%16#0"
      ]
    },
    "4283": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%37#0",
        "encoded_value%3#0",
        "offset_as_uint16%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%37#0",
        "offset_as_uint16%12#0"
      ]
    },
    "4286": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%38#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%38#0"
      ]
    },
    "4287": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%38#0",
        "encoded_value%3#0"
      ]
    },
    "4288": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0"
      ]
    },
    "4289": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "4"
      ]
    },
    "4291": {
      "op": "itob",
      "defined_out": [
        "as_bytes%17#0",
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "as_bytes%17#0"
      ]
    },
    "4292": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "offset_as_uint16%13#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "offset_as_uint16%13#0"
      ]
    },
    "4295": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "offset_as_uint16%13#0",
        "0x"
      ]
    },
    "4296": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "0x",
        "offset_as_uint16%13#0"
      ]
    },
    "4297": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%41#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%41#0"
      ]
    },
    "4298": {
      "op": "dig 2",
      "defined_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%34#0 (copy)",
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%41#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%41#0",
        "encoded_tuple_buffer%34#0 (copy)"
      ]
    },
    "4300": {
      "op": "len",
      "defined_out": [
        "data_length%13#0",
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%41#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%41#0",
        "data_length%13#0"
      ]
    },
    "4301": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%41#0",
        "data_length%13#0",
        "4"
      ]
    },
    "4303": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%22#0",
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%41#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%41#0",
        "current_tail_offset%22#0"
      ]
    },
    "4304": {
      "op": "itob",
      "defined_out": [
        "as_bytes%18#0",
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%41#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%41#0",
        "as_bytes%18#0"
      ]
    },
    "4305": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%41#0",
        "offset_as_uint16%14#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%41#0",
        "offset_as_uint16%14#0"
      ]
    },
    "4308": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%42#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%34#0",
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%42#0"
      ]
    },
    "4309": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%42#0",
        "encoded_tuple_buffer%34#0"
      ]
    },
    "4311": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%43#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%43#0"
      ]
    },
    "4312": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%43#0",
        "encoded_tuple_buffer%39#0"
      ]
    },
    "4313": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4314": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "4316": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4318": {
      "op": "bytec 23 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "defined_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "4320": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4322": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4324": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "4325": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4327": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4328": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4330": {
      "block": "test_nested_tuples_next_txn@3",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "4331": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "4333": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "4334": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%16#0"
      ]
    },
    "4337": {
      "op": "swap",
      "stack_out": [
        "tmp%16#0",
        "awst_tmp%2#0"
      ]
    },
    "4338": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "4341": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "4342": {
      "op": "==",
      "defined_out": [
        "tmp%16#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%18#0"
      ]
    },
    "4343": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "4344": {
      "op": "dup",
      "defined_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "4345": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "0"
      ]
    },
    "4346": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%10#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%10#0"
      ]
    },
    "4347": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%10#0",
        "tmp%16#0"
      ]
    },
    "4348": {
      "op": "dup",
      "stack_out": [
        "item_start_offset%10#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "4349": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%10#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "item_start_offset%10#0",
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "2"
      ]
    },
    "4350": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%10#0",
        "item_start_offset%10#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "item_start_offset%10#0",
        "tmp%16#0",
        "item_end_offset%10#0"
      ]
    },
    "4351": {
      "op": "dig 1",
      "stack_out": [
        "item_start_offset%10#0",
        "tmp%16#0",
        "item_end_offset%10#0",
        "tmp%16#0 (copy)"
      ]
    },
    "4353": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "tmp%16#0 (copy)",
        "item_start_offset%10#0"
      ]
    },
    "4355": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "item_start_offset%10#0",
        "item_end_offset%10#0"
      ]
    },
    "4357": {
      "op": "substring3",
      "defined_out": [
        "item0%6#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item0%6#0"
      ]
    },
    "4358": {
      "op": "dup",
      "defined_out": [
        "item0%6#0",
        "item0%6#0 (copy)",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item0%6#0",
        "item0%6#0 (copy)"
      ]
    },
    "4359": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%16#0",
        "item0%6#0",
        "item0%6#0 (copy)",
        "0"
      ]
    },
    "4360": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%6#0",
        "item_start_offset%11#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item0%6#0",
        "item_start_offset%11#0"
      ]
    },
    "4361": {
      "op": "swap",
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%11#0",
        "item0%6#0"
      ]
    },
    "4362": {
      "op": "dup",
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%11#0",
        "item0%6#0",
        "item0%6#0 (copy)"
      ]
    },
    "4363": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%11#0",
        "item0%6#0",
        "item0%6#0 (copy)",
        "2"
      ]
    },
    "4364": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%6#0",
        "item_end_offset%11#0",
        "item_start_offset%11#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%11#0",
        "item0%6#0",
        "item_end_offset%11#0"
      ]
    },
    "4365": {
      "op": "dig 1",
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%11#0",
        "item0%6#0",
        "item_end_offset%11#0",
        "item0%6#0 (copy)"
      ]
    },
    "4367": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%16#0",
        "item0%6#0",
        "item_end_offset%11#0",
        "item0%6#0 (copy)",
        "item_start_offset%11#0"
      ]
    },
    "4369": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%16#0",
        "item0%6#0",
        "item0%6#0 (copy)",
        "item_start_offset%11#0",
        "item_end_offset%11#0"
      ]
    },
    "4371": {
      "op": "substring3",
      "defined_out": [
        "item0%6#0",
        "item0%7#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item0%6#0",
        "item0%7#0"
      ]
    },
    "4372": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%6#0",
        "item0%7%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item0%6#0",
        "item0%7%0#0"
      ]
    },
    "4375": {
      "op": "cover 2",
      "stack_out": [
        "item0%7%0#0",
        "tmp%16#0",
        "item0%6#0"
      ]
    },
    "4377": {
      "op": "dup",
      "stack_out": [
        "item0%7%0#0",
        "tmp%16#0",
        "item0%6#0",
        "item0%6#0 (copy)"
      ]
    },
    "4378": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item0%7%0#0",
        "tmp%16#0",
        "item0%6#0",
        "item0%6#0 (copy)",
        "2"
      ]
    },
    "4379": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%6#0",
        "item0%7%0#0",
        "item_start_offset%12#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "item0%7%0#0",
        "tmp%16#0",
        "item0%6#0",
        "item_start_offset%12#0"
      ]
    },
    "4380": {
      "op": "swap",
      "stack_out": [
        "item0%7%0#0",
        "tmp%16#0",
        "item_start_offset%12#0",
        "item0%6#0"
      ]
    },
    "4381": {
      "op": "dup",
      "stack_out": [
        "item0%7%0#0",
        "tmp%16#0",
        "item_start_offset%12#0",
        "item0%6#0",
        "item0%6#0 (copy)"
      ]
    },
    "4382": {
      "op": "len",
      "defined_out": [
        "item0%6#0",
        "item0%7%0#0",
        "item_end_offset%12#0",
        "item_start_offset%12#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "item0%7%0#0",
        "tmp%16#0",
        "item_start_offset%12#0",
        "item0%6#0",
        "item_end_offset%12#0"
      ]
    },
    "4383": {
      "op": "swap",
      "stack_out": [
        "item0%7%0#0",
        "tmp%16#0",
        "item_start_offset%12#0",
        "item_end_offset%12#0",
        "item0%6#0"
      ]
    },
    "4384": {
      "op": "uncover 2",
      "stack_out": [
        "item0%7%0#0",
        "tmp%16#0",
        "item_end_offset%12#0",
        "item0%6#0",
        "item_start_offset%12#0"
      ]
    },
    "4386": {
      "op": "uncover 2",
      "stack_out": [
        "item0%7%0#0",
        "tmp%16#0",
        "item0%6#0",
        "item_start_offset%12#0",
        "item_end_offset%12#0"
      ]
    },
    "4388": {
      "op": "substring3",
      "defined_out": [
        "item0%7%0#0",
        "item1%6#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "item0%7%0#0",
        "tmp%16#0",
        "item1%6#0"
      ]
    },
    "4389": {
      "op": "swap",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "tmp%16#0"
      ]
    },
    "4390": {
      "op": "dup",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "4391": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "2"
      ]
    },
    "4392": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item_start_offset%13#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "tmp%16#0",
        "item_start_offset%13#0"
      ]
    },
    "4393": {
      "op": "swap",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item_start_offset%13#0",
        "tmp%16#0"
      ]
    },
    "4394": {
      "op": "dup",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item_start_offset%13#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "4395": {
      "op": "len",
      "defined_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item_end_offset%13#0",
        "item_start_offset%13#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item_start_offset%13#0",
        "tmp%16#0",
        "item_end_offset%13#0"
      ]
    },
    "4396": {
      "op": "swap",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item_start_offset%13#0",
        "item_end_offset%13#0",
        "tmp%16#0"
      ]
    },
    "4397": {
      "op": "uncover 2",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item_end_offset%13#0",
        "tmp%16#0",
        "item_start_offset%13#0"
      ]
    },
    "4399": {
      "op": "uncover 2",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "tmp%16#0",
        "item_start_offset%13#0",
        "item_end_offset%13#0"
      ]
    },
    "4401": {
      "op": "substring3",
      "defined_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item1%7#0"
      ],
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item1%7#0"
      ]
    },
    "4402": {
      "op": "dup",
      "defined_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item1%7#0",
        "item1%7#0 (copy)"
      ],
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item1%7#0",
        "item1%7#0 (copy)"
      ]
    },
    "4403": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item1%7#0",
        "item1%7#0 (copy)",
        "0"
      ]
    },
    "4404": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "8",
        "item0%7%0#0",
        "item1%6#0",
        "item1%7#0",
        "item1%7#0 (copy)"
      ],
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item1%7#0",
        "item1%7#0 (copy)",
        "0",
        "8"
      ]
    },
    "4406": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%7%0#0",
        "item0%8#0",
        "item1%6#0",
        "item1%7#0"
      ],
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item1%7#0",
        "item0%8#0"
      ]
    },
    "4407": {
      "op": "btoi",
      "defined_out": [
        "item0%7%0#0",
        "item0%8%0#0",
        "item1%6#0",
        "item1%7#0"
      ],
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item1%7#0",
        "item0%8%0#0"
      ]
    },
    "4408": {
      "op": "swap",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item0%8%0#0",
        "item1%7#0"
      ]
    },
    "4409": {
      "op": "dup",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item0%8%0#0",
        "item1%7#0",
        "item1%7#0 (copy)"
      ]
    },
    "4410": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item0%8%0#0",
        "item1%7#0",
        "item1%7#0 (copy)",
        "8"
      ]
    },
    "4412": {
      "op": "dup",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item0%8%0#0",
        "item1%7#0",
        "item1%7#0 (copy)",
        "8",
        "8"
      ]
    },
    "4413": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%7%0#0",
        "item0%8%0#0",
        "item1%6#0",
        "item1%7#0",
        "item1%8#0"
      ],
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item0%8%0#0",
        "item1%7#0",
        "item1%8#0"
      ]
    },
    "4414": {
      "op": "swap",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item0%8%0#0",
        "item1%8#0",
        "item1%7#0"
      ]
    },
    "4415": {
      "op": "dup",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item0%8%0#0",
        "item1%8#0",
        "item1%7#0",
        "item1%7#0 (copy)"
      ]
    },
    "4416": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "item0%7%0#0",
        "item0%8%0#0",
        "item1%6#0",
        "item1%7#0",
        "item1%7#0 (copy)",
        "item1%8#0"
      ],
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item0%8%0#0",
        "item1%8#0",
        "item1%7#0",
        "item1%7#0 (copy)",
        "16"
      ]
    },
    "4418": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%7%0#0",
        "item0%8%0#0",
        "item1%6#0",
        "item1%7#0",
        "item1%8#0",
        "item_start_offset%14#0"
      ],
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item0%8%0#0",
        "item1%8#0",
        "item1%7#0",
        "item_start_offset%14#0"
      ]
    },
    "4419": {
      "op": "swap",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item0%8%0#0",
        "item1%8#0",
        "item_start_offset%14#0",
        "item1%7#0"
      ]
    },
    "4420": {
      "op": "dup",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item0%8%0#0",
        "item1%8#0",
        "item_start_offset%14#0",
        "item1%7#0",
        "item1%7#0 (copy)"
      ]
    },
    "4421": {
      "op": "len",
      "defined_out": [
        "item0%7%0#0",
        "item0%8%0#0",
        "item1%6#0",
        "item1%7#0",
        "item1%8#0",
        "item_end_offset%14#0",
        "item_start_offset%14#0"
      ],
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item0%8%0#0",
        "item1%8#0",
        "item_start_offset%14#0",
        "item1%7#0",
        "item_end_offset%14#0"
      ]
    },
    "4422": {
      "op": "swap",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item0%8%0#0",
        "item1%8#0",
        "item_start_offset%14#0",
        "item_end_offset%14#0",
        "item1%7#0"
      ]
    },
    "4423": {
      "op": "uncover 2",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item0%8%0#0",
        "item1%8#0",
        "item_end_offset%14#0",
        "item1%7#0",
        "item_start_offset%14#0"
      ]
    },
    "4425": {
      "op": "uncover 2",
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item0%8%0#0",
        "item1%8#0",
        "item1%7#0",
        "item_start_offset%14#0",
        "item_end_offset%14#0"
      ]
    },
    "4427": {
      "op": "substring3",
      "defined_out": [
        "item0%7%0#0",
        "item0%8%0#0",
        "item1%6#0",
        "item1%8#0",
        "item2%2#0"
      ],
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item0%8%0#0",
        "item1%8#0",
        "item2%2#0"
      ]
    },
    "4428": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%7%0#0",
        "item0%8%0#0",
        "item1%6#0",
        "item1%8#0",
        "item2%2%0#0"
      ],
      "stack_out": [
        "item0%7%0#0",
        "item1%6#0",
        "item0%8%0#0",
        "item1%8#0",
        "item2%2%0#0"
      ]
    },
    "4431": {
      "op": "uncover 4",
      "defined_out": [
        "item0%8%0#0",
        "item1%6#0",
        "item1%8#0",
        "item2%2%0#0",
        "result.0.0#0"
      ],
      "stack_out": [
        "item1%6#0",
        "item0%8%0#0",
        "item1%8#0",
        "item2%2%0#0",
        "result.0.0#0"
      ]
    },
    "4433": {
      "op": "swap",
      "stack_out": [
        "item1%6#0",
        "item0%8%0#0",
        "item1%8#0",
        "result.0.0#0",
        "item2%2%0#0"
      ]
    },
    "4434": {
      "op": "uncover 4",
      "defined_out": [
        "item0%8%0#0",
        "item1%8#0",
        "item2%2%0#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "item0%8%0#0",
        "item1%8#0",
        "result.0.0#0",
        "item2%2%0#0",
        "result.0.1#0"
      ]
    },
    "4436": {
      "op": "cover 2",
      "stack_out": [
        "item0%8%0#0",
        "item1%8#0",
        "result.0.1#0",
        "result.0.0#0",
        "item2%2%0#0"
      ]
    },
    "4438": {
      "op": "uncover 4",
      "defined_out": [
        "item1%8#0",
        "item2%2%0#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0"
      ],
      "stack_out": [
        "item1%8#0",
        "result.0.1#0",
        "result.0.0#0",
        "item2%2%0#0",
        "result.1.0#0"
      ]
    },
    "4440": {
      "op": "cover 3",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0",
        "result.0.0#0",
        "result.1.2#0"
      ]
    },
    "4442": {
      "op": "cover 4",
      "defined_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "s1#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0",
        "s1#0"
      ]
    },
    "4444": {
      "op": "cover 4",
      "defined_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "s1#0",
        "s2#0"
      ],
      "stack_out": [
        "s1#0",
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0",
        "s2#0"
      ]
    },
    "4446": {
      "op": "cover 4",
      "defined_out": [
        "result.1.1#0",
        "result.1.2#0",
        "s1#0",
        "s2#0",
        "u64_1#0"
      ],
      "stack_out": [
        "s2#0",
        "s1#0",
        "result.1.2#0",
        "result.1.1#0",
        "u64_1#0"
      ]
    },
    "4448": {
      "op": "cover 4",
      "defined_out": [
        "result.1.2#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "u64_1#0",
        "s2#0",
        "s1#0",
        "result.1.2#0",
        "u64_2#0"
      ]
    },
    "4450": {
      "op": "cover 4",
      "defined_out": [
        "bytez#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0",
        "bytez#0"
      ]
    },
    "4452": {
      "op": "cover 4",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0"
      ]
    },
    "4454": {
      "op": "pushbytes \"echo: s1b\"",
      "defined_out": [
        "\"echo: s1b\"",
        "bytez#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0",
        "\"echo: s1b\""
      ]
    },
    "4465": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "s2#0",
        "tmp%19#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "tmp%19#0"
      ]
    },
    "4466": {
      "op": "assert",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0"
      ]
    },
    "4467": {
      "op": "pushbytes 0x00096563686f3a20733262",
      "defined_out": [
        "0x00096563686f3a20733262",
        "bytez#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "0x00096563686f3a20733262"
      ]
    },
    "4480": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "tmp%20#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "tmp%20#0"
      ]
    },
    "4481": {
      "op": "assert",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0"
      ]
    },
    "4482": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "bytez#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "12"
      ]
    },
    "4484": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "tmp%21#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "tmp%21#0"
      ]
    },
    "4485": {
      "op": "assert",
      "defined_out": [
        "bytez#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "bytez#0",
        "reinterpret_biguint%4#0"
      ]
    },
    "4486": {
      "op": "pushbytes 0x0000000000000016",
      "defined_out": [
        "0x0000000000000016",
        "bytez#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "bytez#0",
        "reinterpret_biguint%4#0",
        "0x0000000000000016"
      ]
    },
    "4496": {
      "op": "b==",
      "defined_out": [
        "bytez#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%22#0"
      ]
    },
    "4497": {
      "op": "assert",
      "stack_out": [
        "bytez#0"
      ]
    },
    "4498": {
      "op": "pushbytes 0x6563686f3a203362",
      "defined_out": [
        "0x6563686f3a203362",
        "bytez#0"
      ],
      "stack_out": [
        "bytez#0",
        "0x6563686f3a203362"
      ]
    },
    "4508": {
      "op": "==",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "4509": {
      "op": "assert",
      "stack_out": []
    },
    "4510": {
      "retsub": true,
      "op": "retsub"
    },
    "4511": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_no_args",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "4514": {
      "op": "itxn_begin"
    },
    "4515": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "4517": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "4519": {
      "op": "bytec 24 // method \"no_args()uint64\"",
      "defined_out": [
        "Method(no_args()uint64)"
      ],
      "stack_out": [
        "Method(no_args()uint64)"
      ]
    },
    "4521": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4523": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "4524": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4526": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4527": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4529": {
      "block": "test_no_args_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "4530": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "4532": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "4533": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4536": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "4537": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "4540": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "4541": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "4542": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4543": {
      "op": "btoi",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "4544": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "42"
      ]
    },
    "4546": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "4547": {
      "op": "assert",
      "stack_out": []
    },
    "4548": {
      "op": "itxn_begin"
    },
    "4549": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "4551": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "4553": {
      "op": "bytec 24 // method \"no_args()uint64\"",
      "defined_out": [
        "Method(no_args()uint64)"
      ],
      "stack_out": [
        "Method(no_args()uint64)"
      ]
    },
    "4555": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4557": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "4558": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4560": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4561": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4563": {
      "block": "test_no_args_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "4564": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "4566": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "4567": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%5#0"
      ]
    },
    "4570": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "awst_tmp%1#0"
      ]
    },
    "4571": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "4574": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "4575": {
      "op": "==",
      "defined_out": [
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "4576": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "4577": {
      "op": "bytec 34 // 0x000000000000002a",
      "defined_out": [
        "0x000000000000002a",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "0x000000000000002a"
      ]
    },
    "4579": {
      "op": "b==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "4580": {
      "op": "assert",
      "stack_out": []
    },
    "4581": {
      "op": "itxn_begin"
    },
    "4582": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "4584": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "4586": {
      "op": "bytec 24 // method \"no_args()uint64\"",
      "defined_out": [
        "Method(no_args()uint64)"
      ],
      "stack_out": [
        "Method(no_args()uint64)"
      ]
    },
    "4588": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4590": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "4591": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4593": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4594": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4596": {
      "block": "test_no_args_next_txn@3",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "4597": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "4599": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "4602": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "4603": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "4604": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": []
    },
    "4605": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%3#0"
      ]
    },
    "4607": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "4608": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%13#0"
      ]
    },
    "4611": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "awst_tmp%3#0"
      ]
    },
    "4612": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "4615": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "4616": {
      "op": "==",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "4617": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "4618": {
      "op": "bytec 34 // 0x000000000000002a",
      "defined_out": [
        "0x000000000000002a",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "0x000000000000002a"
      ]
    },
    "4620": {
      "op": "b==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "4621": {
      "op": "assert",
      "stack_out": []
    },
    "4622": {
      "retsub": true,
      "op": "retsub"
    },
    "4623": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_named_tuples",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "4626": {
      "op": "itxn_begin"
    },
    "4627": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "4628": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "4629": {
      "op": "bytec 11 // \"log 1\"",
      "defined_out": [
        "\"log 1\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"log 1\""
      ]
    },
    "4631": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "length%0#0"
      ]
    },
    "4632": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "as_bytes%0#0"
      ]
    },
    "4633": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "length_uint16%0#0"
      ]
    },
    "4636": {
      "op": "bytec 11 // \"log 1\"",
      "stack_out": [
        "val_as_bytes%0#0",
        "length_uint16%0#0",
        "\"log 1\""
      ]
    },
    "4638": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0"
      ]
    },
    "4639": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "4640": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "4641": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "4642": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "4643": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "10"
      ]
    },
    "4645": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "as_bytes%1#0"
      ]
    },
    "4646": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "offset_as_uint16%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "offset_as_uint16%0#0"
      ]
    },
    "4649": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4650": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ]
    },
    "4651": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4652": {
      "op": "intc_3 // 1",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "1"
      ]
    },
    "4653": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "4654": {
      "op": "bytec 11 // \"log 1\"",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0",
        "\"log 1\""
      ]
    },
    "4656": {
      "op": "len",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "length%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0",
        "length%1#0"
      ]
    },
    "4657": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0",
        "as_bytes%2#0"
      ]
    },
    "4658": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "length_uint16%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0",
        "length_uint16%1#0"
      ]
    },
    "4661": {
      "op": "bytec 11 // \"log 1\"",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0",
        "length_uint16%1#0",
        "\"log 1\""
      ]
    },
    "4663": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0",
        "encoded_value%1#0"
      ]
    },
    "4664": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "4665": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "0x"
      ]
    },
    "4666": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%1#0",
        "0x",
        "val_as_bytes%1#0"
      ]
    },
    "4667": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "4668": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%5#0",
        "10"
      ]
    },
    "4670": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%5#0",
        "as_bytes%3#0"
      ]
    },
    "4671": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%1#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%5#0",
        "offset_as_uint16%1#0"
      ]
    },
    "4674": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4675": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%1#0"
      ]
    },
    "4676": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "4677": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4678": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "4680": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4682": {
      "op": "bytec 35 // method \"logs_are_equal((uint64,string),(uint64,string))bool\"",
      "defined_out": [
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ]
    },
    "4684": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4686": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "4688": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4690": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "4691": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4693": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4694": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4696": {
      "block": "test_named_tuples_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "4697": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "4699": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "4700": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4703": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "4704": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "4707": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "4708": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "4709": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4710": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "4711": {
      "op": "getbit",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "4712": {
      "op": "assert",
      "stack_out": []
    },
    "4713": {
      "op": "itxn_begin"
    },
    "4714": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "4715": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "4716": {
      "op": "bytec 36 // \"log 2\"",
      "defined_out": [
        "\"log 2\"",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "\"log 2\""
      ]
    },
    "4718": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "length%2#0"
      ]
    },
    "4719": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "as_bytes%4#0"
      ]
    },
    "4720": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "length_uint16%2#0"
      ]
    },
    "4723": {
      "op": "bytec 36 // \"log 2\"",
      "stack_out": [
        "val_as_bytes%2#0",
        "length_uint16%2#0",
        "\"log 2\""
      ]
    },
    "4725": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "encoded_value%2#0"
      ]
    },
    "4726": {
      "op": "swap",
      "stack_out": [
        "encoded_value%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "4727": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "encoded_value%2#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "0x"
      ]
    },
    "4728": {
      "op": "swap",
      "stack_out": [
        "encoded_value%2#0",
        "0x",
        "val_as_bytes%2#0"
      ]
    },
    "4729": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "4730": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "encoded_tuple_buffer%9#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%9#0",
        "10"
      ]
    },
    "4732": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "encoded_tuple_buffer%9#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%9#0",
        "as_bytes%5#0"
      ]
    },
    "4733": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_value%2#0",
        "offset_as_uint16%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%9#0",
        "offset_as_uint16%2#0"
      ]
    },
    "4736": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "4737": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_value%2#0"
      ]
    },
    "4738": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4739": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "1"
      ]
    },
    "4740": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0"
      ]
    },
    "4741": {
      "op": "bytec 11 // \"log 1\"",
      "defined_out": [
        "\"log 1\"",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "\"log 1\""
      ]
    },
    "4743": {
      "op": "len",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "length%3#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "length%3#0"
      ]
    },
    "4744": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "as_bytes%6#0"
      ]
    },
    "4745": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "length_uint16%3#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "length_uint16%3#0"
      ]
    },
    "4748": {
      "op": "bytec 11 // \"log 1\"",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "length_uint16%3#0",
        "\"log 1\""
      ]
    },
    "4750": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%3#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "encoded_value%3#0"
      ]
    },
    "4751": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%3#0",
        "val_as_bytes%3#0"
      ]
    },
    "4752": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%3#0",
        "val_as_bytes%3#0",
        "0x"
      ]
    },
    "4753": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%3#0",
        "0x",
        "val_as_bytes%3#0"
      ]
    },
    "4754": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%13#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "4755": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%13#0",
        "10"
      ]
    },
    "4757": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%13#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%13#0",
        "as_bytes%7#0"
      ]
    },
    "4758": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%13#0",
        "encoded_value%3#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%13#0",
        "offset_as_uint16%3#0"
      ]
    },
    "4761": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "4762": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "encoded_value%3#0"
      ]
    },
    "4763": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "4764": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4765": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "4767": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4769": {
      "op": "bytec 35 // method \"logs_are_equal((uint64,string),(uint64,string))bool\"",
      "defined_out": [
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ]
    },
    "4771": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4773": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "4775": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4777": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "4778": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4780": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4781": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4783": {
      "block": "test_named_tuples_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "4784": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "4786": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "4787": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "4790": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "awst_tmp%1#0"
      ]
    },
    "4791": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "4794": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "4795": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "4796": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "4797": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "4798": {
      "op": "getbit",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "4799": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "4800": {
      "op": "assert",
      "stack_out": []
    },
    "4801": {
      "retsub": true,
      "op": "retsub"
    }
  }
}